
csro_general_ctrl_2021_09_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  0800c240  0800c240  0001c240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c47c  0800c47c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c47c  0800c47c  0001c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c484  0800c484  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c484  0800c484  0001c484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c488  0800c488  0001c488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800c48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00006a38  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20006b84  20006b84  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f358  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e10  00000000  00000000  0004f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb8  00000000  00000000  000552e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a78  00000000  00000000  00056fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002862c  00000000  00000000  00058a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002800f  00000000  00000000  00081044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5e75  00000000  00000000  000a9053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018eec8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ad4  00000000  00000000  0018ef1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c228 	.word	0x0800c228

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800c228 	.word	0x0800c228

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000ee4:	4a75      	ldr	r2, [pc, #468]	; (80010bc <MX_ADC1_Init+0x1ec>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ee8:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000eea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ef6:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000efc:	4b6e      	ldr	r3, [pc, #440]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b6b      	ldr	r3, [pc, #428]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f12:	4a6b      	ldr	r2, [pc, #428]	; (80010c0 <MX_ADC1_Init+0x1f0>)
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b68      	ldr	r3, [pc, #416]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000f1c:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f1e:	220d      	movs	r2, #13
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f22:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f30:	4861      	ldr	r0, [pc, #388]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f32:	f002 fd2d 	bl	8003990 <HAL_ADC_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f3c:	f000 fda0 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f40:	230d      	movs	r3, #13
 8000f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4859      	ldr	r0, [pc, #356]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f52:	f002 ffd9 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f5c:	f000 fd90 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f60:	230c      	movs	r3, #12
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4852      	ldr	r0, [pc, #328]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f6e:	f002 ffcb 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f78:	f000 fd82 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f80:	2303      	movs	r3, #3
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	484b      	ldr	r0, [pc, #300]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000f8a:	f002 ffbd 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f94:	f000 fd74 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f98:	2309      	movs	r3, #9
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4844      	ldr	r0, [pc, #272]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000fa6:	f002 ffaf 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fb0:	f000 fd66 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	483d      	ldr	r0, [pc, #244]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000fc2:	f002 ffa1 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000fcc:	f000 fd58 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4836      	ldr	r0, [pc, #216]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000fde:	f002 ff93 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fe8:	f000 fd4a 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	482f      	ldr	r0, [pc, #188]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8000ffa:	f002 ff85 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001004:	f000 fd3c 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001008:	2305      	movs	r3, #5
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8001016:	f002 ff77 	bl	8003f08 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001020:	f000 fd2e 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001024:	2306      	movs	r3, #6
 8001026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001028:	2309      	movs	r3, #9
 800102a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8001032:	f002 ff69 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800103c:	f000 fd20 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001040:	2308      	movs	r3, #8
 8001042:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001044:	230a      	movs	r3, #10
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	481a      	ldr	r0, [pc, #104]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 800104e:	f002 ff5b 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001058:	f000 fd12 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800105c:	2310      	movs	r3, #16
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001060:	230b      	movs	r3, #11
 8001062:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 800106a:	f002 ff4d 	bl	8003f08 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001074:	f000 fd04 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001078:	2311      	movs	r3, #17
 800107a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800107c:	230c      	movs	r3, #12
 800107e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 8001086:	f002 ff3f 	bl	8003f08 <HAL_ADC_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001090:	f000 fcf6 	bl	8001a80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001094:	2312      	movs	r3, #18
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001098:	230d      	movs	r3, #13
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_ADC1_Init+0x1e8>)
 80010a2:	f002 ff31 	bl	8003f08 <HAL_ADC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80010ac:	f000 fce8 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20004b40 	.word	0x20004b40
 80010bc:	40012000 	.word	0x40012000
 80010c0:	0f000001 	.word	0x0f000001

080010c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a4d      	ldr	r2, [pc, #308]	; (8001218 <HAL_ADC_MspInit+0x154>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f040 8094 	bne.w	8001210 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_ADC_MspInit+0x158>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_ADC_MspInit+0x158>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6453      	str	r3, [r2, #68]	; 0x44
 80010f8:	4b48      	ldr	r3, [pc, #288]	; (800121c <HAL_ADC_MspInit+0x158>)
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	4b44      	ldr	r3, [pc, #272]	; (800121c <HAL_ADC_MspInit+0x158>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a43      	ldr	r2, [pc, #268]	; (800121c <HAL_ADC_MspInit+0x158>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_ADC_MspInit+0x158>)
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_ADC_MspInit+0x158>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a3c      	ldr	r2, [pc, #240]	; (800121c <HAL_ADC_MspInit+0x158>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_ADC_MspInit+0x158>)
 8001132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_ADC_MspInit+0x158>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a35      	ldr	r2, [pc, #212]	; (800121c <HAL_ADC_MspInit+0x158>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_ADC_MspInit+0x158>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = DP_VF3_Pin|DP_VF2_Pin|DP_VF1_Pin;
 8001158:	230d      	movs	r3, #13
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	482d      	ldr	r0, [pc, #180]	; (8001220 <HAL_ADC_MspInit+0x15c>)
 800116c:	f003 fe5a 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF1_Pin|NTC_VF2_Pin|NTC_VF3_Pin|NTC_VF4_Pin
 8001170:	2379      	movs	r3, #121	; 0x79
 8001172:	61fb      	str	r3, [r7, #28]
                          |NTC_VF5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <HAL_ADC_MspInit+0x160>)
 8001184:	f003 fe4e 	bl	8004e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF6_Pin|VALVE_FEEDBACK_Pin;
 8001188:	2303      	movs	r3, #3
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4823      	ldr	r0, [pc, #140]	; (8001228 <HAL_ADC_MspInit+0x164>)
 800119c:	f003 fe42 	bl	8004e24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011a0:	4b22      	ldr	r3, [pc, #136]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_ADC_MspInit+0x16c>)
 80011a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011e4:	4811      	ldr	r0, [pc, #68]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011e6:	f003 fa1b 	bl	8004620 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80011f0:	f000 fc46 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
 80011fa:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_ADC_MspInit+0x168>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	2105      	movs	r1, #5
 8001204:	2012      	movs	r0, #18
 8001206:	f003 f9e1 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800120a:	2012      	movs	r0, #18
 800120c:	f003 f9fa 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40012000 	.word	0x40012000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020800 	.word	0x40020800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	20004b88 	.word	0x20004b88
 8001230:	40026410 	.word	0x40026410

08001234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_DMA_Init+0xd8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_DMA_Init+0xd8>)
 8001244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_DMA_Init+0xd8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_DMA_Init+0xd8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a2b      	ldr	r2, [pc, #172]	; (800130c <MX_DMA_Init+0xd8>)
 8001260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_DMA_Init+0xd8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	200c      	movs	r0, #12
 8001278:	f003 f9a8 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800127c:	200c      	movs	r0, #12
 800127e:	f003 f9c1 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	200e      	movs	r0, #14
 8001288:	f003 f9a0 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800128c:	200e      	movs	r0, #14
 800128e:	f003 f9b9 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2010      	movs	r0, #16
 8001298:	f003 f998 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800129c:	2010      	movs	r0, #16
 800129e:	f003 f9b1 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2011      	movs	r0, #17
 80012a8:	f003 f990 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012ac:	2011      	movs	r0, #17
 80012ae:	f003 f9a9 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f003 f988 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f003 f9a1 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2039      	movs	r0, #57	; 0x39
 80012c8:	f003 f980 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012cc:	2039      	movs	r0, #57	; 0x39
 80012ce:	f003 f999 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	203a      	movs	r0, #58	; 0x3a
 80012d8:	f003 f978 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012dc:	203a      	movs	r0, #58	; 0x3a
 80012de:	f003 f991 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2105      	movs	r1, #5
 80012e6:	2045      	movs	r0, #69	; 0x45
 80012e8:	f003 f970 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012ec:	2045      	movs	r0, #69	; 0x45
 80012ee:	f003 f989 	bl	8004604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2046      	movs	r0, #70	; 0x46
 80012f8:	f003 f968 	bl	80045cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012fc:	2046      	movs	r0, #70	; 0x46
 80012fe:	f003 f981 	bl	8004604 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue01_attributes);
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <MX_FREERTOS_Init+0xa8>)
 8001316:	2102      	movs	r1, #2
 8001318:	2010      	movs	r0, #16
 800131a:	f007 ff2a 	bl	8009172 <osMessageQueueNew>
 800131e:	4603      	mov	r3, r0
 8001320:	4a26      	ldr	r2, [pc, #152]	; (80013bc <MX_FREERTOS_Init+0xac>)
 8001322:	6013      	str	r3, [r2, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue02_attributes);
 8001324:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <MX_FREERTOS_Init+0xb0>)
 8001326:	2102      	movs	r1, #2
 8001328:	2010      	movs	r0, #16
 800132a:	f007 ff22 	bl	8009172 <osMessageQueueNew>
 800132e:	4603      	mov	r3, r0
 8001330:	4a24      	ldr	r2, [pc, #144]	; (80013c4 <MX_FREERTOS_Init+0xb4>)
 8001332:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <MX_FREERTOS_Init+0xb8>)
 8001336:	2100      	movs	r1, #0
 8001338:	4824      	ldr	r0, [pc, #144]	; (80013cc <MX_FREERTOS_Init+0xbc>)
 800133a:	f007 fe6d 	bl	8009018 <osThreadNew>
 800133e:	4603      	mov	r3, r0
 8001340:	4a23      	ldr	r2, [pc, #140]	; (80013d0 <MX_FREERTOS_Init+0xc0>)
 8001342:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <MX_FREERTOS_Init+0xc4>)
 8001346:	2100      	movs	r1, #0
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <MX_FREERTOS_Init+0xc8>)
 800134a:	f007 fe65 	bl	8009018 <osThreadNew>
 800134e:	4603      	mov	r3, r0
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <MX_FREERTOS_Init+0xcc>)
 8001352:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <MX_FREERTOS_Init+0xd0>)
 8001356:	2100      	movs	r1, #0
 8001358:	4822      	ldr	r0, [pc, #136]	; (80013e4 <MX_FREERTOS_Init+0xd4>)
 800135a:	f007 fe5d 	bl	8009018 <osThreadNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <MX_FREERTOS_Init+0xd8>)
 8001362:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8001364:	4a21      	ldr	r2, [pc, #132]	; (80013ec <MX_FREERTOS_Init+0xdc>)
 8001366:	2100      	movs	r1, #0
 8001368:	4821      	ldr	r0, [pc, #132]	; (80013f0 <MX_FREERTOS_Init+0xe0>)
 800136a:	f007 fe55 	bl	8009018 <osThreadNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <MX_FREERTOS_Init+0xe4>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <MX_FREERTOS_Init+0xe8>)
 8001376:	2100      	movs	r1, #0
 8001378:	4820      	ldr	r0, [pc, #128]	; (80013fc <MX_FREERTOS_Init+0xec>)
 800137a:	f007 fe4d 	bl	8009018 <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <MX_FREERTOS_Init+0xf0>)
 8001382:	6013      	str	r3, [r2, #0]

  /* creation of Task06 */
  Task06Handle = osThreadNew(StartTask06, NULL, &Task06_attributes);
 8001384:	4a1f      	ldr	r2, [pc, #124]	; (8001404 <MX_FREERTOS_Init+0xf4>)
 8001386:	2100      	movs	r1, #0
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <MX_FREERTOS_Init+0xf8>)
 800138a:	f007 fe45 	bl	8009018 <osThreadNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a1e      	ldr	r2, [pc, #120]	; (800140c <MX_FREERTOS_Init+0xfc>)
 8001392:	6013      	str	r3, [r2, #0]

  /* creation of Task07 */
  Task07Handle = osThreadNew(StartTask07, NULL, &Task07_attributes);
 8001394:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <MX_FREERTOS_Init+0x100>)
 8001396:	2100      	movs	r1, #0
 8001398:	481e      	ldr	r0, [pc, #120]	; (8001414 <MX_FREERTOS_Init+0x104>)
 800139a:	f007 fe3d 	bl	8009018 <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <MX_FREERTOS_Init+0x108>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* creation of Task08 */
  Task08Handle = osThreadNew(StartTask08, NULL, &Task08_attributes);
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <MX_FREERTOS_Init+0x10c>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <MX_FREERTOS_Init+0x110>)
 80013aa:	f007 fe35 	bl	8009018 <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <MX_FREERTOS_Init+0x114>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	0800c3c8 	.word	0x0800c3c8
 80013bc:	20004bf0 	.word	0x20004bf0
 80013c0:	0800c3e0 	.word	0x0800c3e0
 80013c4:	20004c30 	.word	0x20004c30
 80013c8:	0800c2a8 	.word	0x0800c2a8
 80013cc:	08001429 	.word	0x08001429
 80013d0:	20004c04 	.word	0x20004c04
 80013d4:	0800c2cc 	.word	0x0800c2cc
 80013d8:	08001439 	.word	0x08001439
 80013dc:	20004bec 	.word	0x20004bec
 80013e0:	0800c2f0 	.word	0x0800c2f0
 80013e4:	08001449 	.word	0x08001449
 80013e8:	20004c24 	.word	0x20004c24
 80013ec:	0800c314 	.word	0x0800c314
 80013f0:	08001459 	.word	0x08001459
 80013f4:	20004bf4 	.word	0x20004bf4
 80013f8:	0800c338 	.word	0x0800c338
 80013fc:	08001469 	.word	0x08001469
 8001400:	20004c28 	.word	0x20004c28
 8001404:	0800c35c 	.word	0x0800c35c
 8001408:	08001481 	.word	0x08001481
 800140c:	20004c08 	.word	0x20004c08
 8001410:	0800c380 	.word	0x0800c380
 8001414:	0800149d 	.word	0x0800149d
 8001418:	20004bfc 	.word	0x20004bfc
 800141c:	0800c3a4 	.word	0x0800c3a4
 8001420:	080014b3 	.word	0x080014b3
 8001424:	20004c00 	.word	0x20004c00

08001428 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f007 fe83 	bl	800913c <osDelay>
 8001436:	e7fb      	b.n	8001430 <StartTask01+0x8>

08001438 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f007 fe7b 	bl	800913c <osDelay>
 8001446:	e7fb      	b.n	8001440 <StartTask02+0x8>

08001448 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f007 fe73 	bl	800913c <osDelay>
 8001456:	e7fb      	b.n	8001450 <StartTask03+0x8>

08001458 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f007 fe6b 	bl	800913c <osDelay>
 8001466:	e7fb      	b.n	8001460 <StartTask04+0x8>

08001468 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  fnd_output_stepper_init();
 8001470:	f002 f994 	bl	800379c <fnd_output_stepper_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 8001474:	200a      	movs	r0, #10
 8001476:	f007 fe61 	bl	800913c <osDelay>
    fnd_output_stepper_10ms_tick();
 800147a:	f002 fa2f 	bl	80038dc <fnd_output_stepper_10ms_tick>
    osDelay(10);
 800147e:	e7f9      	b.n	8001474 <StartTask05+0xc>

08001480 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  fnd_input_peripheral_init();
 8001488:	f001 fa72 	bl	8002970 <fnd_input_peripheral_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f007 fe55 	bl	800913c <osDelay>
    fnd_input_update_value();
 8001492:	f001 fa75 	bl	8002980 <fnd_input_update_value>
    fnd_output_update_value();
 8001496:	f001 fecd 	bl	8003234 <fnd_output_update_value>
    osDelay(100);
 800149a:	e7f7      	b.n	800148c <StartTask06+0xc>

0800149c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f007 fe48 	bl	800913c <osDelay>
    fnd_input_update_sht_value();
 80014ac:	f001 fb5e 	bl	8002b6c <fnd_input_update_sht_value>
    osDelay(1000);
 80014b0:	e7f8      	b.n	80014a4 <StartTask07+0x8>

080014b2 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80014ba:	2064      	movs	r0, #100	; 0x64
 80014bc:	f007 fe3e 	bl	800913c <osDelay>
 80014c0:	e7fb      	b.n	80014ba <StartTask08+0x8>
	...

080014c4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	4b92      	ldr	r3, [pc, #584]	; (8001728 <MX_GPIO_Init+0x264>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a91      	ldr	r2, [pc, #580]	; (8001728 <MX_GPIO_Init+0x264>)
 80014e4:	f043 0310 	orr.w	r3, r3, #16
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <MX_GPIO_Init+0x264>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b8b      	ldr	r3, [pc, #556]	; (8001728 <MX_GPIO_Init+0x264>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a8a      	ldr	r2, [pc, #552]	; (8001728 <MX_GPIO_Init+0x264>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b88      	ldr	r3, [pc, #544]	; (8001728 <MX_GPIO_Init+0x264>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <MX_GPIO_Init+0x264>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a83      	ldr	r2, [pc, #524]	; (8001728 <MX_GPIO_Init+0x264>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b81      	ldr	r3, [pc, #516]	; (8001728 <MX_GPIO_Init+0x264>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <MX_GPIO_Init+0x264>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <MX_GPIO_Init+0x264>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <MX_GPIO_Init+0x264>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b76      	ldr	r3, [pc, #472]	; (8001728 <MX_GPIO_Init+0x264>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a75      	ldr	r2, [pc, #468]	; (8001728 <MX_GPIO_Init+0x264>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b73      	ldr	r3, [pc, #460]	; (8001728 <MX_GPIO_Init+0x264>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <MX_GPIO_Init+0x264>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <MX_GPIO_Init+0x264>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b6c      	ldr	r3, [pc, #432]	; (8001728 <MX_GPIO_Init+0x264>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 8001582:	2200      	movs	r2, #0
 8001584:	f24f 51ff 	movw	r1, #62975	; 0xf5ff
 8001588:	4868      	ldr	r0, [pc, #416]	; (800172c <MX_GPIO_Init+0x268>)
 800158a:	f003 fdff 	bl	800518c <HAL_GPIO_WritePin>
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001594:	4866      	ldr	r0, [pc, #408]	; (8001730 <MX_GPIO_Init+0x26c>)
 8001596:	f003 fdf9 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 800159a:	2200      	movs	r2, #0
 800159c:	f24c 7104 	movw	r1, #50948	; 0xc704
 80015a0:	4864      	ldr	r0, [pc, #400]	; (8001734 <MX_GPIO_Init+0x270>)
 80015a2:	f003 fdf3 	bl	800518c <HAL_GPIO_WritePin>
                          |RLY6_Pin|RLY5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_B1_Pin|EN4_Pin|EN2_Pin, GPIO_PIN_RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f248 4110 	movw	r1, #33808	; 0x8410
 80015ac:	4862      	ldr	r0, [pc, #392]	; (8001738 <MX_GPIO_Init+0x274>)
 80015ae:	f003 fded 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015b8:	4860      	ldr	r0, [pc, #384]	; (800173c <MX_GPIO_Init+0x278>)
 80015ba:	f003 fde7 	bl	800518c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 80015be:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 80015c2:	61fb      	str	r3, [r7, #28]
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	4855      	ldr	r0, [pc, #340]	; (800172c <MX_GPIO_Init+0x268>)
 80015d8:	f003 fc24 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin;
 80015dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	484e      	ldr	r0, [pc, #312]	; (8001730 <MX_GPIO_Init+0x26c>)
 80015f6:	f003 fc15 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015fa:	2303      	movs	r3, #3
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	484c      	ldr	r0, [pc, #304]	; (8001740 <MX_GPIO_Init+0x27c>)
 800160e:	f003 fc09 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8001612:	f44f 7399 	mov.w	r3, #306	; 0x132
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4842      	ldr	r0, [pc, #264]	; (8001730 <MX_GPIO_Init+0x26c>)
 8001628:	f003 fbfc 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_12;
 800162c:	f241 0386 	movw	r3, #4230	; 0x1086
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	483e      	ldr	r0, [pc, #248]	; (800173c <MX_GPIO_Init+0x278>)
 8001642:	f003 fbef 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8001646:	f24c 7304 	movw	r3, #50948	; 0xc704
 800164a:	61fb      	str	r3, [r7, #28]
                          |RLY6_Pin|RLY5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4835      	ldr	r0, [pc, #212]	; (8001734 <MX_GPIO_Init+0x270>)
 8001660:	f003 fbe0 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	482e      	ldr	r0, [pc, #184]	; (8001734 <MX_GPIO_Init+0x270>)
 800167a:	f003 fbd3 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_B1_Pin|EN4_Pin|EN2_Pin;
 800167e:	f248 4310 	movw	r3, #33808	; 0x8410
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4828      	ldr	r0, [pc, #160]	; (8001738 <MX_GPIO_Init+0x274>)
 8001698:	f003 fbc4 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 800169c:	f647 030f 	movw	r3, #30735	; 0x780f
 80016a0:	61fb      	str	r3, [r7, #28]
                          |IDB4_Pin|IDB3_Pin|IDB2_Pin|IDB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4821      	ldr	r0, [pc, #132]	; (8001738 <MX_GPIO_Init+0x274>)
 80016b2:	f003 fbb7 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN1_Pin;
 80016b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481b      	ldr	r0, [pc, #108]	; (800173c <MX_GPIO_Init+0x278>)
 80016d0:	f003 fba8 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDA4_Pin;
 80016d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IDA4_GPIO_Port, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4814      	ldr	r0, [pc, #80]	; (800173c <MX_GPIO_Init+0x278>)
 80016ea:	f003 fb9b 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IDA3_Pin|IDA2_Pin|IDA1_Pin;
 80016ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	480b      	ldr	r0, [pc, #44]	; (8001730 <MX_GPIO_Init+0x26c>)
 8001704:	f003 fb8e 	bl	8004e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4807      	ldr	r0, [pc, #28]	; (8001738 <MX_GPIO_Init+0x274>)
 800171c:	f003 fb82 	bl	8004e24 <HAL_GPIO_Init>

}
 8001720:	bf00      	nop
 8001722:	3730      	adds	r7, #48	; 0x30
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40021000 	.word	0x40021000
 8001730:	40020800 	.word	0x40020800
 8001734:	40020400 	.word	0x40020400
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40020000 	.word	0x40020000
 8001740:	40021c00 	.word	0x40021c00

08001744 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_I2C1_Init+0x50>)
 800174a:	4a13      	ldr	r2, [pc, #76]	; (8001798 <MX_I2C1_Init+0x54>)
 800174c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_I2C1_Init+0x50>)
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <MX_I2C1_Init+0x58>)
 8001752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_I2C1_Init+0x50>)
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_I2C1_Init+0x50>)
 8001782:	f003 fd1d 	bl	80051c0 <HAL_I2C_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800178c:	f000 f978 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20004c88 	.word	0x20004c88
 8001798:	40005400 	.word	0x40005400
 800179c:	000186a0 	.word	0x000186a0

080017a0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <MX_I2C3_Init+0x54>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <MX_I2C3_Init+0x58>)
 80017ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_I2C3_Init+0x50>)
 80017de:	f003 fcef 	bl	80051c0 <HAL_I2C_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 f94a 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20004c34 	.word	0x20004c34
 80017f4:	40005c00 	.word	0x40005c00
 80017f8:	000186a0 	.word	0x000186a0

080017fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a42      	ldr	r2, [pc, #264]	; (8001924 <HAL_I2C_MspInit+0x128>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12c      	bne.n	8001878 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a40      	ldr	r2, [pc, #256]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800183a:	23c0      	movs	r3, #192	; 0xc0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183e:	2312      	movs	r3, #18
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800184a:	2304      	movs	r3, #4
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4835      	ldr	r0, [pc, #212]	; (800192c <HAL_I2C_MspInit+0x130>)
 8001856:	f003 fae5 	bl	8004e24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001876:	e050      	b.n	800191a <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <HAL_I2C_MspInit+0x134>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d14b      	bne.n	800191a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a20      	ldr	r2, [pc, #128]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018cc:	2304      	movs	r3, #4
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_I2C_MspInit+0x138>)
 80018d8:	f003 faa4 	bl	8004e24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e2:	2312      	movs	r3, #18
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018ee:	2304      	movs	r3, #4
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <HAL_I2C_MspInit+0x13c>)
 80018fa:	f003 fa93 	bl	8004e24 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_I2C_MspInit+0x12c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
}
 800191a:	bf00      	nop
 800191c:	3730      	adds	r7, #48	; 0x30
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40005400 	.word	0x40005400
 8001928:	40023800 	.word	0x40023800
 800192c:	40020400 	.word	0x40020400
 8001930:	40005c00 	.word	0x40005c00
 8001934:	40020800 	.word	0x40020800
 8001938:	40020000 	.word	0x40020000

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f001 ffe4 	bl	800390c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f820 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f7ff fdbc 	bl	80014c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800194c:	f7ff fc72 	bl	8001234 <MX_DMA_Init>
  MX_ADC1_Init();
 8001950:	f7ff fabe 	bl	8000ed0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001954:	f7ff fef6 	bl	8001744 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001958:	f7ff ff22 	bl	80017a0 <MX_I2C3_Init>
  MX_TIM1_Init();
 800195c:	f000 f9e4 	bl	8001d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001960:	f000 fa92 	bl	8001e88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001964:	f000 fb06 	bl	8001f74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001968:	f000 fc5a 	bl	8002220 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800196c:	f000 fc82 	bl	8002274 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001970:	f000 fcaa 	bl	80022c8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001974:	f000 fcd2 	bl	800231c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001978:	f007 fb04 	bl	8008f84 <osKernelInitialize>
  MX_FREERTOS_Init();
 800197c:	f7ff fcc8 	bl	8001310 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001980:	f007 fb24 	bl	8008fcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001984:	e7fe      	b.n	8001984 <main+0x48>
	...

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	; 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00a f96c 	bl	800bc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <SystemClock_Config+0xcc>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <SystemClock_Config+0xcc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <SystemClock_Config+0xd0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <SystemClock_Config+0xd0>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <SystemClock_Config+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e4:	2302      	movs	r3, #2
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ec:	2310      	movs	r3, #16
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f0:	2302      	movs	r3, #2
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019f8:	2308      	movs	r3, #8
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019fc:	23a8      	movs	r3, #168	; 0xa8
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a04:	2304      	movs	r3, #4
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a08:	f107 0320 	add.w	r3, r7, #32
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f004 fc9b 	bl	8006348 <HAL_RCC_OscConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a18:	f000 f832 	bl	8001a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2105      	movs	r1, #5
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fefc 	bl	8006838 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a46:	f000 f81b 	bl	8001a80 <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3750      	adds	r7, #80	; 0x50
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a6e:	f001 ff6f 	bl	8003950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40002000 	.word	0x40002000

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_MspInit+0x54>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_MspInit+0x54>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_MspInit+0x54>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_MspInit+0x54>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	210f      	movs	r1, #15
 8001ace:	f06f 0001 	mvn.w	r0, #1
 8001ad2:	f002 fd7b 	bl	80045cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	202d      	movs	r0, #45	; 0x2d
 8001afa:	f002 fd67 	bl	80045cc <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001afe:	202d      	movs	r0, #45	; 0x2d
 8001b00:	f002 fd80 	bl	8004604 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b20:	f107 0210 	add.w	r2, r7, #16
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 f854 	bl	8006bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b30:	f005 f82a 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_InitTick+0xa8>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0xac>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_InitTick+0xb0>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_InitTick+0xac>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_InitTick+0xac>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_InitTick+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_InitTick+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_InitTick+0xac>)
 8001b6a:	f005 f867 	bl	8006c3c <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b74:	4806      	ldr	r0, [pc, #24]	; (8001b90 <HAL_InitTick+0xac>)
 8001b76:	f005 f8b1 	bl	8006cdc <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	20004cdc 	.word	0x20004cdc
 8001b94:	40002000 	.word	0x40002000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream1_IRQHandler+0x10>)
 8001bca:	f002 fec1 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20004ebc 	.word	0x20004ebc

08001bd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream3_IRQHandler+0x10>)
 8001bde:	f002 feb7 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20004f60 	.word	0x20004f60

08001bec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Stream5_IRQHandler+0x10>)
 8001bf2:	f002 fead 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20004dfc 	.word	0x20004dfc

08001c00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <DMA1_Stream6_IRQHandler+0x10>)
 8001c06:	f002 fea3 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200050e0 	.word	0x200050e0

08001c14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <ADC_IRQHandler+0x10>)
 8001c1a:	f001 fefc 	bl	8003a16 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004b40 	.word	0x20004b40

08001c28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM3_IRQHandler+0x10>)
 8001c2e:	f005 fa9f 	bl	8007170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20004d24 	.word	0x20004d24

08001c3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <USART1_IRQHandler+0x10>)
 8001c42:	f006 fb4b 	bl	80082dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20005140 	.word	0x20005140

08001c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART2_IRQHandler+0x10>)
 8001c56:	f006 fb41 	bl	80082dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200051c8 	.word	0x200051c8

08001c64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <USART3_IRQHandler+0x10>)
 8001c6a:	f006 fb37 	bl	80082dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004f1c 	.word	0x20004f1c

08001c78 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c7e:	f005 fa77 	bl	8007170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20004cdc 	.word	0x20004cdc

08001c8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA2_Stream0_IRQHandler+0x10>)
 8001c92:	f002 fe5d 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004b88 	.word	0x20004b88

08001ca0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA2_Stream1_IRQHandler+0x10>)
 8001ca6:	f002 fe53 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20004e5c 	.word	0x20004e5c

08001cb4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA2_Stream2_IRQHandler+0x10>)
 8001cba:	f002 fe49 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20005080 	.word	0x20005080

08001cc8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <DMA2_Stream6_IRQHandler+0x10>)
 8001cce:	f002 fe3f 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20005020 	.word	0x20005020

08001cdc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <DMA2_Stream7_IRQHandler+0x10>)
 8001ce2:	f002 fe35 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20004fc0 	.word	0x20004fc0

08001cf0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <USART6_IRQHandler+0x10>)
 8001cf6:	f006 faf1 	bl	80082dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20005184 	.word	0x20005184

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <SystemInit+0x20>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SystemInit+0x20>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f009 ff87 	bl	800bc74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d66:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d68:	4a46      	ldr	r2, [pc, #280]	; (8001e84 <MX_TIM1_Init+0x15c>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001d6c:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d6e:	22a7      	movs	r2, #167	; 0xa7
 8001d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d78:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b3f      	ldr	r3, [pc, #252]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b3c      	ldr	r3, [pc, #240]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d92:	483b      	ldr	r0, [pc, #236]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001d94:	f004 ff52 	bl	8006c3c <HAL_TIM_Base_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d9e:	f7ff fe6f 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dac:	4619      	mov	r1, r3
 8001dae:	4834      	ldr	r0, [pc, #208]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001db0:	f005 fc44 	bl	800763c <HAL_TIM_ConfigClockSource>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dba:	f7ff fe61 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dbe:	4830      	ldr	r0, [pc, #192]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001dc0:	f004 fffc 	bl	8006dbc <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dca:	f7ff fe59 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001dde:	f006 f94d 	bl	800807c <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001de8:	f7ff fe4a 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	; 0x60
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 8001df0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	481b      	ldr	r0, [pc, #108]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001e14:	f005 fb50 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001e1e:	f7ff fe2f 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8001e22:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4813      	ldr	r0, [pc, #76]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001e32:	f005 fb41 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e3c:	f7ff fe20 	bl	8001a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001e64:	f006 f986 	bl	8008174 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001e6e:	f7ff fe07 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e72:	4803      	ldr	r0, [pc, #12]	; (8001e80 <MX_TIM1_Init+0x158>)
 8001e74:	f000 f974 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3758      	adds	r7, #88	; 0x58
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20004d6c 	.word	0x20004d6c
 8001e84:	40010000 	.word	0x40010000

08001e88 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08e      	sub	sp, #56	; 0x38
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	f107 0320 	add.w	r3, r7, #32
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001ec2:	22a7      	movs	r2, #167	; 0xa7
 8001ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ee0:	4823      	ldr	r0, [pc, #140]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001ee2:	f004 feab 	bl	8006c3c <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001eec:	f7ff fdc8 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001efa:	4619      	mov	r1, r3
 8001efc:	481c      	ldr	r0, [pc, #112]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001efe:	f005 fb9d 	bl	800763c <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f08:	f7ff fdba 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0c:	4818      	ldr	r0, [pc, #96]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001f0e:	f004 ff55 	bl	8006dbc <HAL_TIM_PWM_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f18:	f7ff fdb2 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4811      	ldr	r0, [pc, #68]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001f2c:	f006 f8a6 	bl	800807c <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f36:	f7ff fda3 	bl	8001a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3a:	2360      	movs	r3, #96	; 0x60
 8001f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2204      	movs	r2, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001f54:	f005 fab0 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f5e:	f7ff fd8f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f62:	4803      	ldr	r0, [pc, #12]	; (8001f70 <MX_TIM2_Init+0xe8>)
 8001f64:	f000 f8fc 	bl	8002160 <HAL_TIM_MspPostInit>

}
 8001f68:	bf00      	nop
 8001f6a:	3738      	adds	r7, #56	; 0x38
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20004db4 	.word	0x20004db4

08001f74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7a:	f107 0318 	add.w	r3, r7, #24
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f92:	463b      	mov	r3, r7
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fa0:	4a31      	ldr	r2, [pc, #196]	; (8002068 <MX_TIM3_Init+0xf4>)
 8001fa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc4:	4827      	ldr	r0, [pc, #156]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fc6:	f004 fe39 	bl	8006c3c <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001fd0:	f7ff fd56 	bl	8001a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0318 	add.w	r3, r7, #24
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4820      	ldr	r0, [pc, #128]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001fe2:	f005 fb2b 	bl	800763c <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fec:	f7ff fd48 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ff0:	481c      	ldr	r0, [pc, #112]	; (8002064 <MX_TIM3_Init+0xf0>)
 8001ff2:	f004 ff3c 	bl	8006e6e <HAL_TIM_IC_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ffc:	f7ff fd40 	bl	8001a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4619      	mov	r1, r3
 800200e:	4815      	ldr	r0, [pc, #84]	; (8002064 <MX_TIM3_Init+0xf0>)
 8002010:	f006 f834 	bl	800807c <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800201a:	f7ff fd31 	bl	8001a80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002022:	2301      	movs	r3, #1
 8002024:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <MX_TIM3_Init+0xf0>)
 8002036:	f005 f9a3 	bl	8007380 <HAL_TIM_IC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002040:	f7ff fd1e 	bl	8001a80 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002044:	463b      	mov	r3, r7
 8002046:	2204      	movs	r2, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4806      	ldr	r0, [pc, #24]	; (8002064 <MX_TIM3_Init+0xf0>)
 800204c:	f005 f998 	bl	8007380 <HAL_TIM_IC_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002056:	f7ff fd13 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	; 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20004d24 	.word	0x20004d24
 8002068:	40000400 	.word	0x40000400

0800206c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a31      	ldr	r2, [pc, #196]	; (8002150 <HAL_TIM_Base_MspInit+0xe4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b2d      	ldr	r3, [pc, #180]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020aa:	e04c      	b.n	8002146 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a25      	ldr	r2, [pc, #148]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
}
 80020d2:	e038      	b.n	8002146 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <HAL_TIM_Base_MspInit+0xec>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d133      	bne.n	8002146 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a14      	ldr	r2, [pc, #80]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_TIM_Base_MspInit+0xe8>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 8002116:	2330      	movs	r3, #48	; 0x30
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002126:	2302      	movs	r3, #2
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	480a      	ldr	r0, [pc, #40]	; (800215c <HAL_TIM_Base_MspInit+0xf0>)
 8002132:	f002 fe77 	bl	8004e24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2105      	movs	r1, #5
 800213a:	201d      	movs	r0, #29
 800213c:	f002 fa46 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002140:	201d      	movs	r0, #29
 8002142:	f002 fa5f 	bl	8004604 <HAL_NVIC_EnableIRQ>
}
 8002146:	bf00      	nop
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40023800 	.word	0x40023800
 8002158:	40000400 	.word	0x40000400
 800215c:	40020400 	.word	0x40020400

08002160 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <HAL_TIM_MspPostInit+0xb0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d11f      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a22      	ldr	r2, [pc, #136]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 800219e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4817      	ldr	r0, [pc, #92]	; (8002218 <HAL_TIM_MspPostInit+0xb8>)
 80021bc:	f002 fe32 	bl	8004e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021c0:	e022      	b.n	8002208 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ca:	d11d      	bne.n	8002208 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 80021d6:	f043 0302 	orr.w	r3, r3, #2
 80021da:	6313      	str	r3, [r2, #48]	; 0x30
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_TIM_MspPostInit+0xb4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VALVE_PWM_Pin;
 80021e8:	2308      	movs	r3, #8
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f8:	2301      	movs	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VALVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_TIM_MspPostInit+0xbc>)
 8002204:	f002 fe0e 	bl	8004e24 <HAL_GPIO_Init>
}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40010000 	.word	0x40010000
 8002214:	40023800 	.word	0x40023800
 8002218:	40021000 	.word	0x40021000
 800221c:	40020400 	.word	0x40020400

08002220 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <MX_USART1_UART_Init+0x50>)
 8002228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800222c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_USART1_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_USART1_UART_Init+0x4c>)
 8002258:	f005 fff2 	bl	8008240 <HAL_UART_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002262:	f7ff fc0d 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20005140 	.word	0x20005140
 8002270:	40011000 	.word	0x40011000

08002274 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800227a:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <MX_USART2_UART_Init+0x50>)
 800227c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002280:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 800229a:	220c      	movs	r2, #12
 800229c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <MX_USART2_UART_Init+0x4c>)
 80022ac:	f005 ffc8 	bl	8008240 <HAL_UART_Init>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022b6:	f7ff fbe3 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200051c8 	.word	0x200051c8
 80022c4:	40004400 	.word	0x40004400

080022c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <MX_USART3_UART_Init+0x50>)
 80022d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e0:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022ec:	4b09      	ldr	r3, [pc, #36]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022ee:	220c      	movs	r2, #12
 80022f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fe:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_USART3_UART_Init+0x4c>)
 8002300:	f005 ff9e 	bl	8008240 <HAL_UART_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800230a:	f7ff fbb9 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20004f1c 	.word	0x20004f1c
 8002318:	40004800 	.word	0x40004800

0800231c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <MX_USART6_UART_Init+0x50>)
 8002324:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002328:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800232c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b08      	ldr	r3, [pc, #32]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002352:	4805      	ldr	r0, [pc, #20]	; (8002368 <MX_USART6_UART_Init+0x4c>)
 8002354:	f005 ff74 	bl	8008240 <HAL_UART_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800235e:	f7ff fb8f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20005184 	.word	0x20005184
 800236c:	40011400 	.word	0x40011400

08002370 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b090      	sub	sp, #64	; 0x40
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a97      	ldr	r2, [pc, #604]	; (80025ec <HAL_UART_MspInit+0x27c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f040 8093 	bne.w	80024ba <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
 8002398:	4b95      	ldr	r3, [pc, #596]	; (80025f0 <HAL_UART_MspInit+0x280>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	4a94      	ldr	r2, [pc, #592]	; (80025f0 <HAL_UART_MspInit+0x280>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6453      	str	r3, [r2, #68]	; 0x44
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	4b8e      	ldr	r3, [pc, #568]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	4a8d      	ldr	r2, [pc, #564]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6313      	str	r3, [r2, #48]	; 0x30
 80023c0:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023da:	2303      	movs	r3, #3
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023de:	2307      	movs	r3, #7
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	4882      	ldr	r0, [pc, #520]	; (80025f4 <HAL_UART_MspInit+0x284>)
 80023ea:	f002 fd1b 	bl	8004e24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_UART_MspInit+0x288>)
 80023f0:	4a82      	ldr	r2, [pc, #520]	; (80025fc <HAL_UART_MspInit+0x28c>)
 80023f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_UART_MspInit+0x288>)
 80023f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fc:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <HAL_UART_MspInit+0x288>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002402:	4b7d      	ldr	r3, [pc, #500]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002408:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_UART_MspInit+0x288>)
 800240a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002410:	4b79      	ldr	r3, [pc, #484]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800241c:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_UART_MspInit+0x288>)
 800241e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002422:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002424:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800242a:	4b73      	ldr	r3, [pc, #460]	; (80025f8 <HAL_UART_MspInit+0x288>)
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002430:	4871      	ldr	r0, [pc, #452]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002432:	f002 f8f5 	bl	8004620 <HAL_DMA_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800243c:	f7ff fb20 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a6d      	ldr	r2, [pc, #436]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002444:	639a      	str	r2, [r3, #56]	; 0x38
 8002446:	4a6c      	ldr	r2, [pc, #432]	; (80025f8 <HAL_UART_MspInit+0x288>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_UART_MspInit+0x290>)
 800244e:	4a6d      	ldr	r2, [pc, #436]	; (8002604 <HAL_UART_MspInit+0x294>)
 8002450:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002452:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002454:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002458:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800245a:	4b69      	ldr	r3, [pc, #420]	; (8002600 <HAL_UART_MspInit+0x290>)
 800245c:	2240      	movs	r2, #64	; 0x40
 800245e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002460:	4b67      	ldr	r3, [pc, #412]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002466:	4b66      	ldr	r3, [pc, #408]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246e:	4b64      	ldr	r3, [pc, #400]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002470:	2200      	movs	r2, #0
 8002472:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002474:	4b62      	ldr	r3, [pc, #392]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002476:	2200      	movs	r2, #0
 8002478:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800247a:	4b61      	ldr	r3, [pc, #388]	; (8002600 <HAL_UART_MspInit+0x290>)
 800247c:	2200      	movs	r2, #0
 800247e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002480:	4b5f      	ldr	r3, [pc, #380]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002482:	2200      	movs	r2, #0
 8002484:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <HAL_UART_MspInit+0x290>)
 8002488:	2200      	movs	r2, #0
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800248c:	485c      	ldr	r0, [pc, #368]	; (8002600 <HAL_UART_MspInit+0x290>)
 800248e:	f002 f8c7 	bl	8004620 <HAL_DMA_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002498:	f7ff faf2 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a58      	ldr	r2, [pc, #352]	; (8002600 <HAL_UART_MspInit+0x290>)
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
 80024a2:	4a57      	ldr	r2, [pc, #348]	; (8002600 <HAL_UART_MspInit+0x290>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2105      	movs	r1, #5
 80024ac:	2025      	movs	r0, #37	; 0x25
 80024ae:	f002 f88d 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b2:	2025      	movs	r0, #37	; 0x25
 80024b4:	f002 f8a6 	bl	8004604 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024b8:	e1e2      	b.n	8002880 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a52      	ldr	r2, [pc, #328]	; (8002608 <HAL_UART_MspInit+0x298>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	f040 80ad 	bne.w	8002620 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_UART_MspInit+0x280>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024fe:	2360      	movs	r3, #96	; 0x60
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250e:	2307      	movs	r3, #7
 8002510:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	483c      	ldr	r0, [pc, #240]	; (800260c <HAL_UART_MspInit+0x29c>)
 800251a:	f002 fc83 	bl	8004e24 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800251e:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002520:	4a3c      	ldr	r2, [pc, #240]	; (8002614 <HAL_UART_MspInit+0x2a4>)
 8002522:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002524:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800252a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	4b35      	ldr	r3, [pc, #212]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 800253a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002540:	4b33      	ldr	r3, [pc, #204]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002542:	2200      	movs	r2, #0
 8002544:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002546:	4b32      	ldr	r3, [pc, #200]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 800254e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002552:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002556:	2200      	movs	r2, #0
 8002558:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002560:	482b      	ldr	r0, [pc, #172]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002562:	f002 f85d 	bl	8004620 <HAL_DMA_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_MspInit+0x200>
      Error_Handler();
 800256c:	f7ff fa88 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002574:	639a      	str	r2, [r3, #56]	; 0x38
 8002576:	4a26      	ldr	r2, [pc, #152]	; (8002610 <HAL_UART_MspInit+0x2a0>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_UART_MspInit+0x2ac>)
 8002580:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 8002584:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002588:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 8002598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025bc:	4816      	ldr	r0, [pc, #88]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025be:	f002 f82f 	bl	8004620 <HAL_DMA_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80025c8:	f7ff fa5a 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
 80025d2:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_UART_MspInit+0x2a8>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2105      	movs	r1, #5
 80025dc:	2026      	movs	r0, #38	; 0x26
 80025de:	f001 fff5 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025e2:	2026      	movs	r0, #38	; 0x26
 80025e4:	f002 f80e 	bl	8004604 <HAL_NVIC_EnableIRQ>
}
 80025e8:	e14a      	b.n	8002880 <HAL_UART_MspInit+0x510>
 80025ea:	bf00      	nop
 80025ec:	40011000 	.word	0x40011000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	20005080 	.word	0x20005080
 80025fc:	40026440 	.word	0x40026440
 8002600:	20004fc0 	.word	0x20004fc0
 8002604:	400264b8 	.word	0x400264b8
 8002608:	40004400 	.word	0x40004400
 800260c:	40020c00 	.word	0x40020c00
 8002610:	20004dfc 	.word	0x20004dfc
 8002614:	40026088 	.word	0x40026088
 8002618:	200050e0 	.word	0x200050e0
 800261c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a98      	ldr	r2, [pc, #608]	; (8002888 <HAL_UART_MspInit+0x518>)
 8002626:	4293      	cmp	r3, r2
 8002628:	f040 8093 	bne.w	8002752 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	4a95      	ldr	r2, [pc, #596]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800263a:	6413      	str	r3, [r2, #64]	; 0x40
 800263c:	4b93      	ldr	r3, [pc, #588]	; (800288c <HAL_UART_MspInit+0x51c>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	4b8f      	ldr	r3, [pc, #572]	; (800288c <HAL_UART_MspInit+0x51c>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a8e      	ldr	r2, [pc, #568]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b8c      	ldr	r3, [pc, #560]	; (800288c <HAL_UART_MspInit+0x51c>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002664:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002676:	2307      	movs	r3, #7
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800267a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267e:	4619      	mov	r1, r3
 8002680:	4883      	ldr	r0, [pc, #524]	; (8002890 <HAL_UART_MspInit+0x520>)
 8002682:	f002 fbcf 	bl	8004e24 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002686:	4b83      	ldr	r3, [pc, #524]	; (8002894 <HAL_UART_MspInit+0x524>)
 8002688:	4a83      	ldr	r2, [pc, #524]	; (8002898 <HAL_UART_MspInit+0x528>)
 800268a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800268c:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_UART_MspInit+0x524>)
 800268e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002692:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002694:	4b7f      	ldr	r3, [pc, #508]	; (8002894 <HAL_UART_MspInit+0x524>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269a:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <HAL_UART_MspInit+0x524>)
 800269c:	2200      	movs	r2, #0
 800269e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a0:	4b7c      	ldr	r3, [pc, #496]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a8:	4b7a      	ldr	r3, [pc, #488]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ae:	4b79      	ldr	r3, [pc, #484]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80026b4:	4b77      	ldr	r3, [pc, #476]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026bc:	4b75      	ldr	r3, [pc, #468]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026c2:	4b74      	ldr	r3, [pc, #464]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026c8:	4872      	ldr	r0, [pc, #456]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026ca:	f001 ffa9 	bl	8004620 <HAL_DMA_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_UART_MspInit+0x368>
      Error_Handler();
 80026d4:	f7ff f9d4 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
 80026de:	4a6d      	ldr	r2, [pc, #436]	; (8002894 <HAL_UART_MspInit+0x524>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_UART_MspInit+0x52c>)
 80026e6:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <HAL_UART_MspInit+0x530>)
 80026e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80026ea:	4b6c      	ldr	r3, [pc, #432]	; (800289c <HAL_UART_MspInit+0x52c>)
 80026ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026f2:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_UART_MspInit+0x52c>)
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_UART_MspInit+0x52c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002704:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800270c:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_UART_MspInit+0x52c>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002712:	4b62      	ldr	r3, [pc, #392]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002718:	4b60      	ldr	r3, [pc, #384]	; (800289c <HAL_UART_MspInit+0x52c>)
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271e:	4b5f      	ldr	r3, [pc, #380]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002720:	2200      	movs	r2, #0
 8002722:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002724:	485d      	ldr	r0, [pc, #372]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002726:	f001 ff7b 	bl	8004620 <HAL_DMA_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8002730:	f7ff f9a6 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a59      	ldr	r2, [pc, #356]	; (800289c <HAL_UART_MspInit+0x52c>)
 8002738:	635a      	str	r2, [r3, #52]	; 0x34
 800273a:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_UART_MspInit+0x52c>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002740:	2200      	movs	r2, #0
 8002742:	2105      	movs	r1, #5
 8002744:	2027      	movs	r0, #39	; 0x27
 8002746:	f001 ff41 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800274a:	2027      	movs	r0, #39	; 0x27
 800274c:	f001 ff5a 	bl	8004604 <HAL_NVIC_EnableIRQ>
}
 8002750:	e096      	b.n	8002880 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a53      	ldr	r2, [pc, #332]	; (80028a4 <HAL_UART_MspInit+0x534>)
 8002758:	4293      	cmp	r3, r2
 800275a:	f040 8091 	bne.w	8002880 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b4a      	ldr	r3, [pc, #296]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a49      	ldr	r2, [pc, #292]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002768:	f043 0320 	orr.w	r3, r3, #32
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f003 0320 	and.w	r3, r3, #32
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_UART_MspInit+0x51c>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_UART_MspInit+0x51c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027a6:	2308      	movs	r3, #8
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	4619      	mov	r1, r3
 80027b0:	483d      	ldr	r0, [pc, #244]	; (80028a8 <HAL_UART_MspInit+0x538>)
 80027b2:	f002 fb37 	bl	8004e24 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027b8:	4a3d      	ldr	r2, [pc, #244]	; (80028b0 <HAL_UART_MspInit+0x540>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027be:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80027c2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ca:	4b38      	ldr	r3, [pc, #224]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027d0:	4b36      	ldr	r3, [pc, #216]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027d8:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027de:	4b33      	ldr	r3, [pc, #204]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80027e4:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f2:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80027f8:	482c      	ldr	r0, [pc, #176]	; (80028ac <HAL_UART_MspInit+0x53c>)
 80027fa:	f001 ff11 	bl	8004620 <HAL_DMA_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_UART_MspInit+0x498>
      Error_Handler();
 8002804:	f7ff f93c 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a28      	ldr	r2, [pc, #160]	; (80028ac <HAL_UART_MspInit+0x53c>)
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
 800280e:	4a27      	ldr	r2, [pc, #156]	; (80028ac <HAL_UART_MspInit+0x53c>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002816:	4a28      	ldr	r2, [pc, #160]	; (80028b8 <HAL_UART_MspInit+0x548>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_UART_MspInit+0x544>)
 800281c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002820:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_UART_MspInit+0x544>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002834:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002838:	2200      	movs	r2, #0
 800283a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_UART_MspInit+0x544>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_UART_MspInit+0x544>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002854:	4817      	ldr	r0, [pc, #92]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002856:	f001 fee3 	bl	8004620 <HAL_DMA_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 8002860:	f7ff f90e 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_UART_MspInit+0x544>)
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_UART_MspInit+0x544>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2105      	movs	r1, #5
 8002874:	2047      	movs	r0, #71	; 0x47
 8002876:	f001 fea9 	bl	80045cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800287a:	2047      	movs	r0, #71	; 0x47
 800287c:	f001 fec2 	bl	8004604 <HAL_NVIC_EnableIRQ>
}
 8002880:	bf00      	nop
 8002882:	3740      	adds	r7, #64	; 0x40
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40004800 	.word	0x40004800
 800288c:	40023800 	.word	0x40023800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	20004ebc 	.word	0x20004ebc
 8002898:	40026028 	.word	0x40026028
 800289c:	20004f60 	.word	0x20004f60
 80028a0:	40026058 	.word	0x40026058
 80028a4:	40011400 	.word	0x40011400
 80028a8:	40020800 	.word	0x40020800
 80028ac:	20004e5c 	.word	0x20004e5c
 80028b0:	40026428 	.word	0x40026428
 80028b4:	20005020 	.word	0x20005020
 80028b8:	400264a0 	.word	0x400264a0

080028bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028c0:	480d      	ldr	r0, [pc, #52]	; (80028f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028c2:	490e      	ldr	r1, [pc, #56]	; (80028fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028d8:	4c0b      	ldr	r4, [pc, #44]	; (8002908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028e6:	f7ff fa0d 	bl	8001d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ea:	f009 f98f 	bl	800bc0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ee:	f7ff f825 	bl	800193c <main>
  bx  lr    
 80028f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028fc:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002900:	0800c48c 	.word	0x0800c48c
  ldr r2, =_sbss
 8002904:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002908:	20006b84 	.word	0x20006b84

0800290c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800290c:	e7fe      	b.n	800290c <CAN1_RX0_IRQHandler>
	...

08002910 <HAL_UART_TxCpltCallback>:
        slave_uart_idle(&slaves[2]);
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_UART_TxCpltCallback+0x54>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d104      	bne.n	800292e <HAL_UART_TxCpltCallback+0x1e>
        slave_set_tx_rx(&slaves[0], rx);
 8002924:	2100      	movs	r1, #0
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <HAL_UART_TxCpltCallback+0x54>)
 8002928:	f009 f950 	bl	800bbcc <slave_set_tx_rx>
    else if (huart == slaves[1].uart_port->uart)
        slave_set_tx_rx(&slaves[1], rx);
    else if (huart == slaves[2].uart_port->uart)
        slave_set_tx_rx(&slaves[2], rx);
}
 800292c:	e016      	b.n	800295c <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[1].uart_port->uart)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_UART_TxCpltCallback+0x54>)
 8002930:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	d104      	bne.n	8002946 <HAL_UART_TxCpltCallback+0x36>
        slave_set_tx_rx(&slaves[1], rx);
 800293c:	2100      	movs	r1, #0
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <HAL_UART_TxCpltCallback+0x58>)
 8002940:	f009 f944 	bl	800bbcc <slave_set_tx_rx>
}
 8002944:	e00a      	b.n	800295c <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[2].uart_port->uart)
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_UART_TxCpltCallback+0x54>)
 8002948:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d103      	bne.n	800295c <HAL_UART_TxCpltCallback+0x4c>
        slave_set_tx_rx(&slaves[2], rx);
 8002954:	2100      	movs	r1, #0
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <HAL_UART_TxCpltCallback+0x5c>)
 8002958:	f009 f938 	bl	800bbcc <slave_set_tx_rx>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000520c 	.word	0x2000520c
 8002968:	2000562c 	.word	0x2000562c
 800296c:	20005a4c 	.word	0x20005a4c

08002970 <fnd_input_peripheral_init>:
#include "fnd_input.h"
#include "fnd_com.h"

void fnd_input_peripheral_init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
    fnd_input_adc_init();
 8002974:	f000 f9f6 	bl	8002d64 <fnd_input_adc_init>
    fnd_input_tim_input_capture_init();
 8002978:	f000 fbf8 	bl	800316c <fnd_input_tim_input_capture_init>
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <fnd_input_update_value>:

void fnd_input_update_value(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
    float adc_values[6];
    uint8_t gpio_values[8];
    uint16_t speed_values[2];

    fnd_input_adc_read_pressure_difference(adc_values);
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f9f8 	bl	8002d80 <fnd_input_adc_read_pressure_difference>
    for (uint8_t i = 0; i < 3; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002996:	e019      	b.n	80029cc <fnd_input_update_value+0x4c>
    {
        sys_regs.inputs[INPUT_PRE_START + i] = (int16_t)(adc_values[i]);
 8002998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80029a2:	4413      	add	r3, r2
 80029a4:	3b20      	subs	r3, #32
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b2:	ee17 2a90 	vmov	r2, s15
 80029b6:	b211      	sxth	r1, r2
 80029b8:	4a69      	ldr	r2, [pc, #420]	; (8002b60 <fnd_input_update_value+0x1e0>)
 80029ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80029be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 3; i++)
 80029c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029c6:	3301      	adds	r3, #1
 80029c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80029cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d9e1      	bls.n	8002998 <fnd_input_update_value+0x18>
    }

    fnd_input_adc_read_valve_feedback(adc_values);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f9ef 	bl	8002dbc <fnd_input_adc_read_valve_feedback>
    sys_regs.inputs[INPUT_VAL_START] = (int16_t)(adc_values[0]);
 80029de:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e6:	ee17 3a90 	vmov	r3, s15
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	4b5c      	ldr	r3, [pc, #368]	; (8002b60 <fnd_input_update_value+0x1e0>)
 80029ee:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

    fnd_input_adc_read_ntc_temp(adc_values);
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fa12 	bl	8002e20 <fnd_input_adc_read_ntc_temp>
    for (uint8_t i = 0; i < 6; i++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a02:	e01e      	b.n	8002a42 <fnd_input_update_value+0xc2>
    {
        sys_regs.inputs[INPUT_NTC_START + i] = (int16_t)(adc_values[i] * 10);
 8002a04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a0e:	4413      	add	r3, r2
 8002a10:	3b20      	subs	r3, #32
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a22:	3304      	adds	r3, #4
 8002a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a28:	ee17 2a90 	vmov	r2, s15
 8002a2c:	b211      	sxth	r1, r2
 8002a2e:	4a4c      	ldr	r2, [pc, #304]	; (8002b60 <fnd_input_update_value+0x1e0>)
 8002a30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 6; i++)
 8002a38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002a42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d9dc      	bls.n	8002a04 <fnd_input_update_value+0x84>
    }

    fnd_input_gpio_read_di(gpio_values);
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fa3c 	bl	8002ecc <fnd_input_gpio_read_di>
    for (uint8_t i = 0; i < 4; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002a5a:	e014      	b.n	8002a86 <fnd_input_update_value+0x106>
    {
        sys_regs.inputs[INPUT_DIN_START + i] = gpio_values[i];
 8002a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a64:	4413      	add	r3, r2
 8002a66:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8002a6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a6e:	330e      	adds	r3, #14
 8002a70:	b211      	sxth	r1, r2
 8002a72:	4a3b      	ldr	r2, [pc, #236]	; (8002b60 <fnd_input_update_value+0x1e0>)
 8002a74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 8002a7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a80:	3301      	adds	r3, #1
 8002a82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002a86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d9e6      	bls.n	8002a5c <fnd_input_update_value+0xdc>
    }

    fnd_input_gpio_read_id(gpio_values);
 8002a8e:	f107 0308 	add.w	r3, r7, #8
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fa48 	bl	8002f28 <fnd_input_gpio_read_id>
    for (uint8_t i = 0; i < 8; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002a9e:	e01f      	b.n	8002ae0 <fnd_input_update_value+0x160>
    {
        uint8_t bit_value = (gpio_values[i] == 1) ? 0x01 : 0x00;
 8002aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002aa4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        sys_regs.inputs[INPUT_ID_START] = (sys_regs.inputs[INPUT_ID_START] << 1) | bit_value;
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <fnd_input_update_value+0x1e0>)
 8002abe:	f9b3 3228 	ldrsh.w	r3, [r3, #552]	; 0x228
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	b21a      	sxth	r2, r3
 8002ac6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002aca:	b21b      	sxth	r3, r3
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b21a      	sxth	r2, r3
 8002ad0:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <fnd_input_update_value+0x1e0>)
 8002ad2:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
    for (uint8_t i = 0; i < 8; i++)
 8002ad6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ada:	3301      	adds	r3, #1
 8002adc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002ae0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d9db      	bls.n	8002aa0 <fnd_input_update_value+0x120>
    }

    static uint8_t count = 0;
    count = (count + 1) % 20;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <fnd_input_update_value+0x1e4>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <fnd_input_update_value+0x1e8>)
 8002af0:	fb83 1302 	smull	r1, r3, r3, r2
 8002af4:	10d9      	asrs	r1, r3, #3
 8002af6:	17d3      	asrs	r3, r2, #31
 8002af8:	1ac9      	subs	r1, r1, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	1ad1      	subs	r1, r2, r3
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <fnd_input_update_value+0x1e4>)
 8002b08:	701a      	strb	r2, [r3, #0]
    if (count == 0)
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <fnd_input_update_value+0x1e4>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d121      	bne.n	8002b56 <fnd_input_update_value+0x1d6>
    {
        fnd_input_tim_input_read_speed(speed_values);
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fb57 	bl	80031c8 <fnd_input_tim_input_read_speed>
        for (uint8_t i = 0; i < 2; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b20:	e015      	b.n	8002b4e <fnd_input_update_value+0x1ce>
        {
            sys_regs.inputs[INPUT_FANSPD_START + i] = (int16_t)speed_values[i];
 8002b22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8002b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b36:	3312      	adds	r3, #18
 8002b38:	b211      	sxth	r1, r2
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <fnd_input_update_value+0x1e0>)
 8002b3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002b40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 0; i < 2; i++)
 8002b44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d9e5      	bls.n	8002b22 <fnd_input_update_value+0x1a2>
        }
    }
}
 8002b56:	bf00      	nop
 8002b58:	3730      	adds	r7, #48	; 0x30
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20005a4c 	.word	0x20005a4c
 8002b64:	20000168 	.word	0x20000168
 8002b68:	66666667 	.word	0x66666667

08002b6c <fnd_input_update_sht_value>:

void fnd_input_update_sht_value(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
    float sht1_values[2] = {0};
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
    float sht2_values[2] = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef status = fnd_input_i2c_read_sht_temp_humi(0, sht1_values);
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4619      	mov	r1, r3
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f000 fa4c 	bl	8003028 <fnd_input_i2c_read_sht_temp_humi>
 8002b90:	4603      	mov	r3, r0
 8002b92:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	75fb      	strb	r3, [r7, #23]
 8002b98:	e020      	b.n	8002bdc <fnd_input_update_sht_value+0x70>
    {
        sys_regs.inputs[INPUT_SHT_START + i] = (status == HAL_OK) ? (int16_t)(sht1_values[i] * 10) : (-1);
 8002b9a:	7d7b      	ldrb	r3, [r7, #21]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <fnd_input_update_sht_value+0x58>
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f107 0218 	add.w	r2, r7, #24
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b0c      	subs	r3, #12
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bbc:	ee17 3a90 	vmov	r3, s15
 8002bc0:	b21a      	sxth	r2, r3
 8002bc2:	e001      	b.n	8002bc8 <fnd_input_update_sht_value+0x5c>
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	330a      	adds	r3, #10
 8002bcc:	491e      	ldr	r1, [pc, #120]	; (8002c48 <fnd_input_update_sht_value+0xdc>)
 8002bce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bd2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	75fb      	strb	r3, [r7, #23]
 8002bdc:	7dfb      	ldrb	r3, [r7, #23]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d9db      	bls.n	8002b9a <fnd_input_update_sht_value+0x2e>
    }

    status = fnd_input_i2c_read_sht_temp_humi(1, sht2_values);
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	2001      	movs	r0, #1
 8002be8:	f000 fa1e 	bl	8003028 <fnd_input_i2c_read_sht_temp_humi>
 8002bec:	4603      	mov	r3, r0
 8002bee:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	75bb      	strb	r3, [r7, #22]
 8002bf4:	e020      	b.n	8002c38 <fnd_input_update_sht_value+0xcc>
    {
        sys_regs.inputs[INPUT_SHT_START + 2 + i] = (status == HAL_OK) ? (int16_t)(sht2_values[i] * 10) : (-1);
 8002bf6:	7d7b      	ldrb	r3, [r7, #21]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d111      	bne.n	8002c20 <fnd_input_update_sht_value+0xb4>
 8002bfc:	7dbb      	ldrb	r3, [r7, #22]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	f107 0218 	add.w	r2, r7, #24
 8002c04:	4413      	add	r3, r2
 8002c06:	3b14      	subs	r3, #20
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c18:	ee17 3a90 	vmov	r3, s15
 8002c1c:	b21a      	sxth	r2, r3
 8002c1e:	e001      	b.n	8002c24 <fnd_input_update_sht_value+0xb8>
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	7dbb      	ldrb	r3, [r7, #22]
 8002c26:	330c      	adds	r3, #12
 8002c28:	4907      	ldr	r1, [pc, #28]	; (8002c48 <fnd_input_update_sht_value+0xdc>)
 8002c2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002c32:	7dbb      	ldrb	r3, [r7, #22]
 8002c34:	3301      	adds	r3, #1
 8002c36:	75bb      	strb	r3, [r7, #22]
 8002c38:	7dbb      	ldrb	r3, [r7, #22]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d9db      	bls.n	8002bf6 <fnd_input_update_sht_value+0x8a>
    }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20005a4c 	.word	0x20005a4c

08002c4c <get_channel_average>:
#define NTC_TOTAL_CH 6

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	72fb      	strb	r3, [r7, #11]
 8002c60:	e017      	b.n	8002c92 <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8002c62:	79f9      	ldrb	r1, [r7, #7]
 8002c64:	7afa      	ldrb	r2, [r7, #11]
 8002c66:	4613      	mov	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	4a11      	ldr	r2, [pc, #68]	; (8002cb8 <get_channel_average+0x6c>)
 8002c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002c8c:	7afb      	ldrb	r3, [r7, #11]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	72fb      	strb	r3, [r7, #11]
 8002c92:	7afb      	ldrb	r3, [r7, #11]
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d9e4      	bls.n	8002c62 <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ca0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ca4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20006894 	.word	0x20006894
 8002cbc:	00000000 	.word	0x00000000

08002cc0 <calculate_ntc_temperature>:

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	ed87 0b04 	vstr	d0, [r7, #16]
 8002cca:	ed87 1b02 	vstr	d1, [r7, #8]
 8002cce:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cda:	f7fd fd5f 	bl	800079c <__aeabi_ddiv>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	ec43 2b17 	vmov	d7, r2, r3
 8002ce6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cea:	eef0 0a67 	vmov.f32	s1, s15
 8002cee:	f009 f88f 	bl	800be10 <log>
 8002cf2:	ec51 0b10 	vmov	r0, r1, d0
 8002cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfa:	f7fd fd4f 	bl	800079c <__aeabi_ddiv>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	a315      	add	r3, pc, #84	; (adr r3, 8002d5c <calculate_ntc_temperature+0x9c>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fa66 	bl	80001dc <__adddf3>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	f04f 0000 	mov.w	r0, #0
 8002d18:	490f      	ldr	r1, [pc, #60]	; (8002d58 <calculate_ntc_temperature+0x98>)
 8002d1a:	f7fd fd3f 	bl	800079c <__aeabi_ddiv>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	a30a      	add	r3, pc, #40	; (adr r3, 8002d50 <calculate_ntc_temperature+0x90>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f7fd fa54 	bl	80001d8 <__aeabi_dsub>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7fd fefe 	bl	8000b38 <__aeabi_d2f>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	ee07 3a90 	vmov	s15, r3
}
 8002d42:	eeb0 0a67 	vmov.f32	s0, s15
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	f3af 8000 	nop.w
 8002d50:	66666666 	.word	0x66666666
 8002d54:	40711266 	.word	0x40711266
 8002d58:	3ff00000 	.word	0x3ff00000
 8002d5c:	dcb5db83 	.word	0xdcb5db83
 8002d60:	3f6b79e1 	.word	0x3f6b79e1

08002d64 <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8002d68:	2282      	movs	r2, #130	; 0x82
 8002d6a:	4903      	ldr	r1, [pc, #12]	; (8002d78 <fnd_input_adc_init+0x14>)
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <fnd_input_adc_init+0x18>)
 8002d6e:	f000 ff93 	bl	8003c98 <HAL_ADC_Start_DMA>
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20006894 	.word	0x20006894
 8002d7c:	20004b40 	.word	0x20004b40

08002d80 <fnd_input_adc_read_pressure_difference>:

void fnd_input_adc_read_pressure_difference(float *values)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < DELTA_P_TOTAL_CH; i++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e00e      	b.n	8002dac <fnd_input_adc_read_pressure_difference+0x2c>
    {
        float delta_p_adc_value = get_channel_average(i + DELTA_P_START_CH);
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5b 	bl	8002c4c <get_channel_average>
 8002d96:	ed87 0a02 	vstr	s0, [r7, #8]
        values[i] = delta_p_adc_value;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	601a      	str	r2, [r3, #0]
    for (uint8_t i = 0; i < DELTA_P_TOTAL_CH; i++)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3301      	adds	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d9ed      	bls.n	8002d8e <fnd_input_adc_read_pressure_difference+0xe>
    }
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <fnd_input_adc_read_valve_feedback>:

void fnd_input_adc_read_valve_feedback(float *values)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < VALVE_FB_TOTAL_CH; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
 8002dc8:	e020      	b.n	8002e0c <fnd_input_adc_read_valve_feedback+0x50>
    {
        double valve_pos_adc_value = get_channel_average(i + VALVE_FB_START_CH) / 100.0;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff3b 	bl	8002c4c <get_channel_average>
 8002dd6:	ee10 3a10 	vmov	r3, s0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb5c 	bl	8000498 <__aeabi_f2d>
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <fnd_input_adc_read_valve_feedback+0x60>)
 8002de6:	f7fd fcd9 	bl	800079c <__aeabi_ddiv>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	e9c7 2302 	strd	r2, r3, [r7, #8]
        values[i] = (float)valve_pos_adc_value;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	18d4      	adds	r4, r2, r3
 8002dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dfe:	f7fd fe9b 	bl	8000b38 <__aeabi_d2f>
 8002e02:	4603      	mov	r3, r0
 8002e04:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < VALVE_FB_TOTAL_CH; i++)
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0db      	beq.n	8002dca <fnd_input_adc_read_valve_feedback+0xe>
    }
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}
 8002e1c:	40590000 	.word	0x40590000

08002e20 <fnd_input_adc_read_ntc_temp>:

void fnd_input_adc_read_ntc_temp(float *values)
{
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NTC_TOTAL_CH; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
 8002e2c:	e03a      	b.n	8002ea4 <fnd_input_adc_read_ntc_temp+0x84>
    {
        float ntc_adc_value = get_channel_average(i + NTC_START_CH);
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	3304      	adds	r3, #4
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff09 	bl	8002c4c <get_channel_average>
 8002e3a:	ed87 0a04 	vstr	s0, [r7, #16]
        float ntc_resister_value = (float)1.0 * ntc_adc_value / (4096.0 - ntc_adc_value);
 8002e3e:	6938      	ldr	r0, [r7, #16]
 8002e40:	f7fd fb2a 	bl	8000498 <__aeabi_f2d>
 8002e44:	4604      	mov	r4, r0
 8002e46:	460d      	mov	r5, r1
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f7fd fb25 	bl	8000498 <__aeabi_f2d>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	491c      	ldr	r1, [pc, #112]	; (8002ec8 <fnd_input_adc_read_ntc_temp+0xa8>)
 8002e58:	f7fd f9be 	bl	80001d8 <__aeabi_dsub>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fc9a 	bl	800079c <__aeabi_ddiv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f7fd fe62 	bl	8000b38 <__aeabi_d2f>
 8002e74:	4603      	mov	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]
        values[i] = calculate_ntc_temperature(ntc_resister_value, 10.0, 3950);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7fd fb0d 	bl	8000498 <__aeabi_f2d>
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	18d4      	adds	r4, r2, r3
 8002e86:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8002eb8 <fnd_input_adc_read_ntc_temp+0x98>
 8002e8a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002ec0 <fnd_input_adc_read_ntc_temp+0xa0>
 8002e8e:	ec41 0b10 	vmov	d0, r0, r1
 8002e92:	f7ff ff15 	bl	8002cc0 <calculate_ntc_temperature>
 8002e96:	eef0 7a40 	vmov.f32	s15, s0
 8002e9a:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < NTC_TOTAL_CH; i++)
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d9c1      	bls.n	8002e2e <fnd_input_adc_read_ntc_temp+0xe>
    }
}
 8002eaa:	bf00      	nop
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40aedc00 	.word	0x40aedc00
 8002ec0:	00000000 	.word	0x00000000
 8002ec4:	40240000 	.word	0x40240000
 8002ec8:	40b00000 	.word	0x40b00000

08002ecc <fnd_input_gpio_read_di>:
GPIO_TypeDef *gpio_id_port[8] = {IDA1_GPIO_Port, IDA2_GPIO_Port, IDA3_GPIO_Port, IDA4_GPIO_Port, IDB1_GPIO_Port, IDB2_GPIO_Port, IDB3_GPIO_Port, IDB4_GPIO_Port};

uint16_t gpio_id_pin[8] = {IDA1_Pin, IDA2_Pin, IDA3_Pin, IDA4_Pin, IDB1_Pin, IDB2_Pin, IDB3_Pin, IDB4_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e019      	b.n	8002f0e <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <fnd_input_gpio_read_di+0x54>)
 8002ede:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	490f      	ldr	r1, [pc, #60]	; (8002f24 <fnd_input_gpio_read_di+0x58>)
 8002ee6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f002 f935 	bl	800515c <HAL_GPIO_ReadPin>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2d9      	uxtb	r1, r3
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	460a      	mov	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d9e2      	bls.n	8002eda <fnd_input_gpio_read_di+0xe>
    }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000004 	.word	0x20000004
 8002f24:	20000014 	.word	0x20000014

08002f28 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++)
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e019      	b.n	8002f6a <fnd_input_gpio_read_id+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_id_port[i], gpio_id_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <fnd_input_gpio_read_id+0x54>)
 8002f3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	490f      	ldr	r1, [pc, #60]	; (8002f80 <fnd_input_gpio_read_id+0x58>)
 8002f42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f002 f907 	bl	800515c <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2d9      	uxtb	r1, r3
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	460a      	mov	r2, r1
 8002f62:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	3301      	adds	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d9e2      	bls.n	8002f36 <fnd_input_gpio_read_id+0xe>
    }
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000001c 	.word	0x2000001c
 8002f80:	2000003c 	.word	0x2000003c

08002f84 <sht_write_cmd>:
#define I2C_TIMEOUT 100

I2C_HandleTypeDef *sht_i2c[2] = {&hi2c1, &hi2c3};

static HAL_StatusTypeDef sht_write_cmd(I2C_HandleTypeDef *hi2c, uint16_t cmd)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
    uint8_t buff[2] = {cmd >> 8, cmd};
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	733b      	strb	r3, [r7, #12]
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, SHT_ADDR, buff, 2, I2C_TIMEOUT);
 8002fa0:	f107 020c 	add.w	r2, r7, #12
 8002fa4:	2364      	movs	r3, #100	; 0x64
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2302      	movs	r3, #2
 8002faa:	2188      	movs	r1, #136	; 0x88
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f002 fa4b 	bl	8005448 <HAL_I2C_Master_Transmit>
 8002fb2:	4603      	mov	r3, r0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 8002fc6:	23ff      	movs	r3, #255	; 0xff
 8002fc8:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < length; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e020      	b.n	8003012 <calculate_crc+0x56>
    {
        crc ^= data[i];
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	4053      	eors	r3, r2
 8002fdc:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e010      	b.n	8003006 <calculate_crc+0x4a>
        {
            if ((crc & 0x80u) != 0)
 8002fe4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da06      	bge.n	8002ffa <calculate_crc+0x3e>
            {
                crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002ff6:	75fb      	strb	r3, [r7, #23]
 8002ff8:	e002      	b.n	8003000 <calculate_crc+0x44>
            }
            else
            {
                crc <<= 1u;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b07      	cmp	r3, #7
 800300a:	d9eb      	bls.n	8002fe4 <calculate_crc+0x28>
    for (size_t i = 0; i < length; i++)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	3301      	adds	r3, #1
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d3da      	bcc.n	8002fd0 <calculate_crc+0x14>
            }
        }
    }
    return crc;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <fnd_input_i2c_read_sht_temp_humi>:

HAL_StatusTypeDef fnd_input_i2c_read_sht_temp_humi(uint8_t idx, float *values)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	4603      	mov	r3, r0
 8003030:	6039      	str	r1, [r7, #0]
 8003032:	71fb      	strb	r3, [r7, #7]
    uint8_t buff[6] = {0};
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	2300      	movs	r3, #0
 800303a:	823b      	strh	r3, [r7, #16]

    if (HAL_I2C_IsDeviceReady(sht_i2c[idx], SHT_ADDR, 10, I2C_TIMEOUT) != HAL_OK)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4a46      	ldr	r2, [pc, #280]	; (8003158 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003040:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003044:	2364      	movs	r3, #100	; 0x64
 8003046:	220a      	movs	r2, #10
 8003048:	2188      	movs	r1, #136	; 0x88
 800304a:	f002 fd21 	bl	8005a90 <HAL_I2C_IsDeviceReady>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00c      	beq.n	800306e <fnd_input_i2c_read_sht_temp_humi+0x46>
    {
        if (idx == 0)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <fnd_input_i2c_read_sht_temp_humi+0x38>
        {
            MX_I2C1_Init();
 800305a:	f7fe fb73 	bl	8001744 <MX_I2C1_Init>
 800305e:	e004      	b.n	800306a <fnd_input_i2c_read_sht_temp_humi+0x42>
        }
        else if (idx == 1)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <fnd_input_i2c_read_sht_temp_humi+0x42>
        {
            MX_I2C3_Init();
 8003066:	f7fe fb9b 	bl	80017a0 <MX_I2C3_Init>
        }
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e070      	b.n	8003150 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (sht_write_cmd(sht_i2c[idx], 0x240B) != HAL_OK)
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4a39      	ldr	r2, [pc, #228]	; (8003158 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	f242 410b 	movw	r1, #9227	; 0x240b
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff82 	bl	8002f84 <sht_write_cmd>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <fnd_input_i2c_read_sht_temp_humi+0x62>
    {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e062      	b.n	8003150 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    osDelay(50);
 800308a:	2032      	movs	r0, #50	; 0x32
 800308c:	f006 f856 	bl	800913c <osDelay>

    if (HAL_I2C_Master_Receive(sht_i2c[idx], SHT_ADDR | 0x01, buff, 6, I2C_TIMEOUT) != HAL_OK)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	4a31      	ldr	r2, [pc, #196]	; (8003158 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003094:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003098:	f107 020c 	add.w	r2, r7, #12
 800309c:	2364      	movs	r3, #100	; 0x64
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2306      	movs	r3, #6
 80030a2:	2189      	movs	r1, #137	; 0x89
 80030a4:	f002 face 	bl	8005644 <HAL_I2C_Master_Receive>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <fnd_input_i2c_read_sht_temp_humi+0x8a>
    {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04e      	b.n	8003150 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (calculate_crc(buff, 2) == buff[2] && calculate_crc(&buff[3], 2) == buff[5])
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff7f 	bl	8002fbc <calculate_crc>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	7bbb      	ldrb	r3, [r7, #14]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d142      	bne.n	800314e <fnd_input_i2c_read_sht_temp_humi+0x126>
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	3303      	adds	r3, #3
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff73 	bl	8002fbc <calculate_crc>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	7c7b      	ldrb	r3, [r7, #17]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d136      	bne.n	800314e <fnd_input_i2c_read_sht_temp_humi+0x126>
    {
        uint16_t temp_value = ((uint16_t)buff[0] << 8) | buff[1];
 80030e0:	7b3b      	ldrb	r3, [r7, #12]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	7b7b      	ldrb	r3, [r7, #13]
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	4313      	orrs	r3, r2
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	82fb      	strh	r3, [r7, #22]
        values[0] = -45 + 175 * ((float)temp_value / 65535);
 80030f0:	8afb      	ldrh	r3, [r7, #22]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fa:	eddf 6a18 	vldr	s13, [pc, #96]	; 800315c <fnd_input_i2c_read_sht_temp_humi+0x134>
 80030fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003102:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003160 <fnd_input_i2c_read_sht_temp_humi+0x138>
 8003106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800310a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003164 <fnd_input_i2c_read_sht_temp_humi+0x13c>
 800310e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	edc3 7a00 	vstr	s15, [r3]

        uint16_t humi_value = ((uint16_t)buff[3] << 8) | buff[4];
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	b21a      	sxth	r2, r3
 800311e:	7c3b      	ldrb	r3, [r7, #16]
 8003120:	b21b      	sxth	r3, r3
 8003122:	4313      	orrs	r3, r2
 8003124:	b21b      	sxth	r3, r3
 8003126:	82bb      	strh	r3, [r7, #20]
        values[1] = 100 * ((float)humi_value / 65535);
 8003128:	8abb      	ldrh	r3, [r7, #20]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003132:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800315c <fnd_input_i2c_read_sht_temp_humi+0x134>
 8003136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003168 <fnd_input_i2c_read_sht_temp_humi+0x140>
 8003142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003146:	edc3 7a00 	vstr	s15, [r3]
        return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000004c 	.word	0x2000004c
 800315c:	477fff00 	.word	0x477fff00
 8003160:	432f0000 	.word	0x432f0000
 8003164:	42340000 	.word	0x42340000
 8003168:	42c80000 	.word	0x42c80000

0800316c <fnd_input_tim_input_capture_init>:
#include "tim.h"

uint32_t spd_pulse[2];

void fnd_input_tim_input_capture_init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8003170:	2100      	movs	r1, #0
 8003172:	4804      	ldr	r0, [pc, #16]	; (8003184 <fnd_input_tim_input_capture_init+0x18>)
 8003174:	f003 fed4 	bl	8006f20 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8003178:	2104      	movs	r1, #4
 800317a:	4802      	ldr	r0, [pc, #8]	; (8003184 <fnd_input_tim_input_capture_init+0x18>)
 800317c:	f003 fed0 	bl	8006f20 <HAL_TIM_IC_Start_IT>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20004d24 	.word	0x20004d24

08003188 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7f1b      	ldrb	r3, [r3, #28]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <HAL_TIM_IC_CaptureCallback+0x1c>
    {
        spd_pulse[0]++;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80031a0:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 80031a2:	e008      	b.n	80031b6 <HAL_TIM_IC_CaptureCallback+0x2e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7f1b      	ldrb	r3, [r3, #28]
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_IC_CaptureCallback+0x2e>
        spd_pulse[1]++;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	3301      	adds	r3, #1
 80031b2:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80031b4:	6053      	str	r3, [r2, #4]
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20006a9c 	.word	0x20006a9c

080031c8 <fnd_input_tim_input_read_speed>:

void fnd_input_tim_input_read_speed(uint16_t *values)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 2; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e021      	b.n	800321a <fnd_input_tim_input_read_speed+0x52>
    {
        values[i] = (int16_t)(spd_pulse[i] * 2.5);
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	4a14      	ldr	r2, [pc, #80]	; (800322c <fnd_input_tim_input_read_speed+0x64>)
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f938 	bl	8000454 <__aeabi_ui2d>
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <fnd_input_tim_input_read_speed+0x68>)
 80031ea:	f7fd f9ad 	bl	8000548 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7fd fc57 	bl	8000aa8 <__aeabi_d2iz>
 80031fa:	4603      	mov	r3, r0
 80031fc:	b219      	sxth	r1, r3
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	b28a      	uxth	r2, r1
 8003208:	801a      	strh	r2, [r3, #0]
        spd_pulse[i] = 0;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <fnd_input_tim_input_read_speed+0x64>)
 800320e:	2100      	movs	r1, #0
 8003210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 2; i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d9da      	bls.n	80031d6 <fnd_input_tim_input_read_speed+0xe>
    }
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20006a9c 	.word	0x20006a9c
 8003230:	40040000 	.word	0x40040000

08003234 <fnd_output_update_value>:
{
    fnd_output_pwm_init();
}

void fnd_output_update_value(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
    uint16_t pwm_out_value[3];
    uint8_t relay_out_value[6];
    uint16_t stepper_pos_value[4];

    pwm_out_value[0] = (uint16_t)sys_regs.inputs[INPUT_FAN_PWM_CTRL_START + 0];
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <fnd_output_update_value+0xa8>)
 800323c:	f9b3 323c 	ldrsh.w	r3, [r3, #572]	; 0x23c
 8003240:	b29b      	uxth	r3, r3
 8003242:	823b      	strh	r3, [r7, #16]
    pwm_out_value[1] = (uint16_t)sys_regs.inputs[INPUT_FAN_PWM_CTRL_START + 1];
 8003244:	4b25      	ldr	r3, [pc, #148]	; (80032dc <fnd_output_update_value+0xa8>)
 8003246:	f9b3 323e 	ldrsh.w	r3, [r3, #574]	; 0x23e
 800324a:	b29b      	uxth	r3, r3
 800324c:	827b      	strh	r3, [r7, #18]
    pwm_out_value[2] = (uint16_t)sys_regs.inputs[INPUT_VAL_PWM_CTRL_START + 0];
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <fnd_output_update_value+0xa8>)
 8003250:	f9b3 3240 	ldrsh.w	r3, [r3, #576]	; 0x240
 8003254:	b29b      	uxth	r3, r3
 8003256:	82bb      	strh	r3, [r7, #20]
    fnd_output_pwm_write_value(pwm_out_value);
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f869 	bl	8003334 <fnd_output_pwm_write_value>

    for (uint8_t i = 0; i < 6; i++)
 8003262:	2300      	movs	r3, #0
 8003264:	75fb      	strb	r3, [r7, #23]
 8003266:	e010      	b.n	800328a <fnd_output_update_value+0x56>
    {
        relay_out_value[i] = (uint8_t)sys_regs.inputs[INPUT_RLY_DO_CTRL_START + i];
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	3321      	adds	r3, #33	; 0x21
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <fnd_output_update_value+0xa8>)
 800326e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003272:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	f107 0118 	add.w	r1, r7, #24
 800327e:	440b      	add	r3, r1
 8003280:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t i = 0; i < 6; i++)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	3301      	adds	r3, #1
 8003288:	75fb      	strb	r3, [r7, #23]
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	2b05      	cmp	r3, #5
 800328e:	d9eb      	bls.n	8003268 <fnd_output_update_value+0x34>
    }
    fnd_output_gpio_write_dout(relay_out_value);
 8003290:	f107 0308 	add.w	r3, r7, #8
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f823 	bl	80032e0 <fnd_output_gpio_write_dout>

    for (uint8_t i = 0; i < 4; i++)
 800329a:	2300      	movs	r3, #0
 800329c:	75bb      	strb	r3, [r7, #22]
 800329e:	e011      	b.n	80032c4 <fnd_output_update_value+0x90>
    {
        stepper_pos_value[i] = (uint16_t)sys_regs.inputs[INPUT_STEPPER_CTRL_START + i];
 80032a0:	7dbb      	ldrb	r3, [r7, #22]
 80032a2:	3327      	adds	r3, #39	; 0x27
 80032a4:	4a0d      	ldr	r2, [pc, #52]	; (80032dc <fnd_output_update_value+0xa8>)
 80032a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032aa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80032ae:	7dbb      	ldrb	r3, [r7, #22]
 80032b0:	b292      	uxth	r2, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	f107 0118 	add.w	r1, r7, #24
 80032b8:	440b      	add	r3, r1
 80032ba:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < 4; i++)
 80032be:	7dbb      	ldrb	r3, [r7, #22]
 80032c0:	3301      	adds	r3, #1
 80032c2:	75bb      	strb	r3, [r7, #22]
 80032c4:	7dbb      	ldrb	r3, [r7, #22]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d9ea      	bls.n	80032a0 <fnd_output_update_value+0x6c>
    }
    fnd_output_stepper_set_position(stepper_pos_value);
 80032ca:	463b      	mov	r3, r7
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fae5 	bl	800389c <fnd_output_stepper_set_position>
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20005a4c 	.word	0x20005a4c

080032e0 <fnd_output_gpio_write_dout>:

GPIO_TypeDef *relay_port[6] = {RLY1_GPIO_Port, RLY2_GPIO_Port, RLY3_GPIO_Port, RLY4_GPIO_Port, RLY5_GPIO_Port, RLY6_GPIO_Port};
uint16_t relay_pin[6] = {RLY1_Pin, RLY2_Pin, RLY3_Pin, RLY4_Pin, RLY5_Pin, RLY6_Pin};

void fnd_output_gpio_write_dout(uint8_t *values)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e016      	b.n	800331c <fnd_output_gpio_write_dout+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <fnd_output_gpio_write_dout+0x4c>)
 80032f2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	4a0d      	ldr	r2, [pc, #52]	; (8003330 <fnd_output_gpio_write_dout+0x50>)
 80032fa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	f001 ff3b 	bl	800518c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 4; i++)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3301      	adds	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d9e5      	bls.n	80032ee <fnd_output_gpio_write_dout+0xe>
    }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000054 	.word	0x20000054
 8003330:	2000006c 	.word	0x2000006c

08003334 <fnd_output_pwm_write_value>:
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
}

void fnd_output_pwm_write_value(uint16_t *values)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    if (values[0] < 1000)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003344:	d214      	bcs.n	8003370 <fnd_output_pwm_write_value+0x3c>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)(values[0] / 1.2));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f892 	bl	8000474 <__aeabi_i2d>
 8003350:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <fnd_output_pwm_write_value+0xb4>)
 8003356:	f7fd fa21 	bl	800079c <__aeabi_ddiv>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7fd fbc9 	bl	8000af8 <__aeabi_d2uiz>
 8003366:	4603      	mov	r3, r0
 8003368:	b29a      	uxth	r2, r3
 800336a:	4b20      	ldr	r3, [pc, #128]	; (80033ec <fnd_output_pwm_write_value+0xb8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (values[1] < 1000)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3302      	adds	r3, #2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800337a:	d215      	bcs.n	80033a8 <fnd_output_pwm_write_value+0x74>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(values[1] / 1.2));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3302      	adds	r3, #2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f876 	bl	8000474 <__aeabi_i2d>
 8003388:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800338c:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <fnd_output_pwm_write_value+0xb4>)
 800338e:	f7fd fa05 	bl	800079c <__aeabi_ddiv>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f7fd fbad 	bl	8000af8 <__aeabi_d2uiz>
 800339e:	4603      	mov	r3, r0
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <fnd_output_pwm_write_value+0xb8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (values[3] < 1000)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3306      	adds	r3, #6
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033b2:	d215      	bcs.n	80033e0 <fnd_output_pwm_write_value+0xac>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)(values[1] / 1.2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3302      	adds	r3, #2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd f85a 	bl	8000474 <__aeabi_i2d>
 80033c0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <fnd_output_pwm_write_value+0xb4>)
 80033c6:	f7fd f9e9 	bl	800079c <__aeabi_ddiv>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	f7fd fb91 	bl	8000af8 <__aeabi_d2uiz>
 80033d6:	4603      	mov	r3, r0
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <fnd_output_pwm_write_value+0xbc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	3ff33333 	.word	0x3ff33333
 80033ec:	20004d6c 	.word	0x20004d6c
 80033f0:	20004db4 	.word	0x20004db4

080033f4 <fnd_output_stepper_tick>:
                            STEP_A5_Pin, STEP_A6_Pin, STEP_A7_Pin, STEP_A8_Pin,
                            STEP_B1_Pin, STEP_B2_Pin, STEP_B3_Pin, STEP_B4_Pin,
                            STEP_B5_Pin, STEP_B6_Pin, STEP_B7_Pin, STEP_B8_Pin};

static void fnd_output_stepper_tick(stepper_motor *motor)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    if (motor->current_pos == motor->target_pos)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8c1a      	ldrh	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8bdb      	ldrh	r3, [r3, #30]
 8003404:	429a      	cmp	r2, r3
 8003406:	d109      	bne.n	800341c <fnd_output_stepper_tick+0x28>
    {
        motor->mode = STOP;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	761a      	strb	r2, [r3, #24]
        motor->up_excite_cnt = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	835a      	strh	r2, [r3, #26]
        motor->down_excite_cnt = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	839a      	strh	r2, [r3, #28]
 800341a:	e034      	b.n	8003486 <fnd_output_stepper_tick+0x92>
    }
    else if (motor->current_pos < motor->target_pos)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8c1a      	ldrh	r2, [r3, #32]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8bdb      	ldrh	r3, [r3, #30]
 8003424:	429a      	cmp	r2, r3
 8003426:	d214      	bcs.n	8003452 <fnd_output_stepper_tick+0x5e>
    {
        motor->down_excite_cnt = 0;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	839a      	strh	r2, [r3, #28]
        if (motor->up_excite_cnt < EXCITE_TICKS)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8b5b      	ldrh	r3, [r3, #26]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d809      	bhi.n	800344a <fnd_output_stepper_tick+0x56>
        {
            motor->mode = UP_EXCITE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	761a      	strb	r2, [r3, #24]
            motor->up_excite_cnt = motor->up_excite_cnt + 1;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	8b5b      	ldrh	r3, [r3, #26]
 8003440:	3301      	adds	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	835a      	strh	r2, [r3, #26]
 8003448:	e01d      	b.n	8003486 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = UP;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	761a      	strb	r2, [r3, #24]
 8003450:	e019      	b.n	8003486 <fnd_output_stepper_tick+0x92>
        }
    }
    else if (motor->current_pos > motor->target_pos)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	8c1a      	ldrh	r2, [r3, #32]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8bdb      	ldrh	r3, [r3, #30]
 800345a:	429a      	cmp	r2, r3
 800345c:	d913      	bls.n	8003486 <fnd_output_stepper_tick+0x92>
    {
        motor->up_excite_cnt = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	835a      	strh	r2, [r3, #26]
        if (motor->down_excite_cnt < EXCITE_TICKS)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8b9b      	ldrh	r3, [r3, #28]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d809      	bhi.n	8003480 <fnd_output_stepper_tick+0x8c>
        {
            motor->mode = DOWN_EXCITE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	761a      	strb	r2, [r3, #24]
            motor->down_excite_cnt = motor->down_excite_cnt + 1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8b9b      	ldrh	r3, [r3, #28]
 8003476:	3301      	adds	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	839a      	strh	r2, [r3, #28]
 800347e:	e002      	b.n	8003486 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = DOWN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	761a      	strb	r2, [r3, #24]
        }
    }

    if (motor->mode == STOP)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7e1b      	ldrb	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <fnd_output_stepper_tick+0xc8>
    {
        for (uint8_t i = 0; i < 4; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	73fb      	strb	r3, [r7, #15]
 8003492:	e00f      	b.n	80034b4 <fnd_output_stepper_tick+0xc0>
        {
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034a6:	2200      	movs	r2, #0
 80034a8:	4619      	mov	r1, r3
 80034aa:	f001 fe6f 	bl	800518c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	3301      	adds	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d9ec      	bls.n	8003494 <fnd_output_stepper_tick+0xa0>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 80034ba:	e16b      	b.n	8003794 <fnd_output_stepper_tick+0x3a0>
    else if (motor->mode == UP_EXCITE || motor->mode == DOWN_EXCITE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7e1b      	ldrb	r3, [r3, #24]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d003      	beq.n	80034cc <fnd_output_stepper_tick+0xd8>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7e1b      	ldrb	r3, [r3, #24]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d15c      	bne.n	8003586 <fnd_output_stepper_tick+0x192>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8a19      	ldrh	r1, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <fnd_output_stepper_tick+0xf8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d003      	beq.n	80034ec <fnd_output_stepper_tick+0xf8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80034e8:	2b07      	cmp	r3, #7
 80034ea:	d101      	bne.n	80034f0 <fnd_output_stepper_tick+0xfc>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <fnd_output_stepper_tick+0xfe>
 80034f0:	2300      	movs	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	f001 fe49 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6858      	ldr	r0, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	8a59      	ldrh	r1, [r3, #18]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003506:	2b01      	cmp	r3, #1
 8003508:	d007      	beq.n	800351a <fnd_output_stepper_tick+0x126>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <fnd_output_stepper_tick+0x126>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003516:	2b03      	cmp	r3, #3
 8003518:	d101      	bne.n	800351e <fnd_output_stepper_tick+0x12a>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <fnd_output_stepper_tick+0x12c>
 800351e:	2300      	movs	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	f001 fe32 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6898      	ldr	r0, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8a99      	ldrh	r1, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003534:	2b03      	cmp	r3, #3
 8003536:	d007      	beq.n	8003548 <fnd_output_stepper_tick+0x154>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800353c:	2b04      	cmp	r3, #4
 800353e:	d003      	beq.n	8003548 <fnd_output_stepper_tick+0x154>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003544:	2b05      	cmp	r3, #5
 8003546:	d101      	bne.n	800354c <fnd_output_stepper_tick+0x158>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <fnd_output_stepper_tick+0x15a>
 800354c:	2300      	movs	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	f001 fe1b 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68d8      	ldr	r0, [r3, #12]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8ad9      	ldrh	r1, [r3, #22]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003562:	2b05      	cmp	r3, #5
 8003564:	d007      	beq.n	8003576 <fnd_output_stepper_tick+0x182>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800356a:	2b06      	cmp	r3, #6
 800356c:	d003      	beq.n	8003576 <fnd_output_stepper_tick+0x182>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003572:	2b07      	cmp	r3, #7
 8003574:	d101      	bne.n	800357a <fnd_output_stepper_tick+0x186>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <fnd_output_stepper_tick+0x188>
 800357a:	2300      	movs	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	f001 fe04 	bl	800518c <HAL_GPIO_WritePin>
}
 8003584:	e106      	b.n	8003794 <fnd_output_stepper_tick+0x3a0>
    else if (motor->mode == UP)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7e1b      	ldrb	r3, [r3, #24]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d17f      	bne.n	800368e <fnd_output_stepper_tick+0x29a>
        for (uint8_t i = 0; i < 4; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	73bb      	strb	r3, [r7, #14]
 8003592:	e00f      	b.n	80035b4 <fnd_output_stepper_tick+0x1c0>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003594:	7bba      	ldrb	r2, [r7, #14]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800359c:	7bba      	ldrb	r2, [r7, #14]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035a6:	2200      	movs	r2, #0
 80035a8:	4619      	mov	r1, r3
 80035aa:	f001 fdef 	bl	800518c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80035ae:	7bbb      	ldrb	r3, [r7, #14]
 80035b0:	3301      	adds	r3, #1
 80035b2:	73bb      	strb	r3, [r7, #14]
 80035b4:	7bbb      	ldrb	r3, [r7, #14]
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d9ec      	bls.n	8003594 <fnd_output_stepper_tick+0x1a0>
        motor->phase = (motor->phase + 1) % 8;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035be:	3301      	adds	r3, #1
 80035c0:	425a      	negs	r2, r3
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	f002 0207 	and.w	r2, r2, #7
 80035ca:	bf58      	it	pl
 80035cc:	4253      	negpl	r3, r2
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6818      	ldr	r0, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8a19      	ldrh	r1, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <fnd_output_stepper_tick+0x200>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d003      	beq.n	80035f4 <fnd_output_stepper_tick+0x200>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80035f0:	2b07      	cmp	r3, #7
 80035f2:	d101      	bne.n	80035f8 <fnd_output_stepper_tick+0x204>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <fnd_output_stepper_tick+0x206>
 80035f8:	2300      	movs	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	f001 fdc5 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6858      	ldr	r0, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8a59      	ldrh	r1, [r3, #18]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800360e:	2b01      	cmp	r3, #1
 8003610:	d007      	beq.n	8003622 <fnd_output_stepper_tick+0x22e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003616:	2b02      	cmp	r3, #2
 8003618:	d003      	beq.n	8003622 <fnd_output_stepper_tick+0x22e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800361e:	2b03      	cmp	r3, #3
 8003620:	d101      	bne.n	8003626 <fnd_output_stepper_tick+0x232>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <fnd_output_stepper_tick+0x234>
 8003626:	2300      	movs	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	f001 fdae 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6898      	ldr	r0, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8a99      	ldrh	r1, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800363c:	2b03      	cmp	r3, #3
 800363e:	d007      	beq.n	8003650 <fnd_output_stepper_tick+0x25c>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003644:	2b04      	cmp	r3, #4
 8003646:	d003      	beq.n	8003650 <fnd_output_stepper_tick+0x25c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800364c:	2b05      	cmp	r3, #5
 800364e:	d101      	bne.n	8003654 <fnd_output_stepper_tick+0x260>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <fnd_output_stepper_tick+0x262>
 8003654:	2300      	movs	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	461a      	mov	r2, r3
 800365a:	f001 fd97 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68d8      	ldr	r0, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8ad9      	ldrh	r1, [r3, #22]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800366a:	2b05      	cmp	r3, #5
 800366c:	d007      	beq.n	800367e <fnd_output_stepper_tick+0x28a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003672:	2b06      	cmp	r3, #6
 8003674:	d003      	beq.n	800367e <fnd_output_stepper_tick+0x28a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800367a:	2b07      	cmp	r3, #7
 800367c:	d101      	bne.n	8003682 <fnd_output_stepper_tick+0x28e>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <fnd_output_stepper_tick+0x290>
 8003682:	2300      	movs	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	f001 fd80 	bl	800518c <HAL_GPIO_WritePin>
}
 800368c:	e082      	b.n	8003794 <fnd_output_stepper_tick+0x3a0>
    else if (motor->mode == DOWN)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7e1b      	ldrb	r3, [r3, #24]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d17e      	bne.n	8003794 <fnd_output_stepper_tick+0x3a0>
        for (uint8_t i = 0; i < 4; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	737b      	strb	r3, [r7, #13]
 800369a:	e00f      	b.n	80036bc <fnd_output_stepper_tick+0x2c8>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 800369c:	7b7a      	ldrb	r2, [r7, #13]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80036a4:	7b7a      	ldrb	r2, [r7, #13]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80036ae:	2200      	movs	r2, #0
 80036b0:	4619      	mov	r1, r3
 80036b2:	f001 fd6b 	bl	800518c <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 80036b6:	7b7b      	ldrb	r3, [r7, #13]
 80036b8:	3301      	adds	r3, #1
 80036ba:	737b      	strb	r3, [r7, #13]
 80036bc:	7b7b      	ldrb	r3, [r7, #13]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d9ec      	bls.n	800369c <fnd_output_stepper_tick+0x2a8>
        motor->phase = (motor->phase + 7) % 8;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036c6:	3307      	adds	r3, #7
 80036c8:	425a      	negs	r2, r3
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	f002 0207 	and.w	r2, r2, #7
 80036d2:	bf58      	it	pl
 80036d4:	4253      	negpl	r3, r2
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8a19      	ldrh	r1, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <fnd_output_stepper_tick+0x308>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d003      	beq.n	80036fc <fnd_output_stepper_tick+0x308>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80036f8:	2b07      	cmp	r3, #7
 80036fa:	d101      	bne.n	8003700 <fnd_output_stepper_tick+0x30c>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <fnd_output_stepper_tick+0x30e>
 8003700:	2300      	movs	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	f001 fd41 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6858      	ldr	r0, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8a59      	ldrh	r1, [r3, #18]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003716:	2b01      	cmp	r3, #1
 8003718:	d007      	beq.n	800372a <fnd_output_stepper_tick+0x336>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800371e:	2b02      	cmp	r3, #2
 8003720:	d003      	beq.n	800372a <fnd_output_stepper_tick+0x336>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003726:	2b03      	cmp	r3, #3
 8003728:	d101      	bne.n	800372e <fnd_output_stepper_tick+0x33a>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <fnd_output_stepper_tick+0x33c>
 800372e:	2300      	movs	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	f001 fd2a 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6898      	ldr	r0, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8a99      	ldrh	r1, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003744:	2b03      	cmp	r3, #3
 8003746:	d007      	beq.n	8003758 <fnd_output_stepper_tick+0x364>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800374c:	2b04      	cmp	r3, #4
 800374e:	d003      	beq.n	8003758 <fnd_output_stepper_tick+0x364>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003754:	2b05      	cmp	r3, #5
 8003756:	d101      	bne.n	800375c <fnd_output_stepper_tick+0x368>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <fnd_output_stepper_tick+0x36a>
 800375c:	2300      	movs	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	f001 fd13 	bl	800518c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68d8      	ldr	r0, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ad9      	ldrh	r1, [r3, #22]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003772:	2b05      	cmp	r3, #5
 8003774:	d007      	beq.n	8003786 <fnd_output_stepper_tick+0x392>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800377a:	2b06      	cmp	r3, #6
 800377c:	d003      	beq.n	8003786 <fnd_output_stepper_tick+0x392>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003782:	2b07      	cmp	r3, #7
 8003784:	d101      	bne.n	800378a <fnd_output_stepper_tick+0x396>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <fnd_output_stepper_tick+0x398>
 800378a:	2300      	movs	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	f001 fcfc 	bl	800518c <HAL_GPIO_WritePin>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <fnd_output_stepper_init>:

void fnd_output_stepper_init(void)
{
 800379c:	b490      	push	{r4, r7}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	71fb      	strb	r3, [r7, #7]
 80037a6:	e06a      	b.n	800387e <fnd_output_stepper_init+0xe2>
    {
        for (uint8_t j = 0; j < 4; j++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	71bb      	strb	r3, [r7, #6]
 80037ac:	e025      	b.n	80037fa <fnd_output_stepper_init+0x5e>
        {
            motor[i].gpio_port[j] = stepper_port[i * 4 + j];
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	79bb      	ldrb	r3, [r7, #6]
 80037b4:	4413      	add	r3, r2
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	79b8      	ldrb	r0, [r7, #6]
 80037ba:	4935      	ldr	r1, [pc, #212]	; (8003890 <fnd_output_stepper_init+0xf4>)
 80037bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80037c0:	4c34      	ldr	r4, [pc, #208]	; (8003894 <fnd_output_stepper_init+0xf8>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	4403      	add	r3, r0
 80037ca:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
            motor[i].gpio_pin[j] = stepper_pin[i * 4 + j];
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	79bb      	ldrb	r3, [r7, #6]
 80037d4:	4413      	add	r3, r2
 80037d6:	79fa      	ldrb	r2, [r7, #7]
 80037d8:	79b9      	ldrb	r1, [r7, #6]
 80037da:	482f      	ldr	r0, [pc, #188]	; (8003898 <fnd_output_stepper_init+0xfc>)
 80037dc:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 80037e0:	482c      	ldr	r0, [pc, #176]	; (8003894 <fnd_output_stepper_init+0xf8>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	440b      	add	r3, r1
 80037ec:	3308      	adds	r3, #8
 80037ee:	4622      	mov	r2, r4
 80037f0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (uint8_t j = 0; j < 4; j++)
 80037f4:	79bb      	ldrb	r3, [r7, #6]
 80037f6:	3301      	adds	r3, #1
 80037f8:	71bb      	strb	r3, [r7, #6]
 80037fa:	79bb      	ldrb	r3, [r7, #6]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d9d6      	bls.n	80037ae <fnd_output_stepper_init+0x12>
        }
        motor[i].current_pos = 0;
 8003800:	79fa      	ldrb	r2, [r7, #7]
 8003802:	4924      	ldr	r1, [pc, #144]	; (8003894 <fnd_output_stepper_init+0xf8>)
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3320      	adds	r3, #32
 8003810:	2200      	movs	r2, #0
 8003812:	801a      	strh	r2, [r3, #0]
        motor[i].down_excite_cnt = 0;
 8003814:	79fa      	ldrb	r2, [r7, #7]
 8003816:	491f      	ldr	r1, [pc, #124]	; (8003894 <fnd_output_stepper_init+0xf8>)
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	331c      	adds	r3, #28
 8003824:	2200      	movs	r2, #0
 8003826:	801a      	strh	r2, [r3, #0]
        motor[i].mode = STOP;
 8003828:	79fa      	ldrb	r2, [r7, #7]
 800382a:	491a      	ldr	r1, [pc, #104]	; (8003894 <fnd_output_stepper_init+0xf8>)
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3318      	adds	r3, #24
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
        motor[i].phase = 0;
 800383c:	79fa      	ldrb	r2, [r7, #7]
 800383e:	4915      	ldr	r1, [pc, #84]	; (8003894 <fnd_output_stepper_init+0xf8>)
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3322      	adds	r3, #34	; 0x22
 800384c:	2200      	movs	r2, #0
 800384e:	801a      	strh	r2, [r3, #0]
        motor[i].target_pos = 0;
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	4910      	ldr	r1, [pc, #64]	; (8003894 <fnd_output_stepper_init+0xf8>)
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	331e      	adds	r3, #30
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]
        motor[i].up_excite_cnt = 0;
 8003864:	79fa      	ldrb	r2, [r7, #7]
 8003866:	490b      	ldr	r1, [pc, #44]	; (8003894 <fnd_output_stepper_init+0xf8>)
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	331a      	adds	r3, #26
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	3301      	adds	r3, #1
 800387c:	71fb      	strb	r3, [r7, #7]
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d991      	bls.n	80037a8 <fnd_output_stepper_init+0xc>
    }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bc90      	pop	{r4, r7}
 800388e:	4770      	bx	lr
 8003890:	20000078 	.word	0x20000078
 8003894:	20006aa4 	.word	0x20006aa4
 8003898:	200000b8 	.word	0x200000b8

0800389c <fnd_output_stepper_set_position>:

void fnd_output_stepper_set_position(uint16_t *values)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    motor[0].target_pos = values[0];
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <fnd_output_stepper_set_position+0x3c>)
 80038aa:	83da      	strh	r2, [r3, #30]
    motor[1].target_pos = values[1];
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	885a      	ldrh	r2, [r3, #2]
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <fnd_output_stepper_set_position+0x3c>)
 80038b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor[2].target_pos = values[2];
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	889a      	ldrh	r2, [r3, #4]
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <fnd_output_stepper_set_position+0x3c>)
 80038bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    motor[3].target_pos = values[3];
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	88da      	ldrh	r2, [r3, #6]
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <fnd_output_stepper_set_position+0x3c>)
 80038c6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20006aa4 	.word	0x20006aa4

080038dc <fnd_output_stepper_10ms_tick>:

void fnd_output_stepper_10ms_tick(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
    fnd_output_stepper_tick(&motor[0]);
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <fnd_output_stepper_10ms_tick+0x20>)
 80038e2:	f7ff fd87 	bl	80033f4 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[1]);
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <fnd_output_stepper_10ms_tick+0x24>)
 80038e8:	f7ff fd84 	bl	80033f4 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[2]);
 80038ec:	4805      	ldr	r0, [pc, #20]	; (8003904 <fnd_output_stepper_10ms_tick+0x28>)
 80038ee:	f7ff fd81 	bl	80033f4 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[3]);
 80038f2:	4805      	ldr	r0, [pc, #20]	; (8003908 <fnd_output_stepper_10ms_tick+0x2c>)
 80038f4:	f7ff fd7e 	bl	80033f4 <fnd_output_stepper_tick>
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20006aa4 	.word	0x20006aa4
 8003900:	20006ac8 	.word	0x20006ac8
 8003904:	20006aec 	.word	0x20006aec
 8003908:	20006b10 	.word	0x20006b10

0800390c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003910:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_Init+0x40>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <HAL_Init+0x40>)
 8003916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800391a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_Init+0x40>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_Init+0x40>)
 8003922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_Init+0x40>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a07      	ldr	r2, [pc, #28]	; (800394c <HAL_Init+0x40>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003934:	2003      	movs	r0, #3
 8003936:	f000 fe3e 	bl	80045b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800393a:	200f      	movs	r0, #15
 800393c:	f7fe f8d2 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003940:	f7fe f8a4 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023c00 	.word	0x40023c00

08003950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_IncTick+0x20>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	461a      	mov	r2, r3
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_IncTick+0x24>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_IncTick+0x24>)
 8003962:	6013      	str	r3, [r2, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200000dc 	.word	0x200000dc
 8003974:	20006b34 	.word	0x20006b34

08003978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return uwTick;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_GetTick+0x14>)
 800397e:	681b      	ldr	r3, [r3, #0]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20006b34 	.word	0x20006b34

08003990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e033      	b.n	8003a0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd fb88 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d118      	bne.n	8003a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039d6:	f023 0302 	bic.w	r3, r3, #2
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fbb2 	bl	800414c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
 80039fe:	e001      	b.n	8003a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d049      	beq.n	8003aec <HAL_ADC_IRQHandler+0xd6>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d046      	beq.n	8003aec <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d105      	bne.n	8003a76 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12b      	bne.n	8003adc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d127      	bne.n	8003adc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d119      	bne.n	8003adc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0220 	bic.w	r2, r2, #32
 8003ab6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d105      	bne.n	8003adc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f9eb 	bl	8003eb8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0212 	mvn.w	r2, #18
 8003aea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d057      	beq.n	8003bce <HAL_ADC_IRQHandler+0x1b8>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d054      	beq.n	8003bce <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	f003 0310 	and.w	r3, r3, #16
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d105      	bne.n	8003b3c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d139      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d006      	beq.n	8003b66 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d12b      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d124      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11d      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b98:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fc42 	bl	8004448 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 020c 	mvn.w	r2, #12
 8003bcc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d017      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x21a>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d014      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f95d 	bl	8003ee0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0201 	mvn.w	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	bf0c      	ite	eq
 8003c3e:	2301      	moveq	r3, #1
 8003c40:	2300      	movne	r3, #0
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d015      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x27a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f06f 0220 	mvn.w	r2, #32
 8003c7e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f937 	bl	8003ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0220 	mvn.w	r2, #32
 8003c8e:	601a      	str	r2, [r3, #0]
  }
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_Start_DMA+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0e9      	b.n	8003e8a <HAL_ADC_Start_DMA+0x1f2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d018      	beq.n	8003cfe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cdc:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_ADC_Start_DMA+0x1fc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_ADC_Start_DMA+0x200>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9a      	lsrs	r2, r3, #18
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cf0:	e002      	b.n	8003cf8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f9      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d107      	bne.n	8003d1e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f040 80a1 	bne.w	8003e70 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d36:	f023 0301 	bic.w	r3, r3, #1
 8003d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d106      	bne.n	8003d7c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f023 0206 	bic.w	r2, r3, #6
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	645a      	str	r2, [r3, #68]	; 0x44
 8003d7a:	e002      	b.n	8003d82 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d8a:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_ADC_Start_DMA+0x204>)
 8003d8c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	4a43      	ldr	r2, [pc, #268]	; (8003ea0 <HAL_ADC_Start_DMA+0x208>)
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4a42      	ldr	r2, [pc, #264]	; (8003ea4 <HAL_ADC_Start_DMA+0x20c>)
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4a41      	ldr	r2, [pc, #260]	; (8003ea8 <HAL_ADC_Start_DMA+0x210>)
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dbe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	334c      	adds	r3, #76	; 0x4c
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f000 fccc 	bl	800477c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d12a      	bne.n	8003e46 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <HAL_ADC_Start_DMA+0x214>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d015      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x18e>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <HAL_ADC_Start_DMA+0x218>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d105      	bne.n	8003e10 <HAL_ADC_Start_DMA+0x178>
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_ADC_Start_DMA+0x204>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_ADC_Start_DMA+0x21c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d136      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
 8003e1a:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_ADC_Start_DMA+0x204>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d130      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d129      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	e020      	b.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_ADC_Start_DMA+0x214>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d11b      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d114      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	e00b      	b.n	8003e88 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0210 	orr.w	r2, r3, #16
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000000 	.word	0x20000000
 8003e98:	431bde83 	.word	0x431bde83
 8003e9c:	40012300 	.word	0x40012300
 8003ea0:	08004345 	.word	0x08004345
 8003ea4:	080043ff 	.word	0x080043ff
 8003ea8:	0800441b 	.word	0x0800441b
 8003eac:	40012000 	.word	0x40012000
 8003eb0:	40012100 	.word	0x40012100
 8003eb4:	40012200 	.word	0x40012200

08003eb8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x1c>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e105      	b.n	8004130 <HAL_ADC_ConfigChannel+0x228>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b09      	cmp	r3, #9
 8003f32:	d925      	bls.n	8003f80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68d9      	ldr	r1, [r3, #12]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	3b1e      	subs	r3, #30
 8003f4a:	2207      	movs	r2, #7
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43da      	mvns	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	400a      	ands	r2, r1
 8003f58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	4403      	add	r3, r0
 8003f72:	3b1e      	subs	r3, #30
 8003f74:	409a      	lsls	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e022      	b.n	8003fc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4613      	mov	r3, r2
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4413      	add	r3, r2
 8003f94:	2207      	movs	r2, #7
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	400a      	ands	r2, r1
 8003fa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6919      	ldr	r1, [r3, #16]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4403      	add	r3, r0
 8003fbc:	409a      	lsls	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d824      	bhi.n	8004018 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b05      	subs	r3, #5
 8003fe0:	221f      	movs	r2, #31
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	400a      	ands	r2, r1
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	3b05      	subs	r3, #5
 800400a:	fa00 f203 	lsl.w	r2, r0, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	635a      	str	r2, [r3, #52]	; 0x34
 8004016:	e04c      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d824      	bhi.n	800406a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	3b23      	subs	r3, #35	; 0x23
 8004032:	221f      	movs	r2, #31
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43da      	mvns	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	400a      	ands	r2, r1
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	4618      	mov	r0, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	3b23      	subs	r3, #35	; 0x23
 800405c:	fa00 f203 	lsl.w	r2, r0, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
 8004068:	e023      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	3b41      	subs	r3, #65	; 0x41
 800407c:	221f      	movs	r2, #31
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43da      	mvns	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	400a      	ands	r2, r1
 800408a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	4618      	mov	r0, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	3b41      	subs	r3, #65	; 0x41
 80040a6:	fa00 f203 	lsl.w	r2, r0, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <HAL_ADC_ConfigChannel+0x234>)
 80040b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a21      	ldr	r2, [pc, #132]	; (8004140 <HAL_ADC_ConfigChannel+0x238>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d109      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1cc>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b12      	cmp	r3, #18
 80040c6:	d105      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	; (8004140 <HAL_ADC_ConfigChannel+0x238>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d123      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x21e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d003      	beq.n	80040ee <HAL_ADC_ConfigChannel+0x1e6>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b11      	cmp	r3, #17
 80040ec:	d11b      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d111      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <HAL_ADC_ConfigChannel+0x23c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_ADC_ConfigChannel+0x240>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	0c9a      	lsrs	r2, r3, #18
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004118:	e002      	b.n	8004120 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3b01      	subs	r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f9      	bne.n	800411a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	40012300 	.word	0x40012300
 8004140:	40012000 	.word	0x40012000
 8004144:	20000000 	.word	0x20000000
 8004148:	431bde83 	.word	0x431bde83

0800414c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004154:	4b79      	ldr	r3, [pc, #484]	; (800433c <ADC_Init+0x1f0>)
 8004156:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	021a      	lsls	r2, r3, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6899      	ldr	r1, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	4a58      	ldr	r2, [pc, #352]	; (8004340 <ADC_Init+0x1f4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d022      	beq.n	800422a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6899      	ldr	r1, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	e00f      	b.n	800424a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004248:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0202 	bic.w	r2, r2, #2
 8004258:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6899      	ldr	r1, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7e1b      	ldrb	r3, [r3, #24]
 8004264:	005a      	lsls	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004286:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004296:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	3b01      	subs	r3, #1
 80042a4:	035a      	lsls	r2, r3, #13
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	e007      	b.n	80042c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	3b01      	subs	r3, #1
 80042dc:	051a      	lsls	r2, r3, #20
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6899      	ldr	r1, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004302:	025a      	lsls	r2, r3, #9
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	029a      	lsls	r2, r3, #10
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40012300 	.word	0x40012300
 8004340:	0f000001 	.word	0x0f000001

08004344 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800435a:	2b00      	cmp	r3, #0
 800435c:	d13c      	bne.n	80043d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d12b      	bne.n	80043d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800437c:	2b00      	cmp	r3, #0
 800437e:	d127      	bne.n	80043d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004398:	2b00      	cmp	r3, #0
 800439a:	d119      	bne.n	80043d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0220 	bic.w	r2, r2, #32
 80043aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	f043 0201 	orr.w	r2, r3, #1
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff fd71 	bl	8003eb8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043d6:	e00e      	b.n	80043f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f003 0310 	and.w	r3, r3, #16
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fd85 	bl	8003ef4 <HAL_ADC_ErrorCallback>
}
 80043ea:	e004      	b.n	80043f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
}
 80043f6:	bf00      	nop
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f7ff fd5d 	bl	8003ecc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2240      	movs	r2, #64	; 0x40
 800442c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	f043 0204 	orr.w	r2, r3, #4
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f7ff fd5a 	bl	8003ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	60d3      	str	r3, [r2, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <__NVIC_EnableIRQ+0x38>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e100 	.word	0xe000e100

080044fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450c:	2b00      	cmp	r3, #0
 800450e:	db0a      	blt.n	8004526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	490c      	ldr	r1, [pc, #48]	; (8004548 <__NVIC_SetPriority+0x4c>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	0112      	lsls	r2, r2, #4
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	440b      	add	r3, r1
 8004520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004524:	e00a      	b.n	800453c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	4908      	ldr	r1, [pc, #32]	; (800454c <__NVIC_SetPriority+0x50>)
 800452c:	79fb      	ldrb	r3, [r7, #7]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	3b04      	subs	r3, #4
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	440b      	add	r3, r1
 800453a:	761a      	strb	r2, [r3, #24]
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000e100 	.word	0xe000e100
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f1c3 0307 	rsb	r3, r3, #7
 800456a:	2b04      	cmp	r3, #4
 800456c:	bf28      	it	cs
 800456e:	2304      	movcs	r3, #4
 8004570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3304      	adds	r3, #4
 8004576:	2b06      	cmp	r3, #6
 8004578:	d902      	bls.n	8004580 <NVIC_EncodePriority+0x30>
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3b03      	subs	r3, #3
 800457e:	e000      	b.n	8004582 <NVIC_EncodePriority+0x32>
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	f04f 32ff 	mov.w	r2, #4294967295
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	401a      	ands	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004598:	f04f 31ff 	mov.w	r1, #4294967295
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	fa01 f303 	lsl.w	r3, r1, r3
 80045a2:	43d9      	mvns	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a8:	4313      	orrs	r3, r2
         );
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ff4c 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045de:	f7ff ff61 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 80045e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	6978      	ldr	r0, [r7, #20]
 80045ea:	f7ff ffb1 	bl	8004550 <NVIC_EncodePriority>
 80045ee:	4602      	mov	r2, r0
 80045f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ff80 	bl	80044fc <__NVIC_SetPriority>
}
 80045fc:	bf00      	nop
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800460e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ff54 	bl	80044c0 <__NVIC_EnableIRQ>
}
 8004618:	bf00      	nop
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7ff f9a4 	bl	8003978 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e099      	b.n	8004770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0201 	bic.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800465c:	e00f      	b.n	800467e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800465e:	f7ff f98b 	bl	8003978 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b05      	cmp	r3, #5
 800466a:	d908      	bls.n	800467e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e078      	b.n	8004770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e8      	bne.n	800465e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_DMA_Init+0x158>)
 8004698:	4013      	ands	r3, r2
 800469a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d107      	bne.n	80046e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	4313      	orrs	r3, r2
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b04      	cmp	r3, #4
 8004710:	d117      	bne.n	8004742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00e      	beq.n	8004742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fb01 	bl	8004d2c <DMA_CheckFifoParam>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2240      	movs	r2, #64	; 0x40
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800473e:	2301      	movs	r3, #1
 8004740:	e016      	b.n	8004770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fab8 	bl	8004cc0 <DMA_CalcBaseAndBitshift>
 8004750:	4603      	mov	r3, r0
 8004752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	223f      	movs	r2, #63	; 0x3f
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	f010803f 	.word	0xf010803f

0800477c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004792:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Start_IT+0x26>
 800479e:	2302      	movs	r3, #2
 80047a0:	e040      	b.n	8004824 <HAL_DMA_Start_IT+0xa8>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d12f      	bne.n	8004816 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2202      	movs	r2, #2
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa4a 	bl	8004c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	223f      	movs	r2, #63	; 0x3f
 80047d6:	409a      	lsls	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0216 	orr.w	r2, r2, #22
 80047ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e005      	b.n	8004822 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800481e:	2302      	movs	r3, #2
 8004820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800483a:	f7ff f89d 	bl	8003978 <HAL_GetTick>
 800483e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d008      	beq.n	800485e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e052      	b.n	8004904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0216 	bic.w	r2, r2, #22
 800486c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800487c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <HAL_DMA_Abort+0x62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0208 	bic.w	r2, r2, #8
 800489c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ae:	e013      	b.n	80048d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048b0:	f7ff f862 	bl	8003978 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d90c      	bls.n	80048d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2203      	movs	r2, #3
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e015      	b.n	8004904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e4      	bne.n	80048b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	223f      	movs	r2, #63	; 0x3f
 80048ec:	409a      	lsls	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d004      	beq.n	800492a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2280      	movs	r2, #128	; 0x80
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e00c      	b.n	8004944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2205      	movs	r2, #5
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800495c:	4b92      	ldr	r3, [pc, #584]	; (8004ba8 <HAL_DMA_IRQHandler+0x258>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a92      	ldr	r2, [pc, #584]	; (8004bac <HAL_DMA_IRQHandler+0x25c>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	2208      	movs	r2, #8
 80049aa:	409a      	lsls	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	f043 0202 	orr.w	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f6:	2204      	movs	r2, #4
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	2204      	movs	r2, #4
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d043      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03c      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d024      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e01f      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	e016      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 808e 	beq.w	8004bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8086 	beq.w	8004bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d136      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0216 	bic.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x1da>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	223f      	movs	r2, #63	; 0x3f
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d07d      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
        }
        return;
 8004b66:	e078      	b.n	8004c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01c      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d030      	beq.n	8004bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	e02b      	b.n	8004bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d027      	beq.n	8004bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4798      	blx	r3
 8004ba6:	e022      	b.n	8004bee <HAL_DMA_IRQHandler+0x29e>
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0210 	bic.w	r2, r2, #16
 8004bcc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d032      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d022      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2205      	movs	r2, #5
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d307      	bcc.n	8004c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f2      	bne.n	8004c1a <HAL_DMA_IRQHandler+0x2ca>
 8004c34:	e000      	b.n	8004c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c36:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
 8004c58:	e000      	b.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c5a:	bf00      	nop
    }
  }
}
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d108      	bne.n	8004ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ca2:	e007      	b.n	8004cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3b10      	subs	r3, #16
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <DMA_CalcBaseAndBitshift+0x64>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cda:	4a13      	ldr	r2, [pc, #76]	; (8004d28 <DMA_CalcBaseAndBitshift+0x68>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d909      	bls.n	8004d02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	659a      	str	r2, [r3, #88]	; 0x58
 8004d00:	e007      	b.n	8004d12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	aaaaaaab 	.word	0xaaaaaaab
 8004d28:	0800c410 	.word	0x0800c410

08004d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11f      	bne.n	8004d86 <DMA_CheckFifoParam+0x5a>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d856      	bhi.n	8004dfa <DMA_CheckFifoParam+0xce>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <DMA_CheckFifoParam+0x28>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d77 	.word	0x08004d77
 8004d5c:	08004d65 	.word	0x08004d65
 8004d60:	08004dfb 	.word	0x08004dfb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d046      	beq.n	8004dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d74:	e043      	b.n	8004dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d7e:	d140      	bne.n	8004e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d84:	e03d      	b.n	8004e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8e:	d121      	bne.n	8004dd4 <DMA_CheckFifoParam+0xa8>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d837      	bhi.n	8004e06 <DMA_CheckFifoParam+0xda>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <DMA_CheckFifoParam+0x70>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004db3 	.word	0x08004db3
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004dc5 	.word	0x08004dc5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e030      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d025      	beq.n	8004e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc2:	e022      	b.n	8004e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dcc:	d11f      	bne.n	8004e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dd2:	e01c      	b.n	8004e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d903      	bls.n	8004de2 <DMA_CheckFifoParam+0xb6>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d003      	beq.n	8004de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004de0:	e018      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      break;
 8004de6:	e015      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e00b      	b.n	8004e12 <DMA_CheckFifoParam+0xe6>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e00a      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e008      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
    }
  } 
  
  return status; 
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e16b      	b.n	8005118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e40:	2201      	movs	r2, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4013      	ands	r3, r2
 8004e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	f040 815a 	bne.w	8005112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d005      	beq.n	8004e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d130      	bne.n	8004ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eac:	2201      	movs	r2, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	f003 0201 	and.w	r2, r3, #1
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d017      	beq.n	8004f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	2203      	movs	r2, #3
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d123      	bne.n	8004f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	08da      	lsrs	r2, r3, #3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3208      	adds	r2, #8
 8004f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	220f      	movs	r2, #15
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	691a      	ldr	r2, [r3, #16]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	08da      	lsrs	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3208      	adds	r2, #8
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2203      	movs	r2, #3
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 0203 	and.w	r2, r3, #3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80b4 	beq.w	8005112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b60      	ldr	r3, [pc, #384]	; (8005130 <HAL_GPIO_Init+0x30c>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	4a5f      	ldr	r2, [pc, #380]	; (8005130 <HAL_GPIO_Init+0x30c>)
 8004fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fba:	4b5d      	ldr	r3, [pc, #372]	; (8005130 <HAL_GPIO_Init+0x30c>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	; (8005134 <HAL_GPIO_Init+0x310>)
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	220f      	movs	r2, #15
 8004fde:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a52      	ldr	r2, [pc, #328]	; (8005138 <HAL_GPIO_Init+0x314>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d02b      	beq.n	800504a <HAL_GPIO_Init+0x226>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a51      	ldr	r2, [pc, #324]	; (800513c <HAL_GPIO_Init+0x318>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d025      	beq.n	8005046 <HAL_GPIO_Init+0x222>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a50      	ldr	r2, [pc, #320]	; (8005140 <HAL_GPIO_Init+0x31c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01f      	beq.n	8005042 <HAL_GPIO_Init+0x21e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a4f      	ldr	r2, [pc, #316]	; (8005144 <HAL_GPIO_Init+0x320>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d019      	beq.n	800503e <HAL_GPIO_Init+0x21a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a4e      	ldr	r2, [pc, #312]	; (8005148 <HAL_GPIO_Init+0x324>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_GPIO_Init+0x216>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a4d      	ldr	r2, [pc, #308]	; (800514c <HAL_GPIO_Init+0x328>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00d      	beq.n	8005036 <HAL_GPIO_Init+0x212>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a4c      	ldr	r2, [pc, #304]	; (8005150 <HAL_GPIO_Init+0x32c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <HAL_GPIO_Init+0x20e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a4b      	ldr	r2, [pc, #300]	; (8005154 <HAL_GPIO_Init+0x330>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <HAL_GPIO_Init+0x20a>
 800502a:	2307      	movs	r3, #7
 800502c:	e00e      	b.n	800504c <HAL_GPIO_Init+0x228>
 800502e:	2308      	movs	r3, #8
 8005030:	e00c      	b.n	800504c <HAL_GPIO_Init+0x228>
 8005032:	2306      	movs	r3, #6
 8005034:	e00a      	b.n	800504c <HAL_GPIO_Init+0x228>
 8005036:	2305      	movs	r3, #5
 8005038:	e008      	b.n	800504c <HAL_GPIO_Init+0x228>
 800503a:	2304      	movs	r3, #4
 800503c:	e006      	b.n	800504c <HAL_GPIO_Init+0x228>
 800503e:	2303      	movs	r3, #3
 8005040:	e004      	b.n	800504c <HAL_GPIO_Init+0x228>
 8005042:	2302      	movs	r3, #2
 8005044:	e002      	b.n	800504c <HAL_GPIO_Init+0x228>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_GPIO_Init+0x228>
 800504a:	2300      	movs	r3, #0
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	f002 0203 	and.w	r2, r2, #3
 8005052:	0092      	lsls	r2, r2, #2
 8005054:	4093      	lsls	r3, r2
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800505c:	4935      	ldr	r1, [pc, #212]	; (8005134 <HAL_GPIO_Init+0x310>)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	089b      	lsrs	r3, r3, #2
 8005062:	3302      	adds	r3, #2
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800506a:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <HAL_GPIO_Init+0x334>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800508e:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_GPIO_Init+0x334>)
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005094:	4b30      	ldr	r3, [pc, #192]	; (8005158 <HAL_GPIO_Init+0x334>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	43db      	mvns	r3, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4013      	ands	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050b8:	4a27      	ldr	r2, [pc, #156]	; (8005158 <HAL_GPIO_Init+0x334>)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050be:	4b26      	ldr	r3, [pc, #152]	; (8005158 <HAL_GPIO_Init+0x334>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4013      	ands	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050e2:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <HAL_GPIO_Init+0x334>)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_GPIO_Init+0x334>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800510c:	4a12      	ldr	r2, [pc, #72]	; (8005158 <HAL_GPIO_Init+0x334>)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	3301      	adds	r3, #1
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b0f      	cmp	r3, #15
 800511c:	f67f ae90 	bls.w	8004e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3724      	adds	r7, #36	; 0x24
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40023800 	.word	0x40023800
 8005134:	40013800 	.word	0x40013800
 8005138:	40020000 	.word	0x40020000
 800513c:	40020400 	.word	0x40020400
 8005140:	40020800 	.word	0x40020800
 8005144:	40020c00 	.word	0x40020c00
 8005148:	40021000 	.word	0x40021000
 800514c:	40021400 	.word	0x40021400
 8005150:	40021800 	.word	0x40021800
 8005154:	40021c00 	.word	0x40021c00
 8005158:	40013c00 	.word	0x40013c00

0800515c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	887b      	ldrh	r3, [r7, #2]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
 8005178:	e001      	b.n	800517e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
 8005198:	4613      	mov	r3, r2
 800519a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800519c:	787b      	ldrb	r3, [r7, #1]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051a8:	e003      	b.n	80051b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051aa:	887b      	ldrh	r3, [r7, #2]
 80051ac:	041a      	lsls	r2, r3, #16
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	619a      	str	r2, [r3, #24]
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e12b      	b.n	800542a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fb08 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2224      	movs	r2, #36	; 0x24
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0201 	bic.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005224:	f001 fcb0 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8005228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4a81      	ldr	r2, [pc, #516]	; (8005434 <HAL_I2C_Init+0x274>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d807      	bhi.n	8005244 <HAL_I2C_Init+0x84>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a80      	ldr	r2, [pc, #512]	; (8005438 <HAL_I2C_Init+0x278>)
 8005238:	4293      	cmp	r3, r2
 800523a:	bf94      	ite	ls
 800523c:	2301      	movls	r3, #1
 800523e:	2300      	movhi	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e006      	b.n	8005252 <HAL_I2C_Init+0x92>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a7d      	ldr	r2, [pc, #500]	; (800543c <HAL_I2C_Init+0x27c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	bf94      	ite	ls
 800524c:	2301      	movls	r3, #1
 800524e:	2300      	movhi	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0e7      	b.n	800542a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a78      	ldr	r2, [pc, #480]	; (8005440 <HAL_I2C_Init+0x280>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	0c9b      	lsrs	r3, r3, #18
 8005264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a6a      	ldr	r2, [pc, #424]	; (8005434 <HAL_I2C_Init+0x274>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d802      	bhi.n	8005294 <HAL_I2C_Init+0xd4>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	3301      	adds	r3, #1
 8005292:	e009      	b.n	80052a8 <HAL_I2C_Init+0xe8>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800529a:	fb02 f303 	mul.w	r3, r2, r3
 800529e:	4a69      	ldr	r2, [pc, #420]	; (8005444 <HAL_I2C_Init+0x284>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	099b      	lsrs	r3, r3, #6
 80052a6:	3301      	adds	r3, #1
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	495c      	ldr	r1, [pc, #368]	; (8005434 <HAL_I2C_Init+0x274>)
 80052c4:	428b      	cmp	r3, r1
 80052c6:	d819      	bhi.n	80052fc <HAL_I2C_Init+0x13c>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1e59      	subs	r1, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80052d6:	1c59      	adds	r1, r3, #1
 80052d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052dc:	400b      	ands	r3, r1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_I2C_Init+0x138>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1e59      	subs	r1, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80052f0:	3301      	adds	r3, #1
 80052f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f6:	e051      	b.n	800539c <HAL_I2C_Init+0x1dc>
 80052f8:	2304      	movs	r3, #4
 80052fa:	e04f      	b.n	800539c <HAL_I2C_Init+0x1dc>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <HAL_I2C_Init+0x168>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1e58      	subs	r0, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6859      	ldr	r1, [r3, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	440b      	add	r3, r1
 8005312:	fbb0 f3f3 	udiv	r3, r0, r3
 8005316:	3301      	adds	r3, #1
 8005318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e012      	b.n	800534e <HAL_I2C_Init+0x18e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1e58      	subs	r0, r3, #1
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	0099      	lsls	r1, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	fbb0 f3f3 	udiv	r3, r0, r3
 800533e:	3301      	adds	r3, #1
 8005340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005344:	2b00      	cmp	r3, #0
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_I2C_Init+0x196>
 8005352:	2301      	movs	r3, #1
 8005354:	e022      	b.n	800539c <HAL_I2C_Init+0x1dc>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10e      	bne.n	800537c <HAL_I2C_Init+0x1bc>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1e58      	subs	r0, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6859      	ldr	r1, [r3, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	440b      	add	r3, r1
 800536c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005370:	3301      	adds	r3, #1
 8005372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	e00f      	b.n	800539c <HAL_I2C_Init+0x1dc>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e58      	subs	r0, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	0099      	lsls	r1, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005392:	3301      	adds	r3, #1
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	6809      	ldr	r1, [r1, #0]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6911      	ldr	r1, [r2, #16]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68d2      	ldr	r2, [r2, #12]
 80053d6:	4311      	orrs	r1, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	430b      	orrs	r3, r1
 80053de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	000186a0 	.word	0x000186a0
 8005438:	001e847f 	.word	0x001e847f
 800543c:	003d08ff 	.word	0x003d08ff
 8005440:	431bde83 	.word	0x431bde83
 8005444:	10624dd3 	.word	0x10624dd3

08005448 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	461a      	mov	r2, r3
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
 8005458:	4613      	mov	r3, r2
 800545a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7fe fa8c 	bl	8003978 <HAL_GetTick>
 8005460:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 80e0 	bne.w	8005630 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	4970      	ldr	r1, [pc, #448]	; (800563c <HAL_I2C_Master_Transmit+0x1f4>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fd86 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	e0d3      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2C_Master_Transmit+0x50>
 8005494:	2302      	movs	r3, #2
 8005496:	e0cc      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d007      	beq.n	80054be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2221      	movs	r2, #33	; 0x21
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2210      	movs	r2, #16
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	893a      	ldrh	r2, [r7, #8]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a50      	ldr	r2, [pc, #320]	; (8005640 <HAL_I2C_Master_Transmit+0x1f8>)
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005500:	8979      	ldrh	r1, [r7, #10]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fbf0 	bl	8005cec <I2C_MasterRequestWrite>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e08d      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800552c:	e066      	b.n	80055fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	6a39      	ldr	r1, [r7, #32]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fe00 	bl	8006138 <I2C_WaitOnTXEFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b04      	cmp	r3, #4
 8005544:	d107      	bne.n	8005556 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e06b      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d11b      	bne.n	80055d0 <HAL_I2C_Master_Transmit+0x188>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d017      	beq.n	80055d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	6a39      	ldr	r1, [r7, #32]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fdf0 	bl	80061ba <I2C_WaitOnBTFFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00d      	beq.n	80055fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d107      	bne.n	80055f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e01a      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	d194      	bne.n	800552e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	00100002 	.word	0x00100002
 8005640:	ffff0000 	.word	0xffff0000

08005644 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08c      	sub	sp, #48	; 0x30
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	461a      	mov	r2, r3
 8005650:	460b      	mov	r3, r1
 8005652:	817b      	strh	r3, [r7, #10]
 8005654:	4613      	mov	r3, r2
 8005656:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005658:	f7fe f98e 	bl	8003978 <HAL_GetTick>
 800565c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b20      	cmp	r3, #32
 8005668:	f040 820b 	bne.w	8005a82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2319      	movs	r3, #25
 8005672:	2201      	movs	r2, #1
 8005674:	497c      	ldr	r1, [pc, #496]	; (8005868 <HAL_I2C_Master_Receive+0x224>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fc88 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
 8005684:	e1fe      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_I2C_Master_Receive+0x50>
 8005690:	2302      	movs	r3, #2
 8005692:	e1f7      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d007      	beq.n	80056ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2222      	movs	r2, #34	; 0x22
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2210      	movs	r2, #16
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	893a      	ldrh	r2, [r7, #8]
 80056ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a5c      	ldr	r2, [pc, #368]	; (800586c <HAL_I2C_Master_Receive+0x228>)
 80056fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056fc:	8979      	ldrh	r1, [r7, #10]
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fb74 	bl	8005df0 <I2C_MasterRequestRead>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e1b8      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d113      	bne.n	8005742 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571a:	2300      	movs	r3, #0
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e18c      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	2b01      	cmp	r3, #1
 8005748:	d11b      	bne.n	8005782 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e16c      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005786:	2b02      	cmp	r3, #2
 8005788:	d11b      	bne.n	80057c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	e14c      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057e8:	e138      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	f200 80f1 	bhi.w	80059d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d123      	bne.n	8005844 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fd1b 	bl	800623c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e139      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691a      	ldr	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	b2d2      	uxtb	r2, r2
 800581c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005842:	e10b      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005848:	2b02      	cmp	r3, #2
 800584a:	d14e      	bne.n	80058ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <HAL_I2C_Master_Receive+0x22c>)
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fb98 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e10e      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
 8005866:	bf00      	nop
 8005868:	00100002 	.word	0x00100002
 800586c:	ffff0000 	.word	0xffff0000
 8005870:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058e8:	e0b8      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2200      	movs	r2, #0
 80058f2:	4966      	ldr	r1, [pc, #408]	; (8005a8c <HAL_I2C_Master_Receive+0x448>)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fb49 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0bf      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691a      	ldr	r2, [r3, #16]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2200      	movs	r2, #0
 800594e:	494f      	ldr	r1, [pc, #316]	; (8005a8c <HAL_I2C_Master_Receive+0x448>)
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fb1b 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e091      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059d4:	e042      	b.n	8005a5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fc2e 	bl	800623c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e04c      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d118      	bne.n	8005a5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f47f aec2 	bne.w	80057ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3728      	adds	r7, #40	; 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	00010004 	.word	0x00010004

08005a90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005aa0:	f7fd ff6a 	bl	8003978 <HAL_GetTick>
 8005aa4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	f040 8111 	bne.w	8005cda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2319      	movs	r3, #25
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4988      	ldr	r1, [pc, #544]	; (8005ce4 <HAL_I2C_IsDeviceReady+0x254>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa62 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e104      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2C_IsDeviceReady+0x50>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0fd      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d007      	beq.n	8005b06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0201 	orr.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2224      	movs	r2, #36	; 0x24
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a70      	ldr	r2, [pc, #448]	; (8005ce8 <HAL_I2C_IsDeviceReady+0x258>)
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 fa20 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b60:	d103      	bne.n	8005b6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e0b6      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005b7e:	f7fd fefb 	bl	8003978 <HAL_GetTick>
 8005b82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	bf0c      	ite	eq
 8005b92:	2301      	moveq	r3, #1
 8005b94:	2300      	movne	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005bb2:	e025      	b.n	8005c00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bb4:	f7fd fee0 	bl	8003978 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <HAL_I2C_IsDeviceReady+0x13a>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	22a0      	movs	r2, #160	; 0xa0
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	bf0c      	ite	eq
 8005be0:	2301      	moveq	r3, #1
 8005be2:	2300      	movne	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2ba0      	cmp	r3, #160	; 0xa0
 8005c0a:	d005      	beq.n	8005c18 <HAL_I2C_IsDeviceReady+0x188>
 8005c0c:	7dfb      	ldrb	r3, [r7, #23]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_I2C_IsDeviceReady+0x188>
 8005c12:	7dbb      	ldrb	r3, [r7, #22]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0cd      	beq.n	8005bb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d129      	bne.n	8005c82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2319      	movs	r3, #25
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4921      	ldr	r1, [pc, #132]	; (8005ce4 <HAL_I2C_IsDeviceReady+0x254>)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f994 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e036      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e02c      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2319      	movs	r3, #25
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	490f      	ldr	r1, [pc, #60]	; (8005ce4 <HAL_I2C_IsDeviceReady+0x254>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f970 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e012      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	f4ff af32 	bcc.w	8005b2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	00100002 	.word	0x00100002
 8005ce8:	ffff0000 	.word	0xffff0000

08005cec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d006      	beq.n	8005d16 <I2C_MasterRequestWrite+0x2a>
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d003      	beq.n	8005d16 <I2C_MasterRequestWrite+0x2a>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d14:	d108      	bne.n	8005d28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	e00b      	b.n	8005d40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	2b12      	cmp	r3, #18
 8005d2e:	d107      	bne.n	8005d40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f91d 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d66:	d103      	bne.n	8005d70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e035      	b.n	8005de0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d7c:	d108      	bne.n	8005d90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d8c:	611a      	str	r2, [r3, #16]
 8005d8e:	e01b      	b.n	8005dc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d90:	897b      	ldrh	r3, [r7, #10]
 8005d92:	11db      	asrs	r3, r3, #7
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0306 	and.w	r3, r3, #6
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f063 030f 	orn	r3, r3, #15
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	490e      	ldr	r1, [pc, #56]	; (8005de8 <I2C_MasterRequestWrite+0xfc>)
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f943 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e010      	b.n	8005de0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dbe:	897b      	ldrh	r3, [r7, #10]
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4907      	ldr	r1, [pc, #28]	; (8005dec <I2C_MasterRequestWrite+0x100>)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f933 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	00010008 	.word	0x00010008
 8005dec:	00010002 	.word	0x00010002

08005df0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e14:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d006      	beq.n	8005e2a <I2C_MasterRequestRead+0x3a>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d003      	beq.n	8005e2a <I2C_MasterRequestRead+0x3a>
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e28:	d108      	bne.n	8005e3c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e00b      	b.n	8005e54 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	2b11      	cmp	r3, #17
 8005e42:	d107      	bne.n	8005e54 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f893 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00d      	beq.n	8005e88 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7a:	d103      	bne.n	8005e84 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e079      	b.n	8005f7c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e90:	d108      	bne.n	8005ea4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e92:	897b      	ldrh	r3, [r7, #10]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	611a      	str	r2, [r3, #16]
 8005ea2:	e05f      	b.n	8005f64 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ea4:	897b      	ldrh	r3, [r7, #10]
 8005ea6:	11db      	asrs	r3, r3, #7
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 0306 	and.w	r3, r3, #6
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f063 030f 	orn	r3, r3, #15
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4930      	ldr	r1, [pc, #192]	; (8005f84 <I2C_MasterRequestRead+0x194>)
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f8b9 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e054      	b.n	8005f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4929      	ldr	r1, [pc, #164]	; (8005f88 <I2C_MasterRequestRead+0x198>)
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f8a9 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e044      	b.n	8005f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f16:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f831 	bl	8005f8c <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00d      	beq.n	8005f4c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d103      	bne.n	8005f48 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e017      	b.n	8005f7c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f4c:	897b      	ldrh	r3, [r7, #10]
 8005f4e:	11db      	asrs	r3, r3, #7
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0306 	and.w	r3, r3, #6
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f063 030e 	orn	r3, r3, #14
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4907      	ldr	r1, [pc, #28]	; (8005f88 <I2C_MasterRequestRead+0x198>)
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f865 	bl	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	00010008 	.word	0x00010008
 8005f88:	00010002 	.word	0x00010002

08005f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f9c:	e025      	b.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d021      	beq.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fa6:	f7fd fce7 	bl	8003978 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d302      	bcc.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d116      	bne.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e023      	b.n	8006032 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	0c1b      	lsrs	r3, r3, #16
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10d      	bne.n	8006010 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	e00c      	b.n	800602a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	43da      	mvns	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4013      	ands	r3, r2
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	429a      	cmp	r2, r3
 800602e:	d0b6      	beq.n	8005f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
 8006046:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006048:	e051      	b.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d123      	bne.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006068:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006072:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f043 0204 	orr.w	r2, r3, #4
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e046      	b.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d021      	beq.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fd fc65 	bl	8003978 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d116      	bne.n	80060ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0220 	orr.w	r2, r3, #32
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e020      	b.n	8006130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10c      	bne.n	8006112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	43da      	mvns	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4013      	ands	r3, r2
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e00b      	b.n	800612a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	43da      	mvns	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d18d      	bne.n	800604a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006144:	e02d      	b.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f8ce 	bl	80062e8 <I2C_IsAcknowledgeFailed>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e02d      	b.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d021      	beq.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615e:	f7fd fc0b 	bl	8003978 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d302      	bcc.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d116      	bne.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e007      	b.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b80      	cmp	r3, #128	; 0x80
 80061ae:	d1ca      	bne.n	8006146 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b084      	sub	sp, #16
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c6:	e02d      	b.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f88d 	bl	80062e8 <I2C_IsAcknowledgeFailed>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e02d      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d021      	beq.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e0:	f7fd fbca 	bl	8003978 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d302      	bcc.n	80061f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d116      	bne.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e007      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d1ca      	bne.n	80061c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006248:	e042      	b.n	80062d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d119      	bne.n	800628c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0210 	mvn.w	r2, #16
 8006260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e029      	b.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628c:	f7fd fb74 	bl	8003978 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d302      	bcc.n	80062a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d116      	bne.n	80062d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e007      	b.n	80062e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	d1b5      	bne.n	800624a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fe:	d11b      	bne.n	8006338 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006308:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	f043 0204 	orr.w	r2, r3, #4
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e264      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d075      	beq.n	8006452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006366:	4ba3      	ldr	r3, [pc, #652]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b04      	cmp	r3, #4
 8006370:	d00c      	beq.n	800638c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006372:	4ba0      	ldr	r3, [pc, #640]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800637a:	2b08      	cmp	r3, #8
 800637c:	d112      	bne.n	80063a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637e:	4b9d      	ldr	r3, [pc, #628]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800638a:	d10b      	bne.n	80063a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800638c:	4b99      	ldr	r3, [pc, #612]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d05b      	beq.n	8006450 <HAL_RCC_OscConfig+0x108>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d157      	bne.n	8006450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e23f      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ac:	d106      	bne.n	80063bc <HAL_RCC_OscConfig+0x74>
 80063ae:	4b91      	ldr	r3, [pc, #580]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a90      	ldr	r2, [pc, #576]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	e01d      	b.n	80063f8 <HAL_RCC_OscConfig+0xb0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x98>
 80063c6:	4b8b      	ldr	r3, [pc, #556]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a8a      	ldr	r2, [pc, #552]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a87      	ldr	r2, [pc, #540]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e00b      	b.n	80063f8 <HAL_RCC_OscConfig+0xb0>
 80063e0:	4b84      	ldr	r3, [pc, #528]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a83      	ldr	r2, [pc, #524]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	4b81      	ldr	r3, [pc, #516]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a80      	ldr	r2, [pc, #512]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80063f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006400:	f7fd faba 	bl	8003978 <HAL_GetTick>
 8006404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	e008      	b.n	800641a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006408:	f7fd fab6 	bl	8003978 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	2b64      	cmp	r3, #100	; 0x64
 8006414:	d901      	bls.n	800641a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e204      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	4b76      	ldr	r3, [pc, #472]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f0      	beq.n	8006408 <HAL_RCC_OscConfig+0xc0>
 8006426:	e014      	b.n	8006452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7fd faa6 	bl	8003978 <HAL_GetTick>
 800642c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006430:	f7fd faa2 	bl	8003978 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b64      	cmp	r3, #100	; 0x64
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e1f0      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	4b6c      	ldr	r3, [pc, #432]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f0      	bne.n	8006430 <HAL_RCC_OscConfig+0xe8>
 800644e:	e000      	b.n	8006452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d063      	beq.n	8006526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800645e:	4b65      	ldr	r3, [pc, #404]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800646a:	4b62      	ldr	r3, [pc, #392]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006472:	2b08      	cmp	r3, #8
 8006474:	d11c      	bne.n	80064b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006476:	4b5f      	ldr	r3, [pc, #380]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d116      	bne.n	80064b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006482:	4b5c      	ldr	r3, [pc, #368]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_RCC_OscConfig+0x152>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e1c4      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649a:	4b56      	ldr	r3, [pc, #344]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4952      	ldr	r1, [pc, #328]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	e03a      	b.n	8006526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d020      	beq.n	80064fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b8:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <HAL_RCC_OscConfig+0x2b0>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064be:	f7fd fa5b 	bl	8003978 <HAL_GetTick>
 80064c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064c6:	f7fd fa57 	bl	8003978 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e1a5      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d8:	4b46      	ldr	r3, [pc, #280]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0f0      	beq.n	80064c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e4:	4b43      	ldr	r3, [pc, #268]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4940      	ldr	r1, [pc, #256]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]
 80064f8:	e015      	b.n	8006526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fa:	4b3f      	ldr	r3, [pc, #252]	; (80065f8 <HAL_RCC_OscConfig+0x2b0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fd fa3a 	bl	8003978 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006508:	f7fd fa36 	bl	8003978 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e184      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	4b36      	ldr	r3, [pc, #216]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f0      	bne.n	8006508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0308 	and.w	r3, r3, #8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d030      	beq.n	8006594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653a:	4b30      	ldr	r3, [pc, #192]	; (80065fc <HAL_RCC_OscConfig+0x2b4>)
 800653c:	2201      	movs	r2, #1
 800653e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fd fa1a 	bl	8003978 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006548:	f7fd fa16 	bl	8003978 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e164      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655a:	4b26      	ldr	r3, [pc, #152]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800655c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f0      	beq.n	8006548 <HAL_RCC_OscConfig+0x200>
 8006566:	e015      	b.n	8006594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_RCC_OscConfig+0x2b4>)
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800656e:	f7fd fa03 	bl	8003978 <HAL_GetTick>
 8006572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006576:	f7fd f9ff 	bl	8003978 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e14d      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006588:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 800658a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1f0      	bne.n	8006576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a0 	beq.w	80066e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a6:	4b13      	ldr	r3, [pc, #76]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10f      	bne.n	80065d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	4a0e      	ldr	r2, [pc, #56]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80065bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c0:	6413      	str	r3, [r2, #64]	; 0x40
 80065c2:	4b0c      	ldr	r3, [pc, #48]	; (80065f4 <HAL_RCC_OscConfig+0x2ac>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d2:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <HAL_RCC_OscConfig+0x2b8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d121      	bne.n	8006622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065de:	4b08      	ldr	r3, [pc, #32]	; (8006600 <HAL_RCC_OscConfig+0x2b8>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <HAL_RCC_OscConfig+0x2b8>)
 80065e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ea:	f7fd f9c5 	bl	8003978 <HAL_GetTick>
 80065ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f0:	e011      	b.n	8006616 <HAL_RCC_OscConfig+0x2ce>
 80065f2:	bf00      	nop
 80065f4:	40023800 	.word	0x40023800
 80065f8:	42470000 	.word	0x42470000
 80065fc:	42470e80 	.word	0x42470e80
 8006600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006604:	f7fd f9b8 	bl	8003978 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e106      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006616:	4b85      	ldr	r3, [pc, #532]	; (800682c <HAL_RCC_OscConfig+0x4e4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d106      	bne.n	8006638 <HAL_RCC_OscConfig+0x2f0>
 800662a:	4b81      	ldr	r3, [pc, #516]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 800662c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662e:	4a80      	ldr	r2, [pc, #512]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006630:	f043 0301 	orr.w	r3, r3, #1
 8006634:	6713      	str	r3, [r2, #112]	; 0x70
 8006636:	e01c      	b.n	8006672 <HAL_RCC_OscConfig+0x32a>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b05      	cmp	r3, #5
 800663e:	d10c      	bne.n	800665a <HAL_RCC_OscConfig+0x312>
 8006640:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	4a7a      	ldr	r2, [pc, #488]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006646:	f043 0304 	orr.w	r3, r3, #4
 800664a:	6713      	str	r3, [r2, #112]	; 0x70
 800664c:	4b78      	ldr	r3, [pc, #480]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a77      	ldr	r2, [pc, #476]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
 8006658:	e00b      	b.n	8006672 <HAL_RCC_OscConfig+0x32a>
 800665a:	4b75      	ldr	r3, [pc, #468]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	4a74      	ldr	r2, [pc, #464]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	6713      	str	r3, [r2, #112]	; 0x70
 8006666:	4b72      	ldr	r3, [pc, #456]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a71      	ldr	r2, [pc, #452]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 800666c:	f023 0304 	bic.w	r3, r3, #4
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d015      	beq.n	80066a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667a:	f7fd f97d 	bl	8003978 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006680:	e00a      	b.n	8006698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006682:	f7fd f979 	bl	8003978 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0c5      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006698:	4b65      	ldr	r3, [pc, #404]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0ee      	beq.n	8006682 <HAL_RCC_OscConfig+0x33a>
 80066a4:	e014      	b.n	80066d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a6:	f7fd f967 	bl	8003978 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ac:	e00a      	b.n	80066c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ae:	f7fd f963 	bl	8003978 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066bc:	4293      	cmp	r3, r2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0af      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c4:	4b5a      	ldr	r3, [pc, #360]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80066c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1ee      	bne.n	80066ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d105      	bne.n	80066e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d6:	4b56      	ldr	r3, [pc, #344]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	4a55      	ldr	r2, [pc, #340]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80066dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 809b 	beq.w	8006822 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ec:	4b50      	ldr	r3, [pc, #320]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 030c 	and.w	r3, r3, #12
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d05c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d141      	bne.n	8006784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006700:	4b4c      	ldr	r3, [pc, #304]	; (8006834 <HAL_RCC_OscConfig+0x4ec>)
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006706:	f7fd f937 	bl	8003978 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800670e:	f7fd f933 	bl	8003978 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e081      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006720:	4b43      	ldr	r3, [pc, #268]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69da      	ldr	r2, [r3, #28]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	019b      	lsls	r3, r3, #6
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	061b      	lsls	r3, r3, #24
 8006750:	4937      	ldr	r1, [pc, #220]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006752:	4313      	orrs	r3, r2
 8006754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006756:	4b37      	ldr	r3, [pc, #220]	; (8006834 <HAL_RCC_OscConfig+0x4ec>)
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675c:	f7fd f90c 	bl	8003978 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006764:	f7fd f908 	bl	8003978 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e056      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006776:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f0      	beq.n	8006764 <HAL_RCC_OscConfig+0x41c>
 8006782:	e04e      	b.n	8006822 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006784:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_RCC_OscConfig+0x4ec>)
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678a:	f7fd f8f5 	bl	8003978 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006792:	f7fd f8f1 	bl	8003978 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e03f      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a4:	4b22      	ldr	r3, [pc, #136]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1f0      	bne.n	8006792 <HAL_RCC_OscConfig+0x44a>
 80067b0:	e037      	b.n	8006822 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e032      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <HAL_RCC_OscConfig+0x4e8>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d028      	beq.n	800681e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d121      	bne.n	800681e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d11a      	bne.n	800681e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ee:	4013      	ands	r3, r2
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d111      	bne.n	800681e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	3b01      	subs	r3, #1
 8006808:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d107      	bne.n	800681e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d001      	beq.n	8006822 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40007000 	.word	0x40007000
 8006830:	40023800 	.word	0x40023800
 8006834:	42470060 	.word	0x42470060

08006838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0cc      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800684c:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d90c      	bls.n	8006874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b63      	ldr	r3, [pc, #396]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e0b8      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800688c:	4b59      	ldr	r3, [pc, #356]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	4a58      	ldr	r2, [pc, #352]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a4:	4b53      	ldr	r3, [pc, #332]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	4a52      	ldr	r2, [pc, #328]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b0:	4b50      	ldr	r3, [pc, #320]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	494d      	ldr	r1, [pc, #308]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d044      	beq.n	8006958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d119      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e07f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d107      	bne.n	8006906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f6:	4b3f      	ldr	r3, [pc, #252]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e06f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006906:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e067      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006916:	4b37      	ldr	r3, [pc, #220]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f023 0203 	bic.w	r2, r3, #3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4934      	ldr	r1, [pc, #208]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006928:	f7fd f826 	bl	8003978 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692e:	e00a      	b.n	8006946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006930:	f7fd f822 	bl	8003978 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e04f      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006946:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 020c 	and.w	r2, r3, #12
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	429a      	cmp	r2, r3
 8006956:	d1eb      	bne.n	8006930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d20c      	bcs.n	8006980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b22      	ldr	r3, [pc, #136]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b20      	ldr	r3, [pc, #128]	; (80069f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e032      	b.n	80069e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d008      	beq.n	800699e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800698c:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4916      	ldr	r1, [pc, #88]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069aa:	4b12      	ldr	r3, [pc, #72]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	490e      	ldr	r1, [pc, #56]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069be:	f000 f821 	bl	8006a04 <HAL_RCC_GetSysClockFreq>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	091b      	lsrs	r3, r3, #4
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	490a      	ldr	r1, [pc, #40]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 80069d0:	5ccb      	ldrb	r3, [r1, r3]
 80069d2:	fa22 f303 	lsr.w	r3, r2, r3
 80069d6:	4a09      	ldr	r2, [pc, #36]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069da:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <HAL_RCC_ClockConfig+0x1c8>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fb f880 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40023c00 	.word	0x40023c00
 80069f4:	40023800 	.word	0x40023800
 80069f8:	0800c3f8 	.word	0x0800c3f8
 80069fc:	20000000 	.word	0x20000000
 8006a00:	200000d8 	.word	0x200000d8

08006a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6079      	str	r1, [r7, #4]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	60f9      	str	r1, [r7, #12]
 8006a12:	2100      	movs	r1, #0
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a16:	2100      	movs	r1, #0
 8006a18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a1a:	4952      	ldr	r1, [pc, #328]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a1c:	6889      	ldr	r1, [r1, #8]
 8006a1e:	f001 010c 	and.w	r1, r1, #12
 8006a22:	2908      	cmp	r1, #8
 8006a24:	d00d      	beq.n	8006a42 <HAL_RCC_GetSysClockFreq+0x3e>
 8006a26:	2908      	cmp	r1, #8
 8006a28:	f200 8094 	bhi.w	8006b54 <HAL_RCC_GetSysClockFreq+0x150>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	d002      	beq.n	8006a36 <HAL_RCC_GetSysClockFreq+0x32>
 8006a30:	2904      	cmp	r1, #4
 8006a32:	d003      	beq.n	8006a3c <HAL_RCC_GetSysClockFreq+0x38>
 8006a34:	e08e      	b.n	8006b54 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a36:	4b4c      	ldr	r3, [pc, #304]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x164>)
 8006a38:	60bb      	str	r3, [r7, #8]
       break;
 8006a3a:	e08e      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a3c:	4b4b      	ldr	r3, [pc, #300]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a3e:	60bb      	str	r3, [r7, #8]
      break;
 8006a40:	e08b      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a42:	4948      	ldr	r1, [pc, #288]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a44:	6849      	ldr	r1, [r1, #4]
 8006a46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006a4a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a4c:	4945      	ldr	r1, [pc, #276]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a4e:	6849      	ldr	r1, [r1, #4]
 8006a50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d024      	beq.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a58:	4942      	ldr	r1, [pc, #264]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006a5a:	6849      	ldr	r1, [r1, #4]
 8006a5c:	0989      	lsrs	r1, r1, #6
 8006a5e:	4608      	mov	r0, r1
 8006a60:	f04f 0100 	mov.w	r1, #0
 8006a64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006a68:	f04f 0500 	mov.w	r5, #0
 8006a6c:	ea00 0204 	and.w	r2, r0, r4
 8006a70:	ea01 0305 	and.w	r3, r1, r5
 8006a74:	493d      	ldr	r1, [pc, #244]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a76:	fb01 f003 	mul.w	r0, r1, r3
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	fb01 f102 	mul.w	r1, r1, r2
 8006a80:	1844      	adds	r4, r0, r1
 8006a82:	493a      	ldr	r1, [pc, #232]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x168>)
 8006a84:	fba2 0101 	umull	r0, r1, r2, r1
 8006a88:	1863      	adds	r3, r4, r1
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f04f 0300 	mov.w	r3, #0
 8006a94:	f7fa f8a0 	bl	8000bd8 <__aeabi_uldivmod>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e04a      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa2:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ab2:	f04f 0100 	mov.w	r1, #0
 8006ab6:	ea02 0400 	and.w	r4, r2, r0
 8006aba:	ea03 0501 	and.w	r5, r3, r1
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	014b      	lsls	r3, r1, #5
 8006acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ad0:	0142      	lsls	r2, r0, #5
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	1b00      	subs	r0, r0, r4
 8006ad8:	eb61 0105 	sbc.w	r1, r1, r5
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	018b      	lsls	r3, r1, #6
 8006ae6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006aea:	0182      	lsls	r2, r0, #6
 8006aec:	1a12      	subs	r2, r2, r0
 8006aee:	eb63 0301 	sbc.w	r3, r3, r1
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f04f 0100 	mov.w	r1, #0
 8006afa:	00d9      	lsls	r1, r3, #3
 8006afc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b00:	00d0      	lsls	r0, r2, #3
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	1912      	adds	r2, r2, r4
 8006b08:	eb45 0303 	adc.w	r3, r5, r3
 8006b0c:	f04f 0000 	mov.w	r0, #0
 8006b10:	f04f 0100 	mov.w	r1, #0
 8006b14:	0299      	lsls	r1, r3, #10
 8006b16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b1a:	0290      	lsls	r0, r2, #10
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4610      	mov	r0, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	461a      	mov	r2, r3
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	f7fa f854 	bl	8000bd8 <__aeabi_uldivmod>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4613      	mov	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b38:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	3301      	adds	r3, #1
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
      break;
 8006b52:	e002      	b.n	8006b5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x164>)
 8006b56:	60bb      	str	r3, [r7, #8]
      break;
 8006b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bdb0      	pop	{r4, r5, r7, pc}
 8006b64:	40023800 	.word	0x40023800
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	017d7840 	.word	0x017d7840

08006b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000000 	.word	0x20000000

08006b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b8c:	f7ff fff0 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	0a9b      	lsrs	r3, r3, #10
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4903      	ldr	r1, [pc, #12]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	0800c408 	.word	0x0800c408

08006bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bb4:	f7ff ffdc 	bl	8006b70 <HAL_RCC_GetHCLKFreq>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	0b5b      	lsrs	r3, r3, #13
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	4903      	ldr	r1, [pc, #12]	; (8006bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc6:	5ccb      	ldrb	r3, [r1, r3]
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	0800c408 	.word	0x0800c408

08006bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	220f      	movs	r2, #15
 8006be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006be8:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <HAL_RCC_GetClockConfig+0x5c>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0203 	and.w	r2, r3, #3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <HAL_RCC_GetClockConfig+0x5c>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <HAL_RCC_GetClockConfig+0x5c>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <HAL_RCC_GetClockConfig+0x5c>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	08db      	lsrs	r3, r3, #3
 8006c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_RCC_GetClockConfig+0x60>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0207 	and.w	r2, r3, #7
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	601a      	str	r2, [r3, #0]
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40023c00 	.word	0x40023c00

08006c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e041      	b.n	8006cd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb fa02 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 fdc4 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d001      	beq.n	8006cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e04e      	b.n	8006d92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d022      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d01d      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d018      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d013      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_TIM_Base_Start_IT+0xd0>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00e      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d009      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_TIM_Base_Start_IT+0x80>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d111      	bne.n	8006d80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0307 	and.w	r3, r3, #7
 8006d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b06      	cmp	r3, #6
 8006d6c:	d010      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	e007      	b.n	8006d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40001800 	.word	0x40001800

08006dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e041      	b.n	8006e52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f839 	bl	8006e5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 fd04 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e041      	b.n	8006f04 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f839 	bl	8006f0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f000 fcab 	bl	8007808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_IC_Start_IT+0x1e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e013      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x46>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_IC_Start_IT+0x2e>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	e00b      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x46>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d104      	bne.n	8006f5e <HAL_TIM_IC_Start_IT+0x3e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	e003      	b.n	8006f66 <HAL_TIM_IC_Start_IT+0x46>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d104      	bne.n	8006f78 <HAL_TIM_IC_Start_IT+0x58>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e013      	b.n	8006fa0 <HAL_TIM_IC_Start_IT+0x80>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d104      	bne.n	8006f88 <HAL_TIM_IC_Start_IT+0x68>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e00b      	b.n	8006fa0 <HAL_TIM_IC_Start_IT+0x80>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b08      	cmp	r3, #8
 8006f8c:	d104      	bne.n	8006f98 <HAL_TIM_IC_Start_IT+0x78>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	e003      	b.n	8006fa0 <HAL_TIM_IC_Start_IT+0x80>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fa8:	7b7b      	ldrb	r3, [r7, #13]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e0cc      	b.n	800714c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_IC_Start_IT+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc0:	e013      	b.n	8006fea <HAL_TIM_IC_Start_IT+0xca>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_IC_Start_IT+0xb2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fd0:	e00b      	b.n	8006fea <HAL_TIM_IC_Start_IT+0xca>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_IC_Start_IT+0xc2>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe0:	e003      	b.n	8006fea <HAL_TIM_IC_Start_IT+0xca>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0xda>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff8:	e013      	b.n	8007022 <HAL_TIM_IC_Start_IT+0x102>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0xea>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007008:	e00b      	b.n	8007022 <HAL_TIM_IC_Start_IT+0x102>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d104      	bne.n	800701a <HAL_TIM_IC_Start_IT+0xfa>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007018:	e003      	b.n	8007022 <HAL_TIM_IC_Start_IT+0x102>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2202      	movs	r2, #2
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d841      	bhi.n	80070ac <HAL_TIM_IC_Start_IT+0x18c>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <HAL_TIM_IC_Start_IT+0x110>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007065 	.word	0x08007065
 8007034:	080070ad 	.word	0x080070ad
 8007038:	080070ad 	.word	0x080070ad
 800703c:	080070ad 	.word	0x080070ad
 8007040:	08007077 	.word	0x08007077
 8007044:	080070ad 	.word	0x080070ad
 8007048:	080070ad 	.word	0x080070ad
 800704c:	080070ad 	.word	0x080070ad
 8007050:	08007089 	.word	0x08007089
 8007054:	080070ad 	.word	0x080070ad
 8007058:	080070ad 	.word	0x080070ad
 800705c:	080070ad 	.word	0x080070ad
 8007060:	0800709b 	.word	0x0800709b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0202 	orr.w	r2, r2, #2
 8007072:	60da      	str	r2, [r3, #12]
      break;
 8007074:	e01d      	b.n	80070b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f042 0204 	orr.w	r2, r2, #4
 8007084:	60da      	str	r2, [r3, #12]
      break;
 8007086:	e014      	b.n	80070b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f042 0208 	orr.w	r2, r2, #8
 8007096:	60da      	str	r2, [r3, #12]
      break;
 8007098:	e00b      	b.n	80070b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0210 	orr.w	r2, r2, #16
 80070a8:	60da      	str	r2, [r3, #12]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	73fb      	strb	r3, [r7, #15]
      break;
 80070b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d148      	bne.n	800714a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2201      	movs	r2, #1
 80070be:	6839      	ldr	r1, [r7, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 ffb5 	bl	8008030 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a22      	ldr	r2, [pc, #136]	; (8007154 <HAL_TIM_IC_Start_IT+0x234>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d022      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d8:	d01d      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_TIM_IC_Start_IT+0x238>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d018      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_TIM_IC_Start_IT+0x23c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_TIM_IC_Start_IT+0x240>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_TIM_IC_Start_IT+0x244>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIM_IC_Start_IT+0x248>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIM_IC_Start_IT+0x1f6>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a16      	ldr	r2, [pc, #88]	; (800716c <HAL_TIM_IC_Start_IT+0x24c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d111      	bne.n	800713a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b06      	cmp	r3, #6
 8007126:	d010      	beq.n	800714a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0201 	orr.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007138:	e007      	b.n	800714a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40010000 	.word	0x40010000
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	40000c00 	.word	0x40000c00
 8007164:	40010400 	.word	0x40010400
 8007168:	40014000 	.word	0x40014000
 800716c:	40001800 	.word	0x40001800

08007170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b02      	cmp	r3, #2
 8007184:	d122      	bne.n	80071cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b02      	cmp	r3, #2
 8007192:	d11b      	bne.n	80071cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0202 	mvn.w	r2, #2
 800719c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fb ffe8 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb05 	bl	80077ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb0c 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d122      	bne.n	8007220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d11b      	bne.n	8007220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0204 	mvn.w	r2, #4
 80071f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7fb ffbe 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 800720c:	e005      	b.n	800721a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fadb 	bl	80077ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fae2 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b08      	cmp	r3, #8
 800722c:	d122      	bne.n	8007274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b08      	cmp	r3, #8
 800723a:	d11b      	bne.n	8007274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0208 	mvn.w	r2, #8
 8007244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2204      	movs	r2, #4
 800724a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fb ff94 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 8007260:	e005      	b.n	800726e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fab1 	bl	80077ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fab8 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	f003 0310 	and.w	r3, r3, #16
 800727e:	2b10      	cmp	r3, #16
 8007280:	d122      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b10      	cmp	r3, #16
 800728e:	d11b      	bne.n	80072c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0210 	mvn.w	r2, #16
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2208      	movs	r2, #8
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fb ff6a 	bl	8003188 <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa87 	bl	80077ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fa8e 	bl	80077de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10e      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d107      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0201 	mvn.w	r2, #1
 80072ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa fbb4 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fe:	2b80      	cmp	r3, #128	; 0x80
 8007300:	d10e      	bne.n	8007320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730c:	2b80      	cmp	r3, #128	; 0x80
 800730e:	d107      	bne.n	8007320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 ff86 	bl	800822c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d10e      	bne.n	800734c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	d107      	bne.n	800734c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa53 	bl	80077f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b20      	cmp	r3, #32
 8007358:	d10e      	bne.n	8007378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b20      	cmp	r3, #32
 8007366:	d107      	bne.n	8007378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f06f 0220 	mvn.w	r2, #32
 8007370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 ff50 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_TIM_IC_ConfigChannel+0x1e>
 800739a:	2302      	movs	r3, #2
 800739c:	e088      	b.n	80074b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d11b      	bne.n	80073e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f000 fc74 	bl	8007ca8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 020c 	bic.w	r2, r2, #12
 80073ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6999      	ldr	r1, [r3, #24]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689a      	ldr	r2, [r3, #8]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	619a      	str	r2, [r3, #24]
 80073e2:	e060      	b.n	80074a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d11c      	bne.n	8007424 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f000 fcf8 	bl	8007dee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800740c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6999      	ldr	r1, [r3, #24]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	021a      	lsls	r2, r3, #8
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
 8007422:	e040      	b.n	80074a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b08      	cmp	r3, #8
 8007428:	d11b      	bne.n	8007462 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6819      	ldr	r1, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	685a      	ldr	r2, [r3, #4]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f000 fd45 	bl	8007ec8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69da      	ldr	r2, [r3, #28]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 020c 	bic.w	r2, r2, #12
 800744c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69d9      	ldr	r1, [r3, #28]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	61da      	str	r2, [r3, #28]
 8007460:	e021      	b.n	80074a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b0c      	cmp	r3, #12
 8007466:	d11c      	bne.n	80074a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f000 fd62 	bl	8007f40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800748a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69d9      	ldr	r1, [r3, #28]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	021a      	lsls	r2, r3, #8
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	61da      	str	r2, [r3, #28]
 80074a0:	e001      	b.n	80074a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e0ae      	b.n	8007634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	f200 809f 	bhi.w	8007624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007625 	.word	0x08007625
 80074f4:	08007625 	.word	0x08007625
 80074f8:	08007625 	.word	0x08007625
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007625 	.word	0x08007625
 8007504:	08007625 	.word	0x08007625
 8007508:	08007625 	.word	0x08007625
 800750c:	080075a3 	.word	0x080075a3
 8007510:	08007625 	.word	0x08007625
 8007514:	08007625 	.word	0x08007625
 8007518:	08007625 	.word	0x08007625
 800751c:	080075e3 	.word	0x080075e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fa0e 	bl	8007948 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0208 	orr.w	r2, r2, #8
 800753a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0204 	bic.w	r2, r2, #4
 800754a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6999      	ldr	r1, [r3, #24]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	619a      	str	r2, [r3, #24]
      break;
 800755e:	e064      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa5e 	bl	8007a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	021a      	lsls	r2, r3, #8
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	619a      	str	r2, [r3, #24]
      break;
 80075a0:	e043      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fab3 	bl	8007b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0208 	orr.w	r2, r2, #8
 80075bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0204 	bic.w	r2, r2, #4
 80075cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69d9      	ldr	r1, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	61da      	str	r2, [r3, #28]
      break;
 80075e0:	e023      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fb07 	bl	8007bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	021a      	lsls	r2, r3, #8
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	61da      	str	r2, [r3, #28]
      break;
 8007622:	e002      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	75fb      	strb	r3, [r7, #23]
      break;
 8007628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0x1c>
 8007654:	2302      	movs	r3, #2
 8007656:	e0b4      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x186>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800767e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007690:	d03e      	beq.n	8007710 <HAL_TIM_ConfigClockSource+0xd4>
 8007692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007696:	f200 8087 	bhi.w	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	f000 8086 	beq.w	80077ae <HAL_TIM_ConfigClockSource+0x172>
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d87f      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b70      	cmp	r3, #112	; 0x70
 80076aa:	d01a      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0xa6>
 80076ac:	2b70      	cmp	r3, #112	; 0x70
 80076ae:	d87b      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d050      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x11a>
 80076b4:	2b60      	cmp	r3, #96	; 0x60
 80076b6:	d877      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b50      	cmp	r3, #80	; 0x50
 80076ba:	d03c      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xfa>
 80076bc:	2b50      	cmp	r3, #80	; 0x50
 80076be:	d873      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	d058      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x13a>
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d86f      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c8:	2b30      	cmp	r3, #48	; 0x30
 80076ca:	d064      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076cc:	2b30      	cmp	r3, #48	; 0x30
 80076ce:	d86b      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d060      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d867      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d05c      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076dc:	2b10      	cmp	r3, #16
 80076de:	d05a      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076e0:	e062      	b.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6899      	ldr	r1, [r3, #8]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f000 fc7d 	bl	8007ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	609a      	str	r2, [r3, #8]
      break;
 800770e:	e04f      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6899      	ldr	r1, [r3, #8]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f000 fc66 	bl	8007ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007732:	609a      	str	r2, [r3, #8]
      break;
 8007734:	e03c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 fb24 	bl	8007d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2150      	movs	r1, #80	; 0x50
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fc33 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 8007754:	e02c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	461a      	mov	r2, r3
 8007764:	f000 fb80 	bl	8007e68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2160      	movs	r1, #96	; 0x60
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fc23 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 8007774:	e01c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	f000 fb04 	bl	8007d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2140      	movs	r1, #64	; 0x40
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fc13 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 8007794:	e00c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f000 fc0a 	bl	8007fba <TIM_ITRx_SetConfig>
      break;
 80077a6:	e003      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
      break;
 80077ac:	e000      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077e6:	bf00      	nop
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a40      	ldr	r2, [pc, #256]	; (800791c <TIM_Base_SetConfig+0x114>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d013      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007826:	d00f      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a3d      	ldr	r2, [pc, #244]	; (8007920 <TIM_Base_SetConfig+0x118>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d00b      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <TIM_Base_SetConfig+0x11c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d007      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <TIM_Base_SetConfig+0x120>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d003      	beq.n	8007848 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a3a      	ldr	r2, [pc, #232]	; (800792c <TIM_Base_SetConfig+0x124>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d108      	bne.n	800785a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a2f      	ldr	r2, [pc, #188]	; (800791c <TIM_Base_SetConfig+0x114>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d02b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d027      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a2c      	ldr	r2, [pc, #176]	; (8007920 <TIM_Base_SetConfig+0x118>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d023      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a2b      	ldr	r2, [pc, #172]	; (8007924 <TIM_Base_SetConfig+0x11c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d01f      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <TIM_Base_SetConfig+0x120>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a29      	ldr	r2, [pc, #164]	; (800792c <TIM_Base_SetConfig+0x124>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d017      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a28      	ldr	r2, [pc, #160]	; (8007930 <TIM_Base_SetConfig+0x128>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d013      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a27      	ldr	r2, [pc, #156]	; (8007934 <TIM_Base_SetConfig+0x12c>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00f      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <TIM_Base_SetConfig+0x130>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00b      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a25      	ldr	r2, [pc, #148]	; (800793c <TIM_Base_SetConfig+0x134>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a24      	ldr	r2, [pc, #144]	; (8007940 <TIM_Base_SetConfig+0x138>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d003      	beq.n	80078ba <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a23      	ldr	r2, [pc, #140]	; (8007944 <TIM_Base_SetConfig+0x13c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d108      	bne.n	80078cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a0a      	ldr	r2, [pc, #40]	; (800791c <TIM_Base_SetConfig+0x114>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0xf8>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a0c      	ldr	r2, [pc, #48]	; (800792c <TIM_Base_SetConfig+0x124>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d103      	bne.n	8007908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	615a      	str	r2, [r3, #20]
}
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	40010000 	.word	0x40010000
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40010400 	.word	0x40010400
 8007930:	40014000 	.word	0x40014000
 8007934:	40014400 	.word	0x40014400
 8007938:	40014800 	.word	0x40014800
 800793c:	40001800 	.word	0x40001800
 8007940:	40001c00 	.word	0x40001c00
 8007944:	40002000 	.word	0x40002000

08007948 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0201 	bic.w	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f023 0303 	bic.w	r3, r3, #3
 800797e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f023 0302 	bic.w	r3, r3, #2
 8007990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a20      	ldr	r2, [pc, #128]	; (8007a20 <TIM_OC1_SetConfig+0xd8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC1_SetConfig+0x64>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	; (8007a24 <TIM_OC1_SetConfig+0xdc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d10c      	bne.n	80079c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0308 	bic.w	r3, r3, #8
 80079b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <TIM_OC1_SetConfig+0xd8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d003      	beq.n	80079d6 <TIM_OC1_SetConfig+0x8e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a14      	ldr	r2, [pc, #80]	; (8007a24 <TIM_OC1_SetConfig+0xdc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d111      	bne.n	80079fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	621a      	str	r2, [r3, #32]
}
 8007a14:	bf00      	nop
 8007a16:	371c      	adds	r7, #28
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0210 	bic.w	r2, r3, #16
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0320 	bic.w	r3, r3, #32
 8007a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	011b      	lsls	r3, r3, #4
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <TIM_OC2_SetConfig+0xe4>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <TIM_OC2_SetConfig+0x68>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <TIM_OC2_SetConfig+0xe8>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10d      	bne.n	8007aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <TIM_OC2_SetConfig+0xe4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d003      	beq.n	8007abc <TIM_OC2_SetConfig+0x94>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC2_SetConfig+0xe8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d113      	bne.n	8007ae4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	621a      	str	r2, [r3, #32]
}
 8007afe:	bf00      	nop
 8007b00:	371c      	adds	r7, #28
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a21      	ldr	r2, [pc, #132]	; (8007bf4 <TIM_OC3_SetConfig+0xe0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <TIM_OC3_SetConfig+0x66>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a20      	ldr	r2, [pc, #128]	; (8007bf8 <TIM_OC3_SetConfig+0xe4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d10d      	bne.n	8007b96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	021b      	lsls	r3, r3, #8
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a16      	ldr	r2, [pc, #88]	; (8007bf4 <TIM_OC3_SetConfig+0xe0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_OC3_SetConfig+0x92>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <TIM_OC3_SetConfig+0xe4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d113      	bne.n	8007bce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	621a      	str	r2, [r3, #32]
}
 8007be8:	bf00      	nop
 8007bea:	371c      	adds	r7, #28
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40010400 	.word	0x40010400

08007bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	031b      	lsls	r3, r3, #12
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a12      	ldr	r2, [pc, #72]	; (8007ca0 <TIM_OC4_SetConfig+0xa4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d003      	beq.n	8007c64 <TIM_OC4_SetConfig+0x68>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a11      	ldr	r2, [pc, #68]	; (8007ca4 <TIM_OC4_SetConfig+0xa8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d109      	bne.n	8007c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	019b      	lsls	r3, r3, #6
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40010400 	.word	0x40010400

08007ca8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4a28      	ldr	r2, [pc, #160]	; (8007d74 <TIM_TI1_SetConfig+0xcc>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d01b      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cdc:	d017      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a25      	ldr	r2, [pc, #148]	; (8007d78 <TIM_TI1_SetConfig+0xd0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4a24      	ldr	r2, [pc, #144]	; (8007d7c <TIM_TI1_SetConfig+0xd4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4a23      	ldr	r2, [pc, #140]	; (8007d80 <TIM_TI1_SetConfig+0xd8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a22      	ldr	r2, [pc, #136]	; (8007d84 <TIM_TI1_SetConfig+0xdc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4a21      	ldr	r2, [pc, #132]	; (8007d88 <TIM_TI1_SetConfig+0xe0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_TI1_SetConfig+0x66>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a20      	ldr	r2, [pc, #128]	; (8007d8c <TIM_TI1_SetConfig+0xe4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d101      	bne.n	8007d12 <TIM_TI1_SetConfig+0x6a>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <TIM_TI1_SetConfig+0x6c>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d008      	beq.n	8007d2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f023 0303 	bic.w	r3, r3, #3
 8007d1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e003      	b.n	8007d32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f003 030a 	and.w	r3, r3, #10
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	621a      	str	r2, [r3, #32]
}
 8007d66:	bf00      	nop
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	40010400 	.word	0x40010400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40001800 	.word	0x40001800

08007d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f023 030a 	bic.w	r3, r3, #10
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
 8007dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	f023 0210 	bic.w	r2, r3, #16
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	031b      	lsls	r3, r3, #12
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	621a      	str	r2, [r3, #32]
}
 8007e5c:	bf00      	nop
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	f023 0210 	bic.w	r2, r3, #16
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	031b      	lsls	r3, r3, #12
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	621a      	str	r2, [r3, #32]
}
 8007ebc:	bf00      	nop
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f023 0303 	bic.w	r3, r3, #3
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007f18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	621a      	str	r2, [r3, #32]
}
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	031b      	lsls	r3, r3, #12
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007f92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	031b      	lsls	r3, r3, #12
 8007f98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	621a      	str	r2, [r3, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
 8007fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f043 0307 	orr.w	r3, r3, #7
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800800a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	431a      	orrs	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	609a      	str	r2, [r3, #8]
}
 8008024:	bf00      	nop
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2201      	movs	r2, #1
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1a      	ldr	r2, [r3, #32]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	43db      	mvns	r3, r3
 8008052:	401a      	ands	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a1a      	ldr	r2, [r3, #32]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	fa01 f303 	lsl.w	r3, r1, r3
 8008068:	431a      	orrs	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008090:	2302      	movs	r3, #2
 8008092:	e05a      	b.n	800814a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a21      	ldr	r2, [pc, #132]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d022      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e0:	d01d      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1d      	ldr	r2, [pc, #116]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d018      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1a      	ldr	r2, [pc, #104]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d00e      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a18      	ldr	r2, [pc, #96]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d009      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d004      	beq.n	800811e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d10c      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4313      	orrs	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40010000 	.word	0x40010000
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40000c00 	.word	0x40000c00
 8008168:	40010400 	.word	0x40010400
 800816c:	40014000 	.word	0x40014000
 8008170:	40001800 	.word	0x40001800

08008174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800818c:	2302      	movs	r3, #2
 800818e:	e03d      	b.n	800820c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e03f      	b.n	80082d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fa f882 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2224      	movs	r2, #36	; 0x24
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc71 	bl	8008b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b0ba      	sub	sp, #232	; 0xe8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008302:	2300      	movs	r3, #0
 8008304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008308:	2300      	movs	r3, #0
 800830a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800831a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10f      	bne.n	8008342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <HAL_UART_IRQHandler+0x66>
 800832e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb5b 	bl	80089f6 <UART_Receive_IT>
      return;
 8008340:	e256      	b.n	80087f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 80de 	beq.w	8008508 <HAL_UART_IRQHandler+0x22c>
 800834c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80d1 	beq.w	8008508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <HAL_UART_IRQHandler+0xae>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f043 0201 	orr.w	r2, r3, #1
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0304 	and.w	r3, r3, #4
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_UART_IRQHandler+0xd2>
 8008396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	f043 0202 	orr.w	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <HAL_UART_IRQHandler+0xf6>
 80083ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	f043 0204 	orr.w	r2, r3, #4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <HAL_UART_IRQHandler+0x126>
 80083de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f043 0208 	orr.w	r2, r3, #8
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 81ed 	beq.w	80087e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800840c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008410:	f003 0320 	and.w	r3, r3, #32
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_UART_IRQHandler+0x14e>
 8008418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d002      	beq.n	800842a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fae6 	bl	80089f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	f003 0308 	and.w	r3, r3, #8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <HAL_UART_IRQHandler+0x17a>
 800844e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d04f      	beq.n	80084f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9ee 	bl	8008838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d141      	bne.n	80084ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3314      	adds	r3, #20
 8008470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800849a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1d9      	bne.n	800846a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d013      	beq.n	80084e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	4a7d      	ldr	r2, [pc, #500]	; (80086b8 <HAL_UART_IRQHandler+0x3dc>)
 80084c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fc fa1e 	bl	800490c <HAL_DMA_Abort_IT>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d016      	beq.n	8008504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084e0:	4610      	mov	r0, r2
 80084e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e4:	e00e      	b.n	8008504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f990 	bl	800880c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ec:	e00a      	b.n	8008504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f98c 	bl	800880c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	e006      	b.n	8008504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f988 	bl	800880c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008502:	e170      	b.n	80087e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008504:	bf00      	nop
    return;
 8008506:	e16e      	b.n	80087e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	2b01      	cmp	r3, #1
 800850e:	f040 814a 	bne.w	80087a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 8143 	beq.w	80087a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 813c 	beq.w	80087a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	60bb      	str	r3, [r7, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	f040 80b4 	bne.w	80086bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8140 	beq.w	80087ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800856e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008572:	429a      	cmp	r2, r3
 8008574:	f080 8139 	bcs.w	80087ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800857e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858a:	f000 8088 	beq.w	800869e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80085ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80085be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085ca:	e841 2300 	strex	r3, r2, [r1]
 80085ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1d9      	bne.n	800858e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3314      	adds	r3, #20
 80085e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	3314      	adds	r3, #20
 80085fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e1      	bne.n	80085da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	3314      	adds	r3, #20
 8008636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800863a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800863c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e3      	bne.n	8008616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	330c      	adds	r3, #12
 8008662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800866c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800866e:	f023 0310 	bic.w	r3, r3, #16
 8008672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	330c      	adds	r3, #12
 800867c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008680:	65ba      	str	r2, [r7, #88]	; 0x58
 8008682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008688:	e841 2300 	strex	r3, r2, [r1]
 800868c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800868e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008690:	2b00      	cmp	r3, #0
 8008692:	d1e3      	bne.n	800865c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	4618      	mov	r0, r3
 800869a:	f7fc f8c7 	bl	800482c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f8b6 	bl	8008820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086b4:	e099      	b.n	80087ea <HAL_UART_IRQHandler+0x50e>
 80086b6:	bf00      	nop
 80086b8:	080088ff 	.word	0x080088ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 808b 	beq.w	80087ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8086 	beq.w	80087ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	330c      	adds	r3, #12
 80086e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	330c      	adds	r3, #12
 8008702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008706:	647a      	str	r2, [r7, #68]	; 0x44
 8008708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800870c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e3      	bne.n	80086e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3314      	adds	r3, #20
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	623b      	str	r3, [r7, #32]
   return(result);
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3314      	adds	r3, #20
 800873a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800873e:	633a      	str	r2, [r7, #48]	; 0x30
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e3      	bne.n	800871a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	e853 3f00 	ldrex	r3, [r3]
 800876e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008784:	61fa      	str	r2, [r7, #28]
 8008786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	69fa      	ldr	r2, [r7, #28]
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	617b      	str	r3, [r7, #20]
   return(result);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e3      	bne.n	8008760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800879c:	4619      	mov	r1, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f83e 	bl	8008820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087a4:	e023      	b.n	80087ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <HAL_UART_IRQHandler+0x4ea>
 80087b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f8b1 	bl	8008926 <UART_Transmit_IT>
    return;
 80087c4:	e014      	b.n	80087f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <HAL_UART_IRQHandler+0x514>
 80087d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8f1 	bl	80089c6 <UART_EndTransmit_IT>
    return;
 80087e4:	e004      	b.n	80087f0 <HAL_UART_IRQHandler+0x514>
    return;
 80087e6:	bf00      	nop
 80087e8:	e002      	b.n	80087f0 <HAL_UART_IRQHandler+0x514>
      return;
 80087ea:	bf00      	nop
 80087ec:	e000      	b.n	80087f0 <HAL_UART_IRQHandler+0x514>
      return;
 80087ee:	bf00      	nop
  }
}
 80087f0:	37e8      	adds	r7, #232	; 0xe8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop

080087f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b095      	sub	sp, #84	; 0x54
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008860:	643a      	str	r2, [r7, #64]	; 0x40
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3314      	adds	r3, #20
 800887a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	61fb      	str	r3, [r7, #28]
   return(result);
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	64bb      	str	r3, [r7, #72]	; 0x48
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3314      	adds	r3, #20
 8008892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800889a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d119      	bne.n	80088e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f023 0310 	bic.w	r3, r3, #16
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d0:	61ba      	str	r2, [r7, #24]
 80088d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	613b      	str	r3, [r7, #16]
   return(result);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088f2:	bf00      	nop
 80088f4:	3754      	adds	r7, #84	; 0x54
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff ff77 	bl	800880c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b21      	cmp	r3, #33	; 0x21
 8008938:	d13e      	bne.n	80089b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d114      	bne.n	800896e <UART_Transmit_IT+0x48>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d110      	bne.n	800896e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	1c9a      	adds	r2, r3, #2
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]
 800896c:	e008      	b.n	8008980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	1c59      	adds	r1, r3, #1
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6211      	str	r1, [r2, #32]
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4619      	mov	r1, r3
 800898e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10f      	bne.n	80089b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e000      	b.n	80089ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089b8:	2302      	movs	r3, #2
  }
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7f9 ff92 	bl	8002910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b08c      	sub	sp, #48	; 0x30
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b22      	cmp	r3, #34	; 0x22
 8008a08:	f040 80ab 	bne.w	8008b62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d117      	bne.n	8008a46 <UART_Receive_IT+0x50>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d113      	bne.n	8008a46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3e:	1c9a      	adds	r2, r3, #2
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	; 0x28
 8008a44:	e026      	b.n	8008a94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d007      	beq.n	8008a6a <UART_Receive_IT+0x74>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <UART_Receive_IT+0x82>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e008      	b.n	8008a8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d15a      	bne.n	8008b5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0220 	bic.w	r2, r2, #32
 8008ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695a      	ldr	r2, [r3, #20]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0201 	bic.w	r2, r2, #1
 8008ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d135      	bne.n	8008b54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	613b      	str	r3, [r7, #16]
   return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f023 0310 	bic.w	r3, r3, #16
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	623a      	str	r2, [r7, #32]
 8008b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	69f9      	ldr	r1, [r7, #28]
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d10a      	bne.n	8008b46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fe67 	bl	8008820 <HAL_UARTEx_RxEventCallback>
 8008b52:	e002      	b.n	8008b5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fe4f 	bl	80087f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e002      	b.n	8008b64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e000      	b.n	8008b64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b62:	2302      	movs	r3, #2
  }
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3730      	adds	r7, #48	; 0x30
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	b09f      	sub	sp, #124	; 0x7c
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b82:	68d9      	ldr	r1, [r3, #12]
 8008b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	ea40 0301 	orr.w	r3, r0, r1
 8008b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	431a      	orrs	r2, r3
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bb0:	f021 010c 	bic.w	r1, r1, #12
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bba:	430b      	orrs	r3, r1
 8008bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bca:	6999      	ldr	r1, [r3, #24]
 8008bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	ea40 0301 	orr.w	r3, r0, r1
 8008bd4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4bc5      	ldr	r3, [pc, #788]	; (8008ef0 <UART_SetConfig+0x384>)
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d004      	beq.n	8008bea <UART_SetConfig+0x7e>
 8008be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	4bc3      	ldr	r3, [pc, #780]	; (8008ef4 <UART_SetConfig+0x388>)
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d103      	bne.n	8008bf2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bea:	f7fd ffe1 	bl	8006bb0 <HAL_RCC_GetPCLK2Freq>
 8008bee:	6778      	str	r0, [r7, #116]	; 0x74
 8008bf0:	e002      	b.n	8008bf8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bf2:	f7fd ffc9 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8008bf6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c00:	f040 80b6 	bne.w	8008d70 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c06:	461c      	mov	r4, r3
 8008c08:	f04f 0500 	mov.w	r5, #0
 8008c0c:	4622      	mov	r2, r4
 8008c0e:	462b      	mov	r3, r5
 8008c10:	1891      	adds	r1, r2, r2
 8008c12:	6439      	str	r1, [r7, #64]	; 0x40
 8008c14:	415b      	adcs	r3, r3
 8008c16:	647b      	str	r3, [r7, #68]	; 0x44
 8008c18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c1c:	1912      	adds	r2, r2, r4
 8008c1e:	eb45 0303 	adc.w	r3, r5, r3
 8008c22:	f04f 0000 	mov.w	r0, #0
 8008c26:	f04f 0100 	mov.w	r1, #0
 8008c2a:	00d9      	lsls	r1, r3, #3
 8008c2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c30:	00d0      	lsls	r0, r2, #3
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	1911      	adds	r1, r2, r4
 8008c38:	6639      	str	r1, [r7, #96]	; 0x60
 8008c3a:	416b      	adcs	r3, r5
 8008c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8008c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	1891      	adds	r1, r2, r2
 8008c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c4c:	415b      	adcs	r3, r3
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c58:	f7f7 ffbe 	bl	8000bd8 <__aeabi_uldivmod>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4ba5      	ldr	r3, [pc, #660]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008c62:	fba3 2302 	umull	r2, r3, r3, r2
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	011e      	lsls	r6, r3, #4
 8008c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	f04f 0500 	mov.w	r5, #0
 8008c72:	4622      	mov	r2, r4
 8008c74:	462b      	mov	r3, r5
 8008c76:	1891      	adds	r1, r2, r2
 8008c78:	6339      	str	r1, [r7, #48]	; 0x30
 8008c7a:	415b      	adcs	r3, r3
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c82:	1912      	adds	r2, r2, r4
 8008c84:	eb45 0303 	adc.w	r3, r5, r3
 8008c88:	f04f 0000 	mov.w	r0, #0
 8008c8c:	f04f 0100 	mov.w	r1, #0
 8008c90:	00d9      	lsls	r1, r3, #3
 8008c92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c96:	00d0      	lsls	r0, r2, #3
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	1911      	adds	r1, r2, r4
 8008c9e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ca0:	416b      	adcs	r3, r5
 8008ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	1891      	adds	r1, r2, r2
 8008cb0:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cb2:	415b      	adcs	r3, r3
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008cbe:	f7f7 ff8b 	bl	8000bd8 <__aeabi_uldivmod>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	4b8c      	ldr	r3, [pc, #560]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008ccc:	095b      	lsrs	r3, r3, #5
 8008cce:	2164      	movs	r1, #100	; 0x64
 8008cd0:	fb01 f303 	mul.w	r3, r1, r3
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	3332      	adds	r3, #50	; 0x32
 8008cda:	4a87      	ldr	r2, [pc, #540]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	005b      	lsls	r3, r3, #1
 8008ce4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ce8:	441e      	add	r6, r3
 8008cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cec:	4618      	mov	r0, r3
 8008cee:	f04f 0100 	mov.w	r1, #0
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	1894      	adds	r4, r2, r2
 8008cf8:	623c      	str	r4, [r7, #32]
 8008cfa:	415b      	adcs	r3, r3
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d02:	1812      	adds	r2, r2, r0
 8008d04:	eb41 0303 	adc.w	r3, r1, r3
 8008d08:	f04f 0400 	mov.w	r4, #0
 8008d0c:	f04f 0500 	mov.w	r5, #0
 8008d10:	00dd      	lsls	r5, r3, #3
 8008d12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d16:	00d4      	lsls	r4, r2, #3
 8008d18:	4622      	mov	r2, r4
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	1814      	adds	r4, r2, r0
 8008d1e:	653c      	str	r4, [r7, #80]	; 0x50
 8008d20:	414b      	adcs	r3, r1
 8008d22:	657b      	str	r3, [r7, #84]	; 0x54
 8008d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	1891      	adds	r1, r2, r2
 8008d30:	61b9      	str	r1, [r7, #24]
 8008d32:	415b      	adcs	r3, r3
 8008d34:	61fb      	str	r3, [r7, #28]
 8008d36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d3e:	f7f7 ff4b 	bl	8000bd8 <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4b6c      	ldr	r3, [pc, #432]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008d48:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	2164      	movs	r1, #100	; 0x64
 8008d50:	fb01 f303 	mul.w	r3, r1, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	3332      	adds	r3, #50	; 0x32
 8008d5a:	4a67      	ldr	r2, [pc, #412]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	f003 0207 	and.w	r2, r3, #7
 8008d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4432      	add	r2, r6
 8008d6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d6e:	e0b9      	b.n	8008ee4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d72:	461c      	mov	r4, r3
 8008d74:	f04f 0500 	mov.w	r5, #0
 8008d78:	4622      	mov	r2, r4
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	1891      	adds	r1, r2, r2
 8008d7e:	6139      	str	r1, [r7, #16]
 8008d80:	415b      	adcs	r3, r3
 8008d82:	617b      	str	r3, [r7, #20]
 8008d84:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d88:	1912      	adds	r2, r2, r4
 8008d8a:	eb45 0303 	adc.w	r3, r5, r3
 8008d8e:	f04f 0000 	mov.w	r0, #0
 8008d92:	f04f 0100 	mov.w	r1, #0
 8008d96:	00d9      	lsls	r1, r3, #3
 8008d98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d9c:	00d0      	lsls	r0, r2, #3
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	eb12 0804 	adds.w	r8, r2, r4
 8008da6:	eb43 0905 	adc.w	r9, r3, r5
 8008daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f04f 0100 	mov.w	r1, #0
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	008b      	lsls	r3, r1, #2
 8008dbe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dc2:	0082      	lsls	r2, r0, #2
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	f7f7 ff06 	bl	8000bd8 <__aeabi_uldivmod>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4b49      	ldr	r3, [pc, #292]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8008dd6:	095b      	lsrs	r3, r3, #5
 8008dd8:	011e      	lsls	r6, r3, #4
 8008dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f04f 0100 	mov.w	r1, #0
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	1894      	adds	r4, r2, r2
 8008de8:	60bc      	str	r4, [r7, #8]
 8008dea:	415b      	adcs	r3, r3
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008df2:	1812      	adds	r2, r2, r0
 8008df4:	eb41 0303 	adc.w	r3, r1, r3
 8008df8:	f04f 0400 	mov.w	r4, #0
 8008dfc:	f04f 0500 	mov.w	r5, #0
 8008e00:	00dd      	lsls	r5, r3, #3
 8008e02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e06:	00d4      	lsls	r4, r2, #3
 8008e08:	4622      	mov	r2, r4
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	1814      	adds	r4, r2, r0
 8008e0e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008e10:	414b      	adcs	r3, r1
 8008e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f04f 0100 	mov.w	r1, #0
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	008b      	lsls	r3, r1, #2
 8008e28:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e2c:	0082      	lsls	r2, r0, #2
 8008e2e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e32:	f7f7 fed1 	bl	8000bd8 <__aeabi_uldivmod>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4b2f      	ldr	r3, [pc, #188]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e40:	095b      	lsrs	r3, r3, #5
 8008e42:	2164      	movs	r1, #100	; 0x64
 8008e44:	fb01 f303 	mul.w	r3, r1, r3
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	3332      	adds	r3, #50	; 0x32
 8008e4e:	4a2a      	ldr	r2, [pc, #168]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e5a:	441e      	add	r6, r3
 8008e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f04f 0100 	mov.w	r1, #0
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	1894      	adds	r4, r2, r2
 8008e6a:	603c      	str	r4, [r7, #0]
 8008e6c:	415b      	adcs	r3, r3
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e74:	1812      	adds	r2, r2, r0
 8008e76:	eb41 0303 	adc.w	r3, r1, r3
 8008e7a:	f04f 0400 	mov.w	r4, #0
 8008e7e:	f04f 0500 	mov.w	r5, #0
 8008e82:	00dd      	lsls	r5, r3, #3
 8008e84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e88:	00d4      	lsls	r4, r2, #3
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	462b      	mov	r3, r5
 8008e8e:	eb12 0a00 	adds.w	sl, r2, r0
 8008e92:	eb43 0b01 	adc.w	fp, r3, r1
 8008e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f04f 0100 	mov.w	r1, #0
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	008b      	lsls	r3, r1, #2
 8008eaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008eae:	0082      	lsls	r2, r0, #2
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 fe90 	bl	8000bd8 <__aeabi_uldivmod>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	2164      	movs	r1, #100	; 0x64
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	3332      	adds	r3, #50	; 0x32
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <UART_SetConfig+0x38c>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	f003 020f 	and.w	r2, r3, #15
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4432      	add	r2, r6
 8008ee2:	609a      	str	r2, [r3, #8]
}
 8008ee4:	bf00      	nop
 8008ee6:	377c      	adds	r7, #124	; 0x7c
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	bf00      	nop
 8008ef0:	40011000 	.word	0x40011000
 8008ef4:	40011400 	.word	0x40011400
 8008ef8:	51eb851f 	.word	0x51eb851f

08008efc <__NVIC_SetPriority>:
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	db0a      	blt.n	8008f26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	490c      	ldr	r1, [pc, #48]	; (8008f48 <__NVIC_SetPriority+0x4c>)
 8008f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f1a:	0112      	lsls	r2, r2, #4
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	440b      	add	r3, r1
 8008f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f24:	e00a      	b.n	8008f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	4908      	ldr	r1, [pc, #32]	; (8008f4c <__NVIC_SetPriority+0x50>)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	f003 030f 	and.w	r3, r3, #15
 8008f32:	3b04      	subs	r3, #4
 8008f34:	0112      	lsls	r2, r2, #4
 8008f36:	b2d2      	uxtb	r2, r2
 8008f38:	440b      	add	r3, r1
 8008f3a:	761a      	strb	r2, [r3, #24]
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	e000e100 	.word	0xe000e100
 8008f4c:	e000ed00 	.word	0xe000ed00

08008f50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f54:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <SysTick_Handler+0x1c>)
 8008f56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f58:	f001 fdd4 	bl	800ab04 <xTaskGetSchedulerState>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d001      	beq.n	8008f66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f62:	f002 fbb9 	bl	800b6d8 <xPortSysTickHandler>
  }
}
 8008f66:	bf00      	nop
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	e000e010 	.word	0xe000e010

08008f70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f74:	2100      	movs	r1, #0
 8008f76:	f06f 0004 	mvn.w	r0, #4
 8008f7a:	f7ff ffbf 	bl	8008efc <__NVIC_SetPriority>
#endif
}
 8008f7e:	bf00      	nop
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f8a:	f3ef 8305 	mrs	r3, IPSR
 8008f8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f96:	f06f 0305 	mvn.w	r3, #5
 8008f9a:	607b      	str	r3, [r7, #4]
 8008f9c:	e00c      	b.n	8008fb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <osKernelInitialize+0x44>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d105      	bne.n	8008fb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fa6:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <osKernelInitialize+0x44>)
 8008fa8:	2201      	movs	r2, #1
 8008faa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	e002      	b.n	8008fb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fb8:	687b      	ldr	r3, [r7, #4]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	2000016c 	.word	0x2000016c

08008fcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fd2:	f3ef 8305 	mrs	r3, IPSR
 8008fd6:	603b      	str	r3, [r7, #0]
  return(result);
 8008fd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fde:	f06f 0305 	mvn.w	r3, #5
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	e010      	b.n	8009008 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fe6:	4b0b      	ldr	r3, [pc, #44]	; (8009014 <osKernelStart+0x48>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d109      	bne.n	8009002 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fee:	f7ff ffbf 	bl	8008f70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ff2:	4b08      	ldr	r3, [pc, #32]	; (8009014 <osKernelStart+0x48>)
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ff8:	f001 f928 	bl	800a24c <vTaskStartScheduler>
      stat = osOK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	607b      	str	r3, [r7, #4]
 8009000:	e002      	b.n	8009008 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009002:	f04f 33ff 	mov.w	r3, #4294967295
 8009006:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009008:	687b      	ldr	r3, [r7, #4]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	2000016c 	.word	0x2000016c

08009018 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	; 0x38
 800901c:	af04      	add	r7, sp, #16
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009024:	2300      	movs	r3, #0
 8009026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009028:	f3ef 8305 	mrs	r3, IPSR
 800902c:	617b      	str	r3, [r7, #20]
  return(result);
 800902e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009030:	2b00      	cmp	r3, #0
 8009032:	d17e      	bne.n	8009132 <osThreadNew+0x11a>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d07b      	beq.n	8009132 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800903e:	2318      	movs	r3, #24
 8009040:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009046:	f04f 33ff 	mov.w	r3, #4294967295
 800904a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d045      	beq.n	80090de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <osThreadNew+0x48>
        name = attr->name;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d008      	beq.n	8009086 <osThreadNew+0x6e>
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	2b38      	cmp	r3, #56	; 0x38
 8009078:	d805      	bhi.n	8009086 <osThreadNew+0x6e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <osThreadNew+0x72>
        return (NULL);
 8009086:	2300      	movs	r3, #0
 8009088:	e054      	b.n	8009134 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	089b      	lsrs	r3, r3, #2
 8009098:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00e      	beq.n	80090c0 <osThreadNew+0xa8>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	2bbb      	cmp	r3, #187	; 0xbb
 80090a8:	d90a      	bls.n	80090c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d006      	beq.n	80090c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <osThreadNew+0xa8>
        mem = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	61bb      	str	r3, [r7, #24]
 80090be:	e010      	b.n	80090e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10c      	bne.n	80090e2 <osThreadNew+0xca>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d108      	bne.n	80090e2 <osThreadNew+0xca>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d104      	bne.n	80090e2 <osThreadNew+0xca>
          mem = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	e001      	b.n	80090e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090de:	2300      	movs	r3, #0
 80090e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d110      	bne.n	800910a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090f0:	9202      	str	r2, [sp, #8]
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	6a3a      	ldr	r2, [r7, #32]
 80090fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 feb8 	bl	8009e74 <xTaskCreateStatic>
 8009104:	4603      	mov	r3, r0
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	e013      	b.n	8009132 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d110      	bne.n	8009132 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	b29a      	uxth	r2, r3
 8009114:	f107 0310 	add.w	r3, r7, #16
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f000 ff03 	bl	8009f2e <xTaskCreate>
 8009128:	4603      	mov	r3, r0
 800912a:	2b01      	cmp	r3, #1
 800912c:	d001      	beq.n	8009132 <osThreadNew+0x11a>
            hTask = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009132:	693b      	ldr	r3, [r7, #16]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3728      	adds	r7, #40	; 0x28
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009144:	f3ef 8305 	mrs	r3, IPSR
 8009148:	60bb      	str	r3, [r7, #8]
  return(result);
 800914a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <osDelay+0x1c>
    stat = osErrorISR;
 8009150:	f06f 0305 	mvn.w	r3, #5
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e007      	b.n	8009168 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f001 f83e 	bl	800a1e4 <vTaskDelay>
    }
  }

  return (stat);
 8009168:	68fb      	ldr	r3, [r7, #12]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009172:	b580      	push	{r7, lr}
 8009174:	b08a      	sub	sp, #40	; 0x28
 8009176:	af02      	add	r7, sp, #8
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	60b9      	str	r1, [r7, #8]
 800917c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800917e:	2300      	movs	r3, #0
 8009180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009182:	f3ef 8305 	mrs	r3, IPSR
 8009186:	613b      	str	r3, [r7, #16]
  return(result);
 8009188:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800918a:	2b00      	cmp	r3, #0
 800918c:	d15f      	bne.n	800924e <osMessageQueueNew+0xdc>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d05c      	beq.n	800924e <osMessageQueueNew+0xdc>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d059      	beq.n	800924e <osMessageQueueNew+0xdc>
    mem = -1;
 800919a:	f04f 33ff 	mov.w	r3, #4294967295
 800919e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d029      	beq.n	80091fa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d012      	beq.n	80091d4 <osMessageQueueNew+0x62>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	2b4f      	cmp	r3, #79	; 0x4f
 80091b4:	d90e      	bls.n	80091d4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d302      	bcc.n	80091d4 <osMessageQueueNew+0x62>
        mem = 1;
 80091ce:	2301      	movs	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e014      	b.n	80091fe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d110      	bne.n	80091fe <osMessageQueueNew+0x8c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10c      	bne.n	80091fe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d108      	bne.n	80091fe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d104      	bne.n	80091fe <osMessageQueueNew+0x8c>
          mem = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	61bb      	str	r3, [r7, #24]
 80091f8:	e001      	b.n	80091fe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d10b      	bne.n	800921c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2100      	movs	r1, #0
 800920e:	9100      	str	r1, [sp, #0]
 8009210:	68b9      	ldr	r1, [r7, #8]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 f970 	bl	80094f8 <xQueueGenericCreateStatic>
 8009218:	61f8      	str	r0, [r7, #28]
 800921a:	e008      	b.n	800922e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009222:	2200      	movs	r2, #0
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f9de 	bl	80095e8 <xQueueGenericCreate>
 800922c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00c      	beq.n	800924e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <osMessageQueueNew+0xd0>
        name = attr->name;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e001      	b.n	8009246 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009246:	6979      	ldr	r1, [r7, #20]
 8009248:	69f8      	ldr	r0, [r7, #28]
 800924a:	f000 fdb5 	bl	8009db8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800924e:	69fb      	ldr	r3, [r7, #28]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4a07      	ldr	r2, [pc, #28]	; (8009284 <vApplicationGetIdleTaskMemory+0x2c>)
 8009268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4a06      	ldr	r2, [pc, #24]	; (8009288 <vApplicationGetIdleTaskMemory+0x30>)
 800926e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2280      	movs	r2, #128	; 0x80
 8009274:	601a      	str	r2, [r3, #0]
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000170 	.word	0x20000170
 8009288:	2000022c 	.word	0x2000022c

0800928c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4a07      	ldr	r2, [pc, #28]	; (80092b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800929c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4a06      	ldr	r2, [pc, #24]	; (80092bc <vApplicationGetTimerTaskMemory+0x30>)
 80092a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092aa:	601a      	str	r2, [r3, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	2000042c 	.word	0x2000042c
 80092bc:	200004e8 	.word	0x200004e8

080092c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f103 0208 	add.w	r2, r3, #8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f04f 32ff 	mov.w	r2, #4294967295
 80092d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f103 0208 	add.w	r2, r3, #8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f103 0208 	add.w	r2, r3, #8
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
}
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009362:	b480      	push	{r7}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d103      	bne.n	8009382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e00c      	b.n	800939c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3308      	adds	r3, #8
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	e002      	b.n	8009390 <vListInsert+0x2e>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	60fb      	str	r3, [r7, #12]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	429a      	cmp	r2, r3
 800939a:	d2f6      	bcs.n	800938a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6892      	ldr	r2, [r2, #8]
 80093ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	6852      	ldr	r2, [r2, #4]
 80093f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d103      	bne.n	8009408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	1e5a      	subs	r2, r3, #1
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009452:	f002 f8af 	bl	800b5b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	68f9      	ldr	r1, [r7, #12]
 8009460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009462:	fb01 f303 	mul.w	r3, r1, r3
 8009466:	441a      	add	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009482:	3b01      	subs	r3, #1
 8009484:	68f9      	ldr	r1, [r7, #12]
 8009486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009488:	fb01 f303 	mul.w	r3, r1, r3
 800948c:	441a      	add	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	22ff      	movs	r2, #255	; 0xff
 8009496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	22ff      	movs	r2, #255	; 0xff
 800949e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d114      	bne.n	80094d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01a      	beq.n	80094e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3310      	adds	r3, #16
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 f963 	bl	800a780 <xTaskRemoveFromEventList>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d012      	beq.n	80094e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094c0:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <xQueueGenericReset+0xcc>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	e009      	b.n	80094e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3310      	adds	r3, #16
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fef2 	bl	80092c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff feed 	bl	80092c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094e6:	f002 f895 	bl	800b614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094ea:	2301      	movs	r3, #1
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	e000ed04 	.word	0xe000ed04

080094f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b08e      	sub	sp, #56	; 0x38
 80094fc:	af02      	add	r7, sp, #8
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10a      	bne.n	800953e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	627b      	str	r3, [r7, #36]	; 0x24
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d002      	beq.n	800954a <xQueueGenericCreateStatic+0x52>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <xQueueGenericCreateStatic+0x56>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <xQueueGenericCreateStatic+0x58>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	623b      	str	r3, [r7, #32]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d102      	bne.n	8009576 <xQueueGenericCreateStatic+0x7e>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <xQueueGenericCreateStatic+0x82>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <xQueueGenericCreateStatic+0x84>
 800957a:	2300      	movs	r3, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	61fb      	str	r3, [r7, #28]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009596:	2350      	movs	r3, #80	; 0x50
 8009598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b50      	cmp	r3, #80	; 0x50
 800959e:	d00a      	beq.n	80095b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	61bb      	str	r3, [r7, #24]
}
 80095b2:	bf00      	nop
 80095b4:	e7fe      	b.n	80095b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00d      	beq.n	80095de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	4613      	mov	r3, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f83f 	bl	800965c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3730      	adds	r7, #48	; 0x30
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08a      	sub	sp, #40	; 0x28
 80095ec:	af02      	add	r7, sp, #8
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <xQueueGenericCreate+0x2a>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	613b      	str	r3, [r7, #16]
}
 800960e:	bf00      	nop
 8009610:	e7fe      	b.n	8009610 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	fb02 f303 	mul.w	r3, r2, r3
 800961a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	3350      	adds	r3, #80	; 0x50
 8009620:	4618      	mov	r0, r3
 8009622:	f002 f8e9 	bl	800b7f8 <pvPortMalloc>
 8009626:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d011      	beq.n	8009652 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	3350      	adds	r3, #80	; 0x50
 8009636:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	9300      	str	r3, [sp, #0]
 8009646:	4613      	mov	r3, r2
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	68b9      	ldr	r1, [r7, #8]
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 f805 	bl	800965c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009652:	69bb      	ldr	r3, [r7, #24]
	}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	e002      	b.n	800967e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800968a:	2101      	movs	r1, #1
 800968c:	69b8      	ldr	r0, [r7, #24]
 800968e:	f7ff fecb 	bl	8009428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	78fa      	ldrb	r2, [r7, #3]
 8009696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096b2:	2300      	movs	r3, #0
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <xQueueGenericSend+0x32>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <xQueueGenericSend+0x40>
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <xQueueGenericSend+0x44>
 80096e4:	2301      	movs	r3, #1
 80096e6:	e000      	b.n	80096ea <xQueueGenericSend+0x46>
 80096e8:	2300      	movs	r3, #0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <xQueueGenericSend+0x60>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009700:	bf00      	nop
 8009702:	e7fe      	b.n	8009702 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d103      	bne.n	8009712 <xQueueGenericSend+0x6e>
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970e:	2b01      	cmp	r3, #1
 8009710:	d101      	bne.n	8009716 <xQueueGenericSend+0x72>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <xQueueGenericSend+0x74>
 8009716:	2300      	movs	r3, #0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <xQueueGenericSend+0x8e>
	__asm volatile
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	623b      	str	r3, [r7, #32]
}
 800972e:	bf00      	nop
 8009730:	e7fe      	b.n	8009730 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009732:	f001 f9e7 	bl	800ab04 <xTaskGetSchedulerState>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <xQueueGenericSend+0x9e>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <xQueueGenericSend+0xa2>
 8009742:	2301      	movs	r3, #1
 8009744:	e000      	b.n	8009748 <xQueueGenericSend+0xa4>
 8009746:	2300      	movs	r3, #0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10a      	bne.n	8009762 <xQueueGenericSend+0xbe>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	61fb      	str	r3, [r7, #28]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009762:	f001 ff27 	bl	800b5b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800976e:	429a      	cmp	r2, r3
 8009770:	d302      	bcc.n	8009778 <xQueueGenericSend+0xd4>
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d129      	bne.n	80097cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800977e:	f000 fa0b 	bl	8009b98 <prvCopyDataToQueue>
 8009782:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	d010      	beq.n	80097ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	3324      	adds	r3, #36	; 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fff5 	bl	800a780 <xTaskRemoveFromEventList>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d013      	beq.n	80097c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800979c:	4b3f      	ldr	r3, [pc, #252]	; (800989c <xQueueGenericSend+0x1f8>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	e00a      	b.n	80097c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097b4:	4b39      	ldr	r3, [pc, #228]	; (800989c <xQueueGenericSend+0x1f8>)
 80097b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097c4:	f001 ff26 	bl	800b614 <vPortExitCritical>
				return pdPASS;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e063      	b.n	8009894 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097d2:	f001 ff1f 	bl	800b614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e05c      	b.n	8009894 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d106      	bne.n	80097ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097e0:	f107 0314 	add.w	r3, r7, #20
 80097e4:	4618      	mov	r0, r3
 80097e6:	f001 f82f 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ea:	2301      	movs	r3, #1
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097ee:	f001 ff11 	bl	800b614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097f2:	f000 fd9b 	bl	800a32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097f6:	f001 fedd 	bl	800b5b4 <vPortEnterCritical>
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009800:	b25b      	sxtb	r3, r3
 8009802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009806:	d103      	bne.n	8009810 <xQueueGenericSend+0x16c>
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009816:	b25b      	sxtb	r3, r3
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d103      	bne.n	8009826 <xQueueGenericSend+0x182>
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009826:	f001 fef5 	bl	800b614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800982a:	1d3a      	adds	r2, r7, #4
 800982c:	f107 0314 	add.w	r3, r7, #20
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f001 f81e 	bl	800a874 <xTaskCheckForTimeOut>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d124      	bne.n	8009888 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800983e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009840:	f000 faa2 	bl	8009d88 <prvIsQueueFull>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d018      	beq.n	800987c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	3310      	adds	r3, #16
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	4611      	mov	r1, r2
 8009852:	4618      	mov	r0, r3
 8009854:	f000 ff44 	bl	800a6e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800985a:	f000 fa2d 	bl	8009cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800985e:	f000 fd73 	bl	800a348 <xTaskResumeAll>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	f47f af7c 	bne.w	8009762 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <xQueueGenericSend+0x1f8>)
 800986c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	e772      	b.n	8009762 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800987c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800987e:	f000 fa1b 	bl	8009cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009882:	f000 fd61 	bl	800a348 <xTaskResumeAll>
 8009886:	e76c      	b.n	8009762 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988a:	f000 fa15 	bl	8009cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800988e:	f000 fd5b 	bl	800a348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009892:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009894:	4618      	mov	r0, r3
 8009896:	3738      	adds	r7, #56	; 0x38
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b090      	sub	sp, #64	; 0x40
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098bc:	f383 8811 	msr	BASEPRI, r3
 80098c0:	f3bf 8f6f 	isb	sy
 80098c4:	f3bf 8f4f 	dsb	sy
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098ca:	bf00      	nop
 80098cc:	e7fe      	b.n	80098cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <xQueueGenericSendFromISR+0x3c>
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <xQueueGenericSendFromISR+0x40>
 80098dc:	2301      	movs	r3, #1
 80098de:	e000      	b.n	80098e2 <xQueueGenericSendFromISR+0x42>
 80098e0:	2300      	movs	r3, #0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d103      	bne.n	800990a <xQueueGenericSendFromISR+0x6a>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <xQueueGenericSendFromISR+0x6e>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <xQueueGenericSendFromISR+0x70>
 800990e:	2300      	movs	r3, #0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d10a      	bne.n	800992a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	623b      	str	r3, [r7, #32]
}
 8009926:	bf00      	nop
 8009928:	e7fe      	b.n	8009928 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800992a:	f001 ff25 	bl	800b778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800992e:	f3ef 8211 	mrs	r2, BASEPRI
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	61fa      	str	r2, [r7, #28]
 8009944:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009946:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800994a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	429a      	cmp	r2, r3
 8009954:	d302      	bcc.n	800995c <xQueueGenericSendFromISR+0xbc>
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d12f      	bne.n	80099bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	68b9      	ldr	r1, [r7, #8]
 8009970:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009972:	f000 f911 	bl	8009b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009976:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997e:	d112      	bne.n	80099a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b00      	cmp	r3, #0
 8009986:	d016      	beq.n	80099b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fef7 	bl	800a780 <xTaskRemoveFromEventList>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00e      	beq.n	80099b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00b      	beq.n	80099b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e007      	b.n	80099b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80099aa:	3301      	adds	r3, #1
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	b25a      	sxtb	r2, r3
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099b6:	2301      	movs	r3, #1
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099ba:	e001      	b.n	80099c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3740      	adds	r7, #64	; 0x40
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08c      	sub	sp, #48	; 0x30
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099e4:	2300      	movs	r3, #0
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10a      	bne.n	8009a08 <xQueueReceive+0x30>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	623b      	str	r3, [r7, #32]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d103      	bne.n	8009a16 <xQueueReceive+0x3e>
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <xQueueReceive+0x42>
 8009a16:	2301      	movs	r3, #1
 8009a18:	e000      	b.n	8009a1c <xQueueReceive+0x44>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xQueueReceive+0x5e>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	61fb      	str	r3, [r7, #28]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a36:	f001 f865 	bl	800ab04 <xTaskGetSchedulerState>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <xQueueReceive+0x6e>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <xQueueReceive+0x72>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <xQueueReceive+0x74>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <xQueueReceive+0x8e>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	61bb      	str	r3, [r7, #24]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a66:	f001 fda5 	bl	800b5b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d01f      	beq.n	8009ab6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a7a:	f000 f8f7 	bl	8009c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	1e5a      	subs	r2, r3, #1
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00f      	beq.n	8009aae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a90:	3310      	adds	r3, #16
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fe74 	bl	800a780 <xTaskRemoveFromEventList>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d007      	beq.n	8009aae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a9e:	4b3d      	ldr	r3, [pc, #244]	; (8009b94 <xQueueReceive+0x1bc>)
 8009aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa4:	601a      	str	r2, [r3, #0]
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009aae:	f001 fdb1 	bl	800b614 <vPortExitCritical>
				return pdPASS;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e069      	b.n	8009b8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d103      	bne.n	8009ac4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009abc:	f001 fdaa 	bl	800b614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e062      	b.n	8009b8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d106      	bne.n	8009ad8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009aca:	f107 0310 	add.w	r3, r7, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 feba 	bl	800a848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ad8:	f001 fd9c 	bl	800b614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009adc:	f000 fc26 	bl	800a32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ae0:	f001 fd68 	bl	800b5b4 <vPortEnterCritical>
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aea:	b25b      	sxtb	r3, r3
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d103      	bne.n	8009afa <xQueueReceive+0x122>
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b06:	d103      	bne.n	8009b10 <xQueueReceive+0x138>
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b10:	f001 fd80 	bl	800b614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b14:	1d3a      	adds	r2, r7, #4
 8009b16:	f107 0310 	add.w	r3, r7, #16
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fea9 	bl	800a874 <xTaskCheckForTimeOut>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d123      	bne.n	8009b70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b2a:	f000 f917 	bl	8009d5c <prvIsQueueEmpty>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d017      	beq.n	8009b64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b36:	3324      	adds	r3, #36	; 0x24
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fdcf 	bl	800a6e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b44:	f000 f8b8 	bl	8009cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b48:	f000 fbfe 	bl	800a348 <xTaskResumeAll>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d189      	bne.n	8009a66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b52:	4b10      	ldr	r3, [pc, #64]	; (8009b94 <xQueueReceive+0x1bc>)
 8009b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	e780      	b.n	8009a66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b66:	f000 f8a7 	bl	8009cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b6a:	f000 fbed 	bl	800a348 <xTaskResumeAll>
 8009b6e:	e77a      	b.n	8009a66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b72:	f000 f8a1 	bl	8009cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b76:	f000 fbe7 	bl	800a348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b7c:	f000 f8ee 	bl	8009d5c <prvIsQueueEmpty>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f43f af6f 	beq.w	8009a66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3730      	adds	r7, #48	; 0x30
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10d      	bne.n	8009bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d14d      	bne.n	8009c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 ffbc 	bl	800ab40 <xTaskPriorityDisinherit>
 8009bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	e043      	b.n	8009c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d119      	bne.n	8009c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6858      	ldr	r0, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be0:	461a      	mov	r2, r3
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	f002 f838 	bl	800bc58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	685a      	ldr	r2, [r3, #4]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	441a      	add	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d32b      	bcc.n	8009c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	e026      	b.n	8009c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68d8      	ldr	r0, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	461a      	mov	r2, r3
 8009c16:	68b9      	ldr	r1, [r7, #8]
 8009c18:	f002 f81e 	bl	800bc58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c24:	425b      	negs	r3, r3
 8009c26:	441a      	add	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d207      	bcs.n	8009c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	425b      	negs	r3, r3
 8009c42:	441a      	add	r2, r3
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d105      	bne.n	8009c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c62:	697b      	ldr	r3, [r7, #20]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d018      	beq.n	8009cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	441a      	add	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d303      	bcc.n	8009ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68d9      	ldr	r1, [r3, #12]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6838      	ldr	r0, [r7, #0]
 8009cac:	f001 ffd4 	bl	800bc58 <memcpy>
	}
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cc0:	f001 fc78 	bl	800b5b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ccc:	e011      	b.n	8009cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d012      	beq.n	8009cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3324      	adds	r3, #36	; 0x24
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fd50 	bl	800a780 <xTaskRemoveFromEventList>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ce6:	f000 fe27 	bl	800a938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dce9      	bgt.n	8009cce <prvUnlockQueue+0x16>
 8009cfa:	e000      	b.n	8009cfe <prvUnlockQueue+0x46>
					break;
 8009cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	22ff      	movs	r2, #255	; 0xff
 8009d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d06:	f001 fc85 	bl	800b614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d0a:	f001 fc53 	bl	800b5b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d16:	e011      	b.n	8009d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d012      	beq.n	8009d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3310      	adds	r3, #16
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 fd2b 	bl	800a780 <xTaskRemoveFromEventList>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d30:	f000 fe02 	bl	800a938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dce9      	bgt.n	8009d18 <prvUnlockQueue+0x60>
 8009d44:	e000      	b.n	8009d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	22ff      	movs	r2, #255	; 0xff
 8009d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d50:	f001 fc60 	bl	800b614 <vPortExitCritical>
}
 8009d54:	bf00      	nop
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d64:	f001 fc26 	bl	800b5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d102      	bne.n	8009d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e001      	b.n	8009d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d7a:	f001 fc4b 	bl	800b614 <vPortExitCritical>

	return xReturn;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d90:	f001 fc10 	bl	800b5b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d102      	bne.n	8009da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009da0:	2301      	movs	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e001      	b.n	8009daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009daa:	f001 fc33 	bl	800b614 <vPortExitCritical>

	return xReturn;
 8009dae:	68fb      	ldr	r3, [r7, #12]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	e014      	b.n	8009df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009dc8:	4a0f      	ldr	r2, [pc, #60]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10b      	bne.n	8009dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009dd4:	490c      	ldr	r1, [pc, #48]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dde:	4a0a      	ldr	r2, [pc, #40]	; (8009e08 <vQueueAddToRegistry+0x50>)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	4413      	add	r3, r2
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dea:	e006      	b.n	8009dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	3301      	adds	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2b07      	cmp	r3, #7
 8009df6:	d9e7      	bls.n	8009dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	3714      	adds	r7, #20
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20006b38 	.word	0x20006b38

08009e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e1c:	f001 fbca 	bl	800b5b4 <vPortEnterCritical>
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d103      	bne.n	8009e36 <vQueueWaitForMessageRestricted+0x2a>
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e3c:	b25b      	sxtb	r3, r3
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d103      	bne.n	8009e4c <vQueueWaitForMessageRestricted+0x40>
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e4c:	f001 fbe2 	bl	800b614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d106      	bne.n	8009e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	3324      	adds	r3, #36	; 0x24
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fc61 	bl	800a728 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e66:	6978      	ldr	r0, [r7, #20]
 8009e68:	f7ff ff26 	bl	8009cb8 <prvUnlockQueue>
	}
 8009e6c:	bf00      	nop
 8009e6e:	3718      	adds	r7, #24
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b08e      	sub	sp, #56	; 0x38
 8009e78:	af04      	add	r7, sp, #16
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10a      	bne.n	8009e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	623b      	str	r3, [r7, #32]
}
 8009e9a:	bf00      	nop
 8009e9c:	e7fe      	b.n	8009e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10a      	bne.n	8009eba <xTaskCreateStatic+0x46>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	61fb      	str	r3, [r7, #28]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eba:	23bc      	movs	r3, #188	; 0xbc
 8009ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2bbc      	cmp	r3, #188	; 0xbc
 8009ec2:	d00a      	beq.n	8009eda <xTaskCreateStatic+0x66>
	__asm volatile
 8009ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	61bb      	str	r3, [r7, #24]
}
 8009ed6:	bf00      	nop
 8009ed8:	e7fe      	b.n	8009ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01e      	beq.n	8009f20 <xTaskCreateStatic+0xac>
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d01b      	beq.n	8009f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009efa:	2300      	movs	r3, #0
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	9302      	str	r3, [sp, #8]
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	68b9      	ldr	r1, [r7, #8]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 f850 	bl	8009fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1a:	f000 f8f3 	bl	800a104 <prvAddNewTaskToReadyList>
 8009f1e:	e001      	b.n	8009f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f24:	697b      	ldr	r3, [r7, #20]
	}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	; 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b08c      	sub	sp, #48	; 0x30
 8009f32:	af04      	add	r7, sp, #16
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	603b      	str	r3, [r7, #0]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f001 fc58 	bl	800b7f8 <pvPortMalloc>
 8009f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00e      	beq.n	8009f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f50:	20bc      	movs	r0, #188	; 0xbc
 8009f52:	f001 fc51 	bl	800b7f8 <pvPortMalloc>
 8009f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	631a      	str	r2, [r3, #48]	; 0x30
 8009f64:	e005      	b.n	8009f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f66:	6978      	ldr	r0, [r7, #20]
 8009f68:	f001 fd12 	bl	800b990 <vPortFree>
 8009f6c:	e001      	b.n	8009f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d017      	beq.n	8009fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f80:	88fa      	ldrh	r2, [r7, #6]
 8009f82:	2300      	movs	r3, #0
 8009f84:	9303      	str	r3, [sp, #12]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	9302      	str	r3, [sp, #8]
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68b9      	ldr	r1, [r7, #8]
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f000 f80e 	bl	8009fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f9c:	69f8      	ldr	r0, [r7, #28]
 8009f9e:	f000 f8b1 	bl	800a104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	61bb      	str	r3, [r7, #24]
 8009fa6:	e002      	b.n	8009fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fae:	69bb      	ldr	r3, [r7, #24]
	}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3720      	adds	r7, #32
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b088      	sub	sp, #32
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	461a      	mov	r2, r3
 8009fd0:	21a5      	movs	r1, #165	; 0xa5
 8009fd2:	f001 fe4f 	bl	800bc74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	f003 0307 	and.w	r3, r3, #7
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	617b      	str	r3, [r7, #20]
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01f      	beq.n	800a056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a016:	2300      	movs	r3, #0
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	e012      	b.n	800a042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	7819      	ldrb	r1, [r3, #0]
 800a024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	3334      	adds	r3, #52	; 0x34
 800a02c:	460a      	mov	r2, r1
 800a02e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	3301      	adds	r3, #1
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b0f      	cmp	r3, #15
 800a046:	d9e9      	bls.n	800a01c <prvInitialiseNewTask+0x64>
 800a048:	e000      	b.n	800a04c <prvInitialiseNewTask+0x94>
			{
				break;
 800a04a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a054:	e003      	b.n	800a05e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	2b37      	cmp	r3, #55	; 0x37
 800a062:	d901      	bls.n	800a068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a064:	2337      	movs	r3, #55	; 0x37
 800a066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a06c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	2200      	movs	r2, #0
 800a078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07c:	3304      	adds	r3, #4
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff f93e 	bl	8009300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a086:	3318      	adds	r3, #24
 800a088:	4618      	mov	r0, r3
 800a08a:	f7ff f939 	bl	8009300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	3354      	adds	r3, #84	; 0x54
 800a0b8:	2260      	movs	r2, #96	; 0x60
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f001 fdd9 	bl	800bc74 <memset>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c4:	4a0c      	ldr	r2, [pc, #48]	; (800a0f8 <prvInitialiseNewTask+0x140>)
 800a0c6:	659a      	str	r2, [r3, #88]	; 0x58
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ca:	4a0c      	ldr	r2, [pc, #48]	; (800a0fc <prvInitialiseNewTask+0x144>)
 800a0cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	4a0b      	ldr	r2, [pc, #44]	; (800a100 <prvInitialiseNewTask+0x148>)
 800a0d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	69b8      	ldr	r0, [r7, #24]
 800a0da:	f001 f941 	bl	800b360 <pxPortInitialiseStack>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f0:	bf00      	nop
 800a0f2:	3720      	adds	r7, #32
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	0800c438 	.word	0x0800c438
 800a0fc:	0800c458 	.word	0x0800c458
 800a100:	0800c418 	.word	0x0800c418

0800a104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a10c:	f001 fa52 	bl	800b5b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a110:	4b2d      	ldr	r3, [pc, #180]	; (800a1c8 <prvAddNewTaskToReadyList+0xc4>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a2c      	ldr	r2, [pc, #176]	; (800a1c8 <prvAddNewTaskToReadyList+0xc4>)
 800a118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a11a:	4b2c      	ldr	r3, [pc, #176]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d109      	bne.n	800a136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a122:	4a2a      	ldr	r2, [pc, #168]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a128:	4b27      	ldr	r3, [pc, #156]	; (800a1c8 <prvAddNewTaskToReadyList+0xc4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d110      	bne.n	800a152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a130:	f000 fc26 	bl	800a980 <prvInitialiseTaskLists>
 800a134:	e00d      	b.n	800a152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a136:	4b26      	ldr	r3, [pc, #152]	; (800a1d0 <prvAddNewTaskToReadyList+0xcc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a13e:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	429a      	cmp	r2, r3
 800a14a:	d802      	bhi.n	800a152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a14c:	4a1f      	ldr	r2, [pc, #124]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a152:	4b20      	ldr	r3, [pc, #128]	; (800a1d4 <prvAddNewTaskToReadyList+0xd0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	4a1e      	ldr	r2, [pc, #120]	; (800a1d4 <prvAddNewTaskToReadyList+0xd0>)
 800a15a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a15c:	4b1d      	ldr	r3, [pc, #116]	; (800a1d4 <prvAddNewTaskToReadyList+0xd0>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a168:	4b1b      	ldr	r3, [pc, #108]	; (800a1d8 <prvAddNewTaskToReadyList+0xd4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d903      	bls.n	800a178 <prvAddNewTaskToReadyList+0x74>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a174:	4a18      	ldr	r2, [pc, #96]	; (800a1d8 <prvAddNewTaskToReadyList+0xd4>)
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4a15      	ldr	r2, [pc, #84]	; (800a1dc <prvAddNewTaskToReadyList+0xd8>)
 800a186:	441a      	add	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4619      	mov	r1, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	f7ff f8c3 	bl	800931a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a194:	f001 fa3e 	bl	800b614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a198:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <prvAddNewTaskToReadyList+0xcc>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00e      	beq.n	800a1be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d207      	bcs.n	800a1be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	; (800a1e0 <prvAddNewTaskToReadyList+0xdc>)
 800a1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b4:	601a      	str	r2, [r3, #0]
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000dbc 	.word	0x20000dbc
 800a1cc:	200008e8 	.word	0x200008e8
 800a1d0:	20000dc8 	.word	0x20000dc8
 800a1d4:	20000dd8 	.word	0x20000dd8
 800a1d8:	20000dc4 	.word	0x20000dc4
 800a1dc:	200008ec 	.word	0x200008ec
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d017      	beq.n	800a226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1f6:	4b13      	ldr	r3, [pc, #76]	; (800a244 <vTaskDelay+0x60>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <vTaskDelay+0x30>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	60bb      	str	r3, [r7, #8]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a214:	f000 f88a 	bl	800a32c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a218:	2100      	movs	r1, #0
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fcfe 	bl	800ac1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a220:	f000 f892 	bl	800a348 <xTaskResumeAll>
 800a224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d107      	bne.n	800a23c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <vTaskDelay+0x64>)
 800a22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000de4 	.word	0x20000de4
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	; 0x28
 800a250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a25a:	463a      	mov	r2, r7
 800a25c:	1d39      	adds	r1, r7, #4
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fff8 	bl	8009258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	9202      	str	r2, [sp, #8]
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	2300      	movs	r3, #0
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	2300      	movs	r3, #0
 800a278:	460a      	mov	r2, r1
 800a27a:	4924      	ldr	r1, [pc, #144]	; (800a30c <vTaskStartScheduler+0xc0>)
 800a27c:	4824      	ldr	r0, [pc, #144]	; (800a310 <vTaskStartScheduler+0xc4>)
 800a27e:	f7ff fdf9 	bl	8009e74 <xTaskCreateStatic>
 800a282:	4603      	mov	r3, r0
 800a284:	4a23      	ldr	r2, [pc, #140]	; (800a314 <vTaskStartScheduler+0xc8>)
 800a286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a288:	4b22      	ldr	r3, [pc, #136]	; (800a314 <vTaskStartScheduler+0xc8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a290:	2301      	movs	r3, #1
 800a292:	617b      	str	r3, [r7, #20]
 800a294:	e001      	b.n	800a29a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d102      	bne.n	800a2a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2a0:	f000 fd10 	bl	800acc4 <xTimerCreateTimerTask>
 800a2a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d11b      	bne.n	800a2e4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	613b      	str	r3, [r7, #16]
}
 800a2be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2c0:	4b15      	ldr	r3, [pc, #84]	; (800a318 <vTaskStartScheduler+0xcc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3354      	adds	r3, #84	; 0x54
 800a2c6:	4a15      	ldr	r2, [pc, #84]	; (800a31c <vTaskStartScheduler+0xd0>)
 800a2c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2ca:	4b15      	ldr	r3, [pc, #84]	; (800a320 <vTaskStartScheduler+0xd4>)
 800a2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2d2:	4b14      	ldr	r3, [pc, #80]	; (800a324 <vTaskStartScheduler+0xd8>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2d8:	4b13      	ldr	r3, [pc, #76]	; (800a328 <vTaskStartScheduler+0xdc>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2de:	f001 f8c7 	bl	800b470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2e2:	e00e      	b.n	800a302 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d10a      	bne.n	800a302 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f0:	f383 8811 	msr	BASEPRI, r3
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	f3bf 8f4f 	dsb	sy
 800a2fc:	60fb      	str	r3, [r7, #12]
}
 800a2fe:	bf00      	nop
 800a300:	e7fe      	b.n	800a300 <vTaskStartScheduler+0xb4>
}
 800a302:	bf00      	nop
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	0800c290 	.word	0x0800c290
 800a310:	0800a951 	.word	0x0800a951
 800a314:	20000de0 	.word	0x20000de0
 800a318:	200008e8 	.word	0x200008e8
 800a31c:	200000e4 	.word	0x200000e4
 800a320:	20000ddc 	.word	0x20000ddc
 800a324:	20000dc8 	.word	0x20000dc8
 800a328:	20000dc0 	.word	0x20000dc0

0800a32c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <vTaskSuspendAll+0x18>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	4a03      	ldr	r2, [pc, #12]	; (800a344 <vTaskSuspendAll+0x18>)
 800a338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a33a:	bf00      	nop
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	20000de4 	.word	0x20000de4

0800a348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a352:	2300      	movs	r3, #0
 800a354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a356:	4b42      	ldr	r3, [pc, #264]	; (800a460 <xTaskResumeAll+0x118>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <xTaskResumeAll+0x2c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	603b      	str	r3, [r7, #0]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a374:	f001 f91e 	bl	800b5b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a378:	4b39      	ldr	r3, [pc, #228]	; (800a460 <xTaskResumeAll+0x118>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4a38      	ldr	r2, [pc, #224]	; (800a460 <xTaskResumeAll+0x118>)
 800a380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a382:	4b37      	ldr	r3, [pc, #220]	; (800a460 <xTaskResumeAll+0x118>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d162      	bne.n	800a450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a38a:	4b36      	ldr	r3, [pc, #216]	; (800a464 <xTaskResumeAll+0x11c>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d05e      	beq.n	800a450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a392:	e02f      	b.n	800a3f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a394:	4b34      	ldr	r3, [pc, #208]	; (800a468 <xTaskResumeAll+0x120>)
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3318      	adds	r3, #24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff f817 	bl	80093d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7ff f812 	bl	80093d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	4b2d      	ldr	r3, [pc, #180]	; (800a46c <xTaskResumeAll+0x124>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d903      	bls.n	800a3c4 <xTaskResumeAll+0x7c>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <xTaskResumeAll+0x124>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a27      	ldr	r2, [pc, #156]	; (800a470 <xTaskResumeAll+0x128>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe ff9d 	bl	800931a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4b23      	ldr	r3, [pc, #140]	; (800a474 <xTaskResumeAll+0x12c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d302      	bcc.n	800a3f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a3ee:	4b22      	ldr	r3, [pc, #136]	; (800a478 <xTaskResumeAll+0x130>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3f4:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <xTaskResumeAll+0x120>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1cb      	bne.n	800a394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a402:	f000 fb5f 	bl	800aac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a406:	4b1d      	ldr	r3, [pc, #116]	; (800a47c <xTaskResumeAll+0x134>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d010      	beq.n	800a434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a412:	f000 f847 	bl	800a4a4 <xTaskIncrementTick>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <xTaskResumeAll+0x130>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3b01      	subs	r3, #1
 800a426:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f1      	bne.n	800a412 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a42e:	4b13      	ldr	r3, [pc, #76]	; (800a47c <xTaskResumeAll+0x134>)
 800a430:	2200      	movs	r2, #0
 800a432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a434:	4b10      	ldr	r3, [pc, #64]	; (800a478 <xTaskResumeAll+0x130>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d009      	beq.n	800a450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a440:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <xTaskResumeAll+0x138>)
 800a442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a450:	f001 f8e0 	bl	800b614 <vPortExitCritical>

	return xAlreadyYielded;
 800a454:	68bb      	ldr	r3, [r7, #8]
}
 800a456:	4618      	mov	r0, r3
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	20000de4 	.word	0x20000de4
 800a464:	20000dbc 	.word	0x20000dbc
 800a468:	20000d7c 	.word	0x20000d7c
 800a46c:	20000dc4 	.word	0x20000dc4
 800a470:	200008ec 	.word	0x200008ec
 800a474:	200008e8 	.word	0x200008e8
 800a478:	20000dd0 	.word	0x20000dd0
 800a47c:	20000dcc 	.word	0x20000dcc
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a48a:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <xTaskGetTickCount+0x1c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a490:	687b      	ldr	r3, [r7, #4]
}
 800a492:	4618      	mov	r0, r3
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20000dc0 	.word	0x20000dc0

0800a4a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ae:	4b4f      	ldr	r3, [pc, #316]	; (800a5ec <xTaskIncrementTick+0x148>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f040 808f 	bne.w	800a5d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4b8:	4b4d      	ldr	r3, [pc, #308]	; (800a5f0 <xTaskIncrementTick+0x14c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4c0:	4a4b      	ldr	r2, [pc, #300]	; (800a5f0 <xTaskIncrementTick+0x14c>)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d120      	bne.n	800a50e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4cc:	4b49      	ldr	r3, [pc, #292]	; (800a5f4 <xTaskIncrementTick+0x150>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <xTaskIncrementTick+0x48>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	603b      	str	r3, [r7, #0]
}
 800a4e8:	bf00      	nop
 800a4ea:	e7fe      	b.n	800a4ea <xTaskIncrementTick+0x46>
 800a4ec:	4b41      	ldr	r3, [pc, #260]	; (800a5f4 <xTaskIncrementTick+0x150>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	60fb      	str	r3, [r7, #12]
 800a4f2:	4b41      	ldr	r3, [pc, #260]	; (800a5f8 <xTaskIncrementTick+0x154>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a3f      	ldr	r2, [pc, #252]	; (800a5f4 <xTaskIncrementTick+0x150>)
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4a3f      	ldr	r2, [pc, #252]	; (800a5f8 <xTaskIncrementTick+0x154>)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6013      	str	r3, [r2, #0]
 800a500:	4b3e      	ldr	r3, [pc, #248]	; (800a5fc <xTaskIncrementTick+0x158>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	4a3d      	ldr	r2, [pc, #244]	; (800a5fc <xTaskIncrementTick+0x158>)
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	f000 fadb 	bl	800aac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a50e:	4b3c      	ldr	r3, [pc, #240]	; (800a600 <xTaskIncrementTick+0x15c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	429a      	cmp	r2, r3
 800a516:	d349      	bcc.n	800a5ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a518:	4b36      	ldr	r3, [pc, #216]	; (800a5f4 <xTaskIncrementTick+0x150>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d104      	bne.n	800a52c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a522:	4b37      	ldr	r3, [pc, #220]	; (800a600 <xTaskIncrementTick+0x15c>)
 800a524:	f04f 32ff 	mov.w	r2, #4294967295
 800a528:	601a      	str	r2, [r3, #0]
					break;
 800a52a:	e03f      	b.n	800a5ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52c:	4b31      	ldr	r3, [pc, #196]	; (800a5f4 <xTaskIncrementTick+0x150>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d203      	bcs.n	800a54c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a544:	4a2e      	ldr	r2, [pc, #184]	; (800a600 <xTaskIncrementTick+0x15c>)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a54a:	e02f      	b.n	800a5ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	3304      	adds	r3, #4
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe ff3f 	bl	80093d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3318      	adds	r3, #24
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe ff36 	bl	80093d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56c:	4b25      	ldr	r3, [pc, #148]	; (800a604 <xTaskIncrementTick+0x160>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d903      	bls.n	800a57c <xTaskIncrementTick+0xd8>
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a578:	4a22      	ldr	r2, [pc, #136]	; (800a604 <xTaskIncrementTick+0x160>)
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4a1f      	ldr	r2, [pc, #124]	; (800a608 <xTaskIncrementTick+0x164>)
 800a58a:	441a      	add	r2, r3
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3304      	adds	r3, #4
 800a590:	4619      	mov	r1, r3
 800a592:	4610      	mov	r0, r2
 800a594:	f7fe fec1 	bl	800931a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59c:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <xTaskIncrementTick+0x168>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d3b8      	bcc.n	800a518 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5aa:	e7b5      	b.n	800a518 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5ac:	4b17      	ldr	r3, [pc, #92]	; (800a60c <xTaskIncrementTick+0x168>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b2:	4915      	ldr	r1, [pc, #84]	; (800a608 <xTaskIncrementTick+0x164>)
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	440b      	add	r3, r1
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d901      	bls.n	800a5c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a5c8:	4b11      	ldr	r3, [pc, #68]	; (800a610 <xTaskIncrementTick+0x16c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d007      	beq.n	800a5e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]
 800a5d4:	e004      	b.n	800a5e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5d6:	4b0f      	ldr	r3, [pc, #60]	; (800a614 <xTaskIncrementTick+0x170>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	4a0d      	ldr	r2, [pc, #52]	; (800a614 <xTaskIncrementTick+0x170>)
 800a5de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5e0:	697b      	ldr	r3, [r7, #20]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000de4 	.word	0x20000de4
 800a5f0:	20000dc0 	.word	0x20000dc0
 800a5f4:	20000d74 	.word	0x20000d74
 800a5f8:	20000d78 	.word	0x20000d78
 800a5fc:	20000dd4 	.word	0x20000dd4
 800a600:	20000ddc 	.word	0x20000ddc
 800a604:	20000dc4 	.word	0x20000dc4
 800a608:	200008ec 	.word	0x200008ec
 800a60c:	200008e8 	.word	0x200008e8
 800a610:	20000dd0 	.word	0x20000dd0
 800a614:	20000dcc 	.word	0x20000dcc

0800a618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a61e:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <vTaskSwitchContext+0xb0>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a626:	4b29      	ldr	r3, [pc, #164]	; (800a6cc <vTaskSwitchContext+0xb4>)
 800a628:	2201      	movs	r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a62c:	e046      	b.n	800a6bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a62e:	4b27      	ldr	r3, [pc, #156]	; (800a6cc <vTaskSwitchContext+0xb4>)
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a634:	4b26      	ldr	r3, [pc, #152]	; (800a6d0 <vTaskSwitchContext+0xb8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	e010      	b.n	800a65e <vTaskSwitchContext+0x46>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10a      	bne.n	800a658 <vTaskSwitchContext+0x40>
	__asm volatile
 800a642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a646:	f383 8811 	msr	BASEPRI, r3
 800a64a:	f3bf 8f6f 	isb	sy
 800a64e:	f3bf 8f4f 	dsb	sy
 800a652:	607b      	str	r3, [r7, #4]
}
 800a654:	bf00      	nop
 800a656:	e7fe      	b.n	800a656 <vTaskSwitchContext+0x3e>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	491d      	ldr	r1, [pc, #116]	; (800a6d4 <vTaskSwitchContext+0xbc>)
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	4613      	mov	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	440b      	add	r3, r1
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0e4      	beq.n	800a63c <vTaskSwitchContext+0x24>
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4613      	mov	r3, r2
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4a15      	ldr	r2, [pc, #84]	; (800a6d4 <vTaskSwitchContext+0xbc>)
 800a67e:	4413      	add	r3, r2
 800a680:	60bb      	str	r3, [r7, #8]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	685a      	ldr	r2, [r3, #4]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	605a      	str	r2, [r3, #4]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	685a      	ldr	r2, [r3, #4]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	3308      	adds	r3, #8
 800a694:	429a      	cmp	r2, r3
 800a696:	d104      	bne.n	800a6a2 <vTaskSwitchContext+0x8a>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	605a      	str	r2, [r3, #4]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4a0b      	ldr	r2, [pc, #44]	; (800a6d8 <vTaskSwitchContext+0xc0>)
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <vTaskSwitchContext+0xb8>)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <vTaskSwitchContext+0xc0>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3354      	adds	r3, #84	; 0x54
 800a6b8:	4a08      	ldr	r2, [pc, #32]	; (800a6dc <vTaskSwitchContext+0xc4>)
 800a6ba:	6013      	str	r3, [r2, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	20000de4 	.word	0x20000de4
 800a6cc:	20000dd0 	.word	0x20000dd0
 800a6d0:	20000dc4 	.word	0x20000dc4
 800a6d4:	200008ec 	.word	0x200008ec
 800a6d8:	200008e8 	.word	0x200008e8
 800a6dc:	200000e4 	.word	0x200000e4

0800a6e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	60fb      	str	r3, [r7, #12]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <vTaskPlaceOnEventList+0x44>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3318      	adds	r3, #24
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fe fe27 	bl	8009362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a714:	2101      	movs	r1, #1
 800a716:	6838      	ldr	r0, [r7, #0]
 800a718:	f000 fa80 	bl	800ac1c <prvAddCurrentTaskToDelayedList>
}
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	200008e8 	.word	0x200008e8

0800a728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10a      	bne.n	800a750 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	617b      	str	r3, [r7, #20]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a750:	4b0a      	ldr	r3, [pc, #40]	; (800a77c <vTaskPlaceOnEventListRestricted+0x54>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3318      	adds	r3, #24
 800a756:	4619      	mov	r1, r3
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7fe fdde 	bl	800931a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a764:	f04f 33ff 	mov.w	r3, #4294967295
 800a768:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	68b8      	ldr	r0, [r7, #8]
 800a76e:	f000 fa55 	bl	800ac1c <prvAddCurrentTaskToDelayedList>
	}
 800a772:	bf00      	nop
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	200008e8 	.word	0x200008e8

0800a780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60fb      	str	r3, [r7, #12]
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	3318      	adds	r3, #24
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fe0f 	bl	80093d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b6:	4b1e      	ldr	r3, [pc, #120]	; (800a830 <xTaskRemoveFromEventList+0xb0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d11d      	bne.n	800a7fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fe06 	bl	80093d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7cc:	4b19      	ldr	r3, [pc, #100]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d903      	bls.n	800a7dc <xTaskRemoveFromEventList+0x5c>
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	4a16      	ldr	r2, [pc, #88]	; (800a834 <xTaskRemoveFromEventList+0xb4>)
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	4413      	add	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4a13      	ldr	r2, [pc, #76]	; (800a838 <xTaskRemoveFromEventList+0xb8>)
 800a7ea:	441a      	add	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	f7fe fd91 	bl	800931a <vListInsertEnd>
 800a7f8:	e005      	b.n	800a806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4619      	mov	r1, r3
 800a800:	480e      	ldr	r0, [pc, #56]	; (800a83c <xTaskRemoveFromEventList+0xbc>)
 800a802:	f7fe fd8a 	bl	800931a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <xTaskRemoveFromEventList+0xc0>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a810:	429a      	cmp	r2, r3
 800a812:	d905      	bls.n	800a820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a814:	2301      	movs	r3, #1
 800a816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <xTaskRemoveFromEventList+0xc4>)
 800a81a:	2201      	movs	r2, #1
 800a81c:	601a      	str	r2, [r3, #0]
 800a81e:	e001      	b.n	800a824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a824:	697b      	ldr	r3, [r7, #20]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20000de4 	.word	0x20000de4
 800a834:	20000dc4 	.word	0x20000dc4
 800a838:	200008ec 	.word	0x200008ec
 800a83c:	20000d7c 	.word	0x20000d7c
 800a840:	200008e8 	.word	0x200008e8
 800a844:	20000dd0 	.word	0x20000dd0

0800a848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <vTaskInternalSetTimeOutState+0x24>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <vTaskInternalSetTimeOutState+0x28>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	605a      	str	r2, [r3, #4]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	20000dd4 	.word	0x20000dd4
 800a870:	20000dc0 	.word	0x20000dc0

0800a874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10a      	bne.n	800a89a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	613b      	str	r3, [r7, #16]
}
 800a896:	bf00      	nop
 800a898:	e7fe      	b.n	800a898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a8b6:	f000 fe7d 	bl	800b5b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8ba:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <xTaskCheckForTimeOut+0xbc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d102      	bne.n	800a8da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61fb      	str	r3, [r7, #28]
 800a8d8:	e023      	b.n	800a922 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	4b15      	ldr	r3, [pc, #84]	; (800a934 <xTaskCheckForTimeOut+0xc0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d007      	beq.n	800a8f6 <xTaskCheckForTimeOut+0x82>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d302      	bcc.n	800a8f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	61fb      	str	r3, [r7, #28]
 800a8f4:	e015      	b.n	800a922 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d20b      	bcs.n	800a918 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	1ad2      	subs	r2, r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff ff9b 	bl	800a848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
 800a916:	e004      	b.n	800a922 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a91e:	2301      	movs	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a922:	f000 fe77 	bl	800b614 <vPortExitCritical>

	return xReturn;
 800a926:	69fb      	ldr	r3, [r7, #28]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3720      	adds	r7, #32
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	20000dc0 	.word	0x20000dc0
 800a934:	20000dd4 	.word	0x20000dd4

0800a938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a938:	b480      	push	{r7}
 800a93a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a93c:	4b03      	ldr	r3, [pc, #12]	; (800a94c <vTaskMissedYield+0x14>)
 800a93e:	2201      	movs	r2, #1
 800a940:	601a      	str	r2, [r3, #0]
}
 800a942:	bf00      	nop
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000dd0 	.word	0x20000dd0

0800a950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a958:	f000 f852 	bl	800aa00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <prvIdleTask+0x28>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d9f9      	bls.n	800a958 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <prvIdleTask+0x2c>)
 800a966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96a:	601a      	str	r2, [r3, #0]
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a974:	e7f0      	b.n	800a958 <prvIdleTask+0x8>
 800a976:	bf00      	nop
 800a978:	200008ec 	.word	0x200008ec
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a986:	2300      	movs	r3, #0
 800a988:	607b      	str	r3, [r7, #4]
 800a98a:	e00c      	b.n	800a9a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4a12      	ldr	r2, [pc, #72]	; (800a9e0 <prvInitialiseTaskLists+0x60>)
 800a998:	4413      	add	r3, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7fe fc90 	bl	80092c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2b37      	cmp	r3, #55	; 0x37
 800a9aa:	d9ef      	bls.n	800a98c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9ac:	480d      	ldr	r0, [pc, #52]	; (800a9e4 <prvInitialiseTaskLists+0x64>)
 800a9ae:	f7fe fc87 	bl	80092c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9b2:	480d      	ldr	r0, [pc, #52]	; (800a9e8 <prvInitialiseTaskLists+0x68>)
 800a9b4:	f7fe fc84 	bl	80092c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9b8:	480c      	ldr	r0, [pc, #48]	; (800a9ec <prvInitialiseTaskLists+0x6c>)
 800a9ba:	f7fe fc81 	bl	80092c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9be:	480c      	ldr	r0, [pc, #48]	; (800a9f0 <prvInitialiseTaskLists+0x70>)
 800a9c0:	f7fe fc7e 	bl	80092c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9c4:	480b      	ldr	r0, [pc, #44]	; (800a9f4 <prvInitialiseTaskLists+0x74>)
 800a9c6:	f7fe fc7b 	bl	80092c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9ca:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <prvInitialiseTaskLists+0x78>)
 800a9cc:	4a05      	ldr	r2, [pc, #20]	; (800a9e4 <prvInitialiseTaskLists+0x64>)
 800a9ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9d0:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <prvInitialiseTaskLists+0x7c>)
 800a9d2:	4a05      	ldr	r2, [pc, #20]	; (800a9e8 <prvInitialiseTaskLists+0x68>)
 800a9d4:	601a      	str	r2, [r3, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	3708      	adds	r7, #8
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	200008ec 	.word	0x200008ec
 800a9e4:	20000d4c 	.word	0x20000d4c
 800a9e8:	20000d60 	.word	0x20000d60
 800a9ec:	20000d7c 	.word	0x20000d7c
 800a9f0:	20000d90 	.word	0x20000d90
 800a9f4:	20000da8 	.word	0x20000da8
 800a9f8:	20000d74 	.word	0x20000d74
 800a9fc:	20000d78 	.word	0x20000d78

0800aa00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa06:	e019      	b.n	800aa3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa08:	f000 fdd4 	bl	800b5b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0c:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <prvCheckTasksWaitingTermination+0x50>)
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe fcdb 	bl	80093d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa1e:	4b0d      	ldr	r3, [pc, #52]	; (800aa54 <prvCheckTasksWaitingTermination+0x54>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3b01      	subs	r3, #1
 800aa24:	4a0b      	ldr	r2, [pc, #44]	; (800aa54 <prvCheckTasksWaitingTermination+0x54>)
 800aa26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa28:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <prvCheckTasksWaitingTermination+0x58>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <prvCheckTasksWaitingTermination+0x58>)
 800aa30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa32:	f000 fdef 	bl	800b614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f810 	bl	800aa5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa3c:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <prvCheckTasksWaitingTermination+0x58>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e1      	bne.n	800aa08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000d90 	.word	0x20000d90
 800aa54:	20000dbc 	.word	0x20000dbc
 800aa58:	20000da4 	.word	0x20000da4

0800aa5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	3354      	adds	r3, #84	; 0x54
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f001 f919 	bl	800bca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d108      	bne.n	800aa8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 ff87 	bl	800b990 <vPortFree>
				vPortFree( pxTCB );
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 ff84 	bl	800b990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa88:	e018      	b.n	800aabc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d103      	bne.n	800aa9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 ff7b 	bl	800b990 <vPortFree>
	}
 800aa9a:	e00f      	b.n	800aabc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d00a      	beq.n	800aabc <prvDeleteTCB+0x60>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	60fb      	str	r3, [r7, #12]
}
 800aab8:	bf00      	nop
 800aaba:	e7fe      	b.n	800aaba <prvDeleteTCB+0x5e>
	}
 800aabc:	bf00      	nop
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaca:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <prvResetNextTaskUnblockTime+0x38>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d104      	bne.n	800aade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aad4:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <prvResetNextTaskUnblockTime+0x3c>)
 800aad6:	f04f 32ff 	mov.w	r2, #4294967295
 800aada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aadc:	e008      	b.n	800aaf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aade:	4b07      	ldr	r3, [pc, #28]	; (800aafc <prvResetNextTaskUnblockTime+0x38>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	68db      	ldr	r3, [r3, #12]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	4a04      	ldr	r2, [pc, #16]	; (800ab00 <prvResetNextTaskUnblockTime+0x3c>)
 800aaee:	6013      	str	r3, [r2, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20000d74 	.word	0x20000d74
 800ab00:	20000ddc 	.word	0x20000ddc

0800ab04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab0a:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <xTaskGetSchedulerState+0x34>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab12:	2301      	movs	r3, #1
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	e008      	b.n	800ab2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab18:	4b08      	ldr	r3, [pc, #32]	; (800ab3c <xTaskGetSchedulerState+0x38>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab20:	2302      	movs	r3, #2
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	e001      	b.n	800ab2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab26:	2300      	movs	r3, #0
 800ab28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab2a:	687b      	ldr	r3, [r7, #4]
	}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	20000dc8 	.word	0x20000dc8
 800ab3c:	20000de4 	.word	0x20000de4

0800ab40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d056      	beq.n	800ac04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab56:	4b2e      	ldr	r3, [pc, #184]	; (800ac10 <xTaskPriorityDisinherit+0xd0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d00a      	beq.n	800ab76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	60fb      	str	r3, [r7, #12]
}
 800ab72:	bf00      	nop
 800ab74:	e7fe      	b.n	800ab74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10a      	bne.n	800ab94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	60bb      	str	r3, [r7, #8]
}
 800ab90:	bf00      	nop
 800ab92:	e7fe      	b.n	800ab92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab98:	1e5a      	subs	r2, r3, #1
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d02c      	beq.n	800ac04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d128      	bne.n	800ac04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fc0c 	bl	80093d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <xTaskPriorityDisinherit+0xd4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d903      	bls.n	800abe4 <xTaskPriorityDisinherit+0xa4>
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe0:	4a0c      	ldr	r2, [pc, #48]	; (800ac14 <xTaskPriorityDisinherit+0xd4>)
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4613      	mov	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	4413      	add	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4a09      	ldr	r2, [pc, #36]	; (800ac18 <xTaskPriorityDisinherit+0xd8>)
 800abf2:	441a      	add	r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4619      	mov	r1, r3
 800abfa:	4610      	mov	r0, r2
 800abfc:	f7fe fb8d 	bl	800931a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac00:	2301      	movs	r3, #1
 800ac02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac04:	697b      	ldr	r3, [r7, #20]
	}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	200008e8 	.word	0x200008e8
 800ac14:	20000dc4 	.word	0x20000dc4
 800ac18:	200008ec 	.word	0x200008ec

0800ac1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac26:	4b21      	ldr	r3, [pc, #132]	; (800acac <prvAddCurrentTaskToDelayedList+0x90>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac2c:	4b20      	ldr	r3, [pc, #128]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe fbce 	bl	80093d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3e:	d10a      	bne.n	800ac56 <prvAddCurrentTaskToDelayedList+0x3a>
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac46:	4b1a      	ldr	r3, [pc, #104]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4819      	ldr	r0, [pc, #100]	; (800acb4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac50:	f7fe fb63 	bl	800931a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac54:	e026      	b.n	800aca4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d209      	bcs.n	800ac82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac6e:	4b12      	ldr	r3, [pc, #72]	; (800acb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f7fe fb71 	bl	8009362 <vListInsert>
}
 800ac80:	e010      	b.n	800aca4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac82:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f7fe fb67 	bl	8009362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac94:	4b0a      	ldr	r3, [pc, #40]	; (800acc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d202      	bcs.n	800aca4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac9e:	4a08      	ldr	r2, [pc, #32]	; (800acc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	6013      	str	r3, [r2, #0]
}
 800aca4:	bf00      	nop
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	20000dc0 	.word	0x20000dc0
 800acb0:	200008e8 	.word	0x200008e8
 800acb4:	20000da8 	.word	0x20000da8
 800acb8:	20000d78 	.word	0x20000d78
 800acbc:	20000d74 	.word	0x20000d74
 800acc0:	20000ddc 	.word	0x20000ddc

0800acc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b08a      	sub	sp, #40	; 0x28
 800acc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800acca:	2300      	movs	r3, #0
 800accc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800acce:	f000 fb07 	bl	800b2e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800acd2:	4b1c      	ldr	r3, [pc, #112]	; (800ad44 <xTimerCreateTimerTask+0x80>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d021      	beq.n	800ad1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ace2:	1d3a      	adds	r2, r7, #4
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	f107 030c 	add.w	r3, r7, #12
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe facd 	bl	800928c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	9202      	str	r2, [sp, #8]
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	2302      	movs	r3, #2
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	460a      	mov	r2, r1
 800ad04:	4910      	ldr	r1, [pc, #64]	; (800ad48 <xTimerCreateTimerTask+0x84>)
 800ad06:	4811      	ldr	r0, [pc, #68]	; (800ad4c <xTimerCreateTimerTask+0x88>)
 800ad08:	f7ff f8b4 	bl	8009e74 <xTaskCreateStatic>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	4a10      	ldr	r2, [pc, #64]	; (800ad50 <xTimerCreateTimerTask+0x8c>)
 800ad10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad12:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <xTimerCreateTimerTask+0x8c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10a      	bne.n	800ad3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	613b      	str	r3, [r7, #16]
}
 800ad36:	bf00      	nop
 800ad38:	e7fe      	b.n	800ad38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad3a:	697b      	ldr	r3, [r7, #20]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000e18 	.word	0x20000e18
 800ad48:	0800c298 	.word	0x0800c298
 800ad4c:	0800ae89 	.word	0x0800ae89
 800ad50:	20000e1c 	.word	0x20000e1c

0800ad54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08a      	sub	sp, #40	; 0x28
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	623b      	str	r3, [r7, #32]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad82:	4b1a      	ldr	r3, [pc, #104]	; (800adec <xTimerGenericCommand+0x98>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d02a      	beq.n	800ade0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b05      	cmp	r3, #5
 800ad9a:	dc18      	bgt.n	800adce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad9c:	f7ff feb2 	bl	800ab04 <xTaskGetSchedulerState>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d109      	bne.n	800adba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ada6:	4b11      	ldr	r3, [pc, #68]	; (800adec <xTimerGenericCommand+0x98>)
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	f107 0110 	add.w	r1, r7, #16
 800adae:	2300      	movs	r3, #0
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	f7fe fc77 	bl	80096a4 <xQueueGenericSend>
 800adb6:	6278      	str	r0, [r7, #36]	; 0x24
 800adb8:	e012      	b.n	800ade0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adba:	4b0c      	ldr	r3, [pc, #48]	; (800adec <xTimerGenericCommand+0x98>)
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	f107 0110 	add.w	r1, r7, #16
 800adc2:	2300      	movs	r3, #0
 800adc4:	2200      	movs	r2, #0
 800adc6:	f7fe fc6d 	bl	80096a4 <xQueueGenericSend>
 800adca:	6278      	str	r0, [r7, #36]	; 0x24
 800adcc:	e008      	b.n	800ade0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adce:	4b07      	ldr	r3, [pc, #28]	; (800adec <xTimerGenericCommand+0x98>)
 800add0:	6818      	ldr	r0, [r3, #0]
 800add2:	f107 0110 	add.w	r1, r7, #16
 800add6:	2300      	movs	r3, #0
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	f7fe fd61 	bl	80098a0 <xQueueGenericSendFromISR>
 800adde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3728      	adds	r7, #40	; 0x28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000e18 	.word	0x20000e18

0800adf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfa:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <prvProcessExpiredTimer+0x94>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	3304      	adds	r3, #4
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fe fae3 	bl	80093d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d022      	beq.n	800ae62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	699a      	ldr	r2, [r3, #24]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	18d1      	adds	r1, r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	6978      	ldr	r0, [r7, #20]
 800ae2a:	f000 f8d1 	bl	800afd0 <prvInsertTimerInActiveList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d01f      	beq.n	800ae74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae34:	2300      	movs	r3, #0
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	6978      	ldr	r0, [r7, #20]
 800ae40:	f7ff ff88 	bl	800ad54 <xTimerGenericCommand>
 800ae44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d113      	bne.n	800ae74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60fb      	str	r3, [r7, #12]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae68:	f023 0301 	bic.w	r3, r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	6978      	ldr	r0, [r7, #20]
 800ae7a:	4798      	blx	r3
}
 800ae7c:	bf00      	nop
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000e10 	.word	0x20000e10

0800ae88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4618      	mov	r0, r3
 800ae96:	f000 f857 	bl	800af48 <prvGetNextExpireTime>
 800ae9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 f803 	bl	800aeac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aea6:	f000 f8d5 	bl	800b054 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aeaa:	e7f1      	b.n	800ae90 <prvTimerTask+0x8>

0800aeac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aeb6:	f7ff fa39 	bl	800a32c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f866 	bl	800af90 <prvSampleTimeNow>
 800aec4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d130      	bne.n	800af2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <prvProcessTimerOrBlockTask+0x3c>
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d806      	bhi.n	800aee8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aeda:	f7ff fa35 	bl	800a348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff ff85 	bl	800adf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aee6:	e024      	b.n	800af32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d008      	beq.n	800af00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aeee:	4b13      	ldr	r3, [pc, #76]	; (800af3c <prvProcessTimerOrBlockTask+0x90>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <prvProcessTimerOrBlockTask+0x50>
 800aef8:	2301      	movs	r3, #1
 800aefa:	e000      	b.n	800aefe <prvProcessTimerOrBlockTask+0x52>
 800aefc:	2300      	movs	r3, #0
 800aefe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <prvProcessTimerOrBlockTask+0x94>)
 800af02:	6818      	ldr	r0, [r3, #0]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	4619      	mov	r1, r3
 800af0e:	f7fe ff7d 	bl	8009e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af12:	f7ff fa19 	bl	800a348 <xTaskResumeAll>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10a      	bne.n	800af32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <prvProcessTimerOrBlockTask+0x98>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
}
 800af2c:	e001      	b.n	800af32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af2e:	f7ff fa0b 	bl	800a348 <xTaskResumeAll>
}
 800af32:	bf00      	nop
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20000e14 	.word	0x20000e14
 800af40:	20000e18 	.word	0x20000e18
 800af44:	e000ed04 	.word	0xe000ed04

0800af48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <prvGetNextExpireTime+0x44>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <prvGetNextExpireTime+0x16>
 800af5a:	2201      	movs	r2, #1
 800af5c:	e000      	b.n	800af60 <prvGetNextExpireTime+0x18>
 800af5e:	2200      	movs	r2, #0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d105      	bne.n	800af78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af6c:	4b07      	ldr	r3, [pc, #28]	; (800af8c <prvGetNextExpireTime+0x44>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	e001      	b.n	800af7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af7c:	68fb      	ldr	r3, [r7, #12]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	20000e10 	.word	0x20000e10

0800af90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af98:	f7ff fa74 	bl	800a484 <xTaskGetTickCount>
 800af9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af9e:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <prvSampleTimeNow+0x3c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d205      	bcs.n	800afb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800afa8:	f000 f936 	bl	800b218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	e002      	b.n	800afba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800afba:	4a04      	ldr	r2, [pc, #16]	; (800afcc <prvSampleTimeNow+0x3c>)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800afc0:	68fb      	ldr	r3, [r7, #12]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000e20 	.word	0x20000e20

0800afd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d812      	bhi.n	800b01c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	1ad2      	subs	r2, r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	617b      	str	r3, [r7, #20]
 800b008:	e01b      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b00a:	4b10      	ldr	r3, [pc, #64]	; (800b04c <prvInsertTimerInActiveList+0x7c>)
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3304      	adds	r3, #4
 800b012:	4619      	mov	r1, r3
 800b014:	4610      	mov	r0, r2
 800b016:	f7fe f9a4 	bl	8009362 <vListInsert>
 800b01a:	e012      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d206      	bcs.n	800b032 <prvInsertTimerInActiveList+0x62>
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d302      	bcc.n	800b032 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b02c:	2301      	movs	r3, #1
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	e007      	b.n	800b042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b032:	4b07      	ldr	r3, [pc, #28]	; (800b050 <prvInsertTimerInActiveList+0x80>)
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7fe f990 	bl	8009362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b042:	697b      	ldr	r3, [r7, #20]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000e14 	.word	0x20000e14
 800b050:	20000e10 	.word	0x20000e10

0800b054 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08e      	sub	sp, #56	; 0x38
 800b058:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b05a:	e0ca      	b.n	800b1f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	da18      	bge.n	800b094 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b062:	1d3b      	adds	r3, r7, #4
 800b064:	3304      	adds	r3, #4
 800b066:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	61fb      	str	r3, [r7, #28]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b08a:	6850      	ldr	r0, [r2, #4]
 800b08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b08e:	6892      	ldr	r2, [r2, #8]
 800b090:	4611      	mov	r1, r2
 800b092:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	f2c0 80aa 	blt.w	800b1f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe f991 	bl	80093d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0b2:	463b      	mov	r3, r7
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff ff6b 	bl	800af90 <prvSampleTimeNow>
 800b0ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b09      	cmp	r3, #9
 800b0c0:	f200 8097 	bhi.w	800b1f2 <prvProcessReceivedCommands+0x19e>
 800b0c4:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <prvProcessReceivedCommands+0x78>)
 800b0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ca:	bf00      	nop
 800b0cc:	0800b0f5 	.word	0x0800b0f5
 800b0d0:	0800b0f5 	.word	0x0800b0f5
 800b0d4:	0800b0f5 	.word	0x0800b0f5
 800b0d8:	0800b169 	.word	0x0800b169
 800b0dc:	0800b17d 	.word	0x0800b17d
 800b0e0:	0800b1c7 	.word	0x0800b1c7
 800b0e4:	0800b0f5 	.word	0x0800b0f5
 800b0e8:	0800b0f5 	.word	0x0800b0f5
 800b0ec:	0800b169 	.word	0x0800b169
 800b0f0:	0800b17d 	.word	0x0800b17d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	18d1      	adds	r1, r2, r3
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b114:	f7ff ff5c 	bl	800afd0 <prvInsertTimerInActiveList>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d069      	beq.n	800b1f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b124:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b00      	cmp	r3, #0
 800b132:	d05e      	beq.n	800b1f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	699b      	ldr	r3, [r3, #24]
 800b13a:	441a      	add	r2, r3
 800b13c:	2300      	movs	r3, #0
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	2300      	movs	r3, #0
 800b142:	2100      	movs	r1, #0
 800b144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b146:	f7ff fe05 	bl	800ad54 <xTimerGenericCommand>
 800b14a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d14f      	bne.n	800b1f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	61bb      	str	r3, [r7, #24]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b16e:	f023 0301 	bic.w	r3, r3, #1
 800b172:	b2da      	uxtb	r2, r3
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b17a:	e03a      	b.n	800b1f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b182:	f043 0301 	orr.w	r3, r3, #1
 800b186:	b2da      	uxtb	r2, r3
 800b188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b18e:	68ba      	ldr	r2, [r7, #8]
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10a      	bne.n	800b1b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	617b      	str	r3, [r7, #20]
}
 800b1ae:	bf00      	nop
 800b1b0:	e7fe      	b.n	800b1b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	18d1      	adds	r1, r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c0:	f7ff ff06 	bl	800afd0 <prvInsertTimerInActiveList>
					break;
 800b1c4:	e015      	b.n	800b1f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b1d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1d6:	f000 fbdb 	bl	800b990 <vPortFree>
 800b1da:	e00a      	b.n	800b1f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b1ee:	e000      	b.n	800b1f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b1f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1f2:	4b08      	ldr	r3, [pc, #32]	; (800b214 <prvProcessReceivedCommands+0x1c0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	1d39      	adds	r1, r7, #4
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fbec 	bl	80099d8 <xQueueReceive>
 800b200:	4603      	mov	r3, r0
 800b202:	2b00      	cmp	r3, #0
 800b204:	f47f af2a 	bne.w	800b05c <prvProcessReceivedCommands+0x8>
	}
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	3730      	adds	r7, #48	; 0x30
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000e18 	.word	0x20000e18

0800b218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b21e:	e048      	b.n	800b2b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b220:	4b2d      	ldr	r3, [pc, #180]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b22a:	4b2b      	ldr	r3, [pc, #172]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	3304      	adds	r3, #4
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe f8cb 	bl	80093d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d02e      	beq.n	800b2b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4413      	add	r3, r2
 800b25c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	429a      	cmp	r2, r3
 800b264:	d90e      	bls.n	800b284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	68fa      	ldr	r2, [r7, #12]
 800b270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b272:	4b19      	ldr	r3, [pc, #100]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3304      	adds	r3, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	4610      	mov	r0, r2
 800b27e:	f7fe f870 	bl	8009362 <vListInsert>
 800b282:	e016      	b.n	800b2b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b284:	2300      	movs	r3, #0
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	2300      	movs	r3, #0
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	2100      	movs	r1, #0
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7ff fd60 	bl	800ad54 <xTimerGenericCommand>
 800b294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	603b      	str	r3, [r7, #0]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2b2:	4b09      	ldr	r3, [pc, #36]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1b1      	bne.n	800b220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b2bc:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b2c2:	4b06      	ldr	r3, [pc, #24]	; (800b2dc <prvSwitchTimerLists+0xc4>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a04      	ldr	r2, [pc, #16]	; (800b2d8 <prvSwitchTimerLists+0xc0>)
 800b2c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b2ca:	4a04      	ldr	r2, [pc, #16]	; (800b2dc <prvSwitchTimerLists+0xc4>)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	6013      	str	r3, [r2, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20000e10 	.word	0x20000e10
 800b2dc:	20000e14 	.word	0x20000e14

0800b2e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2e6:	f000 f965 	bl	800b5b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2ea:	4b15      	ldr	r3, [pc, #84]	; (800b340 <prvCheckForValidListAndQueue+0x60>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d120      	bne.n	800b334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2f2:	4814      	ldr	r0, [pc, #80]	; (800b344 <prvCheckForValidListAndQueue+0x64>)
 800b2f4:	f7fd ffe4 	bl	80092c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2f8:	4813      	ldr	r0, [pc, #76]	; (800b348 <prvCheckForValidListAndQueue+0x68>)
 800b2fa:	f7fd ffe1 	bl	80092c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2fe:	4b13      	ldr	r3, [pc, #76]	; (800b34c <prvCheckForValidListAndQueue+0x6c>)
 800b300:	4a10      	ldr	r2, [pc, #64]	; (800b344 <prvCheckForValidListAndQueue+0x64>)
 800b302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b304:	4b12      	ldr	r3, [pc, #72]	; (800b350 <prvCheckForValidListAndQueue+0x70>)
 800b306:	4a10      	ldr	r2, [pc, #64]	; (800b348 <prvCheckForValidListAndQueue+0x68>)
 800b308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b30a:	2300      	movs	r3, #0
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	4b11      	ldr	r3, [pc, #68]	; (800b354 <prvCheckForValidListAndQueue+0x74>)
 800b310:	4a11      	ldr	r2, [pc, #68]	; (800b358 <prvCheckForValidListAndQueue+0x78>)
 800b312:	2110      	movs	r1, #16
 800b314:	200a      	movs	r0, #10
 800b316:	f7fe f8ef 	bl	80094f8 <xQueueGenericCreateStatic>
 800b31a:	4603      	mov	r3, r0
 800b31c:	4a08      	ldr	r2, [pc, #32]	; (800b340 <prvCheckForValidListAndQueue+0x60>)
 800b31e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b320:	4b07      	ldr	r3, [pc, #28]	; (800b340 <prvCheckForValidListAndQueue+0x60>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b328:	4b05      	ldr	r3, [pc, #20]	; (800b340 <prvCheckForValidListAndQueue+0x60>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	490b      	ldr	r1, [pc, #44]	; (800b35c <prvCheckForValidListAndQueue+0x7c>)
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fe fd42 	bl	8009db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b334:	f000 f96e 	bl	800b614 <vPortExitCritical>
}
 800b338:	bf00      	nop
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000e18 	.word	0x20000e18
 800b344:	20000de8 	.word	0x20000de8
 800b348:	20000dfc 	.word	0x20000dfc
 800b34c:	20000e10 	.word	0x20000e10
 800b350:	20000e14 	.word	0x20000e14
 800b354:	20000ec4 	.word	0x20000ec4
 800b358:	20000e24 	.word	0x20000e24
 800b35c:	0800c2a0 	.word	0x0800c2a0

0800b360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3b04      	subs	r3, #4
 800b370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3b04      	subs	r3, #4
 800b37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	f023 0201 	bic.w	r2, r3, #1
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3b04      	subs	r3, #4
 800b38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b390:	4a0c      	ldr	r2, [pc, #48]	; (800b3c4 <pxPortInitialiseStack+0x64>)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3b14      	subs	r3, #20
 800b39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3b04      	subs	r3, #4
 800b3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f06f 0202 	mvn.w	r2, #2
 800b3ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3b20      	subs	r3, #32
 800b3b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	0800b3c9 	.word	0x0800b3c9

0800b3c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b3d2:	4b12      	ldr	r3, [pc, #72]	; (800b41c <prvTaskExitError+0x54>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d00a      	beq.n	800b3f2 <prvTaskExitError+0x2a>
	__asm volatile
 800b3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	60fb      	str	r3, [r7, #12]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <prvTaskExitError+0x28>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	60bb      	str	r3, [r7, #8]
}
 800b404:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b406:	bf00      	nop
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0fc      	beq.n	800b408 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b40e:	bf00      	nop
 800b410:	bf00      	nop
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	200000e0 	.word	0x200000e0

0800b420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <pxCurrentTCBConst2>)
 800b422:	6819      	ldr	r1, [r3, #0]
 800b424:	6808      	ldr	r0, [r1, #0]
 800b426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42a:	f380 8809 	msr	PSP, r0
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f04f 0000 	mov.w	r0, #0
 800b436:	f380 8811 	msr	BASEPRI, r0
 800b43a:	4770      	bx	lr
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst2>:
 800b440:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b448:	4808      	ldr	r0, [pc, #32]	; (800b46c <prvPortStartFirstTask+0x24>)
 800b44a:	6800      	ldr	r0, [r0, #0]
 800b44c:	6800      	ldr	r0, [r0, #0]
 800b44e:	f380 8808 	msr	MSP, r0
 800b452:	f04f 0000 	mov.w	r0, #0
 800b456:	f380 8814 	msr	CONTROL, r0
 800b45a:	b662      	cpsie	i
 800b45c:	b661      	cpsie	f
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	f3bf 8f6f 	isb	sy
 800b466:	df00      	svc	0
 800b468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b46a:	bf00      	nop
 800b46c:	e000ed08 	.word	0xe000ed08

0800b470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b476:	4b46      	ldr	r3, [pc, #280]	; (800b590 <xPortStartScheduler+0x120>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a46      	ldr	r2, [pc, #280]	; (800b594 <xPortStartScheduler+0x124>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d10a      	bne.n	800b496 <xPortStartScheduler+0x26>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
}
 800b492:	bf00      	nop
 800b494:	e7fe      	b.n	800b494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b496:	4b3e      	ldr	r3, [pc, #248]	; (800b590 <xPortStartScheduler+0x120>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a3f      	ldr	r2, [pc, #252]	; (800b598 <xPortStartScheduler+0x128>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d10a      	bne.n	800b4b6 <xPortStartScheduler+0x46>
	__asm volatile
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	60fb      	str	r3, [r7, #12]
}
 800b4b2:	bf00      	nop
 800b4b4:	e7fe      	b.n	800b4b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b4b6:	4b39      	ldr	r3, [pc, #228]	; (800b59c <xPortStartScheduler+0x12c>)
 800b4b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	22ff      	movs	r2, #255	; 0xff
 800b4c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4d0:	78fb      	ldrb	r3, [r7, #3]
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	4b31      	ldr	r3, [pc, #196]	; (800b5a0 <xPortStartScheduler+0x130>)
 800b4dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4de:	4b31      	ldr	r3, [pc, #196]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4e0:	2207      	movs	r2, #7
 800b4e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4e4:	e009      	b.n	800b4fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b4e6:	4b2f      	ldr	r3, [pc, #188]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	4a2d      	ldr	r2, [pc, #180]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b4ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b502:	2b80      	cmp	r3, #128	; 0x80
 800b504:	d0ef      	beq.n	800b4e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b506:	4b27      	ldr	r3, [pc, #156]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f1c3 0307 	rsb	r3, r3, #7
 800b50e:	2b04      	cmp	r3, #4
 800b510:	d00a      	beq.n	800b528 <xPortStartScheduler+0xb8>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	60bb      	str	r3, [r7, #8]
}
 800b524:	bf00      	nop
 800b526:	e7fe      	b.n	800b526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b528:	4b1e      	ldr	r3, [pc, #120]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	021b      	lsls	r3, r3, #8
 800b52e:	4a1d      	ldr	r2, [pc, #116]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b532:	4b1c      	ldr	r3, [pc, #112]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b53a:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <xPortStartScheduler+0x134>)
 800b53c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	b2da      	uxtb	r2, r3
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b546:	4b18      	ldr	r3, [pc, #96]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a17      	ldr	r2, [pc, #92]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b54c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b552:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a14      	ldr	r2, [pc, #80]	; (800b5a8 <xPortStartScheduler+0x138>)
 800b558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b55c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b55e:	f000 f8dd 	bl	800b71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b562:	4b12      	ldr	r3, [pc, #72]	; (800b5ac <xPortStartScheduler+0x13c>)
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b568:	f000 f8fc 	bl	800b764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b56c:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <xPortStartScheduler+0x140>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a0f      	ldr	r2, [pc, #60]	; (800b5b0 <xPortStartScheduler+0x140>)
 800b572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b578:	f7ff ff66 	bl	800b448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b57c:	f7ff f84c 	bl	800a618 <vTaskSwitchContext>
	prvTaskExitError();
 800b580:	f7ff ff22 	bl	800b3c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	e000ed00 	.word	0xe000ed00
 800b594:	410fc271 	.word	0x410fc271
 800b598:	410fc270 	.word	0x410fc270
 800b59c:	e000e400 	.word	0xe000e400
 800b5a0:	20000f14 	.word	0x20000f14
 800b5a4:	20000f18 	.word	0x20000f18
 800b5a8:	e000ed20 	.word	0xe000ed20
 800b5ac:	200000e0 	.word	0x200000e0
 800b5b0:	e000ef34 	.word	0xe000ef34

0800b5b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <vPortEnterCritical+0x58>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	4a0d      	ldr	r2, [pc, #52]	; (800b60c <vPortEnterCritical+0x58>)
 800b5d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <vPortEnterCritical+0x58>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10f      	bne.n	800b600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <vPortEnterCritical+0x5c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <vPortEnterCritical+0x4c>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	603b      	str	r3, [r7, #0]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <vPortEnterCritical+0x4a>
	}
}
 800b600:	bf00      	nop
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	200000e0 	.word	0x200000e0
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b61a:	4b12      	ldr	r3, [pc, #72]	; (800b664 <vPortExitCritical+0x50>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <vPortExitCritical+0x24>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	607b      	str	r3, [r7, #4]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <vPortExitCritical+0x50>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	4a09      	ldr	r2, [pc, #36]	; (800b664 <vPortExitCritical+0x50>)
 800b640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b642:	4b08      	ldr	r3, [pc, #32]	; (800b664 <vPortExitCritical+0x50>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d105      	bne.n	800b656 <vPortExitCritical+0x42>
 800b64a:	2300      	movs	r3, #0
 800b64c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	f383 8811 	msr	BASEPRI, r3
}
 800b654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	200000e0 	.word	0x200000e0
	...

0800b670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b670:	f3ef 8009 	mrs	r0, PSP
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <pxCurrentTCBConst>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	f01e 0f10 	tst.w	lr, #16
 800b680:	bf08      	it	eq
 800b682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	6010      	str	r0, [r2, #0]
 800b68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b690:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b694:	f380 8811 	msr	BASEPRI, r0
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f7fe ffba 	bl	800a618 <vTaskSwitchContext>
 800b6a4:	f04f 0000 	mov.w	r0, #0
 800b6a8:	f380 8811 	msr	BASEPRI, r0
 800b6ac:	bc09      	pop	{r0, r3}
 800b6ae:	6819      	ldr	r1, [r3, #0]
 800b6b0:	6808      	ldr	r0, [r1, #0]
 800b6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b6:	f01e 0f10 	tst.w	lr, #16
 800b6ba:	bf08      	it	eq
 800b6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b6c0:	f380 8809 	msr	PSP, r0
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w

0800b6d0 <pxCurrentTCBConst>:
 800b6d0:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop

0800b6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6f2:	f7fe fed7 	bl	800a4a4 <xTaskIncrementTick>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	; (800b718 <xPortSysTickHandler+0x40>)
 800b6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	2300      	movs	r3, #0
 800b706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f383 8811 	msr	BASEPRI, r3
}
 800b70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b710:	bf00      	nop
 800b712:	3708      	adds	r7, #8
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	e000ed04 	.word	0xe000ed04

0800b71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b720:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <vPortSetupTimerInterrupt+0x34>)
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b726:	4b0b      	ldr	r3, [pc, #44]	; (800b754 <vPortSetupTimerInterrupt+0x38>)
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b72c:	4b0a      	ldr	r3, [pc, #40]	; (800b758 <vPortSetupTimerInterrupt+0x3c>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <vPortSetupTimerInterrupt+0x40>)
 800b732:	fba2 2303 	umull	r2, r3, r2, r3
 800b736:	099b      	lsrs	r3, r3, #6
 800b738:	4a09      	ldr	r2, [pc, #36]	; (800b760 <vPortSetupTimerInterrupt+0x44>)
 800b73a:	3b01      	subs	r3, #1
 800b73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b73e:	4b04      	ldr	r3, [pc, #16]	; (800b750 <vPortSetupTimerInterrupt+0x34>)
 800b740:	2207      	movs	r2, #7
 800b742:	601a      	str	r2, [r3, #0]
}
 800b744:	bf00      	nop
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	e000e010 	.word	0xe000e010
 800b754:	e000e018 	.word	0xe000e018
 800b758:	20000000 	.word	0x20000000
 800b75c:	10624dd3 	.word	0x10624dd3
 800b760:	e000e014 	.word	0xe000e014

0800b764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b774 <vPortEnableVFP+0x10>
 800b768:	6801      	ldr	r1, [r0, #0]
 800b76a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b76e:	6001      	str	r1, [r0, #0]
 800b770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b772:	bf00      	nop
 800b774:	e000ed88 	.word	0xe000ed88

0800b778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b77e:	f3ef 8305 	mrs	r3, IPSR
 800b782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b0f      	cmp	r3, #15
 800b788:	d914      	bls.n	800b7b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b78a:	4a17      	ldr	r2, [pc, #92]	; (800b7e8 <vPortValidateInterruptPriority+0x70>)
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b794:	4b15      	ldr	r3, [pc, #84]	; (800b7ec <vPortValidateInterruptPriority+0x74>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	7afa      	ldrb	r2, [r7, #11]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d20a      	bcs.n	800b7b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	607b      	str	r3, [r7, #4]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b7b4:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <vPortValidateInterruptPriority+0x78>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <vPortValidateInterruptPriority+0x7c>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d90a      	bls.n	800b7da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	603b      	str	r3, [r7, #0]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <vPortValidateInterruptPriority+0x60>
	}
 800b7da:	bf00      	nop
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	e000e3f0 	.word	0xe000e3f0
 800b7ec:	20000f14 	.word	0x20000f14
 800b7f0:	e000ed0c 	.word	0xe000ed0c
 800b7f4:	20000f18 	.word	0x20000f18

0800b7f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b804:	f7fe fd92 	bl	800a32c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b808:	4b5b      	ldr	r3, [pc, #364]	; (800b978 <pvPortMalloc+0x180>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d101      	bne.n	800b814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b810:	f000 f920 	bl	800ba54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b814:	4b59      	ldr	r3, [pc, #356]	; (800b97c <pvPortMalloc+0x184>)
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 8093 	bne.w	800b948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01d      	beq.n	800b864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b828:	2208      	movs	r2, #8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4413      	add	r3, r2
 800b82e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f003 0307 	and.w	r3, r3, #7
 800b836:	2b00      	cmp	r3, #0
 800b838:	d014      	beq.n	800b864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f023 0307 	bic.w	r3, r3, #7
 800b840:	3308      	adds	r3, #8
 800b842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f003 0307 	and.w	r3, r3, #7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <pvPortMalloc+0x6c>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	617b      	str	r3, [r7, #20]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d06e      	beq.n	800b948 <pvPortMalloc+0x150>
 800b86a:	4b45      	ldr	r3, [pc, #276]	; (800b980 <pvPortMalloc+0x188>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d869      	bhi.n	800b948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b874:	4b43      	ldr	r3, [pc, #268]	; (800b984 <pvPortMalloc+0x18c>)
 800b876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b878:	4b42      	ldr	r3, [pc, #264]	; (800b984 <pvPortMalloc+0x18c>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b87e:	e004      	b.n	800b88a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d903      	bls.n	800b89c <pvPortMalloc+0xa4>
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f1      	bne.n	800b880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b89c:	4b36      	ldr	r3, [pc, #216]	; (800b978 <pvPortMalloc+0x180>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d050      	beq.n	800b948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	4413      	add	r3, r2
 800b8ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	6a3b      	ldr	r3, [r7, #32]
 800b8b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	2308      	movs	r3, #8
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d91f      	bls.n	800b908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00a      	beq.n	800b8f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	613b      	str	r3, [r7, #16]
}
 800b8ec:	bf00      	nop
 800b8ee:	e7fe      	b.n	800b8ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b902:	69b8      	ldr	r0, [r7, #24]
 800b904:	f000 f908 	bl	800bb18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b908:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <pvPortMalloc+0x188>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <pvPortMalloc+0x188>)
 800b914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b916:	4b1a      	ldr	r3, [pc, #104]	; (800b980 <pvPortMalloc+0x188>)
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <pvPortMalloc+0x190>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d203      	bcs.n	800b92a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b922:	4b17      	ldr	r3, [pc, #92]	; (800b980 <pvPortMalloc+0x188>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <pvPortMalloc+0x190>)
 800b928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	4b13      	ldr	r3, [pc, #76]	; (800b97c <pvPortMalloc+0x184>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	431a      	orrs	r2, r3
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b93e:	4b13      	ldr	r3, [pc, #76]	; (800b98c <pvPortMalloc+0x194>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3301      	adds	r3, #1
 800b944:	4a11      	ldr	r2, [pc, #68]	; (800b98c <pvPortMalloc+0x194>)
 800b946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b948:	f7fe fcfe 	bl	800a348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	f003 0307 	and.w	r3, r3, #7
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <pvPortMalloc+0x174>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60fb      	str	r3, [r7, #12]
}
 800b968:	bf00      	nop
 800b96a:	e7fe      	b.n	800b96a <pvPortMalloc+0x172>
	return pvReturn;
 800b96c:	69fb      	ldr	r3, [r7, #28]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3728      	adds	r7, #40	; 0x28
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20004b24 	.word	0x20004b24
 800b97c:	20004b38 	.word	0x20004b38
 800b980:	20004b28 	.word	0x20004b28
 800b984:	20004b1c 	.word	0x20004b1c
 800b988:	20004b2c 	.word	0x20004b2c
 800b98c:	20004b30 	.word	0x20004b30

0800b990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d04d      	beq.n	800ba3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b9a2:	2308      	movs	r3, #8
 800b9a4:	425b      	negs	r3, r3
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	4b24      	ldr	r3, [pc, #144]	; (800ba48 <vPortFree+0xb8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <vPortFree+0x44>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	60fb      	str	r3, [r7, #12]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00a      	beq.n	800b9f2 <vPortFree+0x62>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	60bb      	str	r3, [r7, #8]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <vPortFree+0xb8>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01e      	beq.n	800ba3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d11a      	bne.n	800ba3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	4b0e      	ldr	r3, [pc, #56]	; (800ba48 <vPortFree+0xb8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	43db      	mvns	r3, r3
 800ba12:	401a      	ands	r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba18:	f7fe fc88 	bl	800a32c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	685a      	ldr	r2, [r3, #4]
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <vPortFree+0xbc>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4413      	add	r3, r2
 800ba26:	4a09      	ldr	r2, [pc, #36]	; (800ba4c <vPortFree+0xbc>)
 800ba28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba2a:	6938      	ldr	r0, [r7, #16]
 800ba2c:	f000 f874 	bl	800bb18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <vPortFree+0xc0>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3301      	adds	r3, #1
 800ba36:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <vPortFree+0xc0>)
 800ba38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba3a:	f7fe fc85 	bl	800a348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba3e:	bf00      	nop
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20004b38 	.word	0x20004b38
 800ba4c:	20004b28 	.word	0x20004b28
 800ba50:	20004b34 	.word	0x20004b34

0800ba54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ba5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba60:	4b27      	ldr	r3, [pc, #156]	; (800bb00 <prvHeapInit+0xac>)
 800ba62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f003 0307 	and.w	r3, r3, #7
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00c      	beq.n	800ba88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3307      	adds	r3, #7
 800ba72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f023 0307 	bic.w	r3, r3, #7
 800ba7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	4a1f      	ldr	r2, [pc, #124]	; (800bb00 <prvHeapInit+0xac>)
 800ba84:	4413      	add	r3, r2
 800ba86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba8c:	4a1d      	ldr	r2, [pc, #116]	; (800bb04 <prvHeapInit+0xb0>)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba92:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <prvHeapInit+0xb0>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800baa0:	2208      	movs	r2, #8
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	1a9b      	subs	r3, r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f023 0307 	bic.w	r3, r3, #7
 800baae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4a15      	ldr	r2, [pc, #84]	; (800bb08 <prvHeapInit+0xb4>)
 800bab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bab6:	4b14      	ldr	r3, [pc, #80]	; (800bb08 <prvHeapInit+0xb4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <prvHeapInit+0xb4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	1ad2      	subs	r2, r2, r3
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <prvHeapInit+0xb4>)
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	4a0a      	ldr	r2, [pc, #40]	; (800bb0c <prvHeapInit+0xb8>)
 800bae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4a09      	ldr	r2, [pc, #36]	; (800bb10 <prvHeapInit+0xbc>)
 800baea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800baec:	4b09      	ldr	r3, [pc, #36]	; (800bb14 <prvHeapInit+0xc0>)
 800baee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baf2:	601a      	str	r2, [r3, #0]
}
 800baf4:	bf00      	nop
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	20000f1c 	.word	0x20000f1c
 800bb04:	20004b1c 	.word	0x20004b1c
 800bb08:	20004b24 	.word	0x20004b24
 800bb0c:	20004b2c 	.word	0x20004b2c
 800bb10:	20004b28 	.word	0x20004b28
 800bb14:	20004b38 	.word	0x20004b38

0800bb18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb20:	4b28      	ldr	r3, [pc, #160]	; (800bbc4 <prvInsertBlockIntoFreeList+0xac>)
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e002      	b.n	800bb2c <prvInsertBlockIntoFreeList+0x14>
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d8f7      	bhi.n	800bb26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	4413      	add	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d108      	bne.n	800bb5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	441a      	add	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	441a      	add	r2, r3
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d118      	bne.n	800bba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d00d      	beq.n	800bb96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685a      	ldr	r2, [r3, #4]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	441a      	add	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	e008      	b.n	800bba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb96:	4b0c      	ldr	r3, [pc, #48]	; (800bbc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	e003      	b.n	800bba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d002      	beq.n	800bbb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbb6:	bf00      	nop
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20004b1c 	.word	0x20004b1c
 800bbc8:	20004b24 	.word	0x20004b24

0800bbcc <slave_set_tx_rx>:
        osSemaphoreRelease(slave->idle_sem);
    }
}

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6858      	ldr	r0, [r3, #4]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	8919      	ldrh	r1, [r3, #8]
 800bbe4:	78fb      	ldrb	r3, [r7, #3]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	bf0c      	ite	eq
 800bbea:	2301      	moveq	r3, #1
 800bbec:	2300      	movne	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	f7f9 facb 	bl	800518c <HAL_GPIO_WritePin>
}
 800bbf6:	bf00      	nop
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <__errno>:
 800bc00:	4b01      	ldr	r3, [pc, #4]	; (800bc08 <__errno+0x8>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	200000e4 	.word	0x200000e4

0800bc0c <__libc_init_array>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4d0d      	ldr	r5, [pc, #52]	; (800bc44 <__libc_init_array+0x38>)
 800bc10:	4c0d      	ldr	r4, [pc, #52]	; (800bc48 <__libc_init_array+0x3c>)
 800bc12:	1b64      	subs	r4, r4, r5
 800bc14:	10a4      	asrs	r4, r4, #2
 800bc16:	2600      	movs	r6, #0
 800bc18:	42a6      	cmp	r6, r4
 800bc1a:	d109      	bne.n	800bc30 <__libc_init_array+0x24>
 800bc1c:	4d0b      	ldr	r5, [pc, #44]	; (800bc4c <__libc_init_array+0x40>)
 800bc1e:	4c0c      	ldr	r4, [pc, #48]	; (800bc50 <__libc_init_array+0x44>)
 800bc20:	f000 fb02 	bl	800c228 <_init>
 800bc24:	1b64      	subs	r4, r4, r5
 800bc26:	10a4      	asrs	r4, r4, #2
 800bc28:	2600      	movs	r6, #0
 800bc2a:	42a6      	cmp	r6, r4
 800bc2c:	d105      	bne.n	800bc3a <__libc_init_array+0x2e>
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc34:	4798      	blx	r3
 800bc36:	3601      	adds	r6, #1
 800bc38:	e7ee      	b.n	800bc18 <__libc_init_array+0xc>
 800bc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3e:	4798      	blx	r3
 800bc40:	3601      	adds	r6, #1
 800bc42:	e7f2      	b.n	800bc2a <__libc_init_array+0x1e>
 800bc44:	0800c484 	.word	0x0800c484
 800bc48:	0800c484 	.word	0x0800c484
 800bc4c:	0800c484 	.word	0x0800c484
 800bc50:	0800c488 	.word	0x0800c488

0800bc54 <__retarget_lock_acquire_recursive>:
 800bc54:	4770      	bx	lr

0800bc56 <__retarget_lock_release_recursive>:
 800bc56:	4770      	bx	lr

0800bc58 <memcpy>:
 800bc58:	440a      	add	r2, r1
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc60:	d100      	bne.n	800bc64 <memcpy+0xc>
 800bc62:	4770      	bx	lr
 800bc64:	b510      	push	{r4, lr}
 800bc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc6e:	4291      	cmp	r1, r2
 800bc70:	d1f9      	bne.n	800bc66 <memcpy+0xe>
 800bc72:	bd10      	pop	{r4, pc}

0800bc74 <memset>:
 800bc74:	4402      	add	r2, r0
 800bc76:	4603      	mov	r3, r0
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d100      	bne.n	800bc7e <memset+0xa>
 800bc7c:	4770      	bx	lr
 800bc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc82:	e7f9      	b.n	800bc78 <memset+0x4>

0800bc84 <cleanup_glue>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	460c      	mov	r4, r1
 800bc88:	6809      	ldr	r1, [r1, #0]
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	b109      	cbz	r1, 800bc92 <cleanup_glue+0xe>
 800bc8e:	f7ff fff9 	bl	800bc84 <cleanup_glue>
 800bc92:	4621      	mov	r1, r4
 800bc94:	4628      	mov	r0, r5
 800bc96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc9a:	f000 b869 	b.w	800bd70 <_free_r>
	...

0800bca0 <_reclaim_reent>:
 800bca0:	4b2c      	ldr	r3, [pc, #176]	; (800bd54 <_reclaim_reent+0xb4>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4283      	cmp	r3, r0
 800bca6:	b570      	push	{r4, r5, r6, lr}
 800bca8:	4604      	mov	r4, r0
 800bcaa:	d051      	beq.n	800bd50 <_reclaim_reent+0xb0>
 800bcac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bcae:	b143      	cbz	r3, 800bcc2 <_reclaim_reent+0x22>
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d14a      	bne.n	800bd4c <_reclaim_reent+0xac>
 800bcb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcb8:	6819      	ldr	r1, [r3, #0]
 800bcba:	b111      	cbz	r1, 800bcc2 <_reclaim_reent+0x22>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f000 f857 	bl	800bd70 <_free_r>
 800bcc2:	6961      	ldr	r1, [r4, #20]
 800bcc4:	b111      	cbz	r1, 800bccc <_reclaim_reent+0x2c>
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 f852 	bl	800bd70 <_free_r>
 800bccc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcce:	b111      	cbz	r1, 800bcd6 <_reclaim_reent+0x36>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 f84d 	bl	800bd70 <_free_r>
 800bcd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcd8:	b111      	cbz	r1, 800bce0 <_reclaim_reent+0x40>
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 f848 	bl	800bd70 <_free_r>
 800bce0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bce2:	b111      	cbz	r1, 800bcea <_reclaim_reent+0x4a>
 800bce4:	4620      	mov	r0, r4
 800bce6:	f000 f843 	bl	800bd70 <_free_r>
 800bcea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bcec:	b111      	cbz	r1, 800bcf4 <_reclaim_reent+0x54>
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 f83e 	bl	800bd70 <_free_r>
 800bcf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bcf6:	b111      	cbz	r1, 800bcfe <_reclaim_reent+0x5e>
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 f839 	bl	800bd70 <_free_r>
 800bcfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd00:	b111      	cbz	r1, 800bd08 <_reclaim_reent+0x68>
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f834 	bl	800bd70 <_free_r>
 800bd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd0a:	b111      	cbz	r1, 800bd12 <_reclaim_reent+0x72>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 f82f 	bl	800bd70 <_free_r>
 800bd12:	69a3      	ldr	r3, [r4, #24]
 800bd14:	b1e3      	cbz	r3, 800bd50 <_reclaim_reent+0xb0>
 800bd16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4798      	blx	r3
 800bd1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd1e:	b1b9      	cbz	r1, 800bd50 <_reclaim_reent+0xb0>
 800bd20:	4620      	mov	r0, r4
 800bd22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd26:	f7ff bfad 	b.w	800bc84 <cleanup_glue>
 800bd2a:	5949      	ldr	r1, [r1, r5]
 800bd2c:	b941      	cbnz	r1, 800bd40 <_reclaim_reent+0xa0>
 800bd2e:	3504      	adds	r5, #4
 800bd30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd32:	2d80      	cmp	r5, #128	; 0x80
 800bd34:	68d9      	ldr	r1, [r3, #12]
 800bd36:	d1f8      	bne.n	800bd2a <_reclaim_reent+0x8a>
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 f819 	bl	800bd70 <_free_r>
 800bd3e:	e7ba      	b.n	800bcb6 <_reclaim_reent+0x16>
 800bd40:	680e      	ldr	r6, [r1, #0]
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 f814 	bl	800bd70 <_free_r>
 800bd48:	4631      	mov	r1, r6
 800bd4a:	e7ef      	b.n	800bd2c <_reclaim_reent+0x8c>
 800bd4c:	2500      	movs	r5, #0
 800bd4e:	e7ef      	b.n	800bd30 <_reclaim_reent+0x90>
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	bf00      	nop
 800bd54:	200000e4 	.word	0x200000e4

0800bd58 <__malloc_lock>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__malloc_lock+0x8>)
 800bd5a:	f7ff bf7b 	b.w	800bc54 <__retarget_lock_acquire_recursive>
 800bd5e:	bf00      	nop
 800bd60:	20006b7c 	.word	0x20006b7c

0800bd64 <__malloc_unlock>:
 800bd64:	4801      	ldr	r0, [pc, #4]	; (800bd6c <__malloc_unlock+0x8>)
 800bd66:	f7ff bf76 	b.w	800bc56 <__retarget_lock_release_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	20006b7c 	.word	0x20006b7c

0800bd70 <_free_r>:
 800bd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd72:	2900      	cmp	r1, #0
 800bd74:	d048      	beq.n	800be08 <_free_r+0x98>
 800bd76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7a:	9001      	str	r0, [sp, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f1a1 0404 	sub.w	r4, r1, #4
 800bd82:	bfb8      	it	lt
 800bd84:	18e4      	addlt	r4, r4, r3
 800bd86:	f7ff ffe7 	bl	800bd58 <__malloc_lock>
 800bd8a:	4a20      	ldr	r2, [pc, #128]	; (800be0c <_free_r+0x9c>)
 800bd8c:	9801      	ldr	r0, [sp, #4]
 800bd8e:	6813      	ldr	r3, [r2, #0]
 800bd90:	4615      	mov	r5, r2
 800bd92:	b933      	cbnz	r3, 800bda2 <_free_r+0x32>
 800bd94:	6063      	str	r3, [r4, #4]
 800bd96:	6014      	str	r4, [r2, #0]
 800bd98:	b003      	add	sp, #12
 800bd9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd9e:	f7ff bfe1 	b.w	800bd64 <__malloc_unlock>
 800bda2:	42a3      	cmp	r3, r4
 800bda4:	d90b      	bls.n	800bdbe <_free_r+0x4e>
 800bda6:	6821      	ldr	r1, [r4, #0]
 800bda8:	1862      	adds	r2, r4, r1
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	bf04      	itt	eq
 800bdae:	681a      	ldreq	r2, [r3, #0]
 800bdb0:	685b      	ldreq	r3, [r3, #4]
 800bdb2:	6063      	str	r3, [r4, #4]
 800bdb4:	bf04      	itt	eq
 800bdb6:	1852      	addeq	r2, r2, r1
 800bdb8:	6022      	streq	r2, [r4, #0]
 800bdba:	602c      	str	r4, [r5, #0]
 800bdbc:	e7ec      	b.n	800bd98 <_free_r+0x28>
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	b10b      	cbz	r3, 800bdc8 <_free_r+0x58>
 800bdc4:	42a3      	cmp	r3, r4
 800bdc6:	d9fa      	bls.n	800bdbe <_free_r+0x4e>
 800bdc8:	6811      	ldr	r1, [r2, #0]
 800bdca:	1855      	adds	r5, r2, r1
 800bdcc:	42a5      	cmp	r5, r4
 800bdce:	d10b      	bne.n	800bde8 <_free_r+0x78>
 800bdd0:	6824      	ldr	r4, [r4, #0]
 800bdd2:	4421      	add	r1, r4
 800bdd4:	1854      	adds	r4, r2, r1
 800bdd6:	42a3      	cmp	r3, r4
 800bdd8:	6011      	str	r1, [r2, #0]
 800bdda:	d1dd      	bne.n	800bd98 <_free_r+0x28>
 800bddc:	681c      	ldr	r4, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	6053      	str	r3, [r2, #4]
 800bde2:	4421      	add	r1, r4
 800bde4:	6011      	str	r1, [r2, #0]
 800bde6:	e7d7      	b.n	800bd98 <_free_r+0x28>
 800bde8:	d902      	bls.n	800bdf0 <_free_r+0x80>
 800bdea:	230c      	movs	r3, #12
 800bdec:	6003      	str	r3, [r0, #0]
 800bdee:	e7d3      	b.n	800bd98 <_free_r+0x28>
 800bdf0:	6825      	ldr	r5, [r4, #0]
 800bdf2:	1961      	adds	r1, r4, r5
 800bdf4:	428b      	cmp	r3, r1
 800bdf6:	bf04      	itt	eq
 800bdf8:	6819      	ldreq	r1, [r3, #0]
 800bdfa:	685b      	ldreq	r3, [r3, #4]
 800bdfc:	6063      	str	r3, [r4, #4]
 800bdfe:	bf04      	itt	eq
 800be00:	1949      	addeq	r1, r1, r5
 800be02:	6021      	streq	r1, [r4, #0]
 800be04:	6054      	str	r4, [r2, #4]
 800be06:	e7c7      	b.n	800bd98 <_free_r+0x28>
 800be08:	b003      	add	sp, #12
 800be0a:	bd30      	pop	{r4, r5, pc}
 800be0c:	20004b3c 	.word	0x20004b3c

0800be10 <log>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	ed2d 8b02 	vpush	{d8}
 800be16:	ec55 4b10 	vmov	r4, r5, d0
 800be1a:	f000 f841 	bl	800bea0 <__ieee754_log>
 800be1e:	4b1e      	ldr	r3, [pc, #120]	; (800be98 <log+0x88>)
 800be20:	eeb0 8a40 	vmov.f32	s16, s0
 800be24:	eef0 8a60 	vmov.f32	s17, s1
 800be28:	f993 3000 	ldrsb.w	r3, [r3]
 800be2c:	3301      	adds	r3, #1
 800be2e:	d01a      	beq.n	800be66 <log+0x56>
 800be30:	4622      	mov	r2, r4
 800be32:	462b      	mov	r3, r5
 800be34:	4620      	mov	r0, r4
 800be36:	4629      	mov	r1, r5
 800be38:	f7f4 fe20 	bl	8000a7c <__aeabi_dcmpun>
 800be3c:	b998      	cbnz	r0, 800be66 <log+0x56>
 800be3e:	2200      	movs	r2, #0
 800be40:	2300      	movs	r3, #0
 800be42:	4620      	mov	r0, r4
 800be44:	4629      	mov	r1, r5
 800be46:	f7f4 fe0f 	bl	8000a68 <__aeabi_dcmpgt>
 800be4a:	b960      	cbnz	r0, 800be66 <log+0x56>
 800be4c:	2200      	movs	r2, #0
 800be4e:	2300      	movs	r3, #0
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fde0 	bl	8000a18 <__aeabi_dcmpeq>
 800be58:	b160      	cbz	r0, 800be74 <log+0x64>
 800be5a:	f7ff fed1 	bl	800bc00 <__errno>
 800be5e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800be90 <log+0x80>
 800be62:	2322      	movs	r3, #34	; 0x22
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	eeb0 0a48 	vmov.f32	s0, s16
 800be6a:	eef0 0a68 	vmov.f32	s1, s17
 800be6e:	ecbd 8b02 	vpop	{d8}
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	f7ff fec4 	bl	800bc00 <__errno>
 800be78:	ecbd 8b02 	vpop	{d8}
 800be7c:	2321      	movs	r3, #33	; 0x21
 800be7e:	6003      	str	r3, [r0, #0]
 800be80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be84:	4805      	ldr	r0, [pc, #20]	; (800be9c <log+0x8c>)
 800be86:	f000 b9c7 	b.w	800c218 <nan>
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w
 800be90:	00000000 	.word	0x00000000
 800be94:	fff00000 	.word	0xfff00000
 800be98:	20000148 	.word	0x20000148
 800be9c:	0800c478 	.word	0x0800c478

0800bea0 <__ieee754_log>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	ec51 0b10 	vmov	r0, r1, d0
 800bea8:	ed2d 8b04 	vpush	{d8-d9}
 800beac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800beb0:	b083      	sub	sp, #12
 800beb2:	460d      	mov	r5, r1
 800beb4:	da29      	bge.n	800bf0a <__ieee754_log+0x6a>
 800beb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beba:	4303      	orrs	r3, r0
 800bebc:	ee10 2a10 	vmov	r2, s0
 800bec0:	d10c      	bne.n	800bedc <__ieee754_log+0x3c>
 800bec2:	49cf      	ldr	r1, [pc, #828]	; (800c200 <__ieee754_log+0x360>)
 800bec4:	2200      	movs	r2, #0
 800bec6:	2300      	movs	r3, #0
 800bec8:	2000      	movs	r0, #0
 800beca:	f7f4 fc67 	bl	800079c <__aeabi_ddiv>
 800bece:	ec41 0b10 	vmov	d0, r0, r1
 800bed2:	b003      	add	sp, #12
 800bed4:	ecbd 8b04 	vpop	{d8-d9}
 800bed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bedc:	2900      	cmp	r1, #0
 800bede:	da05      	bge.n	800beec <__ieee754_log+0x4c>
 800bee0:	460b      	mov	r3, r1
 800bee2:	f7f4 f979 	bl	80001d8 <__aeabi_dsub>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	e7ee      	b.n	800beca <__ieee754_log+0x2a>
 800beec:	4bc5      	ldr	r3, [pc, #788]	; (800c204 <__ieee754_log+0x364>)
 800beee:	2200      	movs	r2, #0
 800bef0:	f7f4 fb2a 	bl	8000548 <__aeabi_dmul>
 800bef4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800bef8:	460d      	mov	r5, r1
 800befa:	4ac3      	ldr	r2, [pc, #780]	; (800c208 <__ieee754_log+0x368>)
 800befc:	4295      	cmp	r5, r2
 800befe:	dd06      	ble.n	800bf0e <__ieee754_log+0x6e>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	f7f4 f96a 	bl	80001dc <__adddf3>
 800bf08:	e7e1      	b.n	800bece <__ieee754_log+0x2e>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e7f5      	b.n	800befa <__ieee754_log+0x5a>
 800bf0e:	152c      	asrs	r4, r5, #20
 800bf10:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bf14:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bf18:	441c      	add	r4, r3
 800bf1a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800bf1e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800bf22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf26:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800bf2a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800bf2e:	ea42 0105 	orr.w	r1, r2, r5
 800bf32:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800bf36:	2200      	movs	r2, #0
 800bf38:	4bb4      	ldr	r3, [pc, #720]	; (800c20c <__ieee754_log+0x36c>)
 800bf3a:	f7f4 f94d 	bl	80001d8 <__aeabi_dsub>
 800bf3e:	1cab      	adds	r3, r5, #2
 800bf40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	4682      	mov	sl, r0
 800bf48:	468b      	mov	fp, r1
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	dc53      	bgt.n	800bff8 <__ieee754_log+0x158>
 800bf50:	2300      	movs	r3, #0
 800bf52:	f7f4 fd61 	bl	8000a18 <__aeabi_dcmpeq>
 800bf56:	b1d0      	cbz	r0, 800bf8e <__ieee754_log+0xee>
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	f000 8122 	beq.w	800c1a2 <__ieee754_log+0x302>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f7f4 fa88 	bl	8000474 <__aeabi_i2d>
 800bf64:	a390      	add	r3, pc, #576	; (adr r3, 800c1a8 <__ieee754_log+0x308>)
 800bf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	460f      	mov	r7, r1
 800bf6e:	f7f4 faeb 	bl	8000548 <__aeabi_dmul>
 800bf72:	a38f      	add	r3, pc, #572	; (adr r3, 800c1b0 <__ieee754_log+0x310>)
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	4604      	mov	r4, r0
 800bf7a:	460d      	mov	r5, r1
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f7f4 fae2 	bl	8000548 <__aeabi_dmul>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	e7ba      	b.n	800bf04 <__ieee754_log+0x64>
 800bf8e:	a38a      	add	r3, pc, #552	; (adr r3, 800c1b8 <__ieee754_log+0x318>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	4650      	mov	r0, sl
 800bf96:	4659      	mov	r1, fp
 800bf98:	f7f4 fad6 	bl	8000548 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	499b      	ldr	r1, [pc, #620]	; (800c210 <__ieee754_log+0x370>)
 800bfa4:	f7f4 f918 	bl	80001d8 <__aeabi_dsub>
 800bfa8:	4652      	mov	r2, sl
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	465b      	mov	r3, fp
 800bfb0:	4650      	mov	r0, sl
 800bfb2:	4659      	mov	r1, fp
 800bfb4:	f7f4 fac8 	bl	8000548 <__aeabi_dmul>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	f7f4 fac2 	bl	8000548 <__aeabi_dmul>
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	460f      	mov	r7, r1
 800bfc8:	b914      	cbnz	r4, 800bfd0 <__ieee754_log+0x130>
 800bfca:	4632      	mov	r2, r6
 800bfcc:	463b      	mov	r3, r7
 800bfce:	e0a2      	b.n	800c116 <__ieee754_log+0x276>
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f7f4 fa4f 	bl	8000474 <__aeabi_i2d>
 800bfd6:	a374      	add	r3, pc, #464	; (adr r3, 800c1a8 <__ieee754_log+0x308>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	4680      	mov	r8, r0
 800bfde:	4689      	mov	r9, r1
 800bfe0:	f7f4 fab2 	bl	8000548 <__aeabi_dmul>
 800bfe4:	a372      	add	r3, pc, #456	; (adr r3, 800c1b0 <__ieee754_log+0x310>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	4640      	mov	r0, r8
 800bff0:	4649      	mov	r1, r9
 800bff2:	f7f4 faa9 	bl	8000548 <__aeabi_dmul>
 800bff6:	e0a7      	b.n	800c148 <__ieee754_log+0x2a8>
 800bff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bffc:	f7f4 f8ee 	bl	80001dc <__adddf3>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4650      	mov	r0, sl
 800c006:	4659      	mov	r1, fp
 800c008:	f7f4 fbc8 	bl	800079c <__aeabi_ddiv>
 800c00c:	ec41 0b18 	vmov	d8, r0, r1
 800c010:	4620      	mov	r0, r4
 800c012:	f7f4 fa2f 	bl	8000474 <__aeabi_i2d>
 800c016:	ec53 2b18 	vmov	r2, r3, d8
 800c01a:	ec41 0b19 	vmov	d9, r0, r1
 800c01e:	ec51 0b18 	vmov	r0, r1, d8
 800c022:	f7f4 fa91 	bl	8000548 <__aeabi_dmul>
 800c026:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c02a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4680      	mov	r8, r0
 800c036:	4689      	mov	r9, r1
 800c038:	f7f4 fa86 	bl	8000548 <__aeabi_dmul>
 800c03c:	a360      	add	r3, pc, #384	; (adr r3, 800c1c0 <__ieee754_log+0x320>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	f7f4 fa7f 	bl	8000548 <__aeabi_dmul>
 800c04a:	a35f      	add	r3, pc, #380	; (adr r3, 800c1c8 <__ieee754_log+0x328>)
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 f8c4 	bl	80001dc <__adddf3>
 800c054:	4632      	mov	r2, r6
 800c056:	463b      	mov	r3, r7
 800c058:	f7f4 fa76 	bl	8000548 <__aeabi_dmul>
 800c05c:	a35c      	add	r3, pc, #368	; (adr r3, 800c1d0 <__ieee754_log+0x330>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 f8bb 	bl	80001dc <__adddf3>
 800c066:	4632      	mov	r2, r6
 800c068:	463b      	mov	r3, r7
 800c06a:	f7f4 fa6d 	bl	8000548 <__aeabi_dmul>
 800c06e:	a35a      	add	r3, pc, #360	; (adr r3, 800c1d8 <__ieee754_log+0x338>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f7f4 f8b2 	bl	80001dc <__adddf3>
 800c078:	4642      	mov	r2, r8
 800c07a:	464b      	mov	r3, r9
 800c07c:	f7f4 fa64 	bl	8000548 <__aeabi_dmul>
 800c080:	a357      	add	r3, pc, #348	; (adr r3, 800c1e0 <__ieee754_log+0x340>)
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	4680      	mov	r8, r0
 800c088:	4689      	mov	r9, r1
 800c08a:	4630      	mov	r0, r6
 800c08c:	4639      	mov	r1, r7
 800c08e:	f7f4 fa5b 	bl	8000548 <__aeabi_dmul>
 800c092:	a355      	add	r3, pc, #340	; (adr r3, 800c1e8 <__ieee754_log+0x348>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 f8a0 	bl	80001dc <__adddf3>
 800c09c:	4632      	mov	r2, r6
 800c09e:	463b      	mov	r3, r7
 800c0a0:	f7f4 fa52 	bl	8000548 <__aeabi_dmul>
 800c0a4:	a352      	add	r3, pc, #328	; (adr r3, 800c1f0 <__ieee754_log+0x350>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 f897 	bl	80001dc <__adddf3>
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463b      	mov	r3, r7
 800c0b2:	f7f4 fa49 	bl	8000548 <__aeabi_dmul>
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	4640      	mov	r0, r8
 800c0be:	f7f4 f88d 	bl	80001dc <__adddf3>
 800c0c2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	3551      	adds	r5, #81	; 0x51
 800c0ca:	431d      	orrs	r5, r3
 800c0cc:	2d00      	cmp	r5, #0
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	4689      	mov	r9, r1
 800c0d2:	dd48      	ble.n	800c166 <__ieee754_log+0x2c6>
 800c0d4:	4b4e      	ldr	r3, [pc, #312]	; (800c210 <__ieee754_log+0x370>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4650      	mov	r0, sl
 800c0da:	4659      	mov	r1, fp
 800c0dc:	f7f4 fa34 	bl	8000548 <__aeabi_dmul>
 800c0e0:	4652      	mov	r2, sl
 800c0e2:	465b      	mov	r3, fp
 800c0e4:	f7f4 fa30 	bl	8000548 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4649      	mov	r1, r9
 800c0f4:	f7f4 f872 	bl	80001dc <__adddf3>
 800c0f8:	ec53 2b18 	vmov	r2, r3, d8
 800c0fc:	f7f4 fa24 	bl	8000548 <__aeabi_dmul>
 800c100:	4680      	mov	r8, r0
 800c102:	4689      	mov	r9, r1
 800c104:	b964      	cbnz	r4, 800c120 <__ieee754_log+0x280>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	4630      	mov	r0, r6
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 f863 	bl	80001d8 <__aeabi_dsub>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4650      	mov	r0, sl
 800c118:	4659      	mov	r1, fp
 800c11a:	f7f4 f85d 	bl	80001d8 <__aeabi_dsub>
 800c11e:	e6d6      	b.n	800bece <__ieee754_log+0x2e>
 800c120:	a321      	add	r3, pc, #132	; (adr r3, 800c1a8 <__ieee754_log+0x308>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	ec51 0b19 	vmov	r0, r1, d9
 800c12a:	f7f4 fa0d 	bl	8000548 <__aeabi_dmul>
 800c12e:	a320      	add	r3, pc, #128	; (adr r3, 800c1b0 <__ieee754_log+0x310>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	4604      	mov	r4, r0
 800c136:	460d      	mov	r5, r1
 800c138:	ec51 0b19 	vmov	r0, r1, d9
 800c13c:	f7f4 fa04 	bl	8000548 <__aeabi_dmul>
 800c140:	4642      	mov	r2, r8
 800c142:	464b      	mov	r3, r9
 800c144:	f7f4 f84a 	bl	80001dc <__adddf3>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4630      	mov	r0, r6
 800c14e:	4639      	mov	r1, r7
 800c150:	f7f4 f842 	bl	80001d8 <__aeabi_dsub>
 800c154:	4652      	mov	r2, sl
 800c156:	465b      	mov	r3, fp
 800c158:	f7f4 f83e 	bl	80001d8 <__aeabi_dsub>
 800c15c:	4602      	mov	r2, r0
 800c15e:	460b      	mov	r3, r1
 800c160:	4620      	mov	r0, r4
 800c162:	4629      	mov	r1, r5
 800c164:	e7d9      	b.n	800c11a <__ieee754_log+0x27a>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4650      	mov	r0, sl
 800c16c:	4659      	mov	r1, fp
 800c16e:	f7f4 f833 	bl	80001d8 <__aeabi_dsub>
 800c172:	ec53 2b18 	vmov	r2, r3, d8
 800c176:	f7f4 f9e7 	bl	8000548 <__aeabi_dmul>
 800c17a:	4606      	mov	r6, r0
 800c17c:	460f      	mov	r7, r1
 800c17e:	2c00      	cmp	r4, #0
 800c180:	f43f af23 	beq.w	800bfca <__ieee754_log+0x12a>
 800c184:	a308      	add	r3, pc, #32	; (adr r3, 800c1a8 <__ieee754_log+0x308>)
 800c186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18a:	ec51 0b19 	vmov	r0, r1, d9
 800c18e:	f7f4 f9db 	bl	8000548 <__aeabi_dmul>
 800c192:	a307      	add	r3, pc, #28	; (adr r3, 800c1b0 <__ieee754_log+0x310>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	ec51 0b19 	vmov	r0, r1, d9
 800c1a0:	e727      	b.n	800bff2 <__ieee754_log+0x152>
 800c1a2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c1f8 <__ieee754_log+0x358>
 800c1a6:	e694      	b.n	800bed2 <__ieee754_log+0x32>
 800c1a8:	fee00000 	.word	0xfee00000
 800c1ac:	3fe62e42 	.word	0x3fe62e42
 800c1b0:	35793c76 	.word	0x35793c76
 800c1b4:	3dea39ef 	.word	0x3dea39ef
 800c1b8:	55555555 	.word	0x55555555
 800c1bc:	3fd55555 	.word	0x3fd55555
 800c1c0:	df3e5244 	.word	0xdf3e5244
 800c1c4:	3fc2f112 	.word	0x3fc2f112
 800c1c8:	96cb03de 	.word	0x96cb03de
 800c1cc:	3fc74664 	.word	0x3fc74664
 800c1d0:	94229359 	.word	0x94229359
 800c1d4:	3fd24924 	.word	0x3fd24924
 800c1d8:	55555593 	.word	0x55555593
 800c1dc:	3fe55555 	.word	0x3fe55555
 800c1e0:	d078c69f 	.word	0xd078c69f
 800c1e4:	3fc39a09 	.word	0x3fc39a09
 800c1e8:	1d8e78af 	.word	0x1d8e78af
 800c1ec:	3fcc71c5 	.word	0x3fcc71c5
 800c1f0:	9997fa04 	.word	0x9997fa04
 800c1f4:	3fd99999 	.word	0x3fd99999
	...
 800c200:	c3500000 	.word	0xc3500000
 800c204:	43500000 	.word	0x43500000
 800c208:	7fefffff 	.word	0x7fefffff
 800c20c:	3ff00000 	.word	0x3ff00000
 800c210:	3fe00000 	.word	0x3fe00000
 800c214:	00000000 	.word	0x00000000

0800c218 <nan>:
 800c218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c220 <nan+0x8>
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop
 800c220:	00000000 	.word	0x00000000
 800c224:	7ff80000 	.word	0x7ff80000

0800c228 <_init>:
 800c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22a:	bf00      	nop
 800c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22e:	bc08      	pop	{r3}
 800c230:	469e      	mov	lr, r3
 800c232:	4770      	bx	lr

0800c234 <_fini>:
 800c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c236:	bf00      	nop
 800c238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23a:	bc08      	pop	{r3}
 800c23c:	469e      	mov	lr, r3
 800c23e:	4770      	bx	lr
