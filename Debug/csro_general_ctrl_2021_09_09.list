
csro_general_ctrl_2021_09_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e8  08018d44  08018d44  00028d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c02c  0801c02c  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801c02c  0801c02c  0002c02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c034  0801c034  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c034  0801c034  0002c034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c038  0801c038  0002c038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801c03c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000cdd8  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2000ce5c  2000ce5c  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051d56  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000966d  00000000  00000000  00081e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002910  00000000  00000000  0008b478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002738  00000000  00000000  0008dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035482  00000000  00000000  000904c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000415a6  00000000  00000000  000c5942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010290e  00000000  00000000  00106ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002097f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b1b4  00000000  00000000  0020984c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018d2c 	.word	0x08018d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08018d2c 	.word	0x08018d2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057a:	4b75      	ldr	r3, [pc, #468]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800057c:	4a75      	ldr	r2, [pc, #468]	; (8000754 <MX_ADC1_Init+0x1ec>)
 800057e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000580:	4b73      	ldr	r3, [pc, #460]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000582:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000588:	4b71      	ldr	r3, [pc, #452]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800058e:	4b70      	ldr	r3, [pc, #448]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000594:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000596:	2201      	movs	r2, #1
 8000598:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b6b      	ldr	r3, [pc, #428]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b69      	ldr	r3, [pc, #420]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005aa:	4a6b      	ldr	r2, [pc, #428]	; (8000758 <MX_ADC1_Init+0x1f0>)
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b68      	ldr	r3, [pc, #416]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 80005b4:	4b66      	ldr	r3, [pc, #408]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005b6:	220d      	movs	r2, #13
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ba:	4b65      	ldr	r3, [pc, #404]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b63      	ldr	r3, [pc, #396]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005c8:	4861      	ldr	r0, [pc, #388]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005ca:	f001 fe37 	bl	800223c <HAL_ADC_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005d4:	f000 fd80 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005d8:	230d      	movs	r3, #13
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80005e0:	2306      	movs	r3, #6
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4859      	ldr	r0, [pc, #356]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80005ea:	f001 fe6b 	bl	80022c4 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005f4:	f000 fd70 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005f8:	230c      	movs	r3, #12
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4852      	ldr	r0, [pc, #328]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000606:	f001 fe5d 	bl	80022c4 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000610:	f000 fd62 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000614:	230a      	movs	r3, #10
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	484b      	ldr	r0, [pc, #300]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000622:	f001 fe4f 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800062c:	f000 fd54 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000630:	2309      	movs	r3, #9
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4844      	ldr	r0, [pc, #272]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800063e:	f001 fe41 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000648:	f000 fd46 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000650:	2305      	movs	r3, #5
 8000652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	483d      	ldr	r0, [pc, #244]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800065a:	f001 fe33 	bl	80022c4 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000664:	f000 fd38 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000668:	2303      	movs	r3, #3
 800066a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800066c:	2306      	movs	r3, #6
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4836      	ldr	r0, [pc, #216]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000676:	f001 fe25 	bl	80022c4 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000680:	f000 fd2a 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000684:	2304      	movs	r3, #4
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	482f      	ldr	r0, [pc, #188]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000692:	f001 fe17 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800069c:	f000 fd1c 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006a0:	2305      	movs	r3, #5
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	463b      	mov	r3, r7
 80006aa:	4619      	mov	r1, r3
 80006ac:	4828      	ldr	r0, [pc, #160]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006ae:	f001 fe09 	bl	80022c4 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80006b8:	f000 fd0e 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006bc:	2306      	movs	r3, #6
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80006c0:	2309      	movs	r3, #9
 80006c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006ca:	f001 fdfb 	bl	80022c4 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80006d4:	f000 fd00 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d8:	2308      	movs	r3, #8
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80006dc:	230a      	movs	r3, #10
 80006de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <MX_ADC1_Init+0x1e8>)
 80006e6:	f001 fded 	bl	80022c4 <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80006f0:	f000 fcf2 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006f4:	2310      	movs	r3, #16
 80006f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80006f8:	230b      	movs	r3, #11
 80006fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4813      	ldr	r0, [pc, #76]	; (8000750 <MX_ADC1_Init+0x1e8>)
 8000702:	f001 fddf 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800070c:	f000 fce4 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000710:	2311      	movs	r3, #17
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8000714:	230c      	movs	r3, #12
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800071e:	f001 fdd1 	bl	80022c4 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8000728:	f000 fcd6 	bl	80010d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800072c:	2312      	movs	r3, #18
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8000730:	230d      	movs	r3, #13
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC1_Init+0x1e8>)
 800073a:	f001 fdc3 	bl	80022c4 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8000744:	f000 fcc8 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20004c20 	.word	0x20004c20
 8000754:	40012000 	.word	0x40012000
 8000758:	0f000001 	.word	0x0f000001

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a49      	ldr	r2, [pc, #292]	; (80008a0 <HAL_ADC_MspInit+0x144>)
 800077a:	4293      	cmp	r3, r2
 800077c:	f040 808c 	bne.w	8000898 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	4b47      	ldr	r3, [pc, #284]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	4a46      	ldr	r2, [pc, #280]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078e:	6453      	str	r3, [r2, #68]	; 0x44
 8000790:	4b44      	ldr	r3, [pc, #272]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 8000792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	4a3f      	ldr	r2, [pc, #252]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	6313      	str	r3, [r2, #48]	; 0x30
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a38      	ldr	r2, [pc, #224]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <HAL_ADC_MspInit+0x148>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = DP_VF3_Pin|DP_VF2_Pin|DP_VF1_Pin;
 80007f0:	230d      	movs	r3, #13
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4829      	ldr	r0, [pc, #164]	; (80008a8 <HAL_ADC_MspInit+0x14c>)
 8000804:	f003 fd80 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF1_Pin|NTC_VF2_Pin|NTC_VF3_Pin|NTC_VF4_Pin
 8000808:	2379      	movs	r3, #121	; 0x79
 800080a:	61fb      	str	r3, [r7, #28]
                          |NTC_VF5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4824      	ldr	r0, [pc, #144]	; (80008ac <HAL_ADC_MspInit+0x150>)
 800081c:	f003 fd74 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF6_Pin|VALVE_FEEDBACK_Pin;
 8000820:	2303      	movs	r3, #3
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	481f      	ldr	r0, [pc, #124]	; (80008b0 <HAL_ADC_MspInit+0x154>)
 8000834:	f003 fd68 	bl	8004308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_MspInit+0x15c>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800085a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800086a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 800087e:	f002 f821 	bl	80028c4 <HAL_DMA_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8000888:	f000 fc26 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_ADC_MspInit+0x158>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	; 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40012000 	.word	0x40012000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40020400 	.word	0x40020400
 80008b4:	20004c68 	.word	0x20004c68
 80008b8:	40026410 	.word	0x40026410

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <MX_DMA_Init+0xd8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a32      	ldr	r2, [pc, #200]	; (8000994 <MX_DMA_Init+0xd8>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b30      	ldr	r3, [pc, #192]	; (8000994 <MX_DMA_Init+0xd8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <MX_DMA_Init+0xd8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <MX_DMA_Init+0xd8>)
 80008e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b29      	ldr	r3, [pc, #164]	; (8000994 <MX_DMA_Init+0xd8>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	200c      	movs	r0, #12
 8000900:	f001 ffb6 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000904:	200c      	movs	r0, #12
 8000906:	f001 ffcf 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2105      	movs	r1, #5
 800090e:	200e      	movs	r0, #14
 8000910:	f001 ffae 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000914:	200e      	movs	r0, #14
 8000916:	f001 ffc7 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	2010      	movs	r0, #16
 8000920:	f001 ffa6 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000924:	2010      	movs	r0, #16
 8000926:	f001 ffbf 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2011      	movs	r0, #17
 8000930:	f001 ff9e 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000934:	2011      	movs	r0, #17
 8000936:	f001 ffb7 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f001 ff96 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f001 ffaf 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	2039      	movs	r0, #57	; 0x39
 8000950:	f001 ff8e 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000954:	2039      	movs	r0, #57	; 0x39
 8000956:	f001 ffa7 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2105      	movs	r1, #5
 800095e:	203a      	movs	r0, #58	; 0x3a
 8000960:	f001 ff86 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000964:	203a      	movs	r0, #58	; 0x3a
 8000966:	f001 ff9f 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2105      	movs	r1, #5
 800096e:	2045      	movs	r0, #69	; 0x45
 8000970:	f001 ff7e 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000974:	2045      	movs	r0, #69	; 0x45
 8000976:	f001 ff97 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	2046      	movs	r0, #70	; 0x46
 8000980:	f001 ff76 	bl	8002870 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000984:	2046      	movs	r0, #70	; 0x46
 8000986:	f001 ff8f 	bl	80028a8 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue01_attributes);
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <MX_FREERTOS_Init+0xa8>)
 800099e:	2102      	movs	r1, #2
 80009a0:	2010      	movs	r0, #16
 80009a2:	f007 fc35 	bl	8008210 <osMessageQueueNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <MX_FREERTOS_Init+0xac>)
 80009aa:	6013      	str	r3, [r2, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue02_attributes);
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <MX_FREERTOS_Init+0xb0>)
 80009ae:	2102      	movs	r1, #2
 80009b0:	2010      	movs	r0, #16
 80009b2:	f007 fc2d 	bl	8008210 <osMessageQueueNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <MX_FREERTOS_Init+0xb4>)
 80009ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80009bc:	4a24      	ldr	r2, [pc, #144]	; (8000a50 <MX_FREERTOS_Init+0xb8>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <MX_FREERTOS_Init+0xbc>)
 80009c2:	f007 f94a 	bl	8007c5a <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a23      	ldr	r2, [pc, #140]	; (8000a58 <MX_FREERTOS_Init+0xc0>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_FREERTOS_Init+0xc4>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4823      	ldr	r0, [pc, #140]	; (8000a60 <MX_FREERTOS_Init+0xc8>)
 80009d2:	f007 f942 	bl	8007c5a <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <MX_FREERTOS_Init+0xcc>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80009dc:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <MX_FREERTOS_Init+0xd0>)
 80009de:	2100      	movs	r1, #0
 80009e0:	4822      	ldr	r0, [pc, #136]	; (8000a6c <MX_FREERTOS_Init+0xd4>)
 80009e2:	f007 f93a 	bl	8007c5a <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_FREERTOS_Init+0xd8>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <MX_FREERTOS_Init+0xdc>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4821      	ldr	r0, [pc, #132]	; (8000a78 <MX_FREERTOS_Init+0xe0>)
 80009f2:	f007 f932 	bl	8007c5a <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <MX_FREERTOS_Init+0xe4>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 80009fc:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <MX_FREERTOS_Init+0xe8>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <MX_FREERTOS_Init+0xec>)
 8000a02:	f007 f92a 	bl	8007c5a <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_FREERTOS_Init+0xf0>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of Task06 */
  Task06Handle = osThreadNew(StartTask06, NULL, &Task06_attributes);
 8000a0c:	4a1f      	ldr	r2, [pc, #124]	; (8000a8c <MX_FREERTOS_Init+0xf4>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	481f      	ldr	r0, [pc, #124]	; (8000a90 <MX_FREERTOS_Init+0xf8>)
 8000a12:	f007 f922 	bl	8007c5a <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <MX_FREERTOS_Init+0xfc>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of Task07 */
  Task07Handle = osThreadNew(StartTask07, NULL, &Task07_attributes);
 8000a1c:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_FREERTOS_Init+0x100>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <MX_FREERTOS_Init+0x104>)
 8000a22:	f007 f91a 	bl	8007c5a <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <MX_FREERTOS_Init+0x108>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* creation of Task08 */
  Task08Handle = osThreadNew(StartTask08, NULL, &Task08_attributes);
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <MX_FREERTOS_Init+0x10c>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <MX_FREERTOS_Init+0x110>)
 8000a32:	f007 f912 	bl	8007c5a <osThreadNew>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_FREERTOS_Init+0x114>)
 8000a3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	0801bd58 	.word	0x0801bd58
 8000a44:	20004ccc 	.word	0x20004ccc
 8000a48:	0801bd70 	.word	0x0801bd70
 8000a4c:	20004cec 	.word	0x20004cec
 8000a50:	0801bc38 	.word	0x0801bc38
 8000a54:	08000ab1 	.word	0x08000ab1
 8000a58:	20004cdc 	.word	0x20004cdc
 8000a5c:	0801bc5c 	.word	0x0801bc5c
 8000a60:	08000ac5 	.word	0x08000ac5
 8000a64:	20004cc8 	.word	0x20004cc8
 8000a68:	0801bc80 	.word	0x0801bc80
 8000a6c:	08000ad5 	.word	0x08000ad5
 8000a70:	20004ce4 	.word	0x20004ce4
 8000a74:	0801bca4 	.word	0x0801bca4
 8000a78:	08000ae5 	.word	0x08000ae5
 8000a7c:	20004cd0 	.word	0x20004cd0
 8000a80:	0801bcc8 	.word	0x0801bcc8
 8000a84:	08000af5 	.word	0x08000af5
 8000a88:	20004ce8 	.word	0x20004ce8
 8000a8c:	0801bcec 	.word	0x0801bcec
 8000a90:	08000b05 	.word	0x08000b05
 8000a94:	20004ce0 	.word	0x20004ce0
 8000a98:	0801bd10 	.word	0x0801bd10
 8000a9c:	08000b15 	.word	0x08000b15
 8000aa0:	20004cd4 	.word	0x20004cd4
 8000aa4:	0801bd34 	.word	0x0801bd34
 8000aa8:	08000b25 	.word	0x08000b25
 8000aac:	20004cd8 	.word	0x20004cd8

08000ab0 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ab8:	f006 fbac 	bl	8007214 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f007 f95e 	bl	8007d7e <osDelay>
 8000ac2:	e7fb      	b.n	8000abc <StartTask01+0xc>

08000ac4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000acc:	2001      	movs	r0, #1
 8000ace:	f007 f956 	bl	8007d7e <osDelay>
 8000ad2:	e7fb      	b.n	8000acc <StartTask02+0x8>

08000ad4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f007 f94e 	bl	8007d7e <osDelay>
 8000ae2:	e7fb      	b.n	8000adc <StartTask03+0x8>

08000ae4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f007 f946 	bl	8007d7e <osDelay>
 8000af2:	e7fb      	b.n	8000aec <StartTask04+0x8>

08000af4 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f007 f93e 	bl	8007d7e <osDelay>
 8000b02:	e7fb      	b.n	8000afc <StartTask05+0x8>

08000b04 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f007 f936 	bl	8007d7e <osDelay>
 8000b12:	e7fb      	b.n	8000b0c <StartTask06+0x8>

08000b14 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f007 f92e 	bl	8007d7e <osDelay>
 8000b22:	e7fb      	b.n	8000b1c <StartTask07+0x8>

08000b24 <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f007 f926 	bl	8007d7e <osDelay>
 8000b32:	e7fb      	b.n	8000b2c <StartTask08+0x8>

08000b34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b8c      	ldr	r3, [pc, #560]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a8b      	ldr	r2, [pc, #556]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b89      	ldr	r3, [pc, #548]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b85      	ldr	r3, [pc, #532]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a84      	ldr	r2, [pc, #528]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b82      	ldr	r3, [pc, #520]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b7e      	ldr	r3, [pc, #504]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a7d      	ldr	r2, [pc, #500]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b7b      	ldr	r3, [pc, #492]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b77      	ldr	r3, [pc, #476]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a76      	ldr	r2, [pc, #472]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b70      	ldr	r3, [pc, #448]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a6f      	ldr	r2, [pc, #444]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b6d      	ldr	r3, [pc, #436]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b69      	ldr	r3, [pc, #420]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a68      	ldr	r2, [pc, #416]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b66      	ldr	r3, [pc, #408]	; (8000d80 <MX_GPIO_Init+0x24c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f24f 51ff 	movw	r1, #62975	; 0xf5ff
 8000bf8:	4862      	ldr	r0, [pc, #392]	; (8000d84 <MX_GPIO_Init+0x250>)
 8000bfa:	f003 fd21 	bl	8004640 <HAL_GPIO_WritePin>
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000c04:	4860      	ldr	r0, [pc, #384]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000c06:	f003 fd1b 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f24c 7104 	movw	r1, #50948	; 0xc704
 8000c10:	485e      	ldr	r0, [pc, #376]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000c12:	f003 fd15 	bl	8004640 <HAL_GPIO_WritePin>
                          |RLY6_Pin|RLY5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_B1_Pin|EN4_Pin|EN2_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f248 4110 	movw	r1, #33808	; 0x8410
 8000c1c:	485c      	ldr	r0, [pc, #368]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000c1e:	f003 fd0f 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c28:	485a      	ldr	r0, [pc, #360]	; (8000d94 <MX_GPIO_Init+0x260>)
 8000c2a:	f003 fd09 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 8000c2e:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 8000c32:	61fb      	str	r3, [r7, #28]
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	484f      	ldr	r0, [pc, #316]	; (8000d84 <MX_GPIO_Init+0x250>)
 8000c48:	f003 fb5e 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin;
 8000c4c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4848      	ldr	r0, [pc, #288]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000c66:	f003 fb4f 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4846      	ldr	r0, [pc, #280]	; (8000d98 <MX_GPIO_Init+0x264>)
 8000c7e:	f003 fb43 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8000c82:	f24c 7304 	movw	r3, #50948	; 0xc704
 8000c86:	61fb      	str	r3, [r7, #28]
                          |RLY6_Pin|RLY5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483c      	ldr	r0, [pc, #240]	; (8000d8c <MX_GPIO_Init+0x258>)
 8000c9c:	f003 fb34 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_B1_Pin|EN4_Pin|EN2_Pin;
 8000ca0:	f248 4310 	movw	r3, #33808	; 0x8410
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4835      	ldr	r0, [pc, #212]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000cba:	f003 fb25 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8000cbe:	f647 030f 	movw	r3, #30735	; 0x780f
 8000cc2:	61fb      	str	r3, [r7, #28]
                          |IDB4_Pin|IDB3_Pin|IDB2_Pin|IDB3D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	482f      	ldr	r0, [pc, #188]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000cd4:	f003 fb18 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4826      	ldr	r0, [pc, #152]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000cee:	f003 fb0b 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8000cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4822      	ldr	r0, [pc, #136]	; (8000d94 <MX_GPIO_Init+0x260>)
 8000d0c:	f003 fafc 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	481b      	ldr	r0, [pc, #108]	; (8000d94 <MX_GPIO_Init+0x260>)
 8000d26:	f003 faef 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDA4_Pin;
 8000d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IDA4_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_GPIO_Init+0x260>)
 8000d40:	f003 fae2 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IDA3_Pin|IDA2_Pin|IDA1_Pin;
 8000d44:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <MX_GPIO_Init+0x254>)
 8000d5a:	f003 fad5 	bl	8004308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_GPIO_Init+0x25c>)
 8000d72:	f003 fac9 	bl	8004308 <HAL_GPIO_Init>

}
 8000d76:	bf00      	nop
 8000d78:	3730      	adds	r7, #48	; 0x30
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40020400 	.word	0x40020400
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40021c00 	.word	0x40021c00

08000d9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x54>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x58>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dda:	f003 fc4b 	bl	8004674 <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 f978 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20004d44 	.word	0x20004d44
 8000df0:	40005400 	.word	0x40005400
 8000df4:	000186a0 	.word	0x000186a0

08000df8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000dfe:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <MX_I2C3_Init+0x54>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_I2C3_Init+0x58>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_I2C3_Init+0x50>)
 8000e36:	f003 fc1d 	bl	8004674 <HAL_I2C_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e40:	f000 f94a 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20004cf0 	.word	0x20004cf0
 8000e4c:	40005c00 	.word	0x40005c00
 8000e50:	000186a0 	.word	0x000186a0

08000e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a42      	ldr	r2, [pc, #264]	; (8000f7c <HAL_I2C_MspInit+0x128>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12c      	bne.n	8000ed0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	23c0      	movs	r3, #192	; 0xc0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4835      	ldr	r0, [pc, #212]	; (8000f84 <HAL_I2C_MspInit+0x130>)
 8000eae:	f003 fa2b 	bl	8004308 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a31      	ldr	r2, [pc, #196]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ece:	e050      	b.n	8000f72 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <HAL_I2C_MspInit+0x134>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d14b      	bne.n	8000f72 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f18:	2312      	movs	r3, #18
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f24:	2304      	movs	r3, #4
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4817      	ldr	r0, [pc, #92]	; (8000f8c <HAL_I2C_MspInit+0x138>)
 8000f30:	f003 f9ea 	bl	8004308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f46:	2304      	movs	r3, #4
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <HAL_I2C_MspInit+0x13c>)
 8000f52:	f003 f9d9 	bl	8004308 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_I2C_MspInit+0x12c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	; 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40005c00 	.word	0x40005c00
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020000 	.word	0x40020000

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f001 f8ea 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f820 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f7ff fdc8 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa4:	f7ff fc8a 	bl	80008bc <MX_DMA_Init>
  MX_ADC1_Init();
 8000fa8:	f7ff fade 	bl	8000568 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fac:	f7ff fef6 	bl	8000d9c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000fb0:	f7ff ff22 	bl	8000df8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8000fb4:	f000 faa4 	bl	8001500 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fb8:	f000 fb4e 	bl	8001658 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fbc:	f000 fbc2 	bl	8001744 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fc0:	f000 fd0e 	bl	80019e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fc4:	f000 fd36 	bl	8001a34 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fc8:	f000 fd5e 	bl	8001a88 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000fcc:	f000 fd86 	bl	8001adc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000fd0:	f006 fde4 	bl	8007b9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000fd4:	f7ff fce0 	bl	8000998 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000fd8:	f006 fe04 	bl	8007be4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <main+0x48>
	...

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f016 ff07 	bl	8017e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001054:	23a8      	movs	r3, #168	; 0xa8
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105c:	2304      	movs	r3, #4
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fc49 	bl	80048fc <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001070:	f000 f832 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f003 feaa 	bl	8004dec <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109e:	f000 f81b 	bl	80010d8 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c6:	f001 f875 	bl	80021b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40002000 	.word	0x40002000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_MspInit+0x54>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_MspInit+0x54>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x54>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_MspInit+0x54>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_MspInit+0x54>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_MspInit+0x54>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	210f      	movs	r1, #15
 8001126:	f06f 0001 	mvn.w	r0, #1
 800112a:	f001 fba1 	bl	8002870 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	202d      	movs	r0, #45	; 0x2d
 8001152:	f001 fb8d 	bl	8002870 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001156:	202d      	movs	r0, #45	; 0x2d
 8001158:	f001 fba6 	bl	80028a8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_InitTick+0xa4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_InitTick+0xa4>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_InitTick+0xa4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f004 f802 	bl	800518c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001188:	f003 ffd8 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 800118c:	4603      	mov	r3, r0
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <HAL_InitTick+0xa8>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	3b01      	subs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_InitTick+0xac>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <HAL_InitTick+0xb0>)
 80011a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_InitTick+0xac>)
 80011a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ac:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_InitTick+0xac>)
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_InitTick+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_InitTick+0xac>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_InitTick+0xac>)
 80011c2:	f004 f815 	bl	80051f0 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <HAL_InitTick+0xac>)
 80011ce:	f004 f85f 	bl	8005290 <HAL_TIM_Base_Start_IT>
 80011d2:	4603      	mov	r3, r0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3730      	adds	r7, #48	; 0x30
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	20004d98 	.word	0x20004d98
 80011ec:	40002000 	.word	0x40002000

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <DMA1_Stream1_IRQHandler+0x10>)
 8001222:	f001 fc8f 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20004f78 	.word	0x20004f78

08001230 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DMA1_Stream3_IRQHandler+0x10>)
 8001236:	f001 fc85 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000501c 	.word	0x2000501c

08001244 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <DMA1_Stream5_IRQHandler+0x10>)
 800124a:	f001 fc7b 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20004eb8 	.word	0x20004eb8

08001258 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA1_Stream6_IRQHandler+0x10>)
 800125e:	f001 fc71 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000519c 	.word	0x2000519c

0800126c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USART1_IRQHandler+0x10>)
 8001272:	f005 f9bf 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200051fc 	.word	0x200051fc

08001280 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USART2_IRQHandler+0x10>)
 8001286:	f005 f9b5 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20005284 	.word	0x20005284

08001294 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <USART3_IRQHandler+0x10>)
 800129a:	f005 f9ab 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20004fd8 	.word	0x20004fd8

080012a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80012ae:	f004 f911 	bl	80054d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20004d98 	.word	0x20004d98

080012bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <DMA2_Stream0_IRQHandler+0x10>)
 80012c2:	f001 fc3f 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20004c68 	.word	0x20004c68

080012d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <DMA2_Stream1_IRQHandler+0x10>)
 80012d6:	f001 fc35 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20004f18 	.word	0x20004f18

080012e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <DMA2_Stream2_IRQHandler+0x10>)
 80012ea:	f001 fc2b 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000513c 	.word	0x2000513c

080012f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <ETH_IRQHandler+0x10>)
 80012fe:	f002 fa41 	bl	8003784 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20007e74 	.word	0x20007e74

0800130c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA2_Stream6_IRQHandler+0x10>)
 8001312:	f001 fc17 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200050dc 	.word	0x200050dc

08001320 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA2_Stream7_IRQHandler+0x10>)
 8001326:	f001 fc0d 	bl	8002b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000507c 	.word	0x2000507c

08001334 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <USART6_IRQHandler+0x10>)
 800133a:	f005 f95b 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20005240 	.word	0x20005240

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_kill>:

int _kill(int pid, int sig)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <_kill+0x20>)
 8001364:	2216      	movs	r2, #22
 8001366:	601a      	str	r2, [r3, #0]
	return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000ce48 	.word	0x2000ce48

0800137c <_exit>:

void _exit (int status)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffe5 	bl	8001358 <_kill>
	while (1) {}		/* Make sure we hang here */
 800138e:	e7fe      	b.n	800138e <_exit+0x12>

08001390 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e00a      	b.n	80013b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013a2:	f3af 8000 	nop.w
 80013a6:	4601      	mov	r1, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	b2ca      	uxtb	r2, r1
 80013b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf0      	blt.n	80013a2 <_read+0x12>
	}

return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x12>
	}
	return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_close>:

int _close(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142a:	605a      	str	r2, [r3, #4]
	return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_isatty>:

int _isatty(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return 1;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	return 0;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d205      	bcs.n	80014a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <_sbrk+0x6c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	e009      	b.n	80014bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	371c      	adds	r7, #28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20020000 	.word	0x20020000
 80014cc:	00000800 	.word	0x00000800
 80014d0:	200000a0 	.word	0x200000a0
 80014d4:	2000ce60 	.word	0x2000ce60
 80014d8:	2000ce48 	.word	0x2000ce48

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2220      	movs	r2, #32
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f016 fc62 	bl	8017e02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153e:	4b44      	ldr	r3, [pc, #272]	; (8001650 <MX_TIM1_Init+0x150>)
 8001540:	4a44      	ldr	r2, [pc, #272]	; (8001654 <MX_TIM1_Init+0x154>)
 8001542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MX_TIM1_Init+0x150>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_TIM1_Init+0x150>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_TIM1_Init+0x150>)
 8001552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <MX_TIM1_Init+0x150>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_TIM1_Init+0x150>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <MX_TIM1_Init+0x150>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800156a:	4839      	ldr	r0, [pc, #228]	; (8001650 <MX_TIM1_Init+0x150>)
 800156c:	f003 fe40 	bl	80051f0 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001576:	f7ff fdaf 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001584:	4619      	mov	r1, r3
 8001586:	4832      	ldr	r0, [pc, #200]	; (8001650 <MX_TIM1_Init+0x150>)
 8001588:	f004 fa0a 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001592:	f7ff fda1 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <MX_TIM1_Init+0x150>)
 8001598:	f003 feea 	bl	8005370 <HAL_TIM_PWM_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015a2:	f7ff fd99 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b2:	4619      	mov	r1, r3
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <MX_TIM1_Init+0x150>)
 80015b6:	f004 feed 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015c0:	f7ff fd8a 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c4:	2360      	movs	r3, #96	; 0x60
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4819      	ldr	r0, [pc, #100]	; (8001650 <MX_TIM1_Init+0x150>)
 80015ea:	f004 f917 	bl	800581c <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015f4:	f7ff fd70 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <MX_TIM1_Init+0x150>)
 8001602:	f004 f90b 	bl	800581c <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800160c:	f7ff fd64 	bl	80010d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001628:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM1_Init+0x150>)
 8001634:	f004 ff2a 	bl	800648c <HAL_TIMEx_ConfigBreakDeadTime>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800163e:	f7ff fd4b 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM1_Init+0x150>)
 8001644:	f000 f96c 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3758      	adds	r7, #88	; 0x58
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20004e28 	.word	0x20004e28
 8001654:	40010000 	.word	0x40010000

08001658 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <MX_TIM2_Init+0xe8>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <MX_TIM2_Init+0xe8>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <MX_TIM2_Init+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <MX_TIM2_Init+0xe8>)
 800169e:	f04f 32ff 	mov.w	r2, #4294967295
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b25      	ldr	r3, [pc, #148]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016b2:	f003 fd9d 	bl	80051f0 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016bc:	f7ff fd0c 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ca:	4619      	mov	r1, r3
 80016cc:	481c      	ldr	r0, [pc, #112]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016ce:	f004 f967 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016d8:	f7ff fcfe 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016dc:	4818      	ldr	r0, [pc, #96]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016de:	f003 fe47 	bl	8005370 <HAL_TIM_PWM_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016e8:	f7ff fcf6 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4619      	mov	r1, r3
 80016fa:	4811      	ldr	r0, [pc, #68]	; (8001740 <MX_TIM2_Init+0xe8>)
 80016fc:	f004 fe4a 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001706:	f7ff fce7 	bl	80010d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170a:	2360      	movs	r3, #96	; 0x60
 800170c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2204      	movs	r2, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <MX_TIM2_Init+0xe8>)
 8001722:	f004 f87b 	bl	800581c <HAL_TIM_PWM_ConfigChannel>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800172c:	f7ff fcd4 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <MX_TIM2_Init+0xe8>)
 8001732:	f000 f8f5 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8001736:	bf00      	nop
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20004e70 	.word	0x20004e70

08001744 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174a:	f107 0318 	add.w	r3, r7, #24
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	f107 0310 	add.w	r3, r7, #16
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176e:	4b31      	ldr	r3, [pc, #196]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <MX_TIM3_Init+0xf4>)
 8001772:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <MX_TIM3_Init+0xf0>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001780:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001786:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <MX_TIM3_Init+0xf0>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001794:	4827      	ldr	r0, [pc, #156]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001796:	f003 fd2b 	bl	80051f0 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80017a0:	f7ff fc9a 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	4619      	mov	r1, r3
 80017b0:	4820      	ldr	r0, [pc, #128]	; (8001834 <MX_TIM3_Init+0xf0>)
 80017b2:	f004 f8f5 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017bc:	f7ff fc8c 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80017c0:	481c      	ldr	r0, [pc, #112]	; (8001834 <MX_TIM3_Init+0xf0>)
 80017c2:	f003 fe2e 	bl	8005422 <HAL_TIM_IC_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017cc:	f7ff fc84 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4619      	mov	r1, r3
 80017de:	4815      	ldr	r0, [pc, #84]	; (8001834 <MX_TIM3_Init+0xf0>)
 80017e0:	f004 fdd8 	bl	8006394 <HAL_TIMEx_MasterConfigSynchronization>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80017ea:	f7ff fc75 	bl	80010d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017f2:	2301      	movs	r3, #1
 80017f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	4619      	mov	r1, r3
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_TIM3_Init+0xf0>)
 8001806:	f003 ff6d 	bl	80056e4 <HAL_TIM_IC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001810:	f7ff fc62 	bl	80010d8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	2204      	movs	r2, #4
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_TIM3_Init+0xf0>)
 800181c:	f003 ff62 	bl	80056e4 <HAL_TIM_IC_ConfigChannel>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001826:	f7ff fc57 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20004de0 	.word	0x20004de0
 8001838:	40000400 	.word	0x40000400

0800183c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_TIM_Base_MspInit+0xd4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d10e      	bne.n	800187c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b29      	ldr	r3, [pc, #164]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800187a:	e044      	b.n	8001906 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
}
 80018a2:	e030      	b.n	8001906 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_TIM_Base_MspInit+0xdc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12b      	bne.n	8001906 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_TIM_Base_MspInit+0xd8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 80018e6:	2330      	movs	r3, #48	; 0x30
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <HAL_TIM_Base_MspInit+0xe0>)
 8001902:	f002 fd01 	bl	8004308 <HAL_GPIO_Init>
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40010000 	.word	0x40010000
 8001914:	40023800 	.word	0x40023800
 8001918:	40000400 	.word	0x40000400
 800191c:	40020400 	.word	0x40020400

08001920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_TIM_MspPostInit+0xb0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11f      	bne.n	8001982 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 800194c:	f043 0310 	orr.w	r3, r3, #16
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 800195e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001970:	2301      	movs	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4817      	ldr	r0, [pc, #92]	; (80019d8 <HAL_TIM_MspPostInit+0xb8>)
 800197c:	f002 fcc4 	bl	8004308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001980:	e022      	b.n	80019c8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198a:	d11d      	bne.n	80019c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 8001996:	f043 0302 	orr.w	r3, r3, #2
 800199a:	6313      	str	r3, [r2, #48]	; 0x30
 800199c:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_TIM_MspPostInit+0xb4>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VALVE_PWM_Pin;
 80019a8:	2308      	movs	r3, #8
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VALVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <HAL_TIM_MspPostInit+0xbc>)
 80019c4:	f002 fca0 	bl	8004308 <HAL_GPIO_Init>
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40020400 	.word	0x40020400

080019e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <MX_USART1_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_USART1_UART_Init+0x4c>)
 8001a18:	f004 fd9e 	bl	8006558 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a22:	f7ff fb59 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200051fc 	.word	0x200051fc
 8001a30:	40011000 	.word	0x40011000

08001a34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <MX_USART2_UART_Init+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	f004 fd74 	bl	8006558 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a76:	f7ff fb2f 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20005284 	.word	0x20005284
 8001a84:	40004400 	.word	0x40004400

08001a88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART3_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART3_UART_Init+0x4c>)
 8001ac0:	f004 fd4a 	bl	8006558 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f7ff fb05 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20004fd8 	.word	0x20004fd8
 8001ad8:	40004800 	.word	0x40004800

08001adc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MX_USART6_UART_Init+0x50>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART6_UART_Init+0x4c>)
 8001b14:	f004 fd20 	bl	8006558 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f7ff fadb 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20005240 	.word	0x20005240
 8001b2c:	40011400 	.word	0x40011400

08001b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	; 0x40
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a97      	ldr	r2, [pc, #604]	; (8001dac <HAL_UART_MspInit+0x27c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	f040 8093 	bne.w	8001c7a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b54:	2300      	movs	r3, #0
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b58:	4b95      	ldr	r3, [pc, #596]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	4a94      	ldr	r2, [pc, #592]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	6453      	str	r3, [r2, #68]	; 0x44
 8001b64:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
 8001b74:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a8d      	ldr	r2, [pc, #564]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b8c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4882      	ldr	r0, [pc, #520]	; (8001db4 <HAL_UART_MspInit+0x284>)
 8001baa:	f002 fbad 	bl	8004308 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001bae:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bb0:	4a82      	ldr	r2, [pc, #520]	; (8001dbc <HAL_UART_MspInit+0x28c>)
 8001bb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001bb4:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc2:	4b7d      	ldr	r3, [pc, #500]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd0:	4b79      	ldr	r3, [pc, #484]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd6:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001bdc:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	4b74      	ldr	r3, [pc, #464]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001bf0:	4871      	ldr	r0, [pc, #452]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001bf2:	f000 fe67 	bl	80028c4 <HAL_DMA_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001bfc:	f7ff fa6c 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a6d      	ldr	r2, [pc, #436]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001c04:	639a      	str	r2, [r3, #56]	; 0x38
 8001c06:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_UART_MspInit+0x288>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c0e:	4a6d      	ldr	r2, [pc, #436]	; (8001dc4 <HAL_UART_MspInit+0x294>)
 8001c10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c12:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c1c:	2240      	movs	r2, #64	; 0x40
 8001c1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c20:	4b67      	ldr	r3, [pc, #412]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c26:	4b66      	ldr	r3, [pc, #408]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c2e:	4b64      	ldr	r3, [pc, #400]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c34:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c3a:	4b61      	ldr	r3, [pc, #388]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c40:	4b5f      	ldr	r3, [pc, #380]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c46:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c4c:	485c      	ldr	r0, [pc, #368]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c4e:	f000 fe39 	bl	80028c4 <HAL_DMA_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001c58:	f7ff fa3e 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34
 8001c62:	4a57      	ldr	r2, [pc, #348]	; (8001dc0 <HAL_UART_MspInit+0x290>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	2025      	movs	r0, #37	; 0x25
 8001c6e:	f000 fdff 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c72:	2025      	movs	r0, #37	; 0x25
 8001c74:	f000 fe18 	bl	80028a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c78:	e1e2      	b.n	8002040 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_UART_MspInit+0x298>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f040 80ad 	bne.w	8001de0 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
 8001c8a:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a48      	ldr	r2, [pc, #288]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b3f      	ldr	r3, [pc, #252]	; (8001db0 <HAL_UART_MspInit+0x280>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	483c      	ldr	r0, [pc, #240]	; (8001dcc <HAL_UART_MspInit+0x29c>)
 8001cda:	f002 fb15 	bl	8004308 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001ce0:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_UART_MspInit+0x2a4>)
 8001ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cea:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf2:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d0c:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d12:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d20:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d22:	f000 fdcf 	bl	80028c4 <HAL_DMA_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_UART_MspInit+0x200>
      Error_Handler();
 8001d2c:	f7ff f9d4 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a27      	ldr	r2, [pc, #156]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
 8001d36:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <HAL_UART_MspInit+0x2a0>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d3e:	4a27      	ldr	r2, [pc, #156]	; (8001ddc <HAL_UART_MspInit+0x2ac>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d48:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d64:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d76:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d7c:	4816      	ldr	r0, [pc, #88]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d7e:	f000 fda1 	bl	80028c4 <HAL_DMA_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001d88:	f7ff f9a6 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_UART_MspInit+0x2a8>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	2026      	movs	r0, #38	; 0x26
 8001d9e:	f000 fd67 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001da2:	2026      	movs	r0, #38	; 0x26
 8001da4:	f000 fd80 	bl	80028a8 <HAL_NVIC_EnableIRQ>
}
 8001da8:	e14a      	b.n	8002040 <HAL_UART_MspInit+0x510>
 8001daa:	bf00      	nop
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	2000513c 	.word	0x2000513c
 8001dbc:	40026440 	.word	0x40026440
 8001dc0:	2000507c 	.word	0x2000507c
 8001dc4:	400264b8 	.word	0x400264b8
 8001dc8:	40004400 	.word	0x40004400
 8001dcc:	40020c00 	.word	0x40020c00
 8001dd0:	20004eb8 	.word	0x20004eb8
 8001dd4:	40026088 	.word	0x40026088
 8001dd8:	2000519c 	.word	0x2000519c
 8001ddc:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a98      	ldr	r2, [pc, #608]	; (8002048 <HAL_UART_MspInit+0x518>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	f040 8093 	bne.w	8001f12 <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	4b96      	ldr	r3, [pc, #600]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	4a95      	ldr	r2, [pc, #596]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001df6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfc:	4b93      	ldr	r3, [pc, #588]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	4b8f      	ldr	r3, [pc, #572]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	4a8e      	ldr	r2, [pc, #568]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	6313      	str	r3, [r2, #48]	; 0x30
 8001e18:	4b8c      	ldr	r3, [pc, #560]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e36:	2307      	movs	r3, #7
 8001e38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4883      	ldr	r0, [pc, #524]	; (8002050 <HAL_UART_MspInit+0x520>)
 8001e42:	f002 fa61 	bl	8004308 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001e46:	4b83      	ldr	r3, [pc, #524]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e48:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_UART_MspInit+0x528>)
 8001e4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e54:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e5a:	4b7e      	ldr	r3, [pc, #504]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e6e:	4b79      	ldr	r3, [pc, #484]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001e74:	4b77      	ldr	r3, [pc, #476]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e82:	4b74      	ldr	r3, [pc, #464]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e88:	4872      	ldr	r0, [pc, #456]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e8a:	f000 fd1b 	bl	80028c4 <HAL_DMA_Init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_UART_MspInit+0x368>
      Error_Handler();
 8001e94:	f7ff f920 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a6e      	ldr	r2, [pc, #440]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e9e:	4a6d      	ldr	r2, [pc, #436]	; (8002054 <HAL_UART_MspInit+0x524>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001ea4:	4b6d      	ldr	r3, [pc, #436]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ea6:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_UART_MspInit+0x530>)
 8001ea8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001eaa:	4b6c      	ldr	r3, [pc, #432]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001eac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb2:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec6:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ecc:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ed2:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001ee4:	485d      	ldr	r0, [pc, #372]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ee6:	f000 fced 	bl	80028c4 <HAL_DMA_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8001ef0:	f7ff f8f2 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a59      	ldr	r2, [pc, #356]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_UART_MspInit+0x52c>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2105      	movs	r1, #5
 8001f04:	2027      	movs	r0, #39	; 0x27
 8001f06:	f000 fcb3 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f0a:	2027      	movs	r0, #39	; 0x27
 8001f0c:	f000 fccc 	bl	80028a8 <HAL_NVIC_EnableIRQ>
}
 8001f10:	e096      	b.n	8002040 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a53      	ldr	r2, [pc, #332]	; (8002064 <HAL_UART_MspInit+0x534>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 8091 	bne.w	8002040 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_UART_MspInit+0x51c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f66:	2308      	movs	r3, #8
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	483d      	ldr	r0, [pc, #244]	; (8002068 <HAL_UART_MspInit+0x538>)
 8001f72:	f002 f9c9 	bl	8004308 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f78:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_UART_MspInit+0x540>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f7e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f82:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f96:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9e:	4b33      	ldr	r3, [pc, #204]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001fa4:	4b31      	ldr	r3, [pc, #196]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001faa:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001fb8:	482c      	ldr	r0, [pc, #176]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fba:	f000 fc83 	bl	80028c4 <HAL_DMA_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x498>
      Error_Handler();
 8001fc4:	f7ff f888 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001fce:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_UART_MspInit+0x53c>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_UART_MspInit+0x548>)
 8001fd8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001fdc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001fe0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_UART_MspInit+0x544>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_UART_MspInit+0x544>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002008:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_UART_MspInit+0x544>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_UART_MspInit+0x544>)
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002014:	4817      	ldr	r0, [pc, #92]	; (8002074 <HAL_UART_MspInit+0x544>)
 8002016:	f000 fc55 	bl	80028c4 <HAL_DMA_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 8002020:	f7ff f85a 	bl	80010d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <HAL_UART_MspInit+0x544>)
 8002028:	635a      	str	r2, [r3, #52]	; 0x34
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_UART_MspInit+0x544>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2105      	movs	r1, #5
 8002034:	2047      	movs	r0, #71	; 0x47
 8002036:	f000 fc1b 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800203a:	2047      	movs	r0, #71	; 0x47
 800203c:	f000 fc34 	bl	80028a8 <HAL_NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3740      	adds	r7, #64	; 0x40
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40004800 	.word	0x40004800
 800204c:	40023800 	.word	0x40023800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	20004f78 	.word	0x20004f78
 8002058:	40026028 	.word	0x40026028
 800205c:	2000501c 	.word	0x2000501c
 8002060:	40026058 	.word	0x40026058
 8002064:	40011400 	.word	0x40011400
 8002068:	40020800 	.word	0x40020800
 800206c:	20004f18 	.word	0x20004f18
 8002070:	40026428 	.word	0x40026428
 8002074:	200050dc 	.word	0x200050dc
 8002078:	400264a0 	.word	0x400264a0

0800207c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002082:	490e      	ldr	r1, [pc, #56]	; (80020bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002098:	4c0b      	ldr	r4, [pc, #44]	; (80020c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020a6:	f7ff fa19 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f015 fe67 	bl	8017d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ae:	f7fe ff71 	bl	8000f94 <main>
  bx  lr    
 80020b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80020c0:	0801c03c 	.word	0x0801c03c
  ldr r2, =_sbss
 80020c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80020c8:	2000ce5c 	.word	0x2000ce5c

080020cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_UART_TxCpltCallback>:
        slave_uart_idle(&slaves[2]);
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_UART_TxCpltCallback+0x54>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d104      	bne.n	80020ee <HAL_UART_TxCpltCallback+0x1e>
        slave_set_tx_rx(&slaves[0], rx);
 80020e4:	2100      	movs	r1, #0
 80020e6:	480f      	ldr	r0, [pc, #60]	; (8002124 <HAL_UART_TxCpltCallback+0x54>)
 80020e8:	f015 fd38 	bl	8017b5c <slave_set_tx_rx>
    else if (huart == slaves[1].uart_port->uart)
        slave_set_tx_rx(&slaves[1], rx);
    else if (huart == slaves[2].uart_port->uart)
        slave_set_tx_rx(&slaves[2], rx);
}
 80020ec:	e016      	b.n	800211c <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[1].uart_port->uart)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_UART_TxCpltCallback+0x54>)
 80020f0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d104      	bne.n	8002106 <HAL_UART_TxCpltCallback+0x36>
        slave_set_tx_rx(&slaves[1], rx);
 80020fc:	2100      	movs	r1, #0
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <HAL_UART_TxCpltCallback+0x58>)
 8002100:	f015 fd2c 	bl	8017b5c <slave_set_tx_rx>
}
 8002104:	e00a      	b.n	800211c <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[2].uart_port->uart)
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_UART_TxCpltCallback+0x54>)
 8002108:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	429a      	cmp	r2, r3
 8002112:	d103      	bne.n	800211c <HAL_UART_TxCpltCallback+0x4c>
        slave_set_tx_rx(&slaves[2], rx);
 8002114:	2100      	movs	r1, #0
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_UART_TxCpltCallback+0x5c>)
 8002118:	f015 fd20 	bl	8017b5c <slave_set_tx_rx>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200052c8 	.word	0x200052c8
 8002128:	200056e8 	.word	0x200056e8
 800212c:	20005b08 	.word	0x20005b08

08002130 <HAL_TIM_IC_CaptureCallback>:
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7f1b      	ldrb	r3, [r3, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_TIM_IC_CaptureCallback+0x1c>
    {
        spd_pulse[0]++;
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002148:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 800214a:	e008      	b.n	800215e <HAL_TIM_IC_CaptureCallback+0x2e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7f1b      	ldrb	r3, [r3, #28]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d104      	bne.n	800215e <HAL_TIM_IC_CaptureCallback+0x2e>
        spd_pulse[1]++;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	3301      	adds	r3, #1
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_TIM_IC_CaptureCallback+0x3c>)
 800215c:	6053      	str	r3, [r2, #4]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20006528 	.word	0x20006528

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_Init+0x40>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_Init+0x40>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_Init+0x40>)
 8002192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f000 fb5e 	bl	800285a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f7fe ffcc 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7fe ff9e 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20006530 	.word	0x20006530

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20006530 	.word	0x20006530

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008

0800223c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e033      	b.n	80022ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fa7e 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002282:	f023 0302 	bic.w	r3, r3, #2
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f93a 	bl	8002508 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1c>
 80022dc:	2302      	movs	r3, #2
 80022de:	e105      	b.n	80024ec <HAL_ADC_ConfigChannel+0x228>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d925      	bls.n	800233c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	461a      	mov	r2, r3
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	3b1e      	subs	r3, #30
 8002306:	2207      	movs	r2, #7
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68d9      	ldr	r1, [r3, #12]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4618      	mov	r0, r3
 8002328:	4603      	mov	r3, r0
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4403      	add	r3, r0
 800232e:	3b1e      	subs	r3, #30
 8002330:	409a      	lsls	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	e022      	b.n	8002382 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	2207      	movs	r2, #7
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	400a      	ands	r2, r1
 800235e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	4603      	mov	r3, r0
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4403      	add	r3, r0
 8002378:	409a      	lsls	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b06      	cmp	r3, #6
 8002388:	d824      	bhi.n	80023d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b05      	subs	r3, #5
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b05      	subs	r3, #5
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
 80023d2:	e04c      	b.n	800246e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b0c      	cmp	r3, #12
 80023da:	d824      	bhi.n	8002426 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b23      	subs	r3, #35	; 0x23
 80023ee:	221f      	movs	r2, #31
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43da      	mvns	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b23      	subs	r3, #35	; 0x23
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
 8002424:	e023      	b.n	800246e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	3b41      	subs	r3, #65	; 0x41
 8002438:	221f      	movs	r2, #31
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	400a      	ands	r2, r1
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b41      	subs	r3, #65	; 0x41
 8002462:	fa00 f203 	lsl.w	r2, r0, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_ADC_ConfigChannel+0x234>)
 8002470:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a21      	ldr	r2, [pc, #132]	; (80024fc <HAL_ADC_ConfigChannel+0x238>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d109      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1cc>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b12      	cmp	r3, #18
 8002482:	d105      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	; (80024fc <HAL_ADC_ConfigChannel+0x238>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d123      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x21e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d003      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x1e6>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b11      	cmp	r3, #17
 80024a8:	d11b      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d111      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_ADC_ConfigChannel+0x23c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_ADC_ConfigChannel+0x240>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	0c9a      	lsrs	r2, r3, #18
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d4:	e002      	b.n	80024dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3b01      	subs	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f9      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40012300 	.word	0x40012300
 80024fc:	40012000 	.word	0x40012000
 8002500:	20000000 	.word	0x20000000
 8002504:	431bde83 	.word	0x431bde83

08002508 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002510:	4b79      	ldr	r3, [pc, #484]	; (80026f8 <ADC_Init+0x1f0>)
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002582:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <ADC_Init+0x1f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d022      	beq.n	80025e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6899      	ldr	r1, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e00f      	b.n	8002606 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002604:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0202 	bic.w	r2, r2, #2
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
 8002620:	005a      	lsls	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01b      	beq.n	800266c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	3b01      	subs	r3, #1
 8002660:	035a      	lsls	r2, r3, #13
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	e007      	b.n	800267c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800267a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800268a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	3b01      	subs	r3, #1
 8002698:	051a      	lsls	r2, r3, #20
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6899      	ldr	r1, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026be:	025a      	lsls	r2, r3, #9
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6899      	ldr	r1, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	029a      	lsls	r2, r3, #10
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012300 	.word	0x40012300
 80026fc:	0f000001 	.word	0x0f000001

08002700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db0b      	blt.n	800278e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4907      	ldr	r1, [pc, #28]	; (800279c <__NVIC_EnableIRQ+0x38>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	e000e100 	.word	0xe000e100

080027a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	db0a      	blt.n	80027ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <__NVIC_SetPriority+0x4c>)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	440b      	add	r3, r1
 80027c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c8:	e00a      	b.n	80027e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	4908      	ldr	r1, [pc, #32]	; (80027f0 <__NVIC_SetPriority+0x50>)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	3b04      	subs	r3, #4
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	440b      	add	r3, r1
 80027de:	761a      	strb	r2, [r3, #24]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000e100 	.word	0xe000e100
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f1c3 0307 	rsb	r3, r3, #7
 800280e:	2b04      	cmp	r3, #4
 8002810:	bf28      	it	cs
 8002812:	2304      	movcs	r3, #4
 8002814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3304      	adds	r3, #4
 800281a:	2b06      	cmp	r3, #6
 800281c:	d902      	bls.n	8002824 <NVIC_EncodePriority+0x30>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3b03      	subs	r3, #3
 8002822:	e000      	b.n	8002826 <NVIC_EncodePriority+0x32>
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	401a      	ands	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800283c:	f04f 31ff 	mov.w	r1, #4294967295
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43d9      	mvns	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	4313      	orrs	r3, r2
         );
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ff4c 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002882:	f7ff ff61 	bl	8002748 <__NVIC_GetPriorityGrouping>
 8002886:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	6978      	ldr	r0, [r7, #20]
 800288e:	f7ff ffb1 	bl	80027f4 <NVIC_EncodePriority>
 8002892:	4602      	mov	r2, r0
 8002894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff80 	bl	80027a0 <__NVIC_SetPriority>
}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff54 	bl	8002764 <__NVIC_EnableIRQ>
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fc84 	bl	80021dc <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e099      	b.n	8002a14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002900:	e00f      	b.n	8002922 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002902:	f7ff fc6b 	bl	80021dc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b05      	cmp	r3, #5
 800290e:	d908      	bls.n	8002922 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2203      	movs	r2, #3
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e078      	b.n	8002a14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1e8      	bne.n	8002902 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_DMA_Init+0x158>)
 800293c:	4013      	ands	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	4313      	orrs	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0307 	bic.w	r3, r3, #7
 80029a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d117      	bne.n	80029e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fa7b 	bl	8002ec4 <DMA_CheckFifoParam>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029e2:	2301      	movs	r3, #1
 80029e4:	e016      	b.n	8002a14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa32 	bl	8002e58 <DMA_CalcBaseAndBitshift>
 80029f4:	4603      	mov	r3, r0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fc:	223f      	movs	r2, #63	; 0x3f
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	f010803f 	.word	0xf010803f

08002a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a2e:	f7ff fbd5 	bl	80021dc <HAL_GetTick>
 8002a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d008      	beq.n	8002a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e052      	b.n	8002af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_Abort+0x62>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa2:	e013      	b.n	8002acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa4:	f7ff fb9a 	bl	80021dc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d90c      	bls.n	8002acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e015      	b.n	8002af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e4      	bne.n	8002aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	223f      	movs	r2, #63	; 0x3f
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d004      	beq.n	8002b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00c      	b.n	8002b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_DMA_IRQHandler+0x258>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a92      	ldr	r2, [pc, #584]	; (8002da0 <HAL_DMA_IRQHandler+0x25c>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0a9b      	lsrs	r3, r3, #10
 8002b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6e:	2208      	movs	r2, #8
 8002b70:	409a      	lsls	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01a      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0204 	bic.w	r2, r2, #4
 8002b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0202 	orr.w	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2204      	movs	r2, #4
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	2204      	movs	r2, #4
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	f043 0204 	orr.w	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2210      	movs	r2, #16
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d043      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3e:	2210      	movs	r2, #16
 8002c40:	409a      	lsls	r2, r3
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d018      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d024      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
 8002c72:	e01f      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01b      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
 8002c84:	e016      	b.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0208 	bic.w	r2, r2, #8
 8002ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2220      	movs	r2, #32
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 808e 	beq.w	8002de2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8086 	beq.w	8002de2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2220      	movs	r2, #32
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d136      	bne.n	8002d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0216 	bic.w	r2, r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d103      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x1da>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0208 	bic.w	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	223f      	movs	r2, #63	; 0x3f
 8002d34:	409a      	lsls	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d07d      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
        }
        return;
 8002d5a:	e078      	b.n	8002e4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d030      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e02b      	b.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d027      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
 8002d9a:	e022      	b.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0210 	bic.w	r2, r2, #16
 8002dc0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d032      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d022      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	3301      	adds	r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d307      	bcc.n	8002e2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f2      	bne.n	8002e0e <HAL_DMA_IRQHandler+0x2ca>
 8002e28:	e000      	b.n	8002e2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e2a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
 8002e4c:	e000      	b.n	8002e50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e4e:	bf00      	nop
    }
  }
}
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3b10      	subs	r3, #16
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <DMA_CalcBaseAndBitshift+0x64>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d909      	bls.n	8002e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
 8002e98:	e007      	b.n	8002eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	aaaaaaab 	.word	0xaaaaaaab
 8002ec0:	0801bda0 	.word	0x0801bda0

08002ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11f      	bne.n	8002f1e <DMA_CheckFifoParam+0x5a>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d856      	bhi.n	8002f92 <DMA_CheckFifoParam+0xce>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <DMA_CheckFifoParam+0x28>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f0f 	.word	0x08002f0f
 8002ef4:	08002efd 	.word	0x08002efd
 8002ef8:	08002f93 	.word	0x08002f93
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d046      	beq.n	8002f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e043      	b.n	8002f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f16:	d140      	bne.n	8002f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e03d      	b.n	8002f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	d121      	bne.n	8002f6c <DMA_CheckFifoParam+0xa8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d837      	bhi.n	8002f9e <DMA_CheckFifoParam+0xda>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <DMA_CheckFifoParam+0x70>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f4b 	.word	0x08002f4b
 8002f3c:	08002f45 	.word	0x08002f45
 8002f40:	08002f5d 	.word	0x08002f5d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e030      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d025      	beq.n	8002fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5a:	e022      	b.n	8002fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f64:	d11f      	bne.n	8002fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f6a:	e01c      	b.n	8002fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d903      	bls.n	8002f7a <DMA_CheckFifoParam+0xb6>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d003      	beq.n	8002f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f78:	e018      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7e:	e015      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f90:	e00b      	b.n	8002faa <DMA_CheckFifoParam+0xe6>
      break;
 8002f92:	bf00      	nop
 8002f94:	e00a      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e008      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e006      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e004      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;   
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
    }
  } 
  
  return status; 
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop

08002fbc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002fcc:	4baa      	ldr	r3, [pc, #680]	; (8003278 <HAL_ETH_Init+0x2bc>)
 8002fce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e183      	b.n	80032ea <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f004 f980 	bl	80072fc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	4b9e      	ldr	r3, [pc, #632]	; (800327c <HAL_ETH_Init+0x2c0>)
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	4a9d      	ldr	r2, [pc, #628]	; (800327c <HAL_ETH_Init+0x2c0>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300a:	6453      	str	r3, [r2, #68]	; 0x44
 800300c:	4b9b      	ldr	r3, [pc, #620]	; (800327c <HAL_ETH_Init+0x2c0>)
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003018:	4b99      	ldr	r3, [pc, #612]	; (8003280 <HAL_ETH_Init+0x2c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a98      	ldr	r2, [pc, #608]	; (8003280 <HAL_ETH_Init+0x2c4>)
 800301e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003022:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003024:	4b96      	ldr	r3, [pc, #600]	; (8003280 <HAL_ETH_Init+0x2c4>)
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4994      	ldr	r1, [pc, #592]	; (8003280 <HAL_ETH_Init+0x2c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800304a:	f7ff f8c7 	bl	80021dc <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003050:	e011      	b.n	8003076 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003052:	f7ff f8c3 	bl	80021dc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003060:	d909      	bls.n	8003076 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2203      	movs	r2, #3
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e139      	b.n	80032ea <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e4      	bne.n	8003052 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f023 031c 	bic.w	r3, r3, #28
 8003096:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003098:	f002 f844 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 800309c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4a78      	ldr	r2, [pc, #480]	; (8003284 <HAL_ETH_Init+0x2c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d908      	bls.n	80030b8 <HAL_ETH_Init+0xfc>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_ETH_Init+0x2cc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d804      	bhi.n	80030b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	61fb      	str	r3, [r7, #28]
 80030b6:	e027      	b.n	8003108 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4a73      	ldr	r2, [pc, #460]	; (8003288 <HAL_ETH_Init+0x2cc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d908      	bls.n	80030d2 <HAL_ETH_Init+0x116>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4a6d      	ldr	r2, [pc, #436]	; (8003278 <HAL_ETH_Init+0x2bc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d204      	bcs.n	80030d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f043 030c 	orr.w	r3, r3, #12
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	e01a      	b.n	8003108 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4a68      	ldr	r2, [pc, #416]	; (8003278 <HAL_ETH_Init+0x2bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d303      	bcc.n	80030e2 <HAL_ETH_Init+0x126>
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_ETH_Init+0x2d0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d911      	bls.n	8003106 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	4a69      	ldr	r2, [pc, #420]	; (800328c <HAL_ETH_Init+0x2d0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d908      	bls.n	80030fc <HAL_ETH_Init+0x140>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_ETH_Init+0x2d4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d804      	bhi.n	80030fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e005      	b.n	8003108 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e000      	b.n	8003108 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003106:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003110:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003114:	2100      	movs	r1, #0
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fc17 	bl	800394a <HAL_ETH_WritePHYRegister>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003126:	6939      	ldr	r1, [r7, #16]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fdcd 	bl	8003cc8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0d7      	b.n	80032ea <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800313a:	20ff      	movs	r0, #255	; 0xff
 800313c:	f7ff f85a 	bl	80021f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a5 	beq.w	8003294 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800314a:	f7ff f847 	bl	80021dc <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fb8e 	bl	800387a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800315e:	f7ff f83d 	bl	80021dc <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d90f      	bls.n	8003190 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003174:	6939      	ldr	r1, [r7, #16]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fda6 	bl	8003cc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e0ac      	b.n	80032ea <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0da      	beq.n	8003150 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800319a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800319e:	2100      	movs	r1, #0
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fbd2 	bl	800394a <HAL_ETH_WritePHYRegister>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031b0:	6939      	ldr	r1, [r7, #16]
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd88 	bl	8003cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80031c0:	2301      	movs	r3, #1
 80031c2:	e092      	b.n	80032ea <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80031c4:	f7ff f80a 	bl	80021dc <HAL_GetTick>
 80031c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	461a      	mov	r2, r3
 80031d0:	2101      	movs	r1, #1
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fb51 	bl	800387a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031d8:	f7ff f800 	bl	80021dc <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d90f      	bls.n	800320a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fd69 	bl	8003cc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e06f      	b.n	80032ea <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0da      	beq.n	80031ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	461a      	mov	r2, r3
 800321a:	2110      	movs	r1, #16
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb2c 	bl	800387a <HAL_ETH_ReadPHYRegister>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800322c:	6939      	ldr	r1, [r7, #16]
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fd4a 	bl	8003cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800323c:	2301      	movs	r3, #1
 800323e:	e054      	b.n	80032ea <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e002      	b.n	800325a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	e035      	b.n	80032d8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e030      	b.n	80032d8 <HAL_ETH_Init+0x31c>
 8003276:	bf00      	nop
 8003278:	03938700 	.word	0x03938700
 800327c:	40023800 	.word	0x40023800
 8003280:	40013800 	.word	0x40013800
 8003284:	01312cff 	.word	0x01312cff
 8003288:	02160ebf 	.word	0x02160ebf
 800328c:	05f5e0ff 	.word	0x05f5e0ff
 8003290:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80032a4:	4313      	orrs	r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	2100      	movs	r1, #0
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb4c 	bl	800394a <HAL_ETH_WritePHYRegister>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032bc:	6939      	ldr	r1, [r7, #16]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fd02 	bl	8003cc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e00c      	b.n	80032ea <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032d4:	f7fe ff8e 	bl	80021f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032d8:	6939      	ldr	r1, [r7, #16]
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fcf4 	bl	8003cc8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop

080032f4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_ETH_DMATxDescListInit+0x20>
 8003310:	2302      	movs	r3, #2
 8003312:	e052      	b.n	80033ba <HAL_ETH_DMATxDescListInit+0xc6>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e030      	b.n	8003392 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015b      	lsls	r3, r3, #5
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	4413      	add	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003340:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	461a      	mov	r2, r3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	3b01      	subs	r3, #1
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	429a      	cmp	r2, r3
 8003372:	d208      	bcs.n	8003386 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3301      	adds	r3, #1
 8003378:	015b      	lsls	r3, r3, #5
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4413      	add	r3, r2
 800337e:	461a      	mov	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	60da      	str	r2, [r3, #12]
 8003384:	e002      	b.n	800338c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3301      	adds	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d3ca      	bcc.n	8003330 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a4:	3310      	adds	r3, #16
 80033a6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b087      	sub	sp, #28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_ETH_DMARxDescListInit+0x20>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e056      	b.n	8003494 <HAL_ETH_DMARxDescListInit+0xce>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e034      	b.n	800346c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	4413      	add	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003412:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800341a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	461a      	mov	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	3b01      	subs	r3, #1
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	429a      	cmp	r2, r3
 800344c:	d208      	bcs.n	8003460 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4413      	add	r3, r2
 8003458:	461a      	mov	r2, r3
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	e002      	b.n	8003466 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d3c6      	bcc.n	8003402 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347e:	330c      	adds	r3, #12
 8003480:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_ETH_TransmitFrame+0x24>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0cd      	b.n	8003660 <HAL_ETH_TransmitFrame+0x1c0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0b8      	b.n	8003660 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da09      	bge.n	800350c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2212      	movs	r2, #18
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0a9      	b.n	8003660 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003512:	4293      	cmp	r3, r2
 8003514:	d915      	bls.n	8003542 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	4a54      	ldr	r2, [pc, #336]	; (800366c <HAL_ETH_TransmitFrame+0x1cc>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	4b51      	ldr	r3, [pc, #324]	; (800366c <HAL_ETH_TransmitFrame+0x1cc>)
 8003526:	fba3 1302 	umull	r1, r3, r3, r2
 800352a:	0a9b      	lsrs	r3, r3, #10
 800352c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e001      	b.n	8003546 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d11c      	bne.n	8003586 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800355a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003566:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003576:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	; 0x2c
 8003584:	e04b      	b.n	800361e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e044      	b.n	8003616 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800359a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035b0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035ba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3b01      	subs	r3, #1
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d116      	bne.n	80035f4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035d4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	4a25      	ldr	r2, [pc, #148]	; (8003670 <HAL_ETH_TransmitFrame+0x1d0>)
 80035da:	fb02 f203 	mul.w	r2, r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035e6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80035f2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003602:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3301      	adds	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	429a      	cmp	r2, r3
 800361c:	d3b6      	bcc.n	800358c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003626:	3314      	adds	r3, #20
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363a:	3314      	adds	r3, #20
 800363c:	2204      	movs	r2, #4
 800363e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003648:	3304      	adds	r3, #4
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	ac02b00b 	.word	0xac02b00b
 8003670:	fffffa0c 	.word	0xfffffa0c

08003674 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800368a:	2302      	movs	r3, #2
 800368c:	e074      	b.n	8003778 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800369e:	e05a      	b.n	8003756 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d10d      	bne.n	80036d2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28
 80036d0:	e041      	b.n	8003756 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	629a      	str	r2, [r3, #40]	; 0x28
 80036f6:	e02e      	b.n	8003756 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	2b01      	cmp	r3, #1
 8003710:	d103      	bne.n	800371a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003726:	1f1a      	subs	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e010      	b.n	8003778 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db02      	blt.n	8003766 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d99c      	bls.n	80036a0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003794:	3314      	adds	r3, #20
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d112      	bne.n	80037c6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f003 fe59 	bl	8007458 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ae:	3314      	adds	r3, #20
 80037b0:	2240      	movs	r2, #64	; 0x40
 80037b2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037c4:	e01b      	b.n	80037fe <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ce:	3314      	adds	r3, #20
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d111      	bne.n	80037fe <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f839 	bl	8003852 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e8:	3314      	adds	r3, #20
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003806:	3314      	adds	r3, #20
 8003808:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800380c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003816:	3314      	adds	r3, #20
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003822:	d112      	bne.n	800384a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f81e 	bl	8003866 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003832:	3314      	adds	r3, #20
 8003834:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003838:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	460b      	mov	r3, r1
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b82      	cmp	r3, #130	; 0x82
 800389a:	d101      	bne.n	80038a0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
 800389e:	e050      	b.n	8003942 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2282      	movs	r2, #130	; 0x82
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 031c 	and.w	r3, r3, #28
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8a1b      	ldrh	r3, [r3, #16]
 80038bc:	02db      	lsls	r3, r3, #11
 80038be:	b29b      	uxth	r3, r3
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	019b      	lsls	r3, r3, #6
 80038ca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f023 0302 	bic.w	r3, r3, #2
 80038da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ec:	f7fe fc76 	bl	80021dc <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038f2:	e015      	b.n	8003920 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80038f4:	f7fe fc72 	bl	80021dc <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d309      	bcc.n	8003918 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e014      	b.n	8003942 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e4      	bne.n	80038f4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	460b      	mov	r3, r1
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b42      	cmp	r3, #66	; 0x42
 800396a:	d101      	bne.n	8003970 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
 800396e:	e04e      	b.n	8003a0e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2242      	movs	r2, #66	; 0x42
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f003 031c 	and.w	r3, r3, #28
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8a1b      	ldrh	r3, [r3, #16]
 800398c:	02db      	lsls	r3, r3, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80039c6:	f7fe fc09 	bl	80021dc <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039cc:	e015      	b.n	80039fa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80039ce:	f7fe fc05 	bl	80021dc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d309      	bcc.n	80039f2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e00d      	b.n	8003a0e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e4      	bne.n	80039ce <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_ETH_Start+0x16>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e01f      	b.n	8003a6c <HAL_ETH_Start+0x56>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fb45 	bl	80040cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fb7c 	bl	8004140 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fc13 	bl	8004274 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fbb0 	bl	80041b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fbdd 	bl	8004214 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_ETH_Stop+0x16>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e01f      	b.n	8003aca <HAL_ETH_Stop+0x56>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fba2 	bl	80041e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fbcf 	bl	8004244 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fb67 	bl	800417a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fbe1 	bl	8004274 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb27 	bl	8004106 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_ETH_ConfigMAC+0x1c>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0e4      	b.n	8003cba <HAL_ETH_ConfigMAC+0x1e6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80b1 	beq.w	8003c6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <HAL_ETH_ConfigMAC+0x1f0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003b20:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003b26:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003b2c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003b32:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003b38:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003b3e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003b44:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003b4a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003b50:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003b56:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003b5c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003b62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f7fe fb3a 	bl	80021f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003b90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003b96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003b9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003ba2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003ba8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003bae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003bba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003bbc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f7fe fb14 	bl	80021f4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bdc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003c04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003c0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003c10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003c16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003c1c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7fe fadd 	bl	80021f4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f7fe faca 	bl	80021f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	61da      	str	r2, [r3, #28]
 8003c68:	e01e      	b.n	8003ca8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003c78:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7fe faaa 	bl	80021f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	ff20810f 	.word	0xff20810f

08003cc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b0b0      	sub	sp, #192	; 0xc0
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d12:	663b      	str	r3, [r7, #96]	; 0x60
 8003d14:	e001      	b.n	8003d1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d24:	2300      	movs	r3, #0
 8003d26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003d34:	2340      	movs	r3, #64	; 0x40
 8003d36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003da0:	4bac      	ldr	r3, [pc, #688]	; (8004054 <ETH_MACDMAConfig+0x38c>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003dac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003db0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003db4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003dba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003dbe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003dc2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003dc8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003dcc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003dd0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003dd4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003dd8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003ddc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003dde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003df0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f7fe f9f9 	bl	80021f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003e14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003e1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003e20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003e26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003e30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003e38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7fe f9d4 	bl	80021f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003e74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003e8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003e8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003e92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003e98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003e9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003ea0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003ea4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003ea6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	f7fe f995 	bl	80021f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ed2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ed4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003ed8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7fe f980 	bl	80021f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003efc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f06:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003f0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f10:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003f22:	2304      	movs	r3, #4
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	3318      	adds	r3, #24
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003f5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <ETH_MACDMAConfig+0x390>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f66:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003f68:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f6a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003f6c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003f6e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003f70:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003f72:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003f74:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003f76:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003f78:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003f7a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003f7e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003f82:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003f86:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003faa:	3318      	adds	r3, #24
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f7fe f91e 	bl	80021f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fc6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fcc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003fd0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fd4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003fd8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fdc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003fde:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003fe2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004000:	2001      	movs	r0, #1
 8004002:	f7fe f8f7 	bl	80021f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004012:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10f      	bne.n	800403c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	331c      	adds	r3, #28
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004038:	331c      	adds	r3, #28
 800403a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	461a      	mov	r2, r3
 8004042:	2100      	movs	r1, #0
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f809 	bl	800405c <ETH_MACAddressConfig>
}
 800404a:	bf00      	nop
 800404c:	37c0      	adds	r7, #192	; 0xc0
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	ff20810f 	.word	0xff20810f
 8004058:	f8de3f23 	.word	0xf8de3f23

0800405c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3305      	adds	r3, #5
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	3204      	adds	r2, #4
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <ETH_MACAddressConfig+0x68>)
 800407e:	4413      	add	r3, r2
 8004080:	461a      	mov	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3303      	adds	r3, #3
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	061a      	lsls	r2, r3, #24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3302      	adds	r3, #2
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	4313      	orrs	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <ETH_MACAddressConfig+0x6c>)
 80040ae:	4413      	add	r3, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6013      	str	r3, [r2, #0]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40028040 	.word	0x40028040
 80040c8:	40028044 	.word	0x40028044

080040cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0208 	orr.w	r2, r2, #8
 80040e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80040f0:	2001      	movs	r0, #1
 80040f2:	f000 f8e9 	bl	80042c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0208 	bic.w	r2, r2, #8
 8004120:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800412a:	2001      	movs	r0, #1
 800412c:	f000 f8cc 	bl	80042c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0204 	orr.w	r2, r2, #4
 800415a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004164:	2001      	movs	r0, #1
 8004166:	f000 f8af 	bl	80042c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0204 	bic.w	r2, r2, #4
 8004194:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800419e:	2001      	movs	r0, #1
 80041a0:	f000 f892 	bl	80042c8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c4:	3318      	adds	r3, #24
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d4:	3318      	adds	r3, #24
 80041d6:	601a      	str	r2, [r3, #0]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	3318      	adds	r3, #24
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004204:	3318      	adds	r3, #24
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	3318      	adds	r3, #24
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0202 	orr.w	r2, r2, #2
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	3318      	adds	r3, #24
 8004236:	601a      	str	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004254:	3318      	adds	r3, #24
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0202 	bic.w	r2, r2, #2
 8004260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004264:	3318      	adds	r3, #24
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004288:	3318      	adds	r3, #24
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	3318      	adds	r3, #24
 800429a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a4:	3318      	adds	r3, #24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f000 f80c 	bl	80042c8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	3318      	adds	r3, #24
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <ETH_Delay+0x38>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <ETH_Delay+0x3c>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	0a5b      	lsrs	r3, r3, #9
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80042e4:	bf00      	nop
  } 
  while (Delay --);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	60fa      	str	r2, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f9      	bne.n	80042e4 <ETH_Delay+0x1c>
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000000 	.word	0x20000000
 8004304:	10624dd3 	.word	0x10624dd3

08004308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004308:	b480      	push	{r7}
 800430a:	b089      	sub	sp, #36	; 0x24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e16b      	b.n	80045fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004324:	2201      	movs	r2, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4013      	ands	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	429a      	cmp	r2, r3
 800433e:	f040 815a 	bne.w	80045f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d005      	beq.n	800435a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004356:	2b02      	cmp	r3, #2
 8004358:	d130      	bne.n	80043bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	2203      	movs	r2, #3
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43db      	mvns	r3, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4013      	ands	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004390:	2201      	movs	r2, #1
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 0201 	and.w	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 0303 	and.w	r3, r3, #3
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d017      	beq.n	80043f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2203      	movs	r2, #3
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d123      	bne.n	800444c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	08da      	lsrs	r2, r3, #3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3208      	adds	r2, #8
 800440c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	220f      	movs	r2, #15
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	08da      	lsrs	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3208      	adds	r2, #8
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	2203      	movs	r2, #3
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43db      	mvns	r3, r3
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	4013      	ands	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 0203 	and.w	r2, r3, #3
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4313      	orrs	r3, r2
 8004478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80b4 	beq.w	80045f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	4b60      	ldr	r3, [pc, #384]	; (8004614 <HAL_GPIO_Init+0x30c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4a5f      	ldr	r2, [pc, #380]	; (8004614 <HAL_GPIO_Init+0x30c>)
 8004498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800449c:	6453      	str	r3, [r2, #68]	; 0x44
 800449e:	4b5d      	ldr	r3, [pc, #372]	; (8004614 <HAL_GPIO_Init+0x30c>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_GPIO_Init+0x310>)
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	089b      	lsrs	r3, r3, #2
 80044b0:	3302      	adds	r3, #2
 80044b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	220f      	movs	r2, #15
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_GPIO_Init+0x314>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_Init+0x226>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a51      	ldr	r2, [pc, #324]	; (8004620 <HAL_GPIO_Init+0x318>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x222>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a50      	ldr	r2, [pc, #320]	; (8004624 <HAL_GPIO_Init+0x31c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x21e>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a4f      	ldr	r2, [pc, #316]	; (8004628 <HAL_GPIO_Init+0x320>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x21a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a4e      	ldr	r2, [pc, #312]	; (800462c <HAL_GPIO_Init+0x324>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x216>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4d      	ldr	r2, [pc, #308]	; (8004630 <HAL_GPIO_Init+0x328>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x212>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4c      	ldr	r2, [pc, #304]	; (8004634 <HAL_GPIO_Init+0x32c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x20e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4b      	ldr	r2, [pc, #300]	; (8004638 <HAL_GPIO_Init+0x330>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x20a>
 800450e:	2307      	movs	r3, #7
 8004510:	e00e      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004512:	2308      	movs	r3, #8
 8004514:	e00c      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004516:	2306      	movs	r3, #6
 8004518:	e00a      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451a:	2305      	movs	r3, #5
 800451c:	e008      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800451e:	2304      	movs	r3, #4
 8004520:	e006      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004522:	2303      	movs	r3, #3
 8004524:	e004      	b.n	8004530 <HAL_GPIO_Init+0x228>
 8004526:	2302      	movs	r3, #2
 8004528:	e002      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_GPIO_Init+0x228>
 800452e:	2300      	movs	r3, #0
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	f002 0203 	and.w	r2, r2, #3
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	4093      	lsls	r3, r2
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004540:	4935      	ldr	r1, [pc, #212]	; (8004618 <HAL_GPIO_Init+0x310>)
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3302      	adds	r3, #2
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800454e:	4b3b      	ldr	r3, [pc, #236]	; (800463c <HAL_GPIO_Init+0x334>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004572:	4a32      	ldr	r2, [pc, #200]	; (800463c <HAL_GPIO_Init+0x334>)
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_GPIO_Init+0x334>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	43db      	mvns	r3, r3
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4013      	ands	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800459c:	4a27      	ldr	r2, [pc, #156]	; (800463c <HAL_GPIO_Init+0x334>)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <HAL_GPIO_Init+0x334>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <HAL_GPIO_Init+0x334>)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_GPIO_Init+0x334>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f0:	4a12      	ldr	r2, [pc, #72]	; (800463c <HAL_GPIO_Init+0x334>)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	f67f ae90 	bls.w	8004324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3724      	adds	r7, #36	; 0x24
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	40013800 	.word	0x40013800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400
 8004624:	40020800 	.word	0x40020800
 8004628:	40020c00 	.word	0x40020c00
 800462c:	40021000 	.word	0x40021000
 8004630:	40021400 	.word	0x40021400
 8004634:	40021800 	.word	0x40021800
 8004638:	40021c00 	.word	0x40021c00
 800463c:	40013c00 	.word	0x40013c00

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800465c:	e003      	b.n	8004666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e12b      	b.n	80048de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fbda 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2224      	movs	r2, #36	; 0x24
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046d8:	f000 fd30 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4a81      	ldr	r2, [pc, #516]	; (80048e8 <HAL_I2C_Init+0x274>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d807      	bhi.n	80046f8 <HAL_I2C_Init+0x84>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_I2C_Init+0x278>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	bf94      	ite	ls
 80046f0:	2301      	movls	r3, #1
 80046f2:	2300      	movhi	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e006      	b.n	8004706 <HAL_I2C_Init+0x92>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a7d      	ldr	r2, [pc, #500]	; (80048f0 <HAL_I2C_Init+0x27c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	bf94      	ite	ls
 8004700:	2301      	movls	r3, #1
 8004702:	2300      	movhi	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0e7      	b.n	80048de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a78      	ldr	r2, [pc, #480]	; (80048f4 <HAL_I2C_Init+0x280>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0c9b      	lsrs	r3, r3, #18
 8004718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a6a      	ldr	r2, [pc, #424]	; (80048e8 <HAL_I2C_Init+0x274>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d802      	bhi.n	8004748 <HAL_I2C_Init+0xd4>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3301      	adds	r3, #1
 8004746:	e009      	b.n	800475c <HAL_I2C_Init+0xe8>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	4a69      	ldr	r2, [pc, #420]	; (80048f8 <HAL_I2C_Init+0x284>)
 8004754:	fba2 2303 	umull	r2, r3, r2, r3
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	3301      	adds	r3, #1
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	430b      	orrs	r3, r1
 8004762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800476e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	495c      	ldr	r1, [pc, #368]	; (80048e8 <HAL_I2C_Init+0x274>)
 8004778:	428b      	cmp	r3, r1
 800477a:	d819      	bhi.n	80047b0 <HAL_I2C_Init+0x13c>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	1e59      	subs	r1, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	fbb1 f3f3 	udiv	r3, r1, r3
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004790:	400b      	ands	r3, r1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_I2C_Init+0x138>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1e59      	subs	r1, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047aa:	e051      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047ac:	2304      	movs	r3, #4
 80047ae:	e04f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <HAL_I2C_Init+0x168>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	440b      	add	r3, r1
 80047c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	e012      	b.n	8004802 <HAL_I2C_Init+0x18e>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	1e58      	subs	r0, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6859      	ldr	r1, [r3, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	0099      	lsls	r1, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80047f2:	3301      	adds	r3, #1
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Init+0x196>
 8004806:	2301      	movs	r3, #1
 8004808:	e022      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10e      	bne.n	8004830 <HAL_I2C_Init+0x1bc>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1e58      	subs	r0, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	440b      	add	r3, r1
 8004820:	fbb0 f3f3 	udiv	r3, r0, r3
 8004824:	3301      	adds	r3, #1
 8004826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	e00f      	b.n	8004850 <HAL_I2C_Init+0x1dc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1e58      	subs	r0, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6859      	ldr	r1, [r3, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	0099      	lsls	r1, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	6809      	ldr	r1, [r1, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800487e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6911      	ldr	r1, [r2, #16]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	4311      	orrs	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	000186a0 	.word	0x000186a0
 80048ec:	001e847f 	.word	0x001e847f
 80048f0:	003d08ff 	.word	0x003d08ff
 80048f4:	431bde83 	.word	0x431bde83
 80048f8:	10624dd3 	.word	0x10624dd3

080048fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e264      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e23f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b91      	ldr	r3, [pc, #580]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b8b      	ldr	r3, [pc, #556]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a8a      	ldr	r2, [pc, #552]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a87      	ldr	r2, [pc, #540]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b84      	ldr	r3, [pc, #528]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a83      	ldr	r2, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a80      	ldr	r2, [pc, #512]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd fc12 	bl	80021dc <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fc0e 	bl	80021dc <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e204      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fd fbfe 	bl	80021dc <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fd fbfa 	bl	80021dc <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1f0      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	4b65      	ldr	r3, [pc, #404]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b62      	ldr	r3, [pc, #392]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1c4      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4952      	ldr	r1, [pc, #328]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fd fbb3 	bl	80021dc <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fd fbaf 	bl	80021dc <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1a5      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4940      	ldr	r1, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd fb92 	bl	80021dc <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fd fb8e 	bl	80021dc <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e184      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d030      	beq.n	8004b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd fb72 	bl	80021dc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fd fb6e 	bl	80021dc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e164      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e015      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fd fb5b 	bl	80021dc <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fd fb57 	bl	80021dc <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e14d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a0 	beq.w	8004c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6413      	str	r3, [r2, #64]	; 0x40
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d121      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fd fb1d 	bl	80021dc <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e011      	b.n	8004bca <HAL_RCC_OscConfig+0x2ce>
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	42470000 	.word	0x42470000
 8004bb0:	42470e80 	.word	0x42470e80
 8004bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fd fb10 	bl	80021dc <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e106      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x2f0>
 8004bde:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	e01c      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d10c      	bne.n	8004c0e <HAL_RCC_OscConfig+0x312>
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004c0e:	4b75      	ldr	r3, [pc, #468]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a74      	ldr	r2, [pc, #464]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	4b72      	ldr	r3, [pc, #456]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a71      	ldr	r2, [pc, #452]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fd fad5 	bl	80021dc <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fd fad1 	bl	80021dc <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0c5      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RCC_OscConfig+0x33a>
 8004c58:	e014      	b.n	8004c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fabf 	bl	80021dc <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd fabb 	bl	80021dc <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0af      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c78:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a55      	ldr	r2, [pc, #340]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 809b 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d05c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d141      	bne.n	8004d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fd fa8f 	bl	80021dc <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd fa8b 	bl	80021dc <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e081      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	019b      	lsls	r3, r3, #6
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	4937      	ldr	r1, [pc, #220]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0a:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd fa64 	bl	80021dc <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd fa60 	bl	80021dc <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e056      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x41c>
 8004d36:	e04e      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fd fa4d 	bl	80021dc <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fd fa49 	bl	80021dc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e03f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d58:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x44a>
 8004d64:	e037      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e032      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d028      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d121      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d11a      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40007000 	.word	0x40007000
 8004de4:	40023800 	.word	0x40023800
 8004de8:	42470060 	.word	0x42470060

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cc      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d90c      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d044      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e067      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4934      	ldr	r1, [pc, #208]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fd f97e 	bl	80021dc <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fd f97a 	bl	80021dc <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	490a      	ldr	r1, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc f8d2 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	0801bd88 	.word	0x0801bd88
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	20000004 	.word	0x20000004

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b5b0      	push	{r4, r5, r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	6079      	str	r1, [r7, #4]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	60f9      	str	r1, [r7, #12]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fca:	2100      	movs	r1, #0
 8004fcc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	4952      	ldr	r1, [pc, #328]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 8004fd0:	6889      	ldr	r1, [r1, #8]
 8004fd2:	f001 010c 	and.w	r1, r1, #12
 8004fd6:	2908      	cmp	r1, #8
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_RCC_GetSysClockFreq+0x3e>
 8004fda:	2908      	cmp	r1, #8
 8004fdc:	f200 8094 	bhi.w	8005108 <HAL_RCC_GetSysClockFreq+0x150>
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x32>
 8004fe4:	2904      	cmp	r1, #4
 8004fe6:	d003      	beq.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x38>
 8004fe8:	e08e      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fea:	4b4c      	ldr	r3, [pc, #304]	; (800511c <HAL_RCC_GetSysClockFreq+0x164>)
 8004fec:	60bb      	str	r3, [r7, #8]
       break;
 8004fee:	e08e      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff0:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ff2:	60bb      	str	r3, [r7, #8]
      break;
 8004ff4:	e08b      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff6:	4948      	ldr	r1, [pc, #288]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ff8:	6849      	ldr	r1, [r1, #4]
 8004ffa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ffe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005000:	4945      	ldr	r1, [pc, #276]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 8005002:	6849      	ldr	r1, [r1, #4]
 8005004:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005008:	2900      	cmp	r1, #0
 800500a:	d024      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500c:	4942      	ldr	r1, [pc, #264]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 800500e:	6849      	ldr	r1, [r1, #4]
 8005010:	0989      	lsrs	r1, r1, #6
 8005012:	4608      	mov	r0, r1
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f240 14ff 	movw	r4, #511	; 0x1ff
 800501c:	f04f 0500 	mov.w	r5, #0
 8005020:	ea00 0204 	and.w	r2, r0, r4
 8005024:	ea01 0305 	and.w	r3, r1, r5
 8005028:	493d      	ldr	r1, [pc, #244]	; (8005120 <HAL_RCC_GetSysClockFreq+0x168>)
 800502a:	fb01 f003 	mul.w	r0, r1, r3
 800502e:	2100      	movs	r1, #0
 8005030:	fb01 f102 	mul.w	r1, r1, r2
 8005034:	1844      	adds	r4, r0, r1
 8005036:	493a      	ldr	r1, [pc, #232]	; (8005120 <HAL_RCC_GetSysClockFreq+0x168>)
 8005038:	fba2 0101 	umull	r0, r1, r2, r1
 800503c:	1863      	adds	r3, r4, r1
 800503e:	4619      	mov	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	f7fb f912 	bl	8000270 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e04a      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	ea02 0400 	and.w	r4, r2, r0
 800506e:	ea03 0501 	and.w	r5, r3, r1
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	014b      	lsls	r3, r1, #5
 8005080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005084:	0142      	lsls	r2, r0, #5
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	1b00      	subs	r0, r0, r4
 800508c:	eb61 0105 	sbc.w	r1, r1, r5
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	018b      	lsls	r3, r1, #6
 800509a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800509e:	0182      	lsls	r2, r0, #6
 80050a0:	1a12      	subs	r2, r2, r0
 80050a2:	eb63 0301 	sbc.w	r3, r3, r1
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	00d9      	lsls	r1, r3, #3
 80050b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b4:	00d0      	lsls	r0, r2, #3
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	1912      	adds	r2, r2, r4
 80050bc:	eb45 0303 	adc.w	r3, r5, r3
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	0299      	lsls	r1, r3, #10
 80050ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050ce:	0290      	lsls	r0, r2, #10
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f7fb f8c6 	bl	8000270 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_GetSysClockFreq+0x160>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	60bb      	str	r3, [r7, #8]
      break;
 8005106:	e002      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <HAL_RCC_GetSysClockFreq+0x164>)
 800510a:	60bb      	str	r3, [r7, #8]
      break;
 800510c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510e:	68bb      	ldr	r3, [r7, #8]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bdb0      	pop	{r4, r5, r7, pc}
 8005118:	40023800 	.word	0x40023800
 800511c:	00f42400 	.word	0x00f42400
 8005120:	017d7840 	.word	0x017d7840

08005124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <HAL_RCC_GetHCLKFreq+0x14>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000000 	.word	0x20000000

0800513c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005140:	f7ff fff0 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005144:	4602      	mov	r2, r0
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	0a9b      	lsrs	r3, r3, #10
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	4903      	ldr	r1, [pc, #12]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005152:	5ccb      	ldrb	r3, [r1, r3]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	0801bd98 	.word	0x0801bd98

08005164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005168:	f7ff ffdc 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 800516c:	4602      	mov	r2, r0
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	0b5b      	lsrs	r3, r3, #13
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	4903      	ldr	r1, [pc, #12]	; (8005188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800517a:	5ccb      	ldrb	r3, [r1, r3]
 800517c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40023800 	.word	0x40023800
 8005188:	0801bd98 	.word	0x0801bd98

0800518c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	220f      	movs	r2, #15
 800519a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800519c:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_RCC_GetClockConfig+0x5c>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0203 	and.w	r2, r3, #3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <HAL_RCC_GetClockConfig+0x5c>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <HAL_RCC_GetClockConfig+0x5c>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_GetClockConfig+0x5c>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	08db      	lsrs	r3, r3, #3
 80051c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCC_GetClockConfig+0x60>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0207 	and.w	r2, r3, #7
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40023c00 	.word	0x40023c00

080051f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e041      	b.n	8005286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc fb10 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fc9c 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d001      	beq.n	80052a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e04e      	b.n	8005346 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <HAL_TIM_Base_Start_IT+0xc4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d022      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d01d      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <HAL_TIM_Base_Start_IT+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d018      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a1e      	ldr	r2, [pc, #120]	; (800535c <HAL_TIM_Base_Start_IT+0xcc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d013      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <HAL_TIM_Base_Start_IT+0xd0>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00e      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <HAL_TIM_Base_Start_IT+0xd4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d009      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <HAL_TIM_Base_Start_IT+0xd8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x80>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a18      	ldr	r2, [pc, #96]	; (800536c <HAL_TIM_Base_Start_IT+0xdc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d111      	bne.n	8005334 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d010      	beq.n	8005344 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005332:	e007      	b.n	8005344 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40010000 	.word	0x40010000
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40010400 	.word	0x40010400
 8005368:	40014000 	.word	0x40014000
 800536c:	40001800 	.word	0x40001800

08005370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e041      	b.n	8005406 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f839 	bl	800540e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fbdc 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e041      	b.n	80054b8 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d106      	bne.n	800544e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f839 	bl	80054c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2202      	movs	r2, #2
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3304      	adds	r3, #4
 800545e:	4619      	mov	r1, r3
 8005460:	4610      	mov	r0, r2
 8005462:	f000 fb83 	bl	8005b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0202 	mvn.w	r2, #2
 8005500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fe0a 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb05 	bl	8005b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fb0c 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0204 	mvn.w	r2, #4
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fde0 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fadb 	bl	8005b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fae2 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b08      	cmp	r3, #8
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0208 	mvn.w	r2, #8
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2204      	movs	r2, #4
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fc fdb6 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fab1 	bl	8005b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fab8 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0210 	mvn.w	r2, #16
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2208      	movs	r2, #8
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fd8c 	bl	8002130 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 fa87 	bl	8005b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fa8e 	bl	8005b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0201 	mvn.w	r2, #1
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb fd2e 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 ff60 	bl	8006544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d10e      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b40      	cmp	r3, #64	; 0x40
 800569e:	d107      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa53 	bl	8005b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d10e      	bne.n	80056dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b20      	cmp	r3, #32
 80056ca:	d107      	bne.n	80056dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0220 	mvn.w	r2, #32
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 ff2a 	bl	8006530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f0:	2300      	movs	r3, #0
 80056f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056fe:	2302      	movs	r3, #2
 8005700:	e088      	b.n	8005814 <HAL_TIM_IC_ConfigChannel+0x130>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11b      	bne.n	8005748 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6818      	ldr	r0, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	6819      	ldr	r1, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f000 fc74 	bl	800600c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 020c 	bic.w	r2, r2, #12
 8005732:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	619a      	str	r2, [r3, #24]
 8005746:	e060      	b.n	800580a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b04      	cmp	r3, #4
 800574c:	d11c      	bne.n	8005788 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6819      	ldr	r1, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f000 fcf8 	bl	8006152 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005770:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6999      	ldr	r1, [r3, #24]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	021a      	lsls	r2, r3, #8
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e040      	b.n	800580a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d11b      	bne.n	80057c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6819      	ldr	r1, [r3, #0]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f000 fd45 	bl	800622c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 020c 	bic.w	r2, r2, #12
 80057b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
 80057c4:	e021      	b.n	800580a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	d11c      	bne.n	8005806 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6819      	ldr	r1, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f000 fd62 	bl	80062a4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69da      	ldr	r2, [r3, #28]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69d9      	ldr	r1, [r3, #28]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
 8005804:	e001      	b.n	800580a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005836:	2302      	movs	r3, #2
 8005838:	e0ae      	b.n	8005998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b0c      	cmp	r3, #12
 8005846:	f200 809f 	bhi.w	8005988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005885 	.word	0x08005885
 8005854:	08005989 	.word	0x08005989
 8005858:	08005989 	.word	0x08005989
 800585c:	08005989 	.word	0x08005989
 8005860:	080058c5 	.word	0x080058c5
 8005864:	08005989 	.word	0x08005989
 8005868:	08005989 	.word	0x08005989
 800586c:	08005989 	.word	0x08005989
 8005870:	08005907 	.word	0x08005907
 8005874:	08005989 	.word	0x08005989
 8005878:	08005989 	.word	0x08005989
 800587c:	08005989 	.word	0x08005989
 8005880:	08005947 	.word	0x08005947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fa0e 	bl	8005cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0208 	orr.w	r2, r2, #8
 800589e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0204 	bic.w	r2, r2, #4
 80058ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6999      	ldr	r1, [r3, #24]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	619a      	str	r2, [r3, #24]
      break;
 80058c2:	e064      	b.n	800598e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fa5e 	bl	8005d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]
      break;
 8005904:	e043      	b.n	800598e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68b9      	ldr	r1, [r7, #8]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fab3 	bl	8005e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f042 0208 	orr.w	r2, r2, #8
 8005920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0204 	bic.w	r2, r2, #4
 8005930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	691a      	ldr	r2, [r3, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	61da      	str	r2, [r3, #28]
      break;
 8005944:	e023      	b.n	800598e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fb07 	bl	8005f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69d9      	ldr	r1, [r3, #28]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	021a      	lsls	r2, r3, #8
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	61da      	str	r2, [r3, #28]
      break;
 8005986:	e002      	b.n	800598e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	75fb      	strb	r3, [r7, #23]
      break;
 800598c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e0b4      	b.n	8005b26 <HAL_TIM_ConfigClockSource+0x186>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f4:	d03e      	beq.n	8005a74 <HAL_TIM_ConfigClockSource+0xd4>
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	f200 8087 	bhi.w	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	f000 8086 	beq.w	8005b12 <HAL_TIM_ConfigClockSource+0x172>
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d87f      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b70      	cmp	r3, #112	; 0x70
 8005a0e:	d01a      	beq.n	8005a46 <HAL_TIM_ConfigClockSource+0xa6>
 8005a10:	2b70      	cmp	r3, #112	; 0x70
 8005a12:	d87b      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d050      	beq.n	8005aba <HAL_TIM_ConfigClockSource+0x11a>
 8005a18:	2b60      	cmp	r3, #96	; 0x60
 8005a1a:	d877      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a1c:	2b50      	cmp	r3, #80	; 0x50
 8005a1e:	d03c      	beq.n	8005a9a <HAL_TIM_ConfigClockSource+0xfa>
 8005a20:	2b50      	cmp	r3, #80	; 0x50
 8005a22:	d873      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d058      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0x13a>
 8005a28:	2b40      	cmp	r3, #64	; 0x40
 8005a2a:	d86f      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a2c:	2b30      	cmp	r3, #48	; 0x30
 8005a2e:	d064      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d86b      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d060      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d867      	bhi.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d05c      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d05a      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x15a>
 8005a44:	e062      	b.n	8005b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f000 fc7d 	bl	8006354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	609a      	str	r2, [r3, #8]
      break;
 8005a72:	e04f      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6818      	ldr	r0, [r3, #0]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f000 fc66 	bl	8006354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a96:	609a      	str	r2, [r3, #8]
      break;
 8005a98:	e03c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	6859      	ldr	r1, [r3, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f000 fb24 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2150      	movs	r1, #80	; 0x50
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fc33 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005ab8:	e02c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6818      	ldr	r0, [r3, #0]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6859      	ldr	r1, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f000 fb80 	bl	80061cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2160      	movs	r1, #96	; 0x60
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc23 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005ad8:	e01c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 fb04 	bl	80060f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fc13 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005af8:	e00c      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fc0a 	bl	800631e <TIM_ITRx_SetConfig>
      break;
 8005b0a:	e003      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	e000      	b.n	8005b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a40      	ldr	r2, [pc, #256]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d00f      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3d      	ldr	r2, [pc, #244]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00b      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3c      	ldr	r2, [pc, #240]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d007      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3b      	ldr	r2, [pc, #236]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d108      	bne.n	8005bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2f      	ldr	r2, [pc, #188]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d02b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bcc:	d027      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <TIM_Base_SetConfig+0x118>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d023      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	; (8005c88 <TIM_Base_SetConfig+0x11c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01f      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <TIM_Base_SetConfig+0x120>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d017      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <TIM_Base_SetConfig+0x128>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a27      	ldr	r2, [pc, #156]	; (8005c98 <TIM_Base_SetConfig+0x12c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00f      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a26      	ldr	r2, [pc, #152]	; (8005c9c <TIM_Base_SetConfig+0x130>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00b      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a25      	ldr	r2, [pc, #148]	; (8005ca0 <TIM_Base_SetConfig+0x134>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d007      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <TIM_Base_SetConfig+0x138>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d003      	beq.n	8005c1e <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <TIM_Base_SetConfig+0x13c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d108      	bne.n	8005c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <TIM_Base_SetConfig+0x114>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0xf8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	; (8005c90 <TIM_Base_SetConfig+0x124>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d103      	bne.n	8005c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	691a      	ldr	r2, [r3, #16]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	615a      	str	r2, [r3, #20]
}
 8005c72:	bf00      	nop
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40014400 	.word	0x40014400
 8005c9c:	40014800 	.word	0x40014800
 8005ca0:	40001800 	.word	0x40001800
 8005ca4:	40001c00 	.word	0x40001c00
 8005ca8:	40002000 	.word	0x40002000

08005cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0302 	bic.w	r3, r3, #2
 8005cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a20      	ldr	r2, [pc, #128]	; (8005d84 <TIM_OC1_SetConfig+0xd8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC1_SetConfig+0x64>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1f      	ldr	r2, [pc, #124]	; (8005d88 <TIM_OC1_SetConfig+0xdc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10c      	bne.n	8005d2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0308 	bic.w	r3, r3, #8
 8005d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TIM_OC1_SetConfig+0xd8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_OC1_SetConfig+0x8e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a14      	ldr	r2, [pc, #80]	; (8005d88 <TIM_OC1_SetConfig+0xdc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d111      	bne.n	8005d5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0210 	bic.w	r2, r3, #16
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0320 	bic.w	r3, r3, #32
 8005dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <TIM_OC2_SetConfig+0xe4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d003      	beq.n	8005df4 <TIM_OC2_SetConfig+0x68>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <TIM_OC2_SetConfig+0xe8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10d      	bne.n	8005e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a17      	ldr	r2, [pc, #92]	; (8005e70 <TIM_OC2_SetConfig+0xe4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC2_SetConfig+0x94>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a16      	ldr	r2, [pc, #88]	; (8005e74 <TIM_OC2_SetConfig+0xe8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d113      	bne.n	8005e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40010400 	.word	0x40010400

08005e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0303 	bic.w	r3, r3, #3
 8005eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <TIM_OC3_SetConfig+0xe0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_OC3_SetConfig+0x66>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <TIM_OC3_SetConfig+0xe4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10d      	bne.n	8005efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <TIM_OC3_SetConfig+0xe0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC3_SetConfig+0x92>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <TIM_OC3_SetConfig+0xe4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d113      	bne.n	8005f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400

08005f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	031b      	lsls	r3, r3, #12
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a12      	ldr	r2, [pc, #72]	; (8006004 <TIM_OC4_SetConfig+0xa4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC4_SetConfig+0x68>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <TIM_OC4_SetConfig+0xa8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d109      	bne.n	8005fdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	019b      	lsls	r3, r3, #6
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	621a      	str	r2, [r3, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0201 	bic.w	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <TIM_TI1_SetConfig+0xcc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01b      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d017      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4a25      	ldr	r2, [pc, #148]	; (80060dc <TIM_TI1_SetConfig+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4a24      	ldr	r2, [pc, #144]	; (80060e0 <TIM_TI1_SetConfig+0xd4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <TIM_TI1_SetConfig+0xd8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <TIM_TI1_SetConfig+0xdc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <TIM_TI1_SetConfig+0xe0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_TI1_SetConfig+0x66>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a20      	ldr	r2, [pc, #128]	; (80060f0 <TIM_TI1_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d101      	bne.n	8006076 <TIM_TI1_SetConfig+0x6a>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <TIM_TI1_SetConfig+0x6c>
 8006076:	2300      	movs	r3, #0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e003      	b.n	8006096 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800609c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f023 030a 	bic.w	r3, r3, #10
 80060b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 030a 	and.w	r3, r3, #10
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40001800 	.word	0x40001800

080060f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800611e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 030a 	bic.w	r3, r3, #10
 8006130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006152:	b480      	push	{r7}
 8006154:	b087      	sub	sp, #28
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f023 0210 	bic.w	r2, r3, #16
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	b29b      	uxth	r3, r3
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	621a      	str	r2, [r3, #32]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f023 0210 	bic.w	r2, r3, #16
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	031b      	lsls	r3, r3, #12
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006208:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	621a      	str	r2, [r3, #32]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4313      	orrs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006268:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	b2db      	uxtb	r3, r3
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800627c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	4313      	orrs	r3, r2
 800628a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	621a      	str	r2, [r3, #32]
}
 8006298:	bf00      	nop
 800629a:	371c      	adds	r7, #28
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	031b      	lsls	r3, r3, #12
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	031b      	lsls	r3, r3, #12
 80062fc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	f043 0307 	orr.w	r3, r3, #7
 8006340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800636e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	021a      	lsls	r2, r3, #8
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	431a      	orrs	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4313      	orrs	r3, r2
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e05a      	b.n	8006462 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f8:	d01d      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1a      	ldr	r2, [pc, #104]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a18      	ldr	r2, [pc, #96]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a17      	ldr	r2, [pc, #92]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4313      	orrs	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40010400 	.word	0x40010400
 8006484:	40014000 	.word	0x40014000
 8006488:	40001800 	.word	0x40001800

0800648c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e03d      	b.n	8006524 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e03f      	b.n	80065ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fb fad6 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	; 0x24
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800659a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fc71 	bl	8006e84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695a      	ldr	r2, [r3, #20]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b0ba      	sub	sp, #232	; 0xe8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800661a:	2300      	movs	r3, #0
 800661c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006620:	2300      	movs	r3, #0
 8006622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10f      	bne.n	800665a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_UART_IRQHandler+0x66>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fb5b 	bl	8006d0e <UART_Receive_IT>
      return;
 8006658:	e256      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800665a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80de 	beq.w	8006820 <HAL_UART_IRQHandler+0x22c>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80d1 	beq.w	8006820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_UART_IRQHandler+0xae>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xd2>
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0202 	orr.w	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_UART_IRQHandler+0xf6>
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d011      	beq.n	800671a <HAL_UART_IRQHandler+0x126>
 80066f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0208 	orr.w	r2, r3, #8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 81ed 	beq.w	8006afe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_UART_IRQHandler+0x14e>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fae6 	bl	8006d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_UART_IRQHandler+0x17a>
 8006766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04f      	beq.n	800680e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9ee 	bl	8006b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d141      	bne.n	8006806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800679c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d9      	bne.n	8006782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d013      	beq.n	80067fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	4a7d      	ldr	r2, [pc, #500]	; (80069d0 <HAL_UART_IRQHandler+0x3dc>)
 80067dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fc f98c 	bl	8002b00 <HAL_DMA_Abort_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e00e      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f990 	bl	8006b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e00a      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f98c 	bl	8006b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e006      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f988 	bl	8006b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800681a:	e170      	b.n	8006afe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	bf00      	nop
    return;
 800681e:	e16e      	b.n	8006afe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	2b01      	cmp	r3, #1
 8006826:	f040 814a 	bne.w	8006abe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8143 	beq.w	8006abe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 813c 	beq.w	8006abe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	f040 80b4 	bne.w	80069d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8140 	beq.w	8006b02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800688a:	429a      	cmp	r2, r3
 800688c:	f080 8139 	bcs.w	8006b02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006896:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a2:	f000 8088 	beq.w	80069b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d9      	bne.n	80068a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3314      	adds	r3, #20
 80068f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006916:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800691a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800691e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e1      	bne.n	80068f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800693e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e3      	bne.n	800692e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006986:	f023 0310 	bic.w	r3, r3, #16
 800698a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006998:	65ba      	str	r2, [r7, #88]	; 0x58
 800699a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800699e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e3      	bne.n	8006974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fc f835 	bl	8002a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f8b6 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069cc:	e099      	b.n	8006b02 <HAL_UART_IRQHandler+0x50e>
 80069ce:	bf00      	nop
 80069d0:	08006c17 	.word	0x08006c17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 808b 	beq.w	8006b06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8086 	beq.w	8006b06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	330c      	adds	r3, #12
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006a20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a26:	e841 2300 	strex	r3, r2, [r1]
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e3      	bne.n	80069fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3314      	adds	r3, #20
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	623b      	str	r3, [r7, #32]
   return(result);
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f023 0301 	bic.w	r3, r3, #1
 8006a48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a56:	633a      	str	r2, [r7, #48]	; 0x30
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5e:	e841 2300 	strex	r3, r2, [r1]
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1e3      	bne.n	8006a32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	330c      	adds	r3, #12
 8006a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0310 	bic.w	r3, r3, #16
 8006a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006a9c:	61fa      	str	r2, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	69b9      	ldr	r1, [r7, #24]
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e3      	bne.n	8006a78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f83e 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006abc:	e023      	b.n	8006b06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HAL_UART_IRQHandler+0x4ea>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f8b1 	bl	8006c3e <UART_Transmit_IT>
    return;
 8006adc:	e014      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <HAL_UART_IRQHandler+0x514>
 8006aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d008      	beq.n	8006b08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f8f1 	bl	8006cde <UART_EndTransmit_IT>
    return;
 8006afc:	e004      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
    return;
 8006afe:	bf00      	nop
 8006b00:	e002      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
      return;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
      return;
 8006b06:	bf00      	nop
  }
}
 8006b08:	37e8      	adds	r7, #232	; 0xe8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop

08006b10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b095      	sub	sp, #84	; 0x54
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	330c      	adds	r3, #12
 8006b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b78:	643a      	str	r2, [r7, #64]	; 0x40
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e5      	bne.n	8006b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3314      	adds	r3, #20
 8006b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d119      	bne.n	8006bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	647b      	str	r3, [r7, #68]	; 0x44
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006be8:	61ba      	str	r2, [r7, #24]
 8006bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6979      	ldr	r1, [r7, #20]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e5      	bne.n	8006bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c0a:	bf00      	nop
 8006c0c:	3754      	adds	r7, #84	; 0x54
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff ff77 	bl	8006b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b21      	cmp	r3, #33	; 0x21
 8006c50:	d13e      	bne.n	8006cd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	d114      	bne.n	8006c86 <UART_Transmit_IT+0x48>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d110      	bne.n	8006c86 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	1c9a      	adds	r2, r3, #2
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]
 8006c84:	e008      	b.n	8006c98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	1c59      	adds	r1, r3, #1
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	6211      	str	r1, [r2, #32]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10f      	bne.n	8006ccc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fb f9e6 	bl	80020d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b08c      	sub	sp, #48	; 0x30
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b22      	cmp	r3, #34	; 0x22
 8006d20:	f040 80ab 	bne.w	8006e7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2c:	d117      	bne.n	8006d5e <UART_Receive_IT+0x50>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d113      	bne.n	8006d5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	1c9a      	adds	r2, r3, #2
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d5c:	e026      	b.n	8006dac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d70:	d007      	beq.n	8006d82 <UART_Receive_IT+0x74>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <UART_Receive_IT+0x82>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e008      	b.n	8006da2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4619      	mov	r1, r3
 8006dba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d15a      	bne.n	8006e76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0220 	bic.w	r2, r2, #32
 8006dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0201 	bic.w	r2, r2, #1
 8006dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d135      	bne.n	8006e6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	613b      	str	r3, [r7, #16]
   return(result);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f023 0310 	bic.w	r3, r3, #16
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	623a      	str	r2, [r7, #32]
 8006e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	69f9      	ldr	r1, [r7, #28]
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b10      	cmp	r3, #16
 8006e46:	d10a      	bne.n	8006e5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fe67 	bl	8006b38 <HAL_UARTEx_RxEventCallback>
 8006e6a:	e002      	b.n	8006e72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fe4f 	bl	8006b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e002      	b.n	8006e7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	e000      	b.n	8006e7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
  }
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3730      	adds	r7, #48	; 0x30
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	b09f      	sub	sp, #124	; 0x7c
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9a:	68d9      	ldr	r1, [r3, #12]
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	ea40 0301 	orr.w	r3, r0, r1
 8006ea4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ec8:	f021 010c 	bic.w	r1, r1, #12
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee2:	6999      	ldr	r1, [r3, #24]
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	ea40 0301 	orr.w	r3, r0, r1
 8006eec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4bc5      	ldr	r3, [pc, #788]	; (8007208 <UART_SetConfig+0x384>)
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d004      	beq.n	8006f02 <UART_SetConfig+0x7e>
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	4bc3      	ldr	r3, [pc, #780]	; (800720c <UART_SetConfig+0x388>)
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d103      	bne.n	8006f0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f02:	f7fe f92f 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
 8006f06:	6778      	str	r0, [r7, #116]	; 0x74
 8006f08:	e002      	b.n	8006f10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7fe f917 	bl	800513c <HAL_RCC_GetPCLK1Freq>
 8006f0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f18:	f040 80b6 	bne.w	8007088 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f1e:	461c      	mov	r4, r3
 8006f20:	f04f 0500 	mov.w	r5, #0
 8006f24:	4622      	mov	r2, r4
 8006f26:	462b      	mov	r3, r5
 8006f28:	1891      	adds	r1, r2, r2
 8006f2a:	6439      	str	r1, [r7, #64]	; 0x40
 8006f2c:	415b      	adcs	r3, r3
 8006f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f34:	1912      	adds	r2, r2, r4
 8006f36:	eb45 0303 	adc.w	r3, r5, r3
 8006f3a:	f04f 0000 	mov.w	r0, #0
 8006f3e:	f04f 0100 	mov.w	r1, #0
 8006f42:	00d9      	lsls	r1, r3, #3
 8006f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f48:	00d0      	lsls	r0, r2, #3
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	1911      	adds	r1, r2, r4
 8006f50:	6639      	str	r1, [r7, #96]	; 0x60
 8006f52:	416b      	adcs	r3, r5
 8006f54:	667b      	str	r3, [r7, #100]	; 0x64
 8006f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	1891      	adds	r1, r2, r2
 8006f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f64:	415b      	adcs	r3, r3
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f70:	f7f9 f97e 	bl	8000270 <__aeabi_uldivmod>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4ba5      	ldr	r3, [pc, #660]	; (8007210 <UART_SetConfig+0x38c>)
 8006f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	011e      	lsls	r6, r3, #4
 8006f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f84:	461c      	mov	r4, r3
 8006f86:	f04f 0500 	mov.w	r5, #0
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	1891      	adds	r1, r2, r2
 8006f90:	6339      	str	r1, [r7, #48]	; 0x30
 8006f92:	415b      	adcs	r3, r3
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
 8006f96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f9a:	1912      	adds	r2, r2, r4
 8006f9c:	eb45 0303 	adc.w	r3, r5, r3
 8006fa0:	f04f 0000 	mov.w	r0, #0
 8006fa4:	f04f 0100 	mov.w	r1, #0
 8006fa8:	00d9      	lsls	r1, r3, #3
 8006faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fae:	00d0      	lsls	r0, r2, #3
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	1911      	adds	r1, r2, r4
 8006fb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fb8:	416b      	adcs	r3, r5
 8006fba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	1891      	adds	r1, r2, r2
 8006fc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fca:	415b      	adcs	r3, r3
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006fd6:	f7f9 f94b 	bl	8000270 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4b8c      	ldr	r3, [pc, #560]	; (8007210 <UART_SetConfig+0x38c>)
 8006fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	2164      	movs	r1, #100	; 0x64
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	3332      	adds	r3, #50	; 0x32
 8006ff2:	4a87      	ldr	r2, [pc, #540]	; (8007210 <UART_SetConfig+0x38c>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007000:	441e      	add	r6, r3
 8007002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007004:	4618      	mov	r0, r3
 8007006:	f04f 0100 	mov.w	r1, #0
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	1894      	adds	r4, r2, r2
 8007010:	623c      	str	r4, [r7, #32]
 8007012:	415b      	adcs	r3, r3
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800701a:	1812      	adds	r2, r2, r0
 800701c:	eb41 0303 	adc.w	r3, r1, r3
 8007020:	f04f 0400 	mov.w	r4, #0
 8007024:	f04f 0500 	mov.w	r5, #0
 8007028:	00dd      	lsls	r5, r3, #3
 800702a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800702e:	00d4      	lsls	r4, r2, #3
 8007030:	4622      	mov	r2, r4
 8007032:	462b      	mov	r3, r5
 8007034:	1814      	adds	r4, r2, r0
 8007036:	653c      	str	r4, [r7, #80]	; 0x50
 8007038:	414b      	adcs	r3, r1
 800703a:	657b      	str	r3, [r7, #84]	; 0x54
 800703c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	461a      	mov	r2, r3
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	1891      	adds	r1, r2, r2
 8007048:	61b9      	str	r1, [r7, #24]
 800704a:	415b      	adcs	r3, r3
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007052:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007056:	f7f9 f90b 	bl	8000270 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b6c      	ldr	r3, [pc, #432]	; (8007210 <UART_SetConfig+0x38c>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a67      	ldr	r2, [pc, #412]	; (8007210 <UART_SetConfig+0x38c>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0207 	and.w	r2, r3, #7
 800707e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4432      	add	r2, r6
 8007084:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007086:	e0b9      	b.n	80071fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708a:	461c      	mov	r4, r3
 800708c:	f04f 0500 	mov.w	r5, #0
 8007090:	4622      	mov	r2, r4
 8007092:	462b      	mov	r3, r5
 8007094:	1891      	adds	r1, r2, r2
 8007096:	6139      	str	r1, [r7, #16]
 8007098:	415b      	adcs	r3, r3
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a0:	1912      	adds	r2, r2, r4
 80070a2:	eb45 0303 	adc.w	r3, r5, r3
 80070a6:	f04f 0000 	mov.w	r0, #0
 80070aa:	f04f 0100 	mov.w	r1, #0
 80070ae:	00d9      	lsls	r1, r3, #3
 80070b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b4:	00d0      	lsls	r0, r2, #3
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	eb12 0804 	adds.w	r8, r2, r4
 80070be:	eb43 0905 	adc.w	r9, r3, r5
 80070c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f04f 0100 	mov.w	r1, #0
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	f04f 0300 	mov.w	r3, #0
 80070d4:	008b      	lsls	r3, r1, #2
 80070d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070da:	0082      	lsls	r2, r0, #2
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 f8c6 	bl	8000270 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b49      	ldr	r3, [pc, #292]	; (8007210 <UART_SetConfig+0x38c>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011e      	lsls	r6, r3, #4
 80070f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f4:	4618      	mov	r0, r3
 80070f6:	f04f 0100 	mov.w	r1, #0
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	1894      	adds	r4, r2, r2
 8007100:	60bc      	str	r4, [r7, #8]
 8007102:	415b      	adcs	r3, r3
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800710a:	1812      	adds	r2, r2, r0
 800710c:	eb41 0303 	adc.w	r3, r1, r3
 8007110:	f04f 0400 	mov.w	r4, #0
 8007114:	f04f 0500 	mov.w	r5, #0
 8007118:	00dd      	lsls	r5, r3, #3
 800711a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800711e:	00d4      	lsls	r4, r2, #3
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	1814      	adds	r4, r2, r0
 8007126:	64bc      	str	r4, [r7, #72]	; 0x48
 8007128:	414b      	adcs	r3, r1
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4618      	mov	r0, r3
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	008b      	lsls	r3, r1, #2
 8007140:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007144:	0082      	lsls	r2, r0, #2
 8007146:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800714a:	f7f9 f891 	bl	8000270 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4b2f      	ldr	r3, [pc, #188]	; (8007210 <UART_SetConfig+0x38c>)
 8007154:	fba3 1302 	umull	r1, r3, r3, r2
 8007158:	095b      	lsrs	r3, r3, #5
 800715a:	2164      	movs	r1, #100	; 0x64
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	3332      	adds	r3, #50	; 0x32
 8007166:	4a2a      	ldr	r2, [pc, #168]	; (8007210 <UART_SetConfig+0x38c>)
 8007168:	fba2 2303 	umull	r2, r3, r2, r3
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007172:	441e      	add	r6, r3
 8007174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007176:	4618      	mov	r0, r3
 8007178:	f04f 0100 	mov.w	r1, #0
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	1894      	adds	r4, r2, r2
 8007182:	603c      	str	r4, [r7, #0]
 8007184:	415b      	adcs	r3, r3
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800718c:	1812      	adds	r2, r2, r0
 800718e:	eb41 0303 	adc.w	r3, r1, r3
 8007192:	f04f 0400 	mov.w	r4, #0
 8007196:	f04f 0500 	mov.w	r5, #0
 800719a:	00dd      	lsls	r5, r3, #3
 800719c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071a0:	00d4      	lsls	r4, r2, #3
 80071a2:	4622      	mov	r2, r4
 80071a4:	462b      	mov	r3, r5
 80071a6:	eb12 0a00 	adds.w	sl, r2, r0
 80071aa:	eb43 0b01 	adc.w	fp, r3, r1
 80071ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f04f 0100 	mov.w	r1, #0
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	008b      	lsls	r3, r1, #2
 80071c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071c6:	0082      	lsls	r2, r0, #2
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	f7f9 f850 	bl	8000270 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <UART_SetConfig+0x38c>)
 80071d6:	fba3 1302 	umull	r1, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	2164      	movs	r1, #100	; 0x64
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	3332      	adds	r3, #50	; 0x32
 80071e8:	4a09      	ldr	r2, [pc, #36]	; (8007210 <UART_SetConfig+0x38c>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	095b      	lsrs	r3, r3, #5
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4432      	add	r2, r6
 80071fa:	609a      	str	r2, [r3, #8]
}
 80071fc:	bf00      	nop
 80071fe:	377c      	adds	r7, #124	; 0x7c
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f

08007214 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800721a:	2100      	movs	r1, #0
 800721c:	2000      	movs	r0, #0
 800721e:	f004 fbfd 	bl	800ba1c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007222:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <MX_LWIP_Init+0xb8>)
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <MX_LWIP_Init+0xbc>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800722e:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <MX_LWIP_Init+0xc0>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007234:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <MX_LWIP_Init+0xc4>)
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	4b28      	ldr	r3, [pc, #160]	; (80072dc <MX_LWIP_Init+0xc8>)
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	2300      	movs	r3, #0
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <MX_LWIP_Init+0xc0>)
 8007242:	4a23      	ldr	r2, [pc, #140]	; (80072d0 <MX_LWIP_Init+0xbc>)
 8007244:	4921      	ldr	r1, [pc, #132]	; (80072cc <MX_LWIP_Init+0xb8>)
 8007246:	4826      	ldr	r0, [pc, #152]	; (80072e0 <MX_LWIP_Init+0xcc>)
 8007248:	f005 f96c 	bl	800c524 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800724c:	4824      	ldr	r0, [pc, #144]	; (80072e0 <MX_LWIP_Init+0xcc>)
 800724e:	f005 fb23 	bl	800c898 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007252:	4b23      	ldr	r3, [pc, #140]	; (80072e0 <MX_LWIP_Init+0xcc>)
 8007254:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007264:	481e      	ldr	r0, [pc, #120]	; (80072e0 <MX_LWIP_Init+0xcc>)
 8007266:	f005 fb27 	bl	800c8b8 <netif_set_up>
 800726a:	e002      	b.n	8007272 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800726c:	481c      	ldr	r0, [pc, #112]	; (80072e0 <MX_LWIP_Init+0xcc>)
 800726e:	f005 fb8f 	bl	800c990 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007272:	491c      	ldr	r1, [pc, #112]	; (80072e4 <MX_LWIP_Init+0xd0>)
 8007274:	481a      	ldr	r0, [pc, #104]	; (80072e0 <MX_LWIP_Init+0xcc>)
 8007276:	f005 fc25 	bl	800cac4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800727a:	2200      	movs	r2, #0
 800727c:	2101      	movs	r1, #1
 800727e:	2001      	movs	r0, #1
 8007280:	f000 fea6 	bl	8007fd0 <osSemaphoreNew>
 8007284:	4603      	mov	r3, r0
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <MX_LWIP_Init+0xd4>)
 8007288:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800728a:	4b18      	ldr	r3, [pc, #96]	; (80072ec <MX_LWIP_Init+0xd8>)
 800728c:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <MX_LWIP_Init+0xcc>)
 800728e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007290:	4b15      	ldr	r3, [pc, #84]	; (80072e8 <MX_LWIP_Init+0xd4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a15      	ldr	r2, [pc, #84]	; (80072ec <MX_LWIP_Init+0xd8>)
 8007296:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007298:	2224      	movs	r2, #36	; 0x24
 800729a:	2100      	movs	r1, #0
 800729c:	4814      	ldr	r0, [pc, #80]	; (80072f0 <MX_LWIP_Init+0xdc>)
 800729e:	f010 fdb0 	bl	8017e02 <memset>
  attributes.name = "LinkThr";
 80072a2:	4b13      	ldr	r3, [pc, #76]	; (80072f0 <MX_LWIP_Init+0xdc>)
 80072a4:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <MX_LWIP_Init+0xe0>)
 80072a6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <MX_LWIP_Init+0xdc>)
 80072aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072ae:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80072b0:	4b0f      	ldr	r3, [pc, #60]	; (80072f0 <MX_LWIP_Init+0xdc>)
 80072b2:	2210      	movs	r2, #16
 80072b4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80072b6:	4a0e      	ldr	r2, [pc, #56]	; (80072f0 <MX_LWIP_Init+0xdc>)
 80072b8:	490c      	ldr	r1, [pc, #48]	; (80072ec <MX_LWIP_Init+0xd8>)
 80072ba:	480f      	ldr	r0, [pc, #60]	; (80072f8 <MX_LWIP_Init+0xe4>)
 80072bc:	f000 fccd 	bl	8007c5a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80072c0:	4807      	ldr	r0, [pc, #28]	; (80072e0 <MX_LWIP_Init+0xcc>)
 80072c2:	f00c fd61 	bl	8013d88 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80072c6:	bf00      	nop
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20006598 	.word	0x20006598
 80072d0:	2000659c 	.word	0x2000659c
 80072d4:	200065a0 	.word	0x200065a0
 80072d8:	0800b959 	.word	0x0800b959
 80072dc:	08007925 	.word	0x08007925
 80072e0:	20006560 	.word	0x20006560
 80072e4:	08007a09 	.word	0x08007a09
 80072e8:	200000a4 	.word	0x200000a4
 80072ec:	20006534 	.word	0x20006534
 80072f0:	2000653c 	.word	0x2000653c
 80072f4:	08018d94 	.word	0x08018d94
 80072f8:	08007991 	.word	0x08007991

080072fc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	; 0x38
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	609a      	str	r2, [r3, #8]
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a4a      	ldr	r2, [pc, #296]	; (8007444 <HAL_ETH_MspInit+0x148>)
 800731a:	4293      	cmp	r3, r2
 800731c:	f040 808d 	bne.w	800743a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007320:	2300      	movs	r3, #0
 8007322:	623b      	str	r3, [r7, #32]
 8007324:	4b48      	ldr	r3, [pc, #288]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	4a47      	ldr	r2, [pc, #284]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800732a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800732e:	6313      	str	r3, [r2, #48]	; 0x30
 8007330:	4b45      	ldr	r3, [pc, #276]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007338:	623b      	str	r3, [r7, #32]
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	4b41      	ldr	r3, [pc, #260]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	4a40      	ldr	r2, [pc, #256]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007346:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800734a:	6313      	str	r3, [r2, #48]	; 0x30
 800734c:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	4a39      	ldr	r2, [pc, #228]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007366:	6313      	str	r3, [r2, #48]	; 0x30
 8007368:	4b37      	ldr	r3, [pc, #220]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007370:	61bb      	str	r3, [r7, #24]
 8007372:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007374:	2300      	movs	r3, #0
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	4b33      	ldr	r3, [pc, #204]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	4a32      	ldr	r2, [pc, #200]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800737e:	f043 0304 	orr.w	r3, r3, #4
 8007382:	6313      	str	r3, [r2, #48]	; 0x30
 8007384:	4b30      	ldr	r3, [pc, #192]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	4b2c      	ldr	r3, [pc, #176]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	4a2b      	ldr	r2, [pc, #172]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	6313      	str	r3, [r2, #48]	; 0x30
 80073a0:	4b29      	ldr	r3, [pc, #164]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	4b25      	ldr	r3, [pc, #148]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	4a24      	ldr	r2, [pc, #144]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	6313      	str	r3, [r2, #48]	; 0x30
 80073bc:	4b22      	ldr	r3, [pc, #136]	; (8007448 <HAL_ETH_MspInit+0x14c>)
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80073c8:	2332      	movs	r3, #50	; 0x32
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073cc:	2302      	movs	r3, #2
 80073ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073d4:	2303      	movs	r3, #3
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80073d8:	230b      	movs	r3, #11
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e0:	4619      	mov	r1, r3
 80073e2:	481a      	ldr	r0, [pc, #104]	; (800744c <HAL_ETH_MspInit+0x150>)
 80073e4:	f7fc ff90 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80073e8:	2386      	movs	r3, #134	; 0x86
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ec:	2302      	movs	r3, #2
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073f0:	2300      	movs	r3, #0
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073f4:	2303      	movs	r3, #3
 80073f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80073f8:	230b      	movs	r3, #11
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007400:	4619      	mov	r1, r3
 8007402:	4813      	ldr	r0, [pc, #76]	; (8007450 <HAL_ETH_MspInit+0x154>)
 8007404:	f7fc ff80 	bl	8004308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007408:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740e:	2302      	movs	r3, #2
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	2300      	movs	r3, #0
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007416:	2303      	movs	r3, #3
 8007418:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800741a:	230b      	movs	r3, #11
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800741e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007422:	4619      	mov	r1, r3
 8007424:	480b      	ldr	r0, [pc, #44]	; (8007454 <HAL_ETH_MspInit+0x158>)
 8007426:	f7fc ff6f 	bl	8004308 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800742a:	2200      	movs	r2, #0
 800742c:	2105      	movs	r1, #5
 800742e:	203d      	movs	r0, #61	; 0x3d
 8007430:	f7fb fa1e 	bl	8002870 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007434:	203d      	movs	r0, #61	; 0x3d
 8007436:	f7fb fa37 	bl	80028a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800743a:	bf00      	nop
 800743c:	3738      	adds	r7, #56	; 0x38
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40028000 	.word	0x40028000
 8007448:	40023800 	.word	0x40023800
 800744c:	40020800 	.word	0x40020800
 8007450:	40020000 	.word	0x40020000
 8007454:	40020400 	.word	0x40020400

08007458 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <HAL_ETH_RxCpltCallback+0x1c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fe8f 	bl	8008188 <osSemaphoreRelease>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200000a8 	.word	0x200000a8

08007478 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b090      	sub	sp, #64	; 0x40
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007484:	4b5d      	ldr	r3, [pc, #372]	; (80075fc <low_level_init+0x184>)
 8007486:	4a5e      	ldr	r2, [pc, #376]	; (8007600 <low_level_init+0x188>)
 8007488:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800748a:	4b5c      	ldr	r3, [pc, #368]	; (80075fc <low_level_init+0x184>)
 800748c:	2201      	movs	r2, #1
 800748e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007490:	4b5a      	ldr	r3, [pc, #360]	; (80075fc <low_level_init+0x184>)
 8007492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007496:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007498:	4b58      	ldr	r3, [pc, #352]	; (80075fc <low_level_init+0x184>)
 800749a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800749e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80074a0:	4b56      	ldr	r3, [pc, #344]	; (80075fc <low_level_init+0x184>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80074a6:	2300      	movs	r3, #0
 80074a8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80074aa:	2380      	movs	r3, #128	; 0x80
 80074ac:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80074ae:	23e1      	movs	r3, #225	; 0xe1
 80074b0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80074b6:	2300      	movs	r3, #0
 80074b8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80074ba:	2300      	movs	r3, #0
 80074bc:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80074be:	4a4f      	ldr	r2, [pc, #316]	; (80075fc <low_level_init+0x184>)
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80074c6:	4b4d      	ldr	r3, [pc, #308]	; (80075fc <low_level_init+0x184>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80074cc:	4b4b      	ldr	r3, [pc, #300]	; (80075fc <low_level_init+0x184>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80074d2:	4b4a      	ldr	r3, [pc, #296]	; (80075fc <low_level_init+0x184>)
 80074d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074d8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074da:	4848      	ldr	r0, [pc, #288]	; (80075fc <low_level_init+0x184>)
 80074dc:	f7fb fd6e 	bl	8002fbc <HAL_ETH_Init>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80074e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d108      	bne.n	8007500 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80074f4:	f043 0304 	orr.w	r3, r3, #4
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007500:	2304      	movs	r3, #4
 8007502:	4a40      	ldr	r2, [pc, #256]	; (8007604 <low_level_init+0x18c>)
 8007504:	4940      	ldr	r1, [pc, #256]	; (8007608 <low_level_init+0x190>)
 8007506:	483d      	ldr	r0, [pc, #244]	; (80075fc <low_level_init+0x184>)
 8007508:	f7fb fef4 	bl	80032f4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800750c:	2304      	movs	r3, #4
 800750e:	4a3f      	ldr	r2, [pc, #252]	; (800760c <low_level_init+0x194>)
 8007510:	493f      	ldr	r1, [pc, #252]	; (8007610 <low_level_init+0x198>)
 8007512:	483a      	ldr	r0, [pc, #232]	; (80075fc <low_level_init+0x184>)
 8007514:	f7fb ff57 	bl	80033c6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2206      	movs	r2, #6
 800751c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007520:	4b36      	ldr	r3, [pc, #216]	; (80075fc <low_level_init+0x184>)
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800752c:	4b33      	ldr	r3, [pc, #204]	; (80075fc <low_level_init+0x184>)
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	785a      	ldrb	r2, [r3, #1]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007538:	4b30      	ldr	r3, [pc, #192]	; (80075fc <low_level_init+0x184>)
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	789a      	ldrb	r2, [r3, #2]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <low_level_init+0x184>)
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	78da      	ldrb	r2, [r3, #3]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007550:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <low_level_init+0x184>)
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	791a      	ldrb	r2, [r3, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800755c:	4b27      	ldr	r3, [pc, #156]	; (80075fc <low_level_init+0x184>)
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	795a      	ldrb	r2, [r3, #5]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800756e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007576:	f043 030a 	orr.w	r3, r3, #10
 800757a:	b2da      	uxtb	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8007582:	2200      	movs	r2, #0
 8007584:	2101      	movs	r1, #1
 8007586:	2001      	movs	r0, #1
 8007588:	f000 fd22 	bl	8007fd0 <osSemaphoreNew>
 800758c:	4603      	mov	r3, r0
 800758e:	4a21      	ldr	r2, [pc, #132]	; (8007614 <low_level_init+0x19c>)
 8007590:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	2224      	movs	r2, #36	; 0x24
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f010 fc31 	bl	8017e02 <memset>
  attributes.name = "EthIf";
 80075a0:	4b1d      	ldr	r3, [pc, #116]	; (8007618 <low_level_init+0x1a0>)
 80075a2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80075a4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80075a8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80075aa:	2330      	movs	r3, #48	; 0x30
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	461a      	mov	r2, r3
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4819      	ldr	r0, [pc, #100]	; (800761c <low_level_init+0x1a4>)
 80075b8:	f000 fb4f 	bl	8007c5a <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80075bc:	480f      	ldr	r0, [pc, #60]	; (80075fc <low_level_init+0x184>)
 80075be:	f7fc fa2a 	bl	8003a16 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80075c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075c6:	461a      	mov	r2, r3
 80075c8:	211d      	movs	r1, #29
 80075ca:	480c      	ldr	r0, [pc, #48]	; (80075fc <low_level_init+0x184>)
 80075cc:	f7fc f955 	bl	800387a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	f043 030b 	orr.w	r3, r3, #11
 80075d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	461a      	mov	r2, r3
 80075dc:	211d      	movs	r1, #29
 80075de:	4807      	ldr	r0, [pc, #28]	; (80075fc <low_level_init+0x184>)
 80075e0:	f7fc f9b3 	bl	800394a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80075e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075e8:	461a      	mov	r2, r3
 80075ea:	211d      	movs	r1, #29
 80075ec:	4803      	ldr	r0, [pc, #12]	; (80075fc <low_level_init+0x184>)
 80075ee:	f7fc f944 	bl	800387a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80075f2:	bf00      	nop
 80075f4:	3740      	adds	r7, #64	; 0x40
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	20007e74 	.word	0x20007e74
 8007600:	40028000 	.word	0x40028000
 8007604:	20007ebc 	.word	0x20007ebc
 8007608:	200065a4 	.word	0x200065a4
 800760c:	20006624 	.word	0x20006624
 8007610:	20007df4 	.word	0x20007df4
 8007614:	200000a8 	.word	0x200000a8
 8007618:	08018d9c 	.word	0x08018d9c
 800761c:	080078c5 	.word	0x080078c5

08007620 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800762a:	4b4b      	ldr	r3, [pc, #300]	; (8007758 <low_level_output+0x138>)
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007642:	4b45      	ldr	r3, [pc, #276]	; (8007758 <low_level_output+0x138>)
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	e05a      	b.n	8007708 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da03      	bge.n	8007662 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800765a:	23f8      	movs	r3, #248	; 0xf8
 800765c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007660:	e05c      	b.n	800771c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	895b      	ldrh	r3, [r3, #10]
 8007666:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800766c:	e02f      	b.n	80076ce <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	18d0      	adds	r0, r2, r3
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	18d1      	adds	r1, r2, r3
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007682:	3304      	adds	r3, #4
 8007684:	461a      	mov	r2, r3
 8007686:	f010 fbae 	bl	8017de6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	da03      	bge.n	80076a0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007698:	23f8      	movs	r3, #248	; 0xf8
 800769a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800769e:	e03d      	b.n	800771c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80076b0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80076bc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80076c8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80076d8:	4293      	cmp	r3, r2
 80076da:	d8c8      	bhi.n	800766e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	18d0      	adds	r0, r2, r3
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4619      	mov	r1, r3
 80076ee:	f010 fb7a 	bl	8017de6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4413      	add	r3, r2
 8007700:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	623b      	str	r3, [r7, #32]
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1a1      	bne.n	8007652 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	4811      	ldr	r0, [pc, #68]	; (8007758 <low_level_output+0x138>)
 8007712:	f7fb fec5 	bl	80034a0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800771c:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <low_level_output+0x138>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007724:	3314      	adds	r3, #20
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <low_level_output+0x138>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007738:	3314      	adds	r3, #20
 800773a:	2220      	movs	r2, #32
 800773c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800773e:	4b06      	ldr	r3, [pc, #24]	; (8007758 <low_level_output+0x138>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007746:	3304      	adds	r3, #4
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800774c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007750:	4618      	mov	r0, r3
 8007752:	3728      	adds	r7, #40	; 0x28
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20007e74 	.word	0x20007e74

0800775c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007768:	2300      	movs	r3, #0
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007780:	484f      	ldr	r0, [pc, #316]	; (80078c0 <low_level_input+0x164>)
 8007782:	f7fb ff77 	bl	8003674 <HAL_ETH_GetReceivedFrame_IT>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <low_level_input+0x34>

    return NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	e092      	b.n	80078b6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007790:	4b4b      	ldr	r3, [pc, #300]	; (80078c0 <low_level_input+0x164>)
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007796:	4b4a      	ldr	r3, [pc, #296]	; (80078c0 <low_level_input+0x164>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800779c:	89fb      	ldrh	r3, [r7, #14]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80077a2:	89fb      	ldrh	r3, [r7, #14]
 80077a4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80077a8:	4619      	mov	r1, r3
 80077aa:	2000      	movs	r0, #0
 80077ac:	f005 fa54 	bl	800cc58 <pbuf_alloc>
 80077b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d04b      	beq.n	8007850 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80077b8:	4b41      	ldr	r3, [pc, #260]	; (80078c0 <low_level_input+0x164>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077c6:	e040      	b.n	800784a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	895b      	ldrh	r3, [r3, #10]
 80077cc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80077d2:	e021      	b.n	8007818 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	18d0      	adds	r0, r2, r3
 80077dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	18d1      	adds	r1, r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80077e8:	3304      	adds	r3, #4
 80077ea:	461a      	mov	r2, r3
 80077ec:	f010 fafb 	bl	8017de6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007806:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007812:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007822:	4293      	cmp	r3, r2
 8007824:	d8d6      	bhi.n	80077d4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	18d0      	adds	r0, r2, r3
 800782e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4619      	mov	r1, r3
 8007838:	f010 fad5 	bl	8017de6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800783c:	69fa      	ldr	r2, [r7, #28]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	4413      	add	r3, r2
 8007842:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1bb      	bne.n	80077c8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007850:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <low_level_input+0x164>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
 800785a:	e00b      	b.n	8007874 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	3301      	adds	r3, #1
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <low_level_input+0x164>)
 8007876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	429a      	cmp	r2, r3
 800787c:	d3ee      	bcc.n	800785c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <low_level_input+0x164>)
 8007880:	2200      	movs	r2, #0
 8007882:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007884:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <low_level_input+0x164>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800788c:	3314      	adds	r3, #20
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007898:	4b09      	ldr	r3, [pc, #36]	; (80078c0 <low_level_input+0x164>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a0:	3314      	adds	r3, #20
 80078a2:	2280      	movs	r2, #128	; 0x80
 80078a4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <low_level_input+0x164>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ae:	3308      	adds	r3, #8
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3730      	adds	r7, #48	; 0x30
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20007e74 	.word	0x20007e74

080078c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80078d0:	4b12      	ldr	r3, [pc, #72]	; (800791c <ethernetif_input+0x58>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f04f 31ff 	mov.w	r1, #4294967295
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fc03 	bl	80080e4 <osSemaphoreAcquire>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f5      	bne.n	80078d0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80078e4:	480e      	ldr	r0, [pc, #56]	; (8007920 <ethernetif_input+0x5c>)
 80078e6:	f010 f8df 	bl	8017aa8 <sys_mutex_lock>
        p = low_level_input( netif );
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff ff36 	bl	800775c <low_level_input>
 80078f0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007908:	68b8      	ldr	r0, [r7, #8]
 800790a:	f005 fc89 	bl	800d220 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800790e:	4804      	ldr	r0, [pc, #16]	; (8007920 <ethernetif_input+0x5c>)
 8007910:	f010 f8d9 	bl	8017ac6 <sys_mutex_unlock>
      } while(p!=NULL);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e4      	bne.n	80078e4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800791a:	e7d9      	b.n	80078d0 <ethernetif_input+0xc>
 800791c:	200000a8 	.word	0x200000a8
 8007920:	200096cc 	.word	0x200096cc

08007924 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <ethernetif_init+0x1c>
 8007932:	4b0e      	ldr	r3, [pc, #56]	; (800796c <ethernetif_init+0x48>)
 8007934:	f44f 720c 	mov.w	r2, #560	; 0x230
 8007938:	490d      	ldr	r1, [pc, #52]	; (8007970 <ethernetif_init+0x4c>)
 800793a:	480e      	ldr	r0, [pc, #56]	; (8007974 <ethernetif_init+0x50>)
 800793c:	f010 fac4 	bl	8017ec8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2273      	movs	r2, #115	; 0x73
 8007944:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2274      	movs	r2, #116	; 0x74
 800794c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <ethernetif_init+0x54>)
 8007954:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a08      	ldr	r2, [pc, #32]	; (800797c <ethernetif_init+0x58>)
 800795a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fd8b 	bl	8007478 <low_level_init>

  return ERR_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	08018da4 	.word	0x08018da4
 8007970:	08018dc0 	.word	0x08018dc0
 8007974:	08018dd0 	.word	0x08018dd0
 8007978:	08015c55 	.word	0x08015c55
 800797c:	08007621 	.word	0x08007621

08007980 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007984:	f7fa fc2a 	bl	80021dc <HAL_GetTick>
 8007988:	4603      	mov	r3, r0
}
 800798a:	4618      	mov	r0, r3
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80079a0:	f107 0308 	add.w	r3, r7, #8
 80079a4:	461a      	mov	r2, r3
 80079a6:	2101      	movs	r1, #1
 80079a8:	4816      	ldr	r0, [pc, #88]	; (8007a04 <ethernetif_set_link+0x74>)
 80079aa:	f7fb ff66 	bl	800387a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f003 0304 	and.w	r3, r3, #4
 80079b4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <ethernetif_set_link+0x48>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f005 f80f 	bl	800c9f4 <netif_set_link_up>
 80079d6:	e011      	b.n	80079fc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80079e0:	089b      	lsrs	r3, r3, #2
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <ethernetif_set_link+0x6c>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d104      	bne.n	80079fc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f005 f834 	bl	800ca64 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80079fc:	20c8      	movs	r0, #200	; 0xc8
 80079fe:	f000 f9be 	bl	8007d7e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a02:	e7cd      	b.n	80079a0 <ethernetif_set_link+0x10>
 8007a04:	20007e74 	.word	0x20007e74

08007a08 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a1e:	089b      	lsrs	r3, r3, #2
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d05d      	beq.n	8007ae6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a2a:	4b34      	ldr	r3, [pc, #208]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03f      	beq.n	8007ab2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a36:	2100      	movs	r1, #0
 8007a38:	4830      	ldr	r0, [pc, #192]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a3a:	f7fb ff86 	bl	800394a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a3e:	f7fa fbcd 	bl	80021dc <HAL_GetTick>
 8007a42:	4603      	mov	r3, r0
 8007a44:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	482b      	ldr	r0, [pc, #172]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a50:	f7fb ff13 	bl	800387a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a54:	f7fa fbc2 	bl	80021dc <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a62:	d828      	bhi.n	8007ab6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0eb      	beq.n	8007a46 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a6e:	f107 0308 	add.w	r3, r7, #8
 8007a72:	461a      	mov	r2, r3
 8007a74:	2110      	movs	r1, #16
 8007a76:	4821      	ldr	r0, [pc, #132]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a78:	f7fb feff 	bl	800387a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a86:	4b1d      	ldr	r3, [pc, #116]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	e002      	b.n	8007a96 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <ethernetif_update_config+0xf4>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007aa0:	4b16      	ldr	r3, [pc, #88]	; (8007afc <ethernetif_update_config+0xf4>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	609a      	str	r2, [r3, #8]
 8007aa6:	e016      	b.n	8007ad6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007aa8:	4b14      	ldr	r3, [pc, #80]	; (8007afc <ethernetif_update_config+0xf4>)
 8007aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007aae:	609a      	str	r2, [r3, #8]
 8007ab0:	e011      	b.n	8007ad6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007ab2:	bf00      	nop
 8007ab4:	e000      	b.n	8007ab8 <ethernetif_update_config+0xb0>
          goto error;
 8007ab6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ab8:	4b10      	ldr	r3, [pc, #64]	; (8007afc <ethernetif_update_config+0xf4>)
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	08db      	lsrs	r3, r3, #3
 8007abe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <ethernetif_update_config+0xf4>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	085b      	lsrs	r3, r3, #1
 8007ac6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	2100      	movs	r1, #0
 8007ad0:	480a      	ldr	r0, [pc, #40]	; (8007afc <ethernetif_update_config+0xf4>)
 8007ad2:	f7fb ff3a 	bl	800394a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4808      	ldr	r0, [pc, #32]	; (8007afc <ethernetif_update_config+0xf4>)
 8007ada:	f7fb fffb 	bl	8003ad4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ade:	4807      	ldr	r0, [pc, #28]	; (8007afc <ethernetif_update_config+0xf4>)
 8007ae0:	f7fb ff99 	bl	8003a16 <HAL_ETH_Start>
 8007ae4:	e002      	b.n	8007aec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007ae6:	4805      	ldr	r0, [pc, #20]	; (8007afc <ethernetif_update_config+0xf4>)
 8007ae8:	f7fb ffc4 	bl	8003a74 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f807 	bl	8007b00 <ethernetif_notify_conn_changed>
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20007e74 	.word	0x20007e74

08007b00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <__NVIC_SetPriority>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	6039      	str	r1, [r7, #0]
 8007b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	db0a      	blt.n	8007b3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	490c      	ldr	r1, [pc, #48]	; (8007b60 <__NVIC_SetPriority+0x4c>)
 8007b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b32:	0112      	lsls	r2, r2, #4
 8007b34:	b2d2      	uxtb	r2, r2
 8007b36:	440b      	add	r3, r1
 8007b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b3c:	e00a      	b.n	8007b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4908      	ldr	r1, [pc, #32]	; (8007b64 <__NVIC_SetPriority+0x50>)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	0112      	lsls	r2, r2, #4
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	440b      	add	r3, r1
 8007b52:	761a      	strb	r2, [r3, #24]
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	e000e100 	.word	0xe000e100
 8007b64:	e000ed00 	.word	0xe000ed00

08007b68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <SysTick_Handler+0x1c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b70:	f002 fc96 	bl	800a4a0 <xTaskGetSchedulerState>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d001      	beq.n	8007b7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b7a:	f003 fb7d 	bl	800b278 <xPortSysTickHandler>
  }
}
 8007b7e:	bf00      	nop
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	e000e010 	.word	0xe000e010

08007b88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f06f 0004 	mvn.w	r0, #4
 8007b92:	f7ff ffbf 	bl	8007b14 <__NVIC_SetPriority>
#endif
}
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ba2:	f3ef 8305 	mrs	r3, IPSR
 8007ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ba8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007bae:	f06f 0305 	mvn.w	r3, #5
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e00c      	b.n	8007bd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <osKernelInitialize+0x44>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007bbe:	4b08      	ldr	r3, [pc, #32]	; (8007be0 <osKernelInitialize+0x44>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e002      	b.n	8007bd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bca:	f04f 33ff 	mov.w	r3, #4294967295
 8007bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bd0:	687b      	ldr	r3, [r7, #4]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	200000ac 	.word	0x200000ac

08007be4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bea:	f3ef 8305 	mrs	r3, IPSR
 8007bee:	603b      	str	r3, [r7, #0]
  return(result);
 8007bf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bf6:	f06f 0305 	mvn.w	r3, #5
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	e010      	b.n	8007c20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bfe:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <osKernelStart+0x48>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d109      	bne.n	8007c1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c06:	f7ff ffbf 	bl	8007b88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <osKernelStart+0x48>)
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c10:	f001 ffc8 	bl	8009ba4 <vTaskStartScheduler>
      stat = osOK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e002      	b.n	8007c20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c20:	687b      	ldr	r3, [r7, #4]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	200000ac 	.word	0x200000ac

08007c30 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c36:	f3ef 8305 	mrs	r3, IPSR
 8007c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c3c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007c42:	f002 f8db 	bl	8009dfc <xTaskGetTickCountFromISR>
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	e002      	b.n	8007c50 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007c4a:	f002 f8c7 	bl	8009ddc <xTaskGetTickCount>
 8007c4e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007c50:	687b      	ldr	r3, [r7, #4]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b08e      	sub	sp, #56	; 0x38
 8007c5e:	af04      	add	r7, sp, #16
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c6a:	f3ef 8305 	mrs	r3, IPSR
 8007c6e:	617b      	str	r3, [r7, #20]
  return(result);
 8007c70:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d17e      	bne.n	8007d74 <osThreadNew+0x11a>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d07b      	beq.n	8007d74 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c7c:	2380      	movs	r3, #128	; 0x80
 8007c7e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c80:	2318      	movs	r3, #24
 8007c82:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d045      	beq.n	8007d20 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <osThreadNew+0x48>
        name = attr->name;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d008      	beq.n	8007cc8 <osThreadNew+0x6e>
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	2b38      	cmp	r3, #56	; 0x38
 8007cba:	d805      	bhi.n	8007cc8 <osThreadNew+0x6e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <osThreadNew+0x72>
        return (NULL);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	e054      	b.n	8007d76 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d003      	beq.n	8007cdc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	089b      	lsrs	r3, r3, #2
 8007cda:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <osThreadNew+0xa8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	2bbb      	cmp	r3, #187	; 0xbb
 8007cea:	d90a      	bls.n	8007d02 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <osThreadNew+0xa8>
        mem = 1;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	e010      	b.n	8007d24 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <osThreadNew+0xca>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <osThreadNew+0xca>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d104      	bne.n	8007d24 <osThreadNew+0xca>
          mem = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	e001      	b.n	8007d24 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d110      	bne.n	8007d4c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d32:	9202      	str	r2, [sp, #8]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fd43 	bl	80097cc <xTaskCreateStatic>
 8007d46:	4603      	mov	r3, r0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e013      	b.n	8007d74 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d110      	bne.n	8007d74 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f001 fd8e 	bl	8009886 <xTaskCreate>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d001      	beq.n	8007d74 <osThreadNew+0x11a>
            hTask = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d74:	693b      	ldr	r3, [r7, #16]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3728      	adds	r7, #40	; 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d86:	f3ef 8305 	mrs	r3, IPSR
 8007d8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <osDelay+0x1c>
    stat = osErrorISR;
 8007d92:	f06f 0305 	mvn.w	r3, #5
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e007      	b.n	8007daa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <osDelay+0x2c>
      vTaskDelay(ticks);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fec9 	bl	8009b3c <vTaskDelay>
    }
  }

  return (stat);
 8007daa:	68fb      	ldr	r3, [r7, #12]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dc0:	f3ef 8305 	mrs	r3, IPSR
 8007dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dc6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d174      	bne.n	8007eb6 <osMutexNew+0x102>
    if (attr != NULL) {
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <osMutexNew+0x26>
      type = attr->attr_bits;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	61bb      	str	r3, [r7, #24]
 8007dd8:	e001      	b.n	8007dde <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <osMutexNew+0x3a>
      rmtx = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	e001      	b.n	8007df2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d15c      	bne.n	8007eb6 <osMutexNew+0x102>
      mem = -1;
 8007dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007e00:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d015      	beq.n	8007e34 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d006      	beq.n	8007e1e <osMutexNew+0x6a>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b4f      	cmp	r3, #79	; 0x4f
 8007e16:	d902      	bls.n	8007e1e <osMutexNew+0x6a>
          mem = 1;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	613b      	str	r3, [r7, #16]
 8007e1c:	e00c      	b.n	8007e38 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <osMutexNew+0x84>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <osMutexNew+0x84>
            mem = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e001      	b.n	8007e38 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d112      	bne.n	8007e64 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	2004      	movs	r0, #4
 8007e4c:	f000 fd69 	bl	8008922 <xQueueCreateMutexStatic>
 8007e50:	61f8      	str	r0, [r7, #28]
 8007e52:	e016      	b.n	8007e82 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	f000 fd61 	bl	8008922 <xQueueCreateMutexStatic>
 8007e60:	61f8      	str	r0, [r7, #28]
 8007e62:	e00e      	b.n	8007e82 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e70:	2004      	movs	r0, #4
 8007e72:	f000 fd3e 	bl	80088f2 <xQueueCreateMutex>
 8007e76:	61f8      	str	r0, [r7, #28]
 8007e78:	e003      	b.n	8007e82 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	f000 fd39 	bl	80088f2 <xQueueCreateMutex>
 8007e80:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00c      	beq.n	8007ea2 <osMutexNew+0xee>
        if (attr != NULL) {
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <osMutexNew+0xe2>
          name = attr->name;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]
 8007e94:	e001      	b.n	8007e9a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	69f8      	ldr	r0, [r7, #28]
 8007e9e:	f001 fc0d 	bl	80096bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d006      	beq.n	8007eb6 <osMutexNew+0x102>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	f043 0301 	orr.w	r3, r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007eb6:	69fb      	ldr	r3, [r7, #28]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3720      	adds	r7, #32
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f023 0301 	bic.w	r3, r3, #1
 8007ed0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007eea:	f06f 0305 	mvn.w	r3, #5
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e02c      	b.n	8007f4c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d103      	bne.n	8007f00 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007ef8:	f06f 0303 	mvn.w	r3, #3
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e025      	b.n	8007f4c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d011      	beq.n	8007f2a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6938      	ldr	r0, [r7, #16]
 8007f0a:	f000 fd59 	bl	80089c0 <xQueueTakeMutexRecursive>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d01b      	beq.n	8007f4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007f1a:	f06f 0301 	mvn.w	r3, #1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	e014      	b.n	8007f4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f22:	f06f 0302 	mvn.w	r3, #2
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e010      	b.n	8007f4c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6938      	ldr	r0, [r7, #16]
 8007f2e:	f001 f8ed 	bl	800910c <xQueueSemaphoreTake>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d009      	beq.n	8007f4c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007f3e:	f06f 0301 	mvn.w	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e002      	b.n	8007f4c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f46:	f06f 0302 	mvn.w	r3, #2
 8007f4a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f4c:	697b      	ldr	r3, [r7, #20]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f72:	f3ef 8305 	mrs	r3, IPSR
 8007f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f7e:	f06f 0305 	mvn.w	r3, #5
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e01f      	b.n	8007fc6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007f8c:	f06f 0303 	mvn.w	r3, #3
 8007f90:	617b      	str	r3, [r7, #20]
 8007f92:	e018      	b.n	8007fc6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d009      	beq.n	8007fae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f000 fcdc 	bl	8008958 <xQueueGiveMutexRecursive>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d00f      	beq.n	8007fc6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fa6:	f06f 0302 	mvn.w	r3, #2
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e00b      	b.n	8007fc6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	6938      	ldr	r0, [r7, #16]
 8007fb6:	f000 fda3 	bl	8008b00 <xQueueGenericSend>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d002      	beq.n	8007fc6 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007fc0:	f06f 0302 	mvn.w	r3, #2
 8007fc4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007fc6:	697b      	ldr	r3, [r7, #20]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe0:	f3ef 8305 	mrs	r3, IPSR
 8007fe4:	613b      	str	r3, [r7, #16]
  return(result);
 8007fe6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d175      	bne.n	80080d8 <osSemaphoreNew+0x108>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d072      	beq.n	80080d8 <osSemaphoreNew+0x108>
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d86e      	bhi.n	80080d8 <osSemaphoreNew+0x108>
    mem = -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d015      	beq.n	8008032 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <osSemaphoreNew+0x4c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b4f      	cmp	r3, #79	; 0x4f
 8008014:	d902      	bls.n	800801c <osSemaphoreNew+0x4c>
        mem = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
 800801a:	e00c      	b.n	8008036 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <osSemaphoreNew+0x66>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <osSemaphoreNew+0x66>
          mem = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e001      	b.n	8008036 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d04c      	beq.n	80080d8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d128      	bne.n	8008096 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d10a      	bne.n	8008060 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2203      	movs	r2, #3
 8008050:	9200      	str	r2, [sp, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	2100      	movs	r1, #0
 8008056:	2001      	movs	r0, #1
 8008058:	f000 fb5c 	bl	8008714 <xQueueGenericCreateStatic>
 800805c:	61f8      	str	r0, [r7, #28]
 800805e:	e005      	b.n	800806c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008060:	2203      	movs	r2, #3
 8008062:	2100      	movs	r1, #0
 8008064:	2001      	movs	r0, #1
 8008066:	f000 fbcd 	bl	8008804 <xQueueGenericCreate>
 800806a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d022      	beq.n	80080b8 <osSemaphoreNew+0xe8>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01f      	beq.n	80080b8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008078:	2300      	movs	r3, #0
 800807a:	2200      	movs	r2, #0
 800807c:	2100      	movs	r1, #0
 800807e:	69f8      	ldr	r0, [r7, #28]
 8008080:	f000 fd3e 	bl	8008b00 <xQueueGenericSend>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d016      	beq.n	80080b8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800808a:	69f8      	ldr	r0, [r7, #28]
 800808c:	f001 f9ca 	bl	8009424 <vQueueDelete>
            hSemaphore = NULL;
 8008090:	2300      	movs	r3, #0
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	e010      	b.n	80080b8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d108      	bne.n	80080ae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	461a      	mov	r2, r3
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fcc1 	bl	8008a2c <xQueueCreateCountingSemaphoreStatic>
 80080aa:	61f8      	str	r0, [r7, #28]
 80080ac:	e004      	b.n	80080b8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fcf2 	bl	8008a9a <xQueueCreateCountingSemaphore>
 80080b6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00c      	beq.n	80080d8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <osSemaphoreNew+0xfc>
          name = attr->name;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e001      	b.n	80080d0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	69f8      	ldr	r0, [r7, #28]
 80080d4:	f001 faf2 	bl	80096bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80080d8:	69fb      	ldr	r3, [r7, #28]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3720      	adds	r7, #32
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080fc:	f06f 0303 	mvn.w	r3, #3
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e039      	b.n	8008178 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008104:	f3ef 8305 	mrs	r3, IPSR
 8008108:	60fb      	str	r3, [r7, #12]
  return(result);
 800810a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800810c:	2b00      	cmp	r3, #0
 800810e:	d022      	beq.n	8008156 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008116:	f06f 0303 	mvn.w	r3, #3
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e02c      	b.n	8008178 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	461a      	mov	r2, r3
 8008128:	2100      	movs	r1, #0
 800812a:	6938      	ldr	r0, [r7, #16]
 800812c:	f001 f8fa 	bl	8009324 <xQueueReceiveFromISR>
 8008130:	4603      	mov	r3, r0
 8008132:	2b01      	cmp	r3, #1
 8008134:	d003      	beq.n	800813e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008136:	f06f 0302 	mvn.w	r3, #2
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e01c      	b.n	8008178 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d019      	beq.n	8008178 <osSemaphoreAcquire+0x94>
 8008144:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <osSemaphoreAcquire+0xa0>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	e010      	b.n	8008178 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6938      	ldr	r0, [r7, #16]
 800815a:	f000 ffd7 	bl	800910c <xQueueSemaphoreTake>
 800815e:	4603      	mov	r3, r0
 8008160:	2b01      	cmp	r3, #1
 8008162:	d009      	beq.n	8008178 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800816a:	f06f 0301 	mvn.w	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e002      	b.n	8008178 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008172:	f06f 0302 	mvn.w	r3, #2
 8008176:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008178:	697b      	ldr	r3, [r7, #20]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800819e:	f06f 0303 	mvn.w	r3, #3
 80081a2:	617b      	str	r3, [r7, #20]
 80081a4:	e02c      	b.n	8008200 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a6:	f3ef 8305 	mrs	r3, IPSR
 80081aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80081ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d01a      	beq.n	80081e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081b6:	f107 0308 	add.w	r3, r7, #8
 80081ba:	4619      	mov	r1, r3
 80081bc:	6938      	ldr	r0, [r7, #16]
 80081be:	f000 fe38 	bl	8008e32 <xQueueGiveFromISR>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d003      	beq.n	80081d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80081c8:	f06f 0302 	mvn.w	r3, #2
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e017      	b.n	8008200 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d014      	beq.n	8008200 <osSemaphoreRelease+0x78>
 80081d6:	4b0d      	ldr	r3, [pc, #52]	; (800820c <osSemaphoreRelease+0x84>)
 80081d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	e00b      	b.n	8008200 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081e8:	2300      	movs	r3, #0
 80081ea:	2200      	movs	r2, #0
 80081ec:	2100      	movs	r1, #0
 80081ee:	6938      	ldr	r0, [r7, #16]
 80081f0:	f000 fc86 	bl	8008b00 <xQueueGenericSend>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d002      	beq.n	8008200 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081fa:	f06f 0302 	mvn.w	r3, #2
 80081fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008200:	697b      	ldr	r3, [r7, #20]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	e000ed04 	.word	0xe000ed04

08008210 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	; 0x28
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008220:	f3ef 8305 	mrs	r3, IPSR
 8008224:	613b      	str	r3, [r7, #16]
  return(result);
 8008226:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008228:	2b00      	cmp	r3, #0
 800822a:	d15f      	bne.n	80082ec <osMessageQueueNew+0xdc>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d05c      	beq.n	80082ec <osMessageQueueNew+0xdc>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d059      	beq.n	80082ec <osMessageQueueNew+0xdc>
    mem = -1;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d029      	beq.n	8008298 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d012      	beq.n	8008272 <osMessageQueueNew+0x62>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b4f      	cmp	r3, #79	; 0x4f
 8008252:	d90e      	bls.n	8008272 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00a      	beq.n	8008272 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695a      	ldr	r2, [r3, #20]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	fb01 f303 	mul.w	r3, r1, r3
 8008268:	429a      	cmp	r2, r3
 800826a:	d302      	bcc.n	8008272 <osMessageQueueNew+0x62>
        mem = 1;
 800826c:	2301      	movs	r3, #1
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e014      	b.n	800829c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d110      	bne.n	800829c <osMessageQueueNew+0x8c>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10c      	bne.n	800829c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d104      	bne.n	800829c <osMessageQueueNew+0x8c>
          mem = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	e001      	b.n	800829c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d10b      	bne.n	80082ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691a      	ldr	r2, [r3, #16]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2100      	movs	r1, #0
 80082ac:	9100      	str	r1, [sp, #0]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fa2f 	bl	8008714 <xQueueGenericCreateStatic>
 80082b6:	61f8      	str	r0, [r7, #28]
 80082b8:	e008      	b.n	80082cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d105      	bne.n	80082cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082c0:	2200      	movs	r2, #0
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fa9d 	bl	8008804 <xQueueGenericCreate>
 80082ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00c      	beq.n	80082ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	e001      	b.n	80082e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082e4:	6979      	ldr	r1, [r7, #20]
 80082e6:	69f8      	ldr	r0, [r7, #28]
 80082e8:	f001 f9e8 	bl	80096bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80082ec:	69fb      	ldr	r3, [r7, #28]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	4613      	mov	r3, r2
 8008306:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800830c:	2300      	movs	r3, #0
 800830e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008310:	f3ef 8305 	mrs	r3, IPSR
 8008314:	617b      	str	r3, [r7, #20]
  return(result);
 8008316:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008318:	2b00      	cmp	r3, #0
 800831a:	d028      	beq.n	800836e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <osMessageQueuePut+0x36>
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <osMessageQueuePut+0x36>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800832e:	f06f 0303 	mvn.w	r3, #3
 8008332:	61fb      	str	r3, [r7, #28]
 8008334:	e038      	b.n	80083a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800833a:	f107 0210 	add.w	r2, r7, #16
 800833e:	2300      	movs	r3, #0
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	69b8      	ldr	r0, [r7, #24]
 8008344:	f000 fcda 	bl	8008cfc <xQueueGenericSendFromISR>
 8008348:	4603      	mov	r3, r0
 800834a:	2b01      	cmp	r3, #1
 800834c:	d003      	beq.n	8008356 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800834e:	f06f 0302 	mvn.w	r3, #2
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	e028      	b.n	80083a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d025      	beq.n	80083a8 <osMessageQueuePut+0xb0>
 800835c:	4b15      	ldr	r3, [pc, #84]	; (80083b4 <osMessageQueuePut+0xbc>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e01c      	b.n	80083a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <osMessageQueuePut+0x82>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800837a:	f06f 0303 	mvn.w	r3, #3
 800837e:	61fb      	str	r3, [r7, #28]
 8008380:	e012      	b.n	80083a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008382:	2300      	movs	r3, #0
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	68b9      	ldr	r1, [r7, #8]
 8008388:	69b8      	ldr	r0, [r7, #24]
 800838a:	f000 fbb9 	bl	8008b00 <xQueueGenericSend>
 800838e:	4603      	mov	r3, r0
 8008390:	2b01      	cmp	r3, #1
 8008392:	d009      	beq.n	80083a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800839a:	f06f 0301 	mvn.w	r3, #1
 800839e:	61fb      	str	r3, [r7, #28]
 80083a0:	e002      	b.n	80083a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80083a2:	f06f 0302 	mvn.w	r3, #2
 80083a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80083a8:	69fb      	ldr	r3, [r7, #28]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3720      	adds	r7, #32
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ce:	f3ef 8305 	mrs	r3, IPSR
 80083d2:	617b      	str	r3, [r7, #20]
  return(result);
 80083d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d028      	beq.n	800842c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d005      	beq.n	80083ec <osMessageQueueGet+0x34>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <osMessageQueueGet+0x34>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80083ec:	f06f 0303 	mvn.w	r3, #3
 80083f0:	61fb      	str	r3, [r7, #28]
 80083f2:	e037      	b.n	8008464 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80083f8:	f107 0310 	add.w	r3, r7, #16
 80083fc:	461a      	mov	r2, r3
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	69b8      	ldr	r0, [r7, #24]
 8008402:	f000 ff8f 	bl	8009324 <xQueueReceiveFromISR>
 8008406:	4603      	mov	r3, r0
 8008408:	2b01      	cmp	r3, #1
 800840a:	d003      	beq.n	8008414 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800840c:	f06f 0302 	mvn.w	r3, #2
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	e027      	b.n	8008464 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d024      	beq.n	8008464 <osMessageQueueGet+0xac>
 800841a:	4b15      	ldr	r3, [pc, #84]	; (8008470 <osMessageQueueGet+0xb8>)
 800841c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	e01b      	b.n	8008464 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d002      	beq.n	8008438 <osMessageQueueGet+0x80>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d103      	bne.n	8008440 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008438:	f06f 0303 	mvn.w	r3, #3
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e011      	b.n	8008464 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	69b8      	ldr	r0, [r7, #24]
 8008446:	f000 fd81 	bl	8008f4c <xQueueReceive>
 800844a:	4603      	mov	r3, r0
 800844c:	2b01      	cmp	r3, #1
 800844e:	d009      	beq.n	8008464 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008456:	f06f 0301 	mvn.w	r3, #1
 800845a:	61fb      	str	r3, [r7, #28]
 800845c:	e002      	b.n	8008464 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800845e:	f06f 0302 	mvn.w	r3, #2
 8008462:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008464:	69fb      	ldr	r3, [r7, #28]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a07      	ldr	r2, [pc, #28]	; (80084a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	4a06      	ldr	r2, [pc, #24]	; (80084a4 <vApplicationGetIdleTaskMemory+0x30>)
 800848a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2280      	movs	r2, #128	; 0x80
 8008490:	601a      	str	r2, [r3, #0]
}
 8008492:	bf00      	nop
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	200000b0 	.word	0x200000b0
 80084a4:	2000016c 	.word	0x2000016c

080084a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a07      	ldr	r2, [pc, #28]	; (80084d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80084b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	4a06      	ldr	r2, [pc, #24]	; (80084d8 <vApplicationGetTimerTaskMemory+0x30>)
 80084be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084c6:	601a      	str	r2, [r3, #0]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	2000036c 	.word	0x2000036c
 80084d8:	20000428 	.word	0x20000428

080084dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f103 0208 	add.w	r2, r3, #8
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295
 80084f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f103 0208 	add.w	r2, r3, #8
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f103 0208 	add.w	r2, r3, #8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr

08008536 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008536:	b480      	push	{r7}
 8008538:	b085      	sub	sp, #20
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689a      	ldr	r2, [r3, #8]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	601a      	str	r2, [r3, #0]
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d103      	bne.n	800859e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e00c      	b.n	80085b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3308      	adds	r3, #8
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e002      	b.n	80085ac <vListInsert+0x2e>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d2f6      	bcs.n	80085a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6892      	ldr	r2, [r2, #8]
 8008606:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6852      	ldr	r2, [r2, #4]
 8008610:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	429a      	cmp	r2, r3
 800861a:	d103      	bne.n	8008624 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	1e5a      	subs	r2, r3, #1
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d10a      	bne.n	800866e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800866e:	f002 fd71 	bl	800b154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800867e:	fb01 f303 	mul.w	r3, r1, r3
 8008682:	441a      	add	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	3b01      	subs	r3, #1
 80086a0:	68f9      	ldr	r1, [r7, #12]
 80086a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086a4:	fb01 f303 	mul.w	r3, r1, r3
 80086a8:	441a      	add	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	22ff      	movs	r2, #255	; 0xff
 80086b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	22ff      	movs	r2, #255	; 0xff
 80086ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d114      	bne.n	80086ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01a      	beq.n	8008702 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3310      	adds	r3, #16
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fd13 	bl	800a0fc <xTaskRemoveFromEventList>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d012      	beq.n	8008702 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086dc:	4b0c      	ldr	r3, [pc, #48]	; (8008710 <xQueueGenericReset+0xcc>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	e009      	b.n	8008702 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3310      	adds	r3, #16
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff fef2 	bl	80084dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3324      	adds	r3, #36	; 0x24
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff feed 	bl	80084dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008702:	f002 fd57 	bl	800b1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008706:	2301      	movs	r3, #1
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	e000ed04 	.word	0xe000ed04

08008714 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08e      	sub	sp, #56	; 0x38
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10a      	bne.n	800875a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008756:	bf00      	nop
 8008758:	e7fe      	b.n	8008758 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <xQueueGenericCreateStatic+0x52>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <xQueueGenericCreateStatic+0x56>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <xQueueGenericCreateStatic+0x58>
 800876a:	2300      	movs	r3, #0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	623b      	str	r3, [r7, #32]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <xQueueGenericCreateStatic+0x7e>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <xQueueGenericCreateStatic+0x82>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <xQueueGenericCreateStatic+0x84>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	61fb      	str	r3, [r7, #28]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087b2:	2350      	movs	r3, #80	; 0x50
 80087b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b50      	cmp	r3, #80	; 0x50
 80087ba:	d00a      	beq.n	80087d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	61bb      	str	r3, [r7, #24]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00d      	beq.n	80087fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4613      	mov	r3, r2
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f83f 	bl	8008878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3730      	adds	r7, #48	; 0x30
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08a      	sub	sp, #40	; 0x28
 8008808:	af02      	add	r7, sp, #8
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	613b      	str	r3, [r7, #16]
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	fb02 f303 	mul.w	r3, r2, r3
 8008836:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	3350      	adds	r3, #80	; 0x50
 800883c:	4618      	mov	r0, r3
 800883e:	f002 fdab 	bl	800b398 <pvPortMalloc>
 8008842:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d011      	beq.n	800886e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	3350      	adds	r3, #80	; 0x50
 8008852:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800885c:	79fa      	ldrb	r2, [r7, #7]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4613      	mov	r3, r2
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f805 	bl	8008878 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800886e:	69bb      	ldr	r3, [r7, #24]
	}
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d103      	bne.n	8008894 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	e002      	b.n	800889a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80088a6:	2101      	movs	r1, #1
 80088a8:	69b8      	ldr	r0, [r7, #24]
 80088aa:	f7ff fecb 	bl	8008644 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80088b6:	bf00      	nop
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088de:	2300      	movs	r3, #0
 80088e0:	2200      	movs	r2, #0
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f90b 	bl	8008b00 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b086      	sub	sp, #24
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	4603      	mov	r3, r0
 80088fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088fc:	2301      	movs	r3, #1
 80088fe:	617b      	str	r3, [r7, #20]
 8008900:	2300      	movs	r3, #0
 8008902:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	461a      	mov	r2, r3
 8008908:	6939      	ldr	r1, [r7, #16]
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f7ff ff7a 	bl	8008804 <xQueueGenericCreate>
 8008910:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff ffd3 	bl	80088be <prvInitialiseMutex>

		return xNewQueue;
 8008918:	68fb      	ldr	r3, [r7, #12]
	}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008922:	b580      	push	{r7, lr}
 8008924:	b088      	sub	sp, #32
 8008926:	af02      	add	r7, sp, #8
 8008928:	4603      	mov	r3, r0
 800892a:	6039      	str	r1, [r7, #0]
 800892c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2200      	movs	r2, #0
 800893e:	6939      	ldr	r1, [r7, #16]
 8008940:	6978      	ldr	r0, [r7, #20]
 8008942:	f7ff fee7 	bl	8008714 <xQueueGenericCreateStatic>
 8008946:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff ffb8 	bl	80088be <prvInitialiseMutex>

		return xNewQueue;
 800894e:	68fb      	ldr	r3, [r7, #12]
	}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b087      	sub	sp, #28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	60fb      	str	r3, [r7, #12]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	689c      	ldr	r4, [r3, #8]
 8008984:	f001 fd7c 	bl	800a480 <xTaskGetCurrentTaskHandle>
 8008988:	4603      	mov	r3, r0
 800898a:	429c      	cmp	r4, r3
 800898c:	d111      	bne.n	80089b2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	1e5a      	subs	r2, r3, #1
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80089a0:	2300      	movs	r3, #0
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	6938      	ldr	r0, [r7, #16]
 80089a8:	f000 f8aa 	bl	8008b00 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80089ac:	2301      	movs	r3, #1
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e001      	b.n	80089b6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80089b6:	697b      	ldr	r3, [r7, #20]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd90      	pop	{r4, r7, pc}

080089c0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	60fb      	str	r3, [r7, #12]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	689c      	ldr	r4, [r3, #8]
 80089ee:	f001 fd47 	bl	800a480 <xTaskGetCurrentTaskHandle>
 80089f2:	4603      	mov	r3, r0
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d107      	bne.n	8008a08 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008a02:	2301      	movs	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	e00c      	b.n	8008a22 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6938      	ldr	r0, [r7, #16]
 8008a0c:	f000 fb7e 	bl	800910c <xQueueSemaphoreTake>
 8008a10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d004      	beq.n	8008a22 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008a22:	697b      	ldr	r3, [r7, #20]
	}
 8008a24:	4618      	mov	r0, r3
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	61bb      	str	r3, [r7, #24]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d90a      	bls.n	8008a72 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	617b      	str	r3, [r7, #20]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a72:	2302      	movs	r3, #2
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fe49 	bl	8008714 <xQueueGenericCreateStatic>
 8008a82:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a90:	69fb      	ldr	r3, [r7, #28]
	}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b086      	sub	sp, #24
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d10a      	bne.n	8008ac0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	613b      	str	r3, [r7, #16]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d90a      	bls.n	8008ade <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008acc:	f383 8811 	msr	BASEPRI, r3
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	f3bf 8f4f 	dsb	sy
 8008ad8:	60fb      	str	r3, [r7, #12]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ade:	2202      	movs	r2, #2
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff fe8e 	bl	8008804 <xQueueGenericCreate>
 8008ae8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008af6:	697b      	ldr	r3, [r7, #20]
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08e      	sub	sp, #56	; 0x38
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10a      	bne.n	8008b32 <xQueueGenericSend+0x32>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d103      	bne.n	8008b40 <xQueueGenericSend+0x40>
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <xQueueGenericSend+0x44>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <xQueueGenericSend+0x46>
 8008b44:	2300      	movs	r3, #0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <xQueueGenericSend+0x60>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d103      	bne.n	8008b6e <xQueueGenericSend+0x6e>
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <xQueueGenericSend+0x72>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueGenericSend+0x74>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueGenericSend+0x8e>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	623b      	str	r3, [r7, #32]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b8e:	f001 fc87 	bl	800a4a0 <xTaskGetSchedulerState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xQueueGenericSend+0x9e>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <xQueueGenericSend+0xa2>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueGenericSend+0xa4>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericSend+0xbe>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	61fb      	str	r3, [r7, #28]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bbe:	f002 fac9 	bl	800b154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d302      	bcc.n	8008bd4 <xQueueGenericSend+0xd4>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d129      	bne.n	8008c28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bda:	f000 fc5e 	bl	800949a <prvCopyDataToQueue>
 8008bde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d010      	beq.n	8008c0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	3324      	adds	r3, #36	; 0x24
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 fa85 	bl	800a0fc <xTaskRemoveFromEventList>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d013      	beq.n	8008c20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bf8:	4b3f      	ldr	r3, [pc, #252]	; (8008cf8 <xQueueGenericSend+0x1f8>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	e00a      	b.n	8008c20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c10:	4b39      	ldr	r3, [pc, #228]	; (8008cf8 <xQueueGenericSend+0x1f8>)
 8008c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c20:	f002 fac8 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e063      	b.n	8008cf0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d103      	bne.n	8008c36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c2e:	f002 fac1 	bl	800b1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	e05c      	b.n	8008cf0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d106      	bne.n	8008c4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c3c:	f107 0314 	add.w	r3, r7, #20
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 fabf 	bl	800a1c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c46:	2301      	movs	r3, #1
 8008c48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c4a:	f002 fab3 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c4e:	f001 f819 	bl	8009c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c52:	f002 fa7f 	bl	800b154 <vPortEnterCritical>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c5c:	b25b      	sxtb	r3, r3
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d103      	bne.n	8008c6c <xQueueGenericSend+0x16c>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c72:	b25b      	sxtb	r3, r3
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d103      	bne.n	8008c82 <xQueueGenericSend+0x182>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c82:	f002 fa97 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c86:	1d3a      	adds	r2, r7, #4
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 faae 	bl	800a1f0 <xTaskCheckForTimeOut>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d124      	bne.n	8008ce4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c9c:	f000 fcf5 	bl	800968a <prvIsQueueFull>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d018      	beq.n	8008cd8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	3310      	adds	r3, #16
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 f9d4 	bl	800a05c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cb6:	f000 fc80 	bl	80095ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008cba:	f000 fff1 	bl	8009ca0 <xTaskResumeAll>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f47f af7c 	bne.w	8008bbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	; (8008cf8 <xQueueGenericSend+0x1f8>)
 8008cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	e772      	b.n	8008bbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cda:	f000 fc6e 	bl	80095ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cde:	f000 ffdf 	bl	8009ca0 <xTaskResumeAll>
 8008ce2:	e76c      	b.n	8008bbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce6:	f000 fc68 	bl	80095ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cea:	f000 ffd9 	bl	8009ca0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3738      	adds	r7, #56	; 0x38
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b090      	sub	sp, #64	; 0x40
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <xQueueGenericSendFromISR+0x3c>
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <xQueueGenericSendFromISR+0x40>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <xQueueGenericSendFromISR+0x42>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d103      	bne.n	8008d66 <xQueueGenericSendFromISR+0x6a>
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d101      	bne.n	8008d6a <xQueueGenericSendFromISR+0x6e>
 8008d66:	2301      	movs	r3, #1
 8008d68:	e000      	b.n	8008d6c <xQueueGenericSendFromISR+0x70>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	623b      	str	r3, [r7, #32]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d86:	f002 fac7 	bl	800b318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	61fa      	str	r2, [r7, #28]
 8008da0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008da2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d302      	bcc.n	8008db8 <xQueueGenericSendFromISR+0xbc>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d12f      	bne.n	8008e18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dc8:	683a      	ldr	r2, [r7, #0]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008dce:	f000 fb64 	bl	800949a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008dd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dda:	d112      	bne.n	8008e02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d016      	beq.n	8008e12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	3324      	adds	r3, #36	; 0x24
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f987 	bl	800a0fc <xTaskRemoveFromEventList>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00e      	beq.n	8008e12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00b      	beq.n	8008e12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	e007      	b.n	8008e12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e06:	3301      	adds	r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	b25a      	sxtb	r2, r3
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e12:	2301      	movs	r3, #1
 8008e14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008e16:	e001      	b.n	8008e1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3740      	adds	r7, #64	; 0x40
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08e      	sub	sp, #56	; 0x38
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10a      	bne.n	8008e5c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	623b      	str	r3, [r7, #32]
}
 8008e58:	bf00      	nop
 8008e5a:	e7fe      	b.n	8008e5a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	61fb      	str	r3, [r7, #28]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <xQueueGiveFromISR+0x58>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <xQueueGiveFromISR+0x5c>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e000      	b.n	8008e90 <xQueueGiveFromISR+0x5e>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <xQueueGiveFromISR+0x78>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	61bb      	str	r3, [r7, #24]
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008eaa:	f002 fa35 	bl	800b318 <vPortValidateInterruptPriority>
	__asm volatile
 8008eae:	f3ef 8211 	mrs	r2, BASEPRI
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	617a      	str	r2, [r7, #20]
 8008ec4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ec6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d22b      	bcs.n	8008f32 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d112      	bne.n	8008f1c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d016      	beq.n	8008f2c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	3324      	adds	r3, #36	; 0x24
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 f8fa 	bl	800a0fc <xTaskRemoveFromEventList>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00e      	beq.n	8008f2c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2201      	movs	r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	e007      	b.n	8008f2c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f20:	3301      	adds	r3, #1
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	b25a      	sxtb	r2, r3
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f30:	e001      	b.n	8008f36 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f383 8811 	msr	BASEPRI, r3
}
 8008f40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3738      	adds	r7, #56	; 0x38
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b08c      	sub	sp, #48	; 0x30
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <xQueueReceive+0x30>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	623b      	str	r3, [r7, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <xQueueReceive+0x3e>
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <xQueueReceive+0x42>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e000      	b.n	8008f90 <xQueueReceive+0x44>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <xQueueReceive+0x5e>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	61fb      	str	r3, [r7, #28]
}
 8008fa6:	bf00      	nop
 8008fa8:	e7fe      	b.n	8008fa8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008faa:	f001 fa79 	bl	800a4a0 <xTaskGetSchedulerState>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d102      	bne.n	8008fba <xQueueReceive+0x6e>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <xQueueReceive+0x72>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e000      	b.n	8008fc0 <xQueueReceive+0x74>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <xQueueReceive+0x8e>
	__asm volatile
 8008fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	61bb      	str	r3, [r7, #24]
}
 8008fd6:	bf00      	nop
 8008fd8:	e7fe      	b.n	8008fd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fda:	f002 f8bb 	bl	800b154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01f      	beq.n	800902a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fee:	f000 fabe 	bl	800956e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	1e5a      	subs	r2, r3, #1
 8008ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00f      	beq.n	8009022 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	3310      	adds	r3, #16
 8009006:	4618      	mov	r0, r3
 8009008:	f001 f878 	bl	800a0fc <xTaskRemoveFromEventList>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009012:	4b3d      	ldr	r3, [pc, #244]	; (8009108 <xQueueReceive+0x1bc>)
 8009014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009022:	f002 f8c7 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 8009026:	2301      	movs	r3, #1
 8009028:	e069      	b.n	80090fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d103      	bne.n	8009038 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009030:	f002 f8c0 	bl	800b1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009034:	2300      	movs	r3, #0
 8009036:	e062      	b.n	80090fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	2b00      	cmp	r3, #0
 800903c:	d106      	bne.n	800904c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800903e:	f107 0310 	add.w	r3, r7, #16
 8009042:	4618      	mov	r0, r3
 8009044:	f001 f8be 	bl	800a1c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009048:	2301      	movs	r3, #1
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800904c:	f002 f8b2 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009050:	f000 fe18 	bl	8009c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009054:	f002 f87e 	bl	800b154 <vPortEnterCritical>
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800905e:	b25b      	sxtb	r3, r3
 8009060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009064:	d103      	bne.n	800906e <xQueueReceive+0x122>
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009074:	b25b      	sxtb	r3, r3
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d103      	bne.n	8009084 <xQueueReceive+0x138>
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009084:	f002 f896 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009088:	1d3a      	adds	r2, r7, #4
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f001 f8ad 	bl	800a1f0 <xTaskCheckForTimeOut>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d123      	bne.n	80090e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800909c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909e:	f000 fade 	bl	800965e <prvIsQueueEmpty>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d017      	beq.n	80090d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	3324      	adds	r3, #36	; 0x24
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 ffd3 	bl	800a05c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b8:	f000 fa7f 	bl	80095ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090bc:	f000 fdf0 	bl	8009ca0 <xTaskResumeAll>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d189      	bne.n	8008fda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80090c6:	4b10      	ldr	r3, [pc, #64]	; (8009108 <xQueueReceive+0x1bc>)
 80090c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	e780      	b.n	8008fda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090da:	f000 fa6e 	bl	80095ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090de:	f000 fddf 	bl	8009ca0 <xTaskResumeAll>
 80090e2:	e77a      	b.n	8008fda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e6:	f000 fa68 	bl	80095ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ea:	f000 fdd9 	bl	8009ca0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f0:	f000 fab5 	bl	800965e <prvIsQueueEmpty>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f43f af6f 	beq.w	8008fda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3730      	adds	r7, #48	; 0x30
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	; 0x38
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009116:	2300      	movs	r3, #0
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	623b      	str	r3, [r7, #32]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	61fb      	str	r3, [r7, #28]
}
 8009158:	bf00      	nop
 800915a:	e7fe      	b.n	800915a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800915c:	f001 f9a0 	bl	800a4a0 <xTaskGetSchedulerState>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <xQueueSemaphoreTake+0x60>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <xQueueSemaphoreTake+0x64>
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <xQueueSemaphoreTake+0x66>
 8009170:	2300      	movs	r3, #0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	61bb      	str	r3, [r7, #24]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800918c:	f001 ffe2 	bl	800b154 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	2b00      	cmp	r3, #0
 800919a:	d024      	beq.n	80091e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	1e5a      	subs	r2, r3, #1
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80091ac:	f001 faee 	bl	800a78c <pvTaskIncrementMutexHeldCount>
 80091b0:	4602      	mov	r2, r0
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00f      	beq.n	80091de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	3310      	adds	r3, #16
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 ff9a 	bl	800a0fc <xTaskRemoveFromEventList>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d007      	beq.n	80091de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091ce:	4b54      	ldr	r3, [pc, #336]	; (8009320 <xQueueSemaphoreTake+0x214>)
 80091d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091de:	f001 ffe9 	bl	800b1b4 <vPortExitCritical>
				return pdPASS;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e097      	b.n	8009316 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d111      	bne.n	8009210 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80091ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	617b      	str	r3, [r7, #20]
}
 8009204:	bf00      	nop
 8009206:	e7fe      	b.n	8009206 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009208:	f001 ffd4 	bl	800b1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800920c:	2300      	movs	r3, #0
 800920e:	e082      	b.n	8009316 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009216:	f107 030c 	add.w	r3, r7, #12
 800921a:	4618      	mov	r0, r3
 800921c:	f000 ffd2 	bl	800a1c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009224:	f001 ffc6 	bl	800b1b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009228:	f000 fd2c 	bl	8009c84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800922c:	f001 ff92 	bl	800b154 <vPortEnterCritical>
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009236:	b25b      	sxtb	r3, r3
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d103      	bne.n	8009246 <xQueueSemaphoreTake+0x13a>
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	2200      	movs	r2, #0
 8009242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800924c:	b25b      	sxtb	r3, r3
 800924e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009252:	d103      	bne.n	800925c <xQueueSemaphoreTake+0x150>
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800925c:	f001 ffaa 	bl	800b1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009260:	463a      	mov	r2, r7
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4611      	mov	r1, r2
 8009268:	4618      	mov	r0, r3
 800926a:	f000 ffc1 	bl	800a1f0 <xTaskCheckForTimeOut>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d132      	bne.n	80092da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009276:	f000 f9f2 	bl	800965e <prvIsQueueEmpty>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d026      	beq.n	80092ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d109      	bne.n	800929c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009288:	f001 ff64 	bl	800b154 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f923 	bl	800a4dc <xTaskPriorityInherit>
 8009296:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009298:	f001 ff8c 	bl	800b1b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	3324      	adds	r3, #36	; 0x24
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fed9 	bl	800a05c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80092aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092ac:	f000 f985 	bl	80095ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80092b0:	f000 fcf6 	bl	8009ca0 <xTaskResumeAll>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f47f af68 	bne.w	800918c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80092bc:	4b18      	ldr	r3, [pc, #96]	; (8009320 <xQueueSemaphoreTake+0x214>)
 80092be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	e75e      	b.n	800918c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80092ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092d0:	f000 f973 	bl	80095ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092d4:	f000 fce4 	bl	8009ca0 <xTaskResumeAll>
 80092d8:	e758      	b.n	800918c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80092da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092dc:	f000 f96d 	bl	80095ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092e0:	f000 fcde 	bl	8009ca0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80092e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e6:	f000 f9ba 	bl	800965e <prvIsQueueEmpty>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f43f af4d 	beq.w	800918c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00d      	beq.n	8009314 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80092f8:	f001 ff2c 	bl	800b154 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80092fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092fe:	f000 f8b4 	bl	800946a <prvGetDisinheritPriorityAfterTimeout>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800930a:	4618      	mov	r0, r3
 800930c:	f001 f9bc 	bl	800a688 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009310:	f001 ff50 	bl	800b1b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009314:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009316:	4618      	mov	r0, r3
 8009318:	3738      	adds	r7, #56	; 0x38
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08e      	sub	sp, #56	; 0x38
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	623b      	str	r3, [r7, #32]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <xQueueReceiveFromISR+0x3a>
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <xQueueReceiveFromISR+0x3e>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <xQueueReceiveFromISR+0x40>
 8009362:	2300      	movs	r3, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	61fb      	str	r3, [r7, #28]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800937e:	f001 ffcb 	bl	800b318 <vPortValidateInterruptPriority>
	__asm volatile
 8009382:	f3ef 8211 	mrs	r2, BASEPRI
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	61ba      	str	r2, [r7, #24]
 8009398:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800939a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d02f      	beq.n	800940a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80093aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093b8:	f000 f8d9 	bl	800956e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	1e5a      	subs	r2, r3, #1
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80093c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80093c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093cc:	d112      	bne.n	80093f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d016      	beq.n	8009404 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	3310      	adds	r3, #16
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fe8e 	bl	800a0fc <xTaskRemoveFromEventList>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00e      	beq.n	8009404 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	e007      	b.n	8009404 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	b25a      	sxtb	r2, r3
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009404:	2301      	movs	r3, #1
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
 8009408:	e001      	b.n	800940e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800940a:	2300      	movs	r3, #0
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f383 8811 	msr	BASEPRI, r3
}
 8009418:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800941c:	4618      	mov	r0, r3
 800941e:	3738      	adds	r7, #56	; 0x38
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <vQueueDelete+0x28>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	60bb      	str	r3, [r7, #8]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f95f 	bl	8009710 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f002 f867 	bl	800b530 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800946a:	b480      	push	{r7}
 800946c:	b085      	sub	sp, #20
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	2b00      	cmp	r3, #0
 8009478:	d006      	beq.n	8009488 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e001      	b.n	800948c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800948c:	68fb      	ldr	r3, [r7, #12]
	}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b086      	sub	sp, #24
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10d      	bne.n	80094d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d14d      	bne.n	800955c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 f871 	bl	800a5ac <xTaskPriorityDisinherit>
 80094ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	609a      	str	r2, [r3, #8]
 80094d2:	e043      	b.n	800955c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d119      	bne.n	800950e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6858      	ldr	r0, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	461a      	mov	r2, r3
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	f00e fc7e 	bl	8017de6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	441a      	add	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	429a      	cmp	r2, r3
 8009502:	d32b      	bcc.n	800955c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	605a      	str	r2, [r3, #4]
 800950c:	e026      	b.n	800955c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	68d8      	ldr	r0, [r3, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	461a      	mov	r2, r3
 8009518:	68b9      	ldr	r1, [r7, #8]
 800951a:	f00e fc64 	bl	8017de6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	425b      	negs	r3, r3
 8009528:	441a      	add	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d207      	bcs.n	800954a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	425b      	negs	r3, r3
 8009544:	441a      	add	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d105      	bne.n	800955c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d002      	beq.n	800955c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	3b01      	subs	r3, #1
 800955a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009564:	697b      	ldr	r3, [r7, #20]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957c:	2b00      	cmp	r3, #0
 800957e:	d018      	beq.n	80095b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009588:	441a      	add	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d303      	bcc.n	80095a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	68d9      	ldr	r1, [r3, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	461a      	mov	r2, r3
 80095ac:	6838      	ldr	r0, [r7, #0]
 80095ae:	f00e fc1a 	bl	8017de6 <memcpy>
	}
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095c2:	f001 fdc7 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ce:	e011      	b.n	80095f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d012      	beq.n	80095fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3324      	adds	r3, #36	; 0x24
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fd8d 	bl	800a0fc <xTaskRemoveFromEventList>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095e8:	f000 fe64 	bl	800a2b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dce9      	bgt.n	80095d0 <prvUnlockQueue+0x16>
 80095fc:	e000      	b.n	8009600 <prvUnlockQueue+0x46>
					break;
 80095fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	22ff      	movs	r2, #255	; 0xff
 8009604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009608:	f001 fdd4 	bl	800b1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800960c:	f001 fda2 	bl	800b154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009616:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009618:	e011      	b.n	800963e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d012      	beq.n	8009648 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3310      	adds	r3, #16
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fd68 	bl	800a0fc <xTaskRemoveFromEventList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009632:	f000 fe3f 	bl	800a2b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	3b01      	subs	r3, #1
 800963a:	b2db      	uxtb	r3, r3
 800963c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800963e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009642:	2b00      	cmp	r3, #0
 8009644:	dce9      	bgt.n	800961a <prvUnlockQueue+0x60>
 8009646:	e000      	b.n	800964a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009648:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009652:	f001 fdaf 	bl	800b1b4 <vPortExitCritical>
}
 8009656:	bf00      	nop
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009666:	f001 fd75 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	e001      	b.n	800967c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800967c:	f001 fd9a 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 8009680:	68fb      	ldr	r3, [r7, #12]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009692:	f001 fd5f 	bl	800b154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969e:	429a      	cmp	r2, r3
 80096a0:	d102      	bne.n	80096a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096a2:	2301      	movs	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e001      	b.n	80096ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096ac:	f001 fd82 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 80096b0:	68fb      	ldr	r3, [r7, #12]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e014      	b.n	80096f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096cc:	4a0f      	ldr	r2, [pc, #60]	; (800970c <vQueueAddToRegistry+0x50>)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10b      	bne.n	80096f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096d8:	490c      	ldr	r1, [pc, #48]	; (800970c <vQueueAddToRegistry+0x50>)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096e2:	4a0a      	ldr	r2, [pc, #40]	; (800970c <vQueueAddToRegistry+0x50>)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	4413      	add	r3, r2
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096ee:	e006      	b.n	80096fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	3301      	adds	r3, #1
 80096f4:	60fb      	str	r3, [r7, #12]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2b07      	cmp	r3, #7
 80096fa:	d9e7      	bls.n	80096cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	2000968c 	.word	0x2000968c

08009710 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009718:	2300      	movs	r3, #0
 800971a:	60fb      	str	r3, [r7, #12]
 800971c:	e016      	b.n	800974c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800971e:	4a10      	ldr	r2, [pc, #64]	; (8009760 <vQueueUnregisterQueue+0x50>)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	00db      	lsls	r3, r3, #3
 8009724:	4413      	add	r3, r2
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	d10b      	bne.n	8009746 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800972e:	4a0c      	ldr	r2, [pc, #48]	; (8009760 <vQueueUnregisterQueue+0x50>)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2100      	movs	r1, #0
 8009734:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009738:	4a09      	ldr	r2, [pc, #36]	; (8009760 <vQueueUnregisterQueue+0x50>)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	4413      	add	r3, r2
 8009740:	2200      	movs	r2, #0
 8009742:	605a      	str	r2, [r3, #4]
				break;
 8009744:	e006      	b.n	8009754 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b07      	cmp	r3, #7
 8009750:	d9e5      	bls.n	800971e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	2000968c 	.word	0x2000968c

08009764 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009774:	f001 fcee 	bl	800b154 <vPortEnterCritical>
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800977e:	b25b      	sxtb	r3, r3
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d103      	bne.n	800978e <vQueueWaitForMessageRestricted+0x2a>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009794:	b25b      	sxtb	r3, r3
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979a:	d103      	bne.n	80097a4 <vQueueWaitForMessageRestricted+0x40>
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097a4:	f001 fd06 	bl	800b1b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 fc73 	bl	800a0a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097be:	6978      	ldr	r0, [r7, #20]
 80097c0:	f7ff fefb 	bl	80095ba <prvUnlockQueue>
	}
 80097c4:	bf00      	nop
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08e      	sub	sp, #56	; 0x38
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	623b      	str	r3, [r7, #32]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <xTaskCreateStatic+0x46>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61fb      	str	r3, [r7, #28]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009812:	23bc      	movs	r3, #188	; 0xbc
 8009814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2bbc      	cmp	r3, #188	; 0xbc
 800981a:	d00a      	beq.n	8009832 <xTaskCreateStatic+0x66>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	61bb      	str	r3, [r7, #24]
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009832:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01e      	beq.n	8009878 <xTaskCreateStatic+0xac>
 800983a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983c:	2b00      	cmp	r3, #0
 800983e:	d01b      	beq.n	8009878 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009848:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	2202      	movs	r2, #2
 800984e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009852:	2300      	movs	r3, #0
 8009854:	9303      	str	r3, [sp, #12]
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	9302      	str	r3, [sp, #8]
 800985a:	f107 0314 	add.w	r3, r7, #20
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f850 	bl	8009910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009872:	f000 f8f3 	bl	8009a5c <prvAddNewTaskToReadyList>
 8009876:	e001      	b.n	800987c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800987c:	697b      	ldr	r3, [r7, #20]
	}
 800987e:	4618      	mov	r0, r3
 8009880:	3728      	adds	r7, #40	; 0x28
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009886:	b580      	push	{r7, lr}
 8009888:	b08c      	sub	sp, #48	; 0x30
 800988a:	af04      	add	r7, sp, #16
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009896:	88fb      	ldrh	r3, [r7, #6]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fd7c 	bl	800b398 <pvPortMalloc>
 80098a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00e      	beq.n	80098c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098a8:	20bc      	movs	r0, #188	; 0xbc
 80098aa:	f001 fd75 	bl	800b398 <pvPortMalloc>
 80098ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	631a      	str	r2, [r3, #48]	; 0x30
 80098bc:	e005      	b.n	80098ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	f001 fe36 	bl	800b530 <vPortFree>
 80098c4:	e001      	b.n	80098ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d017      	beq.n	8009900 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098d8:	88fa      	ldrh	r2, [r7, #6]
 80098da:	2300      	movs	r3, #0
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68b9      	ldr	r1, [r7, #8]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f80e 	bl	8009910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f4:	69f8      	ldr	r0, [r7, #28]
 80098f6:	f000 f8b1 	bl	8009a5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098fa:	2301      	movs	r3, #1
 80098fc:	61bb      	str	r3, [r7, #24]
 80098fe:	e002      	b.n	8009906 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009900:	f04f 33ff 	mov.w	r3, #4294967295
 8009904:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009906:	69bb      	ldr	r3, [r7, #24]
	}
 8009908:	4618      	mov	r0, r3
 800990a:	3720      	adds	r7, #32
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	461a      	mov	r2, r3
 8009928:	21a5      	movs	r1, #165	; 0xa5
 800992a:	f00e fa6a 	bl	8017e02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009938:	3b01      	subs	r3, #1
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	f023 0307 	bic.w	r3, r3, #7
 8009946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f003 0307 	and.w	r3, r3, #7
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	617b      	str	r3, [r7, #20]
}
 8009964:	bf00      	nop
 8009966:	e7fe      	b.n	8009966 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01f      	beq.n	80099ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	e012      	b.n	800999a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	7819      	ldrb	r1, [r3, #0]
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	3334      	adds	r3, #52	; 0x34
 8009984:	460a      	mov	r2, r1
 8009986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	3301      	adds	r3, #1
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	2b0f      	cmp	r3, #15
 800999e:	d9e9      	bls.n	8009974 <prvInitialiseNewTask+0x64>
 80099a0:	e000      	b.n	80099a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80099a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099ac:	e003      	b.n	80099b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	2b37      	cmp	r3, #55	; 0x37
 80099ba:	d901      	bls.n	80099c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099bc:	2337      	movs	r3, #55	; 0x37
 80099be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	2200      	movs	r2, #0
 80099d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	3304      	adds	r3, #4
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fda0 	bl	800851c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	3318      	adds	r3, #24
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7fe fd9b 	bl	800851c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0e:	3354      	adds	r3, #84	; 0x54
 8009a10:	2260      	movs	r2, #96	; 0x60
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f00e f9f4 	bl	8017e02 <memset>
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	4a0c      	ldr	r2, [pc, #48]	; (8009a50 <prvInitialiseNewTask+0x140>)
 8009a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	4a0c      	ldr	r2, [pc, #48]	; (8009a54 <prvInitialiseNewTask+0x144>)
 8009a24:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	4a0b      	ldr	r2, [pc, #44]	; (8009a58 <prvInitialiseNewTask+0x148>)
 8009a2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	69b8      	ldr	r0, [r7, #24]
 8009a32:	f001 fa61 	bl	800aef8 <pxPortInitialiseStack>
 8009a36:	4602      	mov	r2, r0
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a48:	bf00      	nop
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	0801bf00 	.word	0x0801bf00
 8009a54:	0801bf20 	.word	0x0801bf20
 8009a58:	0801bee0 	.word	0x0801bee0

08009a5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a64:	f001 fb76 	bl	800b154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a68:	4b2d      	ldr	r3, [pc, #180]	; (8009b20 <prvAddNewTaskToReadyList+0xc4>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <prvAddNewTaskToReadyList+0xc4>)
 8009a70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a72:	4b2c      	ldr	r3, [pc, #176]	; (8009b24 <prvAddNewTaskToReadyList+0xc8>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d109      	bne.n	8009a8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a7a:	4a2a      	ldr	r2, [pc, #168]	; (8009b24 <prvAddNewTaskToReadyList+0xc8>)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a80:	4b27      	ldr	r3, [pc, #156]	; (8009b20 <prvAddNewTaskToReadyList+0xc4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d110      	bne.n	8009aaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a88:	f000 fc38 	bl	800a2fc <prvInitialiseTaskLists>
 8009a8c:	e00d      	b.n	8009aaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a8e:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <prvAddNewTaskToReadyList+0xcc>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d109      	bne.n	8009aaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a96:	4b23      	ldr	r3, [pc, #140]	; (8009b24 <prvAddNewTaskToReadyList+0xc8>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d802      	bhi.n	8009aaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009aa4:	4a1f      	ldr	r2, [pc, #124]	; (8009b24 <prvAddNewTaskToReadyList+0xc8>)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009aaa:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <prvAddNewTaskToReadyList+0xd0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	4a1e      	ldr	r2, [pc, #120]	; (8009b2c <prvAddNewTaskToReadyList+0xd0>)
 8009ab2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ab4:	4b1d      	ldr	r3, [pc, #116]	; (8009b2c <prvAddNewTaskToReadyList+0xd0>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac0:	4b1b      	ldr	r3, [pc, #108]	; (8009b30 <prvAddNewTaskToReadyList+0xd4>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d903      	bls.n	8009ad0 <prvAddNewTaskToReadyList+0x74>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <prvAddNewTaskToReadyList+0xd4>)
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <prvAddNewTaskToReadyList+0xd8>)
 8009ade:	441a      	add	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f7fe fd25 	bl	8008536 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aec:	f001 fb62 	bl	800b1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009af0:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <prvAddNewTaskToReadyList+0xcc>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00e      	beq.n	8009b16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <prvAddNewTaskToReadyList+0xc8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d207      	bcs.n	8009b16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b06:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <prvAddNewTaskToReadyList+0xdc>)
 8009b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0c:	601a      	str	r2, [r3, #0]
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b16:	bf00      	nop
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000cfc 	.word	0x20000cfc
 8009b24:	20000828 	.word	0x20000828
 8009b28:	20000d08 	.word	0x20000d08
 8009b2c:	20000d18 	.word	0x20000d18
 8009b30:	20000d04 	.word	0x20000d04
 8009b34:	2000082c 	.word	0x2000082c
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d017      	beq.n	8009b7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b4e:	4b13      	ldr	r3, [pc, #76]	; (8009b9c <vTaskDelay+0x60>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00a      	beq.n	8009b6c <vTaskDelay+0x30>
	__asm volatile
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	60bb      	str	r3, [r7, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	e7fe      	b.n	8009b6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b6c:	f000 f88a 	bl	8009c84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fe1e 	bl	800a7b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b78:	f000 f892 	bl	8009ca0 <xTaskResumeAll>
 8009b7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d107      	bne.n	8009b94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b84:	4b06      	ldr	r3, [pc, #24]	; (8009ba0 <vTaskDelay+0x64>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b94:	bf00      	nop
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000d24 	.word	0x20000d24
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08a      	sub	sp, #40	; 0x28
 8009ba8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	1d39      	adds	r1, r7, #4
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fc5a 	bl	8008474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	9202      	str	r2, [sp, #8]
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	2300      	movs	r3, #0
 8009bd0:	460a      	mov	r2, r1
 8009bd2:	4924      	ldr	r1, [pc, #144]	; (8009c64 <vTaskStartScheduler+0xc0>)
 8009bd4:	4824      	ldr	r0, [pc, #144]	; (8009c68 <vTaskStartScheduler+0xc4>)
 8009bd6:	f7ff fdf9 	bl	80097cc <xTaskCreateStatic>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	4a23      	ldr	r2, [pc, #140]	; (8009c6c <vTaskStartScheduler+0xc8>)
 8009bde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009be0:	4b22      	ldr	r3, [pc, #136]	; (8009c6c <vTaskStartScheduler+0xc8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	e001      	b.n	8009bf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d102      	bne.n	8009bfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bf8:	f000 fe30 	bl	800a85c <xTimerCreateTimerTask>
 8009bfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d11b      	bne.n	8009c3c <vTaskStartScheduler+0x98>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	613b      	str	r3, [r7, #16]
}
 8009c16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c18:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <vTaskStartScheduler+0xcc>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3354      	adds	r3, #84	; 0x54
 8009c1e:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <vTaskStartScheduler+0xd0>)
 8009c20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <vTaskStartScheduler+0xd4>)
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295
 8009c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c2a:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <vTaskStartScheduler+0xd8>)
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c30:	4b13      	ldr	r3, [pc, #76]	; (8009c80 <vTaskStartScheduler+0xdc>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c36:	f001 f9eb 	bl	800b010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c3a:	e00e      	b.n	8009c5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c42:	d10a      	bne.n	8009c5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60fb      	str	r3, [r7, #12]
}
 8009c56:	bf00      	nop
 8009c58:	e7fe      	b.n	8009c58 <vTaskStartScheduler+0xb4>
}
 8009c5a:	bf00      	nop
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	08018df8 	.word	0x08018df8
 8009c68:	0800a2cd 	.word	0x0800a2cd
 8009c6c:	20000d20 	.word	0x20000d20
 8009c70:	20000828 	.word	0x20000828
 8009c74:	20000020 	.word	0x20000020
 8009c78:	20000d1c 	.word	0x20000d1c
 8009c7c:	20000d08 	.word	0x20000d08
 8009c80:	20000d00 	.word	0x20000d00

08009c84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <vTaskSuspendAll+0x18>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	4a03      	ldr	r2, [pc, #12]	; (8009c9c <vTaskSuspendAll+0x18>)
 8009c90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c92:	bf00      	nop
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	20000d24 	.word	0x20000d24

08009ca0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cae:	4b42      	ldr	r3, [pc, #264]	; (8009db8 <xTaskResumeAll+0x118>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <xTaskResumeAll+0x2c>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	603b      	str	r3, [r7, #0]
}
 8009cc8:	bf00      	nop
 8009cca:	e7fe      	b.n	8009cca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ccc:	f001 fa42 	bl	800b154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cd0:	4b39      	ldr	r3, [pc, #228]	; (8009db8 <xTaskResumeAll+0x118>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	4a38      	ldr	r2, [pc, #224]	; (8009db8 <xTaskResumeAll+0x118>)
 8009cd8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cda:	4b37      	ldr	r3, [pc, #220]	; (8009db8 <xTaskResumeAll+0x118>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d162      	bne.n	8009da8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ce2:	4b36      	ldr	r3, [pc, #216]	; (8009dbc <xTaskResumeAll+0x11c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d05e      	beq.n	8009da8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cea:	e02f      	b.n	8009d4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cec:	4b34      	ldr	r3, [pc, #208]	; (8009dc0 <xTaskResumeAll+0x120>)
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	3318      	adds	r3, #24
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fc79 	bl	80085f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fc74 	bl	80085f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <xTaskResumeAll+0x124>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d903      	bls.n	8009d1c <xTaskResumeAll+0x7c>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a2a      	ldr	r2, [pc, #168]	; (8009dc4 <xTaskResumeAll+0x124>)
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4a27      	ldr	r2, [pc, #156]	; (8009dc8 <xTaskResumeAll+0x128>)
 8009d2a:	441a      	add	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7fe fbff 	bl	8008536 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	4b23      	ldr	r3, [pc, #140]	; (8009dcc <xTaskResumeAll+0x12c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d302      	bcc.n	8009d4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d46:	4b22      	ldr	r3, [pc, #136]	; (8009dd0 <xTaskResumeAll+0x130>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d4c:	4b1c      	ldr	r3, [pc, #112]	; (8009dc0 <xTaskResumeAll+0x120>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1cb      	bne.n	8009cec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d5a:	f000 fb71 	bl	800a440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d5e:	4b1d      	ldr	r3, [pc, #116]	; (8009dd4 <xTaskResumeAll+0x134>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d010      	beq.n	8009d8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d6a:	f000 f859 	bl	8009e20 <xTaskIncrementTick>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d74:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <xTaskResumeAll+0x130>)
 8009d76:	2201      	movs	r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1f1      	bne.n	8009d6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d86:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <xTaskResumeAll+0x134>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d8c:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <xTaskResumeAll+0x130>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d009      	beq.n	8009da8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d94:	2301      	movs	r3, #1
 8009d96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d98:	4b0f      	ldr	r3, [pc, #60]	; (8009dd8 <xTaskResumeAll+0x138>)
 8009d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9e:	601a      	str	r2, [r3, #0]
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009da8:	f001 fa04 	bl	800b1b4 <vPortExitCritical>

	return xAlreadyYielded;
 8009dac:	68bb      	ldr	r3, [r7, #8]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20000d24 	.word	0x20000d24
 8009dbc:	20000cfc 	.word	0x20000cfc
 8009dc0:	20000cbc 	.word	0x20000cbc
 8009dc4:	20000d04 	.word	0x20000d04
 8009dc8:	2000082c 	.word	0x2000082c
 8009dcc:	20000828 	.word	0x20000828
 8009dd0:	20000d10 	.word	0x20000d10
 8009dd4:	20000d0c 	.word	0x20000d0c
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009de2:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <xTaskGetTickCount+0x1c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009de8:	687b      	ldr	r3, [r7, #4]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20000d00 	.word	0x20000d00

08009dfc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e02:	f001 fa89 	bl	800b318 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009e06:	2300      	movs	r3, #0
 8009e08:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009e0a:	4b04      	ldr	r3, [pc, #16]	; (8009e1c <xTaskGetTickCountFromISR+0x20>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e10:	683b      	ldr	r3, [r7, #0]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000d00 	.word	0x20000d00

08009e20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e2a:	4b4f      	ldr	r3, [pc, #316]	; (8009f68 <xTaskIncrementTick+0x148>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 808f 	bne.w	8009f52 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e34:	4b4d      	ldr	r3, [pc, #308]	; (8009f6c <xTaskIncrementTick+0x14c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e3c:	4a4b      	ldr	r2, [pc, #300]	; (8009f6c <xTaskIncrementTick+0x14c>)
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d120      	bne.n	8009e8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e48:	4b49      	ldr	r3, [pc, #292]	; (8009f70 <xTaskIncrementTick+0x150>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	603b      	str	r3, [r7, #0]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xTaskIncrementTick+0x46>
 8009e68:	4b41      	ldr	r3, [pc, #260]	; (8009f70 <xTaskIncrementTick+0x150>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	4b41      	ldr	r3, [pc, #260]	; (8009f74 <xTaskIncrementTick+0x154>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a3f      	ldr	r2, [pc, #252]	; (8009f70 <xTaskIncrementTick+0x150>)
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4a3f      	ldr	r2, [pc, #252]	; (8009f74 <xTaskIncrementTick+0x154>)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	4b3e      	ldr	r3, [pc, #248]	; (8009f78 <xTaskIncrementTick+0x158>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3301      	adds	r3, #1
 8009e82:	4a3d      	ldr	r2, [pc, #244]	; (8009f78 <xTaskIncrementTick+0x158>)
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	f000 fadb 	bl	800a440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e8a:	4b3c      	ldr	r3, [pc, #240]	; (8009f7c <xTaskIncrementTick+0x15c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d349      	bcc.n	8009f28 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e94:	4b36      	ldr	r3, [pc, #216]	; (8009f70 <xTaskIncrementTick+0x150>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d104      	bne.n	8009ea8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e9e:	4b37      	ldr	r3, [pc, #220]	; (8009f7c <xTaskIncrementTick+0x15c>)
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	601a      	str	r2, [r3, #0]
					break;
 8009ea6:	e03f      	b.n	8009f28 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea8:	4b31      	ldr	r3, [pc, #196]	; (8009f70 <xTaskIncrementTick+0x150>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d203      	bcs.n	8009ec8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ec0:	4a2e      	ldr	r2, [pc, #184]	; (8009f7c <xTaskIncrementTick+0x15c>)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009ec6:	e02f      	b.n	8009f28 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	3304      	adds	r3, #4
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7fe fb8f 	bl	80085f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	3318      	adds	r3, #24
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fe fb86 	bl	80085f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <xTaskIncrementTick+0x160>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d903      	bls.n	8009ef8 <xTaskIncrementTick+0xd8>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef4:	4a22      	ldr	r2, [pc, #136]	; (8009f80 <xTaskIncrementTick+0x160>)
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4a1f      	ldr	r2, [pc, #124]	; (8009f84 <xTaskIncrementTick+0x164>)
 8009f06:	441a      	add	r2, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7fe fb11 	bl	8008536 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f18:	4b1b      	ldr	r3, [pc, #108]	; (8009f88 <xTaskIncrementTick+0x168>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d3b8      	bcc.n	8009e94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f26:	e7b5      	b.n	8009e94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f28:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <xTaskIncrementTick+0x168>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	4915      	ldr	r1, [pc, #84]	; (8009f84 <xTaskIncrementTick+0x164>)
 8009f30:	4613      	mov	r3, r2
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d901      	bls.n	8009f44 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f40:	2301      	movs	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f44:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <xTaskIncrementTick+0x16c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	617b      	str	r3, [r7, #20]
 8009f50:	e004      	b.n	8009f5c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f52:	4b0f      	ldr	r3, [pc, #60]	; (8009f90 <xTaskIncrementTick+0x170>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	4a0d      	ldr	r2, [pc, #52]	; (8009f90 <xTaskIncrementTick+0x170>)
 8009f5a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f5c:	697b      	ldr	r3, [r7, #20]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000d24 	.word	0x20000d24
 8009f6c:	20000d00 	.word	0x20000d00
 8009f70:	20000cb4 	.word	0x20000cb4
 8009f74:	20000cb8 	.word	0x20000cb8
 8009f78:	20000d14 	.word	0x20000d14
 8009f7c:	20000d1c 	.word	0x20000d1c
 8009f80:	20000d04 	.word	0x20000d04
 8009f84:	2000082c 	.word	0x2000082c
 8009f88:	20000828 	.word	0x20000828
 8009f8c:	20000d10 	.word	0x20000d10
 8009f90:	20000d0c 	.word	0x20000d0c

08009f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f9a:	4b2a      	ldr	r3, [pc, #168]	; (800a044 <vTaskSwitchContext+0xb0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fa2:	4b29      	ldr	r3, [pc, #164]	; (800a048 <vTaskSwitchContext+0xb4>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fa8:	e046      	b.n	800a038 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009faa:	4b27      	ldr	r3, [pc, #156]	; (800a048 <vTaskSwitchContext+0xb4>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fb0:	4b26      	ldr	r3, [pc, #152]	; (800a04c <vTaskSwitchContext+0xb8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]
 8009fb6:	e010      	b.n	8009fda <vTaskSwitchContext+0x46>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	607b      	str	r3, [r7, #4]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vTaskSwitchContext+0x3e>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	491d      	ldr	r1, [pc, #116]	; (800a050 <vTaskSwitchContext+0xbc>)
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d0e4      	beq.n	8009fb8 <vTaskSwitchContext+0x24>
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4a15      	ldr	r2, [pc, #84]	; (800a050 <vTaskSwitchContext+0xbc>)
 8009ffa:	4413      	add	r3, r2
 8009ffc:	60bb      	str	r3, [r7, #8]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	605a      	str	r2, [r3, #4]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	3308      	adds	r3, #8
 800a010:	429a      	cmp	r2, r3
 800a012:	d104      	bne.n	800a01e <vTaskSwitchContext+0x8a>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	605a      	str	r2, [r3, #4]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	4a0b      	ldr	r2, [pc, #44]	; (800a054 <vTaskSwitchContext+0xc0>)
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	4a08      	ldr	r2, [pc, #32]	; (800a04c <vTaskSwitchContext+0xb8>)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <vTaskSwitchContext+0xc0>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3354      	adds	r3, #84	; 0x54
 800a034:	4a08      	ldr	r2, [pc, #32]	; (800a058 <vTaskSwitchContext+0xc4>)
 800a036:	6013      	str	r3, [r2, #0]
}
 800a038:	bf00      	nop
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20000d24 	.word	0x20000d24
 800a048:	20000d10 	.word	0x20000d10
 800a04c:	20000d04 	.word	0x20000d04
 800a050:	2000082c 	.word	0x2000082c
 800a054:	20000828 	.word	0x20000828
 800a058:	20000020 	.word	0x20000020

0800a05c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	60fb      	str	r3, [r7, #12]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a082:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <vTaskPlaceOnEventList+0x44>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3318      	adds	r3, #24
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fe fa77 	bl	800857e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a090:	2101      	movs	r1, #1
 800a092:	6838      	ldr	r0, [r7, #0]
 800a094:	f000 fb8e 	bl	800a7b4 <prvAddCurrentTaskToDelayedList>
}
 800a098:	bf00      	nop
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	20000828 	.word	0x20000828

0800a0a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	617b      	str	r3, [r7, #20]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3318      	adds	r3, #24
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f7fe fa2e 	bl	8008536 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d002      	beq.n	800a0e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	68b8      	ldr	r0, [r7, #8]
 800a0ea:	f000 fb63 	bl	800a7b4 <prvAddCurrentTaskToDelayedList>
	}
 800a0ee:	bf00      	nop
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20000828 	.word	0x20000828

0800a0fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60fb      	str	r3, [r7, #12]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	3318      	adds	r3, #24
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fa5f 	bl	80085f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a132:	4b1e      	ldr	r3, [pc, #120]	; (800a1ac <xTaskRemoveFromEventList+0xb0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d11d      	bne.n	800a176 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fa56 	bl	80085f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a148:	4b19      	ldr	r3, [pc, #100]	; (800a1b0 <xTaskRemoveFromEventList+0xb4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d903      	bls.n	800a158 <xTaskRemoveFromEventList+0x5c>
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	4a16      	ldr	r2, [pc, #88]	; (800a1b0 <xTaskRemoveFromEventList+0xb4>)
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4a13      	ldr	r2, [pc, #76]	; (800a1b4 <xTaskRemoveFromEventList+0xb8>)
 800a166:	441a      	add	r2, r3
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4619      	mov	r1, r3
 800a16e:	4610      	mov	r0, r2
 800a170:	f7fe f9e1 	bl	8008536 <vListInsertEnd>
 800a174:	e005      	b.n	800a182 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	3318      	adds	r3, #24
 800a17a:	4619      	mov	r1, r3
 800a17c:	480e      	ldr	r0, [pc, #56]	; (800a1b8 <xTaskRemoveFromEventList+0xbc>)
 800a17e:	f7fe f9da 	bl	8008536 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a186:	4b0d      	ldr	r3, [pc, #52]	; (800a1bc <xTaskRemoveFromEventList+0xc0>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d905      	bls.n	800a19c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <xTaskRemoveFromEventList+0xc4>)
 800a196:	2201      	movs	r2, #1
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	e001      	b.n	800a1a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1a0:	697b      	ldr	r3, [r7, #20]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	20000d24 	.word	0x20000d24
 800a1b0:	20000d04 	.word	0x20000d04
 800a1b4:	2000082c 	.word	0x2000082c
 800a1b8:	20000cbc 	.word	0x20000cbc
 800a1bc:	20000828 	.word	0x20000828
 800a1c0:	20000d10 	.word	0x20000d10

0800a1c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1cc:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <vTaskInternalSetTimeOutState+0x24>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1d4:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <vTaskInternalSetTimeOutState+0x28>)
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr
 800a1e8:	20000d14 	.word	0x20000d14
 800a1ec:	20000d00 	.word	0x20000d00

0800a1f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10a      	bne.n	800a232 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60fb      	str	r3, [r7, #12]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a232:	f000 ff8f 	bl	800b154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a236:	4b1d      	ldr	r3, [pc, #116]	; (800a2ac <xTaskCheckForTimeOut+0xbc>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	1ad3      	subs	r3, r2, r3
 800a244:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d102      	bne.n	800a256 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a250:	2300      	movs	r3, #0
 800a252:	61fb      	str	r3, [r7, #28]
 800a254:	e023      	b.n	800a29e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <xTaskCheckForTimeOut+0xc0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d007      	beq.n	800a272 <xTaskCheckForTimeOut+0x82>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d302      	bcc.n	800a272 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a26c:	2301      	movs	r3, #1
 800a26e:	61fb      	str	r3, [r7, #28]
 800a270:	e015      	b.n	800a29e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d20b      	bcs.n	800a294 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	1ad2      	subs	r2, r2, r3
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ff9b 	bl	800a1c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a28e:	2300      	movs	r3, #0
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	e004      	b.n	800a29e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2200      	movs	r2, #0
 800a298:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a29a:	2301      	movs	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a29e:	f000 ff89 	bl	800b1b4 <vPortExitCritical>

	return xReturn;
 800a2a2:	69fb      	ldr	r3, [r7, #28]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000d00 	.word	0x20000d00
 800a2b0:	20000d14 	.word	0x20000d14

0800a2b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2b8:	4b03      	ldr	r3, [pc, #12]	; (800a2c8 <vTaskMissedYield+0x14>)
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]
}
 800a2be:	bf00      	nop
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	20000d10 	.word	0x20000d10

0800a2cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2d4:	f000 f852 	bl	800a37c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2d8:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <prvIdleTask+0x28>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d9f9      	bls.n	800a2d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <prvIdleTask+0x2c>)
 800a2e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2f0:	e7f0      	b.n	800a2d4 <prvIdleTask+0x8>
 800a2f2:	bf00      	nop
 800a2f4:	2000082c 	.word	0x2000082c
 800a2f8:	e000ed04 	.word	0xe000ed04

0800a2fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a302:	2300      	movs	r3, #0
 800a304:	607b      	str	r3, [r7, #4]
 800a306:	e00c      	b.n	800a322 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4a12      	ldr	r2, [pc, #72]	; (800a35c <prvInitialiseTaskLists+0x60>)
 800a314:	4413      	add	r3, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7fe f8e0 	bl	80084dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3301      	adds	r3, #1
 800a320:	607b      	str	r3, [r7, #4]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2b37      	cmp	r3, #55	; 0x37
 800a326:	d9ef      	bls.n	800a308 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a328:	480d      	ldr	r0, [pc, #52]	; (800a360 <prvInitialiseTaskLists+0x64>)
 800a32a:	f7fe f8d7 	bl	80084dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a32e:	480d      	ldr	r0, [pc, #52]	; (800a364 <prvInitialiseTaskLists+0x68>)
 800a330:	f7fe f8d4 	bl	80084dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a334:	480c      	ldr	r0, [pc, #48]	; (800a368 <prvInitialiseTaskLists+0x6c>)
 800a336:	f7fe f8d1 	bl	80084dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a33a:	480c      	ldr	r0, [pc, #48]	; (800a36c <prvInitialiseTaskLists+0x70>)
 800a33c:	f7fe f8ce 	bl	80084dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a340:	480b      	ldr	r0, [pc, #44]	; (800a370 <prvInitialiseTaskLists+0x74>)
 800a342:	f7fe f8cb 	bl	80084dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a346:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <prvInitialiseTaskLists+0x78>)
 800a348:	4a05      	ldr	r2, [pc, #20]	; (800a360 <prvInitialiseTaskLists+0x64>)
 800a34a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <prvInitialiseTaskLists+0x7c>)
 800a34e:	4a05      	ldr	r2, [pc, #20]	; (800a364 <prvInitialiseTaskLists+0x68>)
 800a350:	601a      	str	r2, [r3, #0]
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	2000082c 	.word	0x2000082c
 800a360:	20000c8c 	.word	0x20000c8c
 800a364:	20000ca0 	.word	0x20000ca0
 800a368:	20000cbc 	.word	0x20000cbc
 800a36c:	20000cd0 	.word	0x20000cd0
 800a370:	20000ce8 	.word	0x20000ce8
 800a374:	20000cb4 	.word	0x20000cb4
 800a378:	20000cb8 	.word	0x20000cb8

0800a37c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a382:	e019      	b.n	800a3b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a384:	f000 fee6 	bl	800b154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a388:	4b10      	ldr	r3, [pc, #64]	; (800a3cc <prvCheckTasksWaitingTermination+0x50>)
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe f92b 	bl	80085f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <prvCheckTasksWaitingTermination+0x54>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4a0b      	ldr	r2, [pc, #44]	; (800a3d0 <prvCheckTasksWaitingTermination+0x54>)
 800a3a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <prvCheckTasksWaitingTermination+0x58>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	4a0a      	ldr	r2, [pc, #40]	; (800a3d4 <prvCheckTasksWaitingTermination+0x58>)
 800a3ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3ae:	f000 ff01 	bl	800b1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f810 	bl	800a3d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <prvCheckTasksWaitingTermination+0x58>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1e1      	bne.n	800a384 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3c0:	bf00      	nop
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	20000cd0 	.word	0x20000cd0
 800a3d0:	20000cfc 	.word	0x20000cfc
 800a3d4:	20000ce4 	.word	0x20000ce4

0800a3d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	3354      	adds	r3, #84	; 0x54
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f00d fdd5 	bl	8017f94 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d108      	bne.n	800a406 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 f899 	bl	800b530 <vPortFree>
				vPortFree( pxTCB );
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 f896 	bl	800b530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a404:	e018      	b.n	800a438 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d103      	bne.n	800a418 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f001 f88d 	bl	800b530 <vPortFree>
	}
 800a416:	e00f      	b.n	800a438 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a41e:	2b02      	cmp	r3, #2
 800a420:	d00a      	beq.n	800a438 <prvDeleteTCB+0x60>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	60fb      	str	r3, [r7, #12]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <prvDeleteTCB+0x5e>
	}
 800a438:	bf00      	nop
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a458:	e008      	b.n	800a46c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45a:	4b07      	ldr	r3, [pc, #28]	; (800a478 <prvResetNextTaskUnblockTime+0x38>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4a04      	ldr	r2, [pc, #16]	; (800a47c <prvResetNextTaskUnblockTime+0x3c>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20000cb4 	.word	0x20000cb4
 800a47c:	20000d1c 	.word	0x20000d1c

0800a480 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a486:	4b05      	ldr	r3, [pc, #20]	; (800a49c <xTaskGetCurrentTaskHandle+0x1c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a48c:	687b      	ldr	r3, [r7, #4]
	}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	20000828 	.word	0x20000828

0800a4a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <xTaskGetSchedulerState+0x34>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	607b      	str	r3, [r7, #4]
 800a4b2:	e008      	b.n	800a4c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4b4:	4b08      	ldr	r3, [pc, #32]	; (800a4d8 <xTaskGetSchedulerState+0x38>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	607b      	str	r3, [r7, #4]
 800a4c0:	e001      	b.n	800a4c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4c6:	687b      	ldr	r3, [r7, #4]
	}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	20000d08 	.word	0x20000d08
 800a4d8:	20000d24 	.word	0x20000d24

0800a4dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d051      	beq.n	800a596 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f6:	4b2a      	ldr	r3, [pc, #168]	; (800a5a0 <xTaskPriorityInherit+0xc4>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d241      	bcs.n	800a584 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	db06      	blt.n	800a516 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a508:	4b25      	ldr	r3, [pc, #148]	; (800a5a0 <xTaskPriorityInherit+0xc4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	6959      	ldr	r1, [r3, #20]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51e:	4613      	mov	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4413      	add	r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4a1f      	ldr	r2, [pc, #124]	; (800a5a4 <xTaskPriorityInherit+0xc8>)
 800a528:	4413      	add	r3, r2
 800a52a:	4299      	cmp	r1, r3
 800a52c:	d122      	bne.n	800a574 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe f85c 	bl	80085f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a538:	4b19      	ldr	r3, [pc, #100]	; (800a5a0 <xTaskPriorityInherit+0xc4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a546:	4b18      	ldr	r3, [pc, #96]	; (800a5a8 <xTaskPriorityInherit+0xcc>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d903      	bls.n	800a556 <xTaskPriorityInherit+0x7a>
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	4a15      	ldr	r2, [pc, #84]	; (800a5a8 <xTaskPriorityInherit+0xcc>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4a10      	ldr	r2, [pc, #64]	; (800a5a4 <xTaskPriorityInherit+0xc8>)
 800a564:	441a      	add	r2, r3
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	3304      	adds	r3, #4
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f7fd ffe2 	bl	8008536 <vListInsertEnd>
 800a572:	e004      	b.n	800a57e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a574:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <xTaskPriorityInherit+0xc4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a57e:	2301      	movs	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	e008      	b.n	800a596 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <xTaskPriorityInherit+0xc4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58e:	429a      	cmp	r2, r3
 800a590:	d201      	bcs.n	800a596 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a592:	2301      	movs	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a596:	68fb      	ldr	r3, [r7, #12]
	}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000828 	.word	0x20000828
 800a5a4:	2000082c 	.word	0x2000082c
 800a5a8:	20000d04 	.word	0x20000d04

0800a5ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d056      	beq.n	800a670 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	; (800a67c <xTaskPriorityDisinherit+0xd0>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d00a      	beq.n	800a5e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60fb      	str	r3, [r7, #12]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ee:	f383 8811 	msr	BASEPRI, r3
 800a5f2:	f3bf 8f6f 	isb	sy
 800a5f6:	f3bf 8f4f 	dsb	sy
 800a5fa:	60bb      	str	r3, [r7, #8]
}
 800a5fc:	bf00      	nop
 800a5fe:	e7fe      	b.n	800a5fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a604:	1e5a      	subs	r2, r3, #1
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a612:	429a      	cmp	r2, r3
 800a614:	d02c      	beq.n	800a670 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d128      	bne.n	800a670 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	3304      	adds	r3, #4
 800a622:	4618      	mov	r0, r3
 800a624:	f7fd ffe4 	bl	80085f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a640:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <xTaskPriorityDisinherit+0xd4>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	429a      	cmp	r2, r3
 800a646:	d903      	bls.n	800a650 <xTaskPriorityDisinherit+0xa4>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <xTaskPriorityDisinherit+0xd4>)
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4a09      	ldr	r2, [pc, #36]	; (800a684 <xTaskPriorityDisinherit+0xd8>)
 800a65e:	441a      	add	r2, r3
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	3304      	adds	r3, #4
 800a664:	4619      	mov	r1, r3
 800a666:	4610      	mov	r0, r2
 800a668:	f7fd ff65 	bl	8008536 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a66c:	2301      	movs	r3, #1
 800a66e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a670:	697b      	ldr	r3, [r7, #20]
	}
 800a672:	4618      	mov	r0, r3
 800a674:	3718      	adds	r7, #24
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20000828 	.word	0x20000828
 800a680:	20000d04 	.word	0x20000d04
 800a684:	2000082c 	.word	0x2000082c

0800a688 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a696:	2301      	movs	r3, #1
 800a698:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d06a      	beq.n	800a776 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	60fb      	str	r3, [r7, #12]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d902      	bls.n	800a6ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	e002      	b.n	800a6d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	69fa      	ldr	r2, [r7, #28]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d04b      	beq.n	800a776 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d146      	bne.n	800a776 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d10a      	bne.n	800a708 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60bb      	str	r3, [r7, #8]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	db04      	blt.n	800a726 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	6959      	ldr	r1, [r3, #20]
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4a13      	ldr	r2, [pc, #76]	; (800a784 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a736:	4413      	add	r3, r2
 800a738:	4299      	cmp	r1, r3
 800a73a:	d11c      	bne.n	800a776 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	3304      	adds	r3, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd ff55 	bl	80085f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74a:	4b0f      	ldr	r3, [pc, #60]	; (800a788 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d903      	bls.n	800a75a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	4a0c      	ldr	r2, [pc, #48]	; (800a788 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a758:	6013      	str	r3, [r2, #0]
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	4613      	mov	r3, r2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4a07      	ldr	r2, [pc, #28]	; (800a784 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a768:	441a      	add	r2, r3
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	3304      	adds	r3, #4
 800a76e:	4619      	mov	r1, r3
 800a770:	4610      	mov	r0, r2
 800a772:	f7fd fee0 	bl	8008536 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a776:	bf00      	nop
 800a778:	3720      	adds	r7, #32
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20000828 	.word	0x20000828
 800a784:	2000082c 	.word	0x2000082c
 800a788:	20000d04 	.word	0x20000d04

0800a78c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d004      	beq.n	800a7a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a79e:	3201      	adds	r2, #1
 800a7a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a7a2:	4b03      	ldr	r3, [pc, #12]	; (800a7b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
	}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	20000828 	.word	0x20000828

0800a7b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a7be:	4b21      	ldr	r3, [pc, #132]	; (800a844 <prvAddCurrentTaskToDelayedList+0x90>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7c4:	4b20      	ldr	r3, [pc, #128]	; (800a848 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fd ff10 	bl	80085f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d6:	d10a      	bne.n	800a7ee <prvAddCurrentTaskToDelayedList+0x3a>
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4819      	ldr	r0, [pc, #100]	; (800a84c <prvAddCurrentTaskToDelayedList+0x98>)
 800a7e8:	f7fd fea5 	bl	8008536 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a7ec:	e026      	b.n	800a83c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <prvAddCurrentTaskToDelayedList+0x94>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	429a      	cmp	r2, r3
 800a804:	d209      	bcs.n	800a81a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a806:	4b12      	ldr	r3, [pc, #72]	; (800a850 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <prvAddCurrentTaskToDelayedList+0x94>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3304      	adds	r3, #4
 800a810:	4619      	mov	r1, r3
 800a812:	4610      	mov	r0, r2
 800a814:	f7fd feb3 	bl	800857e <vListInsert>
}
 800a818:	e010      	b.n	800a83c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a81a:	4b0e      	ldr	r3, [pc, #56]	; (800a854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <prvAddCurrentTaskToDelayedList+0x94>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3304      	adds	r3, #4
 800a824:	4619      	mov	r1, r3
 800a826:	4610      	mov	r0, r2
 800a828:	f7fd fea9 	bl	800857e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a82c:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	429a      	cmp	r2, r3
 800a834:	d202      	bcs.n	800a83c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a836:	4a08      	ldr	r2, [pc, #32]	; (800a858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6013      	str	r3, [r2, #0]
}
 800a83c:	bf00      	nop
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000d00 	.word	0x20000d00
 800a848:	20000828 	.word	0x20000828
 800a84c:	20000ce8 	.word	0x20000ce8
 800a850:	20000cb8 	.word	0x20000cb8
 800a854:	20000cb4 	.word	0x20000cb4
 800a858:	20000d1c 	.word	0x20000d1c

0800a85c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a862:	2300      	movs	r3, #0
 800a864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a866:	f000 fb07 	bl	800ae78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a86a:	4b1c      	ldr	r3, [pc, #112]	; (800a8dc <xTimerCreateTimerTask+0x80>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d021      	beq.n	800a8b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a876:	2300      	movs	r3, #0
 800a878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a87a:	1d3a      	adds	r2, r7, #4
 800a87c:	f107 0108 	add.w	r1, r7, #8
 800a880:	f107 030c 	add.w	r3, r7, #12
 800a884:	4618      	mov	r0, r3
 800a886:	f7fd fe0f 	bl	80084a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	9202      	str	r2, [sp, #8]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	2302      	movs	r3, #2
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	2300      	movs	r3, #0
 800a89a:	460a      	mov	r2, r1
 800a89c:	4910      	ldr	r1, [pc, #64]	; (800a8e0 <xTimerCreateTimerTask+0x84>)
 800a89e:	4811      	ldr	r0, [pc, #68]	; (800a8e4 <xTimerCreateTimerTask+0x88>)
 800a8a0:	f7fe ff94 	bl	80097cc <xTaskCreateStatic>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	4a10      	ldr	r2, [pc, #64]	; (800a8e8 <xTimerCreateTimerTask+0x8c>)
 800a8a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a8aa:	4b0f      	ldr	r3, [pc, #60]	; (800a8e8 <xTimerCreateTimerTask+0x8c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	613b      	str	r3, [r7, #16]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a8d2:	697b      	ldr	r3, [r7, #20]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	20000d58 	.word	0x20000d58
 800a8e0:	08018e00 	.word	0x08018e00
 800a8e4:	0800aa21 	.word	0x0800aa21
 800a8e8:	20000d5c 	.word	0x20000d5c

0800a8ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	623b      	str	r3, [r7, #32]
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a91a:	4b1a      	ldr	r3, [pc, #104]	; (800a984 <xTimerGenericCommand+0x98>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d02a      	beq.n	800a978 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b05      	cmp	r3, #5
 800a932:	dc18      	bgt.n	800a966 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a934:	f7ff fdb4 	bl	800a4a0 <xTaskGetSchedulerState>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d109      	bne.n	800a952 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a93e:	4b11      	ldr	r3, [pc, #68]	; (800a984 <xTimerGenericCommand+0x98>)
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	f107 0110 	add.w	r1, r7, #16
 800a946:	2300      	movs	r3, #0
 800a948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a94a:	f7fe f8d9 	bl	8008b00 <xQueueGenericSend>
 800a94e:	6278      	str	r0, [r7, #36]	; 0x24
 800a950:	e012      	b.n	800a978 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a952:	4b0c      	ldr	r3, [pc, #48]	; (800a984 <xTimerGenericCommand+0x98>)
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	f107 0110 	add.w	r1, r7, #16
 800a95a:	2300      	movs	r3, #0
 800a95c:	2200      	movs	r2, #0
 800a95e:	f7fe f8cf 	bl	8008b00 <xQueueGenericSend>
 800a962:	6278      	str	r0, [r7, #36]	; 0x24
 800a964:	e008      	b.n	800a978 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <xTimerGenericCommand+0x98>)
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	f107 0110 	add.w	r1, r7, #16
 800a96e:	2300      	movs	r3, #0
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	f7fe f9c3 	bl	8008cfc <xQueueGenericSendFromISR>
 800a976:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3728      	adds	r7, #40	; 0x28
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	20000d58 	.word	0x20000d58

0800a988 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af02      	add	r7, sp, #8
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a992:	4b22      	ldr	r3, [pc, #136]	; (800aa1c <prvProcessExpiredTimer+0x94>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fd fe25 	bl	80085f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d022      	beq.n	800a9fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	699a      	ldr	r2, [r3, #24]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	18d1      	adds	r1, r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	6978      	ldr	r0, [r7, #20]
 800a9c2:	f000 f8d1 	bl	800ab68 <prvInsertTimerInActiveList>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01f      	beq.n	800aa0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	6978      	ldr	r0, [r7, #20]
 800a9d8:	f7ff ff88 	bl	800a8ec <xTimerGenericCommand>
 800a9dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d113      	bne.n	800aa0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	60fb      	str	r3, [r7, #12]
}
 800a9f6:	bf00      	nop
 800a9f8:	e7fe      	b.n	800a9f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa00:	f023 0301 	bic.w	r3, r3, #1
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	6978      	ldr	r0, [r7, #20]
 800aa12:	4798      	blx	r3
}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000d50 	.word	0x20000d50

0800aa20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa28:	f107 0308 	add.w	r3, r7, #8
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f857 	bl	800aae0 <prvGetNextExpireTime>
 800aa32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	4619      	mov	r1, r3
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f000 f803 	bl	800aa44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aa3e:	f000 f8d5 	bl	800abec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aa42:	e7f1      	b.n	800aa28 <prvTimerTask+0x8>

0800aa44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aa4e:	f7ff f919 	bl	8009c84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa52:	f107 0308 	add.w	r3, r7, #8
 800aa56:	4618      	mov	r0, r3
 800aa58:	f000 f866 	bl	800ab28 <prvSampleTimeNow>
 800aa5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d130      	bne.n	800aac6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10a      	bne.n	800aa80 <prvProcessTimerOrBlockTask+0x3c>
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d806      	bhi.n	800aa80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800aa72:	f7ff f915 	bl	8009ca0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff ff85 	bl	800a988 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800aa7e:	e024      	b.n	800aaca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d008      	beq.n	800aa98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aa86:	4b13      	ldr	r3, [pc, #76]	; (800aad4 <prvProcessTimerOrBlockTask+0x90>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <prvProcessTimerOrBlockTask+0x50>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e000      	b.n	800aa96 <prvProcessTimerOrBlockTask+0x52>
 800aa94:	2300      	movs	r3, #0
 800aa96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aa98:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <prvProcessTimerOrBlockTask+0x94>)
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f7fe fe5d 	bl	8009764 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aaaa:	f7ff f8f9 	bl	8009ca0 <xTaskResumeAll>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10a      	bne.n	800aaca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aab4:	4b09      	ldr	r3, [pc, #36]	; (800aadc <prvProcessTimerOrBlockTask+0x98>)
 800aab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	f3bf 8f6f 	isb	sy
}
 800aac4:	e001      	b.n	800aaca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aac6:	f7ff f8eb 	bl	8009ca0 <xTaskResumeAll>
}
 800aaca:	bf00      	nop
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20000d54 	.word	0x20000d54
 800aad8:	20000d58 	.word	0x20000d58
 800aadc:	e000ed04 	.word	0xe000ed04

0800aae0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <prvGetNextExpireTime+0x44>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <prvGetNextExpireTime+0x16>
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	e000      	b.n	800aaf8 <prvGetNextExpireTime+0x18>
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d105      	bne.n	800ab10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab04:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <prvGetNextExpireTime+0x44>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	e001      	b.n	800ab14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ab14:	68fb      	ldr	r3, [r7, #12]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	20000d50 	.word	0x20000d50

0800ab28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ab30:	f7ff f954 	bl	8009ddc <xTaskGetTickCount>
 800ab34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <prvSampleTimeNow+0x3c>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d205      	bcs.n	800ab4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ab40:	f000 f936 	bl	800adb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ab52:	4a04      	ldr	r2, [pc, #16]	; (800ab64 <prvSampleTimeNow+0x3c>)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	20000d60 	.word	0x20000d60

0800ab68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d812      	bhi.n	800abb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	1ad2      	subs	r2, r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e01b      	b.n	800abda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aba2:	4b10      	ldr	r3, [pc, #64]	; (800abe4 <prvInsertTimerInActiveList+0x7c>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3304      	adds	r3, #4
 800abaa:	4619      	mov	r1, r3
 800abac:	4610      	mov	r0, r2
 800abae:	f7fd fce6 	bl	800857e <vListInsert>
 800abb2:	e012      	b.n	800abda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d206      	bcs.n	800abca <prvInsertTimerInActiveList+0x62>
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d302      	bcc.n	800abca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	617b      	str	r3, [r7, #20]
 800abc8:	e007      	b.n	800abda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abca:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <prvInsertTimerInActiveList+0x80>)
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	3304      	adds	r3, #4
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	f7fd fcd2 	bl	800857e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800abda:	697b      	ldr	r3, [r7, #20]
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000d54 	.word	0x20000d54
 800abe8:	20000d50 	.word	0x20000d50

0800abec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08e      	sub	sp, #56	; 0x38
 800abf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abf2:	e0ca      	b.n	800ad8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	da18      	bge.n	800ac2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800abfa:	1d3b      	adds	r3, r7, #4
 800abfc:	3304      	adds	r3, #4
 800abfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10a      	bne.n	800ac1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	61fb      	str	r3, [r7, #28]
}
 800ac18:	bf00      	nop
 800ac1a:	e7fe      	b.n	800ac1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac22:	6850      	ldr	r0, [r2, #4]
 800ac24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac26:	6892      	ldr	r2, [r2, #8]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f2c0 80aa 	blt.w	800ad88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fd fcd3 	bl	80085f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff ff6b 	bl	800ab28 <prvSampleTimeNow>
 800ac52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b09      	cmp	r3, #9
 800ac58:	f200 8097 	bhi.w	800ad8a <prvProcessReceivedCommands+0x19e>
 800ac5c:	a201      	add	r2, pc, #4	; (adr r2, 800ac64 <prvProcessReceivedCommands+0x78>)
 800ac5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac62:	bf00      	nop
 800ac64:	0800ac8d 	.word	0x0800ac8d
 800ac68:	0800ac8d 	.word	0x0800ac8d
 800ac6c:	0800ac8d 	.word	0x0800ac8d
 800ac70:	0800ad01 	.word	0x0800ad01
 800ac74:	0800ad15 	.word	0x0800ad15
 800ac78:	0800ad5f 	.word	0x0800ad5f
 800ac7c:	0800ac8d 	.word	0x0800ac8d
 800ac80:	0800ac8d 	.word	0x0800ac8d
 800ac84:	0800ad01 	.word	0x0800ad01
 800ac88:	0800ad15 	.word	0x0800ad15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac92:	f043 0301 	orr.w	r3, r3, #1
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	18d1      	adds	r1, r2, r3
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acac:	f7ff ff5c 	bl	800ab68 <prvInsertTimerInActiveList>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d069      	beq.n	800ad8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d05e      	beq.n	800ad8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800accc:	68ba      	ldr	r2, [r7, #8]
 800acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	441a      	add	r2, r3
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	2300      	movs	r3, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acde:	f7ff fe05 	bl	800a8ec <xTimerGenericCommand>
 800ace2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d14f      	bne.n	800ad8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	61bb      	str	r3, [r7, #24]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad06:	f023 0301 	bic.w	r3, r3, #1
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ad12:	e03a      	b.n	800ad8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad1a:	f043 0301 	orr.w	r3, r3, #1
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10a      	bne.n	800ad4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	f383 8811 	msr	BASEPRI, r3
 800ad3c:	f3bf 8f6f 	isb	sy
 800ad40:	f3bf 8f4f 	dsb	sy
 800ad44:	617b      	str	r3, [r7, #20]
}
 800ad46:	bf00      	nop
 800ad48:	e7fe      	b.n	800ad48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	699a      	ldr	r2, [r3, #24]
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	18d1      	adds	r1, r2, r3
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad58:	f7ff ff06 	bl	800ab68 <prvInsertTimerInActiveList>
					break;
 800ad5c:	e015      	b.n	800ad8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ad5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ad6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6e:	f000 fbdf 	bl	800b530 <vPortFree>
 800ad72:	e00a      	b.n	800ad8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad7a:	f023 0301 	bic.w	r3, r3, #1
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ad86:	e000      	b.n	800ad8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ad88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad8a:	4b08      	ldr	r3, [pc, #32]	; (800adac <prvProcessReceivedCommands+0x1c0>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	1d39      	adds	r1, r7, #4
 800ad90:	2200      	movs	r2, #0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe f8da 	bl	8008f4c <xQueueReceive>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f47f af2a 	bne.w	800abf4 <prvProcessReceivedCommands+0x8>
	}
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	3730      	adds	r7, #48	; 0x30
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000d58 	.word	0x20000d58

0800adb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800adb6:	e048      	b.n	800ae4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adb8:	4b2d      	ldr	r3, [pc, #180]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adc2:	4b2b      	ldr	r3, [pc, #172]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3304      	adds	r3, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f7fd fc0d 	bl	80085f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d02e      	beq.n	800ae4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	699b      	ldr	r3, [r3, #24]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	4413      	add	r3, r2
 800adf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d90e      	bls.n	800ae1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae0a:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3304      	adds	r3, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	4610      	mov	r0, r2
 800ae16:	f7fd fbb2 	bl	800857e <vListInsert>
 800ae1a:	e016      	b.n	800ae4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	2100      	movs	r1, #0
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f7ff fd60 	bl	800a8ec <xTimerGenericCommand>
 800ae2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	603b      	str	r3, [r7, #0]
}
 800ae46:	bf00      	nop
 800ae48:	e7fe      	b.n	800ae48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1b1      	bne.n	800adb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ae54:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <prvSwitchTimerLists+0xc4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <prvSwitchTimerLists+0xc0>)
 800ae60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ae62:	4a04      	ldr	r2, [pc, #16]	; (800ae74 <prvSwitchTimerLists+0xc4>)
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	6013      	str	r3, [r2, #0]
}
 800ae68:	bf00      	nop
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20000d50 	.word	0x20000d50
 800ae74:	20000d54 	.word	0x20000d54

0800ae78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ae7e:	f000 f969 	bl	800b154 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <prvCheckForValidListAndQueue+0x60>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d120      	bne.n	800aecc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ae8a:	4814      	ldr	r0, [pc, #80]	; (800aedc <prvCheckForValidListAndQueue+0x64>)
 800ae8c:	f7fd fb26 	bl	80084dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ae90:	4813      	ldr	r0, [pc, #76]	; (800aee0 <prvCheckForValidListAndQueue+0x68>)
 800ae92:	f7fd fb23 	bl	80084dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <prvCheckForValidListAndQueue+0x6c>)
 800ae98:	4a10      	ldr	r2, [pc, #64]	; (800aedc <prvCheckForValidListAndQueue+0x64>)
 800ae9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ae9c:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <prvCheckForValidListAndQueue+0x70>)
 800ae9e:	4a10      	ldr	r2, [pc, #64]	; (800aee0 <prvCheckForValidListAndQueue+0x68>)
 800aea0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aea2:	2300      	movs	r3, #0
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	4b11      	ldr	r3, [pc, #68]	; (800aeec <prvCheckForValidListAndQueue+0x74>)
 800aea8:	4a11      	ldr	r2, [pc, #68]	; (800aef0 <prvCheckForValidListAndQueue+0x78>)
 800aeaa:	2110      	movs	r1, #16
 800aeac:	200a      	movs	r0, #10
 800aeae:	f7fd fc31 	bl	8008714 <xQueueGenericCreateStatic>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	4a08      	ldr	r2, [pc, #32]	; (800aed8 <prvCheckForValidListAndQueue+0x60>)
 800aeb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aeb8:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <prvCheckForValidListAndQueue+0x60>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aec0:	4b05      	ldr	r3, [pc, #20]	; (800aed8 <prvCheckForValidListAndQueue+0x60>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	490b      	ldr	r1, [pc, #44]	; (800aef4 <prvCheckForValidListAndQueue+0x7c>)
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fbf8 	bl	80096bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aecc:	f000 f972 	bl	800b1b4 <vPortExitCritical>
}
 800aed0:	bf00      	nop
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000d58 	.word	0x20000d58
 800aedc:	20000d28 	.word	0x20000d28
 800aee0:	20000d3c 	.word	0x20000d3c
 800aee4:	20000d50 	.word	0x20000d50
 800aee8:	20000d54 	.word	0x20000d54
 800aeec:	20000e04 	.word	0x20000e04
 800aef0:	20000d64 	.word	0x20000d64
 800aef4:	08018e08 	.word	0x08018e08

0800aef8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3b04      	subs	r3, #4
 800af08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3b04      	subs	r3, #4
 800af16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	f023 0201 	bic.w	r2, r3, #1
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3b04      	subs	r3, #4
 800af26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af28:	4a0c      	ldr	r2, [pc, #48]	; (800af5c <pxPortInitialiseStack+0x64>)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3b14      	subs	r3, #20
 800af32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f06f 0202 	mvn.w	r2, #2
 800af46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3b20      	subs	r3, #32
 800af4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800af4e:	68fb      	ldr	r3, [r7, #12]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	0800af61 	.word	0x0800af61

0800af60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af6a:	4b12      	ldr	r3, [pc, #72]	; (800afb4 <prvTaskExitError+0x54>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d00a      	beq.n	800af8a <prvTaskExitError+0x2a>
	__asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	60fb      	str	r3, [r7, #12]
}
 800af86:	bf00      	nop
 800af88:	e7fe      	b.n	800af88 <prvTaskExitError+0x28>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	60bb      	str	r3, [r7, #8]
}
 800af9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af9e:	bf00      	nop
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0fc      	beq.n	800afa0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800afa6:	bf00      	nop
 800afa8:	bf00      	nop
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	2000000c 	.word	0x2000000c
	...

0800afc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800afc0:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <pxCurrentTCBConst2>)
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6808      	ldr	r0, [r1, #0]
 800afc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	f380 8809 	msr	PSP, r0
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f04f 0000 	mov.w	r0, #0
 800afd6:	f380 8811 	msr	BASEPRI, r0
 800afda:	4770      	bx	lr
 800afdc:	f3af 8000 	nop.w

0800afe0 <pxCurrentTCBConst2>:
 800afe0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop

0800afe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afe8:	4808      	ldr	r0, [pc, #32]	; (800b00c <prvPortStartFirstTask+0x24>)
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	6800      	ldr	r0, [r0, #0]
 800afee:	f380 8808 	msr	MSP, r0
 800aff2:	f04f 0000 	mov.w	r0, #0
 800aff6:	f380 8814 	msr	CONTROL, r0
 800affa:	b662      	cpsie	i
 800affc:	b661      	cpsie	f
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	df00      	svc	0
 800b008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b00a:	bf00      	nop
 800b00c:	e000ed08 	.word	0xe000ed08

0800b010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b016:	4b46      	ldr	r3, [pc, #280]	; (800b130 <xPortStartScheduler+0x120>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a46      	ldr	r2, [pc, #280]	; (800b134 <xPortStartScheduler+0x124>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d10a      	bne.n	800b036 <xPortStartScheduler+0x26>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b036:	4b3e      	ldr	r3, [pc, #248]	; (800b130 <xPortStartScheduler+0x120>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a3f      	ldr	r2, [pc, #252]	; (800b138 <xPortStartScheduler+0x128>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d10a      	bne.n	800b056 <xPortStartScheduler+0x46>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	60fb      	str	r3, [r7, #12]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <xPortStartScheduler+0x12c>)
 800b058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b070:	78fb      	ldrb	r3, [r7, #3]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	4b31      	ldr	r3, [pc, #196]	; (800b140 <xPortStartScheduler+0x130>)
 800b07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b07e:	4b31      	ldr	r3, [pc, #196]	; (800b144 <xPortStartScheduler+0x134>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b084:	e009      	b.n	800b09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b086:	4b2f      	ldr	r3, [pc, #188]	; (800b144 <xPortStartScheduler+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3b01      	subs	r3, #1
 800b08c:	4a2d      	ldr	r2, [pc, #180]	; (800b144 <xPortStartScheduler+0x134>)
 800b08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b090:	78fb      	ldrb	r3, [r7, #3]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	b2db      	uxtb	r3, r3
 800b098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0a2:	2b80      	cmp	r3, #128	; 0x80
 800b0a4:	d0ef      	beq.n	800b086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0a6:	4b27      	ldr	r3, [pc, #156]	; (800b144 <xPortStartScheduler+0x134>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f1c3 0307 	rsb	r3, r3, #7
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d00a      	beq.n	800b0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60bb      	str	r3, [r7, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	e7fe      	b.n	800b0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b0c8:	4b1e      	ldr	r3, [pc, #120]	; (800b144 <xPortStartScheduler+0x134>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <xPortStartScheduler+0x134>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b0da:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <xPortStartScheduler+0x134>)
 800b0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <xPortStartScheduler+0x138>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a17      	ldr	r2, [pc, #92]	; (800b148 <xPortStartScheduler+0x138>)
 800b0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a14      	ldr	r2, [pc, #80]	; (800b148 <xPortStartScheduler+0x138>)
 800b0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0fe:	f000 f8dd 	bl	800b2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b102:	4b12      	ldr	r3, [pc, #72]	; (800b14c <xPortStartScheduler+0x13c>)
 800b104:	2200      	movs	r2, #0
 800b106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b108:	f000 f8fc 	bl	800b304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <xPortStartScheduler+0x140>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0f      	ldr	r2, [pc, #60]	; (800b150 <xPortStartScheduler+0x140>)
 800b112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b118:	f7ff ff66 	bl	800afe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b11c:	f7fe ff3a 	bl	8009f94 <vTaskSwitchContext>
	prvTaskExitError();
 800b120:	f7ff ff1e 	bl	800af60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	e000ed00 	.word	0xe000ed00
 800b134:	410fc271 	.word	0x410fc271
 800b138:	410fc270 	.word	0x410fc270
 800b13c:	e000e400 	.word	0xe000e400
 800b140:	20000e54 	.word	0x20000e54
 800b144:	20000e58 	.word	0x20000e58
 800b148:	e000ed20 	.word	0xe000ed20
 800b14c:	2000000c 	.word	0x2000000c
 800b150:	e000ef34 	.word	0xe000ef34

0800b154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
	__asm volatile
 800b15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15e:	f383 8811 	msr	BASEPRI, r3
 800b162:	f3bf 8f6f 	isb	sy
 800b166:	f3bf 8f4f 	dsb	sy
 800b16a:	607b      	str	r3, [r7, #4]
}
 800b16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b16e:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <vPortEnterCritical+0x58>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	4a0d      	ldr	r2, [pc, #52]	; (800b1ac <vPortEnterCritical+0x58>)
 800b176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <vPortEnterCritical+0x58>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d10f      	bne.n	800b1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b180:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <vPortEnterCritical+0x5c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00a      	beq.n	800b1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	603b      	str	r3, [r7, #0]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <vPortEnterCritical+0x4a>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	2000000c 	.word	0x2000000c
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b1ba:	4b12      	ldr	r3, [pc, #72]	; (800b204 <vPortExitCritical+0x50>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10a      	bne.n	800b1d8 <vPortExitCritical+0x24>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	607b      	str	r3, [r7, #4]
}
 800b1d4:	bf00      	nop
 800b1d6:	e7fe      	b.n	800b1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <vPortExitCritical+0x50>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	4a09      	ldr	r2, [pc, #36]	; (800b204 <vPortExitCritical+0x50>)
 800b1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b1e2:	4b08      	ldr	r3, [pc, #32]	; (800b204 <vPortExitCritical+0x50>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d105      	bne.n	800b1f6 <vPortExitCritical+0x42>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	f383 8811 	msr	BASEPRI, r3
}
 800b1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1f6:	bf00      	nop
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	2000000c 	.word	0x2000000c
	...

0800b210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b210:	f3ef 8009 	mrs	r0, PSP
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4b15      	ldr	r3, [pc, #84]	; (800b270 <pxCurrentTCBConst>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	f01e 0f10 	tst.w	lr, #16
 800b220:	bf08      	it	eq
 800b222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	6010      	str	r0, [r2, #0]
 800b22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b234:	f380 8811 	msr	BASEPRI, r0
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f7fe fea8 	bl	8009f94 <vTaskSwitchContext>
 800b244:	f04f 0000 	mov.w	r0, #0
 800b248:	f380 8811 	msr	BASEPRI, r0
 800b24c:	bc09      	pop	{r0, r3}
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	6808      	ldr	r0, [r1, #0]
 800b252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b256:	f01e 0f10 	tst.w	lr, #16
 800b25a:	bf08      	it	eq
 800b25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b260:	f380 8809 	msr	PSP, r0
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	f3af 8000 	nop.w

0800b270 <pxCurrentTCBConst>:
 800b270:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop

0800b278 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b292:	f7fe fdc5 	bl	8009e20 <xTaskIncrementTick>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <xPortSysTickHandler+0x40>)
 800b29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2a2:	601a      	str	r2, [r3, #0]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	f383 8811 	msr	BASEPRI, r3
}
 800b2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b2b0:	bf00      	nop
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	e000ed04 	.word	0xe000ed04

0800b2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b2bc:	b480      	push	{r7}
 800b2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b2c6:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <vPortSetupTimerInterrupt+0x38>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b2cc:	4b0a      	ldr	r3, [pc, #40]	; (800b2f8 <vPortSetupTimerInterrupt+0x3c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	4a0a      	ldr	r2, [pc, #40]	; (800b2fc <vPortSetupTimerInterrupt+0x40>)
 800b2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d6:	099b      	lsrs	r3, r3, #6
 800b2d8:	4a09      	ldr	r2, [pc, #36]	; (800b300 <vPortSetupTimerInterrupt+0x44>)
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <vPortSetupTimerInterrupt+0x34>)
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	601a      	str	r2, [r3, #0]
}
 800b2e4:	bf00      	nop
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	e000e010 	.word	0xe000e010
 800b2f4:	e000e018 	.word	0xe000e018
 800b2f8:	20000000 	.word	0x20000000
 800b2fc:	10624dd3 	.word	0x10624dd3
 800b300:	e000e014 	.word	0xe000e014

0800b304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b314 <vPortEnableVFP+0x10>
 800b308:	6801      	ldr	r1, [r0, #0]
 800b30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b30e:	6001      	str	r1, [r0, #0]
 800b310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b312:	bf00      	nop
 800b314:	e000ed88 	.word	0xe000ed88

0800b318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b31e:	f3ef 8305 	mrs	r3, IPSR
 800b322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b0f      	cmp	r3, #15
 800b328:	d914      	bls.n	800b354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b32a:	4a17      	ldr	r2, [pc, #92]	; (800b388 <vPortValidateInterruptPriority+0x70>)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b334:	4b15      	ldr	r3, [pc, #84]	; (800b38c <vPortValidateInterruptPriority+0x74>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	7afa      	ldrb	r2, [r7, #11]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d20a      	bcs.n	800b354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	607b      	str	r3, [r7, #4]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b354:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <vPortValidateInterruptPriority+0x78>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <vPortValidateInterruptPriority+0x7c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d90a      	bls.n	800b37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	603b      	str	r3, [r7, #0]
}
 800b376:	bf00      	nop
 800b378:	e7fe      	b.n	800b378 <vPortValidateInterruptPriority+0x60>
	}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	e000e3f0 	.word	0xe000e3f0
 800b38c:	20000e54 	.word	0x20000e54
 800b390:	e000ed0c 	.word	0xe000ed0c
 800b394:	20000e58 	.word	0x20000e58

0800b398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b08a      	sub	sp, #40	; 0x28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3a4:	f7fe fc6e 	bl	8009c84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3a8:	4b5b      	ldr	r3, [pc, #364]	; (800b518 <pvPortMalloc+0x180>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b3b0:	f000 f920 	bl	800b5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3b4:	4b59      	ldr	r3, [pc, #356]	; (800b51c <pvPortMalloc+0x184>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f040 8093 	bne.w	800b4e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d01d      	beq.n	800b404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b3c8:	2208      	movs	r2, #8
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d014      	beq.n	800b404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f023 0307 	bic.w	r3, r3, #7
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00a      	beq.n	800b404 <pvPortMalloc+0x6c>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	617b      	str	r3, [r7, #20]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d06e      	beq.n	800b4e8 <pvPortMalloc+0x150>
 800b40a:	4b45      	ldr	r3, [pc, #276]	; (800b520 <pvPortMalloc+0x188>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	429a      	cmp	r2, r3
 800b412:	d869      	bhi.n	800b4e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b414:	4b43      	ldr	r3, [pc, #268]	; (800b524 <pvPortMalloc+0x18c>)
 800b416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b418:	4b42      	ldr	r3, [pc, #264]	; (800b524 <pvPortMalloc+0x18c>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b41e:	e004      	b.n	800b42a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <pvPortMalloc+0xa4>
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f1      	bne.n	800b420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b43c:	4b36      	ldr	r3, [pc, #216]	; (800b518 <pvPortMalloc+0x180>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b442:	429a      	cmp	r2, r3
 800b444:	d050      	beq.n	800b4e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2208      	movs	r2, #8
 800b44c:	4413      	add	r3, r2
 800b44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	1ad2      	subs	r2, r2, r3
 800b460:	2308      	movs	r3, #8
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	429a      	cmp	r2, r3
 800b466:	d91f      	bls.n	800b4a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4413      	add	r3, r2
 800b46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f003 0307 	and.w	r3, r3, #7
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <pvPortMalloc+0xf8>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	613b      	str	r3, [r7, #16]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4a2:	69b8      	ldr	r0, [r7, #24]
 800b4a4:	f000 f908 	bl	800b6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4a8:	4b1d      	ldr	r3, [pc, #116]	; (800b520 <pvPortMalloc+0x188>)
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	4a1b      	ldr	r2, [pc, #108]	; (800b520 <pvPortMalloc+0x188>)
 800b4b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <pvPortMalloc+0x188>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	4b1b      	ldr	r3, [pc, #108]	; (800b528 <pvPortMalloc+0x190>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d203      	bcs.n	800b4ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b4c2:	4b17      	ldr	r3, [pc, #92]	; (800b520 <pvPortMalloc+0x188>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a18      	ldr	r2, [pc, #96]	; (800b528 <pvPortMalloc+0x190>)
 800b4c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b13      	ldr	r3, [pc, #76]	; (800b51c <pvPortMalloc+0x184>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	2200      	movs	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b4de:	4b13      	ldr	r3, [pc, #76]	; (800b52c <pvPortMalloc+0x194>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	4a11      	ldr	r2, [pc, #68]	; (800b52c <pvPortMalloc+0x194>)
 800b4e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4e8:	f7fe fbda 	bl	8009ca0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00a      	beq.n	800b50c <pvPortMalloc+0x174>
	__asm volatile
 800b4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <pvPortMalloc+0x172>
	return pvReturn;
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3728      	adds	r7, #40	; 0x28
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20004a64 	.word	0x20004a64
 800b51c:	20004a78 	.word	0x20004a78
 800b520:	20004a68 	.word	0x20004a68
 800b524:	20004a5c 	.word	0x20004a5c
 800b528:	20004a6c 	.word	0x20004a6c
 800b52c:	20004a70 	.word	0x20004a70

0800b530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d04d      	beq.n	800b5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b542:	2308      	movs	r3, #8
 800b544:	425b      	negs	r3, r3
 800b546:	697a      	ldr	r2, [r7, #20]
 800b548:	4413      	add	r3, r2
 800b54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	4b24      	ldr	r3, [pc, #144]	; (800b5e8 <vPortFree+0xb8>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4013      	ands	r3, r2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10a      	bne.n	800b574 <vPortFree+0x44>
	__asm volatile
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	60fb      	str	r3, [r7, #12]
}
 800b570:	bf00      	nop
 800b572:	e7fe      	b.n	800b572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <vPortFree+0x62>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60bb      	str	r3, [r7, #8]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <vPortFree+0xb8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4013      	ands	r3, r2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d01e      	beq.n	800b5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11a      	bne.n	800b5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <vPortFree+0xb8>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	43db      	mvns	r3, r3
 800b5b2:	401a      	ands	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b5b8:	f7fe fb64 	bl	8009c84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <vPortFree+0xbc>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <vPortFree+0xbc>)
 800b5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b5ca:	6938      	ldr	r0, [r7, #16]
 800b5cc:	f000 f874 	bl	800b6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b5d0:	4b07      	ldr	r3, [pc, #28]	; (800b5f0 <vPortFree+0xc0>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a06      	ldr	r2, [pc, #24]	; (800b5f0 <vPortFree+0xc0>)
 800b5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b5da:	f7fe fb61 	bl	8009ca0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b5de:	bf00      	nop
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20004a78 	.word	0x20004a78
 800b5ec:	20004a68 	.word	0x20004a68
 800b5f0:	20004a74 	.word	0x20004a74

0800b5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <prvHeapInit+0xac>)
 800b602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00c      	beq.n	800b628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3307      	adds	r3, #7
 800b612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0307 	bic.w	r3, r3, #7
 800b61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	4a1f      	ldr	r2, [pc, #124]	; (800b6a0 <prvHeapInit+0xac>)
 800b624:	4413      	add	r3, r2
 800b626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b62c:	4a1d      	ldr	r2, [pc, #116]	; (800b6a4 <prvHeapInit+0xb0>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b632:	4b1c      	ldr	r3, [pc, #112]	; (800b6a4 <prvHeapInit+0xb0>)
 800b634:	2200      	movs	r2, #0
 800b636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4413      	add	r3, r2
 800b63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b640:	2208      	movs	r2, #8
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f023 0307 	bic.w	r3, r3, #7
 800b64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	4a15      	ldr	r2, [pc, #84]	; (800b6a8 <prvHeapInit+0xb4>)
 800b654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b656:	4b14      	ldr	r3, [pc, #80]	; (800b6a8 <prvHeapInit+0xb4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b65e:	4b12      	ldr	r3, [pc, #72]	; (800b6a8 <prvHeapInit+0xb4>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b674:	4b0c      	ldr	r3, [pc, #48]	; (800b6a8 <prvHeapInit+0xb4>)
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <prvHeapInit+0xb8>)
 800b682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	4a09      	ldr	r2, [pc, #36]	; (800b6b0 <prvHeapInit+0xbc>)
 800b68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b68c:	4b09      	ldr	r3, [pc, #36]	; (800b6b4 <prvHeapInit+0xc0>)
 800b68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b692:	601a      	str	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr
 800b6a0:	20000e5c 	.word	0x20000e5c
 800b6a4:	20004a5c 	.word	0x20004a5c
 800b6a8:	20004a64 	.word	0x20004a64
 800b6ac:	20004a6c 	.word	0x20004a6c
 800b6b0:	20004a68 	.word	0x20004a68
 800b6b4:	20004a78 	.word	0x20004a78

0800b6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b6c0:	4b28      	ldr	r3, [pc, #160]	; (800b764 <prvInsertBlockIntoFreeList+0xac>)
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e002      	b.n	800b6cc <prvInsertBlockIntoFreeList+0x14>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d8f7      	bhi.n	800b6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d108      	bne.n	800b6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	441a      	add	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	441a      	add	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d118      	bne.n	800b740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	4b15      	ldr	r3, [pc, #84]	; (800b768 <prvInsertBlockIntoFreeList+0xb0>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d00d      	beq.n	800b736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	441a      	add	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	e008      	b.n	800b748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b736:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <prvInsertBlockIntoFreeList+0xb0>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e003      	b.n	800b748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d002      	beq.n	800b756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20004a5c 	.word	0x20004a5c
 800b768:	20004a64 	.word	0x20004a64

0800b76c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b776:	f007 fa97 	bl	8012ca8 <sys_timeouts_sleeptime>
 800b77a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b782:	d10b      	bne.n	800b79c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b784:	4813      	ldr	r0, [pc, #76]	; (800b7d4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b786:	f00c f99e 	bl	8017ac6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b78a:	2200      	movs	r2, #0
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f00c f926 	bl	80179e0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b794:	480f      	ldr	r0, [pc, #60]	; (800b7d4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b796:	f00c f987 	bl	8017aa8 <sys_mutex_lock>
    return;
 800b79a:	e018      	b.n	800b7ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d102      	bne.n	800b7a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b7a2:	f007 fa47 	bl	8012c34 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b7a6:	e7e6      	b.n	800b776 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b7a8:	480a      	ldr	r0, [pc, #40]	; (800b7d4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b7aa:	f00c f98c 	bl	8017ac6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f00c f914 	bl	80179e0 <sys_arch_mbox_fetch>
 800b7b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b7ba:	4806      	ldr	r0, [pc, #24]	; (800b7d4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b7bc:	f00c f974 	bl	8017aa8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c6:	d102      	bne.n	800b7ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b7c8:	f007 fa34 	bl	8012c34 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b7cc:	e7d3      	b.n	800b776 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	200096cc 	.word	0x200096cc

0800b7d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b7e0:	4810      	ldr	r0, [pc, #64]	; (800b824 <tcpip_thread+0x4c>)
 800b7e2:	f00c f961 	bl	8017aa8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b7e6:	4b10      	ldr	r3, [pc, #64]	; (800b828 <tcpip_thread+0x50>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b7ee:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <tcpip_thread+0x50>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a0e      	ldr	r2, [pc, #56]	; (800b82c <tcpip_thread+0x54>)
 800b7f4:	6812      	ldr	r2, [r2, #0]
 800b7f6:	4610      	mov	r0, r2
 800b7f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b7fa:	f107 030c 	add.w	r3, r7, #12
 800b7fe:	4619      	mov	r1, r3
 800b800:	480b      	ldr	r0, [pc, #44]	; (800b830 <tcpip_thread+0x58>)
 800b802:	f7ff ffb3 	bl	800b76c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d106      	bne.n	800b81a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b80c:	4b09      	ldr	r3, [pc, #36]	; (800b834 <tcpip_thread+0x5c>)
 800b80e:	2291      	movs	r2, #145	; 0x91
 800b810:	4909      	ldr	r1, [pc, #36]	; (800b838 <tcpip_thread+0x60>)
 800b812:	480a      	ldr	r0, [pc, #40]	; (800b83c <tcpip_thread+0x64>)
 800b814:	f00c fb58 	bl	8017ec8 <iprintf>
      continue;
 800b818:	e003      	b.n	800b822 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 f80f 	bl	800b840 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b822:	e7ea      	b.n	800b7fa <tcpip_thread+0x22>
 800b824:	200096cc 	.word	0x200096cc
 800b828:	20004a7c 	.word	0x20004a7c
 800b82c:	20004a80 	.word	0x20004a80
 800b830:	20004a84 	.word	0x20004a84
 800b834:	08018e10 	.word	0x08018e10
 800b838:	08018e40 	.word	0x08018e40
 800b83c:	08018e60 	.word	0x08018e60

0800b840 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d026      	beq.n	800b89e <tcpip_thread_handle_msg+0x5e>
 800b850:	2b02      	cmp	r3, #2
 800b852:	dc2b      	bgt.n	800b8ac <tcpip_thread_handle_msg+0x6c>
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <tcpip_thread_handle_msg+0x1e>
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d015      	beq.n	800b888 <tcpip_thread_handle_msg+0x48>
 800b85c:	e026      	b.n	800b8ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	6850      	ldr	r0, [r2, #4]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	6892      	ldr	r2, [r2, #8]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d004      	beq.n	800b87e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	4618      	mov	r0, r3
 800b87a:	f001 fcd1 	bl	800d220 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	2009      	movs	r0, #9
 800b882:	f000 fe1d 	bl	800c4c0 <memp_free>
      break;
 800b886:	e018      	b.n	800b8ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	6892      	ldr	r2, [r2, #8]
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	2008      	movs	r0, #8
 800b898:	f000 fe12 	bl	800c4c0 <memp_free>
      break;
 800b89c:	e00d      	b.n	800b8ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6892      	ldr	r2, [r2, #8]
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4798      	blx	r3
      break;
 800b8aa:	e006      	b.n	800b8ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <tcpip_thread_handle_msg+0x84>)
 800b8ae:	22cf      	movs	r2, #207	; 0xcf
 800b8b0:	4905      	ldr	r1, [pc, #20]	; (800b8c8 <tcpip_thread_handle_msg+0x88>)
 800b8b2:	4806      	ldr	r0, [pc, #24]	; (800b8cc <tcpip_thread_handle_msg+0x8c>)
 800b8b4:	f00c fb08 	bl	8017ec8 <iprintf>
      break;
 800b8b8:	bf00      	nop
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	3708      	adds	r7, #8
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	08018e10 	.word	0x08018e10
 800b8c8:	08018e40 	.word	0x08018e40
 800b8cc:	08018e60 	.word	0x08018e60

0800b8d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b8dc:	481a      	ldr	r0, [pc, #104]	; (800b948 <tcpip_inpkt+0x78>)
 800b8de:	f00c f8b0 	bl	8017a42 <sys_mbox_valid>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d105      	bne.n	800b8f4 <tcpip_inpkt+0x24>
 800b8e8:	4b18      	ldr	r3, [pc, #96]	; (800b94c <tcpip_inpkt+0x7c>)
 800b8ea:	22fc      	movs	r2, #252	; 0xfc
 800b8ec:	4918      	ldr	r1, [pc, #96]	; (800b950 <tcpip_inpkt+0x80>)
 800b8ee:	4819      	ldr	r0, [pc, #100]	; (800b954 <tcpip_inpkt+0x84>)
 800b8f0:	f00c faea 	bl	8017ec8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b8f4:	2009      	movs	r0, #9
 800b8f6:	f000 fd91 	bl	800c41c <memp_malloc>
 800b8fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d102      	bne.n	800b908 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b902:	f04f 33ff 	mov.w	r3, #4294967295
 800b906:	e01a      	b.n	800b93e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2200      	movs	r2, #0
 800b90c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b920:	6979      	ldr	r1, [r7, #20]
 800b922:	4809      	ldr	r0, [pc, #36]	; (800b948 <tcpip_inpkt+0x78>)
 800b924:	f00c f842 	bl	80179ac <sys_mbox_trypost>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d006      	beq.n	800b93c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	2009      	movs	r0, #9
 800b932:	f000 fdc5 	bl	800c4c0 <memp_free>
    return ERR_MEM;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295
 800b93a:	e000      	b.n	800b93e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b93c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20004a84 	.word	0x20004a84
 800b94c:	08018e10 	.word	0x08018e10
 800b950:	08018e88 	.word	0x08018e88
 800b954:	08018e60 	.word	0x08018e60

0800b958 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b968:	f003 0318 	and.w	r3, r3, #24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d006      	beq.n	800b97e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b970:	4a08      	ldr	r2, [pc, #32]	; (800b994 <tcpip_input+0x3c>)
 800b972:	6839      	ldr	r1, [r7, #0]
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff ffab 	bl	800b8d0 <tcpip_inpkt>
 800b97a:	4603      	mov	r3, r0
 800b97c:	e005      	b.n	800b98a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b97e:	4a06      	ldr	r2, [pc, #24]	; (800b998 <tcpip_input+0x40>)
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ffa4 	bl	800b8d0 <tcpip_inpkt>
 800b988:	4603      	mov	r3, r0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	080177cd 	.word	0x080177cd
 800b998:	080166a5 	.word	0x080166a5

0800b99c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b084      	sub	sp, #16
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b9a6:	4819      	ldr	r0, [pc, #100]	; (800ba0c <tcpip_try_callback+0x70>)
 800b9a8:	f00c f84b 	bl	8017a42 <sys_mbox_valid>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <tcpip_try_callback+0x24>
 800b9b2:	4b17      	ldr	r3, [pc, #92]	; (800ba10 <tcpip_try_callback+0x74>)
 800b9b4:	f240 125d 	movw	r2, #349	; 0x15d
 800b9b8:	4916      	ldr	r1, [pc, #88]	; (800ba14 <tcpip_try_callback+0x78>)
 800b9ba:	4817      	ldr	r0, [pc, #92]	; (800ba18 <tcpip_try_callback+0x7c>)
 800b9bc:	f00c fa84 	bl	8017ec8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b9c0:	2008      	movs	r0, #8
 800b9c2:	f000 fd2b 	bl	800c41c <memp_malloc>
 800b9c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d102      	bne.n	800b9d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d2:	e017      	b.n	800ba04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	4808      	ldr	r0, [pc, #32]	; (800ba0c <tcpip_try_callback+0x70>)
 800b9ea:	f00b ffdf 	bl	80179ac <sys_mbox_trypost>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d006      	beq.n	800ba02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b9f4:	68f9      	ldr	r1, [r7, #12]
 800b9f6:	2008      	movs	r0, #8
 800b9f8:	f000 fd62 	bl	800c4c0 <memp_free>
    return ERR_MEM;
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	e000      	b.n	800ba04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20004a84 	.word	0x20004a84
 800ba10:	08018e10 	.word	0x08018e10
 800ba14:	08018e88 	.word	0x08018e88
 800ba18:	08018e60 	.word	0x08018e60

0800ba1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ba26:	f000 f871 	bl	800bb0c <lwip_init>

  tcpip_init_done = initfunc;
 800ba2a:	4a17      	ldr	r2, [pc, #92]	; (800ba88 <tcpip_init+0x6c>)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ba30:	4a16      	ldr	r2, [pc, #88]	; (800ba8c <tcpip_init+0x70>)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ba36:	2106      	movs	r1, #6
 800ba38:	4815      	ldr	r0, [pc, #84]	; (800ba90 <tcpip_init+0x74>)
 800ba3a:	f00b ff9d 	bl	8017978 <sys_mbox_new>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d006      	beq.n	800ba52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ba44:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <tcpip_init+0x78>)
 800ba46:	f240 2261 	movw	r2, #609	; 0x261
 800ba4a:	4913      	ldr	r1, [pc, #76]	; (800ba98 <tcpip_init+0x7c>)
 800ba4c:	4813      	ldr	r0, [pc, #76]	; (800ba9c <tcpip_init+0x80>)
 800ba4e:	f00c fa3b 	bl	8017ec8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ba52:	4813      	ldr	r0, [pc, #76]	; (800baa0 <tcpip_init+0x84>)
 800ba54:	f00c f812 	bl	8017a7c <sys_mutex_new>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d006      	beq.n	800ba6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ba5e:	4b0d      	ldr	r3, [pc, #52]	; (800ba94 <tcpip_init+0x78>)
 800ba60:	f240 2265 	movw	r2, #613	; 0x265
 800ba64:	490f      	ldr	r1, [pc, #60]	; (800baa4 <tcpip_init+0x88>)
 800ba66:	480d      	ldr	r0, [pc, #52]	; (800ba9c <tcpip_init+0x80>)
 800ba68:	f00c fa2e 	bl	8017ec8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ba6c:	2318      	movs	r3, #24
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba74:	2200      	movs	r2, #0
 800ba76:	490c      	ldr	r1, [pc, #48]	; (800baa8 <tcpip_init+0x8c>)
 800ba78:	480c      	ldr	r0, [pc, #48]	; (800baac <tcpip_init+0x90>)
 800ba7a:	f00c f831 	bl	8017ae0 <sys_thread_new>
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20004a7c 	.word	0x20004a7c
 800ba8c:	20004a80 	.word	0x20004a80
 800ba90:	20004a84 	.word	0x20004a84
 800ba94:	08018e10 	.word	0x08018e10
 800ba98:	08018e98 	.word	0x08018e98
 800ba9c:	08018e60 	.word	0x08018e60
 800baa0:	200096cc 	.word	0x200096cc
 800baa4:	08018ebc 	.word	0x08018ebc
 800baa8:	0800b7d9 	.word	0x0800b7d9
 800baac:	08018ee0 	.word	0x08018ee0

0800bab0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800baba:	88fb      	ldrh	r3, [r7, #6]
 800babc:	021b      	lsls	r3, r3, #8
 800babe:	b21a      	sxth	r2, r3
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	0a1b      	lsrs	r3, r3, #8
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	b21b      	sxth	r3, r3
 800bac8:	4313      	orrs	r3, r2
 800baca:	b21b      	sxth	r3, r3
 800bacc:	b29b      	uxth	r3, r3
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	061a      	lsls	r2, r3, #24
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	021b      	lsls	r3, r3, #8
 800baea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800baee:	431a      	orrs	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	0a1b      	lsrs	r3, r3, #8
 800baf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800baf8:	431a      	orrs	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	0e1b      	lsrs	r3, r3, #24
 800bafe:	4313      	orrs	r3, r2
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bb16:	f00b ffa5 	bl	8017a64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bb1a:	f000 f8d5 	bl	800bcc8 <mem_init>
  memp_init();
 800bb1e:	f000 fc31 	bl	800c384 <memp_init>
  pbuf_init();
  netif_init();
 800bb22:	f000 fcf7 	bl	800c514 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bb26:	f007 f8f7 	bl	8012d18 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bb2a:	f001 fe23 	bl	800d774 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bb2e:	f007 f839 	bl	8012ba4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb46:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <ptr_to_mem+0x20>)
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	88fb      	ldrh	r3, [r7, #6]
 800bb4c:	4413      	add	r3, r2
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	20004a88 	.word	0x20004a88

0800bb60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <mem_to_ptr+0x20>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	b29b      	uxth	r3, r3
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	370c      	adds	r7, #12
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20004a88 	.word	0x20004a88

0800bb84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bb84:	b590      	push	{r4, r7, lr}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bb8c:	4b45      	ldr	r3, [pc, #276]	; (800bca4 <plug_holes+0x120>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d206      	bcs.n	800bba4 <plug_holes+0x20>
 800bb96:	4b44      	ldr	r3, [pc, #272]	; (800bca8 <plug_holes+0x124>)
 800bb98:	f240 12df 	movw	r2, #479	; 0x1df
 800bb9c:	4943      	ldr	r1, [pc, #268]	; (800bcac <plug_holes+0x128>)
 800bb9e:	4844      	ldr	r0, [pc, #272]	; (800bcb0 <plug_holes+0x12c>)
 800bba0:	f00c f992 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bba4:	4b43      	ldr	r3, [pc, #268]	; (800bcb4 <plug_holes+0x130>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d306      	bcc.n	800bbbc <plug_holes+0x38>
 800bbae:	4b3e      	ldr	r3, [pc, #248]	; (800bca8 <plug_holes+0x124>)
 800bbb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bbb4:	4940      	ldr	r1, [pc, #256]	; (800bcb8 <plug_holes+0x134>)
 800bbb6:	483e      	ldr	r0, [pc, #248]	; (800bcb0 <plug_holes+0x12c>)
 800bbb8:	f00c f986 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	791b      	ldrb	r3, [r3, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d006      	beq.n	800bbd2 <plug_holes+0x4e>
 800bbc4:	4b38      	ldr	r3, [pc, #224]	; (800bca8 <plug_holes+0x124>)
 800bbc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bbca:	493c      	ldr	r1, [pc, #240]	; (800bcbc <plug_holes+0x138>)
 800bbcc:	4838      	ldr	r0, [pc, #224]	; (800bcb0 <plug_holes+0x12c>)
 800bbce:	f00c f97b 	bl	8017ec8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbda:	d906      	bls.n	800bbea <plug_holes+0x66>
 800bbdc:	4b32      	ldr	r3, [pc, #200]	; (800bca8 <plug_holes+0x124>)
 800bbde:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bbe2:	4937      	ldr	r1, [pc, #220]	; (800bcc0 <plug_holes+0x13c>)
 800bbe4:	4832      	ldr	r0, [pc, #200]	; (800bcb0 <plug_holes+0x12c>)
 800bbe6:	f00c f96f 	bl	8017ec8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff ffa4 	bl	800bb3c <ptr_to_mem>
 800bbf4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d024      	beq.n	800bc48 <plug_holes+0xc4>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	791b      	ldrb	r3, [r3, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d120      	bne.n	800bc48 <plug_holes+0xc4>
 800bc06:	4b2b      	ldr	r3, [pc, #172]	; (800bcb4 <plug_holes+0x130>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d01b      	beq.n	800bc48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bc10:	4b2c      	ldr	r3, [pc, #176]	; (800bcc4 <plug_holes+0x140>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d102      	bne.n	800bc20 <plug_holes+0x9c>
      lfree = mem;
 800bc1a:	4a2a      	ldr	r2, [pc, #168]	; (800bcc4 <plug_holes+0x140>)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	881a      	ldrh	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc30:	d00a      	beq.n	800bc48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7ff ff80 	bl	800bb3c <ptr_to_mem>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f7ff ff8e 	bl	800bb60 <mem_to_ptr>
 800bc44:	4603      	mov	r3, r0
 800bc46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	885b      	ldrh	r3, [r3, #2]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7ff ff75 	bl	800bb3c <ptr_to_mem>
 800bc52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d01f      	beq.n	800bc9c <plug_holes+0x118>
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	791b      	ldrb	r3, [r3, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d11b      	bne.n	800bc9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bc64:	4b17      	ldr	r3, [pc, #92]	; (800bcc4 <plug_holes+0x140>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d102      	bne.n	800bc74 <plug_holes+0xf0>
      lfree = pmem;
 800bc6e:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <plug_holes+0x140>)
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	881a      	ldrh	r2, [r3, #0]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	881b      	ldrh	r3, [r3, #0]
 800bc80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc84:	d00a      	beq.n	800bc9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7ff ff56 	bl	800bb3c <ptr_to_mem>
 800bc90:	4604      	mov	r4, r0
 800bc92:	68b8      	ldr	r0, [r7, #8]
 800bc94:	f7ff ff64 	bl	800bb60 <mem_to_ptr>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc9c:	bf00      	nop
 800bc9e:	3714      	adds	r7, #20
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd90      	pop	{r4, r7, pc}
 800bca4:	20004a88 	.word	0x20004a88
 800bca8:	08018ef0 	.word	0x08018ef0
 800bcac:	08018f20 	.word	0x08018f20
 800bcb0:	08018f38 	.word	0x08018f38
 800bcb4:	20004a8c 	.word	0x20004a8c
 800bcb8:	08018f60 	.word	0x08018f60
 800bcbc:	08018f7c 	.word	0x08018f7c
 800bcc0:	08018f98 	.word	0x08018f98
 800bcc4:	20004a94 	.word	0x20004a94

0800bcc8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bcce:	4b1f      	ldr	r3, [pc, #124]	; (800bd4c <mem_init+0x84>)
 800bcd0:	3303      	adds	r3, #3
 800bcd2:	f023 0303 	bic.w	r3, r3, #3
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	4b1d      	ldr	r3, [pc, #116]	; (800bd50 <mem_init+0x88>)
 800bcda:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bcdc:	4b1c      	ldr	r3, [pc, #112]	; (800bd50 <mem_init+0x88>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bce8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bcf6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bcfa:	f7ff ff1f 	bl	800bb3c <ptr_to_mem>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	4a14      	ldr	r2, [pc, #80]	; (800bd54 <mem_init+0x8c>)
 800bd02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bd04:	4b13      	ldr	r3, [pc, #76]	; (800bd54 <mem_init+0x8c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bd0c:	4b11      	ldr	r3, [pc, #68]	; (800bd54 <mem_init+0x8c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bd14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bd16:	4b0f      	ldr	r3, [pc, #60]	; (800bd54 <mem_init+0x8c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bd1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bd20:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <mem_init+0x88>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a0c      	ldr	r2, [pc, #48]	; (800bd58 <mem_init+0x90>)
 800bd26:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd28:	480c      	ldr	r0, [pc, #48]	; (800bd5c <mem_init+0x94>)
 800bd2a:	f00b fea7 	bl	8017a7c <sys_mutex_new>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d006      	beq.n	800bd42 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <mem_init+0x98>)
 800bd36:	f240 221f 	movw	r2, #543	; 0x21f
 800bd3a:	490a      	ldr	r1, [pc, #40]	; (800bd64 <mem_init+0x9c>)
 800bd3c:	480a      	ldr	r0, [pc, #40]	; (800bd68 <mem_init+0xa0>)
 800bd3e:	f00c f8c3 	bl	8017ec8 <iprintf>
  }
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	200096e8 	.word	0x200096e8
 800bd50:	20004a88 	.word	0x20004a88
 800bd54:	20004a8c 	.word	0x20004a8c
 800bd58:	20004a94 	.word	0x20004a94
 800bd5c:	20004a90 	.word	0x20004a90
 800bd60:	08018ef0 	.word	0x08018ef0
 800bd64:	08018fc4 	.word	0x08018fc4
 800bd68:	08018f38 	.word	0x08018f38

0800bd6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7ff fef3 	bl	800bb60 <mem_to_ptr>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff feda 	bl	800bb3c <ptr_to_mem>
 800bd88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	885b      	ldrh	r3, [r3, #2]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7ff fed4 	bl	800bb3c <ptr_to_mem>
 800bd94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd9e:	d818      	bhi.n	800bdd2 <mem_link_valid+0x66>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bda8:	d813      	bhi.n	800bdd2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bdae:	8afa      	ldrh	r2, [r7, #22]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d004      	beq.n	800bdbe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	8afa      	ldrh	r2, [r7, #22]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d109      	bne.n	800bdd2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bdbe:	4b08      	ldr	r3, [pc, #32]	; (800bde0 <mem_link_valid+0x74>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d006      	beq.n	800bdd6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	885b      	ldrh	r3, [r3, #2]
 800bdcc:	8afa      	ldrh	r2, [r7, #22]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d001      	beq.n	800bdd6 <mem_link_valid+0x6a>
    return 0;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e000      	b.n	800bdd8 <mem_link_valid+0x6c>
  }
  return 1;
 800bdd6:	2301      	movs	r3, #1
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20004a8c 	.word	0x20004a8c

0800bde4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d070      	beq.n	800bed4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f003 0303 	and.w	r3, r3, #3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00d      	beq.n	800be18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bdfc:	4b37      	ldr	r3, [pc, #220]	; (800bedc <mem_free+0xf8>)
 800bdfe:	f240 2273 	movw	r2, #627	; 0x273
 800be02:	4937      	ldr	r1, [pc, #220]	; (800bee0 <mem_free+0xfc>)
 800be04:	4837      	ldr	r0, [pc, #220]	; (800bee4 <mem_free+0x100>)
 800be06:	f00c f85f 	bl	8017ec8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be0a:	f00b fe89 	bl	8017b20 <sys_arch_protect>
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f00b fe93 	bl	8017b3c <sys_arch_unprotect>
    return;
 800be16:	e05e      	b.n	800bed6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	3b08      	subs	r3, #8
 800be1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800be1e:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <mem_free+0x104>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	69fa      	ldr	r2, [r7, #28]
 800be24:	429a      	cmp	r2, r3
 800be26:	d306      	bcc.n	800be36 <mem_free+0x52>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f103 020c 	add.w	r2, r3, #12
 800be2e:	4b2f      	ldr	r3, [pc, #188]	; (800beec <mem_free+0x108>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	429a      	cmp	r2, r3
 800be34:	d90d      	bls.n	800be52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be36:	4b29      	ldr	r3, [pc, #164]	; (800bedc <mem_free+0xf8>)
 800be38:	f240 227f 	movw	r2, #639	; 0x27f
 800be3c:	492c      	ldr	r1, [pc, #176]	; (800bef0 <mem_free+0x10c>)
 800be3e:	4829      	ldr	r0, [pc, #164]	; (800bee4 <mem_free+0x100>)
 800be40:	f00c f842 	bl	8017ec8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be44:	f00b fe6c 	bl	8017b20 <sys_arch_protect>
 800be48:	6138      	str	r0, [r7, #16]
 800be4a:	6938      	ldr	r0, [r7, #16]
 800be4c:	f00b fe76 	bl	8017b3c <sys_arch_unprotect>
    return;
 800be50:	e041      	b.n	800bed6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be52:	4828      	ldr	r0, [pc, #160]	; (800bef4 <mem_free+0x110>)
 800be54:	f00b fe28 	bl	8017aa8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d110      	bne.n	800be82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800be60:	4b1e      	ldr	r3, [pc, #120]	; (800bedc <mem_free+0xf8>)
 800be62:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800be66:	4924      	ldr	r1, [pc, #144]	; (800bef8 <mem_free+0x114>)
 800be68:	481e      	ldr	r0, [pc, #120]	; (800bee4 <mem_free+0x100>)
 800be6a:	f00c f82d 	bl	8017ec8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be6e:	4821      	ldr	r0, [pc, #132]	; (800bef4 <mem_free+0x110>)
 800be70:	f00b fe29 	bl	8017ac6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be74:	f00b fe54 	bl	8017b20 <sys_arch_protect>
 800be78:	6178      	str	r0, [r7, #20]
 800be7a:	6978      	ldr	r0, [r7, #20]
 800be7c:	f00b fe5e 	bl	8017b3c <sys_arch_unprotect>
    return;
 800be80:	e029      	b.n	800bed6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800be82:	69f8      	ldr	r0, [r7, #28]
 800be84:	f7ff ff72 	bl	800bd6c <mem_link_valid>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d110      	bne.n	800beb0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be8e:	4b13      	ldr	r3, [pc, #76]	; (800bedc <mem_free+0xf8>)
 800be90:	f240 2295 	movw	r2, #661	; 0x295
 800be94:	4919      	ldr	r1, [pc, #100]	; (800befc <mem_free+0x118>)
 800be96:	4813      	ldr	r0, [pc, #76]	; (800bee4 <mem_free+0x100>)
 800be98:	f00c f816 	bl	8017ec8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be9c:	4815      	ldr	r0, [pc, #84]	; (800bef4 <mem_free+0x110>)
 800be9e:	f00b fe12 	bl	8017ac6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bea2:	f00b fe3d 	bl	8017b20 <sys_arch_protect>
 800bea6:	61b8      	str	r0, [r7, #24]
 800bea8:	69b8      	ldr	r0, [r7, #24]
 800beaa:	f00b fe47 	bl	8017b3c <sys_arch_unprotect>
    return;
 800beae:	e012      	b.n	800bed6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2200      	movs	r2, #0
 800beb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800beb6:	4b12      	ldr	r3, [pc, #72]	; (800bf00 <mem_free+0x11c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69fa      	ldr	r2, [r7, #28]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d202      	bcs.n	800bec6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bec0:	4a0f      	ldr	r2, [pc, #60]	; (800bf00 <mem_free+0x11c>)
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bec6:	69f8      	ldr	r0, [r7, #28]
 800bec8:	f7ff fe5c 	bl	800bb84 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800becc:	4809      	ldr	r0, [pc, #36]	; (800bef4 <mem_free+0x110>)
 800bece:	f00b fdfa 	bl	8017ac6 <sys_mutex_unlock>
 800bed2:	e000      	b.n	800bed6 <mem_free+0xf2>
    return;
 800bed4:	bf00      	nop
}
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	08018ef0 	.word	0x08018ef0
 800bee0:	08018fe0 	.word	0x08018fe0
 800bee4:	08018f38 	.word	0x08018f38
 800bee8:	20004a88 	.word	0x20004a88
 800beec:	20004a8c 	.word	0x20004a8c
 800bef0:	08019004 	.word	0x08019004
 800bef4:	20004a90 	.word	0x20004a90
 800bef8:	08019020 	.word	0x08019020
 800befc:	08019048 	.word	0x08019048
 800bf00:	20004a94 	.word	0x20004a94

0800bf04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bf10:	887b      	ldrh	r3, [r7, #2]
 800bf12:	3303      	adds	r3, #3
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f023 0303 	bic.w	r3, r3, #3
 800bf1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bf1c:	8bfb      	ldrh	r3, [r7, #30]
 800bf1e:	2b0b      	cmp	r3, #11
 800bf20:	d801      	bhi.n	800bf26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bf22:	230c      	movs	r3, #12
 800bf24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf26:	8bfb      	ldrh	r3, [r7, #30]
 800bf28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf2c:	d803      	bhi.n	800bf36 <mem_trim+0x32>
 800bf2e:	8bfa      	ldrh	r2, [r7, #30]
 800bf30:	887b      	ldrh	r3, [r7, #2]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d201      	bcs.n	800bf3a <mem_trim+0x36>
    return NULL;
 800bf36:	2300      	movs	r3, #0
 800bf38:	e0d8      	b.n	800c0ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf3a:	4b6e      	ldr	r3, [pc, #440]	; (800c0f4 <mem_trim+0x1f0>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d304      	bcc.n	800bf4e <mem_trim+0x4a>
 800bf44:	4b6c      	ldr	r3, [pc, #432]	; (800c0f8 <mem_trim+0x1f4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d306      	bcc.n	800bf5c <mem_trim+0x58>
 800bf4e:	4b6b      	ldr	r3, [pc, #428]	; (800c0fc <mem_trim+0x1f8>)
 800bf50:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf54:	496a      	ldr	r1, [pc, #424]	; (800c100 <mem_trim+0x1fc>)
 800bf56:	486b      	ldr	r0, [pc, #428]	; (800c104 <mem_trim+0x200>)
 800bf58:	f00b ffb6 	bl	8017ec8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf5c:	4b65      	ldr	r3, [pc, #404]	; (800c0f4 <mem_trim+0x1f0>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d304      	bcc.n	800bf70 <mem_trim+0x6c>
 800bf66:	4b64      	ldr	r3, [pc, #400]	; (800c0f8 <mem_trim+0x1f4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d307      	bcc.n	800bf80 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf70:	f00b fdd6 	bl	8017b20 <sys_arch_protect>
 800bf74:	60b8      	str	r0, [r7, #8]
 800bf76:	68b8      	ldr	r0, [r7, #8]
 800bf78:	f00b fde0 	bl	8017b3c <sys_arch_unprotect>
    return rmem;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	e0b5      	b.n	800c0ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3b08      	subs	r3, #8
 800bf84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bf86:	69b8      	ldr	r0, [r7, #24]
 800bf88:	f7ff fdea 	bl	800bb60 <mem_to_ptr>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	881a      	ldrh	r2, [r3, #0]
 800bf94:	8afb      	ldrh	r3, [r7, #22]
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	3b08      	subs	r3, #8
 800bf9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf9e:	8bfa      	ldrh	r2, [r7, #30]
 800bfa0:	8abb      	ldrh	r3, [r7, #20]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d906      	bls.n	800bfb4 <mem_trim+0xb0>
 800bfa6:	4b55      	ldr	r3, [pc, #340]	; (800c0fc <mem_trim+0x1f8>)
 800bfa8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bfac:	4956      	ldr	r1, [pc, #344]	; (800c108 <mem_trim+0x204>)
 800bfae:	4855      	ldr	r0, [pc, #340]	; (800c104 <mem_trim+0x200>)
 800bfb0:	f00b ff8a 	bl	8017ec8 <iprintf>
  if (newsize > size) {
 800bfb4:	8bfa      	ldrh	r2, [r7, #30]
 800bfb6:	8abb      	ldrh	r3, [r7, #20]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d901      	bls.n	800bfc0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e095      	b.n	800c0ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bfc0:	8bfa      	ldrh	r2, [r7, #30]
 800bfc2:	8abb      	ldrh	r3, [r7, #20]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d101      	bne.n	800bfcc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	e08f      	b.n	800c0ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfcc:	484f      	ldr	r0, [pc, #316]	; (800c10c <mem_trim+0x208>)
 800bfce:	f00b fd6b 	bl	8017aa8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7ff fdb0 	bl	800bb3c <ptr_to_mem>
 800bfdc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	791b      	ldrb	r3, [r3, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d13f      	bne.n	800c066 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfee:	d106      	bne.n	800bffe <mem_trim+0xfa>
 800bff0:	4b42      	ldr	r3, [pc, #264]	; (800c0fc <mem_trim+0x1f8>)
 800bff2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bff6:	4946      	ldr	r1, [pc, #280]	; (800c110 <mem_trim+0x20c>)
 800bff8:	4842      	ldr	r0, [pc, #264]	; (800c104 <mem_trim+0x200>)
 800bffa:	f00b ff65 	bl	8017ec8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	881b      	ldrh	r3, [r3, #0]
 800c002:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c004:	8afa      	ldrh	r2, [r7, #22]
 800c006:	8bfb      	ldrh	r3, [r7, #30]
 800c008:	4413      	add	r3, r2
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3308      	adds	r3, #8
 800c00e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c010:	4b40      	ldr	r3, [pc, #256]	; (800c114 <mem_trim+0x210>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	429a      	cmp	r2, r3
 800c018:	d106      	bne.n	800c028 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c01a:	89fb      	ldrh	r3, [r7, #14]
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fd8d 	bl	800bb3c <ptr_to_mem>
 800c022:	4603      	mov	r3, r0
 800c024:	4a3b      	ldr	r2, [pc, #236]	; (800c114 <mem_trim+0x210>)
 800c026:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c028:	89fb      	ldrh	r3, [r7, #14]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff fd86 	bl	800bb3c <ptr_to_mem>
 800c030:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2200      	movs	r2, #0
 800c036:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	89ba      	ldrh	r2, [r7, #12]
 800c03c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	8afa      	ldrh	r2, [r7, #22]
 800c042:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	89fa      	ldrh	r2, [r7, #14]
 800c048:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c052:	d047      	beq.n	800c0e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fd6f 	bl	800bb3c <ptr_to_mem>
 800c05e:	4602      	mov	r2, r0
 800c060:	89fb      	ldrh	r3, [r7, #14]
 800c062:	8053      	strh	r3, [r2, #2]
 800c064:	e03e      	b.n	800c0e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c066:	8bfb      	ldrh	r3, [r7, #30]
 800c068:	f103 0214 	add.w	r2, r3, #20
 800c06c:	8abb      	ldrh	r3, [r7, #20]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d838      	bhi.n	800c0e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c072:	8afa      	ldrh	r2, [r7, #22]
 800c074:	8bfb      	ldrh	r3, [r7, #30]
 800c076:	4413      	add	r3, r2
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3308      	adds	r3, #8
 800c07c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	881b      	ldrh	r3, [r3, #0]
 800c082:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c086:	d106      	bne.n	800c096 <mem_trim+0x192>
 800c088:	4b1c      	ldr	r3, [pc, #112]	; (800c0fc <mem_trim+0x1f8>)
 800c08a:	f240 3216 	movw	r2, #790	; 0x316
 800c08e:	4920      	ldr	r1, [pc, #128]	; (800c110 <mem_trim+0x20c>)
 800c090:	481c      	ldr	r0, [pc, #112]	; (800c104 <mem_trim+0x200>)
 800c092:	f00b ff19 	bl	8017ec8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c096:	89fb      	ldrh	r3, [r7, #14]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7ff fd4f 	bl	800bb3c <ptr_to_mem>
 800c09e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c0a0:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <mem_trim+0x210>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d202      	bcs.n	800c0b0 <mem_trim+0x1ac>
      lfree = mem2;
 800c0aa:	4a1a      	ldr	r2, [pc, #104]	; (800c114 <mem_trim+0x210>)
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	881a      	ldrh	r2, [r3, #0]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	8afa      	ldrh	r2, [r7, #22]
 800c0c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	89fa      	ldrh	r2, [r7, #14]
 800c0c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0d2:	d007      	beq.n	800c0e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff fd2f 	bl	800bb3c <ptr_to_mem>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	89fb      	ldrh	r3, [r7, #14]
 800c0e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0e4:	4809      	ldr	r0, [pc, #36]	; (800c10c <mem_trim+0x208>)
 800c0e6:	f00b fcee 	bl	8017ac6 <sys_mutex_unlock>
  return rmem;
 800c0ea:	687b      	ldr	r3, [r7, #4]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3720      	adds	r7, #32
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	20004a88 	.word	0x20004a88
 800c0f8:	20004a8c 	.word	0x20004a8c
 800c0fc:	08018ef0 	.word	0x08018ef0
 800c100:	0801907c 	.word	0x0801907c
 800c104:	08018f38 	.word	0x08018f38
 800c108:	08019094 	.word	0x08019094
 800c10c:	20004a90 	.word	0x20004a90
 800c110:	080190b4 	.word	0x080190b4
 800c114:	20004a94 	.word	0x20004a94

0800c118 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b088      	sub	sp, #32
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <mem_malloc+0x14>
    return NULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	e0e2      	b.n	800c2f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	3303      	adds	r3, #3
 800c130:	b29b      	uxth	r3, r3
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c138:	8bbb      	ldrh	r3, [r7, #28]
 800c13a:	2b0b      	cmp	r3, #11
 800c13c:	d801      	bhi.n	800c142 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c13e:	230c      	movs	r3, #12
 800c140:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c142:	8bbb      	ldrh	r3, [r7, #28]
 800c144:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c148:	d803      	bhi.n	800c152 <mem_malloc+0x3a>
 800c14a:	8bba      	ldrh	r2, [r7, #28]
 800c14c:	88fb      	ldrh	r3, [r7, #6]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d201      	bcs.n	800c156 <mem_malloc+0x3e>
    return NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	e0cd      	b.n	800c2f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c156:	4869      	ldr	r0, [pc, #420]	; (800c2fc <mem_malloc+0x1e4>)
 800c158:	f00b fca6 	bl	8017aa8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c15c:	4b68      	ldr	r3, [pc, #416]	; (800c300 <mem_malloc+0x1e8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff fcfd 	bl	800bb60 <mem_to_ptr>
 800c166:	4603      	mov	r3, r0
 800c168:	83fb      	strh	r3, [r7, #30]
 800c16a:	e0b7      	b.n	800c2dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c16c:	8bfb      	ldrh	r3, [r7, #30]
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff fce4 	bl	800bb3c <ptr_to_mem>
 800c174:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	791b      	ldrb	r3, [r3, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f040 80a7 	bne.w	800c2ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	881b      	ldrh	r3, [r3, #0]
 800c184:	461a      	mov	r2, r3
 800c186:	8bfb      	ldrh	r3, [r7, #30]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	f1a3 0208 	sub.w	r2, r3, #8
 800c18e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c190:	429a      	cmp	r2, r3
 800c192:	f0c0 809c 	bcc.w	800c2ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	461a      	mov	r2, r3
 800c19c:	8bfb      	ldrh	r3, [r7, #30]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	f1a3 0208 	sub.w	r2, r3, #8
 800c1a4:	8bbb      	ldrh	r3, [r7, #28]
 800c1a6:	3314      	adds	r3, #20
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d333      	bcc.n	800c214 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c1ac:	8bfa      	ldrh	r2, [r7, #30]
 800c1ae:	8bbb      	ldrh	r3, [r7, #28]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c1b8:	8a7b      	ldrh	r3, [r7, #18]
 800c1ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1be:	d106      	bne.n	800c1ce <mem_malloc+0xb6>
 800c1c0:	4b50      	ldr	r3, [pc, #320]	; (800c304 <mem_malloc+0x1ec>)
 800c1c2:	f240 3287 	movw	r2, #903	; 0x387
 800c1c6:	4950      	ldr	r1, [pc, #320]	; (800c308 <mem_malloc+0x1f0>)
 800c1c8:	4850      	ldr	r0, [pc, #320]	; (800c30c <mem_malloc+0x1f4>)
 800c1ca:	f00b fe7d 	bl	8017ec8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c1ce:	8a7b      	ldrh	r3, [r7, #18]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff fcb3 	bl	800bb3c <ptr_to_mem>
 800c1d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	881a      	ldrh	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	8bfa      	ldrh	r2, [r7, #30]
 800c1ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	8a7a      	ldrh	r2, [r7, #18]
 800c1f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c200:	d00b      	beq.n	800c21a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fc98 	bl	800bb3c <ptr_to_mem>
 800c20c:	4602      	mov	r2, r0
 800c20e:	8a7b      	ldrh	r3, [r7, #18]
 800c210:	8053      	strh	r3, [r2, #2]
 800c212:	e002      	b.n	800c21a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2201      	movs	r2, #1
 800c218:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c21a:	4b39      	ldr	r3, [pc, #228]	; (800c300 <mem_malloc+0x1e8>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	429a      	cmp	r2, r3
 800c222:	d127      	bne.n	800c274 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <mem_malloc+0x1e8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c22a:	e005      	b.n	800c238 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	881b      	ldrh	r3, [r3, #0]
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff fc83 	bl	800bb3c <ptr_to_mem>
 800c236:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	791b      	ldrb	r3, [r3, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d004      	beq.n	800c24a <mem_malloc+0x132>
 800c240:	4b33      	ldr	r3, [pc, #204]	; (800c310 <mem_malloc+0x1f8>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	69ba      	ldr	r2, [r7, #24]
 800c246:	429a      	cmp	r2, r3
 800c248:	d1f0      	bne.n	800c22c <mem_malloc+0x114>
          }
          lfree = cur;
 800c24a:	4a2d      	ldr	r2, [pc, #180]	; (800c300 <mem_malloc+0x1e8>)
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c250:	4b2b      	ldr	r3, [pc, #172]	; (800c300 <mem_malloc+0x1e8>)
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	4b2e      	ldr	r3, [pc, #184]	; (800c310 <mem_malloc+0x1f8>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d00b      	beq.n	800c274 <mem_malloc+0x15c>
 800c25c:	4b28      	ldr	r3, [pc, #160]	; (800c300 <mem_malloc+0x1e8>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	791b      	ldrb	r3, [r3, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d006      	beq.n	800c274 <mem_malloc+0x15c>
 800c266:	4b27      	ldr	r3, [pc, #156]	; (800c304 <mem_malloc+0x1ec>)
 800c268:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c26c:	4929      	ldr	r1, [pc, #164]	; (800c314 <mem_malloc+0x1fc>)
 800c26e:	4827      	ldr	r0, [pc, #156]	; (800c30c <mem_malloc+0x1f4>)
 800c270:	f00b fe2a 	bl	8017ec8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c274:	4821      	ldr	r0, [pc, #132]	; (800c2fc <mem_malloc+0x1e4>)
 800c276:	f00b fc26 	bl	8017ac6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c27a:	8bba      	ldrh	r2, [r7, #28]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	4413      	add	r3, r2
 800c280:	3308      	adds	r3, #8
 800c282:	4a23      	ldr	r2, [pc, #140]	; (800c310 <mem_malloc+0x1f8>)
 800c284:	6812      	ldr	r2, [r2, #0]
 800c286:	4293      	cmp	r3, r2
 800c288:	d906      	bls.n	800c298 <mem_malloc+0x180>
 800c28a:	4b1e      	ldr	r3, [pc, #120]	; (800c304 <mem_malloc+0x1ec>)
 800c28c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c290:	4921      	ldr	r1, [pc, #132]	; (800c318 <mem_malloc+0x200>)
 800c292:	481e      	ldr	r0, [pc, #120]	; (800c30c <mem_malloc+0x1f4>)
 800c294:	f00b fe18 	bl	8017ec8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d006      	beq.n	800c2b0 <mem_malloc+0x198>
 800c2a2:	4b18      	ldr	r3, [pc, #96]	; (800c304 <mem_malloc+0x1ec>)
 800c2a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c2a8:	491c      	ldr	r1, [pc, #112]	; (800c31c <mem_malloc+0x204>)
 800c2aa:	4818      	ldr	r0, [pc, #96]	; (800c30c <mem_malloc+0x1f4>)
 800c2ac:	f00b fe0c 	bl	8017ec8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d006      	beq.n	800c2c8 <mem_malloc+0x1b0>
 800c2ba:	4b12      	ldr	r3, [pc, #72]	; (800c304 <mem_malloc+0x1ec>)
 800c2bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c2c0:	4917      	ldr	r1, [pc, #92]	; (800c320 <mem_malloc+0x208>)
 800c2c2:	4812      	ldr	r0, [pc, #72]	; (800c30c <mem_malloc+0x1f4>)
 800c2c4:	f00b fe00 	bl	8017ec8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	e011      	b.n	800c2f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c2ce:	8bfb      	ldrh	r3, [r7, #30]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fc33 	bl	800bb3c <ptr_to_mem>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2dc:	8bfa      	ldrh	r2, [r7, #30]
 800c2de:	8bbb      	ldrh	r3, [r7, #28]
 800c2e0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	f4ff af41 	bcc.w	800c16c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c2ea:	4804      	ldr	r0, [pc, #16]	; (800c2fc <mem_malloc+0x1e4>)
 800c2ec:	f00b fbeb 	bl	8017ac6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3720      	adds	r7, #32
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20004a90 	.word	0x20004a90
 800c300:	20004a94 	.word	0x20004a94
 800c304:	08018ef0 	.word	0x08018ef0
 800c308:	080190b4 	.word	0x080190b4
 800c30c:	08018f38 	.word	0x08018f38
 800c310:	20004a8c 	.word	0x20004a8c
 800c314:	080190c8 	.word	0x080190c8
 800c318:	080190e4 	.word	0x080190e4
 800c31c:	08019114 	.word	0x08019114
 800c320:	08019144 	.word	0x08019144

0800c324 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	2200      	movs	r2, #0
 800c332:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	3303      	adds	r3, #3
 800c33a:	f023 0303 	bic.w	r3, r3, #3
 800c33e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	e011      	b.n	800c36a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	881b      	ldrh	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	3301      	adds	r3, #1
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	461a      	mov	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4293      	cmp	r3, r2
 800c374:	dbe7      	blt.n	800c346 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c376:	bf00      	nop
 800c378:	bf00      	nop
 800c37a:	3714      	adds	r7, #20
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c38a:	2300      	movs	r3, #0
 800c38c:	80fb      	strh	r3, [r7, #6]
 800c38e:	e009      	b.n	800c3a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c390:	88fb      	ldrh	r3, [r7, #6]
 800c392:	4a08      	ldr	r2, [pc, #32]	; (800c3b4 <memp_init+0x30>)
 800c394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff ffc3 	bl	800c324 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c39e:	88fb      	ldrh	r3, [r7, #6]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	80fb      	strh	r3, [r7, #6]
 800c3a4:	88fb      	ldrh	r3, [r7, #6]
 800c3a6:	2b0c      	cmp	r3, #12
 800c3a8:	d9f2      	bls.n	800c390 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	0801be44 	.word	0x0801be44

0800c3b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c3c0:	f00b fbae 	bl	8017b20 <sys_arch_protect>
 800c3c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d015      	beq.n	800c400 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	6812      	ldr	r2, [r2, #0]
 800c3dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f003 0303 	and.w	r3, r3, #3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d006      	beq.n	800c3f6 <do_memp_malloc_pool+0x3e>
 800c3e8:	4b09      	ldr	r3, [pc, #36]	; (800c410 <do_memp_malloc_pool+0x58>)
 800c3ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c3ee:	4909      	ldr	r1, [pc, #36]	; (800c414 <do_memp_malloc_pool+0x5c>)
 800c3f0:	4809      	ldr	r0, [pc, #36]	; (800c418 <do_memp_malloc_pool+0x60>)
 800c3f2:	f00b fd69 	bl	8017ec8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f00b fba0 	bl	8017b3c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	e003      	b.n	800c408 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f00b fb9b 	bl	8017b3c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	08019168 	.word	0x08019168
 800c414:	08019198 	.word	0x08019198
 800c418:	080191bc 	.word	0x080191bc

0800c41c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	2b0c      	cmp	r3, #12
 800c42a:	d908      	bls.n	800c43e <memp_malloc+0x22>
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <memp_malloc+0x3c>)
 800c42e:	f240 1257 	movw	r2, #343	; 0x157
 800c432:	490a      	ldr	r1, [pc, #40]	; (800c45c <memp_malloc+0x40>)
 800c434:	480a      	ldr	r0, [pc, #40]	; (800c460 <memp_malloc+0x44>)
 800c436:	f00b fd47 	bl	8017ec8 <iprintf>
 800c43a:	2300      	movs	r3, #0
 800c43c:	e008      	b.n	800c450 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	4a08      	ldr	r2, [pc, #32]	; (800c464 <memp_malloc+0x48>)
 800c442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff ffb6 	bl	800c3b8 <do_memp_malloc_pool>
 800c44c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c44e:	68fb      	ldr	r3, [r7, #12]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	08019168 	.word	0x08019168
 800c45c:	080191f8 	.word	0x080191f8
 800c460:	080191bc 	.word	0x080191bc
 800c464:	0801be44 	.word	0x0801be44

0800c468 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d006      	beq.n	800c48a <do_memp_free_pool+0x22>
 800c47c:	4b0d      	ldr	r3, [pc, #52]	; (800c4b4 <do_memp_free_pool+0x4c>)
 800c47e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c482:	490d      	ldr	r1, [pc, #52]	; (800c4b8 <do_memp_free_pool+0x50>)
 800c484:	480d      	ldr	r0, [pc, #52]	; (800c4bc <do_memp_free_pool+0x54>)
 800c486:	f00b fd1f 	bl	8017ec8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c48e:	f00b fb47 	bl	8017b20 <sys_arch_protect>
 800c492:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c4a6:	68b8      	ldr	r0, [r7, #8]
 800c4a8:	f00b fb48 	bl	8017b3c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c4ac:	bf00      	nop
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08019168 	.word	0x08019168
 800c4b8:	08019218 	.word	0x08019218
 800c4bc:	080191bc 	.word	0x080191bc

0800c4c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	6039      	str	r1, [r7, #0]
 800c4ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c4cc:	79fb      	ldrb	r3, [r7, #7]
 800c4ce:	2b0c      	cmp	r3, #12
 800c4d0:	d907      	bls.n	800c4e2 <memp_free+0x22>
 800c4d2:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <memp_free+0x44>)
 800c4d4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c4d8:	490b      	ldr	r1, [pc, #44]	; (800c508 <memp_free+0x48>)
 800c4da:	480c      	ldr	r0, [pc, #48]	; (800c50c <memp_free+0x4c>)
 800c4dc:	f00b fcf4 	bl	8017ec8 <iprintf>
 800c4e0:	e00c      	b.n	800c4fc <memp_free+0x3c>

  if (mem == NULL) {
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d008      	beq.n	800c4fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c4e8:	79fb      	ldrb	r3, [r7, #7]
 800c4ea:	4a09      	ldr	r2, [pc, #36]	; (800c510 <memp_free+0x50>)
 800c4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7ff ffb8 	bl	800c468 <do_memp_free_pool>
 800c4f8:	e000      	b.n	800c4fc <memp_free+0x3c>
    return;
 800c4fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	08019168 	.word	0x08019168
 800c508:	08019238 	.word	0x08019238
 800c50c:	080191bc 	.word	0x080191bc
 800c510:	0801be44 	.word	0x0801be44

0800c514 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c514:	b480      	push	{r7}
 800c516:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
	...

0800c524 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d108      	bne.n	800c54a <netif_add+0x26>
 800c538:	4b5b      	ldr	r3, [pc, #364]	; (800c6a8 <netif_add+0x184>)
 800c53a:	f240 1227 	movw	r2, #295	; 0x127
 800c53e:	495b      	ldr	r1, [pc, #364]	; (800c6ac <netif_add+0x188>)
 800c540:	485b      	ldr	r0, [pc, #364]	; (800c6b0 <netif_add+0x18c>)
 800c542:	f00b fcc1 	bl	8017ec8 <iprintf>
 800c546:	2300      	movs	r3, #0
 800c548:	e0a9      	b.n	800c69e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d108      	bne.n	800c562 <netif_add+0x3e>
 800c550:	4b55      	ldr	r3, [pc, #340]	; (800c6a8 <netif_add+0x184>)
 800c552:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c556:	4957      	ldr	r1, [pc, #348]	; (800c6b4 <netif_add+0x190>)
 800c558:	4855      	ldr	r0, [pc, #340]	; (800c6b0 <netif_add+0x18c>)
 800c55a:	f00b fcb5 	bl	8017ec8 <iprintf>
 800c55e:	2300      	movs	r3, #0
 800c560:	e09d      	b.n	800c69e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c568:	4b53      	ldr	r3, [pc, #332]	; (800c6b8 <netif_add+0x194>)
 800c56a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c572:	4b51      	ldr	r3, [pc, #324]	; (800c6b8 <netif_add+0x194>)
 800c574:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c57c:	4b4e      	ldr	r3, [pc, #312]	; (800c6b8 <netif_add+0x194>)
 800c57e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	4a49      	ldr	r2, [pc, #292]	; (800c6bc <netif_add+0x198>)
 800c596:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	3324      	adds	r3, #36	; 0x24
 800c5aa:	2204      	movs	r2, #4
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f00b fc27 	bl	8017e02 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a3a      	ldr	r2, [r7, #32]
 800c5be:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c5c0:	4b3f      	ldr	r3, [pc, #252]	; (800c6c0 <netif_add+0x19c>)
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ce:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f000 f914 	bl	800c804 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	4798      	blx	r3
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <netif_add+0xc8>
    return NULL;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	e058      	b.n	800c69e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5f2:	2bff      	cmp	r3, #255	; 0xff
 800c5f4:	d103      	bne.n	800c5fe <netif_add+0xda>
        netif->num = 0;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c602:	4b30      	ldr	r3, [pc, #192]	; (800c6c4 <netif_add+0x1a0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e02b      	b.n	800c662 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d106      	bne.n	800c620 <netif_add+0xfc>
 800c612:	4b25      	ldr	r3, [pc, #148]	; (800c6a8 <netif_add+0x184>)
 800c614:	f240 128b 	movw	r2, #395	; 0x18b
 800c618:	492b      	ldr	r1, [pc, #172]	; (800c6c8 <netif_add+0x1a4>)
 800c61a:	4825      	ldr	r0, [pc, #148]	; (800c6b0 <netif_add+0x18c>)
 800c61c:	f00b fc54 	bl	8017ec8 <iprintf>
        num_netifs++;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	3301      	adds	r3, #1
 800c624:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2bff      	cmp	r3, #255	; 0xff
 800c62a:	dd06      	ble.n	800c63a <netif_add+0x116>
 800c62c:	4b1e      	ldr	r3, [pc, #120]	; (800c6a8 <netif_add+0x184>)
 800c62e:	f240 128d 	movw	r2, #397	; 0x18d
 800c632:	4926      	ldr	r1, [pc, #152]	; (800c6cc <netif_add+0x1a8>)
 800c634:	481e      	ldr	r0, [pc, #120]	; (800c6b0 <netif_add+0x18c>)
 800c636:	f00b fc47 	bl	8017ec8 <iprintf>
        if (netif2->num == netif->num) {
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c646:	429a      	cmp	r2, r3
 800c648:	d108      	bne.n	800c65c <netif_add+0x138>
          netif->num++;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c650:	3301      	adds	r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c65a:	e005      	b.n	800c668 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1d0      	bne.n	800c60a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1be      	bne.n	800c5ec <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c674:	2bfe      	cmp	r3, #254	; 0xfe
 800c676:	d103      	bne.n	800c680 <netif_add+0x15c>
    netif_num = 0;
 800c678:	4b11      	ldr	r3, [pc, #68]	; (800c6c0 <netif_add+0x19c>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e006      	b.n	800c68e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c686:	3301      	adds	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	4b0d      	ldr	r3, [pc, #52]	; (800c6c0 <netif_add+0x19c>)
 800c68c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c68e:	4b0d      	ldr	r3, [pc, #52]	; (800c6c4 <netif_add+0x1a0>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c696:	4a0b      	ldr	r2, [pc, #44]	; (800c6c4 <netif_add+0x1a0>)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c69c:	68fb      	ldr	r3, [r7, #12]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08019254 	.word	0x08019254
 800c6ac:	080192e8 	.word	0x080192e8
 800c6b0:	080192a4 	.word	0x080192a4
 800c6b4:	08019304 	.word	0x08019304
 800c6b8:	0801bec8 	.word	0x0801bec8
 800c6bc:	0800cae7 	.word	0x0800cae7
 800c6c0:	20004acc 	.word	0x20004acc
 800c6c4:	2000cdf4 	.word	0x2000cdf4
 800c6c8:	08019328 	.word	0x08019328
 800c6cc:	0801933c 	.word	0x0801933c

0800c6d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f002 fb91 	bl	800ee04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c6e2:	6839      	ldr	r1, [r7, #0]
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f006 ffa3 	bl	8013630 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <netif_do_set_ipaddr+0x20>
 800c706:	4b1d      	ldr	r3, [pc, #116]	; (800c77c <netif_do_set_ipaddr+0x88>)
 800c708:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c70c:	491c      	ldr	r1, [pc, #112]	; (800c780 <netif_do_set_ipaddr+0x8c>)
 800c70e:	481d      	ldr	r0, [pc, #116]	; (800c784 <netif_do_set_ipaddr+0x90>)
 800c710:	f00b fbda 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <netif_do_set_ipaddr+0x34>
 800c71a:	4b18      	ldr	r3, [pc, #96]	; (800c77c <netif_do_set_ipaddr+0x88>)
 800c71c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c720:	4917      	ldr	r1, [pc, #92]	; (800c780 <netif_do_set_ipaddr+0x8c>)
 800c722:	4818      	ldr	r0, [pc, #96]	; (800c784 <netif_do_set_ipaddr+0x90>)
 800c724:	f00b fbd0 	bl	8017ec8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3304      	adds	r3, #4
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d01c      	beq.n	800c770 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3304      	adds	r3, #4
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff ffbf 	bl	800c6d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <netif_do_set_ipaddr+0x6a>
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	e000      	b.n	800c760 <netif_do_set_ipaddr+0x6c>
 800c75e:	2300      	movs	r3, #0
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c764:	2101      	movs	r1, #1
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 f8d2 	bl	800c910 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c770:	2300      	movs	r3, #0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3718      	adds	r7, #24
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08019254 	.word	0x08019254
 800c780:	0801936c 	.word	0x0801936c
 800c784:	080192a4 	.word	0x080192a4

0800c788 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	3308      	adds	r3, #8
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d00a      	beq.n	800c7b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <netif_do_set_netmask+0x26>
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	e000      	b.n	800c7b0 <netif_do_set_netmask+0x28>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e000      	b.n	800c7ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b085      	sub	sp, #20
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	330c      	adds	r3, #12
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d00a      	beq.n	800c7f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <netif_do_set_gw+0x26>
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	e000      	b.n	800c7ee <netif_do_set_gw+0x28>
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e000      	b.n	800c7f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c812:	2300      	movs	r3, #0
 800c814:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d101      	bne.n	800c824 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c820:	4b1c      	ldr	r3, [pc, #112]	; (800c894 <netif_set_addr+0x90>)
 800c822:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c82a:	4b1a      	ldr	r3, [pc, #104]	; (800c894 <netif_set_addr+0x90>)
 800c82c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c834:	4b17      	ldr	r3, [pc, #92]	; (800c894 <netif_set_addr+0x90>)
 800c836:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d003      	beq.n	800c846 <netif_set_addr+0x42>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <netif_set_addr+0x46>
 800c846:	2301      	movs	r3, #1
 800c848:	e000      	b.n	800c84c <netif_set_addr+0x48>
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d006      	beq.n	800c862 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c854:	f107 0310 	add.w	r3, r7, #16
 800c858:	461a      	mov	r2, r3
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff ff49 	bl	800c6f4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f7ff ff8e 	bl	800c788 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	6839      	ldr	r1, [r7, #0]
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff ffa8 	bl	800c7c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d106      	bne.n	800c88a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c87c:	f107 0310 	add.w	r3, r7, #16
 800c880:	461a      	mov	r2, r3
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f7ff ff35 	bl	800c6f4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c88a:	bf00      	nop
 800c88c:	3720      	adds	r7, #32
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	0801bec8 	.word	0x0801bec8

0800c898 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c8a0:	4a04      	ldr	r2, [pc, #16]	; (800c8b4 <netif_set_default+0x1c>)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	2000cdf8 	.word	0x2000cdf8

0800c8b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d107      	bne.n	800c8d6 <netif_set_up+0x1e>
 800c8c6:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <netif_set_up+0x4c>)
 800c8c8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c8cc:	490e      	ldr	r1, [pc, #56]	; (800c908 <netif_set_up+0x50>)
 800c8ce:	480f      	ldr	r0, [pc, #60]	; (800c90c <netif_set_up+0x54>)
 800c8d0:	f00b fafa 	bl	8017ec8 <iprintf>
 800c8d4:	e013      	b.n	800c8fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10c      	bne.n	800c8fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c8ea:	f043 0301 	orr.w	r3, r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c8f6:	2103      	movs	r1, #3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f809 	bl	800c910 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	08019254 	.word	0x08019254
 800c908:	080193dc 	.word	0x080193dc
 800c90c:	080192a4 	.word	0x080192a4

0800c910 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d106      	bne.n	800c930 <netif_issue_reports+0x20>
 800c922:	4b18      	ldr	r3, [pc, #96]	; (800c984 <netif_issue_reports+0x74>)
 800c924:	f240 326d 	movw	r2, #877	; 0x36d
 800c928:	4917      	ldr	r1, [pc, #92]	; (800c988 <netif_issue_reports+0x78>)
 800c92a:	4818      	ldr	r0, [pc, #96]	; (800c98c <netif_issue_reports+0x7c>)
 800c92c:	f00b facc 	bl	8017ec8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c936:	f003 0304 	and.w	r3, r3, #4
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d01e      	beq.n	800c97c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c944:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d017      	beq.n	800c97c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c94c:	78fb      	ldrb	r3, [r7, #3]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d013      	beq.n	800c97e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3304      	adds	r3, #4
 800c95a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00e      	beq.n	800c97e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c966:	f003 0308 	and.w	r3, r3, #8
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d007      	beq.n	800c97e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	3304      	adds	r3, #4
 800c972:	4619      	mov	r1, r3
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f009 fc5b 	bl	8016230 <etharp_request>
 800c97a:	e000      	b.n	800c97e <netif_issue_reports+0x6e>
    return;
 800c97c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	08019254 	.word	0x08019254
 800c988:	080193f8 	.word	0x080193f8
 800c98c:	080192a4 	.word	0x080192a4

0800c990 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d107      	bne.n	800c9ae <netif_set_down+0x1e>
 800c99e:	4b12      	ldr	r3, [pc, #72]	; (800c9e8 <netif_set_down+0x58>)
 800c9a0:	f240 329b 	movw	r2, #923	; 0x39b
 800c9a4:	4911      	ldr	r1, [pc, #68]	; (800c9ec <netif_set_down+0x5c>)
 800c9a6:	4812      	ldr	r0, [pc, #72]	; (800c9f0 <netif_set_down+0x60>)
 800c9a8:	f00b fa8e 	bl	8017ec8 <iprintf>
 800c9ac:	e019      	b.n	800c9e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d012      	beq.n	800c9e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c9d4:	f003 0308 	and.w	r3, r3, #8
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f008 ffe1 	bl	80159a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	08019254 	.word	0x08019254
 800c9ec:	0801941c 	.word	0x0801941c
 800c9f0:	080192a4 	.word	0x080192a4

0800c9f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d107      	bne.n	800ca12 <netif_set_link_up+0x1e>
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <netif_set_link_up+0x64>)
 800ca04:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ca08:	4914      	ldr	r1, [pc, #80]	; (800ca5c <netif_set_link_up+0x68>)
 800ca0a:	4815      	ldr	r0, [pc, #84]	; (800ca60 <netif_set_link_up+0x6c>)
 800ca0c:	f00b fa5c 	bl	8017ec8 <iprintf>
 800ca10:	e01e      	b.n	800ca50 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca18:	f003 0304 	and.w	r3, r3, #4
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d117      	bne.n	800ca50 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca26:	f043 0304 	orr.w	r3, r3, #4
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f007 fa26 	bl	8013e84 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca38:	2103      	movs	r1, #3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7ff ff68 	bl	800c910 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d003      	beq.n	800ca50 <netif_set_link_up+0x5c>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	08019254 	.word	0x08019254
 800ca5c:	0801943c 	.word	0x0801943c
 800ca60:	080192a4 	.word	0x080192a4

0800ca64 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d107      	bne.n	800ca82 <netif_set_link_down+0x1e>
 800ca72:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <netif_set_link_down+0x54>)
 800ca74:	f240 4206 	movw	r2, #1030	; 0x406
 800ca78:	4910      	ldr	r1, [pc, #64]	; (800cabc <netif_set_link_down+0x58>)
 800ca7a:	4811      	ldr	r0, [pc, #68]	; (800cac0 <netif_set_link_down+0x5c>)
 800ca7c:	f00b fa24 	bl	8017ec8 <iprintf>
 800ca80:	e017      	b.n	800cab2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d010      	beq.n	800cab2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca96:	f023 0304 	bic.w	r3, r3, #4
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <netif_set_link_down+0x4e>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	08019254 	.word	0x08019254
 800cabc:	08019460 	.word	0x08019460
 800cac0:	080192a4 	.word	0x080192a4

0800cac4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	683a      	ldr	r2, [r7, #0]
 800cad8:	61da      	str	r2, [r3, #28]
  }
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cae6:	b480      	push	{r7}
 800cae8:	b085      	sub	sp, #20
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800caf2:	f06f 030b 	mvn.w	r3, #11
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
	...

0800cb04 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb0e:	79fb      	ldrb	r3, [r7, #7]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d013      	beq.n	800cb3c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb14:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <netif_get_by_index+0x48>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e00c      	b.n	800cb36 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb22:	3301      	adds	r3, #1
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	79fa      	ldrb	r2, [r7, #7]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d101      	bne.n	800cb30 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	e006      	b.n	800cb3e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1ef      	bne.n	800cb1c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	2000cdf4 	.word	0x2000cdf4

0800cb50 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cb56:	f00a ffe3 	bl	8017b20 <sys_arch_protect>
 800cb5a:	6038      	str	r0, [r7, #0]
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <pbuf_free_ooseq+0x44>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	701a      	strb	r2, [r3, #0]
 800cb62:	6838      	ldr	r0, [r7, #0]
 800cb64:	f00a ffea 	bl	8017b3c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb68:	4b0b      	ldr	r3, [pc, #44]	; (800cb98 <pbuf_free_ooseq+0x48>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	607b      	str	r3, [r7, #4]
 800cb6e:	e00a      	b.n	800cb86 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f002 f981 	bl	800ee80 <tcp_free_ooseq>
      return;
 800cb7e:	e005      	b.n	800cb8c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1f1      	bne.n	800cb70 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	2000cdfc 	.word	0x2000cdfc
 800cb98:	2000ce04 	.word	0x2000ce04

0800cb9c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cba4:	f7ff ffd4 	bl	800cb50 <pbuf_free_ooseq>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cbb6:	f00a ffb3 	bl	8017b20 <sys_arch_protect>
 800cbba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	; (800cbfc <pbuf_pool_is_empty+0x4c>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cbc2:	4b0e      	ldr	r3, [pc, #56]	; (800cbfc <pbuf_pool_is_empty+0x4c>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f00a ffb7 	bl	8017b3c <sys_arch_unprotect>

  if (!queued) {
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10f      	bne.n	800cbf4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	480a      	ldr	r0, [pc, #40]	; (800cc00 <pbuf_pool_is_empty+0x50>)
 800cbd8:	f7fe fee0 	bl	800b99c <tcpip_try_callback>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d008      	beq.n	800cbf4 <pbuf_pool_is_empty+0x44>
 800cbe2:	f00a ff9d 	bl	8017b20 <sys_arch_protect>
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <pbuf_pool_is_empty+0x4c>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f00a ffa4 	bl	8017b3c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	2000cdfc 	.word	0x2000cdfc
 800cc00:	0800cb9d 	.word	0x0800cb9d

0800cc04 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	461a      	mov	r2, r3
 800cc12:	460b      	mov	r3, r1
 800cc14:	80fb      	strh	r3, [r7, #6]
 800cc16:	4613      	mov	r3, r2
 800cc18:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	68ba      	ldr	r2, [r7, #8]
 800cc24:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	88fa      	ldrh	r2, [r7, #6]
 800cc2a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	88ba      	ldrh	r2, [r7, #4]
 800cc30:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc32:	8b3b      	ldrh	r3, [r7, #24]
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7f3a      	ldrb	r2, [r7, #28]
 800cc3e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2201      	movs	r2, #1
 800cc44:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	73da      	strb	r2, [r3, #15]
}
 800cc4c:	bf00      	nop
 800cc4e:	3714      	adds	r7, #20
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08c      	sub	sp, #48	; 0x30
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	4603      	mov	r3, r0
 800cc60:	71fb      	strb	r3, [r7, #7]
 800cc62:	460b      	mov	r3, r1
 800cc64:	80bb      	strh	r3, [r7, #4]
 800cc66:	4613      	mov	r3, r2
 800cc68:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cc6a:	79fb      	ldrb	r3, [r7, #7]
 800cc6c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cc6e:	887b      	ldrh	r3, [r7, #2]
 800cc70:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc74:	d07f      	beq.n	800cd76 <pbuf_alloc+0x11e>
 800cc76:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cc7a:	f300 80c8 	bgt.w	800ce0e <pbuf_alloc+0x1b6>
 800cc7e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc82:	d010      	beq.n	800cca6 <pbuf_alloc+0x4e>
 800cc84:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cc88:	f300 80c1 	bgt.w	800ce0e <pbuf_alloc+0x1b6>
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d002      	beq.n	800cc96 <pbuf_alloc+0x3e>
 800cc90:	2b41      	cmp	r3, #65	; 0x41
 800cc92:	f040 80bc 	bne.w	800ce0e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc96:	887a      	ldrh	r2, [r7, #2]
 800cc98:	88bb      	ldrh	r3, [r7, #4]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	f000 f8d1 	bl	800ce44 <pbuf_alloc_reference>
 800cca2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cca4:	e0bd      	b.n	800ce22 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cca6:	2300      	movs	r3, #0
 800cca8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ccae:	88bb      	ldrh	r3, [r7, #4]
 800ccb0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ccb2:	200c      	movs	r0, #12
 800ccb4:	f7ff fbb2 	bl	800c41c <memp_malloc>
 800ccb8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d109      	bne.n	800ccd4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ccc0:	f7ff ff76 	bl	800cbb0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ccca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cccc:	f000 faa8 	bl	800d220 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	e0a7      	b.n	800ce24 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ccd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccd6:	3303      	adds	r3, #3
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	f023 0303 	bic.w	r3, r3, #3
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	8b7a      	ldrh	r2, [r7, #26]
 800cce8:	4293      	cmp	r3, r2
 800ccea:	bf28      	it	cs
 800ccec:	4613      	movcs	r3, r2
 800ccee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ccf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccf2:	3310      	adds	r3, #16
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	3303      	adds	r3, #3
 800ccfa:	f023 0303 	bic.w	r3, r3, #3
 800ccfe:	4618      	mov	r0, r3
 800cd00:	89f9      	ldrh	r1, [r7, #14]
 800cd02:	8b7a      	ldrh	r2, [r7, #26]
 800cd04:	2300      	movs	r3, #0
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	887b      	ldrh	r3, [r7, #2]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4601      	mov	r1, r0
 800cd10:	6938      	ldr	r0, [r7, #16]
 800cd12:	f7ff ff77 	bl	800cc04 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f003 0303 	and.w	r3, r3, #3
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d006      	beq.n	800cd30 <pbuf_alloc+0xd8>
 800cd22:	4b42      	ldr	r3, [pc, #264]	; (800ce2c <pbuf_alloc+0x1d4>)
 800cd24:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd28:	4941      	ldr	r1, [pc, #260]	; (800ce30 <pbuf_alloc+0x1d8>)
 800cd2a:	4842      	ldr	r0, [pc, #264]	; (800ce34 <pbuf_alloc+0x1dc>)
 800cd2c:	f00b f8cc 	bl	8017ec8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd32:	3303      	adds	r3, #3
 800cd34:	f023 0303 	bic.w	r3, r3, #3
 800cd38:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd3c:	d106      	bne.n	800cd4c <pbuf_alloc+0xf4>
 800cd3e:	4b3b      	ldr	r3, [pc, #236]	; (800ce2c <pbuf_alloc+0x1d4>)
 800cd40:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd44:	493c      	ldr	r1, [pc, #240]	; (800ce38 <pbuf_alloc+0x1e0>)
 800cd46:	483b      	ldr	r0, [pc, #236]	; (800ce34 <pbuf_alloc+0x1dc>)
 800cd48:	f00b f8be 	bl	8017ec8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d102      	bne.n	800cd58 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	627b      	str	r3, [r7, #36]	; 0x24
 800cd56:	e002      	b.n	800cd5e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cd62:	8b7a      	ldrh	r2, [r7, #26]
 800cd64:	89fb      	ldrh	r3, [r7, #14]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cd6e:	8b7b      	ldrh	r3, [r7, #26]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d19e      	bne.n	800ccb2 <pbuf_alloc+0x5a>
      break;
 800cd74:	e055      	b.n	800ce22 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cd76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd78:	3303      	adds	r3, #3
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	f023 0303 	bic.w	r3, r3, #3
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	88bb      	ldrh	r3, [r7, #4]
 800cd84:	3303      	adds	r3, #3
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f023 0303 	bic.w	r3, r3, #3
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	4413      	add	r3, r2
 800cd90:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd92:	8b3b      	ldrh	r3, [r7, #24]
 800cd94:	3310      	adds	r3, #16
 800cd96:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd98:	8b3a      	ldrh	r2, [r7, #24]
 800cd9a:	88bb      	ldrh	r3, [r7, #4]
 800cd9c:	3303      	adds	r3, #3
 800cd9e:	f023 0303 	bic.w	r3, r3, #3
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d306      	bcc.n	800cdb4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cda6:	8afa      	ldrh	r2, [r7, #22]
 800cda8:	88bb      	ldrh	r3, [r7, #4]
 800cdaa:	3303      	adds	r3, #3
 800cdac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d201      	bcs.n	800cdb8 <pbuf_alloc+0x160>
        return NULL;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	e035      	b.n	800ce24 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cdb8:	8afb      	ldrh	r3, [r7, #22]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff f9ac 	bl	800c118 <mem_malloc>
 800cdc0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <pbuf_alloc+0x174>
        return NULL;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	e02b      	b.n	800ce24 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cdcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdce:	3310      	adds	r3, #16
 800cdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdd2:	4413      	add	r3, r2
 800cdd4:	3303      	adds	r3, #3
 800cdd6:	f023 0303 	bic.w	r3, r3, #3
 800cdda:	4618      	mov	r0, r3
 800cddc:	88b9      	ldrh	r1, [r7, #4]
 800cdde:	88ba      	ldrh	r2, [r7, #4]
 800cde0:	2300      	movs	r3, #0
 800cde2:	9301      	str	r3, [sp, #4]
 800cde4:	887b      	ldrh	r3, [r7, #2]
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	460b      	mov	r3, r1
 800cdea:	4601      	mov	r1, r0
 800cdec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdee:	f7ff ff09 	bl	800cc04 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	f003 0303 	and.w	r3, r3, #3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d010      	beq.n	800ce20 <pbuf_alloc+0x1c8>
 800cdfe:	4b0b      	ldr	r3, [pc, #44]	; (800ce2c <pbuf_alloc+0x1d4>)
 800ce00:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce04:	490d      	ldr	r1, [pc, #52]	; (800ce3c <pbuf_alloc+0x1e4>)
 800ce06:	480b      	ldr	r0, [pc, #44]	; (800ce34 <pbuf_alloc+0x1dc>)
 800ce08:	f00b f85e 	bl	8017ec8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce0c:	e008      	b.n	800ce20 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <pbuf_alloc+0x1d4>)
 800ce10:	f240 1227 	movw	r2, #295	; 0x127
 800ce14:	490a      	ldr	r1, [pc, #40]	; (800ce40 <pbuf_alloc+0x1e8>)
 800ce16:	4807      	ldr	r0, [pc, #28]	; (800ce34 <pbuf_alloc+0x1dc>)
 800ce18:	f00b f856 	bl	8017ec8 <iprintf>
      return NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e001      	b.n	800ce24 <pbuf_alloc+0x1cc>
      break;
 800ce20:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3728      	adds	r7, #40	; 0x28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	08019484 	.word	0x08019484
 800ce30:	080194b4 	.word	0x080194b4
 800ce34:	080194e4 	.word	0x080194e4
 800ce38:	0801950c 	.word	0x0801950c
 800ce3c:	08019540 	.word	0x08019540
 800ce40:	0801956c 	.word	0x0801956c

0800ce44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af02      	add	r7, sp, #8
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	807b      	strh	r3, [r7, #2]
 800ce50:	4613      	mov	r3, r2
 800ce52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ce54:	883b      	ldrh	r3, [r7, #0]
 800ce56:	2b41      	cmp	r3, #65	; 0x41
 800ce58:	d009      	beq.n	800ce6e <pbuf_alloc_reference+0x2a>
 800ce5a:	883b      	ldrh	r3, [r7, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d006      	beq.n	800ce6e <pbuf_alloc_reference+0x2a>
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <pbuf_alloc_reference+0x5c>)
 800ce62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ce66:	490f      	ldr	r1, [pc, #60]	; (800cea4 <pbuf_alloc_reference+0x60>)
 800ce68:	480f      	ldr	r0, [pc, #60]	; (800cea8 <pbuf_alloc_reference+0x64>)
 800ce6a:	f00b f82d 	bl	8017ec8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ce6e:	200b      	movs	r0, #11
 800ce70:	f7ff fad4 	bl	800c41c <memp_malloc>
 800ce74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	e00b      	b.n	800ce98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce80:	8879      	ldrh	r1, [r7, #2]
 800ce82:	887a      	ldrh	r2, [r7, #2]
 800ce84:	2300      	movs	r3, #0
 800ce86:	9301      	str	r3, [sp, #4]
 800ce88:	883b      	ldrh	r3, [r7, #0]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f7ff feb7 	bl	800cc04 <pbuf_init_alloced_pbuf>
  return p;
 800ce96:	68fb      	ldr	r3, [r7, #12]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	08019484 	.word	0x08019484
 800cea4:	08019588 	.word	0x08019588
 800cea8:	080194e4 	.word	0x080194e4

0800ceac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af02      	add	r7, sp, #8
 800ceb2:	607b      	str	r3, [r7, #4]
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	81bb      	strh	r3, [r7, #12]
 800cebc:	4613      	mov	r3, r2
 800cebe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
 800cec2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cec4:	8a7b      	ldrh	r3, [r7, #18]
 800cec6:	3303      	adds	r3, #3
 800cec8:	f023 0203 	bic.w	r2, r3, #3
 800cecc:	89bb      	ldrh	r3, [r7, #12]
 800cece:	441a      	add	r2, r3
 800ced0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d901      	bls.n	800ceda <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e018      	b.n	800cf0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ceda:	6a3b      	ldr	r3, [r7, #32]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d007      	beq.n	800cef0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cee0:	8a7b      	ldrh	r3, [r7, #18]
 800cee2:	3303      	adds	r3, #3
 800cee4:	f023 0303 	bic.w	r3, r3, #3
 800cee8:	6a3a      	ldr	r2, [r7, #32]
 800ceea:	4413      	add	r3, r2
 800ceec:	617b      	str	r3, [r7, #20]
 800ceee:	e001      	b.n	800cef4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cef0:	2300      	movs	r3, #0
 800cef2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	89b9      	ldrh	r1, [r7, #12]
 800cef8:	89ba      	ldrh	r2, [r7, #12]
 800cefa:	2302      	movs	r3, #2
 800cefc:	9301      	str	r3, [sp, #4]
 800cefe:	897b      	ldrh	r3, [r7, #10]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	460b      	mov	r3, r1
 800cf04:	6979      	ldr	r1, [r7, #20]
 800cf06:	f7ff fe7d 	bl	800cc04 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf0a:	687b      	ldr	r3, [r7, #4]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <pbuf_realloc+0x20>
 800cf26:	4b3a      	ldr	r3, [pc, #232]	; (800d010 <pbuf_realloc+0xfc>)
 800cf28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf2c:	4939      	ldr	r1, [pc, #228]	; (800d014 <pbuf_realloc+0x100>)
 800cf2e:	483a      	ldr	r0, [pc, #232]	; (800d018 <pbuf_realloc+0x104>)
 800cf30:	f00a ffca 	bl	8017ec8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	891b      	ldrh	r3, [r3, #8]
 800cf38:	887a      	ldrh	r2, [r7, #2]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d263      	bcs.n	800d006 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	891a      	ldrh	r2, [r3, #8]
 800cf42:	887b      	ldrh	r3, [r7, #2]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cf48:	887b      	ldrh	r3, [r7, #2]
 800cf4a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cf50:	e018      	b.n	800cf84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	895b      	ldrh	r3, [r3, #10]
 800cf56:	897a      	ldrh	r2, [r7, #10]
 800cf58:	1ad3      	subs	r3, r2, r3
 800cf5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	891a      	ldrh	r2, [r3, #8]
 800cf60:	893b      	ldrh	r3, [r7, #8]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <pbuf_realloc+0x70>
 800cf76:	4b26      	ldr	r3, [pc, #152]	; (800d010 <pbuf_realloc+0xfc>)
 800cf78:	f240 12af 	movw	r2, #431	; 0x1af
 800cf7c:	4927      	ldr	r1, [pc, #156]	; (800d01c <pbuf_realloc+0x108>)
 800cf7e:	4826      	ldr	r0, [pc, #152]	; (800d018 <pbuf_realloc+0x104>)
 800cf80:	f00a ffa2 	bl	8017ec8 <iprintf>
  while (rem_len > q->len) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	895b      	ldrh	r3, [r3, #10]
 800cf88:	897a      	ldrh	r2, [r7, #10]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d8e1      	bhi.n	800cf52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	7b1b      	ldrb	r3, [r3, #12]
 800cf92:	f003 030f 	and.w	r3, r3, #15
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d121      	bne.n	800cfde <pbuf_realloc+0xca>
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	895b      	ldrh	r3, [r3, #10]
 800cf9e:	897a      	ldrh	r2, [r7, #10]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d01c      	beq.n	800cfde <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	7b5b      	ldrb	r3, [r3, #13]
 800cfa8:	f003 0302 	and.w	r3, r3, #2
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d116      	bne.n	800cfde <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	685a      	ldr	r2, [r3, #4]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	897b      	ldrh	r3, [r7, #10]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	68f8      	ldr	r0, [r7, #12]
 800cfc4:	f7fe ff9e 	bl	800bf04 <mem_trim>
 800cfc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <pbuf_realloc+0xca>
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	; (800d010 <pbuf_realloc+0xfc>)
 800cfd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cfd6:	4912      	ldr	r1, [pc, #72]	; (800d020 <pbuf_realloc+0x10c>)
 800cfd8:	480f      	ldr	r0, [pc, #60]	; (800d018 <pbuf_realloc+0x104>)
 800cfda:	f00a ff75 	bl	8017ec8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	897a      	ldrh	r2, [r7, #10]
 800cfe2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	895a      	ldrh	r2, [r3, #10]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d004      	beq.n	800cffe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f911 	bl	800d220 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	e000      	b.n	800d008 <pbuf_realloc+0xf4>
    return;
 800d006:	bf00      	nop

}
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	08019484 	.word	0x08019484
 800d014:	0801959c 	.word	0x0801959c
 800d018:	080194e4 	.word	0x080194e4
 800d01c:	080195b4 	.word	0x080195b4
 800d020:	080195cc 	.word	0x080195cc

0800d024 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	4613      	mov	r3, r2
 800d030:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d106      	bne.n	800d046 <pbuf_add_header_impl+0x22>
 800d038:	4b2b      	ldr	r3, [pc, #172]	; (800d0e8 <pbuf_add_header_impl+0xc4>)
 800d03a:	f240 12df 	movw	r2, #479	; 0x1df
 800d03e:	492b      	ldr	r1, [pc, #172]	; (800d0ec <pbuf_add_header_impl+0xc8>)
 800d040:	482b      	ldr	r0, [pc, #172]	; (800d0f0 <pbuf_add_header_impl+0xcc>)
 800d042:	f00a ff41 	bl	8017ec8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <pbuf_add_header_impl+0x30>
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d052:	d301      	bcc.n	800d058 <pbuf_add_header_impl+0x34>
    return 1;
 800d054:	2301      	movs	r3, #1
 800d056:	e043      	b.n	800d0e0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <pbuf_add_header_impl+0x3e>
    return 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	e03e      	b.n	800d0e0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	891a      	ldrh	r2, [r3, #8]
 800d06a:	8a7b      	ldrh	r3, [r7, #18]
 800d06c:	4413      	add	r3, r2
 800d06e:	b29b      	uxth	r3, r3
 800d070:	8a7a      	ldrh	r2, [r7, #18]
 800d072:	429a      	cmp	r2, r3
 800d074:	d901      	bls.n	800d07a <pbuf_add_header_impl+0x56>
    return 1;
 800d076:	2301      	movs	r3, #1
 800d078:	e032      	b.n	800d0e0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	7b1b      	ldrb	r3, [r3, #12]
 800d07e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d080:	8a3b      	ldrh	r3, [r7, #16]
 800d082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00c      	beq.n	800d0a4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	425b      	negs	r3, r3
 800d092:	4413      	add	r3, r2
 800d094:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3310      	adds	r3, #16
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d20d      	bcs.n	800d0bc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e01d      	b.n	800d0e0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	425b      	negs	r3, r3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	e001      	b.n	800d0bc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e011      	b.n	800d0e0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	895a      	ldrh	r2, [r3, #10]
 800d0c6:	8a7b      	ldrh	r3, [r7, #18]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	891a      	ldrh	r2, [r3, #8]
 800d0d4:	8a7b      	ldrh	r3, [r7, #18]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	811a      	strh	r2, [r3, #8]


  return 0;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	08019484 	.word	0x08019484
 800d0ec:	080195e8 	.word	0x080195e8
 800d0f0:	080194e4 	.word	0x080194e4

0800d0f4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d0fe:	2200      	movs	r2, #0
 800d100:	6839      	ldr	r1, [r7, #0]
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff ff8e 	bl	800d024 <pbuf_add_header_impl>
 800d108:	4603      	mov	r3, r0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b084      	sub	sp, #16
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <pbuf_remove_header+0x1e>
 800d124:	4b20      	ldr	r3, [pc, #128]	; (800d1a8 <pbuf_remove_header+0x94>)
 800d126:	f240 224b 	movw	r2, #587	; 0x24b
 800d12a:	4920      	ldr	r1, [pc, #128]	; (800d1ac <pbuf_remove_header+0x98>)
 800d12c:	4820      	ldr	r0, [pc, #128]	; (800d1b0 <pbuf_remove_header+0x9c>)
 800d12e:	f00a fecb 	bl	8017ec8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <pbuf_remove_header+0x2c>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d13e:	d301      	bcc.n	800d144 <pbuf_remove_header+0x30>
    return 1;
 800d140:	2301      	movs	r3, #1
 800d142:	e02c      	b.n	800d19e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <pbuf_remove_header+0x3a>
    return 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e027      	b.n	800d19e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	895b      	ldrh	r3, [r3, #10]
 800d156:	89fa      	ldrh	r2, [r7, #14]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d908      	bls.n	800d16e <pbuf_remove_header+0x5a>
 800d15c:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <pbuf_remove_header+0x94>)
 800d15e:	f240 2255 	movw	r2, #597	; 0x255
 800d162:	4914      	ldr	r1, [pc, #80]	; (800d1b4 <pbuf_remove_header+0xa0>)
 800d164:	4812      	ldr	r0, [pc, #72]	; (800d1b0 <pbuf_remove_header+0x9c>)
 800d166:	f00a feaf 	bl	8017ec8 <iprintf>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e017      	b.n	800d19e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	441a      	add	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	895a      	ldrh	r2, [r3, #10]
 800d184:	89fb      	ldrh	r3, [r7, #14]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	b29a      	uxth	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	891a      	ldrh	r2, [r3, #8]
 800d192:	89fb      	ldrh	r3, [r7, #14]
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	b29a      	uxth	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	08019484 	.word	0x08019484
 800d1ac:	080195e8 	.word	0x080195e8
 800d1b0:	080194e4 	.word	0x080194e4
 800d1b4:	080195f4 	.word	0x080195f4

0800d1b8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	807b      	strh	r3, [r7, #2]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d1c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	da08      	bge.n	800d1e2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d1d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1d4:	425b      	negs	r3, r3
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff9b 	bl	800d114 <pbuf_remove_header>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	e007      	b.n	800d1f2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d1e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1e6:	787a      	ldrb	r2, [r7, #1]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7ff ff1a 	bl	800d024 <pbuf_add_header_impl>
 800d1f0:	4603      	mov	r3, r0
  }
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b082      	sub	sp, #8
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d206:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d20a:	2201      	movs	r2, #1
 800d20c:	4619      	mov	r1, r3
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff ffd2 	bl	800d1b8 <pbuf_header_impl>
 800d214:	4603      	mov	r3, r0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d10b      	bne.n	800d246 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d106      	bne.n	800d242 <pbuf_free+0x22>
 800d234:	4b3b      	ldr	r3, [pc, #236]	; (800d324 <pbuf_free+0x104>)
 800d236:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d23a:	493b      	ldr	r1, [pc, #236]	; (800d328 <pbuf_free+0x108>)
 800d23c:	483b      	ldr	r0, [pc, #236]	; (800d32c <pbuf_free+0x10c>)
 800d23e:	f00a fe43 	bl	8017ec8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d242:	2300      	movs	r3, #0
 800d244:	e069      	b.n	800d31a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d24a:	e062      	b.n	800d312 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d24c:	f00a fc68 	bl	8017b20 <sys_arch_protect>
 800d250:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	7b9b      	ldrb	r3, [r3, #14]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <pbuf_free+0x48>
 800d25a:	4b32      	ldr	r3, [pc, #200]	; (800d324 <pbuf_free+0x104>)
 800d25c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d260:	4933      	ldr	r1, [pc, #204]	; (800d330 <pbuf_free+0x110>)
 800d262:	4832      	ldr	r0, [pc, #200]	; (800d32c <pbuf_free+0x10c>)
 800d264:	f00a fe30 	bl	8017ec8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7b9b      	ldrb	r3, [r3, #14]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	739a      	strb	r2, [r3, #14]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7b9b      	ldrb	r3, [r3, #14]
 800d278:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d27a:	69b8      	ldr	r0, [r7, #24]
 800d27c:	f00a fc5e 	bl	8017b3c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d143      	bne.n	800d30e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7b1b      	ldrb	r3, [r3, #12]
 800d290:	f003 030f 	and.w	r3, r3, #15
 800d294:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7b5b      	ldrb	r3, [r3, #13]
 800d29a:	f003 0302 	and.w	r3, r3, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d011      	beq.n	800d2c6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <pbuf_free+0x9c>
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	; (800d324 <pbuf_free+0x104>)
 800d2b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d2b4:	491f      	ldr	r1, [pc, #124]	; (800d334 <pbuf_free+0x114>)
 800d2b6:	481d      	ldr	r0, [pc, #116]	; (800d32c <pbuf_free+0x10c>)
 800d2b8:	f00a fe06 	bl	8017ec8 <iprintf>
        pc->custom_free_function(p);
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	4798      	blx	r3
 800d2c4:	e01d      	b.n	800d302 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d104      	bne.n	800d2d6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d2cc:	6879      	ldr	r1, [r7, #4]
 800d2ce:	200c      	movs	r0, #12
 800d2d0:	f7ff f8f6 	bl	800c4c0 <memp_free>
 800d2d4:	e015      	b.n	800d302 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d104      	bne.n	800d2e6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	200b      	movs	r0, #11
 800d2e0:	f7ff f8ee 	bl	800c4c0 <memp_free>
 800d2e4:	e00d      	b.n	800d302 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d2e6:	7bfb      	ldrb	r3, [r7, #15]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <pbuf_free+0xd4>
          mem_free(p);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f7fe fd79 	bl	800bde4 <mem_free>
 800d2f2:	e006      	b.n	800d302 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d2f4:	4b0b      	ldr	r3, [pc, #44]	; (800d324 <pbuf_free+0x104>)
 800d2f6:	f240 320f 	movw	r2, #783	; 0x30f
 800d2fa:	490f      	ldr	r1, [pc, #60]	; (800d338 <pbuf_free+0x118>)
 800d2fc:	480b      	ldr	r0, [pc, #44]	; (800d32c <pbuf_free+0x10c>)
 800d2fe:	f00a fde3 	bl	8017ec8 <iprintf>
        }
      }
      count++;
 800d302:	7ffb      	ldrb	r3, [r7, #31]
 800d304:	3301      	adds	r3, #1
 800d306:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	607b      	str	r3, [r7, #4]
 800d30c:	e001      	b.n	800d312 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d199      	bne.n	800d24c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d318:	7ffb      	ldrb	r3, [r7, #31]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08019484 	.word	0x08019484
 800d328:	080195e8 	.word	0x080195e8
 800d32c:	080194e4 	.word	0x080194e4
 800d330:	08019614 	.word	0x08019614
 800d334:	0801962c 	.word	0x0801962c
 800d338:	08019650 	.word	0x08019650

0800d33c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d344:	2300      	movs	r3, #0
 800d346:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d348:	e005      	b.n	800d356 <pbuf_clen+0x1a>
    ++len;
 800d34a:	89fb      	ldrh	r3, [r7, #14]
 800d34c:	3301      	adds	r3, #1
 800d34e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1f6      	bne.n	800d34a <pbuf_clen+0xe>
  }
  return len;
 800d35c:	89fb      	ldrh	r3, [r7, #14]
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
	...

0800d36c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d016      	beq.n	800d3a8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d37a:	f00a fbd1 	bl	8017b20 <sys_arch_protect>
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	7b9b      	ldrb	r3, [r3, #14]
 800d384:	3301      	adds	r3, #1
 800d386:	b2da      	uxtb	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	739a      	strb	r2, [r3, #14]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f00a fbd5 	bl	8017b3c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	7b9b      	ldrb	r3, [r3, #14]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <pbuf_ref+0x3c>
 800d39a:	4b05      	ldr	r3, [pc, #20]	; (800d3b0 <pbuf_ref+0x44>)
 800d39c:	f240 3242 	movw	r2, #834	; 0x342
 800d3a0:	4904      	ldr	r1, [pc, #16]	; (800d3b4 <pbuf_ref+0x48>)
 800d3a2:	4805      	ldr	r0, [pc, #20]	; (800d3b8 <pbuf_ref+0x4c>)
 800d3a4:	f00a fd90 	bl	8017ec8 <iprintf>
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	08019484 	.word	0x08019484
 800d3b4:	08019664 	.word	0x08019664
 800d3b8:	080194e4 	.word	0x080194e4

0800d3bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <pbuf_cat+0x16>
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d107      	bne.n	800d3e2 <pbuf_cat+0x26>
 800d3d2:	4b20      	ldr	r3, [pc, #128]	; (800d454 <pbuf_cat+0x98>)
 800d3d4:	f240 3259 	movw	r2, #857	; 0x359
 800d3d8:	491f      	ldr	r1, [pc, #124]	; (800d458 <pbuf_cat+0x9c>)
 800d3da:	4820      	ldr	r0, [pc, #128]	; (800d45c <pbuf_cat+0xa0>)
 800d3dc:	f00a fd74 	bl	8017ec8 <iprintf>
 800d3e0:	e034      	b.n	800d44c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60fb      	str	r3, [r7, #12]
 800d3e6:	e00a      	b.n	800d3fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	891a      	ldrh	r2, [r3, #8]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	891b      	ldrh	r3, [r3, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1f0      	bne.n	800d3e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	891a      	ldrh	r2, [r3, #8]
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	895b      	ldrh	r3, [r3, #10]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d006      	beq.n	800d420 <pbuf_cat+0x64>
 800d412:	4b10      	ldr	r3, [pc, #64]	; (800d454 <pbuf_cat+0x98>)
 800d414:	f240 3262 	movw	r2, #866	; 0x362
 800d418:	4911      	ldr	r1, [pc, #68]	; (800d460 <pbuf_cat+0xa4>)
 800d41a:	4810      	ldr	r0, [pc, #64]	; (800d45c <pbuf_cat+0xa0>)
 800d41c:	f00a fd54 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <pbuf_cat+0x7a>
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <pbuf_cat+0x98>)
 800d42a:	f240 3263 	movw	r2, #867	; 0x363
 800d42e:	490d      	ldr	r1, [pc, #52]	; (800d464 <pbuf_cat+0xa8>)
 800d430:	480a      	ldr	r0, [pc, #40]	; (800d45c <pbuf_cat+0xa0>)
 800d432:	f00a fd49 	bl	8017ec8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	891a      	ldrh	r2, [r3, #8]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	891b      	ldrh	r3, [r3, #8]
 800d43e:	4413      	add	r3, r2
 800d440:	b29a      	uxth	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	08019484 	.word	0x08019484
 800d458:	08019678 	.word	0x08019678
 800d45c:	080194e4 	.word	0x080194e4
 800d460:	080196b0 	.word	0x080196b0
 800d464:	080196e0 	.word	0x080196e0

0800d468 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff ffa1 	bl	800d3bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d47a:	6838      	ldr	r0, [r7, #0]
 800d47c:	f7ff ff76 	bl	800d36c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	2300      	movs	r3, #0
 800d498:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d008      	beq.n	800d4b2 <pbuf_copy+0x2a>
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d005      	beq.n	800d4b2 <pbuf_copy+0x2a>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	891a      	ldrh	r2, [r3, #8]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	891b      	ldrh	r3, [r3, #8]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d209      	bcs.n	800d4c6 <pbuf_copy+0x3e>
 800d4b2:	4b57      	ldr	r3, [pc, #348]	; (800d610 <pbuf_copy+0x188>)
 800d4b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4b8:	4956      	ldr	r1, [pc, #344]	; (800d614 <pbuf_copy+0x18c>)
 800d4ba:	4857      	ldr	r0, [pc, #348]	; (800d618 <pbuf_copy+0x190>)
 800d4bc:	f00a fd04 	bl	8017ec8 <iprintf>
 800d4c0:	f06f 030f 	mvn.w	r3, #15
 800d4c4:	e09f      	b.n	800d606 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	895b      	ldrh	r3, [r3, #10]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	1ad2      	subs	r2, r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	895b      	ldrh	r3, [r3, #10]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	1acb      	subs	r3, r1, r3
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d306      	bcc.n	800d4ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	895b      	ldrh	r3, [r3, #10]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	e005      	b.n	800d4f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	18d0      	adds	r0, r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	4413      	add	r3, r2
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	4619      	mov	r1, r3
 800d50c:	f00a fc6b 	bl	8017de6 <memcpy>
    offset_to += len;
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	4413      	add	r3, r2
 800d516:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	4413      	add	r3, r2
 800d51e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	895b      	ldrh	r3, [r3, #10]
 800d524:	461a      	mov	r2, r3
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	4293      	cmp	r3, r2
 800d52a:	d906      	bls.n	800d53a <pbuf_copy+0xb2>
 800d52c:	4b38      	ldr	r3, [pc, #224]	; (800d610 <pbuf_copy+0x188>)
 800d52e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d532:	493a      	ldr	r1, [pc, #232]	; (800d61c <pbuf_copy+0x194>)
 800d534:	4838      	ldr	r0, [pc, #224]	; (800d618 <pbuf_copy+0x190>)
 800d536:	f00a fcc7 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	895b      	ldrh	r3, [r3, #10]
 800d53e:	461a      	mov	r2, r3
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	4293      	cmp	r3, r2
 800d544:	d906      	bls.n	800d554 <pbuf_copy+0xcc>
 800d546:	4b32      	ldr	r3, [pc, #200]	; (800d610 <pbuf_copy+0x188>)
 800d548:	f240 32da 	movw	r2, #986	; 0x3da
 800d54c:	4934      	ldr	r1, [pc, #208]	; (800d620 <pbuf_copy+0x198>)
 800d54e:	4832      	ldr	r0, [pc, #200]	; (800d618 <pbuf_copy+0x190>)
 800d550:	f00a fcba 	bl	8017ec8 <iprintf>
    if (offset_from >= p_from->len) {
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	895b      	ldrh	r3, [r3, #10]
 800d558:	461a      	mov	r2, r3
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d304      	bcc.n	800d56a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	895b      	ldrh	r3, [r3, #10]
 800d56e:	461a      	mov	r2, r3
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	4293      	cmp	r3, r2
 800d574:	d114      	bne.n	800d5a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d576:	2300      	movs	r3, #0
 800d578:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10c      	bne.n	800d5a0 <pbuf_copy+0x118>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d009      	beq.n	800d5a0 <pbuf_copy+0x118>
 800d58c:	4b20      	ldr	r3, [pc, #128]	; (800d610 <pbuf_copy+0x188>)
 800d58e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d592:	4924      	ldr	r1, [pc, #144]	; (800d624 <pbuf_copy+0x19c>)
 800d594:	4820      	ldr	r0, [pc, #128]	; (800d618 <pbuf_copy+0x190>)
 800d596:	f00a fc97 	bl	8017ec8 <iprintf>
 800d59a:	f06f 030f 	mvn.w	r3, #15
 800d59e:	e032      	b.n	800d606 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d013      	beq.n	800d5ce <pbuf_copy+0x146>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	895a      	ldrh	r2, [r3, #10]
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	891b      	ldrh	r3, [r3, #8]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d10d      	bne.n	800d5ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d009      	beq.n	800d5ce <pbuf_copy+0x146>
 800d5ba:	4b15      	ldr	r3, [pc, #84]	; (800d610 <pbuf_copy+0x188>)
 800d5bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d5c0:	4919      	ldr	r1, [pc, #100]	; (800d628 <pbuf_copy+0x1a0>)
 800d5c2:	4815      	ldr	r0, [pc, #84]	; (800d618 <pbuf_copy+0x190>)
 800d5c4:	f00a fc80 	bl	8017ec8 <iprintf>
 800d5c8:	f06f 0305 	mvn.w	r3, #5
 800d5cc:	e01b      	b.n	800d606 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d013      	beq.n	800d5fc <pbuf_copy+0x174>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	895a      	ldrh	r2, [r3, #10]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	891b      	ldrh	r3, [r3, #8]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d10d      	bne.n	800d5fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d009      	beq.n	800d5fc <pbuf_copy+0x174>
 800d5e8:	4b09      	ldr	r3, [pc, #36]	; (800d610 <pbuf_copy+0x188>)
 800d5ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d5ee:	490e      	ldr	r1, [pc, #56]	; (800d628 <pbuf_copy+0x1a0>)
 800d5f0:	4809      	ldr	r0, [pc, #36]	; (800d618 <pbuf_copy+0x190>)
 800d5f2:	f00a fc69 	bl	8017ec8 <iprintf>
 800d5f6:	f06f 0305 	mvn.w	r3, #5
 800d5fa:	e004      	b.n	800d606 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f47f af61 	bne.w	800d4c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	3718      	adds	r7, #24
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	08019484 	.word	0x08019484
 800d614:	0801972c 	.word	0x0801972c
 800d618:	080194e4 	.word	0x080194e4
 800d61c:	0801975c 	.word	0x0801975c
 800d620:	08019774 	.word	0x08019774
 800d624:	08019790 	.word	0x08019790
 800d628:	080197a0 	.word	0x080197a0

0800d62c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	4611      	mov	r1, r2
 800d638:	461a      	mov	r2, r3
 800d63a:	460b      	mov	r3, r1
 800d63c:	80fb      	strh	r3, [r7, #6]
 800d63e:	4613      	mov	r3, r2
 800d640:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d642:	2300      	movs	r3, #0
 800d644:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d108      	bne.n	800d662 <pbuf_copy_partial+0x36>
 800d650:	4b2b      	ldr	r3, [pc, #172]	; (800d700 <pbuf_copy_partial+0xd4>)
 800d652:	f240 420a 	movw	r2, #1034	; 0x40a
 800d656:	492b      	ldr	r1, [pc, #172]	; (800d704 <pbuf_copy_partial+0xd8>)
 800d658:	482b      	ldr	r0, [pc, #172]	; (800d708 <pbuf_copy_partial+0xdc>)
 800d65a:	f00a fc35 	bl	8017ec8 <iprintf>
 800d65e:	2300      	movs	r3, #0
 800d660:	e04a      	b.n	800d6f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d108      	bne.n	800d67a <pbuf_copy_partial+0x4e>
 800d668:	4b25      	ldr	r3, [pc, #148]	; (800d700 <pbuf_copy_partial+0xd4>)
 800d66a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d66e:	4927      	ldr	r1, [pc, #156]	; (800d70c <pbuf_copy_partial+0xe0>)
 800d670:	4825      	ldr	r0, [pc, #148]	; (800d708 <pbuf_copy_partial+0xdc>)
 800d672:	f00a fc29 	bl	8017ec8 <iprintf>
 800d676:	2300      	movs	r3, #0
 800d678:	e03e      	b.n	800d6f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	61fb      	str	r3, [r7, #28]
 800d67e:	e034      	b.n	800d6ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d680:	88bb      	ldrh	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d00a      	beq.n	800d69c <pbuf_copy_partial+0x70>
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	895b      	ldrh	r3, [r3, #10]
 800d68a:	88ba      	ldrh	r2, [r7, #4]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d305      	bcc.n	800d69c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	895b      	ldrh	r3, [r3, #10]
 800d694:	88ba      	ldrh	r2, [r7, #4]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	80bb      	strh	r3, [r7, #4]
 800d69a:	e023      	b.n	800d6e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d69c:	69fb      	ldr	r3, [r7, #28]
 800d69e:	895a      	ldrh	r2, [r3, #10]
 800d6a0:	88bb      	ldrh	r3, [r7, #4]
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6a6:	8b3a      	ldrh	r2, [r7, #24]
 800d6a8:	88fb      	ldrh	r3, [r7, #6]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d901      	bls.n	800d6b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6ae:	88fb      	ldrh	r3, [r7, #6]
 800d6b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6b2:	8b7b      	ldrh	r3, [r7, #26]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	18d0      	adds	r0, r2, r3
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	88bb      	ldrh	r3, [r7, #4]
 800d6be:	4413      	add	r3, r2
 800d6c0:	8b3a      	ldrh	r2, [r7, #24]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	f00a fb8f 	bl	8017de6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d6c8:	8afa      	ldrh	r2, [r7, #22]
 800d6ca:	8b3b      	ldrh	r3, [r7, #24]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d6d0:	8b7a      	ldrh	r2, [r7, #26]
 800d6d2:	8b3b      	ldrh	r3, [r7, #24]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	8b3b      	ldrh	r3, [r7, #24]
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	61fb      	str	r3, [r7, #28]
 800d6ea:	88fb      	ldrh	r3, [r7, #6]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <pbuf_copy_partial+0xca>
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1c4      	bne.n	800d680 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d6f6:	8afb      	ldrh	r3, [r7, #22]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3720      	adds	r7, #32
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08019484 	.word	0x08019484
 800d704:	080197cc 	.word	0x080197cc
 800d708:	080194e4 	.word	0x080194e4
 800d70c:	080197ec 	.word	0x080197ec

0800d710 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	603a      	str	r2, [r7, #0]
 800d71a:	71fb      	strb	r3, [r7, #7]
 800d71c:	460b      	mov	r3, r1
 800d71e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	8919      	ldrh	r1, [r3, #8]
 800d724:	88ba      	ldrh	r2, [r7, #4]
 800d726:	79fb      	ldrb	r3, [r7, #7]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7ff fa95 	bl	800cc58 <pbuf_alloc>
 800d72e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <pbuf_clone+0x2a>
    return NULL;
 800d736:	2300      	movs	r3, #0
 800d738:	e011      	b.n	800d75e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff fea3 	bl	800d488 <pbuf_copy>
 800d742:	4603      	mov	r3, r0
 800d744:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d746:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d006      	beq.n	800d75c <pbuf_clone+0x4c>
 800d74e:	4b06      	ldr	r3, [pc, #24]	; (800d768 <pbuf_clone+0x58>)
 800d750:	f240 5224 	movw	r2, #1316	; 0x524
 800d754:	4905      	ldr	r1, [pc, #20]	; (800d76c <pbuf_clone+0x5c>)
 800d756:	4806      	ldr	r0, [pc, #24]	; (800d770 <pbuf_clone+0x60>)
 800d758:	f00a fbb6 	bl	8017ec8 <iprintf>
  return q;
 800d75c:	68fb      	ldr	r3, [r7, #12]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	08019484 	.word	0x08019484
 800d76c:	080198f8 	.word	0x080198f8
 800d770:	080194e4 	.word	0x080194e4

0800d774 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d778:	f00a fbbe 	bl	8017ef8 <rand>
 800d77c:	4603      	mov	r3, r0
 800d77e:	b29b      	uxth	r3, r3
 800d780:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d784:	b29b      	uxth	r3, r3
 800d786:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d78a:	b29a      	uxth	r2, r3
 800d78c:	4b01      	ldr	r3, [pc, #4]	; (800d794 <tcp_init+0x20>)
 800d78e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d790:	bf00      	nop
 800d792:	bd80      	pop	{r7, pc}
 800d794:	20000010 	.word	0x20000010

0800d798 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	7d1b      	ldrb	r3, [r3, #20]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d105      	bne.n	800d7b4 <tcp_free+0x1c>
 800d7a8:	4b06      	ldr	r3, [pc, #24]	; (800d7c4 <tcp_free+0x2c>)
 800d7aa:	22d4      	movs	r2, #212	; 0xd4
 800d7ac:	4906      	ldr	r1, [pc, #24]	; (800d7c8 <tcp_free+0x30>)
 800d7ae:	4807      	ldr	r0, [pc, #28]	; (800d7cc <tcp_free+0x34>)
 800d7b0:	f00a fb8a 	bl	8017ec8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7b4:	6879      	ldr	r1, [r7, #4]
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	f7fe fe82 	bl	800c4c0 <memp_free>
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	08019984 	.word	0x08019984
 800d7c8:	080199b4 	.word	0x080199b4
 800d7cc:	080199c8 	.word	0x080199c8

0800d7d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7d1b      	ldrb	r3, [r3, #20]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d105      	bne.n	800d7ec <tcp_free_listen+0x1c>
 800d7e0:	4b06      	ldr	r3, [pc, #24]	; (800d7fc <tcp_free_listen+0x2c>)
 800d7e2:	22df      	movs	r2, #223	; 0xdf
 800d7e4:	4906      	ldr	r1, [pc, #24]	; (800d800 <tcp_free_listen+0x30>)
 800d7e6:	4807      	ldr	r0, [pc, #28]	; (800d804 <tcp_free_listen+0x34>)
 800d7e8:	f00a fb6e 	bl	8017ec8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d7ec:	6879      	ldr	r1, [r7, #4]
 800d7ee:	2002      	movs	r0, #2
 800d7f0:	f7fe fe66 	bl	800c4c0 <memp_free>
}
 800d7f4:	bf00      	nop
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	08019984 	.word	0x08019984
 800d800:	080199f0 	.word	0x080199f0
 800d804:	080199c8 	.word	0x080199c8

0800d808 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d80c:	f000 fea2 	bl	800e554 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d810:	4b07      	ldr	r3, [pc, #28]	; (800d830 <tcp_tmr+0x28>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	3301      	adds	r3, #1
 800d816:	b2da      	uxtb	r2, r3
 800d818:	4b05      	ldr	r3, [pc, #20]	; (800d830 <tcp_tmr+0x28>)
 800d81a:	701a      	strb	r2, [r3, #0]
 800d81c:	4b04      	ldr	r3, [pc, #16]	; (800d830 <tcp_tmr+0x28>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 0301 	and.w	r3, r3, #1
 800d824:	2b00      	cmp	r3, #0
 800d826:	d001      	beq.n	800d82c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d828:	f000 fb54 	bl	800ded4 <tcp_slowtmr>
  }
}
 800d82c:	bf00      	nop
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20004acd 	.word	0x20004acd

0800d834 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d105      	bne.n	800d850 <tcp_remove_listener+0x1c>
 800d844:	4b0d      	ldr	r3, [pc, #52]	; (800d87c <tcp_remove_listener+0x48>)
 800d846:	22ff      	movs	r2, #255	; 0xff
 800d848:	490d      	ldr	r1, [pc, #52]	; (800d880 <tcp_remove_listener+0x4c>)
 800d84a:	480e      	ldr	r0, [pc, #56]	; (800d884 <tcp_remove_listener+0x50>)
 800d84c:	f00a fb3c 	bl	8017ec8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	60fb      	str	r3, [r7, #12]
 800d854:	e00a      	b.n	800d86c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d102      	bne.n	800d866 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	60fb      	str	r3, [r7, #12]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f1      	bne.n	800d856 <tcp_remove_listener+0x22>
    }
  }
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	3710      	adds	r7, #16
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	08019984 	.word	0x08019984
 800d880:	08019a0c 	.word	0x08019a0c
 800d884:	080199c8 	.word	0x080199c8

0800d888 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d106      	bne.n	800d8a4 <tcp_listen_closed+0x1c>
 800d896:	4b14      	ldr	r3, [pc, #80]	; (800d8e8 <tcp_listen_closed+0x60>)
 800d898:	f240 1211 	movw	r2, #273	; 0x111
 800d89c:	4913      	ldr	r1, [pc, #76]	; (800d8ec <tcp_listen_closed+0x64>)
 800d89e:	4814      	ldr	r0, [pc, #80]	; (800d8f0 <tcp_listen_closed+0x68>)
 800d8a0:	f00a fb12 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	7d1b      	ldrb	r3, [r3, #20]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d006      	beq.n	800d8ba <tcp_listen_closed+0x32>
 800d8ac:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <tcp_listen_closed+0x60>)
 800d8ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8b2:	4910      	ldr	r1, [pc, #64]	; (800d8f4 <tcp_listen_closed+0x6c>)
 800d8b4:	480e      	ldr	r0, [pc, #56]	; (800d8f0 <tcp_listen_closed+0x68>)
 800d8b6:	f00a fb07 	bl	8017ec8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	e00b      	b.n	800d8d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8c0:	4a0d      	ldr	r2, [pc, #52]	; (800d8f8 <tcp_listen_closed+0x70>)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7ff ffb1 	bl	800d834 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d9f0      	bls.n	800d8c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	08019984 	.word	0x08019984
 800d8ec:	08019a34 	.word	0x08019a34
 800d8f0:	080199c8 	.word	0x080199c8
 800d8f4:	08019a40 	.word	0x08019a40
 800d8f8:	0801be90 	.word	0x0801be90

0800d8fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8fc:	b5b0      	push	{r4, r5, r7, lr}
 800d8fe:	b088      	sub	sp, #32
 800d900:	af04      	add	r7, sp, #16
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <tcp_close_shutdown+0x20>
 800d90e:	4b63      	ldr	r3, [pc, #396]	; (800da9c <tcp_close_shutdown+0x1a0>)
 800d910:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d914:	4962      	ldr	r1, [pc, #392]	; (800daa0 <tcp_close_shutdown+0x1a4>)
 800d916:	4863      	ldr	r0, [pc, #396]	; (800daa4 <tcp_close_shutdown+0x1a8>)
 800d918:	f00a fad6 	bl	8017ec8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d91c:	78fb      	ldrb	r3, [r7, #3]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d066      	beq.n	800d9f0 <tcp_close_shutdown+0xf4>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	7d1b      	ldrb	r3, [r3, #20]
 800d926:	2b04      	cmp	r3, #4
 800d928:	d003      	beq.n	800d932 <tcp_close_shutdown+0x36>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	7d1b      	ldrb	r3, [r3, #20]
 800d92e:	2b07      	cmp	r3, #7
 800d930:	d15e      	bne.n	800d9f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d936:	2b00      	cmp	r3, #0
 800d938:	d104      	bne.n	800d944 <tcp_close_shutdown+0x48>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d93e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d942:	d055      	beq.n	800d9f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	8b5b      	ldrh	r3, [r3, #26]
 800d948:	f003 0310 	and.w	r3, r3, #16
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <tcp_close_shutdown+0x62>
 800d950:	4b52      	ldr	r3, [pc, #328]	; (800da9c <tcp_close_shutdown+0x1a0>)
 800d952:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d956:	4954      	ldr	r1, [pc, #336]	; (800daa8 <tcp_close_shutdown+0x1ac>)
 800d958:	4852      	ldr	r0, [pc, #328]	; (800daa4 <tcp_close_shutdown+0x1a8>)
 800d95a:	f00a fab5 	bl	8017ec8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d966:	687d      	ldr	r5, [r7, #4]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	3304      	adds	r3, #4
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	8ad2      	ldrh	r2, [r2, #22]
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	8b09      	ldrh	r1, [r1, #24]
 800d974:	9102      	str	r1, [sp, #8]
 800d976:	9201      	str	r2, [sp, #4]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	462b      	mov	r3, r5
 800d97c:	4622      	mov	r2, r4
 800d97e:	4601      	mov	r1, r0
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f004 fe8d 	bl	80126a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f001 f8c6 	bl	800eb18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d98c:	4b47      	ldr	r3, [pc, #284]	; (800daac <tcp_close_shutdown+0x1b0>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	429a      	cmp	r2, r3
 800d994:	d105      	bne.n	800d9a2 <tcp_close_shutdown+0xa6>
 800d996:	4b45      	ldr	r3, [pc, #276]	; (800daac <tcp_close_shutdown+0x1b0>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	4a43      	ldr	r2, [pc, #268]	; (800daac <tcp_close_shutdown+0x1b0>)
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	e013      	b.n	800d9ca <tcp_close_shutdown+0xce>
 800d9a2:	4b42      	ldr	r3, [pc, #264]	; (800daac <tcp_close_shutdown+0x1b0>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	e00c      	b.n	800d9c4 <tcp_close_shutdown+0xc8>
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d104      	bne.n	800d9be <tcp_close_shutdown+0xc2>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68da      	ldr	r2, [r3, #12]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	60da      	str	r2, [r3, #12]
 800d9bc:	e005      	b.n	800d9ca <tcp_close_shutdown+0xce>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1ef      	bne.n	800d9aa <tcp_close_shutdown+0xae>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	60da      	str	r2, [r3, #12]
 800d9d0:	4b37      	ldr	r3, [pc, #220]	; (800dab0 <tcp_close_shutdown+0x1b4>)
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d9d6:	4b37      	ldr	r3, [pc, #220]	; (800dab4 <tcp_close_shutdown+0x1b8>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d102      	bne.n	800d9e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d9e0:	f003 fd5a 	bl	8011498 <tcp_trigger_input_pcb_close>
 800d9e4:	e002      	b.n	800d9ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7ff fed6 	bl	800d798 <tcp_free>
      }
      return ERR_OK;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	e050      	b.n	800da92 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d03b      	beq.n	800da70 <tcp_close_shutdown+0x174>
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	dc44      	bgt.n	800da86 <tcp_close_shutdown+0x18a>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <tcp_close_shutdown+0x10a>
 800da00:	2b01      	cmp	r3, #1
 800da02:	d02a      	beq.n	800da5a <tcp_close_shutdown+0x15e>
 800da04:	e03f      	b.n	800da86 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	8adb      	ldrh	r3, [r3, #22]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d021      	beq.n	800da52 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da0e:	4b2a      	ldr	r3, [pc, #168]	; (800dab8 <tcp_close_shutdown+0x1bc>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	429a      	cmp	r2, r3
 800da16:	d105      	bne.n	800da24 <tcp_close_shutdown+0x128>
 800da18:	4b27      	ldr	r3, [pc, #156]	; (800dab8 <tcp_close_shutdown+0x1bc>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	4a26      	ldr	r2, [pc, #152]	; (800dab8 <tcp_close_shutdown+0x1bc>)
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	e013      	b.n	800da4c <tcp_close_shutdown+0x150>
 800da24:	4b24      	ldr	r3, [pc, #144]	; (800dab8 <tcp_close_shutdown+0x1bc>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	60bb      	str	r3, [r7, #8]
 800da2a:	e00c      	b.n	800da46 <tcp_close_shutdown+0x14a>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	429a      	cmp	r2, r3
 800da34:	d104      	bne.n	800da40 <tcp_close_shutdown+0x144>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68da      	ldr	r2, [r3, #12]
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	60da      	str	r2, [r3, #12]
 800da3e:	e005      	b.n	800da4c <tcp_close_shutdown+0x150>
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	60bb      	str	r3, [r7, #8]
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1ef      	bne.n	800da2c <tcp_close_shutdown+0x130>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff fea0 	bl	800d798 <tcp_free>
      break;
 800da58:	e01a      	b.n	800da90 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f7ff ff14 	bl	800d888 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da60:	6879      	ldr	r1, [r7, #4]
 800da62:	4816      	ldr	r0, [pc, #88]	; (800dabc <tcp_close_shutdown+0x1c0>)
 800da64:	f001 f8a8 	bl	800ebb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff feb1 	bl	800d7d0 <tcp_free_listen>
      break;
 800da6e:	e00f      	b.n	800da90 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da70:	6879      	ldr	r1, [r7, #4]
 800da72:	480e      	ldr	r0, [pc, #56]	; (800daac <tcp_close_shutdown+0x1b0>)
 800da74:	f001 f8a0 	bl	800ebb8 <tcp_pcb_remove>
 800da78:	4b0d      	ldr	r3, [pc, #52]	; (800dab0 <tcp_close_shutdown+0x1b4>)
 800da7a:	2201      	movs	r2, #1
 800da7c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff fe8a 	bl	800d798 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da84:	e004      	b.n	800da90 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f81a 	bl	800dac0 <tcp_close_shutdown_fin>
 800da8c:	4603      	mov	r3, r0
 800da8e:	e000      	b.n	800da92 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bdb0      	pop	{r4, r5, r7, pc}
 800da9a:	bf00      	nop
 800da9c:	08019984 	.word	0x08019984
 800daa0:	08019a58 	.word	0x08019a58
 800daa4:	080199c8 	.word	0x080199c8
 800daa8:	08019a78 	.word	0x08019a78
 800daac:	2000ce04 	.word	0x2000ce04
 800dab0:	2000ce00 	.word	0x2000ce00
 800dab4:	2000ce18 	.word	0x2000ce18
 800dab8:	2000ce10 	.word	0x2000ce10
 800dabc:	2000ce0c 	.word	0x2000ce0c

0800dac0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <tcp_close_shutdown_fin+0x1c>
 800dace:	4b2e      	ldr	r3, [pc, #184]	; (800db88 <tcp_close_shutdown_fin+0xc8>)
 800dad0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dad4:	492d      	ldr	r1, [pc, #180]	; (800db8c <tcp_close_shutdown_fin+0xcc>)
 800dad6:	482e      	ldr	r0, [pc, #184]	; (800db90 <tcp_close_shutdown_fin+0xd0>)
 800dad8:	f00a f9f6 	bl	8017ec8 <iprintf>

  switch (pcb->state) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	7d1b      	ldrb	r3, [r3, #20]
 800dae0:	2b07      	cmp	r3, #7
 800dae2:	d020      	beq.n	800db26 <tcp_close_shutdown_fin+0x66>
 800dae4:	2b07      	cmp	r3, #7
 800dae6:	dc2b      	bgt.n	800db40 <tcp_close_shutdown_fin+0x80>
 800dae8:	2b03      	cmp	r3, #3
 800daea:	d002      	beq.n	800daf2 <tcp_close_shutdown_fin+0x32>
 800daec:	2b04      	cmp	r3, #4
 800daee:	d00d      	beq.n	800db0c <tcp_close_shutdown_fin+0x4c>
 800daf0:	e026      	b.n	800db40 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f003 fee2 	bl	80118bc <tcp_send_fin>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d11f      	bne.n	800db44 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2205      	movs	r2, #5
 800db08:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db0a:	e01b      	b.n	800db44 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f003 fed5 	bl	80118bc <tcp_send_fin>
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d114      	bne.n	800db48 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2205      	movs	r2, #5
 800db22:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db24:	e010      	b.n	800db48 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f003 fec8 	bl	80118bc <tcp_send_fin>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2209      	movs	r2, #9
 800db3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db3e:	e005      	b.n	800db4c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	e01c      	b.n	800db7e <tcp_close_shutdown_fin+0xbe>
      break;
 800db44:	bf00      	nop
 800db46:	e002      	b.n	800db4e <tcp_close_shutdown_fin+0x8e>
      break;
 800db48:	bf00      	nop
 800db4a:	e000      	b.n	800db4e <tcp_close_shutdown_fin+0x8e>
      break;
 800db4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d103      	bne.n	800db5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f003 ffee 	bl	8011b38 <tcp_output>
 800db5c:	e00d      	b.n	800db7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db66:	d108      	bne.n	800db7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	8b5b      	ldrh	r3, [r3, #26]
 800db6c:	f043 0308 	orr.w	r3, r3, #8
 800db70:	b29a      	uxth	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db76:	2300      	movs	r3, #0
 800db78:	e001      	b.n	800db7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	08019984 	.word	0x08019984
 800db8c:	08019a34 	.word	0x08019a34
 800db90:	080199c8 	.word	0x080199c8

0800db94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <tcp_close+0x22>
 800dba2:	4b0f      	ldr	r3, [pc, #60]	; (800dbe0 <tcp_close+0x4c>)
 800dba4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dba8:	490e      	ldr	r1, [pc, #56]	; (800dbe4 <tcp_close+0x50>)
 800dbaa:	480f      	ldr	r0, [pc, #60]	; (800dbe8 <tcp_close+0x54>)
 800dbac:	f00a f98c 	bl	8017ec8 <iprintf>
 800dbb0:	f06f 030f 	mvn.w	r3, #15
 800dbb4:	e00f      	b.n	800dbd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7d1b      	ldrb	r3, [r3, #20]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d006      	beq.n	800dbcc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	8b5b      	ldrh	r3, [r3, #26]
 800dbc2:	f043 0310 	orr.w	r3, r3, #16
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dbcc:	2101      	movs	r1, #1
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff fe94 	bl	800d8fc <tcp_close_shutdown>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	08019984 	.word	0x08019984
 800dbe4:	08019a94 	.word	0x08019a94
 800dbe8:	080199c8 	.word	0x080199c8

0800dbec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b08e      	sub	sp, #56	; 0x38
 800dbf0:	af04      	add	r7, sp, #16
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d107      	bne.n	800dc0c <tcp_abandon+0x20>
 800dbfc:	4b52      	ldr	r3, [pc, #328]	; (800dd48 <tcp_abandon+0x15c>)
 800dbfe:	f240 223d 	movw	r2, #573	; 0x23d
 800dc02:	4952      	ldr	r1, [pc, #328]	; (800dd4c <tcp_abandon+0x160>)
 800dc04:	4852      	ldr	r0, [pc, #328]	; (800dd50 <tcp_abandon+0x164>)
 800dc06:	f00a f95f 	bl	8017ec8 <iprintf>
 800dc0a:	e099      	b.n	800dd40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	7d1b      	ldrb	r3, [r3, #20]
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d106      	bne.n	800dc22 <tcp_abandon+0x36>
 800dc14:	4b4c      	ldr	r3, [pc, #304]	; (800dd48 <tcp_abandon+0x15c>)
 800dc16:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dc1a:	494e      	ldr	r1, [pc, #312]	; (800dd54 <tcp_abandon+0x168>)
 800dc1c:	484c      	ldr	r0, [pc, #304]	; (800dd50 <tcp_abandon+0x164>)
 800dc1e:	f00a f953 	bl	8017ec8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7d1b      	ldrb	r3, [r3, #20]
 800dc26:	2b0a      	cmp	r3, #10
 800dc28:	d107      	bne.n	800dc3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc2a:	6879      	ldr	r1, [r7, #4]
 800dc2c:	484a      	ldr	r0, [pc, #296]	; (800dd58 <tcp_abandon+0x16c>)
 800dc2e:	f000 ffc3 	bl	800ebb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff fdb0 	bl	800d798 <tcp_free>
 800dc38:	e082      	b.n	800dd40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	7d1b      	ldrb	r3, [r3, #20]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d126      	bne.n	800dcb2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	8adb      	ldrh	r3, [r3, #22]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d02e      	beq.n	800dcca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc6c:	4b3b      	ldr	r3, [pc, #236]	; (800dd5c <tcp_abandon+0x170>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d105      	bne.n	800dc82 <tcp_abandon+0x96>
 800dc76:	4b39      	ldr	r3, [pc, #228]	; (800dd5c <tcp_abandon+0x170>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	4a37      	ldr	r2, [pc, #220]	; (800dd5c <tcp_abandon+0x170>)
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	e013      	b.n	800dcaa <tcp_abandon+0xbe>
 800dc82:	4b36      	ldr	r3, [pc, #216]	; (800dd5c <tcp_abandon+0x170>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	61fb      	str	r3, [r7, #28]
 800dc88:	e00c      	b.n	800dca4 <tcp_abandon+0xb8>
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d104      	bne.n	800dc9e <tcp_abandon+0xb2>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	68da      	ldr	r2, [r3, #12]
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	60da      	str	r2, [r3, #12]
 800dc9c:	e005      	b.n	800dcaa <tcp_abandon+0xbe>
 800dc9e:	69fb      	ldr	r3, [r7, #28]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	61fb      	str	r3, [r7, #28]
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1ef      	bne.n	800dc8a <tcp_abandon+0x9e>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	60da      	str	r2, [r3, #12]
 800dcb0:	e00b      	b.n	800dcca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	8adb      	ldrh	r3, [r3, #22]
 800dcba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	4828      	ldr	r0, [pc, #160]	; (800dd60 <tcp_abandon+0x174>)
 800dcc0:	f000 ff7a 	bl	800ebb8 <tcp_pcb_remove>
 800dcc4:	4b27      	ldr	r3, [pc, #156]	; (800dd64 <tcp_abandon+0x178>)
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d004      	beq.n	800dcdc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fd1c 	bl	800e714 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d004      	beq.n	800dcee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 fd13 	bl	800e714 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d004      	beq.n	800dd00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f000 fd0a 	bl	800e714 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00e      	beq.n	800dd24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd06:	6879      	ldr	r1, [r7, #4]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	8b12      	ldrh	r2, [r2, #24]
 800dd10:	9202      	str	r2, [sp, #8]
 800dd12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd14:	9201      	str	r2, [sp, #4]
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	697a      	ldr	r2, [r7, #20]
 800dd1c:	69b9      	ldr	r1, [r7, #24]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f004 fcbe 	bl	80126a0 <tcp_rst>
    }
    last_state = pcb->state;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	7d1b      	ldrb	r3, [r3, #20]
 800dd28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff fd34 	bl	800d798 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d004      	beq.n	800dd40 <tcp_abandon+0x154>
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	f06f 010c 	mvn.w	r1, #12
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	4798      	blx	r3
  }
}
 800dd40:	3728      	adds	r7, #40	; 0x28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	08019984 	.word	0x08019984
 800dd4c:	08019ac8 	.word	0x08019ac8
 800dd50:	080199c8 	.word	0x080199c8
 800dd54:	08019ae4 	.word	0x08019ae4
 800dd58:	2000ce14 	.word	0x2000ce14
 800dd5c:	2000ce10 	.word	0x2000ce10
 800dd60:	2000ce04 	.word	0x2000ce04
 800dd64:	2000ce00 	.word	0x2000ce00

0800dd68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd70:	2101      	movs	r1, #1
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ff3a 	bl	800dbec <tcp_abandon>
}
 800dd78:	bf00      	nop
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d106      	bne.n	800dd9c <tcp_update_rcv_ann_wnd+0x1c>
 800dd8e:	4b25      	ldr	r3, [pc, #148]	; (800de24 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd90:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd94:	4924      	ldr	r1, [pc, #144]	; (800de28 <tcp_update_rcv_ann_wnd+0xa8>)
 800dd96:	4825      	ldr	r0, [pc, #148]	; (800de2c <tcp_update_rcv_ann_wnd+0xac>)
 800dd98:	f00a f896 	bl	8017ec8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dda4:	4413      	add	r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ddb0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ddb4:	bf28      	it	cs
 800ddb6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ddba:	b292      	uxth	r2, r2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	db08      	blt.n	800ddd8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	e020      	b.n	800de1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	dd03      	ble.n	800ddee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ddec:	e014      	b.n	800de18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de00:	d306      	bcc.n	800de10 <tcp_update_rcv_ann_wnd+0x90>
 800de02:	4b08      	ldr	r3, [pc, #32]	; (800de24 <tcp_update_rcv_ann_wnd+0xa4>)
 800de04:	f240 32b6 	movw	r2, #950	; 0x3b6
 800de08:	4909      	ldr	r1, [pc, #36]	; (800de30 <tcp_update_rcv_ann_wnd+0xb0>)
 800de0a:	4808      	ldr	r0, [pc, #32]	; (800de2c <tcp_update_rcv_ann_wnd+0xac>)
 800de0c:	f00a f85c 	bl	8017ec8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	b29a      	uxth	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800de18:	2300      	movs	r3, #0
  }
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	08019984 	.word	0x08019984
 800de28:	08019be0 	.word	0x08019be0
 800de2c:	080199c8 	.word	0x080199c8
 800de30:	08019c04 	.word	0x08019c04

0800de34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d107      	bne.n	800de56 <tcp_recved+0x22>
 800de46:	4b1f      	ldr	r3, [pc, #124]	; (800dec4 <tcp_recved+0x90>)
 800de48:	f240 32cf 	movw	r2, #975	; 0x3cf
 800de4c:	491e      	ldr	r1, [pc, #120]	; (800dec8 <tcp_recved+0x94>)
 800de4e:	481f      	ldr	r0, [pc, #124]	; (800decc <tcp_recved+0x98>)
 800de50:	f00a f83a 	bl	8017ec8 <iprintf>
 800de54:	e032      	b.n	800debc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7d1b      	ldrb	r3, [r3, #20]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d106      	bne.n	800de6c <tcp_recved+0x38>
 800de5e:	4b19      	ldr	r3, [pc, #100]	; (800dec4 <tcp_recved+0x90>)
 800de60:	f240 32d2 	movw	r2, #978	; 0x3d2
 800de64:	491a      	ldr	r1, [pc, #104]	; (800ded0 <tcp_recved+0x9c>)
 800de66:	4819      	ldr	r0, [pc, #100]	; (800decc <tcp_recved+0x98>)
 800de68:	f00a f82e 	bl	8017ec8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de70:	887b      	ldrh	r3, [r7, #2]
 800de72:	4413      	add	r3, r2
 800de74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800de76:	89fb      	ldrh	r3, [r7, #14]
 800de78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de7c:	d804      	bhi.n	800de88 <tcp_recved+0x54>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de82:	89fa      	ldrh	r2, [r7, #14]
 800de84:	429a      	cmp	r2, r3
 800de86:	d204      	bcs.n	800de92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de8e:	851a      	strh	r2, [r3, #40]	; 0x28
 800de90:	e002      	b.n	800de98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	89fa      	ldrh	r2, [r7, #14]
 800de96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff ff71 	bl	800dd80 <tcp_update_rcv_ann_wnd>
 800de9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dea6:	d309      	bcc.n	800debc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	8b5b      	ldrh	r3, [r3, #26]
 800deac:	f043 0302 	orr.w	r3, r3, #2
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f003 fe3e 	bl	8011b38 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	08019984 	.word	0x08019984
 800dec8:	08019c20 	.word	0x08019c20
 800decc:	080199c8 	.word	0x080199c8
 800ded0:	08019c38 	.word	0x08019c38

0800ded4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ded4:	b5b0      	push	{r4, r5, r7, lr}
 800ded6:	b090      	sub	sp, #64	; 0x40
 800ded8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dee0:	4b94      	ldr	r3, [pc, #592]	; (800e134 <tcp_slowtmr+0x260>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	4a93      	ldr	r2, [pc, #588]	; (800e134 <tcp_slowtmr+0x260>)
 800dee8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800deea:	4b93      	ldr	r3, [pc, #588]	; (800e138 <tcp_slowtmr+0x264>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	3301      	adds	r3, #1
 800def0:	b2da      	uxtb	r2, r3
 800def2:	4b91      	ldr	r3, [pc, #580]	; (800e138 <tcp_slowtmr+0x264>)
 800def4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800defa:	4b90      	ldr	r3, [pc, #576]	; (800e13c <tcp_slowtmr+0x268>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800df00:	e29f      	b.n	800e442 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df04:	7d1b      	ldrb	r3, [r3, #20]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <tcp_slowtmr+0x44>
 800df0a:	4b8d      	ldr	r3, [pc, #564]	; (800e140 <tcp_slowtmr+0x26c>)
 800df0c:	f240 42be 	movw	r2, #1214	; 0x4be
 800df10:	498c      	ldr	r1, [pc, #560]	; (800e144 <tcp_slowtmr+0x270>)
 800df12:	488d      	ldr	r0, [pc, #564]	; (800e148 <tcp_slowtmr+0x274>)
 800df14:	f009 ffd8 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d106      	bne.n	800df2e <tcp_slowtmr+0x5a>
 800df20:	4b87      	ldr	r3, [pc, #540]	; (800e140 <tcp_slowtmr+0x26c>)
 800df22:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800df26:	4989      	ldr	r1, [pc, #548]	; (800e14c <tcp_slowtmr+0x278>)
 800df28:	4887      	ldr	r0, [pc, #540]	; (800e148 <tcp_slowtmr+0x274>)
 800df2a:	f009 ffcd 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	7d1b      	ldrb	r3, [r3, #20]
 800df32:	2b0a      	cmp	r3, #10
 800df34:	d106      	bne.n	800df44 <tcp_slowtmr+0x70>
 800df36:	4b82      	ldr	r3, [pc, #520]	; (800e140 <tcp_slowtmr+0x26c>)
 800df38:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800df3c:	4984      	ldr	r1, [pc, #528]	; (800e150 <tcp_slowtmr+0x27c>)
 800df3e:	4882      	ldr	r0, [pc, #520]	; (800e148 <tcp_slowtmr+0x274>)
 800df40:	f009 ffc2 	bl	8017ec8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	7f9a      	ldrb	r2, [r3, #30]
 800df48:	4b7b      	ldr	r3, [pc, #492]	; (800e138 <tcp_slowtmr+0x264>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d105      	bne.n	800df5c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800df50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800df5a:	e272      	b.n	800e442 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800df5c:	4b76      	ldr	r3, [pc, #472]	; (800e138 <tcp_slowtmr+0x264>)
 800df5e:	781a      	ldrb	r2, [r3, #0]
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800df70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df72:	7d1b      	ldrb	r3, [r3, #20]
 800df74:	2b02      	cmp	r3, #2
 800df76:	d10a      	bne.n	800df8e <tcp_slowtmr+0xba>
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df7e:	2b05      	cmp	r3, #5
 800df80:	d905      	bls.n	800df8e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800df82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df86:	3301      	adds	r3, #1
 800df88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df8c:	e11e      	b.n	800e1cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df94:	2b0b      	cmp	r3, #11
 800df96:	d905      	bls.n	800dfa4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800df98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df9c:	3301      	adds	r3, #1
 800df9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfa2:	e113      	b.n	800e1cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d075      	beq.n	800e09a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d006      	beq.n	800dfc4 <tcp_slowtmr+0xf0>
 800dfb6:	4b62      	ldr	r3, [pc, #392]	; (800e140 <tcp_slowtmr+0x26c>)
 800dfb8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dfbc:	4965      	ldr	r1, [pc, #404]	; (800e154 <tcp_slowtmr+0x280>)
 800dfbe:	4862      	ldr	r0, [pc, #392]	; (800e148 <tcp_slowtmr+0x274>)
 800dfc0:	f009 ff82 	bl	8017ec8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d106      	bne.n	800dfda <tcp_slowtmr+0x106>
 800dfcc:	4b5c      	ldr	r3, [pc, #368]	; (800e140 <tcp_slowtmr+0x26c>)
 800dfce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dfd2:	4961      	ldr	r1, [pc, #388]	; (800e158 <tcp_slowtmr+0x284>)
 800dfd4:	485c      	ldr	r0, [pc, #368]	; (800e148 <tcp_slowtmr+0x274>)
 800dfd6:	f009 ff77 	bl	8017ec8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dfe0:	2b0b      	cmp	r3, #11
 800dfe2:	d905      	bls.n	800dff0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dfe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfe8:	3301      	adds	r3, #1
 800dfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfee:	e0ed      	b.n	800e1cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dff6:	3b01      	subs	r3, #1
 800dff8:	4a58      	ldr	r2, [pc, #352]	; (800e15c <tcp_slowtmr+0x288>)
 800dffa:	5cd3      	ldrb	r3, [r2, r3]
 800dffc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e004:	7c7a      	ldrb	r2, [r7, #17]
 800e006:	429a      	cmp	r2, r3
 800e008:	d907      	bls.n	800e01a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e010:	3301      	adds	r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e020:	7c7a      	ldrb	r2, [r7, #17]
 800e022:	429a      	cmp	r2, r3
 800e024:	f200 80d2 	bhi.w	800e1cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e028:	2301      	movs	r3, #1
 800e02a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e032:	2b00      	cmp	r3, #0
 800e034:	d108      	bne.n	800e048 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e036:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e038:	f004 fc26 	bl	8012888 <tcp_zero_window_probe>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d014      	beq.n	800e06c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e042:	2300      	movs	r3, #0
 800e044:	623b      	str	r3, [r7, #32]
 800e046:	e011      	b.n	800e06c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e04e:	4619      	mov	r1, r3
 800e050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e052:	f003 faeb 	bl	801162c <tcp_split_unsent_seg>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d107      	bne.n	800e06c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e05c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e05e:	f003 fd6b 	bl	8011b38 <tcp_output>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e068:	2300      	movs	r3, #0
 800e06a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e06c:	6a3b      	ldr	r3, [r7, #32]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f000 80ac 	beq.w	800e1cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e076:	2200      	movs	r2, #0
 800e078:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e082:	2b06      	cmp	r3, #6
 800e084:	f200 80a2 	bhi.w	800e1cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e08e:	3301      	adds	r3, #1
 800e090:	b2da      	uxtb	r2, r3
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e098:	e098      	b.n	800e1cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	db0f      	blt.n	800e0c4 <tcp_slowtmr+0x1f0>
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d008      	beq.n	800e0c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	b21a      	sxth	r2, r3
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	db7b      	blt.n	800e1cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e0d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0d6:	f004 f821 	bl	801211c <tcp_rexmit_rto_prepare>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d007      	beq.n	800e0f0 <tcp_slowtmr+0x21c>
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d171      	bne.n	800e1cc <tcp_slowtmr+0x2f8>
 800e0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d06d      	beq.n	800e1cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d03a      	beq.n	800e16e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0fe:	2b0c      	cmp	r3, #12
 800e100:	bf28      	it	cs
 800e102:	230c      	movcs	r3, #12
 800e104:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e10c:	10db      	asrs	r3, r3, #3
 800e10e:	b21b      	sxth	r3, r3
 800e110:	461a      	mov	r2, r3
 800e112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e118:	4413      	add	r3, r2
 800e11a:	7efa      	ldrb	r2, [r7, #27]
 800e11c:	4910      	ldr	r1, [pc, #64]	; (800e160 <tcp_slowtmr+0x28c>)
 800e11e:	5c8a      	ldrb	r2, [r1, r2]
 800e120:	4093      	lsls	r3, r2
 800e122:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e12a:	4293      	cmp	r3, r2
 800e12c:	dc1a      	bgt.n	800e164 <tcp_slowtmr+0x290>
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	b21a      	sxth	r2, r3
 800e132:	e019      	b.n	800e168 <tcp_slowtmr+0x294>
 800e134:	2000ce08 	.word	0x2000ce08
 800e138:	20004ace 	.word	0x20004ace
 800e13c:	2000ce04 	.word	0x2000ce04
 800e140:	08019984 	.word	0x08019984
 800e144:	08019cc8 	.word	0x08019cc8
 800e148:	080199c8 	.word	0x080199c8
 800e14c:	08019cf4 	.word	0x08019cf4
 800e150:	08019d20 	.word	0x08019d20
 800e154:	08019d50 	.word	0x08019d50
 800e158:	08019d84 	.word	0x08019d84
 800e15c:	0801be88 	.word	0x0801be88
 800e160:	0801be78 	.word	0x0801be78
 800e164:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	2200      	movs	r2, #0
 800e172:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e176:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e180:	4293      	cmp	r3, r2
 800e182:	bf28      	it	cs
 800e184:	4613      	movcs	r3, r2
 800e186:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e188:	8a7b      	ldrh	r3, [r7, #18]
 800e18a:	085b      	lsrs	r3, r3, #1
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e19e:	005b      	lsls	r3, r3, #1
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d206      	bcs.n	800e1b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	b29a      	uxth	r2, r3
 800e1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e1c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1c8:	f004 f818 	bl	80121fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	7d1b      	ldrb	r3, [r3, #20]
 800e1d0:	2b06      	cmp	r3, #6
 800e1d2:	d111      	bne.n	800e1f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	8b5b      	ldrh	r3, [r3, #26]
 800e1d8:	f003 0310 	and.w	r3, r3, #16
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00b      	beq.n	800e1f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1e0:	4b9d      	ldr	r3, [pc, #628]	; (800e458 <tcp_slowtmr+0x584>)
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	6a1b      	ldr	r3, [r3, #32]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	2b28      	cmp	r3, #40	; 0x28
 800e1ec:	d904      	bls.n	800e1f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	7a5b      	ldrb	r3, [r3, #9]
 800e1fc:	f003 0308 	and.w	r3, r3, #8
 800e200:	2b00      	cmp	r3, #0
 800e202:	d04c      	beq.n	800e29e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e206:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e208:	2b04      	cmp	r3, #4
 800e20a:	d003      	beq.n	800e214 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e210:	2b07      	cmp	r3, #7
 800e212:	d144      	bne.n	800e29e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e214:	4b90      	ldr	r3, [pc, #576]	; (800e458 <tcp_slowtmr+0x584>)
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	6a1b      	ldr	r3, [r3, #32]
 800e21c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e224:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e228:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e22c:	498b      	ldr	r1, [pc, #556]	; (800e45c <tcp_slowtmr+0x588>)
 800e22e:	fba1 1303 	umull	r1, r3, r1, r3
 800e232:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e234:	429a      	cmp	r2, r3
 800e236:	d90a      	bls.n	800e24e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e23c:	3301      	adds	r3, #1
 800e23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e242:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e246:	3301      	adds	r3, #1
 800e248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e24c:	e027      	b.n	800e29e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e24e:	4b82      	ldr	r3, [pc, #520]	; (800e458 <tcp_slowtmr+0x584>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e260:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e264:	4618      	mov	r0, r3
 800e266:	4b7e      	ldr	r3, [pc, #504]	; (800e460 <tcp_slowtmr+0x58c>)
 800e268:	fb03 f300 	mul.w	r3, r3, r0
 800e26c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e26e:	497b      	ldr	r1, [pc, #492]	; (800e45c <tcp_slowtmr+0x588>)
 800e270:	fba1 1303 	umull	r1, r3, r1, r3
 800e274:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e276:	429a      	cmp	r2, r3
 800e278:	d911      	bls.n	800e29e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e27a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e27c:	f004 fac4 	bl	8012808 <tcp_keepalive>
 800e280:	4603      	mov	r3, r0
 800e282:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e286:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d107      	bne.n	800e29e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e294:	3301      	adds	r3, #1
 800e296:	b2da      	uxtb	r2, r3
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d011      	beq.n	800e2ca <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e2a6:	4b6c      	ldr	r3, [pc, #432]	; (800e458 <tcp_slowtmr+0x584>)
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	6a1b      	ldr	r3, [r3, #32]
 800e2ae:	1ad2      	subs	r2, r2, r3
 800e2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	005b      	lsls	r3, r3, #1
 800e2bc:	440b      	add	r3, r1
 800e2be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d302      	bcc.n	800e2ca <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e2c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2c6:	f000 fddb 	bl	800ee80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	7d1b      	ldrb	r3, [r3, #20]
 800e2ce:	2b03      	cmp	r3, #3
 800e2d0:	d10b      	bne.n	800e2ea <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2d2:	4b61      	ldr	r3, [pc, #388]	; (800e458 <tcp_slowtmr+0x584>)
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	1ad3      	subs	r3, r2, r3
 800e2dc:	2b28      	cmp	r3, #40	; 0x28
 800e2de:	d904      	bls.n	800e2ea <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ec:	7d1b      	ldrb	r3, [r3, #20]
 800e2ee:	2b09      	cmp	r3, #9
 800e2f0:	d10b      	bne.n	800e30a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e2f2:	4b59      	ldr	r3, [pc, #356]	; (800e458 <tcp_slowtmr+0x584>)
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	2bf0      	cmp	r3, #240	; 0xf0
 800e2fe:	d904      	bls.n	800e30a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e304:	3301      	adds	r3, #1
 800e306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e30a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d060      	beq.n	800e3d4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e318:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e31a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e31c:	f000 fbfc 	bl	800eb18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	2b00      	cmp	r3, #0
 800e324:	d010      	beq.n	800e348 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e326:	4b4f      	ldr	r3, [pc, #316]	; (800e464 <tcp_slowtmr+0x590>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d106      	bne.n	800e33e <tcp_slowtmr+0x46a>
 800e330:	4b4d      	ldr	r3, [pc, #308]	; (800e468 <tcp_slowtmr+0x594>)
 800e332:	f240 526d 	movw	r2, #1389	; 0x56d
 800e336:	494d      	ldr	r1, [pc, #308]	; (800e46c <tcp_slowtmr+0x598>)
 800e338:	484d      	ldr	r0, [pc, #308]	; (800e470 <tcp_slowtmr+0x59c>)
 800e33a:	f009 fdc5 	bl	8017ec8 <iprintf>
        prev->next = pcb->next;
 800e33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e340:	68da      	ldr	r2, [r3, #12]
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	60da      	str	r2, [r3, #12]
 800e346:	e00f      	b.n	800e368 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e348:	4b46      	ldr	r3, [pc, #280]	; (800e464 <tcp_slowtmr+0x590>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e34e:	429a      	cmp	r2, r3
 800e350:	d006      	beq.n	800e360 <tcp_slowtmr+0x48c>
 800e352:	4b45      	ldr	r3, [pc, #276]	; (800e468 <tcp_slowtmr+0x594>)
 800e354:	f240 5271 	movw	r2, #1393	; 0x571
 800e358:	4946      	ldr	r1, [pc, #280]	; (800e474 <tcp_slowtmr+0x5a0>)
 800e35a:	4845      	ldr	r0, [pc, #276]	; (800e470 <tcp_slowtmr+0x59c>)
 800e35c:	f009 fdb4 	bl	8017ec8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	4a3f      	ldr	r2, [pc, #252]	; (800e464 <tcp_slowtmr+0x590>)
 800e366:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d013      	beq.n	800e398 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e372:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e378:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37c:	3304      	adds	r3, #4
 800e37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e380:	8ad2      	ldrh	r2, [r2, #22]
 800e382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e384:	8b09      	ldrh	r1, [r1, #24]
 800e386:	9102      	str	r1, [sp, #8]
 800e388:	9201      	str	r2, [sp, #4]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	462b      	mov	r3, r5
 800e38e:	4622      	mov	r2, r4
 800e390:	4601      	mov	r1, r0
 800e392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e394:	f004 f984 	bl	80126a0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	7d1b      	ldrb	r3, [r3, #20]
 800e3a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e3ae:	6838      	ldr	r0, [r7, #0]
 800e3b0:	f7ff f9f2 	bl	800d798 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e3b4:	4b30      	ldr	r3, [pc, #192]	; (800e478 <tcp_slowtmr+0x5a4>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <tcp_slowtmr+0x4f6>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f06f 010c 	mvn.w	r1, #12
 800e3c6:	68b8      	ldr	r0, [r7, #8]
 800e3c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e3ca:	4b2b      	ldr	r3, [pc, #172]	; (800e478 <tcp_slowtmr+0x5a4>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d037      	beq.n	800e442 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e3d2:	e590      	b.n	800def6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	7f1b      	ldrb	r3, [r3, #28]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	b2da      	uxtb	r2, r3
 800e3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	7f1a      	ldrb	r2, [r3, #28]
 800e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f0:	7f5b      	ldrb	r3, [r3, #29]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d325      	bcc.n	800e442 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e3fc:	4b1e      	ldr	r3, [pc, #120]	; (800e478 <tcp_slowtmr+0x5a4>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00b      	beq.n	800e424 <tcp_slowtmr+0x550>
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e414:	6912      	ldr	r2, [r2, #16]
 800e416:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e418:	4610      	mov	r0, r2
 800e41a:	4798      	blx	r3
 800e41c:	4603      	mov	r3, r0
 800e41e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e422:	e002      	b.n	800e42a <tcp_slowtmr+0x556>
 800e424:	2300      	movs	r3, #0
 800e426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e42a:	4b13      	ldr	r3, [pc, #76]	; (800e478 <tcp_slowtmr+0x5a4>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d000      	beq.n	800e434 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e432:	e560      	b.n	800def6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e434:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e43e:	f003 fb7b 	bl	8011b38 <tcp_output>
  while (pcb != NULL) {
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	2b00      	cmp	r3, #0
 800e446:	f47f ad5c 	bne.w	800df02 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e44a:	2300      	movs	r3, #0
 800e44c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e44e:	4b0b      	ldr	r3, [pc, #44]	; (800e47c <tcp_slowtmr+0x5a8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e454:	e067      	b.n	800e526 <tcp_slowtmr+0x652>
 800e456:	bf00      	nop
 800e458:	2000ce08 	.word	0x2000ce08
 800e45c:	10624dd3 	.word	0x10624dd3
 800e460:	000124f8 	.word	0x000124f8
 800e464:	2000ce04 	.word	0x2000ce04
 800e468:	08019984 	.word	0x08019984
 800e46c:	08019dbc 	.word	0x08019dbc
 800e470:	080199c8 	.word	0x080199c8
 800e474:	08019de8 	.word	0x08019de8
 800e478:	2000ce00 	.word	0x2000ce00
 800e47c:	2000ce14 	.word	0x2000ce14
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e482:	7d1b      	ldrb	r3, [r3, #20]
 800e484:	2b0a      	cmp	r3, #10
 800e486:	d006      	beq.n	800e496 <tcp_slowtmr+0x5c2>
 800e488:	4b2b      	ldr	r3, [pc, #172]	; (800e538 <tcp_slowtmr+0x664>)
 800e48a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e48e:	492b      	ldr	r1, [pc, #172]	; (800e53c <tcp_slowtmr+0x668>)
 800e490:	482b      	ldr	r0, [pc, #172]	; (800e540 <tcp_slowtmr+0x66c>)
 800e492:	f009 fd19 	bl	8017ec8 <iprintf>
    pcb_remove = 0;
 800e496:	2300      	movs	r3, #0
 800e498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e49c:	4b29      	ldr	r3, [pc, #164]	; (800e544 <tcp_slowtmr+0x670>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	6a1b      	ldr	r3, [r3, #32]
 800e4a4:	1ad3      	subs	r3, r2, r3
 800e4a6:	2bf0      	cmp	r3, #240	; 0xf0
 800e4a8:	d904      	bls.n	800e4b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d02f      	beq.n	800e51c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4be:	f000 fb2b 	bl	800eb18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d010      	beq.n	800e4ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e4c8:	4b1f      	ldr	r3, [pc, #124]	; (800e548 <tcp_slowtmr+0x674>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d106      	bne.n	800e4e0 <tcp_slowtmr+0x60c>
 800e4d2:	4b19      	ldr	r3, [pc, #100]	; (800e538 <tcp_slowtmr+0x664>)
 800e4d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800e4d8:	491c      	ldr	r1, [pc, #112]	; (800e54c <tcp_slowtmr+0x678>)
 800e4da:	4819      	ldr	r0, [pc, #100]	; (800e540 <tcp_slowtmr+0x66c>)
 800e4dc:	f009 fcf4 	bl	8017ec8 <iprintf>
        prev->next = pcb->next;
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	60da      	str	r2, [r3, #12]
 800e4e8:	e00f      	b.n	800e50a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e4ea:	4b17      	ldr	r3, [pc, #92]	; (800e548 <tcp_slowtmr+0x674>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d006      	beq.n	800e502 <tcp_slowtmr+0x62e>
 800e4f4:	4b10      	ldr	r3, [pc, #64]	; (800e538 <tcp_slowtmr+0x664>)
 800e4f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e4fa:	4915      	ldr	r1, [pc, #84]	; (800e550 <tcp_slowtmr+0x67c>)
 800e4fc:	4810      	ldr	r0, [pc, #64]	; (800e540 <tcp_slowtmr+0x66c>)
 800e4fe:	f009 fce3 	bl	8017ec8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	4a10      	ldr	r2, [pc, #64]	; (800e548 <tcp_slowtmr+0x674>)
 800e508:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e514:	69f8      	ldr	r0, [r7, #28]
 800e516:	f7ff f93f 	bl	800d798 <tcp_free>
 800e51a:	e004      	b.n	800e526 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1a9      	bne.n	800e480 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e52c:	bf00      	nop
 800e52e:	bf00      	nop
 800e530:	3730      	adds	r7, #48	; 0x30
 800e532:	46bd      	mov	sp, r7
 800e534:	bdb0      	pop	{r4, r5, r7, pc}
 800e536:	bf00      	nop
 800e538:	08019984 	.word	0x08019984
 800e53c:	08019e14 	.word	0x08019e14
 800e540:	080199c8 	.word	0x080199c8
 800e544:	2000ce08 	.word	0x2000ce08
 800e548:	2000ce14 	.word	0x2000ce14
 800e54c:	08019e44 	.word	0x08019e44
 800e550:	08019e6c 	.word	0x08019e6c

0800e554 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e55a:	4b2d      	ldr	r3, [pc, #180]	; (800e610 <tcp_fasttmr+0xbc>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	3301      	adds	r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	4b2b      	ldr	r3, [pc, #172]	; (800e610 <tcp_fasttmr+0xbc>)
 800e564:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e566:	4b2b      	ldr	r3, [pc, #172]	; (800e614 <tcp_fasttmr+0xc0>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e56c:	e048      	b.n	800e600 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7f9a      	ldrb	r2, [r3, #30]
 800e572:	4b27      	ldr	r3, [pc, #156]	; (800e610 <tcp_fasttmr+0xbc>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	429a      	cmp	r2, r3
 800e578:	d03f      	beq.n	800e5fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e57a:	4b25      	ldr	r3, [pc, #148]	; (800e610 <tcp_fasttmr+0xbc>)
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8b5b      	ldrh	r3, [r3, #26]
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d010      	beq.n	800e5b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	8b5b      	ldrh	r3, [r3, #26]
 800e592:	f043 0302 	orr.w	r3, r3, #2
 800e596:	b29a      	uxth	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f003 facb 	bl	8011b38 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	8b5b      	ldrh	r3, [r3, #26]
 800e5a6:	f023 0303 	bic.w	r3, r3, #3
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	8b5b      	ldrh	r3, [r3, #26]
 800e5b4:	f003 0308 	and.w	r3, r3, #8
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d009      	beq.n	800e5d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	8b5b      	ldrh	r3, [r3, #26]
 800e5c0:	f023 0308 	bic.w	r3, r3, #8
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff fa78 	bl	800dac0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e5de:	4b0e      	ldr	r3, [pc, #56]	; (800e618 <tcp_fasttmr+0xc4>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f819 	bl	800e61c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e5ea:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <tcp_fasttmr+0xc4>)
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d000      	beq.n	800e5f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e5f2:	e7b8      	b.n	800e566 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	607b      	str	r3, [r7, #4]
 800e5f8:	e002      	b.n	800e600 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1b3      	bne.n	800e56e <tcp_fasttmr+0x1a>
    }
  }
}
 800e606:	bf00      	nop
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20004ace 	.word	0x20004ace
 800e614:	2000ce04 	.word	0x2000ce04
 800e618:	2000ce00 	.word	0x2000ce00

0800e61c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e61c:	b590      	push	{r4, r7, lr}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d109      	bne.n	800e63e <tcp_process_refused_data+0x22>
 800e62a:	4b37      	ldr	r3, [pc, #220]	; (800e708 <tcp_process_refused_data+0xec>)
 800e62c:	f240 6209 	movw	r2, #1545	; 0x609
 800e630:	4936      	ldr	r1, [pc, #216]	; (800e70c <tcp_process_refused_data+0xf0>)
 800e632:	4837      	ldr	r0, [pc, #220]	; (800e710 <tcp_process_refused_data+0xf4>)
 800e634:	f009 fc48 	bl	8017ec8 <iprintf>
 800e638:	f06f 030f 	mvn.w	r3, #15
 800e63c:	e060      	b.n	800e700 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e642:	7b5b      	ldrb	r3, [r3, #13]
 800e644:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e64a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00b      	beq.n	800e674 <tcp_process_refused_data+0x58>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6918      	ldr	r0, [r3, #16]
 800e666:	2300      	movs	r3, #0
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	6879      	ldr	r1, [r7, #4]
 800e66c:	47a0      	blx	r4
 800e66e:	4603      	mov	r3, r0
 800e670:	73fb      	strb	r3, [r7, #15]
 800e672:	e007      	b.n	800e684 <tcp_process_refused_data+0x68>
 800e674:	2300      	movs	r3, #0
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	6879      	ldr	r1, [r7, #4]
 800e67a:	2000      	movs	r0, #0
 800e67c:	f000 f8a4 	bl	800e7c8 <tcp_recv_null>
 800e680:	4603      	mov	r3, r0
 800e682:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d12a      	bne.n	800e6e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e68c:	7bbb      	ldrb	r3, [r7, #14]
 800e68e:	f003 0320 	and.w	r3, r3, #32
 800e692:	2b00      	cmp	r3, #0
 800e694:	d033      	beq.n	800e6fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e69a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e69e:	d005      	beq.n	800e6ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6a4:	3301      	adds	r3, #1
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00b      	beq.n	800e6ce <tcp_process_refused_data+0xb2>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6918      	ldr	r0, [r3, #16]
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	47a0      	blx	r4
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	73fb      	strb	r3, [r7, #15]
 800e6cc:	e001      	b.n	800e6d2 <tcp_process_refused_data+0xb6>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e6d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d6:	f113 0f0d 	cmn.w	r3, #13
 800e6da:	d110      	bne.n	800e6fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e6dc:	f06f 030c 	mvn.w	r3, #12
 800e6e0:	e00e      	b.n	800e700 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e6e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e6:	f113 0f0d 	cmn.w	r3, #13
 800e6ea:	d102      	bne.n	800e6f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e6ec:	f06f 030c 	mvn.w	r3, #12
 800e6f0:	e006      	b.n	800e700 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e6f8:	f06f 0304 	mvn.w	r3, #4
 800e6fc:	e000      	b.n	800e700 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e6fe:	2300      	movs	r3, #0
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	bd90      	pop	{r4, r7, pc}
 800e708:	08019984 	.word	0x08019984
 800e70c:	08019e94 	.word	0x08019e94
 800e710:	080199c8 	.word	0x080199c8

0800e714 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e71c:	e007      	b.n	800e72e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 f80a 	bl	800e73e <tcp_seg_free>
    seg = next;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d1f4      	bne.n	800e71e <tcp_segs_free+0xa>
  }
}
 800e734:	bf00      	nop
 800e736:	bf00      	nop
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b082      	sub	sp, #8
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00c      	beq.n	800e766 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d004      	beq.n	800e75e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f7fe fd61 	bl	800d220 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	2003      	movs	r0, #3
 800e762:	f7fd fead 	bl	800c4c0 <memp_free>
  }
}
 800e766:	bf00      	nop
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
	...

0800e770 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d106      	bne.n	800e78c <tcp_seg_copy+0x1c>
 800e77e:	4b0f      	ldr	r3, [pc, #60]	; (800e7bc <tcp_seg_copy+0x4c>)
 800e780:	f240 6282 	movw	r2, #1666	; 0x682
 800e784:	490e      	ldr	r1, [pc, #56]	; (800e7c0 <tcp_seg_copy+0x50>)
 800e786:	480f      	ldr	r0, [pc, #60]	; (800e7c4 <tcp_seg_copy+0x54>)
 800e788:	f009 fb9e 	bl	8017ec8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e78c:	2003      	movs	r0, #3
 800e78e:	f7fd fe45 	bl	800c41c <memp_malloc>
 800e792:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d101      	bne.n	800e79e <tcp_seg_copy+0x2e>
    return NULL;
 800e79a:	2300      	movs	r3, #0
 800e79c:	e00a      	b.n	800e7b4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e79e:	2210      	movs	r2, #16
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f009 fb1f 	bl	8017de6 <memcpy>
  pbuf_ref(cseg->p);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fddd 	bl	800d36c <pbuf_ref>
  return cseg;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	08019984 	.word	0x08019984
 800e7c0:	08019ed8 	.word	0x08019ed8
 800e7c4:	080199c8 	.word	0x080199c8

0800e7c8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
 800e7d4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d109      	bne.n	800e7f0 <tcp_recv_null+0x28>
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <tcp_recv_null+0x60>)
 800e7de:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e7e2:	4912      	ldr	r1, [pc, #72]	; (800e82c <tcp_recv_null+0x64>)
 800e7e4:	4812      	ldr	r0, [pc, #72]	; (800e830 <tcp_recv_null+0x68>)
 800e7e6:	f009 fb6f 	bl	8017ec8 <iprintf>
 800e7ea:	f06f 030f 	mvn.w	r3, #15
 800e7ee:	e016      	b.n	800e81e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d009      	beq.n	800e80a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	891b      	ldrh	r3, [r3, #8]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	68b8      	ldr	r0, [r7, #8]
 800e7fe:	f7ff fb19 	bl	800de34 <tcp_recved>
    pbuf_free(p);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f7fe fd0c 	bl	800d220 <pbuf_free>
 800e808:	e008      	b.n	800e81c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e80a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d104      	bne.n	800e81c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e812:	68b8      	ldr	r0, [r7, #8]
 800e814:	f7ff f9be 	bl	800db94 <tcp_close>
 800e818:	4603      	mov	r3, r0
 800e81a:	e000      	b.n	800e81e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	08019984 	.word	0x08019984
 800e82c:	08019ef4 	.word	0x08019ef4
 800e830:	080199c8 	.word	0x080199c8

0800e834 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	4603      	mov	r3, r0
 800e83c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e83e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e842:	2b00      	cmp	r3, #0
 800e844:	db01      	blt.n	800e84a <tcp_kill_prio+0x16>
 800e846:	79fb      	ldrb	r3, [r7, #7]
 800e848:	e000      	b.n	800e84c <tcp_kill_prio+0x18>
 800e84a:	237f      	movs	r3, #127	; 0x7f
 800e84c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e84e:	7afb      	ldrb	r3, [r7, #11]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d034      	beq.n	800e8be <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e854:	7afb      	ldrb	r3, [r7, #11]
 800e856:	3b01      	subs	r3, #1
 800e858:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e85e:	2300      	movs	r3, #0
 800e860:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e862:	4b19      	ldr	r3, [pc, #100]	; (800e8c8 <tcp_kill_prio+0x94>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e01f      	b.n	800e8aa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	7d5b      	ldrb	r3, [r3, #21]
 800e86e:	7afa      	ldrb	r2, [r7, #11]
 800e870:	429a      	cmp	r2, r3
 800e872:	d80c      	bhi.n	800e88e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e878:	7afa      	ldrb	r2, [r7, #11]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d112      	bne.n	800e8a4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e87e:	4b13      	ldr	r3, [pc, #76]	; (800e8cc <tcp_kill_prio+0x98>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	6a1b      	ldr	r3, [r3, #32]
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d80a      	bhi.n	800e8a4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e88e:	4b0f      	ldr	r3, [pc, #60]	; (800e8cc <tcp_kill_prio+0x98>)
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	6a1b      	ldr	r3, [r3, #32]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	7d5b      	ldrb	r3, [r3, #21]
 800e8a2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	617b      	str	r3, [r7, #20]
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1dc      	bne.n	800e86a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d004      	beq.n	800e8c0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8b6:	6938      	ldr	r0, [r7, #16]
 800e8b8:	f7ff fa56 	bl	800dd68 <tcp_abort>
 800e8bc:	e000      	b.n	800e8c0 <tcp_kill_prio+0x8c>
    return;
 800e8be:	bf00      	nop
  }
}
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	2000ce04 	.word	0x2000ce04
 800e8cc:	2000ce08 	.word	0x2000ce08

0800e8d0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e8da:	79fb      	ldrb	r3, [r7, #7]
 800e8dc:	2b08      	cmp	r3, #8
 800e8de:	d009      	beq.n	800e8f4 <tcp_kill_state+0x24>
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	2b09      	cmp	r3, #9
 800e8e4:	d006      	beq.n	800e8f4 <tcp_kill_state+0x24>
 800e8e6:	4b1a      	ldr	r3, [pc, #104]	; (800e950 <tcp_kill_state+0x80>)
 800e8e8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e8ec:	4919      	ldr	r1, [pc, #100]	; (800e954 <tcp_kill_state+0x84>)
 800e8ee:	481a      	ldr	r0, [pc, #104]	; (800e958 <tcp_kill_state+0x88>)
 800e8f0:	f009 faea 	bl	8017ec8 <iprintf>

  inactivity = 0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8fc:	4b17      	ldr	r3, [pc, #92]	; (800e95c <tcp_kill_state+0x8c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	617b      	str	r3, [r7, #20]
 800e902:	e017      	b.n	800e934 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	7d1b      	ldrb	r3, [r3, #20]
 800e908:	79fa      	ldrb	r2, [r7, #7]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d10f      	bne.n	800e92e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e90e:	4b14      	ldr	r3, [pc, #80]	; (800e960 <tcp_kill_state+0x90>)
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d807      	bhi.n	800e92e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e91e:	4b10      	ldr	r3, [pc, #64]	; (800e960 <tcp_kill_state+0x90>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	617b      	str	r3, [r7, #20]
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e4      	bne.n	800e904 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e940:	2100      	movs	r1, #0
 800e942:	6938      	ldr	r0, [r7, #16]
 800e944:	f7ff f952 	bl	800dbec <tcp_abandon>
  }
}
 800e948:	bf00      	nop
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	08019984 	.word	0x08019984
 800e954:	08019f10 	.word	0x08019f10
 800e958:	080199c8 	.word	0x080199c8
 800e95c:	2000ce04 	.word	0x2000ce04
 800e960:	2000ce08 	.word	0x2000ce08

0800e964 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e972:	4b12      	ldr	r3, [pc, #72]	; (800e9bc <tcp_kill_timewait+0x58>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	e012      	b.n	800e9a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e97a:	4b11      	ldr	r3, [pc, #68]	; (800e9c0 <tcp_kill_timewait+0x5c>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6a1b      	ldr	r3, [r3, #32]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d807      	bhi.n	800e99a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e98a:	4b0d      	ldr	r3, [pc, #52]	; (800e9c0 <tcp_kill_timewait+0x5c>)
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	68db      	ldr	r3, [r3, #12]
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d1e9      	bne.n	800e97a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9ac:	68b8      	ldr	r0, [r7, #8]
 800e9ae:	f7ff f9db 	bl	800dd68 <tcp_abort>
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	2000ce14 	.word	0x2000ce14
 800e9c0:	2000ce08 	.word	0x2000ce08

0800e9c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e9ca:	4b10      	ldr	r3, [pc, #64]	; (800ea0c <tcp_handle_closepend+0x48>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9d0:	e014      	b.n	800e9fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8b5b      	ldrh	r3, [r3, #26]
 800e9dc:	f003 0308 	and.w	r3, r3, #8
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d009      	beq.n	800e9f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	8b5b      	ldrh	r3, [r3, #26]
 800e9e8:	f023 0308 	bic.w	r3, r3, #8
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff f864 	bl	800dac0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d1e7      	bne.n	800e9d2 <tcp_handle_closepend+0xe>
  }
}
 800ea02:	bf00      	nop
 800ea04:	bf00      	nop
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	2000ce04 	.word	0x2000ce04

0800ea10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	f7fd fcfe 	bl	800c41c <memp_malloc>
 800ea20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d126      	bne.n	800ea76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ea28:	f7ff ffcc 	bl	800e9c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ea2c:	f7ff ff9a 	bl	800e964 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea30:	2001      	movs	r0, #1
 800ea32:	f7fd fcf3 	bl	800c41c <memp_malloc>
 800ea36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d11b      	bne.n	800ea76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ea3e:	2009      	movs	r0, #9
 800ea40:	f7ff ff46 	bl	800e8d0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea44:	2001      	movs	r0, #1
 800ea46:	f7fd fce9 	bl	800c41c <memp_malloc>
 800ea4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d111      	bne.n	800ea76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ea52:	2008      	movs	r0, #8
 800ea54:	f7ff ff3c 	bl	800e8d0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea58:	2001      	movs	r0, #1
 800ea5a:	f7fd fcdf 	bl	800c41c <memp_malloc>
 800ea5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d107      	bne.n	800ea76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ea66:	79fb      	ldrb	r3, [r7, #7]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7ff fee3 	bl	800e834 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea6e:	2001      	movs	r0, #1
 800ea70:	f7fd fcd4 	bl	800c41c <memp_malloc>
 800ea74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d03f      	beq.n	800eafc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ea7c:	229c      	movs	r2, #156	; 0x9c
 800ea7e:	2100      	movs	r1, #0
 800ea80:	68f8      	ldr	r0, [r7, #12]
 800ea82:	f009 f9be 	bl	8017e02 <memset>
    pcb->prio = prio;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	79fa      	ldrb	r2, [r7, #7]
 800ea8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ea92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ea9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	22ff      	movs	r2, #255	; 0xff
 800eaaa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eab2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2206      	movs	r2, #6
 800eab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2206      	movs	r2, #6
 800eac0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eac8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2201      	movs	r2, #1
 800eace:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ead2:	4b0d      	ldr	r3, [pc, #52]	; (800eb08 <tcp_alloc+0xf8>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eada:	4b0c      	ldr	r3, [pc, #48]	; (800eb0c <tcp_alloc+0xfc>)
 800eadc:	781a      	ldrb	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eae8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	4a08      	ldr	r2, [pc, #32]	; (800eb10 <tcp_alloc+0x100>)
 800eaf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	4a07      	ldr	r2, [pc, #28]	; (800eb14 <tcp_alloc+0x104>)
 800eaf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eafc:	68fb      	ldr	r3, [r7, #12]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	2000ce08 	.word	0x2000ce08
 800eb0c:	20004ace 	.word	0x20004ace
 800eb10:	0800e7c9 	.word	0x0800e7c9
 800eb14:	006ddd00 	.word	0x006ddd00

0800eb18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d107      	bne.n	800eb36 <tcp_pcb_purge+0x1e>
 800eb26:	4b21      	ldr	r3, [pc, #132]	; (800ebac <tcp_pcb_purge+0x94>)
 800eb28:	f640 0251 	movw	r2, #2129	; 0x851
 800eb2c:	4920      	ldr	r1, [pc, #128]	; (800ebb0 <tcp_pcb_purge+0x98>)
 800eb2e:	4821      	ldr	r0, [pc, #132]	; (800ebb4 <tcp_pcb_purge+0x9c>)
 800eb30:	f009 f9ca 	bl	8017ec8 <iprintf>
 800eb34:	e037      	b.n	800eba6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7d1b      	ldrb	r3, [r3, #20]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d033      	beq.n	800eba6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eb42:	2b0a      	cmp	r3, #10
 800eb44:	d02f      	beq.n	800eba6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d02b      	beq.n	800eba6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d007      	beq.n	800eb66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fe fb60 	bl	800d220 <pbuf_free>
      pcb->refused_data = NULL;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2200      	movs	r2, #0
 800eb64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d002      	beq.n	800eb74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f986 	bl	800ee80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fdc7 	bl	800e714 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff fdc2 	bl	800e714 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2200      	movs	r2, #0
 800eb94:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eba6:	3708      	adds	r7, #8
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	08019984 	.word	0x08019984
 800ebb0:	08019fd0 	.word	0x08019fd0
 800ebb4:	080199c8 	.word	0x080199c8

0800ebb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d106      	bne.n	800ebd6 <tcp_pcb_remove+0x1e>
 800ebc8:	4b3e      	ldr	r3, [pc, #248]	; (800ecc4 <tcp_pcb_remove+0x10c>)
 800ebca:	f640 0283 	movw	r2, #2179	; 0x883
 800ebce:	493e      	ldr	r1, [pc, #248]	; (800ecc8 <tcp_pcb_remove+0x110>)
 800ebd0:	483e      	ldr	r0, [pc, #248]	; (800eccc <tcp_pcb_remove+0x114>)
 800ebd2:	f009 f979 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d106      	bne.n	800ebea <tcp_pcb_remove+0x32>
 800ebdc:	4b39      	ldr	r3, [pc, #228]	; (800ecc4 <tcp_pcb_remove+0x10c>)
 800ebde:	f640 0284 	movw	r2, #2180	; 0x884
 800ebe2:	493b      	ldr	r1, [pc, #236]	; (800ecd0 <tcp_pcb_remove+0x118>)
 800ebe4:	4839      	ldr	r0, [pc, #228]	; (800eccc <tcp_pcb_remove+0x114>)
 800ebe6:	f009 f96f 	bl	8017ec8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	429a      	cmp	r2, r3
 800ebf2:	d105      	bne.n	800ec00 <tcp_pcb_remove+0x48>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	68da      	ldr	r2, [r3, #12]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	e013      	b.n	800ec28 <tcp_pcb_remove+0x70>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	60fb      	str	r3, [r7, #12]
 800ec06:	e00c      	b.n	800ec22 <tcp_pcb_remove+0x6a>
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	683a      	ldr	r2, [r7, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d104      	bne.n	800ec1c <tcp_pcb_remove+0x64>
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	68da      	ldr	r2, [r3, #12]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	60da      	str	r2, [r3, #12]
 800ec1a:	e005      	b.n	800ec28 <tcp_pcb_remove+0x70>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d1ef      	bne.n	800ec08 <tcp_pcb_remove+0x50>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ec2e:	6838      	ldr	r0, [r7, #0]
 800ec30:	f7ff ff72 	bl	800eb18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	7d1b      	ldrb	r3, [r3, #20]
 800ec38:	2b0a      	cmp	r3, #10
 800ec3a:	d013      	beq.n	800ec64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d00f      	beq.n	800ec64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	8b5b      	ldrh	r3, [r3, #26]
 800ec48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d009      	beq.n	800ec64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	8b5b      	ldrh	r3, [r3, #26]
 800ec54:	f043 0302 	orr.w	r3, r3, #2
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ec5e:	6838      	ldr	r0, [r7, #0]
 800ec60:	f002 ff6a 	bl	8011b38 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	7d1b      	ldrb	r3, [r3, #20]
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d020      	beq.n	800ecae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d006      	beq.n	800ec82 <tcp_pcb_remove+0xca>
 800ec74:	4b13      	ldr	r3, [pc, #76]	; (800ecc4 <tcp_pcb_remove+0x10c>)
 800ec76:	f640 0293 	movw	r2, #2195	; 0x893
 800ec7a:	4916      	ldr	r1, [pc, #88]	; (800ecd4 <tcp_pcb_remove+0x11c>)
 800ec7c:	4813      	ldr	r0, [pc, #76]	; (800eccc <tcp_pcb_remove+0x114>)
 800ec7e:	f009 f923 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d006      	beq.n	800ec98 <tcp_pcb_remove+0xe0>
 800ec8a:	4b0e      	ldr	r3, [pc, #56]	; (800ecc4 <tcp_pcb_remove+0x10c>)
 800ec8c:	f640 0294 	movw	r2, #2196	; 0x894
 800ec90:	4911      	ldr	r1, [pc, #68]	; (800ecd8 <tcp_pcb_remove+0x120>)
 800ec92:	480e      	ldr	r0, [pc, #56]	; (800eccc <tcp_pcb_remove+0x114>)
 800ec94:	f009 f918 	bl	8017ec8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <tcp_pcb_remove+0xf6>
 800eca0:	4b08      	ldr	r3, [pc, #32]	; (800ecc4 <tcp_pcb_remove+0x10c>)
 800eca2:	f640 0296 	movw	r2, #2198	; 0x896
 800eca6:	490d      	ldr	r1, [pc, #52]	; (800ecdc <tcp_pcb_remove+0x124>)
 800eca8:	4808      	ldr	r0, [pc, #32]	; (800eccc <tcp_pcb_remove+0x114>)
 800ecaa:	f009 f90d 	bl	8017ec8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	08019984 	.word	0x08019984
 800ecc8:	08019fec 	.word	0x08019fec
 800eccc:	080199c8 	.word	0x080199c8
 800ecd0:	0801a008 	.word	0x0801a008
 800ecd4:	0801a028 	.word	0x0801a028
 800ecd8:	0801a040 	.word	0x0801a040
 800ecdc:	0801a05c 	.word	0x0801a05c

0800ece0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <tcp_next_iss+0x1c>
 800ecee:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <tcp_next_iss+0x38>)
 800ecf0:	f640 02af 	movw	r2, #2223	; 0x8af
 800ecf4:	4909      	ldr	r1, [pc, #36]	; (800ed1c <tcp_next_iss+0x3c>)
 800ecf6:	480a      	ldr	r0, [pc, #40]	; (800ed20 <tcp_next_iss+0x40>)
 800ecf8:	f009 f8e6 	bl	8017ec8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ecfc:	4b09      	ldr	r3, [pc, #36]	; (800ed24 <tcp_next_iss+0x44>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b09      	ldr	r3, [pc, #36]	; (800ed28 <tcp_next_iss+0x48>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4413      	add	r3, r2
 800ed06:	4a07      	ldr	r2, [pc, #28]	; (800ed24 <tcp_next_iss+0x44>)
 800ed08:	6013      	str	r3, [r2, #0]
  return iss;
 800ed0a:	4b06      	ldr	r3, [pc, #24]	; (800ed24 <tcp_next_iss+0x44>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3708      	adds	r7, #8
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	08019984 	.word	0x08019984
 800ed1c:	0801a074 	.word	0x0801a074
 800ed20:	080199c8 	.word	0x080199c8
 800ed24:	20000014 	.word	0x20000014
 800ed28:	2000ce08 	.word	0x2000ce08

0800ed2c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d106      	bne.n	800ed4e <tcp_eff_send_mss_netif+0x22>
 800ed40:	4b14      	ldr	r3, [pc, #80]	; (800ed94 <tcp_eff_send_mss_netif+0x68>)
 800ed42:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ed46:	4914      	ldr	r1, [pc, #80]	; (800ed98 <tcp_eff_send_mss_netif+0x6c>)
 800ed48:	4814      	ldr	r0, [pc, #80]	; (800ed9c <tcp_eff_send_mss_netif+0x70>)
 800ed4a:	f009 f8bd 	bl	8017ec8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d101      	bne.n	800ed58 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ed54:	89fb      	ldrh	r3, [r7, #14]
 800ed56:	e019      	b.n	800ed8c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed5c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed5e:	8afb      	ldrh	r3, [r7, #22]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d012      	beq.n	800ed8a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ed64:	2328      	movs	r3, #40	; 0x28
 800ed66:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ed68:	8afa      	ldrh	r2, [r7, #22]
 800ed6a:	8abb      	ldrh	r3, [r7, #20]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d904      	bls.n	800ed7a <tcp_eff_send_mss_netif+0x4e>
 800ed70:	8afa      	ldrh	r2, [r7, #22]
 800ed72:	8abb      	ldrh	r3, [r7, #20]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	e000      	b.n	800ed7c <tcp_eff_send_mss_netif+0x50>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ed7e:	8a7a      	ldrh	r2, [r7, #18]
 800ed80:	89fb      	ldrh	r3, [r7, #14]
 800ed82:	4293      	cmp	r3, r2
 800ed84:	bf28      	it	cs
 800ed86:	4613      	movcs	r3, r2
 800ed88:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ed8a:	89fb      	ldrh	r3, [r7, #14]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}
 800ed94:	08019984 	.word	0x08019984
 800ed98:	0801a090 	.word	0x0801a090
 800ed9c:	080199c8 	.word	0x080199c8

0800eda0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d119      	bne.n	800ede8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800edb6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800edba:	4910      	ldr	r1, [pc, #64]	; (800edfc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800edbc:	4810      	ldr	r0, [pc, #64]	; (800ee00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800edbe:	f009 f883 	bl	8017ec8 <iprintf>

  while (pcb != NULL) {
 800edc2:	e011      	b.n	800ede8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d108      	bne.n	800ede2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7fe ffc6 	bl	800dd68 <tcp_abort>
      pcb = next;
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	60fb      	str	r3, [r7, #12]
 800ede0:	e002      	b.n	800ede8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1ea      	bne.n	800edc4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800edee:	bf00      	nop
 800edf0:	bf00      	nop
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	08019984 	.word	0x08019984
 800edfc:	0801a0b8 	.word	0x0801a0b8
 800ee00:	080199c8 	.word	0x080199c8

0800ee04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d02a      	beq.n	800ee6a <tcp_netif_ip_addr_changed+0x66>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d026      	beq.n	800ee6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ee1c:	4b15      	ldr	r3, [pc, #84]	; (800ee74 <tcp_netif_ip_addr_changed+0x70>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4619      	mov	r1, r3
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff ffbc 	bl	800eda0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ee28:	4b13      	ldr	r3, [pc, #76]	; (800ee78 <tcp_netif_ip_addr_changed+0x74>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7ff ffb6 	bl	800eda0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d017      	beq.n	800ee6a <tcp_netif_ip_addr_changed+0x66>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d013      	beq.n	800ee6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee42:	4b0e      	ldr	r3, [pc, #56]	; (800ee7c <tcp_netif_ip_addr_changed+0x78>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	e00c      	b.n	800ee64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d103      	bne.n	800ee5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1ef      	bne.n	800ee4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	2000ce04 	.word	0x2000ce04
 800ee78:	2000ce10 	.word	0x2000ce10
 800ee7c:	2000ce0c 	.word	0x2000ce0c

0800ee80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d007      	beq.n	800eea0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff fc3d 	bl	800e714 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800eea0:	bf00      	nop
 800eea2:	3708      	adds	r7, #8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eea8:	b590      	push	{r4, r7, lr}
 800eeaa:	b08d      	sub	sp, #52	; 0x34
 800eeac:	af04      	add	r7, sp, #16
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d105      	bne.n	800eec4 <tcp_input+0x1c>
 800eeb8:	4b9b      	ldr	r3, [pc, #620]	; (800f128 <tcp_input+0x280>)
 800eeba:	2283      	movs	r2, #131	; 0x83
 800eebc:	499b      	ldr	r1, [pc, #620]	; (800f12c <tcp_input+0x284>)
 800eebe:	489c      	ldr	r0, [pc, #624]	; (800f130 <tcp_input+0x288>)
 800eec0:	f009 f802 	bl	8017ec8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	4a9a      	ldr	r2, [pc, #616]	; (800f134 <tcp_input+0x28c>)
 800eeca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	895b      	ldrh	r3, [r3, #10]
 800eed0:	2b13      	cmp	r3, #19
 800eed2:	f240 83c4 	bls.w	800f65e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eed6:	4b98      	ldr	r3, [pc, #608]	; (800f138 <tcp_input+0x290>)
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	4a97      	ldr	r2, [pc, #604]	; (800f138 <tcp_input+0x290>)
 800eedc:	6812      	ldr	r2, [r2, #0]
 800eede:	4611      	mov	r1, r2
 800eee0:	4618      	mov	r0, r3
 800eee2:	f007 fdf9 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f040 83ba 	bne.w	800f662 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eeee:	4b92      	ldr	r3, [pc, #584]	; (800f138 <tcp_input+0x290>)
 800eef0:	695b      	ldr	r3, [r3, #20]
 800eef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eef6:	2be0      	cmp	r3, #224	; 0xe0
 800eef8:	f000 83b3 	beq.w	800f662 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eefc:	4b8d      	ldr	r3, [pc, #564]	; (800f134 <tcp_input+0x28c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	899b      	ldrh	r3, [r3, #12]
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fc fdd3 	bl	800bab0 <lwip_htons>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	0b1b      	lsrs	r3, r3, #12
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ef16:	7cbb      	ldrb	r3, [r7, #18]
 800ef18:	2b13      	cmp	r3, #19
 800ef1a:	f240 83a4 	bls.w	800f666 <tcp_input+0x7be>
 800ef1e:	7cbb      	ldrb	r3, [r7, #18]
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	891b      	ldrh	r3, [r3, #8]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	f200 839d 	bhi.w	800f666 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ef2c:	7cbb      	ldrb	r3, [r7, #18]
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	3b14      	subs	r3, #20
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	4b81      	ldr	r3, [pc, #516]	; (800f13c <tcp_input+0x294>)
 800ef36:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ef38:	4b81      	ldr	r3, [pc, #516]	; (800f140 <tcp_input+0x298>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	895a      	ldrh	r2, [r3, #10]
 800ef42:	7cbb      	ldrb	r3, [r7, #18]
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d309      	bcc.n	800ef5e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ef4a:	4b7c      	ldr	r3, [pc, #496]	; (800f13c <tcp_input+0x294>)
 800ef4c:	881a      	ldrh	r2, [r3, #0]
 800ef4e:	4b7d      	ldr	r3, [pc, #500]	; (800f144 <tcp_input+0x29c>)
 800ef50:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ef52:	7cbb      	ldrb	r3, [r7, #18]
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7fe f8dc 	bl	800d114 <pbuf_remove_header>
 800ef5c:	e04e      	b.n	800effc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d105      	bne.n	800ef72 <tcp_input+0xca>
 800ef66:	4b70      	ldr	r3, [pc, #448]	; (800f128 <tcp_input+0x280>)
 800ef68:	22c2      	movs	r2, #194	; 0xc2
 800ef6a:	4977      	ldr	r1, [pc, #476]	; (800f148 <tcp_input+0x2a0>)
 800ef6c:	4870      	ldr	r0, [pc, #448]	; (800f130 <tcp_input+0x288>)
 800ef6e:	f008 ffab 	bl	8017ec8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ef72:	2114      	movs	r1, #20
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f7fe f8cd 	bl	800d114 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	895a      	ldrh	r2, [r3, #10]
 800ef7e:	4b71      	ldr	r3, [pc, #452]	; (800f144 <tcp_input+0x29c>)
 800ef80:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ef82:	4b6e      	ldr	r3, [pc, #440]	; (800f13c <tcp_input+0x294>)
 800ef84:	881a      	ldrh	r2, [r3, #0]
 800ef86:	4b6f      	ldr	r3, [pc, #444]	; (800f144 <tcp_input+0x29c>)
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ef8e:	4b6d      	ldr	r3, [pc, #436]	; (800f144 <tcp_input+0x29c>)
 800ef90:	881b      	ldrh	r3, [r3, #0]
 800ef92:	4619      	mov	r1, r3
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7fe f8bd 	bl	800d114 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	895b      	ldrh	r3, [r3, #10]
 800efa0:	8a3a      	ldrh	r2, [r7, #16]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	f200 8361 	bhi.w	800f66a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	4a64      	ldr	r2, [pc, #400]	; (800f140 <tcp_input+0x298>)
 800efb0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	8a3a      	ldrh	r2, [r7, #16]
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe f8aa 	bl	800d114 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	891a      	ldrh	r2, [r3, #8]
 800efc4:	8a3b      	ldrh	r3, [r7, #16]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	b29a      	uxth	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	895b      	ldrh	r3, [r3, #10]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d005      	beq.n	800efe2 <tcp_input+0x13a>
 800efd6:	4b54      	ldr	r3, [pc, #336]	; (800f128 <tcp_input+0x280>)
 800efd8:	22df      	movs	r2, #223	; 0xdf
 800efda:	495c      	ldr	r1, [pc, #368]	; (800f14c <tcp_input+0x2a4>)
 800efdc:	4854      	ldr	r0, [pc, #336]	; (800f130 <tcp_input+0x288>)
 800efde:	f008 ff73 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	891a      	ldrh	r2, [r3, #8]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	891b      	ldrh	r3, [r3, #8]
 800efec:	429a      	cmp	r2, r3
 800efee:	d005      	beq.n	800effc <tcp_input+0x154>
 800eff0:	4b4d      	ldr	r3, [pc, #308]	; (800f128 <tcp_input+0x280>)
 800eff2:	22e0      	movs	r2, #224	; 0xe0
 800eff4:	4956      	ldr	r1, [pc, #344]	; (800f150 <tcp_input+0x2a8>)
 800eff6:	484e      	ldr	r0, [pc, #312]	; (800f130 <tcp_input+0x288>)
 800eff8:	f008 ff66 	bl	8017ec8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800effc:	4b4d      	ldr	r3, [pc, #308]	; (800f134 <tcp_input+0x28c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	881b      	ldrh	r3, [r3, #0]
 800f002:	b29b      	uxth	r3, r3
 800f004:	4a4b      	ldr	r2, [pc, #300]	; (800f134 <tcp_input+0x28c>)
 800f006:	6814      	ldr	r4, [r2, #0]
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fc fd51 	bl	800bab0 <lwip_htons>
 800f00e:	4603      	mov	r3, r0
 800f010:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f012:	4b48      	ldr	r3, [pc, #288]	; (800f134 <tcp_input+0x28c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	885b      	ldrh	r3, [r3, #2]
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4a46      	ldr	r2, [pc, #280]	; (800f134 <tcp_input+0x28c>)
 800f01c:	6814      	ldr	r4, [r2, #0]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fc fd46 	bl	800bab0 <lwip_htons>
 800f024:	4603      	mov	r3, r0
 800f026:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f028:	4b42      	ldr	r3, [pc, #264]	; (800f134 <tcp_input+0x28c>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	4a41      	ldr	r2, [pc, #260]	; (800f134 <tcp_input+0x28c>)
 800f030:	6814      	ldr	r4, [r2, #0]
 800f032:	4618      	mov	r0, r3
 800f034:	f7fc fd51 	bl	800bada <lwip_htonl>
 800f038:	4603      	mov	r3, r0
 800f03a:	6063      	str	r3, [r4, #4]
 800f03c:	6863      	ldr	r3, [r4, #4]
 800f03e:	4a45      	ldr	r2, [pc, #276]	; (800f154 <tcp_input+0x2ac>)
 800f040:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f042:	4b3c      	ldr	r3, [pc, #240]	; (800f134 <tcp_input+0x28c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	4a3a      	ldr	r2, [pc, #232]	; (800f134 <tcp_input+0x28c>)
 800f04a:	6814      	ldr	r4, [r2, #0]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fc fd44 	bl	800bada <lwip_htonl>
 800f052:	4603      	mov	r3, r0
 800f054:	60a3      	str	r3, [r4, #8]
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	4a3f      	ldr	r2, [pc, #252]	; (800f158 <tcp_input+0x2b0>)
 800f05a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f05c:	4b35      	ldr	r3, [pc, #212]	; (800f134 <tcp_input+0x28c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	89db      	ldrh	r3, [r3, #14]
 800f062:	b29b      	uxth	r3, r3
 800f064:	4a33      	ldr	r2, [pc, #204]	; (800f134 <tcp_input+0x28c>)
 800f066:	6814      	ldr	r4, [r2, #0]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fc fd21 	bl	800bab0 <lwip_htons>
 800f06e:	4603      	mov	r3, r0
 800f070:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f072:	4b30      	ldr	r3, [pc, #192]	; (800f134 <tcp_input+0x28c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	899b      	ldrh	r3, [r3, #12]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fc fd18 	bl	800bab0 <lwip_htons>
 800f080:	4603      	mov	r3, r0
 800f082:	b2db      	uxtb	r3, r3
 800f084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f088:	b2da      	uxtb	r2, r3
 800f08a:	4b34      	ldr	r3, [pc, #208]	; (800f15c <tcp_input+0x2b4>)
 800f08c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	891a      	ldrh	r2, [r3, #8]
 800f092:	4b33      	ldr	r3, [pc, #204]	; (800f160 <tcp_input+0x2b8>)
 800f094:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f096:	4b31      	ldr	r3, [pc, #196]	; (800f15c <tcp_input+0x2b4>)
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	f003 0303 	and.w	r3, r3, #3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00c      	beq.n	800f0bc <tcp_input+0x214>
    tcplen++;
 800f0a2:	4b2f      	ldr	r3, [pc, #188]	; (800f160 <tcp_input+0x2b8>)
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	4b2d      	ldr	r3, [pc, #180]	; (800f160 <tcp_input+0x2b8>)
 800f0ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	891a      	ldrh	r2, [r3, #8]
 800f0b2:	4b2b      	ldr	r3, [pc, #172]	; (800f160 <tcp_input+0x2b8>)
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	f200 82d9 	bhi.w	800f66e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0c0:	4b28      	ldr	r3, [pc, #160]	; (800f164 <tcp_input+0x2bc>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	61fb      	str	r3, [r7, #28]
 800f0c6:	e09d      	b.n	800f204 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f0c8:	69fb      	ldr	r3, [r7, #28]
 800f0ca:	7d1b      	ldrb	r3, [r3, #20]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d105      	bne.n	800f0dc <tcp_input+0x234>
 800f0d0:	4b15      	ldr	r3, [pc, #84]	; (800f128 <tcp_input+0x280>)
 800f0d2:	22fb      	movs	r2, #251	; 0xfb
 800f0d4:	4924      	ldr	r1, [pc, #144]	; (800f168 <tcp_input+0x2c0>)
 800f0d6:	4816      	ldr	r0, [pc, #88]	; (800f130 <tcp_input+0x288>)
 800f0d8:	f008 fef6 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
 800f0e0:	2b0a      	cmp	r3, #10
 800f0e2:	d105      	bne.n	800f0f0 <tcp_input+0x248>
 800f0e4:	4b10      	ldr	r3, [pc, #64]	; (800f128 <tcp_input+0x280>)
 800f0e6:	22fc      	movs	r2, #252	; 0xfc
 800f0e8:	4920      	ldr	r1, [pc, #128]	; (800f16c <tcp_input+0x2c4>)
 800f0ea:	4811      	ldr	r0, [pc, #68]	; (800f130 <tcp_input+0x288>)
 800f0ec:	f008 feec 	bl	8017ec8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d105      	bne.n	800f104 <tcp_input+0x25c>
 800f0f8:	4b0b      	ldr	r3, [pc, #44]	; (800f128 <tcp_input+0x280>)
 800f0fa:	22fd      	movs	r2, #253	; 0xfd
 800f0fc:	491c      	ldr	r1, [pc, #112]	; (800f170 <tcp_input+0x2c8>)
 800f0fe:	480c      	ldr	r0, [pc, #48]	; (800f130 <tcp_input+0x288>)
 800f100:	f008 fee2 	bl	8017ec8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	7a1b      	ldrb	r3, [r3, #8]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d033      	beq.n	800f174 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	7a1a      	ldrb	r2, [r3, #8]
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <tcp_input+0x290>)
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f118:	3301      	adds	r3, #1
 800f11a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d029      	beq.n	800f174 <tcp_input+0x2cc>
      prev = pcb;
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	61bb      	str	r3, [r7, #24]
      continue;
 800f124:	e06b      	b.n	800f1fe <tcp_input+0x356>
 800f126:	bf00      	nop
 800f128:	0801a0ec 	.word	0x0801a0ec
 800f12c:	0801a120 	.word	0x0801a120
 800f130:	0801a138 	.word	0x0801a138
 800f134:	20004ae0 	.word	0x20004ae0
 800f138:	200096d0 	.word	0x200096d0
 800f13c:	20004ae4 	.word	0x20004ae4
 800f140:	20004ae8 	.word	0x20004ae8
 800f144:	20004ae6 	.word	0x20004ae6
 800f148:	0801a160 	.word	0x0801a160
 800f14c:	0801a170 	.word	0x0801a170
 800f150:	0801a17c 	.word	0x0801a17c
 800f154:	20004af0 	.word	0x20004af0
 800f158:	20004af4 	.word	0x20004af4
 800f15c:	20004afc 	.word	0x20004afc
 800f160:	20004afa 	.word	0x20004afa
 800f164:	2000ce04 	.word	0x2000ce04
 800f168:	0801a19c 	.word	0x0801a19c
 800f16c:	0801a1c4 	.word	0x0801a1c4
 800f170:	0801a1f0 	.word	0x0801a1f0
    }

    if (pcb->remote_port == tcphdr->src &&
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	8b1a      	ldrh	r2, [r3, #24]
 800f178:	4b94      	ldr	r3, [pc, #592]	; (800f3cc <tcp_input+0x524>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	b29b      	uxth	r3, r3
 800f180:	429a      	cmp	r2, r3
 800f182:	d13a      	bne.n	800f1fa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	8ada      	ldrh	r2, [r3, #22]
 800f188:	4b90      	ldr	r3, [pc, #576]	; (800f3cc <tcp_input+0x524>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	885b      	ldrh	r3, [r3, #2]
 800f18e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f190:	429a      	cmp	r2, r3
 800f192:	d132      	bne.n	800f1fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	4b8d      	ldr	r3, [pc, #564]	; (800f3d0 <tcp_input+0x528>)
 800f19a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d12c      	bne.n	800f1fa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	4b8a      	ldr	r3, [pc, #552]	; (800f3d0 <tcp_input+0x528>)
 800f1a6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d126      	bne.n	800f1fa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	69fa      	ldr	r2, [r7, #28]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d106      	bne.n	800f1c4 <tcp_input+0x31c>
 800f1b6:	4b87      	ldr	r3, [pc, #540]	; (800f3d4 <tcp_input+0x52c>)
 800f1b8:	f240 120d 	movw	r2, #269	; 0x10d
 800f1bc:	4986      	ldr	r1, [pc, #536]	; (800f3d8 <tcp_input+0x530>)
 800f1be:	4887      	ldr	r0, [pc, #540]	; (800f3dc <tcp_input+0x534>)
 800f1c0:	f008 fe82 	bl	8017ec8 <iprintf>
      if (prev != NULL) {
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00a      	beq.n	800f1e0 <tcp_input+0x338>
        prev->next = pcb->next;
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	68da      	ldr	r2, [r3, #12]
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f1d2:	4b83      	ldr	r3, [pc, #524]	; (800f3e0 <tcp_input+0x538>)
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f1da:	4a81      	ldr	r2, [pc, #516]	; (800f3e0 <tcp_input+0x538>)
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	69fa      	ldr	r2, [r7, #28]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d111      	bne.n	800f20e <tcp_input+0x366>
 800f1ea:	4b7a      	ldr	r3, [pc, #488]	; (800f3d4 <tcp_input+0x52c>)
 800f1ec:	f240 1215 	movw	r2, #277	; 0x115
 800f1f0:	497c      	ldr	r1, [pc, #496]	; (800f3e4 <tcp_input+0x53c>)
 800f1f2:	487a      	ldr	r0, [pc, #488]	; (800f3dc <tcp_input+0x534>)
 800f1f4:	f008 fe68 	bl	8017ec8 <iprintf>
      break;
 800f1f8:	e009      	b.n	800f20e <tcp_input+0x366>
    }
    prev = pcb;
 800f1fa:	69fb      	ldr	r3, [r7, #28]
 800f1fc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	61fb      	str	r3, [r7, #28]
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f47f af5e 	bne.w	800f0c8 <tcp_input+0x220>
 800f20c:	e000      	b.n	800f210 <tcp_input+0x368>
      break;
 800f20e:	bf00      	nop
  }

  if (pcb == NULL) {
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	2b00      	cmp	r3, #0
 800f214:	f040 8095 	bne.w	800f342 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f218:	4b73      	ldr	r3, [pc, #460]	; (800f3e8 <tcp_input+0x540>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	61fb      	str	r3, [r7, #28]
 800f21e:	e03f      	b.n	800f2a0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	7d1b      	ldrb	r3, [r3, #20]
 800f224:	2b0a      	cmp	r3, #10
 800f226:	d006      	beq.n	800f236 <tcp_input+0x38e>
 800f228:	4b6a      	ldr	r3, [pc, #424]	; (800f3d4 <tcp_input+0x52c>)
 800f22a:	f240 121f 	movw	r2, #287	; 0x11f
 800f22e:	496f      	ldr	r1, [pc, #444]	; (800f3ec <tcp_input+0x544>)
 800f230:	486a      	ldr	r0, [pc, #424]	; (800f3dc <tcp_input+0x534>)
 800f232:	f008 fe49 	bl	8017ec8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f236:	69fb      	ldr	r3, [r7, #28]
 800f238:	7a1b      	ldrb	r3, [r3, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d009      	beq.n	800f252 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	7a1a      	ldrb	r2, [r3, #8]
 800f242:	4b63      	ldr	r3, [pc, #396]	; (800f3d0 <tcp_input+0x528>)
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f24a:	3301      	adds	r3, #1
 800f24c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f24e:	429a      	cmp	r2, r3
 800f250:	d122      	bne.n	800f298 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	8b1a      	ldrh	r2, [r3, #24]
 800f256:	4b5d      	ldr	r3, [pc, #372]	; (800f3cc <tcp_input+0x524>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	881b      	ldrh	r3, [r3, #0]
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	429a      	cmp	r2, r3
 800f260:	d11b      	bne.n	800f29a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	8ada      	ldrh	r2, [r3, #22]
 800f266:	4b59      	ldr	r3, [pc, #356]	; (800f3cc <tcp_input+0x524>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	885b      	ldrh	r3, [r3, #2]
 800f26c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f26e:	429a      	cmp	r2, r3
 800f270:	d113      	bne.n	800f29a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	4b56      	ldr	r3, [pc, #344]	; (800f3d0 <tcp_input+0x528>)
 800f278:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d10d      	bne.n	800f29a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	4b53      	ldr	r3, [pc, #332]	; (800f3d0 <tcp_input+0x528>)
 800f284:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f286:	429a      	cmp	r2, r3
 800f288:	d107      	bne.n	800f29a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f28a:	69f8      	ldr	r0, [r7, #28]
 800f28c:	f000 fb54 	bl	800f938 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7fd ffc5 	bl	800d220 <pbuf_free>
        return;
 800f296:	e1f0      	b.n	800f67a <tcp_input+0x7d2>
        continue;
 800f298:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	61fb      	str	r3, [r7, #28]
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1bc      	bne.n	800f220 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2aa:	4b51      	ldr	r3, [pc, #324]	; (800f3f0 <tcp_input+0x548>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	617b      	str	r3, [r7, #20]
 800f2b0:	e02a      	b.n	800f308 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	7a1b      	ldrb	r3, [r3, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00c      	beq.n	800f2d4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	7a1a      	ldrb	r2, [r3, #8]
 800f2be:	4b44      	ldr	r3, [pc, #272]	; (800f3d0 <tcp_input+0x528>)
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d002      	beq.n	800f2d4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	61bb      	str	r3, [r7, #24]
        continue;
 800f2d2:	e016      	b.n	800f302 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	8ada      	ldrh	r2, [r3, #22]
 800f2d8:	4b3c      	ldr	r3, [pc, #240]	; (800f3cc <tcp_input+0x524>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	885b      	ldrh	r3, [r3, #2]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d10c      	bne.n	800f2fe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b39      	ldr	r3, [pc, #228]	; (800f3d0 <tcp_input+0x528>)
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d00f      	beq.n	800f310 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d00d      	beq.n	800f312 <tcp_input+0x46a>
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d009      	beq.n	800f312 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	617b      	str	r3, [r7, #20]
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1d1      	bne.n	800f2b2 <tcp_input+0x40a>
 800f30e:	e000      	b.n	800f312 <tcp_input+0x46a>
            break;
 800f310:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d014      	beq.n	800f342 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00a      	beq.n	800f334 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68da      	ldr	r2, [r3, #12]
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f326:	4b32      	ldr	r3, [pc, #200]	; (800f3f0 <tcp_input+0x548>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f32e:	4a30      	ldr	r2, [pc, #192]	; (800f3f0 <tcp_input+0x548>)
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f334:	6978      	ldr	r0, [r7, #20]
 800f336:	f000 fa01 	bl	800f73c <tcp_listen_input>
      }
      pbuf_free(p);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7fd ff70 	bl	800d220 <pbuf_free>
      return;
 800f340:	e19b      	b.n	800f67a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 8160 	beq.w	800f60a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f34a:	4b2a      	ldr	r3, [pc, #168]	; (800f3f4 <tcp_input+0x54c>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	891a      	ldrh	r2, [r3, #8]
 800f354:	4b27      	ldr	r3, [pc, #156]	; (800f3f4 <tcp_input+0x54c>)
 800f356:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f358:	4a26      	ldr	r2, [pc, #152]	; (800f3f4 <tcp_input+0x54c>)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f35e:	4b1b      	ldr	r3, [pc, #108]	; (800f3cc <tcp_input+0x524>)
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4a24      	ldr	r2, [pc, #144]	; (800f3f4 <tcp_input+0x54c>)
 800f364:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f366:	4b24      	ldr	r3, [pc, #144]	; (800f3f8 <tcp_input+0x550>)
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f36c:	4b23      	ldr	r3, [pc, #140]	; (800f3fc <tcp_input+0x554>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f372:	4b23      	ldr	r3, [pc, #140]	; (800f400 <tcp_input+0x558>)
 800f374:	2200      	movs	r2, #0
 800f376:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f378:	4b22      	ldr	r3, [pc, #136]	; (800f404 <tcp_input+0x55c>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f003 0308 	and.w	r3, r3, #8
 800f380:	2b00      	cmp	r3, #0
 800f382:	d006      	beq.n	800f392 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	7b5b      	ldrb	r3, [r3, #13]
 800f388:	f043 0301 	orr.w	r3, r3, #1
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f396:	2b00      	cmp	r3, #0
 800f398:	d038      	beq.n	800f40c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f39a:	69f8      	ldr	r0, [r7, #28]
 800f39c:	f7ff f93e 	bl	800e61c <tcp_process_refused_data>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	f113 0f0d 	cmn.w	r3, #13
 800f3a6:	d007      	beq.n	800f3b8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d02d      	beq.n	800f40c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f3b0:	4b15      	ldr	r3, [pc, #84]	; (800f408 <tcp_input+0x560>)
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d029      	beq.n	800f40c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f040 8104 	bne.w	800f5ca <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f3c2:	69f8      	ldr	r0, [r7, #28]
 800f3c4:	f003 f9be 	bl	8012744 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f3c8:	e0ff      	b.n	800f5ca <tcp_input+0x722>
 800f3ca:	bf00      	nop
 800f3cc:	20004ae0 	.word	0x20004ae0
 800f3d0:	200096d0 	.word	0x200096d0
 800f3d4:	0801a0ec 	.word	0x0801a0ec
 800f3d8:	0801a218 	.word	0x0801a218
 800f3dc:	0801a138 	.word	0x0801a138
 800f3e0:	2000ce04 	.word	0x2000ce04
 800f3e4:	0801a244 	.word	0x0801a244
 800f3e8:	2000ce14 	.word	0x2000ce14
 800f3ec:	0801a270 	.word	0x0801a270
 800f3f0:	2000ce0c 	.word	0x2000ce0c
 800f3f4:	20004ad0 	.word	0x20004ad0
 800f3f8:	20004b00 	.word	0x20004b00
 800f3fc:	20004afd 	.word	0x20004afd
 800f400:	20004af8 	.word	0x20004af8
 800f404:	20004afc 	.word	0x20004afc
 800f408:	20004afa 	.word	0x20004afa
      }
    }
    tcp_input_pcb = pcb;
 800f40c:	4a9c      	ldr	r2, [pc, #624]	; (800f680 <tcp_input+0x7d8>)
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f412:	69f8      	ldr	r0, [r7, #28]
 800f414:	f000 fb0a 	bl	800fa2c <tcp_process>
 800f418:	4603      	mov	r3, r0
 800f41a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f41c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f420:	f113 0f0d 	cmn.w	r3, #13
 800f424:	f000 80d3 	beq.w	800f5ce <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f428:	4b96      	ldr	r3, [pc, #600]	; (800f684 <tcp_input+0x7dc>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 0308 	and.w	r3, r3, #8
 800f430:	2b00      	cmp	r3, #0
 800f432:	d015      	beq.n	800f460 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d008      	beq.n	800f450 <tcp_input+0x5a8>
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f444:	69fa      	ldr	r2, [r7, #28]
 800f446:	6912      	ldr	r2, [r2, #16]
 800f448:	f06f 010d 	mvn.w	r1, #13
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f450:	69f9      	ldr	r1, [r7, #28]
 800f452:	488d      	ldr	r0, [pc, #564]	; (800f688 <tcp_input+0x7e0>)
 800f454:	f7ff fbb0 	bl	800ebb8 <tcp_pcb_remove>
        tcp_free(pcb);
 800f458:	69f8      	ldr	r0, [r7, #28]
 800f45a:	f7fe f99d 	bl	800d798 <tcp_free>
 800f45e:	e0c1      	b.n	800f5e4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f464:	4b89      	ldr	r3, [pc, #548]	; (800f68c <tcp_input+0x7e4>)
 800f466:	881b      	ldrh	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d01d      	beq.n	800f4a8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f46c:	4b87      	ldr	r3, [pc, #540]	; (800f68c <tcp_input+0x7e4>)
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00a      	beq.n	800f492 <tcp_input+0x5ea>
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f482:	69fa      	ldr	r2, [r7, #28]
 800f484:	6910      	ldr	r0, [r2, #16]
 800f486:	89fa      	ldrh	r2, [r7, #14]
 800f488:	69f9      	ldr	r1, [r7, #28]
 800f48a:	4798      	blx	r3
 800f48c:	4603      	mov	r3, r0
 800f48e:	74fb      	strb	r3, [r7, #19]
 800f490:	e001      	b.n	800f496 <tcp_input+0x5ee>
 800f492:	2300      	movs	r3, #0
 800f494:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f496:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f49a:	f113 0f0d 	cmn.w	r3, #13
 800f49e:	f000 8098 	beq.w	800f5d2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f4a2:	4b7a      	ldr	r3, [pc, #488]	; (800f68c <tcp_input+0x7e4>)
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f4a8:	69f8      	ldr	r0, [r7, #28]
 800f4aa:	f000 f907 	bl	800f6bc <tcp_input_delayed_close>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f040 8090 	bne.w	800f5d6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f4b6:	4b76      	ldr	r3, [pc, #472]	; (800f690 <tcp_input+0x7e8>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d041      	beq.n	800f542 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f4be:	69fb      	ldr	r3, [r7, #28]
 800f4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d006      	beq.n	800f4d4 <tcp_input+0x62c>
 800f4c6:	4b73      	ldr	r3, [pc, #460]	; (800f694 <tcp_input+0x7ec>)
 800f4c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f4cc:	4972      	ldr	r1, [pc, #456]	; (800f698 <tcp_input+0x7f0>)
 800f4ce:	4873      	ldr	r0, [pc, #460]	; (800f69c <tcp_input+0x7f4>)
 800f4d0:	f008 fcfa 	bl	8017ec8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	8b5b      	ldrh	r3, [r3, #26]
 800f4d8:	f003 0310 	and.w	r3, r3, #16
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d008      	beq.n	800f4f2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f4e0:	4b6b      	ldr	r3, [pc, #428]	; (800f690 <tcp_input+0x7e8>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fd fe9b 	bl	800d220 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f4ea:	69f8      	ldr	r0, [r7, #28]
 800f4ec:	f7fe fc3c 	bl	800dd68 <tcp_abort>
            goto aborted;
 800f4f0:	e078      	b.n	800f5e4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d00c      	beq.n	800f516 <tcp_input+0x66e>
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	6918      	ldr	r0, [r3, #16]
 800f506:	4b62      	ldr	r3, [pc, #392]	; (800f690 <tcp_input+0x7e8>)
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	2300      	movs	r3, #0
 800f50c:	69f9      	ldr	r1, [r7, #28]
 800f50e:	47a0      	blx	r4
 800f510:	4603      	mov	r3, r0
 800f512:	74fb      	strb	r3, [r7, #19]
 800f514:	e008      	b.n	800f528 <tcp_input+0x680>
 800f516:	4b5e      	ldr	r3, [pc, #376]	; (800f690 <tcp_input+0x7e8>)
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	2300      	movs	r3, #0
 800f51c:	69f9      	ldr	r1, [r7, #28]
 800f51e:	2000      	movs	r0, #0
 800f520:	f7ff f952 	bl	800e7c8 <tcp_recv_null>
 800f524:	4603      	mov	r3, r0
 800f526:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f528:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f52c:	f113 0f0d 	cmn.w	r3, #13
 800f530:	d053      	beq.n	800f5da <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d003      	beq.n	800f542 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f53a:	4b55      	ldr	r3, [pc, #340]	; (800f690 <tcp_input+0x7e8>)
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f542:	4b50      	ldr	r3, [pc, #320]	; (800f684 <tcp_input+0x7dc>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	f003 0320 	and.w	r3, r3, #32
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d030      	beq.n	800f5b0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f552:	2b00      	cmp	r3, #0
 800f554:	d009      	beq.n	800f56a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f55a:	7b5a      	ldrb	r2, [r3, #13]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f560:	f042 0220 	orr.w	r2, r2, #32
 800f564:	b2d2      	uxtb	r2, r2
 800f566:	735a      	strb	r2, [r3, #13]
 800f568:	e022      	b.n	800f5b0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f56a:	69fb      	ldr	r3, [r7, #28]
 800f56c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f56e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f572:	d005      	beq.n	800f580 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f578:	3301      	adds	r3, #1
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00b      	beq.n	800f5a2 <tcp_input+0x6fa>
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f590:	69fb      	ldr	r3, [r7, #28]
 800f592:	6918      	ldr	r0, [r3, #16]
 800f594:	2300      	movs	r3, #0
 800f596:	2200      	movs	r2, #0
 800f598:	69f9      	ldr	r1, [r7, #28]
 800f59a:	47a0      	blx	r4
 800f59c:	4603      	mov	r3, r0
 800f59e:	74fb      	strb	r3, [r7, #19]
 800f5a0:	e001      	b.n	800f5a6 <tcp_input+0x6fe>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5aa:	f113 0f0d 	cmn.w	r3, #13
 800f5ae:	d016      	beq.n	800f5de <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f5b0:	4b33      	ldr	r3, [pc, #204]	; (800f680 <tcp_input+0x7d8>)
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f5b6:	69f8      	ldr	r0, [r7, #28]
 800f5b8:	f000 f880 	bl	800f6bc <tcp_input_delayed_close>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d10f      	bne.n	800f5e2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f5c2:	69f8      	ldr	r0, [r7, #28]
 800f5c4:	f002 fab8 	bl	8011b38 <tcp_output>
 800f5c8:	e00c      	b.n	800f5e4 <tcp_input+0x73c>
        goto aborted;
 800f5ca:	bf00      	nop
 800f5cc:	e00a      	b.n	800f5e4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f5ce:	bf00      	nop
 800f5d0:	e008      	b.n	800f5e4 <tcp_input+0x73c>
              goto aborted;
 800f5d2:	bf00      	nop
 800f5d4:	e006      	b.n	800f5e4 <tcp_input+0x73c>
          goto aborted;
 800f5d6:	bf00      	nop
 800f5d8:	e004      	b.n	800f5e4 <tcp_input+0x73c>
            goto aborted;
 800f5da:	bf00      	nop
 800f5dc:	e002      	b.n	800f5e4 <tcp_input+0x73c>
              goto aborted;
 800f5de:	bf00      	nop
 800f5e0:	e000      	b.n	800f5e4 <tcp_input+0x73c>
          goto aborted;
 800f5e2:	bf00      	nop
    tcp_input_pcb = NULL;
 800f5e4:	4b26      	ldr	r3, [pc, #152]	; (800f680 <tcp_input+0x7d8>)
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f5ea:	4b29      	ldr	r3, [pc, #164]	; (800f690 <tcp_input+0x7e8>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f5f0:	4b2b      	ldr	r3, [pc, #172]	; (800f6a0 <tcp_input+0x7f8>)
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d03f      	beq.n	800f678 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f5f8:	4b29      	ldr	r3, [pc, #164]	; (800f6a0 <tcp_input+0x7f8>)
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd fe0f 	bl	800d220 <pbuf_free>
      inseg.p = NULL;
 800f602:	4b27      	ldr	r3, [pc, #156]	; (800f6a0 <tcp_input+0x7f8>)
 800f604:	2200      	movs	r2, #0
 800f606:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f608:	e036      	b.n	800f678 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f60a:	4b26      	ldr	r3, [pc, #152]	; (800f6a4 <tcp_input+0x7fc>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	899b      	ldrh	r3, [r3, #12]
 800f610:	b29b      	uxth	r3, r3
 800f612:	4618      	mov	r0, r3
 800f614:	f7fc fa4c 	bl	800bab0 <lwip_htons>
 800f618:	4603      	mov	r3, r0
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	f003 0304 	and.w	r3, r3, #4
 800f620:	2b00      	cmp	r3, #0
 800f622:	d118      	bne.n	800f656 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f624:	4b20      	ldr	r3, [pc, #128]	; (800f6a8 <tcp_input+0x800>)
 800f626:	6819      	ldr	r1, [r3, #0]
 800f628:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <tcp_input+0x804>)
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	461a      	mov	r2, r3
 800f62e:	4b20      	ldr	r3, [pc, #128]	; (800f6b0 <tcp_input+0x808>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f634:	4b1b      	ldr	r3, [pc, #108]	; (800f6a4 <tcp_input+0x7fc>)
 800f636:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f638:	885b      	ldrh	r3, [r3, #2]
 800f63a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f63c:	4a19      	ldr	r2, [pc, #100]	; (800f6a4 <tcp_input+0x7fc>)
 800f63e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f640:	8812      	ldrh	r2, [r2, #0]
 800f642:	b292      	uxth	r2, r2
 800f644:	9202      	str	r2, [sp, #8]
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	4b1a      	ldr	r3, [pc, #104]	; (800f6b4 <tcp_input+0x80c>)
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	4b1a      	ldr	r3, [pc, #104]	; (800f6b8 <tcp_input+0x810>)
 800f64e:	4602      	mov	r2, r0
 800f650:	2000      	movs	r0, #0
 800f652:	f003 f825 	bl	80126a0 <tcp_rst>
    pbuf_free(p);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f7fd fde2 	bl	800d220 <pbuf_free>
  return;
 800f65c:	e00c      	b.n	800f678 <tcp_input+0x7d0>
    goto dropped;
 800f65e:	bf00      	nop
 800f660:	e006      	b.n	800f670 <tcp_input+0x7c8>
    goto dropped;
 800f662:	bf00      	nop
 800f664:	e004      	b.n	800f670 <tcp_input+0x7c8>
    goto dropped;
 800f666:	bf00      	nop
 800f668:	e002      	b.n	800f670 <tcp_input+0x7c8>
      goto dropped;
 800f66a:	bf00      	nop
 800f66c:	e000      	b.n	800f670 <tcp_input+0x7c8>
      goto dropped;
 800f66e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7fd fdd5 	bl	800d220 <pbuf_free>
 800f676:	e000      	b.n	800f67a <tcp_input+0x7d2>
  return;
 800f678:	bf00      	nop
}
 800f67a:	3724      	adds	r7, #36	; 0x24
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd90      	pop	{r4, r7, pc}
 800f680:	2000ce18 	.word	0x2000ce18
 800f684:	20004afd 	.word	0x20004afd
 800f688:	2000ce04 	.word	0x2000ce04
 800f68c:	20004af8 	.word	0x20004af8
 800f690:	20004b00 	.word	0x20004b00
 800f694:	0801a0ec 	.word	0x0801a0ec
 800f698:	0801a2a0 	.word	0x0801a2a0
 800f69c:	0801a138 	.word	0x0801a138
 800f6a0:	20004ad0 	.word	0x20004ad0
 800f6a4:	20004ae0 	.word	0x20004ae0
 800f6a8:	20004af4 	.word	0x20004af4
 800f6ac:	20004afa 	.word	0x20004afa
 800f6b0:	20004af0 	.word	0x20004af0
 800f6b4:	200096e0 	.word	0x200096e0
 800f6b8:	200096e4 	.word	0x200096e4

0800f6bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d106      	bne.n	800f6d8 <tcp_input_delayed_close+0x1c>
 800f6ca:	4b17      	ldr	r3, [pc, #92]	; (800f728 <tcp_input_delayed_close+0x6c>)
 800f6cc:	f240 225a 	movw	r2, #602	; 0x25a
 800f6d0:	4916      	ldr	r1, [pc, #88]	; (800f72c <tcp_input_delayed_close+0x70>)
 800f6d2:	4817      	ldr	r0, [pc, #92]	; (800f730 <tcp_input_delayed_close+0x74>)
 800f6d4:	f008 fbf8 	bl	8017ec8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f6d8:	4b16      	ldr	r3, [pc, #88]	; (800f734 <tcp_input_delayed_close+0x78>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01c      	beq.n	800f71e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	8b5b      	ldrh	r3, [r3, #26]
 800f6e8:	f003 0310 	and.w	r3, r3, #16
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d10d      	bne.n	800f70c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d008      	beq.n	800f70c <tcp_input_delayed_close+0x50>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	6912      	ldr	r2, [r2, #16]
 800f704:	f06f 010e 	mvn.w	r1, #14
 800f708:	4610      	mov	r0, r2
 800f70a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	480a      	ldr	r0, [pc, #40]	; (800f738 <tcp_input_delayed_close+0x7c>)
 800f710:	f7ff fa52 	bl	800ebb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7fe f83f 	bl	800d798 <tcp_free>
    return 1;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e000      	b.n	800f720 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	0801a0ec 	.word	0x0801a0ec
 800f72c:	0801a2bc 	.word	0x0801a2bc
 800f730:	0801a138 	.word	0x0801a138
 800f734:	20004afd 	.word	0x20004afd
 800f738:	2000ce04 	.word	0x2000ce04

0800f73c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f73c:	b590      	push	{r4, r7, lr}
 800f73e:	b08b      	sub	sp, #44	; 0x2c
 800f740:	af04      	add	r7, sp, #16
 800f742:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f744:	4b6f      	ldr	r3, [pc, #444]	; (800f904 <tcp_listen_input+0x1c8>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	f003 0304 	and.w	r3, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f040 80d2 	bne.w	800f8f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_listen_input+0x2a>
 800f758:	4b6b      	ldr	r3, [pc, #428]	; (800f908 <tcp_listen_input+0x1cc>)
 800f75a:	f240 2281 	movw	r2, #641	; 0x281
 800f75e:	496b      	ldr	r1, [pc, #428]	; (800f90c <tcp_listen_input+0x1d0>)
 800f760:	486b      	ldr	r0, [pc, #428]	; (800f910 <tcp_listen_input+0x1d4>)
 800f762:	f008 fbb1 	bl	8017ec8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f766:	4b67      	ldr	r3, [pc, #412]	; (800f904 <tcp_listen_input+0x1c8>)
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	f003 0310 	and.w	r3, r3, #16
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d019      	beq.n	800f7a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f772:	4b68      	ldr	r3, [pc, #416]	; (800f914 <tcp_listen_input+0x1d8>)
 800f774:	6819      	ldr	r1, [r3, #0]
 800f776:	4b68      	ldr	r3, [pc, #416]	; (800f918 <tcp_listen_input+0x1dc>)
 800f778:	881b      	ldrh	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	4b67      	ldr	r3, [pc, #412]	; (800f91c <tcp_listen_input+0x1e0>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f782:	4b67      	ldr	r3, [pc, #412]	; (800f920 <tcp_listen_input+0x1e4>)
 800f784:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f786:	885b      	ldrh	r3, [r3, #2]
 800f788:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f78a:	4a65      	ldr	r2, [pc, #404]	; (800f920 <tcp_listen_input+0x1e4>)
 800f78c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f78e:	8812      	ldrh	r2, [r2, #0]
 800f790:	b292      	uxth	r2, r2
 800f792:	9202      	str	r2, [sp, #8]
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	4b63      	ldr	r3, [pc, #396]	; (800f924 <tcp_listen_input+0x1e8>)
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	4b63      	ldr	r3, [pc, #396]	; (800f928 <tcp_listen_input+0x1ec>)
 800f79c:	4602      	mov	r2, r0
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f002 ff7e 	bl	80126a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f7a4:	e0a9      	b.n	800f8fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f7a6:	4b57      	ldr	r3, [pc, #348]	; (800f904 <tcp_listen_input+0x1c8>)
 800f7a8:	781b      	ldrb	r3, [r3, #0]
 800f7aa:	f003 0302 	and.w	r3, r3, #2
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 80a3 	beq.w	800f8fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7d5b      	ldrb	r3, [r3, #21]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7ff f929 	bl	800ea10 <tcp_alloc>
 800f7be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d111      	bne.n	800f7ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00a      	beq.n	800f7e4 <tcp_listen_input+0xa8>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	699b      	ldr	r3, [r3, #24]
 800f7d2:	687a      	ldr	r2, [r7, #4]
 800f7d4:	6910      	ldr	r0, [r2, #16]
 800f7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7da:	2100      	movs	r1, #0
 800f7dc:	4798      	blx	r3
 800f7de:	4603      	mov	r3, r0
 800f7e0:	73bb      	strb	r3, [r7, #14]
      return;
 800f7e2:	e08b      	b.n	800f8fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7e4:	23f0      	movs	r3, #240	; 0xf0
 800f7e6:	73bb      	strb	r3, [r7, #14]
      return;
 800f7e8:	e088      	b.n	800f8fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f7ea:	4b50      	ldr	r3, [pc, #320]	; (800f92c <tcp_listen_input+0x1f0>)
 800f7ec:	695a      	ldr	r2, [r3, #20]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f7f2:	4b4e      	ldr	r3, [pc, #312]	; (800f92c <tcp_listen_input+0x1f0>)
 800f7f4:	691a      	ldr	r2, [r3, #16]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	8ada      	ldrh	r2, [r3, #22]
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f802:	4b47      	ldr	r3, [pc, #284]	; (800f920 <tcp_listen_input+0x1e4>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	881b      	ldrh	r3, [r3, #0]
 800f808:	b29a      	uxth	r2, r3
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	2203      	movs	r2, #3
 800f812:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f814:	4b41      	ldr	r3, [pc, #260]	; (800f91c <tcp_listen_input+0x1e0>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	1c5a      	adds	r2, r3, #1
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f826:	6978      	ldr	r0, [r7, #20]
 800f828:	f7ff fa5a 	bl	800ece0 <tcp_next_iss>
 800f82c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	693a      	ldr	r2, [r7, #16]
 800f832:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	693a      	ldr	r2, [r7, #16]
 800f838:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	693a      	ldr	r2, [r7, #16]
 800f844:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f846:	4b35      	ldr	r3, [pc, #212]	; (800f91c <tcp_listen_input+0x1e0>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	1e5a      	subs	r2, r3, #1
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	691a      	ldr	r2, [r3, #16]
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7a5b      	ldrb	r3, [r3, #9]
 800f862:	f003 030c 	and.w	r3, r3, #12
 800f866:	b2da      	uxtb	r2, r3
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	7a1a      	ldrb	r2, [r3, #8]
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f874:	4b2e      	ldr	r3, [pc, #184]	; (800f930 <tcp_listen_input+0x1f4>)
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	60da      	str	r2, [r3, #12]
 800f87c:	4a2c      	ldr	r2, [pc, #176]	; (800f930 <tcp_listen_input+0x1f4>)
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	f003 f8cf 	bl	8012a24 <tcp_timer_needed>
 800f886:	4b2b      	ldr	r3, [pc, #172]	; (800f934 <tcp_listen_input+0x1f8>)
 800f888:	2201      	movs	r2, #1
 800f88a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f88c:	6978      	ldr	r0, [r7, #20]
 800f88e:	f001 fd8d 	bl	80113ac <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f892:	4b23      	ldr	r3, [pc, #140]	; (800f920 <tcp_listen_input+0x1e4>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	89db      	ldrh	r3, [r3, #14]
 800f898:	b29a      	uxth	r2, r3
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f006 fe5b 	bl	8016570 <ip4_route>
 800f8ba:	4601      	mov	r1, r0
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	3304      	adds	r3, #4
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f7ff fa32 	bl	800ed2c <tcp_eff_send_mss_netif>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f8d0:	2112      	movs	r1, #18
 800f8d2:	6978      	ldr	r0, [r7, #20]
 800f8d4:	f002 f842 	bl	801195c <tcp_enqueue_flags>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d004      	beq.n	800f8ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	6978      	ldr	r0, [r7, #20]
 800f8e8:	f7fe f980 	bl	800dbec <tcp_abandon>
      return;
 800f8ec:	e006      	b.n	800f8fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f8ee:	6978      	ldr	r0, [r7, #20]
 800f8f0:	f002 f922 	bl	8011b38 <tcp_output>
  return;
 800f8f4:	e001      	b.n	800f8fa <tcp_listen_input+0x1be>
    return;
 800f8f6:	bf00      	nop
 800f8f8:	e000      	b.n	800f8fc <tcp_listen_input+0x1c0>
  return;
 800f8fa:	bf00      	nop
}
 800f8fc:	371c      	adds	r7, #28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd90      	pop	{r4, r7, pc}
 800f902:	bf00      	nop
 800f904:	20004afc 	.word	0x20004afc
 800f908:	0801a0ec 	.word	0x0801a0ec
 800f90c:	0801a2e4 	.word	0x0801a2e4
 800f910:	0801a138 	.word	0x0801a138
 800f914:	20004af4 	.word	0x20004af4
 800f918:	20004afa 	.word	0x20004afa
 800f91c:	20004af0 	.word	0x20004af0
 800f920:	20004ae0 	.word	0x20004ae0
 800f924:	200096e0 	.word	0x200096e0
 800f928:	200096e4 	.word	0x200096e4
 800f92c:	200096d0 	.word	0x200096d0
 800f930:	2000ce04 	.word	0x2000ce04
 800f934:	2000ce00 	.word	0x2000ce00

0800f938 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af04      	add	r7, sp, #16
 800f93e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f940:	4b2f      	ldr	r3, [pc, #188]	; (800fa00 <tcp_timewait_input+0xc8>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f003 0304 	and.w	r3, r3, #4
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d153      	bne.n	800f9f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d106      	bne.n	800f960 <tcp_timewait_input+0x28>
 800f952:	4b2c      	ldr	r3, [pc, #176]	; (800fa04 <tcp_timewait_input+0xcc>)
 800f954:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f958:	492b      	ldr	r1, [pc, #172]	; (800fa08 <tcp_timewait_input+0xd0>)
 800f95a:	482c      	ldr	r0, [pc, #176]	; (800fa0c <tcp_timewait_input+0xd4>)
 800f95c:	f008 fab4 	bl	8017ec8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f960:	4b27      	ldr	r3, [pc, #156]	; (800fa00 <tcp_timewait_input+0xc8>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	f003 0302 	and.w	r3, r3, #2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d02a      	beq.n	800f9c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f96c:	4b28      	ldr	r3, [pc, #160]	; (800fa10 <tcp_timewait_input+0xd8>)
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	2b00      	cmp	r3, #0
 800f978:	db2d      	blt.n	800f9d6 <tcp_timewait_input+0x9e>
 800f97a:	4b25      	ldr	r3, [pc, #148]	; (800fa10 <tcp_timewait_input+0xd8>)
 800f97c:	681a      	ldr	r2, [r3, #0]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f982:	6879      	ldr	r1, [r7, #4]
 800f984:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f986:	440b      	add	r3, r1
 800f988:	1ad3      	subs	r3, r2, r3
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	dc23      	bgt.n	800f9d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f98e:	4b21      	ldr	r3, [pc, #132]	; (800fa14 <tcp_timewait_input+0xdc>)
 800f990:	6819      	ldr	r1, [r3, #0]
 800f992:	4b21      	ldr	r3, [pc, #132]	; (800fa18 <tcp_timewait_input+0xe0>)
 800f994:	881b      	ldrh	r3, [r3, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	4b1d      	ldr	r3, [pc, #116]	; (800fa10 <tcp_timewait_input+0xd8>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f99e:	4b1f      	ldr	r3, [pc, #124]	; (800fa1c <tcp_timewait_input+0xe4>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9a2:	885b      	ldrh	r3, [r3, #2]
 800f9a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9a6:	4a1d      	ldr	r2, [pc, #116]	; (800fa1c <tcp_timewait_input+0xe4>)
 800f9a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9aa:	8812      	ldrh	r2, [r2, #0]
 800f9ac:	b292      	uxth	r2, r2
 800f9ae:	9202      	str	r2, [sp, #8]
 800f9b0:	9301      	str	r3, [sp, #4]
 800f9b2:	4b1b      	ldr	r3, [pc, #108]	; (800fa20 <tcp_timewait_input+0xe8>)
 800f9b4:	9300      	str	r3, [sp, #0]
 800f9b6:	4b1b      	ldr	r3, [pc, #108]	; (800fa24 <tcp_timewait_input+0xec>)
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f002 fe70 	bl	80126a0 <tcp_rst>
      return;
 800f9c0:	e01b      	b.n	800f9fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f9c2:	4b0f      	ldr	r3, [pc, #60]	; (800fa00 <tcp_timewait_input+0xc8>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d003      	beq.n	800f9d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f9ce:	4b16      	ldr	r3, [pc, #88]	; (800fa28 <tcp_timewait_input+0xf0>)
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f9d6:	4b10      	ldr	r3, [pc, #64]	; (800fa18 <tcp_timewait_input+0xe0>)
 800f9d8:	881b      	ldrh	r3, [r3, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00c      	beq.n	800f9f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	8b5b      	ldrh	r3, [r3, #26]
 800f9e2:	f043 0302 	orr.w	r3, r3, #2
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f002 f8a3 	bl	8011b38 <tcp_output>
  }
  return;
 800f9f2:	e001      	b.n	800f9f8 <tcp_timewait_input+0xc0>
    return;
 800f9f4:	bf00      	nop
 800f9f6:	e000      	b.n	800f9fa <tcp_timewait_input+0xc2>
  return;
 800f9f8:	bf00      	nop
}
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	20004afc 	.word	0x20004afc
 800fa04:	0801a0ec 	.word	0x0801a0ec
 800fa08:	0801a304 	.word	0x0801a304
 800fa0c:	0801a138 	.word	0x0801a138
 800fa10:	20004af0 	.word	0x20004af0
 800fa14:	20004af4 	.word	0x20004af4
 800fa18:	20004afa 	.word	0x20004afa
 800fa1c:	20004ae0 	.word	0x20004ae0
 800fa20:	200096e0 	.word	0x200096e0
 800fa24:	200096e4 	.word	0x200096e4
 800fa28:	2000ce08 	.word	0x2000ce08

0800fa2c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b08d      	sub	sp, #52	; 0x34
 800fa30:	af04      	add	r7, sp, #16
 800fa32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <tcp_process+0x24>
 800fa42:	4ba5      	ldr	r3, [pc, #660]	; (800fcd8 <tcp_process+0x2ac>)
 800fa44:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fa48:	49a4      	ldr	r1, [pc, #656]	; (800fcdc <tcp_process+0x2b0>)
 800fa4a:	48a5      	ldr	r0, [pc, #660]	; (800fce0 <tcp_process+0x2b4>)
 800fa4c:	f008 fa3c 	bl	8017ec8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fa50:	4ba4      	ldr	r3, [pc, #656]	; (800fce4 <tcp_process+0x2b8>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	f003 0304 	and.w	r3, r3, #4
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d04e      	beq.n	800fafa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	7d1b      	ldrb	r3, [r3, #20]
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d108      	bne.n	800fa76 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa68:	4b9f      	ldr	r3, [pc, #636]	; (800fce8 <tcp_process+0x2bc>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d123      	bne.n	800fab8 <tcp_process+0x8c>
        acceptable = 1;
 800fa70:	2301      	movs	r3, #1
 800fa72:	76fb      	strb	r3, [r7, #27]
 800fa74:	e020      	b.n	800fab8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa7a:	4b9c      	ldr	r3, [pc, #624]	; (800fcec <tcp_process+0x2c0>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d102      	bne.n	800fa88 <tcp_process+0x5c>
        acceptable = 1;
 800fa82:	2301      	movs	r3, #1
 800fa84:	76fb      	strb	r3, [r7, #27]
 800fa86:	e017      	b.n	800fab8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa88:	4b98      	ldr	r3, [pc, #608]	; (800fcec <tcp_process+0x2c0>)
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	db10      	blt.n	800fab8 <tcp_process+0x8c>
 800fa96:	4b95      	ldr	r3, [pc, #596]	; (800fcec <tcp_process+0x2c0>)
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800faa2:	440b      	add	r3, r1
 800faa4:	1ad3      	subs	r3, r2, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dc06      	bgt.n	800fab8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	8b5b      	ldrh	r3, [r3, #26]
 800faae:	f043 0302 	orr.w	r3, r3, #2
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fab8:	7efb      	ldrb	r3, [r7, #27]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d01b      	beq.n	800faf6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	7d1b      	ldrb	r3, [r3, #20]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d106      	bne.n	800fad4 <tcp_process+0xa8>
 800fac6:	4b84      	ldr	r3, [pc, #528]	; (800fcd8 <tcp_process+0x2ac>)
 800fac8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800facc:	4988      	ldr	r1, [pc, #544]	; (800fcf0 <tcp_process+0x2c4>)
 800face:	4884      	ldr	r0, [pc, #528]	; (800fce0 <tcp_process+0x2b4>)
 800fad0:	f008 f9fa 	bl	8017ec8 <iprintf>
      recv_flags |= TF_RESET;
 800fad4:	4b87      	ldr	r3, [pc, #540]	; (800fcf4 <tcp_process+0x2c8>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f043 0308 	orr.w	r3, r3, #8
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	4b85      	ldr	r3, [pc, #532]	; (800fcf4 <tcp_process+0x2c8>)
 800fae0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8b5b      	ldrh	r3, [r3, #26]
 800fae6:	f023 0301 	bic.w	r3, r3, #1
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800faf0:	f06f 030d 	mvn.w	r3, #13
 800faf4:	e37a      	b.n	80101ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800faf6:	2300      	movs	r3, #0
 800faf8:	e378      	b.n	80101ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fafa:	4b7a      	ldr	r3, [pc, #488]	; (800fce4 <tcp_process+0x2b8>)
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	f003 0302 	and.w	r3, r3, #2
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d010      	beq.n	800fb28 <tcp_process+0xfc>
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	7d1b      	ldrb	r3, [r3, #20]
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d00c      	beq.n	800fb28 <tcp_process+0xfc>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	7d1b      	ldrb	r3, [r3, #20]
 800fb12:	2b03      	cmp	r3, #3
 800fb14:	d008      	beq.n	800fb28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8b5b      	ldrh	r3, [r3, #26]
 800fb1a:	f043 0302 	orr.w	r3, r3, #2
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	e361      	b.n	80101ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	8b5b      	ldrh	r3, [r3, #26]
 800fb2c:	f003 0310 	and.w	r3, r3, #16
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d103      	bne.n	800fb3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb34:	4b70      	ldr	r3, [pc, #448]	; (800fcf8 <tcp_process+0x2cc>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f001 fc2d 	bl	80113ac <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	7d1b      	ldrb	r3, [r3, #20]
 800fb56:	3b02      	subs	r3, #2
 800fb58:	2b07      	cmp	r3, #7
 800fb5a:	f200 8337 	bhi.w	80101cc <tcp_process+0x7a0>
 800fb5e:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <tcp_process+0x138>)
 800fb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb64:	0800fb85 	.word	0x0800fb85
 800fb68:	0800fdb5 	.word	0x0800fdb5
 800fb6c:	0800ff2d 	.word	0x0800ff2d
 800fb70:	0800ff57 	.word	0x0800ff57
 800fb74:	0801007b 	.word	0x0801007b
 800fb78:	0800ff2d 	.word	0x0800ff2d
 800fb7c:	08010107 	.word	0x08010107
 800fb80:	08010197 	.word	0x08010197
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fb84:	4b57      	ldr	r3, [pc, #348]	; (800fce4 <tcp_process+0x2b8>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f000 80e4 	beq.w	800fd5a <tcp_process+0x32e>
 800fb92:	4b54      	ldr	r3, [pc, #336]	; (800fce4 <tcp_process+0x2b8>)
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f000 80dd 	beq.w	800fd5a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fba4:	1c5a      	adds	r2, r3, #1
 800fba6:	4b50      	ldr	r3, [pc, #320]	; (800fce8 <tcp_process+0x2bc>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	f040 80d5 	bne.w	800fd5a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fbb0:	4b4e      	ldr	r3, [pc, #312]	; (800fcec <tcp_process+0x2c0>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fbc2:	4b49      	ldr	r3, [pc, #292]	; (800fce8 <tcp_process+0x2bc>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fbca:	4b4c      	ldr	r3, [pc, #304]	; (800fcfc <tcp_process+0x2d0>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	89db      	ldrh	r3, [r3, #14]
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fbe4:	4b41      	ldr	r3, [pc, #260]	; (800fcec <tcp_process+0x2c0>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	1e5a      	subs	r2, r3, #1
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2204      	movs	r2, #4
 800fbf2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f006 fcb7 	bl	8016570 <ip4_route>
 800fc02:	4601      	mov	r1, r0
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	3304      	adds	r3, #4
 800fc08:	461a      	mov	r2, r3
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f7ff f88e 	bl	800ed2c <tcp_eff_send_mss_netif>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc1c:	009a      	lsls	r2, r3, #2
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc22:	005b      	lsls	r3, r3, #1
 800fc24:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc28:	428b      	cmp	r3, r1
 800fc2a:	bf38      	it	cc
 800fc2c:	460b      	movcc	r3, r1
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d204      	bcs.n	800fc3c <tcp_process+0x210>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	e00d      	b.n	800fc58 <tcp_process+0x22c>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc40:	005b      	lsls	r3, r3, #1
 800fc42:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d904      	bls.n	800fc54 <tcp_process+0x228>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc4e:	005b      	lsls	r3, r3, #1
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	e001      	b.n	800fc58 <tcp_process+0x22c>
 800fc54:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d106      	bne.n	800fc76 <tcp_process+0x24a>
 800fc68:	4b1b      	ldr	r3, [pc, #108]	; (800fcd8 <tcp_process+0x2ac>)
 800fc6a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fc6e:	4924      	ldr	r1, [pc, #144]	; (800fd00 <tcp_process+0x2d4>)
 800fc70:	481b      	ldr	r0, [pc, #108]	; (800fce0 <tcp_process+0x2b4>)
 800fc72:	f008 f929 	bl	8017ec8 <iprintf>
        --pcb->snd_queuelen;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc8a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d111      	bne.n	800fcb6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc96:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d106      	bne.n	800fcac <tcp_process+0x280>
 800fc9e:	4b0e      	ldr	r3, [pc, #56]	; (800fcd8 <tcp_process+0x2ac>)
 800fca0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fca4:	4917      	ldr	r1, [pc, #92]	; (800fd04 <tcp_process+0x2d8>)
 800fca6:	480e      	ldr	r0, [pc, #56]	; (800fce0 <tcp_process+0x2b4>)
 800fca8:	f008 f90e 	bl	8017ec8 <iprintf>
          pcb->unsent = rseg->next;
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	66da      	str	r2, [r3, #108]	; 0x6c
 800fcb4:	e003      	b.n	800fcbe <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fcbe:	69f8      	ldr	r0, [r7, #28]
 800fcc0:	f7fe fd3d 	bl	800e73e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d11d      	bne.n	800fd08 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcd2:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcd4:	e01f      	b.n	800fd16 <tcp_process+0x2ea>
 800fcd6:	bf00      	nop
 800fcd8:	0801a0ec 	.word	0x0801a0ec
 800fcdc:	0801a324 	.word	0x0801a324
 800fce0:	0801a138 	.word	0x0801a138
 800fce4:	20004afc 	.word	0x20004afc
 800fce8:	20004af4 	.word	0x20004af4
 800fcec:	20004af0 	.word	0x20004af0
 800fcf0:	0801a340 	.word	0x0801a340
 800fcf4:	20004afd 	.word	0x20004afd
 800fcf8:	2000ce08 	.word	0x2000ce08
 800fcfc:	20004ae0 	.word	0x20004ae0
 800fd00:	0801a360 	.word	0x0801a360
 800fd04:	0801a378 	.word	0x0801a378
        } else {
          pcb->rtime = 0;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2200      	movs	r2, #0
 800fd12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00a      	beq.n	800fd36 <tcp_process+0x30a>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	6910      	ldr	r0, [r2, #16]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	6879      	ldr	r1, [r7, #4]
 800fd2e:	4798      	blx	r3
 800fd30:	4603      	mov	r3, r0
 800fd32:	76bb      	strb	r3, [r7, #26]
 800fd34:	e001      	b.n	800fd3a <tcp_process+0x30e>
 800fd36:	2300      	movs	r3, #0
 800fd38:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fd3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd3e:	f113 0f0d 	cmn.w	r3, #13
 800fd42:	d102      	bne.n	800fd4a <tcp_process+0x31e>
          return ERR_ABRT;
 800fd44:	f06f 030c 	mvn.w	r3, #12
 800fd48:	e250      	b.n	80101ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8b5b      	ldrh	r3, [r3, #26]
 800fd4e:	f043 0302 	orr.w	r3, r3, #2
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd58:	e23a      	b.n	80101d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd5a:	4b9d      	ldr	r3, [pc, #628]	; (800ffd0 <tcp_process+0x5a4>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	f003 0310 	and.w	r3, r3, #16
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f000 8234 	beq.w	80101d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd68:	4b9a      	ldr	r3, [pc, #616]	; (800ffd4 <tcp_process+0x5a8>)
 800fd6a:	6819      	ldr	r1, [r3, #0]
 800fd6c:	4b9a      	ldr	r3, [pc, #616]	; (800ffd8 <tcp_process+0x5ac>)
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	461a      	mov	r2, r3
 800fd72:	4b9a      	ldr	r3, [pc, #616]	; (800ffdc <tcp_process+0x5b0>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd78:	4b99      	ldr	r3, [pc, #612]	; (800ffe0 <tcp_process+0x5b4>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd7c:	885b      	ldrh	r3, [r3, #2]
 800fd7e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd80:	4a97      	ldr	r2, [pc, #604]	; (800ffe0 <tcp_process+0x5b4>)
 800fd82:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd84:	8812      	ldrh	r2, [r2, #0]
 800fd86:	b292      	uxth	r2, r2
 800fd88:	9202      	str	r2, [sp, #8]
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	4b95      	ldr	r3, [pc, #596]	; (800ffe4 <tcp_process+0x5b8>)
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	4b95      	ldr	r3, [pc, #596]	; (800ffe8 <tcp_process+0x5bc>)
 800fd92:	4602      	mov	r2, r0
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f002 fc83 	bl	80126a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fda0:	2b05      	cmp	r3, #5
 800fda2:	f200 8215 	bhi.w	80101d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f002 fa4d 	bl	801224c <tcp_rexmit_rto>
      break;
 800fdb2:	e20d      	b.n	80101d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fdb4:	4b86      	ldr	r3, [pc, #536]	; (800ffd0 <tcp_process+0x5a4>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	f003 0310 	and.w	r3, r3, #16
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	f000 80a1 	beq.w	800ff04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdc2:	4b84      	ldr	r3, [pc, #528]	; (800ffd4 <tcp_process+0x5a8>)
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fdca:	1ad3      	subs	r3, r2, r3
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	db7e      	blt.n	800fed0 <tcp_process+0x4a4>
 800fdd2:	4b80      	ldr	r3, [pc, #512]	; (800ffd4 <tcp_process+0x5a8>)
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	dc77      	bgt.n	800fed0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2204      	movs	r2, #4
 800fde4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d102      	bne.n	800fdf4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fdee:	23fa      	movs	r3, #250	; 0xfa
 800fdf0:	76bb      	strb	r3, [r7, #26]
 800fdf2:	e01d      	b.n	800fe30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdf8:	699b      	ldr	r3, [r3, #24]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_process+0x3e0>
 800fdfe:	4b7b      	ldr	r3, [pc, #492]	; (800ffec <tcp_process+0x5c0>)
 800fe00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fe04:	497a      	ldr	r1, [pc, #488]	; (800fff0 <tcp_process+0x5c4>)
 800fe06:	487b      	ldr	r0, [pc, #492]	; (800fff4 <tcp_process+0x5c8>)
 800fe08:	f008 f85e 	bl	8017ec8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00a      	beq.n	800fe2c <tcp_process+0x400>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fe1a:	699b      	ldr	r3, [r3, #24]
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	6910      	ldr	r0, [r2, #16]
 800fe20:	2200      	movs	r2, #0
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	4798      	blx	r3
 800fe26:	4603      	mov	r3, r0
 800fe28:	76bb      	strb	r3, [r7, #26]
 800fe2a:	e001      	b.n	800fe30 <tcp_process+0x404>
 800fe2c:	23f0      	movs	r3, #240	; 0xf0
 800fe2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fe30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d00a      	beq.n	800fe4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fe38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe3c:	f113 0f0d 	cmn.w	r3, #13
 800fe40:	d002      	beq.n	800fe48 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f7fd ff90 	bl	800dd68 <tcp_abort>
            }
            return ERR_ABRT;
 800fe48:	f06f 030c 	mvn.w	r3, #12
 800fe4c:	e1ce      	b.n	80101ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 fae0 	bl	8010414 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fe54:	4b68      	ldr	r3, [pc, #416]	; (800fff8 <tcp_process+0x5cc>)
 800fe56:	881b      	ldrh	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <tcp_process+0x43c>
            recv_acked--;
 800fe5c:	4b66      	ldr	r3, [pc, #408]	; (800fff8 <tcp_process+0x5cc>)
 800fe5e:	881b      	ldrh	r3, [r3, #0]
 800fe60:	3b01      	subs	r3, #1
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	4b64      	ldr	r3, [pc, #400]	; (800fff8 <tcp_process+0x5cc>)
 800fe66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe6c:	009a      	lsls	r2, r3, #2
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe72:	005b      	lsls	r3, r3, #1
 800fe74:	f241 111c 	movw	r1, #4380	; 0x111c
 800fe78:	428b      	cmp	r3, r1
 800fe7a:	bf38      	it	cc
 800fe7c:	460b      	movcc	r3, r1
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d204      	bcs.n	800fe8c <tcp_process+0x460>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	e00d      	b.n	800fea8 <tcp_process+0x47c>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe90:	005b      	lsls	r3, r3, #1
 800fe92:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d904      	bls.n	800fea4 <tcp_process+0x478>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe9e:	005b      	lsls	r3, r3, #1
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	e001      	b.n	800fea8 <tcp_process+0x47c>
 800fea4:	f241 131c 	movw	r3, #4380	; 0x111c
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800feae:	4b53      	ldr	r3, [pc, #332]	; (800fffc <tcp_process+0x5d0>)
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	f003 0320 	and.w	r3, r3, #32
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d037      	beq.n	800ff2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8b5b      	ldrh	r3, [r3, #26]
 800febe:	f043 0302 	orr.w	r3, r3, #2
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2207      	movs	r2, #7
 800fecc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fece:	e02c      	b.n	800ff2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed0:	4b40      	ldr	r3, [pc, #256]	; (800ffd4 <tcp_process+0x5a8>)
 800fed2:	6819      	ldr	r1, [r3, #0]
 800fed4:	4b40      	ldr	r3, [pc, #256]	; (800ffd8 <tcp_process+0x5ac>)
 800fed6:	881b      	ldrh	r3, [r3, #0]
 800fed8:	461a      	mov	r2, r3
 800feda:	4b40      	ldr	r3, [pc, #256]	; (800ffdc <tcp_process+0x5b0>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fee0:	4b3f      	ldr	r3, [pc, #252]	; (800ffe0 <tcp_process+0x5b4>)
 800fee2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee4:	885b      	ldrh	r3, [r3, #2]
 800fee6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fee8:	4a3d      	ldr	r2, [pc, #244]	; (800ffe0 <tcp_process+0x5b4>)
 800feea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feec:	8812      	ldrh	r2, [r2, #0]
 800feee:	b292      	uxth	r2, r2
 800fef0:	9202      	str	r2, [sp, #8]
 800fef2:	9301      	str	r3, [sp, #4]
 800fef4:	4b3b      	ldr	r3, [pc, #236]	; (800ffe4 <tcp_process+0x5b8>)
 800fef6:	9300      	str	r3, [sp, #0]
 800fef8:	4b3b      	ldr	r3, [pc, #236]	; (800ffe8 <tcp_process+0x5bc>)
 800fefa:	4602      	mov	r2, r0
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f002 fbcf 	bl	80126a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ff02:	e167      	b.n	80101d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff04:	4b32      	ldr	r3, [pc, #200]	; (800ffd0 <tcp_process+0x5a4>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	f003 0302 	and.w	r3, r3, #2
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 8161 	beq.w	80101d4 <tcp_process+0x7a8>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff16:	1e5a      	subs	r2, r3, #1
 800ff18:	4b30      	ldr	r3, [pc, #192]	; (800ffdc <tcp_process+0x5b0>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	f040 8159 	bne.w	80101d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f002 f9b4 	bl	8012290 <tcp_rexmit>
      break;
 800ff28:	e154      	b.n	80101d4 <tcp_process+0x7a8>
 800ff2a:	e153      	b.n	80101d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 fa71 	bl	8010414 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff32:	4b32      	ldr	r3, [pc, #200]	; (800fffc <tcp_process+0x5d0>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	f003 0320 	and.w	r3, r3, #32
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f000 814c 	beq.w	80101d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	8b5b      	ldrh	r3, [r3, #26]
 800ff44:	f043 0302 	orr.w	r3, r3, #2
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2207      	movs	r2, #7
 800ff52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff54:	e140      	b.n	80101d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 fa5c 	bl	8010414 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff5c:	4b27      	ldr	r3, [pc, #156]	; (800fffc <tcp_process+0x5d0>)
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	f003 0320 	and.w	r3, r3, #32
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d071      	beq.n	801004c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff68:	4b19      	ldr	r3, [pc, #100]	; (800ffd0 <tcp_process+0x5a4>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 0310 	and.w	r3, r3, #16
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d060      	beq.n	8010036 <tcp_process+0x60a>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff78:	4b16      	ldr	r3, [pc, #88]	; (800ffd4 <tcp_process+0x5a8>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d15a      	bne.n	8010036 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d156      	bne.n	8010036 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	8b5b      	ldrh	r3, [r3, #26]
 800ff8c:	f043 0302 	orr.w	r3, r3, #2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7fe fdbe 	bl	800eb18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ff9c:	4b18      	ldr	r3, [pc, #96]	; (8010000 <tcp_process+0x5d4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d105      	bne.n	800ffb2 <tcp_process+0x586>
 800ffa6:	4b16      	ldr	r3, [pc, #88]	; (8010000 <tcp_process+0x5d4>)
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	4a14      	ldr	r2, [pc, #80]	; (8010000 <tcp_process+0x5d4>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	e02e      	b.n	8010010 <tcp_process+0x5e4>
 800ffb2:	4b13      	ldr	r3, [pc, #76]	; (8010000 <tcp_process+0x5d4>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e027      	b.n	801000a <tcp_process+0x5de>
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d11f      	bne.n	8010004 <tcp_process+0x5d8>
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	68da      	ldr	r2, [r3, #12]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	60da      	str	r2, [r3, #12]
 800ffcc:	e020      	b.n	8010010 <tcp_process+0x5e4>
 800ffce:	bf00      	nop
 800ffd0:	20004afc 	.word	0x20004afc
 800ffd4:	20004af4 	.word	0x20004af4
 800ffd8:	20004afa 	.word	0x20004afa
 800ffdc:	20004af0 	.word	0x20004af0
 800ffe0:	20004ae0 	.word	0x20004ae0
 800ffe4:	200096e0 	.word	0x200096e0
 800ffe8:	200096e4 	.word	0x200096e4
 800ffec:	0801a0ec 	.word	0x0801a0ec
 800fff0:	0801a38c 	.word	0x0801a38c
 800fff4:	0801a138 	.word	0x0801a138
 800fff8:	20004af8 	.word	0x20004af8
 800fffc:	20004afd 	.word	0x20004afd
 8010000:	2000ce04 	.word	0x2000ce04
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1d4      	bne.n	800ffba <tcp_process+0x58e>
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	60da      	str	r2, [r3, #12]
 8010016:	4b77      	ldr	r3, [pc, #476]	; (80101f4 <tcp_process+0x7c8>)
 8010018:	2201      	movs	r2, #1
 801001a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	220a      	movs	r2, #10
 8010020:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010022:	4b75      	ldr	r3, [pc, #468]	; (80101f8 <tcp_process+0x7cc>)
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	60da      	str	r2, [r3, #12]
 801002a:	4a73      	ldr	r2, [pc, #460]	; (80101f8 <tcp_process+0x7cc>)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6013      	str	r3, [r2, #0]
 8010030:	f002 fcf8 	bl	8012a24 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010034:	e0d2      	b.n	80101dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8b5b      	ldrh	r3, [r3, #26]
 801003a:	f043 0302 	orr.w	r3, r3, #2
 801003e:	b29a      	uxth	r2, r3
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2208      	movs	r2, #8
 8010048:	751a      	strb	r2, [r3, #20]
      break;
 801004a:	e0c7      	b.n	80101dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801004c:	4b6b      	ldr	r3, [pc, #428]	; (80101fc <tcp_process+0x7d0>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	f003 0310 	and.w	r3, r3, #16
 8010054:	2b00      	cmp	r3, #0
 8010056:	f000 80c1 	beq.w	80101dc <tcp_process+0x7b0>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801005e:	4b68      	ldr	r3, [pc, #416]	; (8010200 <tcp_process+0x7d4>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	429a      	cmp	r2, r3
 8010064:	f040 80ba 	bne.w	80101dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801006c:	2b00      	cmp	r3, #0
 801006e:	f040 80b5 	bne.w	80101dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2206      	movs	r2, #6
 8010076:	751a      	strb	r2, [r3, #20]
      break;
 8010078:	e0b0      	b.n	80101dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f9ca 	bl	8010414 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010080:	4b60      	ldr	r3, [pc, #384]	; (8010204 <tcp_process+0x7d8>)
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	f003 0320 	and.w	r3, r3, #32
 8010088:	2b00      	cmp	r3, #0
 801008a:	f000 80a9 	beq.w	80101e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	8b5b      	ldrh	r3, [r3, #26]
 8010092:	f043 0302 	orr.w	r3, r3, #2
 8010096:	b29a      	uxth	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f7fe fd3b 	bl	800eb18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100a2:	4b59      	ldr	r3, [pc, #356]	; (8010208 <tcp_process+0x7dc>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d105      	bne.n	80100b8 <tcp_process+0x68c>
 80100ac:	4b56      	ldr	r3, [pc, #344]	; (8010208 <tcp_process+0x7dc>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	4a55      	ldr	r2, [pc, #340]	; (8010208 <tcp_process+0x7dc>)
 80100b4:	6013      	str	r3, [r2, #0]
 80100b6:	e013      	b.n	80100e0 <tcp_process+0x6b4>
 80100b8:	4b53      	ldr	r3, [pc, #332]	; (8010208 <tcp_process+0x7dc>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	613b      	str	r3, [r7, #16]
 80100be:	e00c      	b.n	80100da <tcp_process+0x6ae>
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d104      	bne.n	80100d4 <tcp_process+0x6a8>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	68da      	ldr	r2, [r3, #12]
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	60da      	str	r2, [r3, #12]
 80100d2:	e005      	b.n	80100e0 <tcp_process+0x6b4>
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	613b      	str	r3, [r7, #16]
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1ef      	bne.n	80100c0 <tcp_process+0x694>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	60da      	str	r2, [r3, #12]
 80100e6:	4b43      	ldr	r3, [pc, #268]	; (80101f4 <tcp_process+0x7c8>)
 80100e8:	2201      	movs	r2, #1
 80100ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	220a      	movs	r2, #10
 80100f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80100f2:	4b41      	ldr	r3, [pc, #260]	; (80101f8 <tcp_process+0x7cc>)
 80100f4:	681a      	ldr	r2, [r3, #0]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	60da      	str	r2, [r3, #12]
 80100fa:	4a3f      	ldr	r2, [pc, #252]	; (80101f8 <tcp_process+0x7cc>)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6013      	str	r3, [r2, #0]
 8010100:	f002 fc90 	bl	8012a24 <tcp_timer_needed>
      }
      break;
 8010104:	e06c      	b.n	80101e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f984 	bl	8010414 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801010c:	4b3b      	ldr	r3, [pc, #236]	; (80101fc <tcp_process+0x7d0>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	f003 0310 	and.w	r3, r3, #16
 8010114:	2b00      	cmp	r3, #0
 8010116:	d065      	beq.n	80101e4 <tcp_process+0x7b8>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801011c:	4b38      	ldr	r3, [pc, #224]	; (8010200 <tcp_process+0x7d4>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	429a      	cmp	r2, r3
 8010122:	d15f      	bne.n	80101e4 <tcp_process+0x7b8>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010128:	2b00      	cmp	r3, #0
 801012a:	d15b      	bne.n	80101e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7fe fcf3 	bl	800eb18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010132:	4b35      	ldr	r3, [pc, #212]	; (8010208 <tcp_process+0x7dc>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	429a      	cmp	r2, r3
 801013a:	d105      	bne.n	8010148 <tcp_process+0x71c>
 801013c:	4b32      	ldr	r3, [pc, #200]	; (8010208 <tcp_process+0x7dc>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	68db      	ldr	r3, [r3, #12]
 8010142:	4a31      	ldr	r2, [pc, #196]	; (8010208 <tcp_process+0x7dc>)
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	e013      	b.n	8010170 <tcp_process+0x744>
 8010148:	4b2f      	ldr	r3, [pc, #188]	; (8010208 <tcp_process+0x7dc>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	e00c      	b.n	801016a <tcp_process+0x73e>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	687a      	ldr	r2, [r7, #4]
 8010156:	429a      	cmp	r2, r3
 8010158:	d104      	bne.n	8010164 <tcp_process+0x738>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	68da      	ldr	r2, [r3, #12]
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	60da      	str	r2, [r3, #12]
 8010162:	e005      	b.n	8010170 <tcp_process+0x744>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d1ef      	bne.n	8010150 <tcp_process+0x724>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2200      	movs	r2, #0
 8010174:	60da      	str	r2, [r3, #12]
 8010176:	4b1f      	ldr	r3, [pc, #124]	; (80101f4 <tcp_process+0x7c8>)
 8010178:	2201      	movs	r2, #1
 801017a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	220a      	movs	r2, #10
 8010180:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010182:	4b1d      	ldr	r3, [pc, #116]	; (80101f8 <tcp_process+0x7cc>)
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	60da      	str	r2, [r3, #12]
 801018a:	4a1b      	ldr	r2, [pc, #108]	; (80101f8 <tcp_process+0x7cc>)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	6013      	str	r3, [r2, #0]
 8010190:	f002 fc48 	bl	8012a24 <tcp_timer_needed>
      }
      break;
 8010194:	e026      	b.n	80101e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f93c 	bl	8010414 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801019c:	4b17      	ldr	r3, [pc, #92]	; (80101fc <tcp_process+0x7d0>)
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	f003 0310 	and.w	r3, r3, #16
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d01f      	beq.n	80101e8 <tcp_process+0x7bc>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101ac:	4b14      	ldr	r3, [pc, #80]	; (8010200 <tcp_process+0x7d4>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d119      	bne.n	80101e8 <tcp_process+0x7bc>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d115      	bne.n	80101e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80101bc:	4b11      	ldr	r3, [pc, #68]	; (8010204 <tcp_process+0x7d8>)
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	f043 0310 	orr.w	r3, r3, #16
 80101c4:	b2da      	uxtb	r2, r3
 80101c6:	4b0f      	ldr	r3, [pc, #60]	; (8010204 <tcp_process+0x7d8>)
 80101c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80101ca:	e00d      	b.n	80101e8 <tcp_process+0x7bc>
    default:
      break;
 80101cc:	bf00      	nop
 80101ce:	e00c      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101d0:	bf00      	nop
 80101d2:	e00a      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101d4:	bf00      	nop
 80101d6:	e008      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101d8:	bf00      	nop
 80101da:	e006      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101dc:	bf00      	nop
 80101de:	e004      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101e0:	bf00      	nop
 80101e2:	e002      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101e4:	bf00      	nop
 80101e6:	e000      	b.n	80101ea <tcp_process+0x7be>
      break;
 80101e8:	bf00      	nop
  }
  return ERR_OK;
 80101ea:	2300      	movs	r3, #0
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3724      	adds	r7, #36	; 0x24
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd90      	pop	{r4, r7, pc}
 80101f4:	2000ce00 	.word	0x2000ce00
 80101f8:	2000ce14 	.word	0x2000ce14
 80101fc:	20004afc 	.word	0x20004afc
 8010200:	20004af4 	.word	0x20004af4
 8010204:	20004afd 	.word	0x20004afd
 8010208:	2000ce04 	.word	0x2000ce04

0801020c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d106      	bne.n	801022a <tcp_oos_insert_segment+0x1e>
 801021c:	4b3b      	ldr	r3, [pc, #236]	; (801030c <tcp_oos_insert_segment+0x100>)
 801021e:	f240 421f 	movw	r2, #1055	; 0x41f
 8010222:	493b      	ldr	r1, [pc, #236]	; (8010310 <tcp_oos_insert_segment+0x104>)
 8010224:	483b      	ldr	r0, [pc, #236]	; (8010314 <tcp_oos_insert_segment+0x108>)
 8010226:	f007 fe4f 	bl	8017ec8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	899b      	ldrh	r3, [r3, #12]
 8010230:	b29b      	uxth	r3, r3
 8010232:	4618      	mov	r0, r3
 8010234:	f7fb fc3c 	bl	800bab0 <lwip_htons>
 8010238:	4603      	mov	r3, r0
 801023a:	b2db      	uxtb	r3, r3
 801023c:	f003 0301 	and.w	r3, r3, #1
 8010240:	2b00      	cmp	r3, #0
 8010242:	d028      	beq.n	8010296 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010244:	6838      	ldr	r0, [r7, #0]
 8010246:	f7fe fa65 	bl	800e714 <tcp_segs_free>
    next = NULL;
 801024a:	2300      	movs	r3, #0
 801024c:	603b      	str	r3, [r7, #0]
 801024e:	e056      	b.n	80102fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	899b      	ldrh	r3, [r3, #12]
 8010256:	b29b      	uxth	r3, r3
 8010258:	4618      	mov	r0, r3
 801025a:	f7fb fc29 	bl	800bab0 <lwip_htons>
 801025e:	4603      	mov	r3, r0
 8010260:	b2db      	uxtb	r3, r3
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00d      	beq.n	8010286 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	899b      	ldrh	r3, [r3, #12]
 8010270:	b29c      	uxth	r4, r3
 8010272:	2001      	movs	r0, #1
 8010274:	f7fb fc1c 	bl	800bab0 <lwip_htons>
 8010278:	4603      	mov	r3, r0
 801027a:	461a      	mov	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	4322      	orrs	r2, r4
 8010282:	b292      	uxth	r2, r2
 8010284:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f7fe fa54 	bl	800e73e <tcp_seg_free>
    while (next &&
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00e      	beq.n	80102ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	891b      	ldrh	r3, [r3, #8]
 80102a0:	461a      	mov	r2, r3
 80102a2:	4b1d      	ldr	r3, [pc, #116]	; (8010318 <tcp_oos_insert_segment+0x10c>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	441a      	add	r2, r3
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	6839      	ldr	r1, [r7, #0]
 80102b0:	8909      	ldrh	r1, [r1, #8]
 80102b2:	440b      	add	r3, r1
 80102b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	daca      	bge.n	8010250 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d01e      	beq.n	80102fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	891b      	ldrh	r3, [r3, #8]
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b14      	ldr	r3, [pc, #80]	; (8010318 <tcp_oos_insert_segment+0x10c>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	441a      	add	r2, r3
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	dd12      	ble.n	80102fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	b29a      	uxth	r2, r3
 80102e0:	4b0d      	ldr	r3, [pc, #52]	; (8010318 <tcp_oos_insert_segment+0x10c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	891b      	ldrh	r3, [r3, #8]
 80102f6:	4619      	mov	r1, r3
 80102f8:	4610      	mov	r0, r2
 80102fa:	f7fc fe0b 	bl	800cf14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	601a      	str	r2, [r3, #0]
}
 8010304:	bf00      	nop
 8010306:	3714      	adds	r7, #20
 8010308:	46bd      	mov	sp, r7
 801030a:	bd90      	pop	{r4, r7, pc}
 801030c:	0801a0ec 	.word	0x0801a0ec
 8010310:	0801a3ac 	.word	0x0801a3ac
 8010314:	0801a138 	.word	0x0801a138
 8010318:	20004af0 	.word	0x20004af0

0801031c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801031c:	b5b0      	push	{r4, r5, r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801032a:	e03e      	b.n	80103aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	4618      	mov	r0, r3
 801033c:	f7fc fffe 	bl	800d33c <pbuf_clen>
 8010340:	4603      	mov	r3, r0
 8010342:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801034a:	8a7a      	ldrh	r2, [r7, #18]
 801034c:	429a      	cmp	r2, r3
 801034e:	d906      	bls.n	801035e <tcp_free_acked_segments+0x42>
 8010350:	4b2a      	ldr	r3, [pc, #168]	; (80103fc <tcp_free_acked_segments+0xe0>)
 8010352:	f240 4257 	movw	r2, #1111	; 0x457
 8010356:	492a      	ldr	r1, [pc, #168]	; (8010400 <tcp_free_acked_segments+0xe4>)
 8010358:	482a      	ldr	r0, [pc, #168]	; (8010404 <tcp_free_acked_segments+0xe8>)
 801035a:	f007 fdb5 	bl	8017ec8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010364:	8a7b      	ldrh	r3, [r7, #18]
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	b29a      	uxth	r2, r3
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	891a      	ldrh	r2, [r3, #8]
 8010374:	4b24      	ldr	r3, [pc, #144]	; (8010408 <tcp_free_acked_segments+0xec>)
 8010376:	881b      	ldrh	r3, [r3, #0]
 8010378:	4413      	add	r3, r2
 801037a:	b29a      	uxth	r2, r3
 801037c:	4b22      	ldr	r3, [pc, #136]	; (8010408 <tcp_free_acked_segments+0xec>)
 801037e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010380:	6978      	ldr	r0, [r7, #20]
 8010382:	f7fe f9dc 	bl	800e73e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00c      	beq.n	80103aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <tcp_free_acked_segments+0x8e>
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <tcp_free_acked_segments+0x8e>
 801039c:	4b17      	ldr	r3, [pc, #92]	; (80103fc <tcp_free_acked_segments+0xe0>)
 801039e:	f240 4261 	movw	r2, #1121	; 0x461
 80103a2:	491a      	ldr	r1, [pc, #104]	; (801040c <tcp_free_acked_segments+0xf0>)
 80103a4:	4817      	ldr	r0, [pc, #92]	; (8010404 <tcp_free_acked_segments+0xe8>)
 80103a6:	f007 fd8f 	bl	8017ec8 <iprintf>
  while (seg_list != NULL &&
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d020      	beq.n	80103f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fb fb8f 	bl	800bada <lwip_htonl>
 80103bc:	4604      	mov	r4, r0
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	891b      	ldrh	r3, [r3, #8]
 80103c2:	461d      	mov	r5, r3
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	899b      	ldrh	r3, [r3, #12]
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fb fb6f 	bl	800bab0 <lwip_htons>
 80103d2:	4603      	mov	r3, r0
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	f003 0303 	and.w	r3, r3, #3
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <tcp_free_acked_segments+0xc6>
 80103de:	2301      	movs	r3, #1
 80103e0:	e000      	b.n	80103e4 <tcp_free_acked_segments+0xc8>
 80103e2:	2300      	movs	r3, #0
 80103e4:	442b      	add	r3, r5
 80103e6:	18e2      	adds	r2, r4, r3
 80103e8:	4b09      	ldr	r3, [pc, #36]	; (8010410 <tcp_free_acked_segments+0xf4>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	dd9c      	ble.n	801032c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80103f2:	68bb      	ldr	r3, [r7, #8]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3718      	adds	r7, #24
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bdb0      	pop	{r4, r5, r7, pc}
 80103fc:	0801a0ec 	.word	0x0801a0ec
 8010400:	0801a3d4 	.word	0x0801a3d4
 8010404:	0801a138 	.word	0x0801a138
 8010408:	20004af8 	.word	0x20004af8
 801040c:	0801a3fc 	.word	0x0801a3fc
 8010410:	20004af4 	.word	0x20004af4

08010414 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010414:	b5b0      	push	{r4, r5, r7, lr}
 8010416:	b094      	sub	sp, #80	; 0x50
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801041c:	2300      	movs	r3, #0
 801041e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d106      	bne.n	8010434 <tcp_receive+0x20>
 8010426:	4ba6      	ldr	r3, [pc, #664]	; (80106c0 <tcp_receive+0x2ac>)
 8010428:	f240 427b 	movw	r2, #1147	; 0x47b
 801042c:	49a5      	ldr	r1, [pc, #660]	; (80106c4 <tcp_receive+0x2b0>)
 801042e:	48a6      	ldr	r0, [pc, #664]	; (80106c8 <tcp_receive+0x2b4>)
 8010430:	f007 fd4a 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	7d1b      	ldrb	r3, [r3, #20]
 8010438:	2b03      	cmp	r3, #3
 801043a:	d806      	bhi.n	801044a <tcp_receive+0x36>
 801043c:	4ba0      	ldr	r3, [pc, #640]	; (80106c0 <tcp_receive+0x2ac>)
 801043e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010442:	49a2      	ldr	r1, [pc, #648]	; (80106cc <tcp_receive+0x2b8>)
 8010444:	48a0      	ldr	r0, [pc, #640]	; (80106c8 <tcp_receive+0x2b4>)
 8010446:	f007 fd3f 	bl	8017ec8 <iprintf>

  if (flags & TCP_ACK) {
 801044a:	4ba1      	ldr	r3, [pc, #644]	; (80106d0 <tcp_receive+0x2bc>)
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	f003 0310 	and.w	r3, r3, #16
 8010452:	2b00      	cmp	r3, #0
 8010454:	f000 8263 	beq.w	801091e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801045e:	461a      	mov	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010464:	4413      	add	r3, r2
 8010466:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801046c:	4b99      	ldr	r3, [pc, #612]	; (80106d4 <tcp_receive+0x2c0>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	db1b      	blt.n	80104ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801047a:	4b96      	ldr	r3, [pc, #600]	; (80106d4 <tcp_receive+0x2c0>)
 801047c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801047e:	429a      	cmp	r2, r3
 8010480:	d106      	bne.n	8010490 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010486:	4b94      	ldr	r3, [pc, #592]	; (80106d8 <tcp_receive+0x2c4>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	1ad3      	subs	r3, r2, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	db0e      	blt.n	80104ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010494:	4b90      	ldr	r3, [pc, #576]	; (80106d8 <tcp_receive+0x2c4>)
 8010496:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010498:	429a      	cmp	r2, r3
 801049a:	d125      	bne.n	80104e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801049c:	4b8f      	ldr	r3, [pc, #572]	; (80106dc <tcp_receive+0x2c8>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	89db      	ldrh	r3, [r3, #14]
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d91c      	bls.n	80104e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80104ae:	4b8b      	ldr	r3, [pc, #556]	; (80106dc <tcp_receive+0x2c8>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	89db      	ldrh	r3, [r3, #14]
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d205      	bcs.n	80104d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80104d8:	4b7e      	ldr	r3, [pc, #504]	; (80106d4 <tcp_receive+0x2c0>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80104e0:	4b7d      	ldr	r3, [pc, #500]	; (80106d8 <tcp_receive+0x2c4>)
 80104e2:	681a      	ldr	r2, [r3, #0]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80104e8:	4b7b      	ldr	r3, [pc, #492]	; (80106d8 <tcp_receive+0x2c4>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	dc58      	bgt.n	80105a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80104f6:	4b7a      	ldr	r3, [pc, #488]	; (80106e0 <tcp_receive+0x2cc>)
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d14b      	bne.n	8010596 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010508:	4413      	add	r3, r2
 801050a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801050c:	429a      	cmp	r2, r3
 801050e:	d142      	bne.n	8010596 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010516:	2b00      	cmp	r3, #0
 8010518:	db3d      	blt.n	8010596 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801051e:	4b6e      	ldr	r3, [pc, #440]	; (80106d8 <tcp_receive+0x2c4>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	429a      	cmp	r2, r3
 8010524:	d137      	bne.n	8010596 <tcp_receive+0x182>
              found_dupack = 1;
 8010526:	2301      	movs	r3, #1
 8010528:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010530:	2bff      	cmp	r3, #255	; 0xff
 8010532:	d007      	beq.n	8010544 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801053a:	3301      	adds	r3, #1
 801053c:	b2da      	uxtb	r2, r3
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801054a:	2b03      	cmp	r3, #3
 801054c:	d91b      	bls.n	8010586 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010558:	4413      	add	r3, r2
 801055a:	b29a      	uxth	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010562:	429a      	cmp	r2, r3
 8010564:	d30a      	bcc.n	801057c <tcp_receive+0x168>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010570:	4413      	add	r3, r2
 8010572:	b29a      	uxth	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801057a:	e004      	b.n	8010586 <tcp_receive+0x172>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801058c:	2b02      	cmp	r3, #2
 801058e:	d902      	bls.n	8010596 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f001 fee9 	bl	8012368 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010598:	2b00      	cmp	r3, #0
 801059a:	f040 8160 	bne.w	801085e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80105a6:	e15a      	b.n	801085e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105a8:	4b4b      	ldr	r3, [pc, #300]	; (80106d8 <tcp_receive+0x2c4>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	3b01      	subs	r3, #1
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f2c0 814d 	blt.w	8010854 <tcp_receive+0x440>
 80105ba:	4b47      	ldr	r3, [pc, #284]	; (80106d8 <tcp_receive+0x2c4>)
 80105bc:	681a      	ldr	r2, [r3, #0]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f300 8145 	bgt.w	8010854 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	8b5b      	ldrh	r3, [r3, #26]
 80105ce:	f003 0304 	and.w	r3, r3, #4
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d010      	beq.n	80105f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8b5b      	ldrh	r3, [r3, #26]
 80105da:	f023 0304 	bic.w	r3, r3, #4
 80105de:	b29a      	uxth	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2200      	movs	r2, #0
 80105f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010606:	10db      	asrs	r3, r3, #3
 8010608:	b21b      	sxth	r3, r3
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010612:	b29b      	uxth	r3, r3
 8010614:	4413      	add	r3, r2
 8010616:	b29b      	uxth	r3, r3
 8010618:	b21a      	sxth	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010620:	4b2d      	ldr	r3, [pc, #180]	; (80106d8 <tcp_receive+0x2c4>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	b29a      	uxth	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801062a:	b29b      	uxth	r3, r3
 801062c:	1ad3      	subs	r3, r2, r3
 801062e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2200      	movs	r2, #0
 8010634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010638:	4b27      	ldr	r3, [pc, #156]	; (80106d8 <tcp_receive+0x2c4>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	7d1b      	ldrb	r3, [r3, #20]
 8010644:	2b03      	cmp	r3, #3
 8010646:	f240 8096 	bls.w	8010776 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010656:	429a      	cmp	r2, r3
 8010658:	d244      	bcs.n	80106e4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8b5b      	ldrh	r3, [r3, #26]
 801065e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010662:	2b00      	cmp	r3, #0
 8010664:	d001      	beq.n	801066a <tcp_receive+0x256>
 8010666:	2301      	movs	r3, #1
 8010668:	e000      	b.n	801066c <tcp_receive+0x258>
 801066a:	2302      	movs	r3, #2
 801066c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010670:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801067a:	fb12 f303 	smulbb	r3, r2, r3
 801067e:	b29b      	uxth	r3, r3
 8010680:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010682:	4293      	cmp	r3, r2
 8010684:	bf28      	it	cs
 8010686:	4613      	movcs	r3, r2
 8010688:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010690:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010692:	4413      	add	r3, r2
 8010694:	b29a      	uxth	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801069c:	429a      	cmp	r2, r3
 801069e:	d309      	bcc.n	80106b4 <tcp_receive+0x2a0>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80106a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106a8:	4413      	add	r3, r2
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106b2:	e060      	b.n	8010776 <tcp_receive+0x362>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106be:	e05a      	b.n	8010776 <tcp_receive+0x362>
 80106c0:	0801a0ec 	.word	0x0801a0ec
 80106c4:	0801a41c 	.word	0x0801a41c
 80106c8:	0801a138 	.word	0x0801a138
 80106cc:	0801a438 	.word	0x0801a438
 80106d0:	20004afc 	.word	0x20004afc
 80106d4:	20004af0 	.word	0x20004af0
 80106d8:	20004af4 	.word	0x20004af4
 80106dc:	20004ae0 	.word	0x20004ae0
 80106e0:	20004afa 	.word	0x20004afa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80106ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80106ec:	4413      	add	r3, r2
 80106ee:	b29a      	uxth	r2, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d309      	bcc.n	801070e <tcp_receive+0x2fa>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010702:	4413      	add	r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801070c:	e004      	b.n	8010718 <tcp_receive+0x304>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010724:	429a      	cmp	r2, r3
 8010726:	d326      	bcc.n	8010776 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010734:	1ad3      	subs	r3, r2, r3
 8010736:	b29a      	uxth	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010748:	4413      	add	r3, r2
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010752:	429a      	cmp	r2, r3
 8010754:	d30a      	bcc.n	801076c <tcp_receive+0x358>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010760:	4413      	add	r3, r2
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801076a:	e004      	b.n	8010776 <tcp_receive+0x362>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077e:	4a98      	ldr	r2, [pc, #608]	; (80109e0 <tcp_receive+0x5cc>)
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f7ff fdcb 	bl	801031c <tcp_free_acked_segments>
 8010786:	4602      	mov	r2, r0
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010794:	4a93      	ldr	r2, [pc, #588]	; (80109e4 <tcp_receive+0x5d0>)
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7ff fdc0 	bl	801031c <tcp_free_acked_segments>
 801079c:	4602      	mov	r2, r0
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d104      	bne.n	80107b4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80107b0:	861a      	strh	r2, [r3, #48]	; 0x30
 80107b2:	e002      	b.n	80107ba <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d103      	bne.n	80107d0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80107d6:	4b84      	ldr	r3, [pc, #528]	; (80109e8 <tcp_receive+0x5d4>)
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	4413      	add	r3, r2
 80107dc:	b29a      	uxth	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	8b5b      	ldrh	r3, [r3, #26]
 80107e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d035      	beq.n	801085c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d118      	bne.n	801082a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00c      	beq.n	801081a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	685b      	ldr	r3, [r3, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	f7fb f964 	bl	800bada <lwip_htonl>
 8010812:	4603      	mov	r3, r0
 8010814:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010816:	2b00      	cmp	r3, #0
 8010818:	dc20      	bgt.n	801085c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	8b5b      	ldrh	r3, [r3, #26]
 801081e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010828:	e018      	b.n	801085c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	685b      	ldr	r3, [r3, #4]
 8010836:	4618      	mov	r0, r3
 8010838:	f7fb f94f 	bl	800bada <lwip_htonl>
 801083c:	4603      	mov	r3, r0
 801083e:	1ae3      	subs	r3, r4, r3
 8010840:	2b00      	cmp	r3, #0
 8010842:	dc0b      	bgt.n	801085c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	8b5b      	ldrh	r3, [r3, #26]
 8010848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801084c:	b29a      	uxth	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010852:	e003      	b.n	801085c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f001 ff75 	bl	8012744 <tcp_send_empty_ack>
 801085a:	e000      	b.n	801085e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801085c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010862:	2b00      	cmp	r3, #0
 8010864:	d05b      	beq.n	801091e <tcp_receive+0x50a>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801086a:	4b60      	ldr	r3, [pc, #384]	; (80109ec <tcp_receive+0x5d8>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	1ad3      	subs	r3, r2, r3
 8010870:	2b00      	cmp	r3, #0
 8010872:	da54      	bge.n	801091e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010874:	4b5e      	ldr	r3, [pc, #376]	; (80109f0 <tcp_receive+0x5dc>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	b29a      	uxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801087e:	b29b      	uxth	r3, r3
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	b29b      	uxth	r3, r3
 8010884:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010888:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010892:	10db      	asrs	r3, r3, #3
 8010894:	b21b      	sxth	r3, r3
 8010896:	b29b      	uxth	r3, r3
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	b29b      	uxth	r3, r3
 801089c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108ac:	4413      	add	r3, r2
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	b21a      	sxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80108b6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	da05      	bge.n	80108ca <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80108be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108c2:	425b      	negs	r3, r3
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80108ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108d4:	109b      	asrs	r3, r3, #2
 80108d6:	b21b      	sxth	r3, r3
 80108d8:	b29b      	uxth	r3, r3
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	b29b      	uxth	r3, r3
 80108de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108e8:	b29a      	uxth	r2, r3
 80108ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80108ee:	4413      	add	r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	b21a      	sxth	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108fe:	10db      	asrs	r3, r3, #3
 8010900:	b21b      	sxth	r3, r3
 8010902:	b29a      	uxth	r2, r3
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801090a:	b29b      	uxth	r3, r3
 801090c:	4413      	add	r3, r2
 801090e:	b29b      	uxth	r3, r3
 8010910:	b21a      	sxth	r2, r3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801091e:	4b35      	ldr	r3, [pc, #212]	; (80109f4 <tcp_receive+0x5e0>)
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	f000 84e1 	beq.w	80112ea <tcp_receive+0xed6>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	7d1b      	ldrb	r3, [r3, #20]
 801092c:	2b06      	cmp	r3, #6
 801092e:	f200 84dc 	bhi.w	80112ea <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010936:	4b30      	ldr	r3, [pc, #192]	; (80109f8 <tcp_receive+0x5e4>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	3b01      	subs	r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	f2c0 808e 	blt.w	8010a60 <tcp_receive+0x64c>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010948:	4b2a      	ldr	r3, [pc, #168]	; (80109f4 <tcp_receive+0x5e0>)
 801094a:	881b      	ldrh	r3, [r3, #0]
 801094c:	4619      	mov	r1, r3
 801094e:	4b2a      	ldr	r3, [pc, #168]	; (80109f8 <tcp_receive+0x5e4>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	440b      	add	r3, r1
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	3301      	adds	r3, #1
 8010958:	2b00      	cmp	r3, #0
 801095a:	f300 8081 	bgt.w	8010a60 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801095e:	4b27      	ldr	r3, [pc, #156]	; (80109fc <tcp_receive+0x5e8>)
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010968:	4b23      	ldr	r3, [pc, #140]	; (80109f8 <tcp_receive+0x5e4>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010970:	4b22      	ldr	r3, [pc, #136]	; (80109fc <tcp_receive+0x5e8>)
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d106      	bne.n	8010986 <tcp_receive+0x572>
 8010978:	4b21      	ldr	r3, [pc, #132]	; (8010a00 <tcp_receive+0x5ec>)
 801097a:	f240 5294 	movw	r2, #1428	; 0x594
 801097e:	4921      	ldr	r1, [pc, #132]	; (8010a04 <tcp_receive+0x5f0>)
 8010980:	4821      	ldr	r0, [pc, #132]	; (8010a08 <tcp_receive+0x5f4>)
 8010982:	f007 faa1 	bl	8017ec8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801098c:	4293      	cmp	r3, r2
 801098e:	d906      	bls.n	801099e <tcp_receive+0x58a>
 8010990:	4b1b      	ldr	r3, [pc, #108]	; (8010a00 <tcp_receive+0x5ec>)
 8010992:	f240 5295 	movw	r2, #1429	; 0x595
 8010996:	491d      	ldr	r1, [pc, #116]	; (8010a0c <tcp_receive+0x5f8>)
 8010998:	481b      	ldr	r0, [pc, #108]	; (8010a08 <tcp_receive+0x5f4>)
 801099a:	f007 fa95 	bl	8017ec8 <iprintf>
      off = (u16_t)off32;
 801099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80109a4:	4b15      	ldr	r3, [pc, #84]	; (80109fc <tcp_receive+0x5e8>)
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	891b      	ldrh	r3, [r3, #8]
 80109aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d906      	bls.n	80109c0 <tcp_receive+0x5ac>
 80109b2:	4b13      	ldr	r3, [pc, #76]	; (8010a00 <tcp_receive+0x5ec>)
 80109b4:	f240 5297 	movw	r2, #1431	; 0x597
 80109b8:	4915      	ldr	r1, [pc, #84]	; (8010a10 <tcp_receive+0x5fc>)
 80109ba:	4813      	ldr	r0, [pc, #76]	; (8010a08 <tcp_receive+0x5f4>)
 80109bc:	f007 fa84 	bl	8017ec8 <iprintf>
      inseg.len -= off;
 80109c0:	4b0e      	ldr	r3, [pc, #56]	; (80109fc <tcp_receive+0x5e8>)
 80109c2:	891a      	ldrh	r2, [r3, #8]
 80109c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	4b0b      	ldr	r3, [pc, #44]	; (80109fc <tcp_receive+0x5e8>)
 80109ce:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80109d0:	4b0a      	ldr	r3, [pc, #40]	; (80109fc <tcp_receive+0x5e8>)
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	891a      	ldrh	r2, [r3, #8]
 80109d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80109de:	e029      	b.n	8010a34 <tcp_receive+0x620>
 80109e0:	0801a454 	.word	0x0801a454
 80109e4:	0801a45c 	.word	0x0801a45c
 80109e8:	20004af8 	.word	0x20004af8
 80109ec:	20004af4 	.word	0x20004af4
 80109f0:	2000ce08 	.word	0x2000ce08
 80109f4:	20004afa 	.word	0x20004afa
 80109f8:	20004af0 	.word	0x20004af0
 80109fc:	20004ad0 	.word	0x20004ad0
 8010a00:	0801a0ec 	.word	0x0801a0ec
 8010a04:	0801a464 	.word	0x0801a464
 8010a08:	0801a138 	.word	0x0801a138
 8010a0c:	0801a474 	.word	0x0801a474
 8010a10:	0801a484 	.word	0x0801a484
        off -= p->len;
 8010a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a16:	895b      	ldrh	r3, [r3, #10]
 8010a18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a36:	895b      	ldrh	r3, [r3, #10]
 8010a38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d8e9      	bhi.n	8010a14 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010a40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a44:	4619      	mov	r1, r3
 8010a46:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a48:	f7fc fb64 	bl	800d114 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a50:	4a91      	ldr	r2, [pc, #580]	; (8010c98 <tcp_receive+0x884>)
 8010a52:	6013      	str	r3, [r2, #0]
 8010a54:	4b91      	ldr	r3, [pc, #580]	; (8010c9c <tcp_receive+0x888>)
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	4a8f      	ldr	r2, [pc, #572]	; (8010c98 <tcp_receive+0x884>)
 8010a5a:	6812      	ldr	r2, [r2, #0]
 8010a5c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a5e:	e00d      	b.n	8010a7c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a60:	4b8d      	ldr	r3, [pc, #564]	; (8010c98 <tcp_receive+0x884>)
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	da06      	bge.n	8010a7c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	8b5b      	ldrh	r3, [r3, #26]
 8010a72:	f043 0302 	orr.w	r3, r3, #2
 8010a76:	b29a      	uxth	r2, r3
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a7c:	4b86      	ldr	r3, [pc, #536]	; (8010c98 <tcp_receive+0x884>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f2c0 842a 	blt.w	80112e0 <tcp_receive+0xecc>
 8010a8c:	4b82      	ldr	r3, [pc, #520]	; (8010c98 <tcp_receive+0x884>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a94:	6879      	ldr	r1, [r7, #4]
 8010a96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a98:	440b      	add	r3, r1
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f300 841e 	bgt.w	80112e0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010aa8:	4b7b      	ldr	r3, [pc, #492]	; (8010c98 <tcp_receive+0x884>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	f040 829a 	bne.w	8010fe6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ab2:	4b7a      	ldr	r3, [pc, #488]	; (8010c9c <tcp_receive+0x888>)
 8010ab4:	891c      	ldrh	r4, [r3, #8]
 8010ab6:	4b79      	ldr	r3, [pc, #484]	; (8010c9c <tcp_receive+0x888>)
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	899b      	ldrh	r3, [r3, #12]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fa fff6 	bl	800bab0 <lwip_htons>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0303 	and.w	r3, r3, #3
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d001      	beq.n	8010ad4 <tcp_receive+0x6c0>
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	e000      	b.n	8010ad6 <tcp_receive+0x6c2>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4423      	add	r3, r4
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	4b71      	ldr	r3, [pc, #452]	; (8010ca0 <tcp_receive+0x88c>)
 8010adc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ae2:	4b6f      	ldr	r3, [pc, #444]	; (8010ca0 <tcp_receive+0x88c>)
 8010ae4:	881b      	ldrh	r3, [r3, #0]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d275      	bcs.n	8010bd6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010aea:	4b6c      	ldr	r3, [pc, #432]	; (8010c9c <tcp_receive+0x888>)
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	899b      	ldrh	r3, [r3, #12]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fa ffdc 	bl	800bab0 <lwip_htons>
 8010af8:	4603      	mov	r3, r0
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	f003 0301 	and.w	r3, r3, #1
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d01f      	beq.n	8010b44 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b04:	4b65      	ldr	r3, [pc, #404]	; (8010c9c <tcp_receive+0x888>)
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	899b      	ldrh	r3, [r3, #12]
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	b21b      	sxth	r3, r3
 8010b0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b12:	b21c      	sxth	r4, r3
 8010b14:	4b61      	ldr	r3, [pc, #388]	; (8010c9c <tcp_receive+0x888>)
 8010b16:	68db      	ldr	r3, [r3, #12]
 8010b18:	899b      	ldrh	r3, [r3, #12]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fa ffc7 	bl	800bab0 <lwip_htons>
 8010b22:	4603      	mov	r3, r0
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	b29b      	uxth	r3, r3
 8010b28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fa ffbe 	bl	800bab0 <lwip_htons>
 8010b34:	4603      	mov	r3, r0
 8010b36:	b21b      	sxth	r3, r3
 8010b38:	4323      	orrs	r3, r4
 8010b3a:	b21a      	sxth	r2, r3
 8010b3c:	4b57      	ldr	r3, [pc, #348]	; (8010c9c <tcp_receive+0x888>)
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	b292      	uxth	r2, r2
 8010b42:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b48:	4b54      	ldr	r3, [pc, #336]	; (8010c9c <tcp_receive+0x888>)
 8010b4a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b4c:	4b53      	ldr	r3, [pc, #332]	; (8010c9c <tcp_receive+0x888>)
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	899b      	ldrh	r3, [r3, #12]
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fa ffab 	bl	800bab0 <lwip_htons>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	f003 0302 	and.w	r3, r3, #2
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d005      	beq.n	8010b72 <tcp_receive+0x75e>
            inseg.len -= 1;
 8010b66:	4b4d      	ldr	r3, [pc, #308]	; (8010c9c <tcp_receive+0x888>)
 8010b68:	891b      	ldrh	r3, [r3, #8]
 8010b6a:	3b01      	subs	r3, #1
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	4b4b      	ldr	r3, [pc, #300]	; (8010c9c <tcp_receive+0x888>)
 8010b70:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b72:	4b4a      	ldr	r3, [pc, #296]	; (8010c9c <tcp_receive+0x888>)
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	4a49      	ldr	r2, [pc, #292]	; (8010c9c <tcp_receive+0x888>)
 8010b78:	8912      	ldrh	r2, [r2, #8]
 8010b7a:	4611      	mov	r1, r2
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fc f9c9 	bl	800cf14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b82:	4b46      	ldr	r3, [pc, #280]	; (8010c9c <tcp_receive+0x888>)
 8010b84:	891c      	ldrh	r4, [r3, #8]
 8010b86:	4b45      	ldr	r3, [pc, #276]	; (8010c9c <tcp_receive+0x888>)
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	899b      	ldrh	r3, [r3, #12]
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7fa ff8e 	bl	800bab0 <lwip_htons>
 8010b94:	4603      	mov	r3, r0
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	f003 0303 	and.w	r3, r3, #3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d001      	beq.n	8010ba4 <tcp_receive+0x790>
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e000      	b.n	8010ba6 <tcp_receive+0x792>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	4423      	add	r3, r4
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	4b3d      	ldr	r3, [pc, #244]	; (8010ca0 <tcp_receive+0x88c>)
 8010bac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010bae:	4b3c      	ldr	r3, [pc, #240]	; (8010ca0 <tcp_receive+0x88c>)
 8010bb0:	881b      	ldrh	r3, [r3, #0]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	4b38      	ldr	r3, [pc, #224]	; (8010c98 <tcp_receive+0x884>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	441a      	add	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bbe:	6879      	ldr	r1, [r7, #4]
 8010bc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bc2:	440b      	add	r3, r1
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d006      	beq.n	8010bd6 <tcp_receive+0x7c2>
 8010bc8:	4b36      	ldr	r3, [pc, #216]	; (8010ca4 <tcp_receive+0x890>)
 8010bca:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010bce:	4936      	ldr	r1, [pc, #216]	; (8010ca8 <tcp_receive+0x894>)
 8010bd0:	4836      	ldr	r0, [pc, #216]	; (8010cac <tcp_receive+0x898>)
 8010bd2:	f007 f979 	bl	8017ec8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 80e7 	beq.w	8010dae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010be0:	4b2e      	ldr	r3, [pc, #184]	; (8010c9c <tcp_receive+0x888>)
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	899b      	ldrh	r3, [r3, #12]
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fa ff61 	bl	800bab0 <lwip_htons>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	b2db      	uxtb	r3, r3
 8010bf2:	f003 0301 	and.w	r3, r3, #1
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d010      	beq.n	8010c1c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010bfa:	e00a      	b.n	8010c12 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c00:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7fd fd96 	bl	800e73e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1f0      	bne.n	8010bfc <tcp_receive+0x7e8>
 8010c1a:	e0c8      	b.n	8010dae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c20:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c22:	e052      	b.n	8010cca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	899b      	ldrh	r3, [r3, #12]
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fa ff3f 	bl	800bab0 <lwip_htons>
 8010c32:	4603      	mov	r3, r0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	f003 0301 	and.w	r3, r3, #1
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d03d      	beq.n	8010cba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c3e:	4b17      	ldr	r3, [pc, #92]	; (8010c9c <tcp_receive+0x888>)
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	899b      	ldrh	r3, [r3, #12]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fa ff32 	bl	800bab0 <lwip_htons>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d130      	bne.n	8010cba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c58:	4b10      	ldr	r3, [pc, #64]	; (8010c9c <tcp_receive+0x888>)
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	899b      	ldrh	r3, [r3, #12]
 8010c5e:	b29c      	uxth	r4, r3
 8010c60:	2001      	movs	r0, #1
 8010c62:	f7fa ff25 	bl	800bab0 <lwip_htons>
 8010c66:	4603      	mov	r3, r0
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b0c      	ldr	r3, [pc, #48]	; (8010c9c <tcp_receive+0x888>)
 8010c6c:	68db      	ldr	r3, [r3, #12]
 8010c6e:	4322      	orrs	r2, r4
 8010c70:	b292      	uxth	r2, r2
 8010c72:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c74:	4b09      	ldr	r3, [pc, #36]	; (8010c9c <tcp_receive+0x888>)
 8010c76:	891c      	ldrh	r4, [r3, #8]
 8010c78:	4b08      	ldr	r3, [pc, #32]	; (8010c9c <tcp_receive+0x888>)
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	899b      	ldrh	r3, [r3, #12]
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7fa ff15 	bl	800bab0 <lwip_htons>
 8010c86:	4603      	mov	r3, r0
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	f003 0303 	and.w	r3, r3, #3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00e      	beq.n	8010cb0 <tcp_receive+0x89c>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e00d      	b.n	8010cb2 <tcp_receive+0x89e>
 8010c96:	bf00      	nop
 8010c98:	20004af0 	.word	0x20004af0
 8010c9c:	20004ad0 	.word	0x20004ad0
 8010ca0:	20004afa 	.word	0x20004afa
 8010ca4:	0801a0ec 	.word	0x0801a0ec
 8010ca8:	0801a494 	.word	0x0801a494
 8010cac:	0801a138 	.word	0x0801a138
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	4423      	add	r3, r4
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	4b98      	ldr	r3, [pc, #608]	; (8010f18 <tcp_receive+0xb04>)
 8010cb8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cbc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010cc4:	6938      	ldr	r0, [r7, #16]
 8010cc6:	f7fd fd3a 	bl	800e73e <tcp_seg_free>
            while (next &&
 8010cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d00e      	beq.n	8010cee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010cd0:	4b91      	ldr	r3, [pc, #580]	; (8010f18 <tcp_receive+0xb04>)
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4b91      	ldr	r3, [pc, #580]	; (8010f1c <tcp_receive+0xb08>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	441a      	add	r2, r3
 8010cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cde:	68db      	ldr	r3, [r3, #12]
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ce4:	8909      	ldrh	r1, [r1, #8]
 8010ce6:	440b      	add	r3, r1
 8010ce8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	da9a      	bge.n	8010c24 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d059      	beq.n	8010da8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010cf4:	4b88      	ldr	r3, [pc, #544]	; (8010f18 <tcp_receive+0xb04>)
 8010cf6:	881b      	ldrh	r3, [r3, #0]
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	4b88      	ldr	r3, [pc, #544]	; (8010f1c <tcp_receive+0xb08>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	441a      	add	r2, r3
 8010d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	dd4d      	ble.n	8010da8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	4b81      	ldr	r3, [pc, #516]	; (8010f1c <tcp_receive+0xb08>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	b29a      	uxth	r2, r3
 8010d1e:	4b80      	ldr	r3, [pc, #512]	; (8010f20 <tcp_receive+0xb0c>)
 8010d20:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d22:	4b7f      	ldr	r3, [pc, #508]	; (8010f20 <tcp_receive+0xb0c>)
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	899b      	ldrh	r3, [r3, #12]
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fa fec0 	bl	800bab0 <lwip_htons>
 8010d30:	4603      	mov	r3, r0
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	f003 0302 	and.w	r3, r3, #2
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d005      	beq.n	8010d48 <tcp_receive+0x934>
                inseg.len -= 1;
 8010d3c:	4b78      	ldr	r3, [pc, #480]	; (8010f20 <tcp_receive+0xb0c>)
 8010d3e:	891b      	ldrh	r3, [r3, #8]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	b29a      	uxth	r2, r3
 8010d44:	4b76      	ldr	r3, [pc, #472]	; (8010f20 <tcp_receive+0xb0c>)
 8010d46:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d48:	4b75      	ldr	r3, [pc, #468]	; (8010f20 <tcp_receive+0xb0c>)
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	4a74      	ldr	r2, [pc, #464]	; (8010f20 <tcp_receive+0xb0c>)
 8010d4e:	8912      	ldrh	r2, [r2, #8]
 8010d50:	4611      	mov	r1, r2
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fc f8de 	bl	800cf14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d58:	4b71      	ldr	r3, [pc, #452]	; (8010f20 <tcp_receive+0xb0c>)
 8010d5a:	891c      	ldrh	r4, [r3, #8]
 8010d5c:	4b70      	ldr	r3, [pc, #448]	; (8010f20 <tcp_receive+0xb0c>)
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	899b      	ldrh	r3, [r3, #12]
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7fa fea3 	bl	800bab0 <lwip_htons>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	f003 0303 	and.w	r3, r3, #3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d001      	beq.n	8010d7a <tcp_receive+0x966>
 8010d76:	2301      	movs	r3, #1
 8010d78:	e000      	b.n	8010d7c <tcp_receive+0x968>
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	4423      	add	r3, r4
 8010d7e:	b29a      	uxth	r2, r3
 8010d80:	4b65      	ldr	r3, [pc, #404]	; (8010f18 <tcp_receive+0xb04>)
 8010d82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010d84:	4b64      	ldr	r3, [pc, #400]	; (8010f18 <tcp_receive+0xb04>)
 8010d86:	881b      	ldrh	r3, [r3, #0]
 8010d88:	461a      	mov	r2, r3
 8010d8a:	4b64      	ldr	r3, [pc, #400]	; (8010f1c <tcp_receive+0xb08>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	441a      	add	r2, r3
 8010d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d006      	beq.n	8010da8 <tcp_receive+0x994>
 8010d9a:	4b62      	ldr	r3, [pc, #392]	; (8010f24 <tcp_receive+0xb10>)
 8010d9c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010da0:	4961      	ldr	r1, [pc, #388]	; (8010f28 <tcp_receive+0xb14>)
 8010da2:	4862      	ldr	r0, [pc, #392]	; (8010f2c <tcp_receive+0xb18>)
 8010da4:	f007 f890 	bl	8017ec8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dac:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010dae:	4b5a      	ldr	r3, [pc, #360]	; (8010f18 <tcp_receive+0xb04>)
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	4b59      	ldr	r3, [pc, #356]	; (8010f1c <tcp_receive+0xb08>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	441a      	add	r2, r3
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010dc2:	4b55      	ldr	r3, [pc, #340]	; (8010f18 <tcp_receive+0xb04>)
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d206      	bcs.n	8010dd8 <tcp_receive+0x9c4>
 8010dca:	4b56      	ldr	r3, [pc, #344]	; (8010f24 <tcp_receive+0xb10>)
 8010dcc:	f240 6207 	movw	r2, #1543	; 0x607
 8010dd0:	4957      	ldr	r1, [pc, #348]	; (8010f30 <tcp_receive+0xb1c>)
 8010dd2:	4856      	ldr	r0, [pc, #344]	; (8010f2c <tcp_receive+0xb18>)
 8010dd4:	f007 f878 	bl	8017ec8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ddc:	4b4e      	ldr	r3, [pc, #312]	; (8010f18 <tcp_receive+0xb04>)
 8010dde:	881b      	ldrh	r3, [r3, #0]
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7fc ffc9 	bl	800dd80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010dee:	4b4c      	ldr	r3, [pc, #304]	; (8010f20 <tcp_receive+0xb0c>)
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	891b      	ldrh	r3, [r3, #8]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d006      	beq.n	8010e06 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010df8:	4b49      	ldr	r3, [pc, #292]	; (8010f20 <tcp_receive+0xb0c>)
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	4a4d      	ldr	r2, [pc, #308]	; (8010f34 <tcp_receive+0xb20>)
 8010dfe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010e00:	4b47      	ldr	r3, [pc, #284]	; (8010f20 <tcp_receive+0xb0c>)
 8010e02:	2200      	movs	r2, #0
 8010e04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e06:	4b46      	ldr	r3, [pc, #280]	; (8010f20 <tcp_receive+0xb0c>)
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	899b      	ldrh	r3, [r3, #12]
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7fa fe4e 	bl	800bab0 <lwip_htons>
 8010e14:	4603      	mov	r3, r0
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 80b8 	beq.w	8010f92 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e22:	4b45      	ldr	r3, [pc, #276]	; (8010f38 <tcp_receive+0xb24>)
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	f043 0320 	orr.w	r3, r3, #32
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	4b42      	ldr	r3, [pc, #264]	; (8010f38 <tcp_receive+0xb24>)
 8010e2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e30:	e0af      	b.n	8010f92 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e3c:	68db      	ldr	r3, [r3, #12]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	4a36      	ldr	r2, [pc, #216]	; (8010f1c <tcp_receive+0xb08>)
 8010e42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	891b      	ldrh	r3, [r3, #8]
 8010e48:	461c      	mov	r4, r3
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	899b      	ldrh	r3, [r3, #12]
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fa fe2c 	bl	800bab0 <lwip_htons>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f003 0303 	and.w	r3, r3, #3
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d001      	beq.n	8010e68 <tcp_receive+0xa54>
 8010e64:	2301      	movs	r3, #1
 8010e66:	e000      	b.n	8010e6a <tcp_receive+0xa56>
 8010e68:	2300      	movs	r3, #0
 8010e6a:	191a      	adds	r2, r3, r4
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e70:	441a      	add	r2, r3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e7a:	461c      	mov	r4, r3
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	891b      	ldrh	r3, [r3, #8]
 8010e80:	461d      	mov	r5, r3
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	899b      	ldrh	r3, [r3, #12]
 8010e88:	b29b      	uxth	r3, r3
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fa fe10 	bl	800bab0 <lwip_htons>
 8010e90:	4603      	mov	r3, r0
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 0303 	and.w	r3, r3, #3
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <tcp_receive+0xa8c>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	e000      	b.n	8010ea2 <tcp_receive+0xa8e>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	442b      	add	r3, r5
 8010ea4:	429c      	cmp	r4, r3
 8010ea6:	d206      	bcs.n	8010eb6 <tcp_receive+0xaa2>
 8010ea8:	4b1e      	ldr	r3, [pc, #120]	; (8010f24 <tcp_receive+0xb10>)
 8010eaa:	f240 622b 	movw	r2, #1579	; 0x62b
 8010eae:	4923      	ldr	r1, [pc, #140]	; (8010f3c <tcp_receive+0xb28>)
 8010eb0:	481e      	ldr	r0, [pc, #120]	; (8010f2c <tcp_receive+0xb18>)
 8010eb2:	f007 f809 	bl	8017ec8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	891b      	ldrh	r3, [r3, #8]
 8010eba:	461c      	mov	r4, r3
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	899b      	ldrh	r3, [r3, #12]
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7fa fdf3 	bl	800bab0 <lwip_htons>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	f003 0303 	and.w	r3, r3, #3
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <tcp_receive+0xac6>
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e000      	b.n	8010edc <tcp_receive+0xac8>
 8010eda:	2300      	movs	r3, #0
 8010edc:	1919      	adds	r1, r3, r4
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ee2:	b28b      	uxth	r3, r1
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	b29a      	uxth	r2, r3
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f7fc ff47 	bl	800dd80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	891b      	ldrh	r3, [r3, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d028      	beq.n	8010f4e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010efc:	4b0d      	ldr	r3, [pc, #52]	; (8010f34 <tcp_receive+0xb20>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d01d      	beq.n	8010f40 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010f04:	4b0b      	ldr	r3, [pc, #44]	; (8010f34 <tcp_receive+0xb20>)
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	4610      	mov	r0, r2
 8010f10:	f7fc fa54 	bl	800d3bc <pbuf_cat>
 8010f14:	e018      	b.n	8010f48 <tcp_receive+0xb34>
 8010f16:	bf00      	nop
 8010f18:	20004afa 	.word	0x20004afa
 8010f1c:	20004af0 	.word	0x20004af0
 8010f20:	20004ad0 	.word	0x20004ad0
 8010f24:	0801a0ec 	.word	0x0801a0ec
 8010f28:	0801a4cc 	.word	0x0801a4cc
 8010f2c:	0801a138 	.word	0x0801a138
 8010f30:	0801a508 	.word	0x0801a508
 8010f34:	20004b00 	.word	0x20004b00
 8010f38:	20004afd 	.word	0x20004afd
 8010f3c:	0801a528 	.word	0x0801a528
            } else {
              recv_data = cseg->p;
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	4a70      	ldr	r2, [pc, #448]	; (8011108 <tcp_receive+0xcf4>)
 8010f46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	899b      	ldrh	r3, [r3, #12]
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fa fdaa 	bl	800bab0 <lwip_htons>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f003 0301 	and.w	r3, r3, #1
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00d      	beq.n	8010f84 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f68:	4b68      	ldr	r3, [pc, #416]	; (801110c <tcp_receive+0xcf8>)
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f043 0320 	orr.w	r3, r3, #32
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	4b66      	ldr	r3, [pc, #408]	; (801110c <tcp_receive+0xcf8>)
 8010f74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	7d1b      	ldrb	r3, [r3, #20]
 8010f7a:	2b04      	cmp	r3, #4
 8010f7c:	d102      	bne.n	8010f84 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2207      	movs	r2, #7
 8010f82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010f8c:	68b8      	ldr	r0, [r7, #8]
 8010f8e:	f7fd fbd6 	bl	800e73e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d008      	beq.n	8010fac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	f43f af43 	beq.w	8010e32 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	8b5b      	ldrh	r3, [r3, #26]
 8010fb0:	f003 0301 	and.w	r3, r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d00e      	beq.n	8010fd6 <tcp_receive+0xbc2>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	8b5b      	ldrh	r3, [r3, #26]
 8010fbc:	f023 0301 	bic.w	r3, r3, #1
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	835a      	strh	r2, [r3, #26]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	8b5b      	ldrh	r3, [r3, #26]
 8010fca:	f043 0302 	orr.w	r3, r3, #2
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010fd4:	e188      	b.n	80112e8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	8b5b      	ldrh	r3, [r3, #26]
 8010fda:	f043 0301 	orr.w	r3, r3, #1
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010fe4:	e180      	b.n	80112e8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010fee:	4848      	ldr	r0, [pc, #288]	; (8011110 <tcp_receive+0xcfc>)
 8010ff0:	f7fd fbbe 	bl	800e770 <tcp_seg_copy>
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	675a      	str	r2, [r3, #116]	; 0x74
 8010ffa:	e16d      	b.n	80112d8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011004:	63bb      	str	r3, [r7, #56]	; 0x38
 8011006:	e157      	b.n	80112b8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	685a      	ldr	r2, [r3, #4]
 801100e:	4b41      	ldr	r3, [pc, #260]	; (8011114 <tcp_receive+0xd00>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	429a      	cmp	r2, r3
 8011014:	d11d      	bne.n	8011052 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011016:	4b3e      	ldr	r3, [pc, #248]	; (8011110 <tcp_receive+0xcfc>)
 8011018:	891a      	ldrh	r2, [r3, #8]
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	891b      	ldrh	r3, [r3, #8]
 801101e:	429a      	cmp	r2, r3
 8011020:	f240 814f 	bls.w	80112c2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011024:	483a      	ldr	r0, [pc, #232]	; (8011110 <tcp_receive+0xcfc>)
 8011026:	f7fd fba3 	bl	800e770 <tcp_seg_copy>
 801102a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 8149 	beq.w	80112c6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801103a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801103c:	697a      	ldr	r2, [r7, #20]
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	e002      	b.n	8011048 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	697a      	ldr	r2, [r7, #20]
 8011046:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011048:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801104a:	6978      	ldr	r0, [r7, #20]
 801104c:	f7ff f8de 	bl	801020c <tcp_oos_insert_segment>
                }
                break;
 8011050:	e139      	b.n	80112c6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011054:	2b00      	cmp	r3, #0
 8011056:	d117      	bne.n	8011088 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011058:	4b2e      	ldr	r3, [pc, #184]	; (8011114 <tcp_receive+0xd00>)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105e:	68db      	ldr	r3, [r3, #12]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	2b00      	cmp	r3, #0
 8011066:	da57      	bge.n	8011118 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011068:	4829      	ldr	r0, [pc, #164]	; (8011110 <tcp_receive+0xcfc>)
 801106a:	f7fd fb81 	bl	800e770 <tcp_seg_copy>
 801106e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 8129 	beq.w	80112ca <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	69ba      	ldr	r2, [r7, #24]
 801107c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801107e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011080:	69b8      	ldr	r0, [r7, #24]
 8011082:	f7ff f8c3 	bl	801020c <tcp_oos_insert_segment>
                  }
                  break;
 8011086:	e120      	b.n	80112ca <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011088:	4b22      	ldr	r3, [pc, #136]	; (8011114 <tcp_receive+0xd00>)
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	1ad3      	subs	r3, r2, r3
 8011094:	3b01      	subs	r3, #1
 8011096:	2b00      	cmp	r3, #0
 8011098:	db3e      	blt.n	8011118 <tcp_receive+0xd04>
 801109a:	4b1e      	ldr	r3, [pc, #120]	; (8011114 <tcp_receive+0xd00>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	3301      	adds	r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	dc35      	bgt.n	8011118 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80110ac:	4818      	ldr	r0, [pc, #96]	; (8011110 <tcp_receive+0xcfc>)
 80110ae:	f7fd fb5f 	bl	800e770 <tcp_seg_copy>
 80110b2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f000 8109 	beq.w	80112ce <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80110bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110c4:	8912      	ldrh	r2, [r2, #8]
 80110c6:	441a      	add	r2, r3
 80110c8:	4b12      	ldr	r3, [pc, #72]	; (8011114 <tcp_receive+0xd00>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	dd12      	ble.n	80110f8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80110d2:	4b10      	ldr	r3, [pc, #64]	; (8011114 <tcp_receive+0xd00>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	b29a      	uxth	r2, r3
 80110d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	b29b      	uxth	r3, r3
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80110e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ea:	685a      	ldr	r2, [r3, #4]
 80110ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ee:	891b      	ldrh	r3, [r3, #8]
 80110f0:	4619      	mov	r1, r3
 80110f2:	4610      	mov	r0, r2
 80110f4:	f7fb ff0e 	bl	800cf14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80110f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fa:	69fa      	ldr	r2, [r7, #28]
 80110fc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80110fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011100:	69f8      	ldr	r0, [r7, #28]
 8011102:	f7ff f883 	bl	801020c <tcp_oos_insert_segment>
                  }
                  break;
 8011106:	e0e2      	b.n	80112ce <tcp_receive+0xeba>
 8011108:	20004b00 	.word	0x20004b00
 801110c:	20004afd 	.word	0x20004afd
 8011110:	20004ad0 	.word	0x20004ad0
 8011114:	20004af0 	.word	0x20004af0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	f040 80c6 	bne.w	80112b2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011126:	4b80      	ldr	r3, [pc, #512]	; (8011328 <tcp_receive+0xf14>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112c:	68db      	ldr	r3, [r3, #12]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011132:	2b00      	cmp	r3, #0
 8011134:	f340 80bd 	ble.w	80112b2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	899b      	ldrh	r3, [r3, #12]
 801113e:	b29b      	uxth	r3, r3
 8011140:	4618      	mov	r0, r3
 8011142:	f7fa fcb5 	bl	800bab0 <lwip_htons>
 8011146:	4603      	mov	r3, r0
 8011148:	b2db      	uxtb	r3, r3
 801114a:	f003 0301 	and.w	r3, r3, #1
 801114e:	2b00      	cmp	r3, #0
 8011150:	f040 80bf 	bne.w	80112d2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011154:	4875      	ldr	r0, [pc, #468]	; (801132c <tcp_receive+0xf18>)
 8011156:	f7fd fb0b 	bl	800e770 <tcp_seg_copy>
 801115a:	4602      	mov	r2, r0
 801115c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801115e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 80b6 	beq.w	80112d6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	685b      	ldr	r3, [r3, #4]
 8011170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011172:	8912      	ldrh	r2, [r2, #8]
 8011174:	441a      	add	r2, r3
 8011176:	4b6c      	ldr	r3, [pc, #432]	; (8011328 <tcp_receive+0xf14>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	2b00      	cmp	r3, #0
 801117e:	dd12      	ble.n	80111a6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011180:	4b69      	ldr	r3, [pc, #420]	; (8011328 <tcp_receive+0xf14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	b29a      	uxth	r2, r3
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	b29b      	uxth	r3, r3
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	b29a      	uxth	r2, r3
 8011192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011194:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011198:	685a      	ldr	r2, [r3, #4]
 801119a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119c:	891b      	ldrh	r3, [r3, #8]
 801119e:	4619      	mov	r1, r3
 80111a0:	4610      	mov	r0, r2
 80111a2:	f7fb feb7 	bl	800cf14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80111a6:	4b62      	ldr	r3, [pc, #392]	; (8011330 <tcp_receive+0xf1c>)
 80111a8:	881b      	ldrh	r3, [r3, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	4b5e      	ldr	r3, [pc, #376]	; (8011328 <tcp_receive+0xf14>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	441a      	add	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b6:	6879      	ldr	r1, [r7, #4]
 80111b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111ba:	440b      	add	r3, r1
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f340 8089 	ble.w	80112d6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80111c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fa fc6e 	bl	800bab0 <lwip_htons>
 80111d4:	4603      	mov	r3, r0
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 0301 	and.w	r3, r3, #1
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d022      	beq.n	8011226 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80111e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	68db      	ldr	r3, [r3, #12]
 80111e6:	899b      	ldrh	r3, [r3, #12]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	b21b      	sxth	r3, r3
 80111ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111f0:	b21c      	sxth	r4, r3
 80111f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	899b      	ldrh	r3, [r3, #12]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7fa fc57 	bl	800bab0 <lwip_htons>
 8011202:	4603      	mov	r3, r0
 8011204:	b2db      	uxtb	r3, r3
 8011206:	b29b      	uxth	r3, r3
 8011208:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801120c:	b29b      	uxth	r3, r3
 801120e:	4618      	mov	r0, r3
 8011210:	f7fa fc4e 	bl	800bab0 <lwip_htons>
 8011214:	4603      	mov	r3, r0
 8011216:	b21b      	sxth	r3, r3
 8011218:	4323      	orrs	r3, r4
 801121a:	b21a      	sxth	r2, r3
 801121c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	b292      	uxth	r2, r2
 8011224:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801122a:	b29a      	uxth	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011230:	4413      	add	r3, r2
 8011232:	b299      	uxth	r1, r3
 8011234:	4b3c      	ldr	r3, [pc, #240]	; (8011328 <tcp_receive+0xf14>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	b29a      	uxth	r2, r3
 801123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	1a8a      	subs	r2, r1, r2
 8011240:	b292      	uxth	r2, r2
 8011242:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	685a      	ldr	r2, [r3, #4]
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	891b      	ldrh	r3, [r3, #8]
 8011250:	4619      	mov	r1, r3
 8011252:	4610      	mov	r0, r2
 8011254:	f7fb fe5e 	bl	800cf14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	891c      	ldrh	r4, [r3, #8]
 801125e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	899b      	ldrh	r3, [r3, #12]
 8011266:	b29b      	uxth	r3, r3
 8011268:	4618      	mov	r0, r3
 801126a:	f7fa fc21 	bl	800bab0 <lwip_htons>
 801126e:	4603      	mov	r3, r0
 8011270:	b2db      	uxtb	r3, r3
 8011272:	f003 0303 	and.w	r3, r3, #3
 8011276:	2b00      	cmp	r3, #0
 8011278:	d001      	beq.n	801127e <tcp_receive+0xe6a>
 801127a:	2301      	movs	r3, #1
 801127c:	e000      	b.n	8011280 <tcp_receive+0xe6c>
 801127e:	2300      	movs	r3, #0
 8011280:	4423      	add	r3, r4
 8011282:	b29a      	uxth	r2, r3
 8011284:	4b2a      	ldr	r3, [pc, #168]	; (8011330 <tcp_receive+0xf1c>)
 8011286:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011288:	4b29      	ldr	r3, [pc, #164]	; (8011330 <tcp_receive+0xf1c>)
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	461a      	mov	r2, r3
 801128e:	4b26      	ldr	r3, [pc, #152]	; (8011328 <tcp_receive+0xf14>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	441a      	add	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	6879      	ldr	r1, [r7, #4]
 801129a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801129c:	440b      	add	r3, r1
 801129e:	429a      	cmp	r2, r3
 80112a0:	d019      	beq.n	80112d6 <tcp_receive+0xec2>
 80112a2:	4b24      	ldr	r3, [pc, #144]	; (8011334 <tcp_receive+0xf20>)
 80112a4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80112a8:	4923      	ldr	r1, [pc, #140]	; (8011338 <tcp_receive+0xf24>)
 80112aa:	4824      	ldr	r0, [pc, #144]	; (801133c <tcp_receive+0xf28>)
 80112ac:	f006 fe0c 	bl	8017ec8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80112b0:	e011      	b.n	80112d6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80112b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	f47f aea4 	bne.w	8011008 <tcp_receive+0xbf4>
 80112c0:	e00a      	b.n	80112d8 <tcp_receive+0xec4>
                break;
 80112c2:	bf00      	nop
 80112c4:	e008      	b.n	80112d8 <tcp_receive+0xec4>
                break;
 80112c6:	bf00      	nop
 80112c8:	e006      	b.n	80112d8 <tcp_receive+0xec4>
                  break;
 80112ca:	bf00      	nop
 80112cc:	e004      	b.n	80112d8 <tcp_receive+0xec4>
                  break;
 80112ce:	bf00      	nop
 80112d0:	e002      	b.n	80112d8 <tcp_receive+0xec4>
                  break;
 80112d2:	bf00      	nop
 80112d4:	e000      	b.n	80112d8 <tcp_receive+0xec4>
                break;
 80112d6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f001 fa33 	bl	8012744 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80112de:	e003      	b.n	80112e8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f001 fa2f 	bl	8012744 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80112e6:	e01a      	b.n	801131e <tcp_receive+0xf0a>
 80112e8:	e019      	b.n	801131e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80112ea:	4b0f      	ldr	r3, [pc, #60]	; (8011328 <tcp_receive+0xf14>)
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	db0a      	blt.n	801130e <tcp_receive+0xefa>
 80112f8:	4b0b      	ldr	r3, [pc, #44]	; (8011328 <tcp_receive+0xf14>)
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011300:	6879      	ldr	r1, [r7, #4]
 8011302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011304:	440b      	add	r3, r1
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	3301      	adds	r3, #1
 801130a:	2b00      	cmp	r3, #0
 801130c:	dd07      	ble.n	801131e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	8b5b      	ldrh	r3, [r3, #26]
 8011312:	f043 0302 	orr.w	r3, r3, #2
 8011316:	b29a      	uxth	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801131c:	e7ff      	b.n	801131e <tcp_receive+0xf0a>
 801131e:	bf00      	nop
 8011320:	3750      	adds	r7, #80	; 0x50
 8011322:	46bd      	mov	sp, r7
 8011324:	bdb0      	pop	{r4, r5, r7, pc}
 8011326:	bf00      	nop
 8011328:	20004af0 	.word	0x20004af0
 801132c:	20004ad0 	.word	0x20004ad0
 8011330:	20004afa 	.word	0x20004afa
 8011334:	0801a0ec 	.word	0x0801a0ec
 8011338:	0801a494 	.word	0x0801a494
 801133c:	0801a138 	.word	0x0801a138

08011340 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011346:	4b15      	ldr	r3, [pc, #84]	; (801139c <tcp_get_next_optbyte+0x5c>)
 8011348:	881b      	ldrh	r3, [r3, #0]
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	b291      	uxth	r1, r2
 801134e:	4a13      	ldr	r2, [pc, #76]	; (801139c <tcp_get_next_optbyte+0x5c>)
 8011350:	8011      	strh	r1, [r2, #0]
 8011352:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011354:	4b12      	ldr	r3, [pc, #72]	; (80113a0 <tcp_get_next_optbyte+0x60>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d004      	beq.n	8011366 <tcp_get_next_optbyte+0x26>
 801135c:	4b11      	ldr	r3, [pc, #68]	; (80113a4 <tcp_get_next_optbyte+0x64>)
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	88fa      	ldrh	r2, [r7, #6]
 8011362:	429a      	cmp	r2, r3
 8011364:	d208      	bcs.n	8011378 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011366:	4b10      	ldr	r3, [pc, #64]	; (80113a8 <tcp_get_next_optbyte+0x68>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	3314      	adds	r3, #20
 801136c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801136e:	88fb      	ldrh	r3, [r7, #6]
 8011370:	683a      	ldr	r2, [r7, #0]
 8011372:	4413      	add	r3, r2
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	e00b      	b.n	8011390 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011378:	88fb      	ldrh	r3, [r7, #6]
 801137a:	b2da      	uxtb	r2, r3
 801137c:	4b09      	ldr	r3, [pc, #36]	; (80113a4 <tcp_get_next_optbyte+0x64>)
 801137e:	881b      	ldrh	r3, [r3, #0]
 8011380:	b2db      	uxtb	r3, r3
 8011382:	1ad3      	subs	r3, r2, r3
 8011384:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011386:	4b06      	ldr	r3, [pc, #24]	; (80113a0 <tcp_get_next_optbyte+0x60>)
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	797b      	ldrb	r3, [r7, #5]
 801138c:	4413      	add	r3, r2
 801138e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011390:	4618      	mov	r0, r3
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr
 801139c:	20004aec 	.word	0x20004aec
 80113a0:	20004ae8 	.word	0x20004ae8
 80113a4:	20004ae6 	.word	0x20004ae6
 80113a8:	20004ae0 	.word	0x20004ae0

080113ac <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <tcp_parseopt+0x1c>
 80113ba:	4b32      	ldr	r3, [pc, #200]	; (8011484 <tcp_parseopt+0xd8>)
 80113bc:	f240 727d 	movw	r2, #1917	; 0x77d
 80113c0:	4931      	ldr	r1, [pc, #196]	; (8011488 <tcp_parseopt+0xdc>)
 80113c2:	4832      	ldr	r0, [pc, #200]	; (801148c <tcp_parseopt+0xe0>)
 80113c4:	f006 fd80 	bl	8017ec8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80113c8:	4b31      	ldr	r3, [pc, #196]	; (8011490 <tcp_parseopt+0xe4>)
 80113ca:	881b      	ldrh	r3, [r3, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d055      	beq.n	801147c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80113d0:	4b30      	ldr	r3, [pc, #192]	; (8011494 <tcp_parseopt+0xe8>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	801a      	strh	r2, [r3, #0]
 80113d6:	e045      	b.n	8011464 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80113d8:	f7ff ffb2 	bl	8011340 <tcp_get_next_optbyte>
 80113dc:	4603      	mov	r3, r0
 80113de:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80113e0:	7bfb      	ldrb	r3, [r7, #15]
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d006      	beq.n	80113f4 <tcp_parseopt+0x48>
 80113e6:	2b02      	cmp	r3, #2
 80113e8:	dc2b      	bgt.n	8011442 <tcp_parseopt+0x96>
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d041      	beq.n	8011472 <tcp_parseopt+0xc6>
 80113ee:	2b01      	cmp	r3, #1
 80113f0:	d127      	bne.n	8011442 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80113f2:	e037      	b.n	8011464 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80113f4:	f7ff ffa4 	bl	8011340 <tcp_get_next_optbyte>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b04      	cmp	r3, #4
 80113fc:	d13b      	bne.n	8011476 <tcp_parseopt+0xca>
 80113fe:	4b25      	ldr	r3, [pc, #148]	; (8011494 <tcp_parseopt+0xe8>)
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	3301      	adds	r3, #1
 8011404:	4a22      	ldr	r2, [pc, #136]	; (8011490 <tcp_parseopt+0xe4>)
 8011406:	8812      	ldrh	r2, [r2, #0]
 8011408:	4293      	cmp	r3, r2
 801140a:	da34      	bge.n	8011476 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801140c:	f7ff ff98 	bl	8011340 <tcp_get_next_optbyte>
 8011410:	4603      	mov	r3, r0
 8011412:	b29b      	uxth	r3, r3
 8011414:	021b      	lsls	r3, r3, #8
 8011416:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011418:	f7ff ff92 	bl	8011340 <tcp_get_next_optbyte>
 801141c:	4603      	mov	r3, r0
 801141e:	b29a      	uxth	r2, r3
 8011420:	89bb      	ldrh	r3, [r7, #12]
 8011422:	4313      	orrs	r3, r2
 8011424:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011426:	89bb      	ldrh	r3, [r7, #12]
 8011428:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801142c:	d804      	bhi.n	8011438 <tcp_parseopt+0x8c>
 801142e:	89bb      	ldrh	r3, [r7, #12]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d001      	beq.n	8011438 <tcp_parseopt+0x8c>
 8011434:	89ba      	ldrh	r2, [r7, #12]
 8011436:	e001      	b.n	801143c <tcp_parseopt+0x90>
 8011438:	f44f 7206 	mov.w	r2, #536	; 0x218
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011440:	e010      	b.n	8011464 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011442:	f7ff ff7d 	bl	8011340 <tcp_get_next_optbyte>
 8011446:	4603      	mov	r3, r0
 8011448:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801144a:	7afb      	ldrb	r3, [r7, #11]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d914      	bls.n	801147a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011450:	7afb      	ldrb	r3, [r7, #11]
 8011452:	b29a      	uxth	r2, r3
 8011454:	4b0f      	ldr	r3, [pc, #60]	; (8011494 <tcp_parseopt+0xe8>)
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	4413      	add	r3, r2
 801145a:	b29b      	uxth	r3, r3
 801145c:	3b02      	subs	r3, #2
 801145e:	b29a      	uxth	r2, r3
 8011460:	4b0c      	ldr	r3, [pc, #48]	; (8011494 <tcp_parseopt+0xe8>)
 8011462:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011464:	4b0b      	ldr	r3, [pc, #44]	; (8011494 <tcp_parseopt+0xe8>)
 8011466:	881a      	ldrh	r2, [r3, #0]
 8011468:	4b09      	ldr	r3, [pc, #36]	; (8011490 <tcp_parseopt+0xe4>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	429a      	cmp	r2, r3
 801146e:	d3b3      	bcc.n	80113d8 <tcp_parseopt+0x2c>
 8011470:	e004      	b.n	801147c <tcp_parseopt+0xd0>
          return;
 8011472:	bf00      	nop
 8011474:	e002      	b.n	801147c <tcp_parseopt+0xd0>
            return;
 8011476:	bf00      	nop
 8011478:	e000      	b.n	801147c <tcp_parseopt+0xd0>
            return;
 801147a:	bf00      	nop
      }
    }
  }
}
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	0801a0ec 	.word	0x0801a0ec
 8011488:	0801a550 	.word	0x0801a550
 801148c:	0801a138 	.word	0x0801a138
 8011490:	20004ae4 	.word	0x20004ae4
 8011494:	20004aec 	.word	0x20004aec

08011498 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011498:	b480      	push	{r7}
 801149a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801149c:	4b05      	ldr	r3, [pc, #20]	; (80114b4 <tcp_trigger_input_pcb_close+0x1c>)
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	f043 0310 	orr.w	r3, r3, #16
 80114a4:	b2da      	uxtb	r2, r3
 80114a6:	4b03      	ldr	r3, [pc, #12]	; (80114b4 <tcp_trigger_input_pcb_close+0x1c>)
 80114a8:	701a      	strb	r2, [r3, #0]
}
 80114aa:	bf00      	nop
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr
 80114b4:	20004afd 	.word	0x20004afd

080114b8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00a      	beq.n	80114e0 <tcp_route+0x28>
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	7a1b      	ldrb	r3, [r3, #8]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d006      	beq.n	80114e0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	7a1b      	ldrb	r3, [r3, #8]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fb fb14 	bl	800cb04 <netif_get_by_index>
 80114dc:	4603      	mov	r3, r0
 80114de:	e003      	b.n	80114e8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f005 f845 	bl	8016570 <ip4_route>
 80114e6:	4603      	mov	r3, r0
  }
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80114f0:	b590      	push	{r4, r7, lr}
 80114f2:	b087      	sub	sp, #28
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	603b      	str	r3, [r7, #0]
 80114fc:	4613      	mov	r3, r2
 80114fe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d105      	bne.n	8011512 <tcp_create_segment+0x22>
 8011506:	4b44      	ldr	r3, [pc, #272]	; (8011618 <tcp_create_segment+0x128>)
 8011508:	22a3      	movs	r2, #163	; 0xa3
 801150a:	4944      	ldr	r1, [pc, #272]	; (801161c <tcp_create_segment+0x12c>)
 801150c:	4844      	ldr	r0, [pc, #272]	; (8011620 <tcp_create_segment+0x130>)
 801150e:	f006 fcdb 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d105      	bne.n	8011524 <tcp_create_segment+0x34>
 8011518:	4b3f      	ldr	r3, [pc, #252]	; (8011618 <tcp_create_segment+0x128>)
 801151a:	22a4      	movs	r2, #164	; 0xa4
 801151c:	4941      	ldr	r1, [pc, #260]	; (8011624 <tcp_create_segment+0x134>)
 801151e:	4840      	ldr	r0, [pc, #256]	; (8011620 <tcp_create_segment+0x130>)
 8011520:	f006 fcd2 	bl	8017ec8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011524:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	b2db      	uxtb	r3, r3
 801152c:	f003 0304 	and.w	r3, r3, #4
 8011530:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011532:	2003      	movs	r0, #3
 8011534:	f7fa ff72 	bl	800c41c <memp_malloc>
 8011538:	6138      	str	r0, [r7, #16]
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d104      	bne.n	801154a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011540:	68b8      	ldr	r0, [r7, #8]
 8011542:	f7fb fe6d 	bl	800d220 <pbuf_free>
    return NULL;
 8011546:	2300      	movs	r3, #0
 8011548:	e061      	b.n	801160e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011550:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	2200      	movs	r2, #0
 8011556:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	891a      	ldrh	r2, [r3, #8]
 8011562:	7dfb      	ldrb	r3, [r7, #23]
 8011564:	b29b      	uxth	r3, r3
 8011566:	429a      	cmp	r2, r3
 8011568:	d205      	bcs.n	8011576 <tcp_create_segment+0x86>
 801156a:	4b2b      	ldr	r3, [pc, #172]	; (8011618 <tcp_create_segment+0x128>)
 801156c:	22b0      	movs	r2, #176	; 0xb0
 801156e:	492e      	ldr	r1, [pc, #184]	; (8011628 <tcp_create_segment+0x138>)
 8011570:	482b      	ldr	r0, [pc, #172]	; (8011620 <tcp_create_segment+0x130>)
 8011572:	f006 fca9 	bl	8017ec8 <iprintf>
  seg->len = p->tot_len - optlen;
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	891a      	ldrh	r2, [r3, #8]
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	b29b      	uxth	r3, r3
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	b29a      	uxth	r2, r3
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011586:	2114      	movs	r1, #20
 8011588:	68b8      	ldr	r0, [r7, #8]
 801158a:	f7fb fdb3 	bl	800d0f4 <pbuf_add_header>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d004      	beq.n	801159e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011594:	6938      	ldr	r0, [r7, #16]
 8011596:	f7fd f8d2 	bl	800e73e <tcp_seg_free>
    return NULL;
 801159a:	2300      	movs	r3, #0
 801159c:	e037      	b.n	801160e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	8ada      	ldrh	r2, [r3, #22]
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	68dc      	ldr	r4, [r3, #12]
 80115b0:	4610      	mov	r0, r2
 80115b2:	f7fa fa7d 	bl	800bab0 <lwip_htons>
 80115b6:	4603      	mov	r3, r0
 80115b8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	8b1a      	ldrh	r2, [r3, #24]
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	68dc      	ldr	r4, [r3, #12]
 80115c2:	4610      	mov	r0, r2
 80115c4:	f7fa fa74 	bl	800bab0 <lwip_htons>
 80115c8:	4603      	mov	r3, r0
 80115ca:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	68dc      	ldr	r4, [r3, #12]
 80115d0:	6838      	ldr	r0, [r7, #0]
 80115d2:	f7fa fa82 	bl	800bada <lwip_htonl>
 80115d6:	4603      	mov	r3, r0
 80115d8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80115da:	7dfb      	ldrb	r3, [r7, #23]
 80115dc:	089b      	lsrs	r3, r3, #2
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3305      	adds	r3, #5
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	031b      	lsls	r3, r3, #12
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	79fb      	ldrb	r3, [r7, #7]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	4313      	orrs	r3, r2
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	68dc      	ldr	r4, [r3, #12]
 80115f6:	4610      	mov	r0, r2
 80115f8:	f7fa fa5a 	bl	800bab0 <lwip_htons>
 80115fc:	4603      	mov	r3, r0
 80115fe:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	749a      	strb	r2, [r3, #18]
 8011608:	2200      	movs	r2, #0
 801160a:	74da      	strb	r2, [r3, #19]
  return seg;
 801160c:	693b      	ldr	r3, [r7, #16]
}
 801160e:	4618      	mov	r0, r3
 8011610:	371c      	adds	r7, #28
 8011612:	46bd      	mov	sp, r7
 8011614:	bd90      	pop	{r4, r7, pc}
 8011616:	bf00      	nop
 8011618:	0801a56c 	.word	0x0801a56c
 801161c:	0801a5a0 	.word	0x0801a5a0
 8011620:	0801a5c0 	.word	0x0801a5c0
 8011624:	0801a5e8 	.word	0x0801a5e8
 8011628:	0801a60c 	.word	0x0801a60c

0801162c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801162c:	b590      	push	{r4, r7, lr}
 801162e:	b08b      	sub	sp, #44	; 0x2c
 8011630:	af02      	add	r7, sp, #8
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	460b      	mov	r3, r1
 8011636:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011638:	2300      	movs	r3, #0
 801163a:	61fb      	str	r3, [r7, #28]
 801163c:	2300      	movs	r3, #0
 801163e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011640:	2300      	movs	r3, #0
 8011642:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d106      	bne.n	8011658 <tcp_split_unsent_seg+0x2c>
 801164a:	4b95      	ldr	r3, [pc, #596]	; (80118a0 <tcp_split_unsent_seg+0x274>)
 801164c:	f240 324b 	movw	r2, #843	; 0x34b
 8011650:	4994      	ldr	r1, [pc, #592]	; (80118a4 <tcp_split_unsent_seg+0x278>)
 8011652:	4895      	ldr	r0, [pc, #596]	; (80118a8 <tcp_split_unsent_seg+0x27c>)
 8011654:	f006 fc38 	bl	8017ec8 <iprintf>

  useg = pcb->unsent;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801165c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d102      	bne.n	801166a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011664:	f04f 33ff 	mov.w	r3, #4294967295
 8011668:	e116      	b.n	8011898 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801166a:	887b      	ldrh	r3, [r7, #2]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d109      	bne.n	8011684 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011670:	4b8b      	ldr	r3, [pc, #556]	; (80118a0 <tcp_split_unsent_seg+0x274>)
 8011672:	f240 3253 	movw	r2, #851	; 0x353
 8011676:	498d      	ldr	r1, [pc, #564]	; (80118ac <tcp_split_unsent_seg+0x280>)
 8011678:	488b      	ldr	r0, [pc, #556]	; (80118a8 <tcp_split_unsent_seg+0x27c>)
 801167a:	f006 fc25 	bl	8017ec8 <iprintf>
    return ERR_VAL;
 801167e:	f06f 0305 	mvn.w	r3, #5
 8011682:	e109      	b.n	8011898 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	891b      	ldrh	r3, [r3, #8]
 8011688:	887a      	ldrh	r2, [r7, #2]
 801168a:	429a      	cmp	r2, r3
 801168c:	d301      	bcc.n	8011692 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801168e:	2300      	movs	r3, #0
 8011690:	e102      	b.n	8011898 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011696:	887a      	ldrh	r2, [r7, #2]
 8011698:	429a      	cmp	r2, r3
 801169a:	d906      	bls.n	80116aa <tcp_split_unsent_seg+0x7e>
 801169c:	4b80      	ldr	r3, [pc, #512]	; (80118a0 <tcp_split_unsent_seg+0x274>)
 801169e:	f240 325b 	movw	r2, #859	; 0x35b
 80116a2:	4983      	ldr	r1, [pc, #524]	; (80118b0 <tcp_split_unsent_seg+0x284>)
 80116a4:	4880      	ldr	r0, [pc, #512]	; (80118a8 <tcp_split_unsent_seg+0x27c>)
 80116a6:	f006 fc0f 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	891b      	ldrh	r3, [r3, #8]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d106      	bne.n	80116c0 <tcp_split_unsent_seg+0x94>
 80116b2:	4b7b      	ldr	r3, [pc, #492]	; (80118a0 <tcp_split_unsent_seg+0x274>)
 80116b4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80116b8:	497e      	ldr	r1, [pc, #504]	; (80118b4 <tcp_split_unsent_seg+0x288>)
 80116ba:	487b      	ldr	r0, [pc, #492]	; (80118a8 <tcp_split_unsent_seg+0x27c>)
 80116bc:	f006 fc04 	bl	8017ec8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	7a9b      	ldrb	r3, [r3, #10]
 80116c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80116c6:	7bfb      	ldrb	r3, [r7, #15]
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	f003 0304 	and.w	r3, r3, #4
 80116d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	891a      	ldrh	r2, [r3, #8]
 80116d6:	887b      	ldrh	r3, [r7, #2]
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80116dc:	7bbb      	ldrb	r3, [r7, #14]
 80116de:	b29a      	uxth	r2, r3
 80116e0:	89bb      	ldrh	r3, [r7, #12]
 80116e2:	4413      	add	r3, r2
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ea:	4619      	mov	r1, r3
 80116ec:	2036      	movs	r0, #54	; 0x36
 80116ee:	f7fb fab3 	bl	800cc58 <pbuf_alloc>
 80116f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	f000 80b7 	beq.w	801186a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	891a      	ldrh	r2, [r3, #8]
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	891b      	ldrh	r3, [r3, #8]
 8011706:	1ad3      	subs	r3, r2, r3
 8011708:	b29a      	uxth	r2, r3
 801170a:	887b      	ldrh	r3, [r7, #2]
 801170c:	4413      	add	r3, r2
 801170e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	6858      	ldr	r0, [r3, #4]
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	685a      	ldr	r2, [r3, #4]
 8011718:	7bbb      	ldrb	r3, [r7, #14]
 801171a:	18d1      	adds	r1, r2, r3
 801171c:	897b      	ldrh	r3, [r7, #10]
 801171e:	89ba      	ldrh	r2, [r7, #12]
 8011720:	f7fb ff84 	bl	800d62c <pbuf_copy_partial>
 8011724:	4603      	mov	r3, r0
 8011726:	461a      	mov	r2, r3
 8011728:	89bb      	ldrh	r3, [r7, #12]
 801172a:	4293      	cmp	r3, r2
 801172c:	f040 809f 	bne.w	801186e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011730:	697b      	ldr	r3, [r7, #20]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	899b      	ldrh	r3, [r3, #12]
 8011736:	b29b      	uxth	r3, r3
 8011738:	4618      	mov	r0, r3
 801173a:	f7fa f9b9 	bl	800bab0 <lwip_htons>
 801173e:	4603      	mov	r3, r0
 8011740:	b2db      	uxtb	r3, r3
 8011742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011746:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011748:	2300      	movs	r3, #0
 801174a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801174c:	7efb      	ldrb	r3, [r7, #27]
 801174e:	f003 0308 	and.w	r3, r3, #8
 8011752:	2b00      	cmp	r3, #0
 8011754:	d007      	beq.n	8011766 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011756:	7efb      	ldrb	r3, [r7, #27]
 8011758:	f023 0308 	bic.w	r3, r3, #8
 801175c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801175e:	7ebb      	ldrb	r3, [r7, #26]
 8011760:	f043 0308 	orr.w	r3, r3, #8
 8011764:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011766:	7efb      	ldrb	r3, [r7, #27]
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	2b00      	cmp	r3, #0
 801176e:	d007      	beq.n	8011780 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011770:	7efb      	ldrb	r3, [r7, #27]
 8011772:	f023 0301 	bic.w	r3, r3, #1
 8011776:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011778:	7ebb      	ldrb	r3, [r7, #26]
 801177a:	f043 0301 	orr.w	r3, r3, #1
 801177e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	685b      	ldr	r3, [r3, #4]
 8011786:	4618      	mov	r0, r3
 8011788:	f7fa f9a7 	bl	800bada <lwip_htonl>
 801178c:	4602      	mov	r2, r0
 801178e:	887b      	ldrh	r3, [r7, #2]
 8011790:	18d1      	adds	r1, r2, r3
 8011792:	7eba      	ldrb	r2, [r7, #26]
 8011794:	7bfb      	ldrb	r3, [r7, #15]
 8011796:	9300      	str	r3, [sp, #0]
 8011798:	460b      	mov	r3, r1
 801179a:	6939      	ldr	r1, [r7, #16]
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff fea7 	bl	80114f0 <tcp_create_segment>
 80117a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d063      	beq.n	8011872 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fb fdc4 	bl	800d33c <pbuf_clen>
 80117b4:	4603      	mov	r3, r0
 80117b6:	461a      	mov	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80117be:	1a9b      	subs	r3, r3, r2
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	6858      	ldr	r0, [r3, #4]
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	891a      	ldrh	r2, [r3, #8]
 80117d2:	89bb      	ldrh	r3, [r7, #12]
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4619      	mov	r1, r3
 80117da:	f7fb fb9b 	bl	800cf14 <pbuf_realloc>
  useg->len -= remainder;
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	891a      	ldrh	r2, [r3, #8]
 80117e2:	89bb      	ldrh	r3, [r7, #12]
 80117e4:	1ad3      	subs	r3, r2, r3
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80117ec:	697b      	ldr	r3, [r7, #20]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	899b      	ldrh	r3, [r3, #12]
 80117f2:	b29c      	uxth	r4, r3
 80117f4:	7efb      	ldrb	r3, [r7, #27]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fa f959 	bl	800bab0 <lwip_htons>
 80117fe:	4603      	mov	r3, r0
 8011800:	461a      	mov	r2, r3
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	4322      	orrs	r2, r4
 8011808:	b292      	uxth	r2, r2
 801180a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	4618      	mov	r0, r3
 8011812:	f7fb fd93 	bl	800d33c <pbuf_clen>
 8011816:	4603      	mov	r3, r0
 8011818:	461a      	mov	r2, r3
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011820:	4413      	add	r3, r2
 8011822:	b29a      	uxth	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	4618      	mov	r0, r3
 8011830:	f7fb fd84 	bl	800d33c <pbuf_clen>
 8011834:	4603      	mov	r3, r0
 8011836:	461a      	mov	r2, r3
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801183e:	4413      	add	r3, r2
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	69fa      	ldr	r2, [r7, #28]
 8011854:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d103      	bne.n	8011866 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2200      	movs	r2, #0
 8011862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011866:	2300      	movs	r3, #0
 8011868:	e016      	b.n	8011898 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801186a:	bf00      	nop
 801186c:	e002      	b.n	8011874 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801186e:	bf00      	nop
 8011870:	e000      	b.n	8011874 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011872:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d006      	beq.n	8011888 <tcp_split_unsent_seg+0x25c>
 801187a:	4b09      	ldr	r3, [pc, #36]	; (80118a0 <tcp_split_unsent_seg+0x274>)
 801187c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011880:	490d      	ldr	r1, [pc, #52]	; (80118b8 <tcp_split_unsent_seg+0x28c>)
 8011882:	4809      	ldr	r0, [pc, #36]	; (80118a8 <tcp_split_unsent_seg+0x27c>)
 8011884:	f006 fb20 	bl	8017ec8 <iprintf>
  if (p != NULL) {
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d002      	beq.n	8011894 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801188e:	6938      	ldr	r0, [r7, #16]
 8011890:	f7fb fcc6 	bl	800d220 <pbuf_free>
  }

  return ERR_MEM;
 8011894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011898:	4618      	mov	r0, r3
 801189a:	3724      	adds	r7, #36	; 0x24
 801189c:	46bd      	mov	sp, r7
 801189e:	bd90      	pop	{r4, r7, pc}
 80118a0:	0801a56c 	.word	0x0801a56c
 80118a4:	0801a900 	.word	0x0801a900
 80118a8:	0801a5c0 	.word	0x0801a5c0
 80118ac:	0801a924 	.word	0x0801a924
 80118b0:	0801a948 	.word	0x0801a948
 80118b4:	0801a958 	.word	0x0801a958
 80118b8:	0801a968 	.word	0x0801a968

080118bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80118bc:	b590      	push	{r4, r7, lr}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <tcp_send_fin+0x1c>
 80118ca:	4b21      	ldr	r3, [pc, #132]	; (8011950 <tcp_send_fin+0x94>)
 80118cc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80118d0:	4920      	ldr	r1, [pc, #128]	; (8011954 <tcp_send_fin+0x98>)
 80118d2:	4821      	ldr	r0, [pc, #132]	; (8011958 <tcp_send_fin+0x9c>)
 80118d4:	f006 faf8 	bl	8017ec8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d02e      	beq.n	801193e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e4:	60fb      	str	r3, [r7, #12]
 80118e6:	e002      	b.n	80118ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1f8      	bne.n	80118e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	68db      	ldr	r3, [r3, #12]
 80118fa:	899b      	ldrh	r3, [r3, #12]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fa f8d6 	bl	800bab0 <lwip_htons>
 8011904:	4603      	mov	r3, r0
 8011906:	b2db      	uxtb	r3, r3
 8011908:	f003 0307 	and.w	r3, r3, #7
 801190c:	2b00      	cmp	r3, #0
 801190e:	d116      	bne.n	801193e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	899b      	ldrh	r3, [r3, #12]
 8011916:	b29c      	uxth	r4, r3
 8011918:	2001      	movs	r0, #1
 801191a:	f7fa f8c9 	bl	800bab0 <lwip_htons>
 801191e:	4603      	mov	r3, r0
 8011920:	461a      	mov	r2, r3
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	4322      	orrs	r2, r4
 8011928:	b292      	uxth	r2, r2
 801192a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	8b5b      	ldrh	r3, [r3, #26]
 8011930:	f043 0320 	orr.w	r3, r3, #32
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801193a:	2300      	movs	r3, #0
 801193c:	e004      	b.n	8011948 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801193e:	2101      	movs	r1, #1
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 f80b 	bl	801195c <tcp_enqueue_flags>
 8011946:	4603      	mov	r3, r0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3714      	adds	r7, #20
 801194c:	46bd      	mov	sp, r7
 801194e:	bd90      	pop	{r4, r7, pc}
 8011950:	0801a56c 	.word	0x0801a56c
 8011954:	0801a974 	.word	0x0801a974
 8011958:	0801a5c0 	.word	0x0801a5c0

0801195c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b08a      	sub	sp, #40	; 0x28
 8011960:	af02      	add	r7, sp, #8
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	460b      	mov	r3, r1
 8011966:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011968:	2300      	movs	r3, #0
 801196a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011970:	78fb      	ldrb	r3, [r7, #3]
 8011972:	f003 0303 	and.w	r3, r3, #3
 8011976:	2b00      	cmp	r3, #0
 8011978:	d106      	bne.n	8011988 <tcp_enqueue_flags+0x2c>
 801197a:	4b67      	ldr	r3, [pc, #412]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 801197c:	f240 4211 	movw	r2, #1041	; 0x411
 8011980:	4966      	ldr	r1, [pc, #408]	; (8011b1c <tcp_enqueue_flags+0x1c0>)
 8011982:	4867      	ldr	r0, [pc, #412]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 8011984:	f006 faa0 	bl	8017ec8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d106      	bne.n	801199c <tcp_enqueue_flags+0x40>
 801198e:	4b62      	ldr	r3, [pc, #392]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 8011990:	f240 4213 	movw	r2, #1043	; 0x413
 8011994:	4963      	ldr	r1, [pc, #396]	; (8011b24 <tcp_enqueue_flags+0x1c8>)
 8011996:	4862      	ldr	r0, [pc, #392]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 8011998:	f006 fa96 	bl	8017ec8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801199c:	78fb      	ldrb	r3, [r7, #3]
 801199e:	f003 0302 	and.w	r3, r3, #2
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d001      	beq.n	80119aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80119a6:	2301      	movs	r3, #1
 80119a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80119aa:	7ffb      	ldrb	r3, [r7, #31]
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	f003 0304 	and.w	r3, r3, #4
 80119b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80119b6:	7dfb      	ldrb	r3, [r7, #23]
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119be:	4619      	mov	r1, r3
 80119c0:	2036      	movs	r0, #54	; 0x36
 80119c2:	f7fb f949 	bl	800cc58 <pbuf_alloc>
 80119c6:	6138      	str	r0, [r7, #16]
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d109      	bne.n	80119e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	8b5b      	ldrh	r3, [r3, #26]
 80119d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80119dc:	f04f 33ff 	mov.w	r3, #4294967295
 80119e0:	e095      	b.n	8011b0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	895a      	ldrh	r2, [r3, #10]
 80119e6:	7dfb      	ldrb	r3, [r7, #23]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d206      	bcs.n	80119fc <tcp_enqueue_flags+0xa0>
 80119ee:	4b4a      	ldr	r3, [pc, #296]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 80119f0:	f240 4239 	movw	r2, #1081	; 0x439
 80119f4:	494c      	ldr	r1, [pc, #304]	; (8011b28 <tcp_enqueue_flags+0x1cc>)
 80119f6:	484a      	ldr	r0, [pc, #296]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 80119f8:	f006 fa66 	bl	8017ec8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011a00:	78fa      	ldrb	r2, [r7, #3]
 8011a02:	7ffb      	ldrb	r3, [r7, #31]
 8011a04:	9300      	str	r3, [sp, #0]
 8011a06:	460b      	mov	r3, r1
 8011a08:	6939      	ldr	r1, [r7, #16]
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7ff fd70 	bl	80114f0 <tcp_create_segment>
 8011a10:	60f8      	str	r0, [r7, #12]
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d109      	bne.n	8011a2c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	8b5b      	ldrh	r3, [r3, #26]
 8011a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011a26:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2a:	e070      	b.n	8011b0e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	68db      	ldr	r3, [r3, #12]
 8011a30:	f003 0303 	and.w	r3, r3, #3
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d006      	beq.n	8011a46 <tcp_enqueue_flags+0xea>
 8011a38:	4b37      	ldr	r3, [pc, #220]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 8011a3a:	f240 4242 	movw	r2, #1090	; 0x442
 8011a3e:	493b      	ldr	r1, [pc, #236]	; (8011b2c <tcp_enqueue_flags+0x1d0>)
 8011a40:	4837      	ldr	r0, [pc, #220]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 8011a42:	f006 fa41 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	891b      	ldrh	r3, [r3, #8]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d006      	beq.n	8011a5c <tcp_enqueue_flags+0x100>
 8011a4e:	4b32      	ldr	r3, [pc, #200]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 8011a50:	f240 4243 	movw	r2, #1091	; 0x443
 8011a54:	4936      	ldr	r1, [pc, #216]	; (8011b30 <tcp_enqueue_flags+0x1d4>)
 8011a56:	4832      	ldr	r0, [pc, #200]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 8011a58:	f006 fa36 	bl	8017ec8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d103      	bne.n	8011a6c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8011a6a:	e00d      	b.n	8011a88 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a70:	61bb      	str	r3, [r7, #24]
 8011a72:	e002      	b.n	8011a7a <tcp_enqueue_flags+0x11e>
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	61bb      	str	r3, [r7, #24]
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1f8      	bne.n	8011a74 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011a90:	78fb      	ldrb	r3, [r7, #3]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d104      	bne.n	8011aa4 <tcp_enqueue_flags+0x148>
 8011a9a:	78fb      	ldrb	r3, [r7, #3]
 8011a9c:	f003 0301 	and.w	r3, r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d004      	beq.n	8011aae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011aae:	78fb      	ldrb	r3, [r7, #3]
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d006      	beq.n	8011ac6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	8b5b      	ldrh	r3, [r3, #26]
 8011abc:	f043 0320 	orr.w	r3, r3, #32
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7fb fc36 	bl	800d33c <pbuf_clen>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ada:	4413      	add	r3, r2
 8011adc:	b29a      	uxth	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00e      	beq.n	8011b0c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d10a      	bne.n	8011b0c <tcp_enqueue_flags+0x1b0>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d106      	bne.n	8011b0c <tcp_enqueue_flags+0x1b0>
 8011afe:	4b06      	ldr	r3, [pc, #24]	; (8011b18 <tcp_enqueue_flags+0x1bc>)
 8011b00:	f240 4265 	movw	r2, #1125	; 0x465
 8011b04:	490b      	ldr	r1, [pc, #44]	; (8011b34 <tcp_enqueue_flags+0x1d8>)
 8011b06:	4806      	ldr	r0, [pc, #24]	; (8011b20 <tcp_enqueue_flags+0x1c4>)
 8011b08:	f006 f9de 	bl	8017ec8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011b0c:	2300      	movs	r3, #0
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3720      	adds	r7, #32
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	0801a56c 	.word	0x0801a56c
 8011b1c:	0801a990 	.word	0x0801a990
 8011b20:	0801a5c0 	.word	0x0801a5c0
 8011b24:	0801a9e8 	.word	0x0801a9e8
 8011b28:	0801aa08 	.word	0x0801aa08
 8011b2c:	0801aa44 	.word	0x0801aa44
 8011b30:	0801aa5c 	.word	0x0801aa5c
 8011b34:	0801aa88 	.word	0x0801aa88

08011b38 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011b38:	b5b0      	push	{r4, r5, r7, lr}
 8011b3a:	b08a      	sub	sp, #40	; 0x28
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d106      	bne.n	8011b54 <tcp_output+0x1c>
 8011b46:	4b9e      	ldr	r3, [pc, #632]	; (8011dc0 <tcp_output+0x288>)
 8011b48:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011b4c:	499d      	ldr	r1, [pc, #628]	; (8011dc4 <tcp_output+0x28c>)
 8011b4e:	489e      	ldr	r0, [pc, #632]	; (8011dc8 <tcp_output+0x290>)
 8011b50:	f006 f9ba 	bl	8017ec8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	7d1b      	ldrb	r3, [r3, #20]
 8011b58:	2b01      	cmp	r3, #1
 8011b5a:	d106      	bne.n	8011b6a <tcp_output+0x32>
 8011b5c:	4b98      	ldr	r3, [pc, #608]	; (8011dc0 <tcp_output+0x288>)
 8011b5e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011b62:	499a      	ldr	r1, [pc, #616]	; (8011dcc <tcp_output+0x294>)
 8011b64:	4898      	ldr	r0, [pc, #608]	; (8011dc8 <tcp_output+0x290>)
 8011b66:	f006 f9af 	bl	8017ec8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011b6a:	4b99      	ldr	r3, [pc, #612]	; (8011dd0 <tcp_output+0x298>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d101      	bne.n	8011b78 <tcp_output+0x40>
    return ERR_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	e1ce      	b.n	8011f16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b84:	4293      	cmp	r3, r2
 8011b86:	bf28      	it	cs
 8011b88:	4613      	movcs	r3, r2
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10b      	bne.n	8011bb2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	8b5b      	ldrh	r3, [r3, #26]
 8011b9e:	f003 0302 	and.w	r3, r3, #2
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f000 81aa 	beq.w	8011efc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f000 fdcb 	bl	8012744 <tcp_send_empty_ack>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	e1b1      	b.n	8011f16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011bb2:	6879      	ldr	r1, [r7, #4]
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	461a      	mov	r2, r3
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f7ff fc7c 	bl	80114b8 <tcp_route>
 8011bc0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d102      	bne.n	8011bce <tcp_output+0x96>
    return ERR_RTE;
 8011bc8:	f06f 0303 	mvn.w	r3, #3
 8011bcc:	e1a3      	b.n	8011f16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d003      	beq.n	8011bdc <tcp_output+0xa4>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d111      	bne.n	8011c00 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d002      	beq.n	8011be8 <tcp_output+0xb0>
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	3304      	adds	r3, #4
 8011be6:	e000      	b.n	8011bea <tcp_output+0xb2>
 8011be8:	2300      	movs	r3, #0
 8011bea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d102      	bne.n	8011bf8 <tcp_output+0xc0>
      return ERR_RTE;
 8011bf2:	f06f 0303 	mvn.w	r3, #3
 8011bf6:	e18e      	b.n	8011f16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7f9 ff67 	bl	800bada <lwip_htonl>
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c16:	8912      	ldrh	r2, [r2, #8]
 8011c18:	4413      	add	r3, r2
 8011c1a:	69ba      	ldr	r2, [r7, #24]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d227      	bcs.n	8011c70 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c26:	461a      	mov	r2, r3
 8011c28:	69bb      	ldr	r3, [r7, #24]
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d114      	bne.n	8011c58 <tcp_output+0x120>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d110      	bne.n	8011c58 <tcp_output+0x120>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d10b      	bne.n	8011c58 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2201      	movs	r2, #1
 8011c4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2200      	movs	r2, #0
 8011c54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	8b5b      	ldrh	r3, [r3, #26]
 8011c5c:	f003 0302 	and.w	r3, r3, #2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f000 814d 	beq.w	8011f00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f000 fd6c 	bl	8012744 <tcp_send_empty_ack>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	e152      	b.n	8011f16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2200      	movs	r2, #0
 8011c74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c7c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	f000 811c 	beq.w	8011ebe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011c86:	e002      	b.n	8011c8e <tcp_output+0x156>
 8011c88:	6a3b      	ldr	r3, [r7, #32]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	623b      	str	r3, [r7, #32]
 8011c8e:	6a3b      	ldr	r3, [r7, #32]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1f8      	bne.n	8011c88 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011c96:	e112      	b.n	8011ebe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	899b      	ldrh	r3, [r3, #12]
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7f9 ff05 	bl	800bab0 <lwip_htons>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	f003 0304 	and.w	r3, r3, #4
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <tcp_output+0x188>
 8011cb2:	4b43      	ldr	r3, [pc, #268]	; (8011dc0 <tcp_output+0x288>)
 8011cb4:	f240 5236 	movw	r2, #1334	; 0x536
 8011cb8:	4946      	ldr	r1, [pc, #280]	; (8011dd4 <tcp_output+0x29c>)
 8011cba:	4843      	ldr	r0, [pc, #268]	; (8011dc8 <tcp_output+0x290>)
 8011cbc:	f006 f904 	bl	8017ec8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d01f      	beq.n	8011d08 <tcp_output+0x1d0>
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	8b5b      	ldrh	r3, [r3, #26]
 8011ccc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d119      	bne.n	8011d08 <tcp_output+0x1d0>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00b      	beq.n	8011cf4 <tcp_output+0x1bc>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d110      	bne.n	8011d08 <tcp_output+0x1d0>
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cea:	891a      	ldrh	r2, [r3, #8]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d209      	bcs.n	8011d08 <tcp_output+0x1d0>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d004      	beq.n	8011d08 <tcp_output+0x1d0>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d04:	2b08      	cmp	r3, #8
 8011d06:	d901      	bls.n	8011d0c <tcp_output+0x1d4>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	e000      	b.n	8011d0e <tcp_output+0x1d6>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d106      	bne.n	8011d20 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	8b5b      	ldrh	r3, [r3, #26]
 8011d16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	f000 80e4 	beq.w	8011ee8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	7d1b      	ldrb	r3, [r3, #20]
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	d00d      	beq.n	8011d44 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	899b      	ldrh	r3, [r3, #12]
 8011d2e:	b29c      	uxth	r4, r3
 8011d30:	2010      	movs	r0, #16
 8011d32:	f7f9 febd 	bl	800bab0 <lwip_htons>
 8011d36:	4603      	mov	r3, r0
 8011d38:	461a      	mov	r2, r3
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	4322      	orrs	r2, r4
 8011d40:	b292      	uxth	r2, r2
 8011d42:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011d44:	697a      	ldr	r2, [r7, #20]
 8011d46:	6879      	ldr	r1, [r7, #4]
 8011d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d4a:	f000 f909 	bl	8011f60 <tcp_output_segment>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d009      	beq.n	8011d6e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	8b5b      	ldrh	r3, [r3, #26]
 8011d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d62:	b29a      	uxth	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	835a      	strh	r2, [r3, #26]
      return err;
 8011d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d6c:	e0d3      	b.n	8011f16 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	7d1b      	ldrb	r3, [r3, #20]
 8011d7a:	2b02      	cmp	r3, #2
 8011d7c:	d006      	beq.n	8011d8c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	8b5b      	ldrh	r3, [r3, #26]
 8011d82:	f023 0303 	bic.w	r3, r3, #3
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7f9 fea1 	bl	800bada <lwip_htonl>
 8011d98:	4604      	mov	r4, r0
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	461d      	mov	r5, r3
 8011da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	899b      	ldrh	r3, [r3, #12]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7f9 fe81 	bl	800bab0 <lwip_htons>
 8011dae:	4603      	mov	r3, r0
 8011db0:	b2db      	uxtb	r3, r3
 8011db2:	f003 0303 	and.w	r3, r3, #3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00e      	beq.n	8011dd8 <tcp_output+0x2a0>
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e00d      	b.n	8011dda <tcp_output+0x2a2>
 8011dbe:	bf00      	nop
 8011dc0:	0801a56c 	.word	0x0801a56c
 8011dc4:	0801aab0 	.word	0x0801aab0
 8011dc8:	0801a5c0 	.word	0x0801a5c0
 8011dcc:	0801aac8 	.word	0x0801aac8
 8011dd0:	2000ce18 	.word	0x2000ce18
 8011dd4:	0801aaf0 	.word	0x0801aaf0
 8011dd8:	2300      	movs	r3, #0
 8011dda:	442b      	add	r3, r5
 8011ddc:	4423      	add	r3, r4
 8011dde:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	da02      	bge.n	8011df2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df4:	891b      	ldrh	r3, [r3, #8]
 8011df6:	461c      	mov	r4, r3
 8011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	899b      	ldrh	r3, [r3, #12]
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f9 fe55 	bl	800bab0 <lwip_htons>
 8011e06:	4603      	mov	r3, r0
 8011e08:	b2db      	uxtb	r3, r3
 8011e0a:	f003 0303 	and.w	r3, r3, #3
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d001      	beq.n	8011e16 <tcp_output+0x2de>
 8011e12:	2301      	movs	r3, #1
 8011e14:	e000      	b.n	8011e18 <tcp_output+0x2e0>
 8011e16:	2300      	movs	r3, #0
 8011e18:	4423      	add	r3, r4
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d049      	beq.n	8011eb2 <tcp_output+0x37a>
      seg->next = NULL;
 8011e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e20:	2200      	movs	r2, #0
 8011e22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d105      	bne.n	8011e38 <tcp_output+0x300>
        pcb->unacked = seg;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e30:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	623b      	str	r3, [r7, #32]
 8011e36:	e03f      	b.n	8011eb8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	685b      	ldr	r3, [r3, #4]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7f9 fe4b 	bl	800bada <lwip_htonl>
 8011e44:	4604      	mov	r4, r0
 8011e46:	6a3b      	ldr	r3, [r7, #32]
 8011e48:	68db      	ldr	r3, [r3, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7f9 fe44 	bl	800bada <lwip_htonl>
 8011e52:	4603      	mov	r3, r0
 8011e54:	1ae3      	subs	r3, r4, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	da24      	bge.n	8011ea4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	3370      	adds	r3, #112	; 0x70
 8011e5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e60:	e002      	b.n	8011e68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d011      	beq.n	8011e94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011e70:	69fb      	ldr	r3, [r7, #28]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f7f9 fe2e 	bl	800bada <lwip_htonl>
 8011e7e:	4604      	mov	r4, r0
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f9 fe27 	bl	800bada <lwip_htonl>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	dbe6      	blt.n	8011e62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ea0:	601a      	str	r2, [r3, #0]
 8011ea2:	e009      	b.n	8011eb8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011ea4:	6a3b      	ldr	r3, [r7, #32]
 8011ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ea8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011eaa:	6a3b      	ldr	r3, [r7, #32]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	623b      	str	r3, [r7, #32]
 8011eb0:	e002      	b.n	8011eb8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eb4:	f7fc fc43 	bl	800e73e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ebc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d012      	beq.n	8011eea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec6:	68db      	ldr	r3, [r3, #12]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7f9 fe05 	bl	800bada <lwip_htonl>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ed6:	1ad3      	subs	r3, r2, r3
 8011ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eda:	8912      	ldrh	r2, [r2, #8]
 8011edc:	4413      	add	r3, r2
  while (seg != NULL &&
 8011ede:	69ba      	ldr	r2, [r7, #24]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	f4bf aed9 	bcs.w	8011c98 <tcp_output+0x160>
 8011ee6:	e000      	b.n	8011eea <tcp_output+0x3b2>
      break;
 8011ee8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d108      	bne.n	8011f04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011efa:	e004      	b.n	8011f06 <tcp_output+0x3ce>
    goto output_done;
 8011efc:	bf00      	nop
 8011efe:	e002      	b.n	8011f06 <tcp_output+0x3ce>
    goto output_done;
 8011f00:	bf00      	nop
 8011f02:	e000      	b.n	8011f06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011f04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	8b5b      	ldrh	r3, [r3, #26]
 8011f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3728      	adds	r7, #40	; 0x28
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011f1e:	bf00      	nop

08011f20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d106      	bne.n	8011f3c <tcp_output_segment_busy+0x1c>
 8011f2e:	4b09      	ldr	r3, [pc, #36]	; (8011f54 <tcp_output_segment_busy+0x34>)
 8011f30:	f240 529a 	movw	r2, #1434	; 0x59a
 8011f34:	4908      	ldr	r1, [pc, #32]	; (8011f58 <tcp_output_segment_busy+0x38>)
 8011f36:	4809      	ldr	r0, [pc, #36]	; (8011f5c <tcp_output_segment_busy+0x3c>)
 8011f38:	f005 ffc6 	bl	8017ec8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	7b9b      	ldrb	r3, [r3, #14]
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d001      	beq.n	8011f4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011f46:	2301      	movs	r3, #1
 8011f48:	e000      	b.n	8011f4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0801a56c 	.word	0x0801a56c
 8011f58:	0801ab08 	.word	0x0801ab08
 8011f5c:	0801a5c0 	.word	0x0801a5c0

08011f60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011f60:	b5b0      	push	{r4, r5, r7, lr}
 8011f62:	b08c      	sub	sp, #48	; 0x30
 8011f64:	af04      	add	r7, sp, #16
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	60b9      	str	r1, [r7, #8]
 8011f6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <tcp_output_segment+0x20>
 8011f72:	4b63      	ldr	r3, [pc, #396]	; (8012100 <tcp_output_segment+0x1a0>)
 8011f74:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011f78:	4962      	ldr	r1, [pc, #392]	; (8012104 <tcp_output_segment+0x1a4>)
 8011f7a:	4863      	ldr	r0, [pc, #396]	; (8012108 <tcp_output_segment+0x1a8>)
 8011f7c:	f005 ffa4 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d106      	bne.n	8011f94 <tcp_output_segment+0x34>
 8011f86:	4b5e      	ldr	r3, [pc, #376]	; (8012100 <tcp_output_segment+0x1a0>)
 8011f88:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011f8c:	495f      	ldr	r1, [pc, #380]	; (801210c <tcp_output_segment+0x1ac>)
 8011f8e:	485e      	ldr	r0, [pc, #376]	; (8012108 <tcp_output_segment+0x1a8>)
 8011f90:	f005 ff9a 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <tcp_output_segment+0x48>
 8011f9a:	4b59      	ldr	r3, [pc, #356]	; (8012100 <tcp_output_segment+0x1a0>)
 8011f9c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011fa0:	495b      	ldr	r1, [pc, #364]	; (8012110 <tcp_output_segment+0x1b0>)
 8011fa2:	4859      	ldr	r0, [pc, #356]	; (8012108 <tcp_output_segment+0x1a8>)
 8011fa4:	f005 ff90 	bl	8017ec8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7ff ffb9 	bl	8011f20 <tcp_output_segment_busy>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d001      	beq.n	8011fb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	e09f      	b.n	80120f8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	68dc      	ldr	r4, [r3, #12]
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	f7f9 fd8a 	bl	800bada <lwip_htonl>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	68dc      	ldr	r4, [r3, #12]
 8011fd2:	4610      	mov	r0, r2
 8011fd4:	f7f9 fd6c 	bl	800bab0 <lwip_htons>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011fe4:	441a      	add	r2, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	3314      	adds	r3, #20
 8011ff0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	7a9b      	ldrb	r3, [r3, #10]
 8011ff6:	f003 0301 	and.w	r3, r3, #1
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d015      	beq.n	801202a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	3304      	adds	r3, #4
 8012002:	461a      	mov	r2, r3
 8012004:	6879      	ldr	r1, [r7, #4]
 8012006:	f44f 7006 	mov.w	r0, #536	; 0x218
 801200a:	f7fc fe8f 	bl	800ed2c <tcp_eff_send_mss_netif>
 801200e:	4603      	mov	r3, r0
 8012010:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012012:	8b7b      	ldrh	r3, [r7, #26]
 8012014:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012018:	4618      	mov	r0, r3
 801201a:	f7f9 fd5e 	bl	800bada <lwip_htonl>
 801201e:	4602      	mov	r2, r0
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	3304      	adds	r3, #4
 8012028:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012030:	2b00      	cmp	r3, #0
 8012032:	da02      	bge.n	801203a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2200      	movs	r2, #0
 8012038:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10c      	bne.n	801205c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012042:	4b34      	ldr	r3, [pc, #208]	; (8012114 <tcp_output_segment+0x1b4>)
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	4618      	mov	r0, r3
 8012052:	f7f9 fd42 	bl	800bada <lwip_htonl>
 8012056:	4602      	mov	r2, r0
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	68da      	ldr	r2, [r3, #12]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	8959      	ldrh	r1, [r3, #10]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	8b3a      	ldrh	r2, [r7, #24]
 8012076:	1a8a      	subs	r2, r1, r2
 8012078:	b292      	uxth	r2, r2
 801207a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	685b      	ldr	r3, [r3, #4]
 8012080:	8919      	ldrh	r1, [r3, #8]
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	8b3a      	ldrh	r2, [r7, #24]
 8012088:	1a8a      	subs	r2, r1, r2
 801208a:	b292      	uxth	r2, r2
 801208c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	68fa      	ldr	r2, [r7, #12]
 8012094:	68d2      	ldr	r2, [r2, #12]
 8012096:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	2200      	movs	r2, #0
 801209e:	741a      	strb	r2, [r3, #16]
 80120a0:	2200      	movs	r2, #0
 80120a2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	f103 0214 	add.w	r2, r3, #20
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	7a9b      	ldrb	r3, [r3, #10]
 80120b0:	009b      	lsls	r3, r3, #2
 80120b2:	f003 0304 	and.w	r3, r3, #4
 80120b6:	4413      	add	r3, r2
 80120b8:	69fa      	ldr	r2, [r7, #28]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d006      	beq.n	80120cc <tcp_output_segment+0x16c>
 80120be:	4b10      	ldr	r3, [pc, #64]	; (8012100 <tcp_output_segment+0x1a0>)
 80120c0:	f240 621c 	movw	r2, #1564	; 0x61c
 80120c4:	4914      	ldr	r1, [pc, #80]	; (8012118 <tcp_output_segment+0x1b8>)
 80120c6:	4810      	ldr	r0, [pc, #64]	; (8012108 <tcp_output_segment+0x1a8>)
 80120c8:	f005 fefe 	bl	8017ec8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	6858      	ldr	r0, [r3, #4]
 80120d0:	68b9      	ldr	r1, [r7, #8]
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	1d1c      	adds	r4, r3, #4
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	7add      	ldrb	r5, [r3, #11]
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	7a9b      	ldrb	r3, [r3, #10]
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	9202      	str	r2, [sp, #8]
 80120e2:	2206      	movs	r2, #6
 80120e4:	9201      	str	r2, [sp, #4]
 80120e6:	9300      	str	r3, [sp, #0]
 80120e8:	462b      	mov	r3, r5
 80120ea:	4622      	mov	r2, r4
 80120ec:	f004 fc1c 	bl	8016928 <ip4_output_if>
 80120f0:	4603      	mov	r3, r0
 80120f2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80120f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3720      	adds	r7, #32
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bdb0      	pop	{r4, r5, r7, pc}
 8012100:	0801a56c 	.word	0x0801a56c
 8012104:	0801ab30 	.word	0x0801ab30
 8012108:	0801a5c0 	.word	0x0801a5c0
 801210c:	0801ab50 	.word	0x0801ab50
 8012110:	0801ab70 	.word	0x0801ab70
 8012114:	2000ce08 	.word	0x2000ce08
 8012118:	0801ab94 	.word	0x0801ab94

0801211c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801211c:	b5b0      	push	{r4, r5, r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <tcp_rexmit_rto_prepare+0x1c>
 801212a:	4b31      	ldr	r3, [pc, #196]	; (80121f0 <tcp_rexmit_rto_prepare+0xd4>)
 801212c:	f240 6263 	movw	r2, #1635	; 0x663
 8012130:	4930      	ldr	r1, [pc, #192]	; (80121f4 <tcp_rexmit_rto_prepare+0xd8>)
 8012132:	4831      	ldr	r0, [pc, #196]	; (80121f8 <tcp_rexmit_rto_prepare+0xdc>)
 8012134:	f005 fec8 	bl	8017ec8 <iprintf>

  if (pcb->unacked == NULL) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801213c:	2b00      	cmp	r3, #0
 801213e:	d102      	bne.n	8012146 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012140:	f06f 0305 	mvn.w	r3, #5
 8012144:	e050      	b.n	80121e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801214a:	60fb      	str	r3, [r7, #12]
 801214c:	e00b      	b.n	8012166 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7ff fee6 	bl	8011f20 <tcp_output_segment_busy>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801215a:	f06f 0305 	mvn.w	r3, #5
 801215e:	e043      	b.n	80121e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	60fb      	str	r3, [r7, #12]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1ef      	bne.n	801214e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f7ff fed6 	bl	8011f20 <tcp_output_segment_busy>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	d002      	beq.n	8012180 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801217a:	f06f 0305 	mvn.w	r3, #5
 801217e:	e033      	b.n	80121e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2200      	movs	r2, #0
 8012194:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	8b5b      	ldrh	r3, [r3, #26]
 801219a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801219e:	b29a      	uxth	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7f9 fc95 	bl	800bada <lwip_htonl>
 80121b0:	4604      	mov	r4, r0
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	891b      	ldrh	r3, [r3, #8]
 80121b6:	461d      	mov	r5, r3
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	899b      	ldrh	r3, [r3, #12]
 80121be:	b29b      	uxth	r3, r3
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7f9 fc75 	bl	800bab0 <lwip_htons>
 80121c6:	4603      	mov	r3, r0
 80121c8:	b2db      	uxtb	r3, r3
 80121ca:	f003 0303 	and.w	r3, r3, #3
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d001      	beq.n	80121d6 <tcp_rexmit_rto_prepare+0xba>
 80121d2:	2301      	movs	r3, #1
 80121d4:	e000      	b.n	80121d8 <tcp_rexmit_rto_prepare+0xbc>
 80121d6:	2300      	movs	r3, #0
 80121d8:	442b      	add	r3, r5
 80121da:	18e2      	adds	r2, r4, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80121e6:	2300      	movs	r3, #0
}
 80121e8:	4618      	mov	r0, r3
 80121ea:	3710      	adds	r7, #16
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bdb0      	pop	{r4, r5, r7, pc}
 80121f0:	0801a56c 	.word	0x0801a56c
 80121f4:	0801aba8 	.word	0x0801aba8
 80121f8:	0801a5c0 	.word	0x0801a5c0

080121fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <tcp_rexmit_rto_commit+0x1c>
 801220a:	4b0d      	ldr	r3, [pc, #52]	; (8012240 <tcp_rexmit_rto_commit+0x44>)
 801220c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012210:	490c      	ldr	r1, [pc, #48]	; (8012244 <tcp_rexmit_rto_commit+0x48>)
 8012212:	480d      	ldr	r0, [pc, #52]	; (8012248 <tcp_rexmit_rto_commit+0x4c>)
 8012214:	f005 fe58 	bl	8017ec8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801221e:	2bff      	cmp	r3, #255	; 0xff
 8012220:	d007      	beq.n	8012232 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012228:	3301      	adds	r3, #1
 801222a:	b2da      	uxtb	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff fc80 	bl	8011b38 <tcp_output>
}
 8012238:	bf00      	nop
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	0801a56c 	.word	0x0801a56c
 8012244:	0801abcc 	.word	0x0801abcc
 8012248:	0801a5c0 	.word	0x0801a5c0

0801224c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d106      	bne.n	8012268 <tcp_rexmit_rto+0x1c>
 801225a:	4b0a      	ldr	r3, [pc, #40]	; (8012284 <tcp_rexmit_rto+0x38>)
 801225c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012260:	4909      	ldr	r1, [pc, #36]	; (8012288 <tcp_rexmit_rto+0x3c>)
 8012262:	480a      	ldr	r0, [pc, #40]	; (801228c <tcp_rexmit_rto+0x40>)
 8012264:	f005 fe30 	bl	8017ec8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7ff ff57 	bl	801211c <tcp_rexmit_rto_prepare>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d102      	bne.n	801227a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	f7ff ffc1 	bl	80121fc <tcp_rexmit_rto_commit>
  }
}
 801227a:	bf00      	nop
 801227c:	3708      	adds	r7, #8
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	0801a56c 	.word	0x0801a56c
 8012288:	0801abf0 	.word	0x0801abf0
 801228c:	0801a5c0 	.word	0x0801a5c0

08012290 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012290:	b590      	push	{r4, r7, lr}
 8012292:	b085      	sub	sp, #20
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d106      	bne.n	80122ac <tcp_rexmit+0x1c>
 801229e:	4b2f      	ldr	r3, [pc, #188]	; (801235c <tcp_rexmit+0xcc>)
 80122a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80122a4:	492e      	ldr	r1, [pc, #184]	; (8012360 <tcp_rexmit+0xd0>)
 80122a6:	482f      	ldr	r0, [pc, #188]	; (8012364 <tcp_rexmit+0xd4>)
 80122a8:	f005 fe0e 	bl	8017ec8 <iprintf>

  if (pcb->unacked == NULL) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d102      	bne.n	80122ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80122b4:	f06f 0305 	mvn.w	r3, #5
 80122b8:	e04c      	b.n	8012354 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80122c0:	68b8      	ldr	r0, [r7, #8]
 80122c2:	f7ff fe2d 	bl	8011f20 <tcp_output_segment_busy>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d002      	beq.n	80122d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80122cc:	f06f 0305 	mvn.w	r3, #5
 80122d0:	e040      	b.n	8012354 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	681a      	ldr	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	336c      	adds	r3, #108	; 0x6c
 80122de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80122e0:	e002      	b.n	80122e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d011      	beq.n	8012314 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7f9 fbee 	bl	800bada <lwip_htonl>
 80122fe:	4604      	mov	r4, r0
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	4618      	mov	r0, r3
 8012308:	f7f9 fbe7 	bl	800bada <lwip_htonl>
 801230c:	4603      	mov	r3, r0
 801230e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012310:	2b00      	cmp	r3, #0
 8012312:	dbe6      	blt.n	80122e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	68ba      	ldr	r2, [r7, #8]
 8012320:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d103      	bne.n	8012332 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012338:	2bff      	cmp	r3, #255	; 0xff
 801233a:	d007      	beq.n	801234c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012342:	3301      	adds	r3, #1
 8012344:	b2da      	uxtb	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2200      	movs	r2, #0
 8012350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3714      	adds	r7, #20
 8012358:	46bd      	mov	sp, r7
 801235a:	bd90      	pop	{r4, r7, pc}
 801235c:	0801a56c 	.word	0x0801a56c
 8012360:	0801ac0c 	.word	0x0801ac0c
 8012364:	0801a5c0 	.word	0x0801a5c0

08012368 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d106      	bne.n	8012384 <tcp_rexmit_fast+0x1c>
 8012376:	4b2a      	ldr	r3, [pc, #168]	; (8012420 <tcp_rexmit_fast+0xb8>)
 8012378:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801237c:	4929      	ldr	r1, [pc, #164]	; (8012424 <tcp_rexmit_fast+0xbc>)
 801237e:	482a      	ldr	r0, [pc, #168]	; (8012428 <tcp_rexmit_fast+0xc0>)
 8012380:	f005 fda2 	bl	8017ec8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012388:	2b00      	cmp	r3, #0
 801238a:	d044      	beq.n	8012416 <tcp_rexmit_fast+0xae>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	8b5b      	ldrh	r3, [r3, #26]
 8012390:	f003 0304 	and.w	r3, r3, #4
 8012394:	2b00      	cmp	r3, #0
 8012396:	d13e      	bne.n	8012416 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff ff79 	bl	8012290 <tcp_rexmit>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d138      	bne.n	8012416 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123b0:	4293      	cmp	r3, r2
 80123b2:	bf28      	it	cs
 80123b4:	4613      	movcs	r3, r2
 80123b6:	b29b      	uxth	r3, r3
 80123b8:	0fda      	lsrs	r2, r3, #31
 80123ba:	4413      	add	r3, r2
 80123bc:	105b      	asrs	r3, r3, #1
 80123be:	b29a      	uxth	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80123cc:	461a      	mov	r2, r3
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d206      	bcs.n	80123e6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123dc:	005b      	lsls	r3, r3, #1
 80123de:	b29a      	uxth	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123f0:	4619      	mov	r1, r3
 80123f2:	0049      	lsls	r1, r1, #1
 80123f4:	440b      	add	r3, r1
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	4413      	add	r3, r2
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	8b5b      	ldrh	r3, [r3, #26]
 8012406:	f043 0304 	orr.w	r3, r3, #4
 801240a:	b29a      	uxth	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012416:	bf00      	nop
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	0801a56c 	.word	0x0801a56c
 8012424:	0801ac24 	.word	0x0801ac24
 8012428:	0801a5c0 	.word	0x0801a5c0

0801242c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b086      	sub	sp, #24
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	607b      	str	r3, [r7, #4]
 8012436:	460b      	mov	r3, r1
 8012438:	817b      	strh	r3, [r7, #10]
 801243a:	4613      	mov	r3, r2
 801243c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801243e:	897a      	ldrh	r2, [r7, #10]
 8012440:	893b      	ldrh	r3, [r7, #8]
 8012442:	4413      	add	r3, r2
 8012444:	b29b      	uxth	r3, r3
 8012446:	3314      	adds	r3, #20
 8012448:	b29b      	uxth	r3, r3
 801244a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801244e:	4619      	mov	r1, r3
 8012450:	2022      	movs	r0, #34	; 0x22
 8012452:	f7fa fc01 	bl	800cc58 <pbuf_alloc>
 8012456:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d04d      	beq.n	80124fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801245e:	897b      	ldrh	r3, [r7, #10]
 8012460:	3313      	adds	r3, #19
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	8952      	ldrh	r2, [r2, #10]
 8012466:	4293      	cmp	r3, r2
 8012468:	db06      	blt.n	8012478 <tcp_output_alloc_header_common+0x4c>
 801246a:	4b26      	ldr	r3, [pc, #152]	; (8012504 <tcp_output_alloc_header_common+0xd8>)
 801246c:	f240 7223 	movw	r2, #1827	; 0x723
 8012470:	4925      	ldr	r1, [pc, #148]	; (8012508 <tcp_output_alloc_header_common+0xdc>)
 8012472:	4826      	ldr	r0, [pc, #152]	; (801250c <tcp_output_alloc_header_common+0xe0>)
 8012474:	f005 fd28 	bl	8017ec8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801247e:	8c3b      	ldrh	r3, [r7, #32]
 8012480:	4618      	mov	r0, r3
 8012482:	f7f9 fb15 	bl	800bab0 <lwip_htons>
 8012486:	4603      	mov	r3, r0
 8012488:	461a      	mov	r2, r3
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801248e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012490:	4618      	mov	r0, r3
 8012492:	f7f9 fb0d 	bl	800bab0 <lwip_htons>
 8012496:	4603      	mov	r3, r0
 8012498:	461a      	mov	r2, r3
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7f9 fb18 	bl	800bada <lwip_htonl>
 80124aa:	4602      	mov	r2, r0
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80124b0:	897b      	ldrh	r3, [r7, #10]
 80124b2:	089b      	lsrs	r3, r3, #2
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	3305      	adds	r3, #5
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	031b      	lsls	r3, r3, #12
 80124bc:	b29a      	uxth	r2, r3
 80124be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4313      	orrs	r3, r2
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f9 faf1 	bl	800bab0 <lwip_htons>
 80124ce:	4603      	mov	r3, r0
 80124d0:	461a      	mov	r2, r3
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80124d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80124d8:	4618      	mov	r0, r3
 80124da:	f7f9 fae9 	bl	800bab0 <lwip_htons>
 80124de:	4603      	mov	r3, r0
 80124e0:	461a      	mov	r2, r3
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	2200      	movs	r2, #0
 80124ea:	741a      	strb	r2, [r3, #16]
 80124ec:	2200      	movs	r2, #0
 80124ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	2200      	movs	r2, #0
 80124f4:	749a      	strb	r2, [r3, #18]
 80124f6:	2200      	movs	r2, #0
 80124f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80124fa:	697b      	ldr	r3, [r7, #20]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3718      	adds	r7, #24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	0801a56c 	.word	0x0801a56c
 8012508:	0801ac44 	.word	0x0801ac44
 801250c:	0801a5c0 	.word	0x0801a5c0

08012510 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012510:	b5b0      	push	{r4, r5, r7, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	af04      	add	r7, sp, #16
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	607b      	str	r3, [r7, #4]
 801251a:	460b      	mov	r3, r1
 801251c:	817b      	strh	r3, [r7, #10]
 801251e:	4613      	mov	r3, r2
 8012520:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <tcp_output_alloc_header+0x26>
 8012528:	4b15      	ldr	r3, [pc, #84]	; (8012580 <tcp_output_alloc_header+0x70>)
 801252a:	f240 7242 	movw	r2, #1858	; 0x742
 801252e:	4915      	ldr	r1, [pc, #84]	; (8012584 <tcp_output_alloc_header+0x74>)
 8012530:	4815      	ldr	r0, [pc, #84]	; (8012588 <tcp_output_alloc_header+0x78>)
 8012532:	f005 fcc9 	bl	8017ec8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	8adb      	ldrh	r3, [r3, #22]
 801253e:	68fa      	ldr	r2, [r7, #12]
 8012540:	8b12      	ldrh	r2, [r2, #24]
 8012542:	68f9      	ldr	r1, [r7, #12]
 8012544:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012546:	893d      	ldrh	r5, [r7, #8]
 8012548:	897c      	ldrh	r4, [r7, #10]
 801254a:	9103      	str	r1, [sp, #12]
 801254c:	2110      	movs	r1, #16
 801254e:	9102      	str	r1, [sp, #8]
 8012550:	9201      	str	r2, [sp, #4]
 8012552:	9300      	str	r3, [sp, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	462a      	mov	r2, r5
 8012558:	4621      	mov	r1, r4
 801255a:	f7ff ff67 	bl	801242c <tcp_output_alloc_header_common>
 801255e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d006      	beq.n	8012574 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801256e:	441a      	add	r2, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012574:	697b      	ldr	r3, [r7, #20]
}
 8012576:	4618      	mov	r0, r3
 8012578:	3718      	adds	r7, #24
 801257a:	46bd      	mov	sp, r7
 801257c:	bdb0      	pop	{r4, r5, r7, pc}
 801257e:	bf00      	nop
 8012580:	0801a56c 	.word	0x0801a56c
 8012584:	0801ac74 	.word	0x0801ac74
 8012588:	0801a5c0 	.word	0x0801a5c0

0801258c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b088      	sub	sp, #32
 8012590:	af00      	add	r7, sp, #0
 8012592:	60f8      	str	r0, [r7, #12]
 8012594:	60b9      	str	r1, [r7, #8]
 8012596:	4611      	mov	r1, r2
 8012598:	461a      	mov	r2, r3
 801259a:	460b      	mov	r3, r1
 801259c:	71fb      	strb	r3, [r7, #7]
 801259e:	4613      	mov	r3, r2
 80125a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80125a2:	2300      	movs	r3, #0
 80125a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <tcp_output_fill_options+0x2e>
 80125ac:	4b13      	ldr	r3, [pc, #76]	; (80125fc <tcp_output_fill_options+0x70>)
 80125ae:	f240 7256 	movw	r2, #1878	; 0x756
 80125b2:	4913      	ldr	r1, [pc, #76]	; (8012600 <tcp_output_fill_options+0x74>)
 80125b4:	4813      	ldr	r0, [pc, #76]	; (8012604 <tcp_output_fill_options+0x78>)
 80125b6:	f005 fc87 	bl	8017ec8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	3314      	adds	r3, #20
 80125c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	f103 0214 	add.w	r2, r3, #20
 80125cc:	8bfb      	ldrh	r3, [r7, #30]
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	4619      	mov	r1, r3
 80125d2:	79fb      	ldrb	r3, [r7, #7]
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	f003 0304 	and.w	r3, r3, #4
 80125da:	440b      	add	r3, r1
 80125dc:	4413      	add	r3, r2
 80125de:	697a      	ldr	r2, [r7, #20]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d006      	beq.n	80125f2 <tcp_output_fill_options+0x66>
 80125e4:	4b05      	ldr	r3, [pc, #20]	; (80125fc <tcp_output_fill_options+0x70>)
 80125e6:	f240 7275 	movw	r2, #1909	; 0x775
 80125ea:	4907      	ldr	r1, [pc, #28]	; (8012608 <tcp_output_fill_options+0x7c>)
 80125ec:	4805      	ldr	r0, [pc, #20]	; (8012604 <tcp_output_fill_options+0x78>)
 80125ee:	f005 fc6b 	bl	8017ec8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80125f2:	bf00      	nop
 80125f4:	3720      	adds	r7, #32
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	0801a56c 	.word	0x0801a56c
 8012600:	0801ac9c 	.word	0x0801ac9c
 8012604:	0801a5c0 	.word	0x0801a5c0
 8012608:	0801ab94 	.word	0x0801ab94

0801260c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b08a      	sub	sp, #40	; 0x28
 8012610:	af04      	add	r7, sp, #16
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	607a      	str	r2, [r7, #4]
 8012618:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d106      	bne.n	801262e <tcp_output_control_segment+0x22>
 8012620:	4b1c      	ldr	r3, [pc, #112]	; (8012694 <tcp_output_control_segment+0x88>)
 8012622:	f240 7287 	movw	r2, #1927	; 0x787
 8012626:	491c      	ldr	r1, [pc, #112]	; (8012698 <tcp_output_control_segment+0x8c>)
 8012628:	481c      	ldr	r0, [pc, #112]	; (801269c <tcp_output_control_segment+0x90>)
 801262a:	f005 fc4d 	bl	8017ec8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801262e:	683a      	ldr	r2, [r7, #0]
 8012630:	6879      	ldr	r1, [r7, #4]
 8012632:	68f8      	ldr	r0, [r7, #12]
 8012634:	f7fe ff40 	bl	80114b8 <tcp_route>
 8012638:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d102      	bne.n	8012646 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012640:	23fc      	movs	r3, #252	; 0xfc
 8012642:	75fb      	strb	r3, [r7, #23]
 8012644:	e01c      	b.n	8012680 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d006      	beq.n	801265a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	7adb      	ldrb	r3, [r3, #11]
 8012650:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	7a9b      	ldrb	r3, [r3, #10]
 8012656:	757b      	strb	r3, [r7, #21]
 8012658:	e003      	b.n	8012662 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801265a:	23ff      	movs	r3, #255	; 0xff
 801265c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801265e:	2300      	movs	r3, #0
 8012660:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012662:	7dba      	ldrb	r2, [r7, #22]
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	9302      	str	r3, [sp, #8]
 8012668:	2306      	movs	r3, #6
 801266a:	9301      	str	r3, [sp, #4]
 801266c:	7d7b      	ldrb	r3, [r7, #21]
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	4613      	mov	r3, r2
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	6879      	ldr	r1, [r7, #4]
 8012676:	68b8      	ldr	r0, [r7, #8]
 8012678:	f004 f956 	bl	8016928 <ip4_output_if>
 801267c:	4603      	mov	r3, r0
 801267e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012680:	68b8      	ldr	r0, [r7, #8]
 8012682:	f7fa fdcd 	bl	800d220 <pbuf_free>
  return err;
 8012686:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801268a:	4618      	mov	r0, r3
 801268c:	3718      	adds	r7, #24
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	0801a56c 	.word	0x0801a56c
 8012698:	0801acc4 	.word	0x0801acc4
 801269c:	0801a5c0 	.word	0x0801a5c0

080126a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80126a0:	b590      	push	{r4, r7, lr}
 80126a2:	b08b      	sub	sp, #44	; 0x2c
 80126a4:	af04      	add	r7, sp, #16
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
 80126ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d106      	bne.n	80126c2 <tcp_rst+0x22>
 80126b4:	4b1f      	ldr	r3, [pc, #124]	; (8012734 <tcp_rst+0x94>)
 80126b6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80126ba:	491f      	ldr	r1, [pc, #124]	; (8012738 <tcp_rst+0x98>)
 80126bc:	481f      	ldr	r0, [pc, #124]	; (801273c <tcp_rst+0x9c>)
 80126be:	f005 fc03 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d106      	bne.n	80126d6 <tcp_rst+0x36>
 80126c8:	4b1a      	ldr	r3, [pc, #104]	; (8012734 <tcp_rst+0x94>)
 80126ca:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80126ce:	491c      	ldr	r1, [pc, #112]	; (8012740 <tcp_rst+0xa0>)
 80126d0:	481a      	ldr	r0, [pc, #104]	; (801273c <tcp_rst+0x9c>)
 80126d2:	f005 fbf9 	bl	8017ec8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80126d6:	2300      	movs	r3, #0
 80126d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80126da:	f246 0308 	movw	r3, #24584	; 0x6008
 80126de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80126e0:	7dfb      	ldrb	r3, [r7, #23]
 80126e2:	b29c      	uxth	r4, r3
 80126e4:	68b8      	ldr	r0, [r7, #8]
 80126e6:	f7f9 f9f8 	bl	800bada <lwip_htonl>
 80126ea:	4602      	mov	r2, r0
 80126ec:	8abb      	ldrh	r3, [r7, #20]
 80126ee:	9303      	str	r3, [sp, #12]
 80126f0:	2314      	movs	r3, #20
 80126f2:	9302      	str	r3, [sp, #8]
 80126f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80126f6:	9301      	str	r3, [sp, #4]
 80126f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	4613      	mov	r3, r2
 80126fe:	2200      	movs	r2, #0
 8012700:	4621      	mov	r1, r4
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fe92 	bl	801242c <tcp_output_alloc_header_common>
 8012708:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00c      	beq.n	801272a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012710:	7dfb      	ldrb	r3, [r7, #23]
 8012712:	2200      	movs	r2, #0
 8012714:	6939      	ldr	r1, [r7, #16]
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f7ff ff38 	bl	801258c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	6939      	ldr	r1, [r7, #16]
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	f7ff ff72 	bl	801260c <tcp_output_control_segment>
 8012728:	e000      	b.n	801272c <tcp_rst+0x8c>
    return;
 801272a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801272c:	371c      	adds	r7, #28
 801272e:	46bd      	mov	sp, r7
 8012730:	bd90      	pop	{r4, r7, pc}
 8012732:	bf00      	nop
 8012734:	0801a56c 	.word	0x0801a56c
 8012738:	0801acf0 	.word	0x0801acf0
 801273c:	0801a5c0 	.word	0x0801a5c0
 8012740:	0801ad0c 	.word	0x0801ad0c

08012744 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012744:	b590      	push	{r4, r7, lr}
 8012746:	b087      	sub	sp, #28
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801274c:	2300      	movs	r3, #0
 801274e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d106      	bne.n	8012768 <tcp_send_empty_ack+0x24>
 801275a:	4b28      	ldr	r3, [pc, #160]	; (80127fc <tcp_send_empty_ack+0xb8>)
 801275c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012760:	4927      	ldr	r1, [pc, #156]	; (8012800 <tcp_send_empty_ack+0xbc>)
 8012762:	4828      	ldr	r0, [pc, #160]	; (8012804 <tcp_send_empty_ack+0xc0>)
 8012764:	f005 fbb0 	bl	8017ec8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012768:	7dfb      	ldrb	r3, [r7, #23]
 801276a:	009b      	lsls	r3, r3, #2
 801276c:	b2db      	uxtb	r3, r3
 801276e:	f003 0304 	and.w	r3, r3, #4
 8012772:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012774:	7d7b      	ldrb	r3, [r7, #21]
 8012776:	b29c      	uxth	r4, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801277c:	4618      	mov	r0, r3
 801277e:	f7f9 f9ac 	bl	800bada <lwip_htonl>
 8012782:	4603      	mov	r3, r0
 8012784:	2200      	movs	r2, #0
 8012786:	4621      	mov	r1, r4
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff fec1 	bl	8012510 <tcp_output_alloc_header>
 801278e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d109      	bne.n	80127aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8b5b      	ldrh	r3, [r3, #26]
 801279a:	f043 0303 	orr.w	r3, r3, #3
 801279e:	b29a      	uxth	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80127a4:	f06f 0301 	mvn.w	r3, #1
 80127a8:	e023      	b.n	80127f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80127aa:	7dbb      	ldrb	r3, [r7, #22]
 80127ac:	7dfa      	ldrb	r2, [r7, #23]
 80127ae:	6939      	ldr	r1, [r7, #16]
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7ff feeb 	bl	801258c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3304      	adds	r3, #4
 80127bc:	6939      	ldr	r1, [r7, #16]
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7ff ff24 	bl	801260c <tcp_output_control_segment>
 80127c4:	4603      	mov	r3, r0
 80127c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80127c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d007      	beq.n	80127e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	8b5b      	ldrh	r3, [r3, #26]
 80127d4:	f043 0303 	orr.w	r3, r3, #3
 80127d8:	b29a      	uxth	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	835a      	strh	r2, [r3, #26]
 80127de:	e006      	b.n	80127ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	8b5b      	ldrh	r3, [r3, #26]
 80127e4:	f023 0303 	bic.w	r3, r3, #3
 80127e8:	b29a      	uxth	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80127ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	371c      	adds	r7, #28
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd90      	pop	{r4, r7, pc}
 80127fa:	bf00      	nop
 80127fc:	0801a56c 	.word	0x0801a56c
 8012800:	0801ad28 	.word	0x0801ad28
 8012804:	0801a5c0 	.word	0x0801a5c0

08012808 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012808:	b590      	push	{r4, r7, lr}
 801280a:	b087      	sub	sp, #28
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012810:	2300      	movs	r3, #0
 8012812:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d106      	bne.n	8012828 <tcp_keepalive+0x20>
 801281a:	4b18      	ldr	r3, [pc, #96]	; (801287c <tcp_keepalive+0x74>)
 801281c:	f640 0224 	movw	r2, #2084	; 0x824
 8012820:	4917      	ldr	r1, [pc, #92]	; (8012880 <tcp_keepalive+0x78>)
 8012822:	4818      	ldr	r0, [pc, #96]	; (8012884 <tcp_keepalive+0x7c>)
 8012824:	f005 fb50 	bl	8017ec8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012828:	7dfb      	ldrb	r3, [r7, #23]
 801282a:	b29c      	uxth	r4, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012830:	3b01      	subs	r3, #1
 8012832:	4618      	mov	r0, r3
 8012834:	f7f9 f951 	bl	800bada <lwip_htonl>
 8012838:	4603      	mov	r3, r0
 801283a:	2200      	movs	r2, #0
 801283c:	4621      	mov	r1, r4
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f7ff fe66 	bl	8012510 <tcp_output_alloc_header>
 8012844:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801284c:	f04f 33ff 	mov.w	r3, #4294967295
 8012850:	e010      	b.n	8012874 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012852:	7dfb      	ldrb	r3, [r7, #23]
 8012854:	2200      	movs	r2, #0
 8012856:	6939      	ldr	r1, [r7, #16]
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7ff fe97 	bl	801258c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3304      	adds	r3, #4
 8012864:	6939      	ldr	r1, [r7, #16]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff fed0 	bl	801260c <tcp_output_control_segment>
 801286c:	4603      	mov	r3, r0
 801286e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012874:	4618      	mov	r0, r3
 8012876:	371c      	adds	r7, #28
 8012878:	46bd      	mov	sp, r7
 801287a:	bd90      	pop	{r4, r7, pc}
 801287c:	0801a56c 	.word	0x0801a56c
 8012880:	0801ad48 	.word	0x0801ad48
 8012884:	0801a5c0 	.word	0x0801a5c0

08012888 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012888:	b590      	push	{r4, r7, lr}
 801288a:	b08b      	sub	sp, #44	; 0x2c
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012890:	2300      	movs	r3, #0
 8012892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d106      	bne.n	80128aa <tcp_zero_window_probe+0x22>
 801289c:	4b4c      	ldr	r3, [pc, #304]	; (80129d0 <tcp_zero_window_probe+0x148>)
 801289e:	f640 024f 	movw	r2, #2127	; 0x84f
 80128a2:	494c      	ldr	r1, [pc, #304]	; (80129d4 <tcp_zero_window_probe+0x14c>)
 80128a4:	484c      	ldr	r0, [pc, #304]	; (80129d8 <tcp_zero_window_probe+0x150>)
 80128a6:	f005 fb0f 	bl	8017ec8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80128b0:	6a3b      	ldr	r3, [r7, #32]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d101      	bne.n	80128ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80128b6:	2300      	movs	r3, #0
 80128b8:	e086      	b.n	80129c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80128c0:	2bff      	cmp	r3, #255	; 0xff
 80128c2:	d007      	beq.n	80128d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80128ca:	3301      	adds	r3, #1
 80128cc:	b2da      	uxtb	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80128d4:	6a3b      	ldr	r3, [r7, #32]
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	899b      	ldrh	r3, [r3, #12]
 80128da:	b29b      	uxth	r3, r3
 80128dc:	4618      	mov	r0, r3
 80128de:	f7f9 f8e7 	bl	800bab0 <lwip_htons>
 80128e2:	4603      	mov	r3, r0
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	f003 0301 	and.w	r3, r3, #1
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d005      	beq.n	80128fa <tcp_zero_window_probe+0x72>
 80128ee:	6a3b      	ldr	r3, [r7, #32]
 80128f0:	891b      	ldrh	r3, [r3, #8]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d101      	bne.n	80128fa <tcp_zero_window_probe+0x72>
 80128f6:	2301      	movs	r3, #1
 80128f8:	e000      	b.n	80128fc <tcp_zero_window_probe+0x74>
 80128fa:	2300      	movs	r3, #0
 80128fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80128fe:	7ffb      	ldrb	r3, [r7, #31]
 8012900:	2b00      	cmp	r3, #0
 8012902:	bf0c      	ite	eq
 8012904:	2301      	moveq	r3, #1
 8012906:	2300      	movne	r3, #0
 8012908:	b2db      	uxtb	r3, r3
 801290a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801290c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012910:	b299      	uxth	r1, r3
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	8bba      	ldrh	r2, [r7, #28]
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7ff fdf8 	bl	8012510 <tcp_output_alloc_header>
 8012920:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d102      	bne.n	801292e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012928:	f04f 33ff 	mov.w	r3, #4294967295
 801292c:	e04c      	b.n	80129c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012934:	7ffb      	ldrb	r3, [r7, #31]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d011      	beq.n	801295e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	b29b      	uxth	r3, r3
 8012940:	b21b      	sxth	r3, r3
 8012942:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012946:	b21c      	sxth	r4, r3
 8012948:	2011      	movs	r0, #17
 801294a:	f7f9 f8b1 	bl	800bab0 <lwip_htons>
 801294e:	4603      	mov	r3, r0
 8012950:	b21b      	sxth	r3, r3
 8012952:	4323      	orrs	r3, r4
 8012954:	b21b      	sxth	r3, r3
 8012956:	b29a      	uxth	r2, r3
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	819a      	strh	r2, [r3, #12]
 801295c:	e010      	b.n	8012980 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801295e:	69bb      	ldr	r3, [r7, #24]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	3314      	adds	r3, #20
 8012964:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	6858      	ldr	r0, [r3, #4]
 801296a:	6a3b      	ldr	r3, [r7, #32]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	891a      	ldrh	r2, [r3, #8]
 8012970:	6a3b      	ldr	r3, [r7, #32]
 8012972:	891b      	ldrh	r3, [r3, #8]
 8012974:	1ad3      	subs	r3, r2, r3
 8012976:	b29b      	uxth	r3, r3
 8012978:	2201      	movs	r2, #1
 801297a:	6939      	ldr	r1, [r7, #16]
 801297c:	f7fa fe56 	bl	800d62c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4618      	mov	r0, r3
 8012988:	f7f9 f8a7 	bl	800bada <lwip_htonl>
 801298c:	4603      	mov	r3, r0
 801298e:	3301      	adds	r3, #1
 8012990:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	1ad3      	subs	r3, r2, r3
 801299a:	2b00      	cmp	r3, #0
 801299c:	da02      	bge.n	80129a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	68fa      	ldr	r2, [r7, #12]
 80129a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80129a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129a8:	2200      	movs	r2, #0
 80129aa:	69b9      	ldr	r1, [r7, #24]
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f7ff fded 	bl	801258c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3304      	adds	r3, #4
 80129b8:	69b9      	ldr	r1, [r7, #24]
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f7ff fe26 	bl	801260c <tcp_output_control_segment>
 80129c0:	4603      	mov	r3, r0
 80129c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80129c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	372c      	adds	r7, #44	; 0x2c
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd90      	pop	{r4, r7, pc}
 80129d0:	0801a56c 	.word	0x0801a56c
 80129d4:	0801ad64 	.word	0x0801ad64
 80129d8:	0801a5c0 	.word	0x0801a5c0

080129dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80129e4:	f7fa ff10 	bl	800d808 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80129e8:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <tcpip_tcp_timer+0x38>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d103      	bne.n	80129f8 <tcpip_tcp_timer+0x1c>
 80129f0:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <tcpip_tcp_timer+0x3c>)
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d005      	beq.n	8012a04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80129f8:	2200      	movs	r2, #0
 80129fa:	4908      	ldr	r1, [pc, #32]	; (8012a1c <tcpip_tcp_timer+0x40>)
 80129fc:	20fa      	movs	r0, #250	; 0xfa
 80129fe:	f000 f8f3 	bl	8012be8 <sys_timeout>
 8012a02:	e003      	b.n	8012a0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012a04:	4b06      	ldr	r3, [pc, #24]	; (8012a20 <tcpip_tcp_timer+0x44>)
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]
  }
}
 8012a0a:	bf00      	nop
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	2000ce04 	.word	0x2000ce04
 8012a18:	2000ce14 	.word	0x2000ce14
 8012a1c:	080129dd 	.word	0x080129dd
 8012a20:	20004b0c 	.word	0x20004b0c

08012a24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012a28:	4b0a      	ldr	r3, [pc, #40]	; (8012a54 <tcp_timer_needed+0x30>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d10f      	bne.n	8012a50 <tcp_timer_needed+0x2c>
 8012a30:	4b09      	ldr	r3, [pc, #36]	; (8012a58 <tcp_timer_needed+0x34>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d103      	bne.n	8012a40 <tcp_timer_needed+0x1c>
 8012a38:	4b08      	ldr	r3, [pc, #32]	; (8012a5c <tcp_timer_needed+0x38>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d007      	beq.n	8012a50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <tcp_timer_needed+0x30>)
 8012a42:	2201      	movs	r2, #1
 8012a44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012a46:	2200      	movs	r2, #0
 8012a48:	4905      	ldr	r1, [pc, #20]	; (8012a60 <tcp_timer_needed+0x3c>)
 8012a4a:	20fa      	movs	r0, #250	; 0xfa
 8012a4c:	f000 f8cc 	bl	8012be8 <sys_timeout>
  }
}
 8012a50:	bf00      	nop
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	20004b0c 	.word	0x20004b0c
 8012a58:	2000ce04 	.word	0x2000ce04
 8012a5c:	2000ce14 	.word	0x2000ce14
 8012a60:	080129dd 	.word	0x080129dd

08012a64 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b086      	sub	sp, #24
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012a70:	200a      	movs	r0, #10
 8012a72:	f7f9 fcd3 	bl	800c41c <memp_malloc>
 8012a76:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d109      	bne.n	8012a92 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d151      	bne.n	8012b28 <sys_timeout_abs+0xc4>
 8012a84:	4b2a      	ldr	r3, [pc, #168]	; (8012b30 <sys_timeout_abs+0xcc>)
 8012a86:	22be      	movs	r2, #190	; 0xbe
 8012a88:	492a      	ldr	r1, [pc, #168]	; (8012b34 <sys_timeout_abs+0xd0>)
 8012a8a:	482b      	ldr	r0, [pc, #172]	; (8012b38 <sys_timeout_abs+0xd4>)
 8012a8c:	f005 fa1c 	bl	8017ec8 <iprintf>
    return;
 8012a90:	e04a      	b.n	8012b28 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	2200      	movs	r2, #0
 8012a96:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	68ba      	ldr	r2, [r7, #8]
 8012a9c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	687a      	ldr	r2, [r7, #4]
 8012aa2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012aaa:	4b24      	ldr	r3, [pc, #144]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d103      	bne.n	8012aba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012ab2:	4a22      	ldr	r2, [pc, #136]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	6013      	str	r3, [r2, #0]
    return;
 8012ab8:	e037      	b.n	8012b2a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	685a      	ldr	r2, [r3, #4]
 8012abe:	4b1f      	ldr	r3, [pc, #124]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	0fdb      	lsrs	r3, r3, #31
 8012ac8:	f003 0301 	and.w	r3, r3, #1
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d007      	beq.n	8012ae2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012ad2:	4b1a      	ldr	r3, [pc, #104]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	693b      	ldr	r3, [r7, #16]
 8012ad8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012ada:	4a18      	ldr	r2, [pc, #96]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	6013      	str	r3, [r2, #0]
 8012ae0:	e023      	b.n	8012b2a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012ae2:	4b16      	ldr	r3, [pc, #88]	; (8012b3c <sys_timeout_abs+0xd8>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	617b      	str	r3, [r7, #20]
 8012ae8:	e01a      	b.n	8012b20 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00b      	beq.n	8012b0a <sys_timeout_abs+0xa6>
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	685a      	ldr	r2, [r3, #4]
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	685b      	ldr	r3, [r3, #4]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	0fdb      	lsrs	r3, r3, #31
 8012b00:	f003 0301 	and.w	r3, r3, #1
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d007      	beq.n	8012b1a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	681a      	ldr	r2, [r3, #0]
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	693a      	ldr	r2, [r7, #16]
 8012b16:	601a      	str	r2, [r3, #0]
        break;
 8012b18:	e007      	b.n	8012b2a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d1e1      	bne.n	8012aea <sys_timeout_abs+0x86>
 8012b26:	e000      	b.n	8012b2a <sys_timeout_abs+0xc6>
    return;
 8012b28:	bf00      	nop
      }
    }
  }
}
 8012b2a:	3718      	adds	r7, #24
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	0801ad88 	.word	0x0801ad88
 8012b34:	0801adbc 	.word	0x0801adbc
 8012b38:	0801adfc 	.word	0x0801adfc
 8012b3c:	20004b04 	.word	0x20004b04

08012b40 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	4798      	blx	r3

  now = sys_now();
 8012b52:	f7f4 ff15 	bl	8007980 <sys_now>
 8012b56:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	4b0f      	ldr	r3, [pc, #60]	; (8012b9c <lwip_cyclic_timer+0x5c>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4413      	add	r3, r2
 8012b62:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	0fdb      	lsrs	r3, r3, #31
 8012b6c:	f003 0301 	and.w	r3, r3, #1
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d009      	beq.n	8012b8a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	4907      	ldr	r1, [pc, #28]	; (8012ba0 <lwip_cyclic_timer+0x60>)
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7ff ff6e 	bl	8012a64 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012b88:	e004      	b.n	8012b94 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	4904      	ldr	r1, [pc, #16]	; (8012ba0 <lwip_cyclic_timer+0x60>)
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f7ff ff68 	bl	8012a64 <sys_timeout_abs>
}
 8012b94:	bf00      	nop
 8012b96:	3718      	adds	r7, #24
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	20004b08 	.word	0x20004b08
 8012ba0:	08012b41 	.word	0x08012b41

08012ba4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012baa:	2301      	movs	r3, #1
 8012bac:	607b      	str	r3, [r7, #4]
 8012bae:	e00e      	b.n	8012bce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012bb0:	4a0b      	ldr	r2, [pc, #44]	; (8012be0 <sys_timeouts_init+0x3c>)
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	4a08      	ldr	r2, [pc, #32]	; (8012be0 <sys_timeouts_init+0x3c>)
 8012bbe:	4413      	add	r3, r2
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	4908      	ldr	r1, [pc, #32]	; (8012be4 <sys_timeouts_init+0x40>)
 8012bc4:	f000 f810 	bl	8012be8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	3301      	adds	r3, #1
 8012bcc:	607b      	str	r3, [r7, #4]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	2b04      	cmp	r3, #4
 8012bd2:	d9ed      	bls.n	8012bb0 <sys_timeouts_init+0xc>
  }
}
 8012bd4:	bf00      	nop
 8012bd6:	bf00      	nop
 8012bd8:	3708      	adds	r7, #8
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	0801bea0 	.word	0x0801bea0
 8012be4:	08012b41 	.word	0x08012b41

08012be8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b086      	sub	sp, #24
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bfa:	d306      	bcc.n	8012c0a <sys_timeout+0x22>
 8012bfc:	4b0a      	ldr	r3, [pc, #40]	; (8012c28 <sys_timeout+0x40>)
 8012bfe:	f240 1229 	movw	r2, #297	; 0x129
 8012c02:	490a      	ldr	r1, [pc, #40]	; (8012c2c <sys_timeout+0x44>)
 8012c04:	480a      	ldr	r0, [pc, #40]	; (8012c30 <sys_timeout+0x48>)
 8012c06:	f005 f95f 	bl	8017ec8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012c0a:	f7f4 feb9 	bl	8007980 <sys_now>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	4413      	add	r3, r2
 8012c14:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	68b9      	ldr	r1, [r7, #8]
 8012c1a:	6978      	ldr	r0, [r7, #20]
 8012c1c:	f7ff ff22 	bl	8012a64 <sys_timeout_abs>
#endif
}
 8012c20:	bf00      	nop
 8012c22:	3718      	adds	r7, #24
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}
 8012c28:	0801ad88 	.word	0x0801ad88
 8012c2c:	0801ae24 	.word	0x0801ae24
 8012c30:	0801adfc 	.word	0x0801adfc

08012c34 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b084      	sub	sp, #16
 8012c38:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012c3a:	f7f4 fea1 	bl	8007980 <sys_now>
 8012c3e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012c40:	4b17      	ldr	r3, [pc, #92]	; (8012ca0 <sys_check_timeouts+0x6c>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d022      	beq.n	8012c92 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	685b      	ldr	r3, [r3, #4]
 8012c50:	68fa      	ldr	r2, [r7, #12]
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	0fdb      	lsrs	r3, r3, #31
 8012c56:	f003 0301 	and.w	r3, r3, #1
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d11a      	bne.n	8012c96 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012c60:	68bb      	ldr	r3, [r7, #8]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	4a0e      	ldr	r2, [pc, #56]	; (8012ca0 <sys_check_timeouts+0x6c>)
 8012c66:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	4a0a      	ldr	r2, [pc, #40]	; (8012ca4 <sys_check_timeouts+0x70>)
 8012c7a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012c7c:	68b9      	ldr	r1, [r7, #8]
 8012c7e:	200a      	movs	r0, #10
 8012c80:	f7f9 fc1e 	bl	800c4c0 <memp_free>
    if (handler != NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d0da      	beq.n	8012c40 <sys_check_timeouts+0xc>
      handler(arg);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	6838      	ldr	r0, [r7, #0]
 8012c8e:	4798      	blx	r3
  do {
 8012c90:	e7d6      	b.n	8012c40 <sys_check_timeouts+0xc>
      return;
 8012c92:	bf00      	nop
 8012c94:	e000      	b.n	8012c98 <sys_check_timeouts+0x64>
      return;
 8012c96:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	20004b04 	.word	0x20004b04
 8012ca4:	20004b08 	.word	0x20004b08

08012ca8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012cae:	4b16      	ldr	r3, [pc, #88]	; (8012d08 <sys_timeouts_sleeptime+0x60>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d102      	bne.n	8012cbc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8012cba:	e020      	b.n	8012cfe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012cbc:	f7f4 fe60 	bl	8007980 <sys_now>
 8012cc0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012cc2:	4b11      	ldr	r3, [pc, #68]	; (8012d08 <sys_timeouts_sleeptime+0x60>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	685a      	ldr	r2, [r3, #4]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	0fdb      	lsrs	r3, r3, #31
 8012cce:	f003 0301 	and.w	r3, r3, #1
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d001      	beq.n	8012cdc <sys_timeouts_sleeptime+0x34>
    return 0;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	e010      	b.n	8012cfe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012cdc:	4b0a      	ldr	r3, [pc, #40]	; (8012d08 <sys_timeouts_sleeptime+0x60>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	685a      	ldr	r2, [r3, #4]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	da06      	bge.n	8012cfc <sys_timeouts_sleeptime+0x54>
 8012cee:	4b07      	ldr	r3, [pc, #28]	; (8012d0c <sys_timeouts_sleeptime+0x64>)
 8012cf0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012cf4:	4906      	ldr	r1, [pc, #24]	; (8012d10 <sys_timeouts_sleeptime+0x68>)
 8012cf6:	4807      	ldr	r0, [pc, #28]	; (8012d14 <sys_timeouts_sleeptime+0x6c>)
 8012cf8:	f005 f8e6 	bl	8017ec8 <iprintf>
    return ret;
 8012cfc:	683b      	ldr	r3, [r7, #0]
  }
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	20004b04 	.word	0x20004b04
 8012d0c:	0801ad88 	.word	0x0801ad88
 8012d10:	0801ae5c 	.word	0x0801ae5c
 8012d14:	0801adfc 	.word	0x0801adfc

08012d18 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012d1c:	f005 f8ec 	bl	8017ef8 <rand>
 8012d20:	4603      	mov	r3, r0
 8012d22:	b29b      	uxth	r3, r3
 8012d24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	4b01      	ldr	r3, [pc, #4]	; (8012d38 <udp_init+0x20>)
 8012d32:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012d34:	bf00      	nop
 8012d36:	bd80      	pop	{r7, pc}
 8012d38:	20000018 	.word	0x20000018

08012d3c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012d42:	2300      	movs	r3, #0
 8012d44:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012d46:	4b17      	ldr	r3, [pc, #92]	; (8012da4 <udp_new_port+0x68>)
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	b291      	uxth	r1, r2
 8012d4e:	4a15      	ldr	r2, [pc, #84]	; (8012da4 <udp_new_port+0x68>)
 8012d50:	8011      	strh	r1, [r2, #0]
 8012d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d56:	4293      	cmp	r3, r2
 8012d58:	d103      	bne.n	8012d62 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012d5a:	4b12      	ldr	r3, [pc, #72]	; (8012da4 <udp_new_port+0x68>)
 8012d5c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012d60:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d62:	4b11      	ldr	r3, [pc, #68]	; (8012da8 <udp_new_port+0x6c>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	603b      	str	r3, [r7, #0]
 8012d68:	e011      	b.n	8012d8e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	8a5a      	ldrh	r2, [r3, #18]
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	; (8012da4 <udp_new_port+0x68>)
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d108      	bne.n	8012d88 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012d76:	88fb      	ldrh	r3, [r7, #6]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	80fb      	strh	r3, [r7, #6]
 8012d7c:	88fb      	ldrh	r3, [r7, #6]
 8012d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012d82:	d3e0      	bcc.n	8012d46 <udp_new_port+0xa>
        return 0;
 8012d84:	2300      	movs	r3, #0
 8012d86:	e007      	b.n	8012d98 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	603b      	str	r3, [r7, #0]
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d1ea      	bne.n	8012d6a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012d94:	4b03      	ldr	r3, [pc, #12]	; (8012da4 <udp_new_port+0x68>)
 8012d96:	881b      	ldrh	r3, [r3, #0]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	370c      	adds	r7, #12
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr
 8012da4:	20000018 	.word	0x20000018
 8012da8:	2000ce1c 	.word	0x2000ce1c

08012dac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	4613      	mov	r3, r2
 8012db8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d105      	bne.n	8012dcc <udp_input_local_match+0x20>
 8012dc0:	4b27      	ldr	r3, [pc, #156]	; (8012e60 <udp_input_local_match+0xb4>)
 8012dc2:	2287      	movs	r2, #135	; 0x87
 8012dc4:	4927      	ldr	r1, [pc, #156]	; (8012e64 <udp_input_local_match+0xb8>)
 8012dc6:	4828      	ldr	r0, [pc, #160]	; (8012e68 <udp_input_local_match+0xbc>)
 8012dc8:	f005 f87e 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d105      	bne.n	8012dde <udp_input_local_match+0x32>
 8012dd2:	4b23      	ldr	r3, [pc, #140]	; (8012e60 <udp_input_local_match+0xb4>)
 8012dd4:	2288      	movs	r2, #136	; 0x88
 8012dd6:	4925      	ldr	r1, [pc, #148]	; (8012e6c <udp_input_local_match+0xc0>)
 8012dd8:	4823      	ldr	r0, [pc, #140]	; (8012e68 <udp_input_local_match+0xbc>)
 8012dda:	f005 f875 	bl	8017ec8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	7a1b      	ldrb	r3, [r3, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00b      	beq.n	8012dfe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	7a1a      	ldrb	r2, [r3, #8]
 8012dea:	4b21      	ldr	r3, [pc, #132]	; (8012e70 <udp_input_local_match+0xc4>)
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012df2:	3301      	adds	r3, #1
 8012df4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d001      	beq.n	8012dfe <udp_input_local_match+0x52>
    return 0;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e02b      	b.n	8012e56 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012dfe:	79fb      	ldrb	r3, [r7, #7]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d018      	beq.n	8012e36 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d013      	beq.n	8012e32 <udp_input_local_match+0x86>
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d00f      	beq.n	8012e32 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012e12:	4b17      	ldr	r3, [pc, #92]	; (8012e70 <udp_input_local_match+0xc4>)
 8012e14:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e1a:	d00a      	beq.n	8012e32 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	4b13      	ldr	r3, [pc, #76]	; (8012e70 <udp_input_local_match+0xc4>)
 8012e22:	695b      	ldr	r3, [r3, #20]
 8012e24:	405a      	eors	r2, r3
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	3308      	adds	r3, #8
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d110      	bne.n	8012e54 <udp_input_local_match+0xa8>
          return 1;
 8012e32:	2301      	movs	r3, #1
 8012e34:	e00f      	b.n	8012e56 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d009      	beq.n	8012e50 <udp_input_local_match+0xa4>
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d005      	beq.n	8012e50 <udp_input_local_match+0xa4>
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	4b09      	ldr	r3, [pc, #36]	; (8012e70 <udp_input_local_match+0xc4>)
 8012e4a:	695b      	ldr	r3, [r3, #20]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d101      	bne.n	8012e54 <udp_input_local_match+0xa8>
        return 1;
 8012e50:	2301      	movs	r3, #1
 8012e52:	e000      	b.n	8012e56 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012e54:	2300      	movs	r3, #0
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3710      	adds	r7, #16
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	0801ae70 	.word	0x0801ae70
 8012e64:	0801aea0 	.word	0x0801aea0
 8012e68:	0801aec4 	.word	0x0801aec4
 8012e6c:	0801aeec 	.word	0x0801aeec
 8012e70:	200096d0 	.word	0x200096d0

08012e74 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012e74:	b590      	push	{r4, r7, lr}
 8012e76:	b08d      	sub	sp, #52	; 0x34
 8012e78:	af02      	add	r7, sp, #8
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d105      	bne.n	8012e94 <udp_input+0x20>
 8012e88:	4b7c      	ldr	r3, [pc, #496]	; (801307c <udp_input+0x208>)
 8012e8a:	22cf      	movs	r2, #207	; 0xcf
 8012e8c:	497c      	ldr	r1, [pc, #496]	; (8013080 <udp_input+0x20c>)
 8012e8e:	487d      	ldr	r0, [pc, #500]	; (8013084 <udp_input+0x210>)
 8012e90:	f005 f81a 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d105      	bne.n	8012ea6 <udp_input+0x32>
 8012e9a:	4b78      	ldr	r3, [pc, #480]	; (801307c <udp_input+0x208>)
 8012e9c:	22d0      	movs	r2, #208	; 0xd0
 8012e9e:	497a      	ldr	r1, [pc, #488]	; (8013088 <udp_input+0x214>)
 8012ea0:	4878      	ldr	r0, [pc, #480]	; (8013084 <udp_input+0x210>)
 8012ea2:	f005 f811 	bl	8017ec8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	895b      	ldrh	r3, [r3, #10]
 8012eaa:	2b07      	cmp	r3, #7
 8012eac:	d803      	bhi.n	8012eb6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f7fa f9b6 	bl	800d220 <pbuf_free>
    goto end;
 8012eb4:	e0de      	b.n	8013074 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ebc:	4b73      	ldr	r3, [pc, #460]	; (801308c <udp_input+0x218>)
 8012ebe:	695b      	ldr	r3, [r3, #20]
 8012ec0:	4a72      	ldr	r2, [pc, #456]	; (801308c <udp_input+0x218>)
 8012ec2:	6812      	ldr	r2, [r2, #0]
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f003 fe06 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7f8 fdea 	bl	800bab0 <lwip_htons>
 8012edc:	4603      	mov	r3, r0
 8012ede:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	885b      	ldrh	r3, [r3, #2]
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7f8 fde2 	bl	800bab0 <lwip_htons>
 8012eec:	4603      	mov	r3, r0
 8012eee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012efc:	4b64      	ldr	r3, [pc, #400]	; (8013090 <udp_input+0x21c>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	627b      	str	r3, [r7, #36]	; 0x24
 8012f02:	e054      	b.n	8012fae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f06:	8a5b      	ldrh	r3, [r3, #18]
 8012f08:	89fa      	ldrh	r2, [r7, #14]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d14a      	bne.n	8012fa4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012f0e:	7cfb      	ldrb	r3, [r7, #19]
 8012f10:	461a      	mov	r2, r3
 8012f12:	6839      	ldr	r1, [r7, #0]
 8012f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f16:	f7ff ff49 	bl	8012dac <udp_input_local_match>
 8012f1a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d041      	beq.n	8012fa4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	7c1b      	ldrb	r3, [r3, #16]
 8012f24:	f003 0304 	and.w	r3, r3, #4
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d11d      	bne.n	8012f68 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012f2c:	69fb      	ldr	r3, [r7, #28]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d102      	bne.n	8012f38 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f34:	61fb      	str	r3, [r7, #28]
 8012f36:	e017      	b.n	8012f68 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012f38:	7cfb      	ldrb	r3, [r7, #19]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d014      	beq.n	8012f68 <udp_input+0xf4>
 8012f3e:	4b53      	ldr	r3, [pc, #332]	; (801308c <udp_input+0x218>)
 8012f40:	695b      	ldr	r3, [r3, #20]
 8012f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f46:	d10f      	bne.n	8012f68 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	429a      	cmp	r2, r3
 8012f54:	d008      	beq.n	8012f68 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f58:	681a      	ldr	r2, [r3, #0]
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	3304      	adds	r3, #4
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d101      	bne.n	8012f68 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f66:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6a:	8a9b      	ldrh	r3, [r3, #20]
 8012f6c:	8a3a      	ldrh	r2, [r7, #16]
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d118      	bne.n	8012fa4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d005      	beq.n	8012f86 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	4b43      	ldr	r3, [pc, #268]	; (801308c <udp_input+0x218>)
 8012f80:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012f82:	429a      	cmp	r2, r3
 8012f84:	d10e      	bne.n	8012fa4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012f86:	6a3b      	ldr	r3, [r7, #32]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d014      	beq.n	8012fb6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	68da      	ldr	r2, [r3, #12]
 8012f90:	6a3b      	ldr	r3, [r7, #32]
 8012f92:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012f94:	4b3e      	ldr	r3, [pc, #248]	; (8013090 <udp_input+0x21c>)
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012f9c:	4a3c      	ldr	r2, [pc, #240]	; (8013090 <udp_input+0x21c>)
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012fa2:	e008      	b.n	8012fb6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	627b      	str	r3, [r7, #36]	; 0x24
 8012fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1a7      	bne.n	8012f04 <udp_input+0x90>
 8012fb4:	e000      	b.n	8012fb8 <udp_input+0x144>
        break;
 8012fb6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d101      	bne.n	8012fc2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d002      	beq.n	8012fce <udp_input+0x15a>
    for_us = 1;
 8012fc8:	2301      	movs	r3, #1
 8012fca:	76fb      	strb	r3, [r7, #27]
 8012fcc:	e00a      	b.n	8012fe4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	681a      	ldr	r2, [r3, #0]
 8012fd4:	4b2d      	ldr	r3, [pc, #180]	; (801308c <udp_input+0x218>)
 8012fd6:	695b      	ldr	r3, [r3, #20]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	bf0c      	ite	eq
 8012fdc:	2301      	moveq	r3, #1
 8012fde:	2300      	movne	r3, #0
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012fe4:	7efb      	ldrb	r3, [r7, #27]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d041      	beq.n	801306e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012fea:	2108      	movs	r1, #8
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f7fa f891 	bl	800d114 <pbuf_remove_header>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00a      	beq.n	801300e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012ff8:	4b20      	ldr	r3, [pc, #128]	; (801307c <udp_input+0x208>)
 8012ffa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012ffe:	4925      	ldr	r1, [pc, #148]	; (8013094 <udp_input+0x220>)
 8013000:	4820      	ldr	r0, [pc, #128]	; (8013084 <udp_input+0x210>)
 8013002:	f004 ff61 	bl	8017ec8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7fa f90a 	bl	800d220 <pbuf_free>
      goto end;
 801300c:	e032      	b.n	8013074 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	2b00      	cmp	r3, #0
 8013012:	d012      	beq.n	801303a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013016:	699b      	ldr	r3, [r3, #24]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d00a      	beq.n	8013032 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301e:	699c      	ldr	r4, [r3, #24]
 8013020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013022:	69d8      	ldr	r0, [r3, #28]
 8013024:	8a3b      	ldrh	r3, [r7, #16]
 8013026:	9300      	str	r3, [sp, #0]
 8013028:	4b1b      	ldr	r3, [pc, #108]	; (8013098 <udp_input+0x224>)
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801302e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013030:	e021      	b.n	8013076 <udp_input+0x202>
        pbuf_free(p);
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f7fa f8f4 	bl	800d220 <pbuf_free>
        goto end;
 8013038:	e01c      	b.n	8013074 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801303a:	7cfb      	ldrb	r3, [r7, #19]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d112      	bne.n	8013066 <udp_input+0x1f2>
 8013040:	4b12      	ldr	r3, [pc, #72]	; (801308c <udp_input+0x218>)
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013048:	2be0      	cmp	r3, #224	; 0xe0
 801304a:	d00c      	beq.n	8013066 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801304c:	4b0f      	ldr	r3, [pc, #60]	; (801308c <udp_input+0x218>)
 801304e:	899b      	ldrh	r3, [r3, #12]
 8013050:	3308      	adds	r3, #8
 8013052:	b29b      	uxth	r3, r3
 8013054:	b21b      	sxth	r3, r3
 8013056:	4619      	mov	r1, r3
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f7fa f8ce 	bl	800d1fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801305e:	2103      	movs	r1, #3
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f003 f9fb 	bl	801645c <icmp_dest_unreach>
      pbuf_free(p);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7fa f8da 	bl	800d220 <pbuf_free>
  return;
 801306c:	e003      	b.n	8013076 <udp_input+0x202>
    pbuf_free(p);
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f7fa f8d6 	bl	800d220 <pbuf_free>
  return;
 8013074:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013076:	372c      	adds	r7, #44	; 0x2c
 8013078:	46bd      	mov	sp, r7
 801307a:	bd90      	pop	{r4, r7, pc}
 801307c:	0801ae70 	.word	0x0801ae70
 8013080:	0801af14 	.word	0x0801af14
 8013084:	0801aec4 	.word	0x0801aec4
 8013088:	0801af2c 	.word	0x0801af2c
 801308c:	200096d0 	.word	0x200096d0
 8013090:	2000ce1c 	.word	0x2000ce1c
 8013094:	0801af48 	.word	0x0801af48
 8013098:	200096e0 	.word	0x200096e0

0801309c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b088      	sub	sp, #32
 80130a0:	af02      	add	r7, sp, #8
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
 80130a8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d109      	bne.n	80130c4 <udp_sendto_if+0x28>
 80130b0:	4b2e      	ldr	r3, [pc, #184]	; (801316c <udp_sendto_if+0xd0>)
 80130b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130b6:	492e      	ldr	r1, [pc, #184]	; (8013170 <udp_sendto_if+0xd4>)
 80130b8:	482e      	ldr	r0, [pc, #184]	; (8013174 <udp_sendto_if+0xd8>)
 80130ba:	f004 ff05 	bl	8017ec8 <iprintf>
 80130be:	f06f 030f 	mvn.w	r3, #15
 80130c2:	e04f      	b.n	8013164 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d109      	bne.n	80130de <udp_sendto_if+0x42>
 80130ca:	4b28      	ldr	r3, [pc, #160]	; (801316c <udp_sendto_if+0xd0>)
 80130cc:	f240 2281 	movw	r2, #641	; 0x281
 80130d0:	4929      	ldr	r1, [pc, #164]	; (8013178 <udp_sendto_if+0xdc>)
 80130d2:	4828      	ldr	r0, [pc, #160]	; (8013174 <udp_sendto_if+0xd8>)
 80130d4:	f004 fef8 	bl	8017ec8 <iprintf>
 80130d8:	f06f 030f 	mvn.w	r3, #15
 80130dc:	e042      	b.n	8013164 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d109      	bne.n	80130f8 <udp_sendto_if+0x5c>
 80130e4:	4b21      	ldr	r3, [pc, #132]	; (801316c <udp_sendto_if+0xd0>)
 80130e6:	f240 2282 	movw	r2, #642	; 0x282
 80130ea:	4924      	ldr	r1, [pc, #144]	; (801317c <udp_sendto_if+0xe0>)
 80130ec:	4821      	ldr	r0, [pc, #132]	; (8013174 <udp_sendto_if+0xd8>)
 80130ee:	f004 feeb 	bl	8017ec8 <iprintf>
 80130f2:	f06f 030f 	mvn.w	r3, #15
 80130f6:	e035      	b.n	8013164 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d109      	bne.n	8013112 <udp_sendto_if+0x76>
 80130fe:	4b1b      	ldr	r3, [pc, #108]	; (801316c <udp_sendto_if+0xd0>)
 8013100:	f240 2283 	movw	r2, #643	; 0x283
 8013104:	491e      	ldr	r1, [pc, #120]	; (8013180 <udp_sendto_if+0xe4>)
 8013106:	481b      	ldr	r0, [pc, #108]	; (8013174 <udp_sendto_if+0xd8>)
 8013108:	f004 fede 	bl	8017ec8 <iprintf>
 801310c:	f06f 030f 	mvn.w	r3, #15
 8013110:	e028      	b.n	8013164 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d009      	beq.n	801312c <udp_sendto_if+0x90>
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d005      	beq.n	801312c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013128:	2be0      	cmp	r3, #224	; 0xe0
 801312a:	d103      	bne.n	8013134 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801312c:	6a3b      	ldr	r3, [r7, #32]
 801312e:	3304      	adds	r3, #4
 8013130:	617b      	str	r3, [r7, #20]
 8013132:	e00b      	b.n	801314c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681a      	ldr	r2, [r3, #0]
 8013138:	6a3b      	ldr	r3, [r7, #32]
 801313a:	3304      	adds	r3, #4
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	429a      	cmp	r2, r3
 8013140:	d002      	beq.n	8013148 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013142:	f06f 0303 	mvn.w	r3, #3
 8013146:	e00d      	b.n	8013164 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801314c:	887a      	ldrh	r2, [r7, #2]
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	9301      	str	r3, [sp, #4]
 8013152:	6a3b      	ldr	r3, [r7, #32]
 8013154:	9300      	str	r3, [sp, #0]
 8013156:	4613      	mov	r3, r2
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	68b9      	ldr	r1, [r7, #8]
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	f000 f811 	bl	8013184 <udp_sendto_if_src>
 8013162:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013164:	4618      	mov	r0, r3
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	0801ae70 	.word	0x0801ae70
 8013170:	0801afe4 	.word	0x0801afe4
 8013174:	0801aec4 	.word	0x0801aec4
 8013178:	0801b000 	.word	0x0801b000
 801317c:	0801b01c 	.word	0x0801b01c
 8013180:	0801b03c 	.word	0x0801b03c

08013184 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b08c      	sub	sp, #48	; 0x30
 8013188:	af04      	add	r7, sp, #16
 801318a:	60f8      	str	r0, [r7, #12]
 801318c:	60b9      	str	r1, [r7, #8]
 801318e:	607a      	str	r2, [r7, #4]
 8013190:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d109      	bne.n	80131ac <udp_sendto_if_src+0x28>
 8013198:	4b65      	ldr	r3, [pc, #404]	; (8013330 <udp_sendto_if_src+0x1ac>)
 801319a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801319e:	4965      	ldr	r1, [pc, #404]	; (8013334 <udp_sendto_if_src+0x1b0>)
 80131a0:	4865      	ldr	r0, [pc, #404]	; (8013338 <udp_sendto_if_src+0x1b4>)
 80131a2:	f004 fe91 	bl	8017ec8 <iprintf>
 80131a6:	f06f 030f 	mvn.w	r3, #15
 80131aa:	e0bc      	b.n	8013326 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d109      	bne.n	80131c6 <udp_sendto_if_src+0x42>
 80131b2:	4b5f      	ldr	r3, [pc, #380]	; (8013330 <udp_sendto_if_src+0x1ac>)
 80131b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80131b8:	4960      	ldr	r1, [pc, #384]	; (801333c <udp_sendto_if_src+0x1b8>)
 80131ba:	485f      	ldr	r0, [pc, #380]	; (8013338 <udp_sendto_if_src+0x1b4>)
 80131bc:	f004 fe84 	bl	8017ec8 <iprintf>
 80131c0:	f06f 030f 	mvn.w	r3, #15
 80131c4:	e0af      	b.n	8013326 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d109      	bne.n	80131e0 <udp_sendto_if_src+0x5c>
 80131cc:	4b58      	ldr	r3, [pc, #352]	; (8013330 <udp_sendto_if_src+0x1ac>)
 80131ce:	f240 22d3 	movw	r2, #723	; 0x2d3
 80131d2:	495b      	ldr	r1, [pc, #364]	; (8013340 <udp_sendto_if_src+0x1bc>)
 80131d4:	4858      	ldr	r0, [pc, #352]	; (8013338 <udp_sendto_if_src+0x1b4>)
 80131d6:	f004 fe77 	bl	8017ec8 <iprintf>
 80131da:	f06f 030f 	mvn.w	r3, #15
 80131de:	e0a2      	b.n	8013326 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d109      	bne.n	80131fa <udp_sendto_if_src+0x76>
 80131e6:	4b52      	ldr	r3, [pc, #328]	; (8013330 <udp_sendto_if_src+0x1ac>)
 80131e8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80131ec:	4955      	ldr	r1, [pc, #340]	; (8013344 <udp_sendto_if_src+0x1c0>)
 80131ee:	4852      	ldr	r0, [pc, #328]	; (8013338 <udp_sendto_if_src+0x1b4>)
 80131f0:	f004 fe6a 	bl	8017ec8 <iprintf>
 80131f4:	f06f 030f 	mvn.w	r3, #15
 80131f8:	e095      	b.n	8013326 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80131fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d109      	bne.n	8013214 <udp_sendto_if_src+0x90>
 8013200:	4b4b      	ldr	r3, [pc, #300]	; (8013330 <udp_sendto_if_src+0x1ac>)
 8013202:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013206:	4950      	ldr	r1, [pc, #320]	; (8013348 <udp_sendto_if_src+0x1c4>)
 8013208:	484b      	ldr	r0, [pc, #300]	; (8013338 <udp_sendto_if_src+0x1b4>)
 801320a:	f004 fe5d 	bl	8017ec8 <iprintf>
 801320e:	f06f 030f 	mvn.w	r3, #15
 8013212:	e088      	b.n	8013326 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	8a5b      	ldrh	r3, [r3, #18]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d10f      	bne.n	801323c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801321c:	68f9      	ldr	r1, [r7, #12]
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	8a5b      	ldrh	r3, [r3, #18]
 8013222:	461a      	mov	r2, r3
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f000 f893 	bl	8013350 <udp_bind>
 801322a:	4603      	mov	r3, r0
 801322c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801322e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d002      	beq.n	801323c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013236:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801323a:	e074      	b.n	8013326 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	891b      	ldrh	r3, [r3, #8]
 8013240:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013244:	4293      	cmp	r3, r2
 8013246:	d902      	bls.n	801324e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013248:	f04f 33ff 	mov.w	r3, #4294967295
 801324c:	e06b      	b.n	8013326 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801324e:	2108      	movs	r1, #8
 8013250:	68b8      	ldr	r0, [r7, #8]
 8013252:	f7f9 ff4f 	bl	800d0f4 <pbuf_add_header>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d015      	beq.n	8013288 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801325c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013260:	2108      	movs	r1, #8
 8013262:	2022      	movs	r0, #34	; 0x22
 8013264:	f7f9 fcf8 	bl	800cc58 <pbuf_alloc>
 8013268:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d102      	bne.n	8013276 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013270:	f04f 33ff 	mov.w	r3, #4294967295
 8013274:	e057      	b.n	8013326 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	891b      	ldrh	r3, [r3, #8]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d006      	beq.n	801328c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801327e:	68b9      	ldr	r1, [r7, #8]
 8013280:	69f8      	ldr	r0, [r7, #28]
 8013282:	f7fa f8f1 	bl	800d468 <pbuf_chain>
 8013286:	e001      	b.n	801328c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	895b      	ldrh	r3, [r3, #10]
 8013290:	2b07      	cmp	r3, #7
 8013292:	d806      	bhi.n	80132a2 <udp_sendto_if_src+0x11e>
 8013294:	4b26      	ldr	r3, [pc, #152]	; (8013330 <udp_sendto_if_src+0x1ac>)
 8013296:	f240 320d 	movw	r2, #781	; 0x30d
 801329a:	492c      	ldr	r1, [pc, #176]	; (801334c <udp_sendto_if_src+0x1c8>)
 801329c:	4826      	ldr	r0, [pc, #152]	; (8013338 <udp_sendto_if_src+0x1b4>)
 801329e:	f004 fe13 	bl	8017ec8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	8a5b      	ldrh	r3, [r3, #18]
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7f8 fbff 	bl	800bab0 <lwip_htons>
 80132b2:	4603      	mov	r3, r0
 80132b4:	461a      	mov	r2, r3
 80132b6:	697b      	ldr	r3, [r7, #20]
 80132b8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80132ba:	887b      	ldrh	r3, [r7, #2]
 80132bc:	4618      	mov	r0, r3
 80132be:	f7f8 fbf7 	bl	800bab0 <lwip_htons>
 80132c2:	4603      	mov	r3, r0
 80132c4:	461a      	mov	r2, r3
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80132ca:	697b      	ldr	r3, [r7, #20]
 80132cc:	2200      	movs	r2, #0
 80132ce:	719a      	strb	r2, [r3, #6]
 80132d0:	2200      	movs	r2, #0
 80132d2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	891b      	ldrh	r3, [r3, #8]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7f8 fbe9 	bl	800bab0 <lwip_htons>
 80132de:	4603      	mov	r3, r0
 80132e0:	461a      	mov	r2, r3
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80132e6:	2311      	movs	r3, #17
 80132e8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	7adb      	ldrb	r3, [r3, #11]
 80132ee:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	7a9b      	ldrb	r3, [r3, #10]
 80132f4:	7cb9      	ldrb	r1, [r7, #18]
 80132f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132f8:	9202      	str	r2, [sp, #8]
 80132fa:	7cfa      	ldrb	r2, [r7, #19]
 80132fc:	9201      	str	r2, [sp, #4]
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	460b      	mov	r3, r1
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013306:	69f8      	ldr	r0, [r7, #28]
 8013308:	f003 fb38 	bl	801697c <ip4_output_if_src>
 801330c:	4603      	mov	r3, r0
 801330e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013310:	69fa      	ldr	r2, [r7, #28]
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	429a      	cmp	r2, r3
 8013316:	d004      	beq.n	8013322 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013318:	69f8      	ldr	r0, [r7, #28]
 801331a:	f7f9 ff81 	bl	800d220 <pbuf_free>
    q = NULL;
 801331e:	2300      	movs	r3, #0
 8013320:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013322:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013326:	4618      	mov	r0, r3
 8013328:	3720      	adds	r7, #32
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	0801ae70 	.word	0x0801ae70
 8013334:	0801b05c 	.word	0x0801b05c
 8013338:	0801aec4 	.word	0x0801aec4
 801333c:	0801b07c 	.word	0x0801b07c
 8013340:	0801b09c 	.word	0x0801b09c
 8013344:	0801b0c0 	.word	0x0801b0c0
 8013348:	0801b0e4 	.word	0x0801b0e4
 801334c:	0801b108 	.word	0x0801b108

08013350 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b086      	sub	sp, #24
 8013354:	af00      	add	r7, sp, #0
 8013356:	60f8      	str	r0, [r7, #12]
 8013358:	60b9      	str	r1, [r7, #8]
 801335a:	4613      	mov	r3, r2
 801335c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d101      	bne.n	8013368 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013364:	4b39      	ldr	r3, [pc, #228]	; (801344c <udp_bind+0xfc>)
 8013366:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d109      	bne.n	8013382 <udp_bind+0x32>
 801336e:	4b38      	ldr	r3, [pc, #224]	; (8013450 <udp_bind+0x100>)
 8013370:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013374:	4937      	ldr	r1, [pc, #220]	; (8013454 <udp_bind+0x104>)
 8013376:	4838      	ldr	r0, [pc, #224]	; (8013458 <udp_bind+0x108>)
 8013378:	f004 fda6 	bl	8017ec8 <iprintf>
 801337c:	f06f 030f 	mvn.w	r3, #15
 8013380:	e060      	b.n	8013444 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013382:	2300      	movs	r3, #0
 8013384:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013386:	4b35      	ldr	r3, [pc, #212]	; (801345c <udp_bind+0x10c>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	617b      	str	r3, [r7, #20]
 801338c:	e009      	b.n	80133a2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	429a      	cmp	r2, r3
 8013394:	d102      	bne.n	801339c <udp_bind+0x4c>
      rebind = 1;
 8013396:	2301      	movs	r3, #1
 8013398:	74fb      	strb	r3, [r7, #19]
      break;
 801339a:	e005      	b.n	80133a8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	617b      	str	r3, [r7, #20]
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1f2      	bne.n	801338e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80133a8:	88fb      	ldrh	r3, [r7, #6]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d109      	bne.n	80133c2 <udp_bind+0x72>
    port = udp_new_port();
 80133ae:	f7ff fcc5 	bl	8012d3c <udp_new_port>
 80133b2:	4603      	mov	r3, r0
 80133b4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80133b6:	88fb      	ldrh	r3, [r7, #6]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d12c      	bne.n	8013416 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80133bc:	f06f 0307 	mvn.w	r3, #7
 80133c0:	e040      	b.n	8013444 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133c2:	4b26      	ldr	r3, [pc, #152]	; (801345c <udp_bind+0x10c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	617b      	str	r3, [r7, #20]
 80133c8:	e022      	b.n	8013410 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80133ca:	68fa      	ldr	r2, [r7, #12]
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d01b      	beq.n	801340a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80133d2:	697b      	ldr	r3, [r7, #20]
 80133d4:	8a5b      	ldrh	r3, [r3, #18]
 80133d6:	88fa      	ldrh	r2, [r7, #6]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d116      	bne.n	801340a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d00d      	beq.n	8013404 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d00a      	beq.n	8013404 <udp_bind+0xb4>
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d006      	beq.n	8013404 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80133f6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d003      	beq.n	8013404 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d102      	bne.n	801340a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013404:	f06f 0307 	mvn.w	r3, #7
 8013408:	e01c      	b.n	8013444 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	617b      	str	r3, [r7, #20]
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d1d9      	bne.n	80133ca <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d002      	beq.n	8013422 <udp_bind+0xd2>
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	e000      	b.n	8013424 <udp_bind+0xd4>
 8013422:	2300      	movs	r3, #0
 8013424:	68fa      	ldr	r2, [r7, #12]
 8013426:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	88fa      	ldrh	r2, [r7, #6]
 801342c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801342e:	7cfb      	ldrb	r3, [r7, #19]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d106      	bne.n	8013442 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013434:	4b09      	ldr	r3, [pc, #36]	; (801345c <udp_bind+0x10c>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801343c:	4a07      	ldr	r2, [pc, #28]	; (801345c <udp_bind+0x10c>)
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013442:	2300      	movs	r3, #0
}
 8013444:	4618      	mov	r0, r3
 8013446:	3718      	adds	r7, #24
 8013448:	46bd      	mov	sp, r7
 801344a:	bd80      	pop	{r7, pc}
 801344c:	0801bec8 	.word	0x0801bec8
 8013450:	0801ae70 	.word	0x0801ae70
 8013454:	0801b138 	.word	0x0801b138
 8013458:	0801aec4 	.word	0x0801aec4
 801345c:	2000ce1c 	.word	0x2000ce1c

08013460 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b086      	sub	sp, #24
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	4613      	mov	r3, r2
 801346c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d109      	bne.n	8013488 <udp_connect+0x28>
 8013474:	4b2c      	ldr	r3, [pc, #176]	; (8013528 <udp_connect+0xc8>)
 8013476:	f240 4235 	movw	r2, #1077	; 0x435
 801347a:	492c      	ldr	r1, [pc, #176]	; (801352c <udp_connect+0xcc>)
 801347c:	482c      	ldr	r0, [pc, #176]	; (8013530 <udp_connect+0xd0>)
 801347e:	f004 fd23 	bl	8017ec8 <iprintf>
 8013482:	f06f 030f 	mvn.w	r3, #15
 8013486:	e04b      	b.n	8013520 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d109      	bne.n	80134a2 <udp_connect+0x42>
 801348e:	4b26      	ldr	r3, [pc, #152]	; (8013528 <udp_connect+0xc8>)
 8013490:	f240 4236 	movw	r2, #1078	; 0x436
 8013494:	4927      	ldr	r1, [pc, #156]	; (8013534 <udp_connect+0xd4>)
 8013496:	4826      	ldr	r0, [pc, #152]	; (8013530 <udp_connect+0xd0>)
 8013498:	f004 fd16 	bl	8017ec8 <iprintf>
 801349c:	f06f 030f 	mvn.w	r3, #15
 80134a0:	e03e      	b.n	8013520 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	8a5b      	ldrh	r3, [r3, #18]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10f      	bne.n	80134ca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80134aa:	68f9      	ldr	r1, [r7, #12]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	8a5b      	ldrh	r3, [r3, #18]
 80134b0:	461a      	mov	r2, r3
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f7ff ff4c 	bl	8013350 <udp_bind>
 80134b8:	4603      	mov	r3, r0
 80134ba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80134bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d002      	beq.n	80134ca <udp_connect+0x6a>
      return err;
 80134c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134c8:	e02a      	b.n	8013520 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <udp_connect+0x76>
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	e000      	b.n	80134d8 <udp_connect+0x78>
 80134d6:	2300      	movs	r3, #0
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	88fa      	ldrh	r2, [r7, #6]
 80134e0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	7c1b      	ldrb	r3, [r3, #16]
 80134e6:	f043 0304 	orr.w	r3, r3, #4
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80134f0:	4b11      	ldr	r3, [pc, #68]	; (8013538 <udp_connect+0xd8>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	617b      	str	r3, [r7, #20]
 80134f6:	e008      	b.n	801350a <udp_connect+0xaa>
    if (pcb == ipcb) {
 80134f8:	68fa      	ldr	r2, [r7, #12]
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d101      	bne.n	8013504 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013500:	2300      	movs	r3, #0
 8013502:	e00d      	b.n	8013520 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	617b      	str	r3, [r7, #20]
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d1f3      	bne.n	80134f8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013510:	4b09      	ldr	r3, [pc, #36]	; (8013538 <udp_connect+0xd8>)
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013518:	4a07      	ldr	r2, [pc, #28]	; (8013538 <udp_connect+0xd8>)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801351e:	2300      	movs	r3, #0
}
 8013520:	4618      	mov	r0, r3
 8013522:	3718      	adds	r7, #24
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	0801ae70 	.word	0x0801ae70
 801352c:	0801b150 	.word	0x0801b150
 8013530:	0801aec4 	.word	0x0801aec4
 8013534:	0801b16c 	.word	0x0801b16c
 8013538:	2000ce1c 	.word	0x2000ce1c

0801353c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d107      	bne.n	801355e <udp_recv+0x22>
 801354e:	4b08      	ldr	r3, [pc, #32]	; (8013570 <udp_recv+0x34>)
 8013550:	f240 428a 	movw	r2, #1162	; 0x48a
 8013554:	4907      	ldr	r1, [pc, #28]	; (8013574 <udp_recv+0x38>)
 8013556:	4808      	ldr	r0, [pc, #32]	; (8013578 <udp_recv+0x3c>)
 8013558:	f004 fcb6 	bl	8017ec8 <iprintf>
 801355c:	e005      	b.n	801356a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	68ba      	ldr	r2, [r7, #8]
 8013562:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	61da      	str	r2, [r3, #28]
}
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	0801ae70 	.word	0x0801ae70
 8013574:	0801b1a4 	.word	0x0801b1a4
 8013578:	0801aec4 	.word	0x0801aec4

0801357c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d107      	bne.n	801359a <udp_remove+0x1e>
 801358a:	4b19      	ldr	r3, [pc, #100]	; (80135f0 <udp_remove+0x74>)
 801358c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013590:	4918      	ldr	r1, [pc, #96]	; (80135f4 <udp_remove+0x78>)
 8013592:	4819      	ldr	r0, [pc, #100]	; (80135f8 <udp_remove+0x7c>)
 8013594:	f004 fc98 	bl	8017ec8 <iprintf>
 8013598:	e026      	b.n	80135e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801359a:	4b18      	ldr	r3, [pc, #96]	; (80135fc <udp_remove+0x80>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d105      	bne.n	80135b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80135a4:	4b15      	ldr	r3, [pc, #84]	; (80135fc <udp_remove+0x80>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	68db      	ldr	r3, [r3, #12]
 80135aa:	4a14      	ldr	r2, [pc, #80]	; (80135fc <udp_remove+0x80>)
 80135ac:	6013      	str	r3, [r2, #0]
 80135ae:	e017      	b.n	80135e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135b0:	4b12      	ldr	r3, [pc, #72]	; (80135fc <udp_remove+0x80>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	60fb      	str	r3, [r7, #12]
 80135b6:	e010      	b.n	80135da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	68db      	ldr	r3, [r3, #12]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d009      	beq.n	80135d4 <udp_remove+0x58>
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d104      	bne.n	80135d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	68da      	ldr	r2, [r3, #12]
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	60da      	str	r2, [r3, #12]
        break;
 80135d2:	e005      	b.n	80135e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	60fb      	str	r3, [r7, #12]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d1eb      	bne.n	80135b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80135e0:	6879      	ldr	r1, [r7, #4]
 80135e2:	2000      	movs	r0, #0
 80135e4:	f7f8 ff6c 	bl	800c4c0 <memp_free>
}
 80135e8:	3710      	adds	r7, #16
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	0801ae70 	.word	0x0801ae70
 80135f4:	0801b1bc 	.word	0x0801b1bc
 80135f8:	0801aec4 	.word	0x0801aec4
 80135fc:	2000ce1c 	.word	0x2000ce1c

08013600 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013606:	2000      	movs	r0, #0
 8013608:	f7f8 ff08 	bl	800c41c <memp_malloc>
 801360c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d007      	beq.n	8013624 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013614:	2220      	movs	r2, #32
 8013616:	2100      	movs	r1, #0
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f004 fbf2 	bl	8017e02 <memset>
    pcb->ttl = UDP_TTL;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	22ff      	movs	r2, #255	; 0xff
 8013622:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013624:	687b      	ldr	r3, [r7, #4]
}
 8013626:	4618      	mov	r0, r3
 8013628:	3708      	adds	r7, #8
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
	...

08013630 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013630:	b480      	push	{r7}
 8013632:	b085      	sub	sp, #20
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d01e      	beq.n	801367e <udp_netif_ip_addr_changed+0x4e>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d01a      	beq.n	801367e <udp_netif_ip_addr_changed+0x4e>
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d017      	beq.n	801367e <udp_netif_ip_addr_changed+0x4e>
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d013      	beq.n	801367e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013656:	4b0d      	ldr	r3, [pc, #52]	; (801368c <udp_netif_ip_addr_changed+0x5c>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	e00c      	b.n	8013678 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	681a      	ldr	r2, [r3, #0]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	429a      	cmp	r2, r3
 8013668:	d103      	bne.n	8013672 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	60fb      	str	r3, [r7, #12]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d1ef      	bne.n	801365e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801367e:	bf00      	nop
 8013680:	3714      	adds	r7, #20
 8013682:	46bd      	mov	sp, r7
 8013684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	2000ce1c 	.word	0x2000ce1c

08013690 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013694:	4b20      	ldr	r3, [pc, #128]	; (8013718 <dhcp_inc_pcb_refcount+0x88>)
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d133      	bne.n	8013704 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801369c:	4b1f      	ldr	r3, [pc, #124]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d005      	beq.n	80136b0 <dhcp_inc_pcb_refcount+0x20>
 80136a4:	4b1e      	ldr	r3, [pc, #120]	; (8013720 <dhcp_inc_pcb_refcount+0x90>)
 80136a6:	22e5      	movs	r2, #229	; 0xe5
 80136a8:	491e      	ldr	r1, [pc, #120]	; (8013724 <dhcp_inc_pcb_refcount+0x94>)
 80136aa:	481f      	ldr	r0, [pc, #124]	; (8013728 <dhcp_inc_pcb_refcount+0x98>)
 80136ac:	f004 fc0c 	bl	8017ec8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80136b0:	f7ff ffa6 	bl	8013600 <udp_new>
 80136b4:	4603      	mov	r3, r0
 80136b6:	4a19      	ldr	r2, [pc, #100]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136b8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80136ba:	4b18      	ldr	r3, [pc, #96]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d102      	bne.n	80136c8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80136c2:	f04f 33ff 	mov.w	r3, #4294967295
 80136c6:	e024      	b.n	8013712 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80136c8:	4b14      	ldr	r3, [pc, #80]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	7a5a      	ldrb	r2, [r3, #9]
 80136ce:	4b13      	ldr	r3, [pc, #76]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f042 0220 	orr.w	r2, r2, #32
 80136d6:	b2d2      	uxtb	r2, r2
 80136d8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80136da:	4b10      	ldr	r3, [pc, #64]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2244      	movs	r2, #68	; 0x44
 80136e0:	4912      	ldr	r1, [pc, #72]	; (801372c <dhcp_inc_pcb_refcount+0x9c>)
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7ff fe34 	bl	8013350 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80136e8:	4b0c      	ldr	r3, [pc, #48]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2243      	movs	r2, #67	; 0x43
 80136ee:	490f      	ldr	r1, [pc, #60]	; (801372c <dhcp_inc_pcb_refcount+0x9c>)
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7ff feb5 	bl	8013460 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80136f6:	4b09      	ldr	r3, [pc, #36]	; (801371c <dhcp_inc_pcb_refcount+0x8c>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2200      	movs	r2, #0
 80136fc:	490c      	ldr	r1, [pc, #48]	; (8013730 <dhcp_inc_pcb_refcount+0xa0>)
 80136fe:	4618      	mov	r0, r3
 8013700:	f7ff ff1c 	bl	801353c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013704:	4b04      	ldr	r3, [pc, #16]	; (8013718 <dhcp_inc_pcb_refcount+0x88>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	3301      	adds	r3, #1
 801370a:	b2da      	uxtb	r2, r3
 801370c:	4b02      	ldr	r3, [pc, #8]	; (8013718 <dhcp_inc_pcb_refcount+0x88>)
 801370e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013710:	2300      	movs	r3, #0
}
 8013712:	4618      	mov	r0, r3
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	20004b14 	.word	0x20004b14
 801371c:	20004b10 	.word	0x20004b10
 8013720:	0801b1d4 	.word	0x0801b1d4
 8013724:	0801b20c 	.word	0x0801b20c
 8013728:	0801b234 	.word	0x0801b234
 801372c:	0801bec8 	.word	0x0801bec8
 8013730:	08014fc5 	.word	0x08014fc5

08013734 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013738:	4b0e      	ldr	r3, [pc, #56]	; (8013774 <dhcp_dec_pcb_refcount+0x40>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d105      	bne.n	801374c <dhcp_dec_pcb_refcount+0x18>
 8013740:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <dhcp_dec_pcb_refcount+0x44>)
 8013742:	22ff      	movs	r2, #255	; 0xff
 8013744:	490d      	ldr	r1, [pc, #52]	; (801377c <dhcp_dec_pcb_refcount+0x48>)
 8013746:	480e      	ldr	r0, [pc, #56]	; (8013780 <dhcp_dec_pcb_refcount+0x4c>)
 8013748:	f004 fbbe 	bl	8017ec8 <iprintf>
  dhcp_pcb_refcount--;
 801374c:	4b09      	ldr	r3, [pc, #36]	; (8013774 <dhcp_dec_pcb_refcount+0x40>)
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	3b01      	subs	r3, #1
 8013752:	b2da      	uxtb	r2, r3
 8013754:	4b07      	ldr	r3, [pc, #28]	; (8013774 <dhcp_dec_pcb_refcount+0x40>)
 8013756:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013758:	4b06      	ldr	r3, [pc, #24]	; (8013774 <dhcp_dec_pcb_refcount+0x40>)
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d107      	bne.n	8013770 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013760:	4b08      	ldr	r3, [pc, #32]	; (8013784 <dhcp_dec_pcb_refcount+0x50>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	4618      	mov	r0, r3
 8013766:	f7ff ff09 	bl	801357c <udp_remove>
    dhcp_pcb = NULL;
 801376a:	4b06      	ldr	r3, [pc, #24]	; (8013784 <dhcp_dec_pcb_refcount+0x50>)
 801376c:	2200      	movs	r2, #0
 801376e:	601a      	str	r2, [r3, #0]
  }
}
 8013770:	bf00      	nop
 8013772:	bd80      	pop	{r7, pc}
 8013774:	20004b14 	.word	0x20004b14
 8013778:	0801b1d4 	.word	0x0801b1d4
 801377c:	0801b25c 	.word	0x0801b25c
 8013780:	0801b234 	.word	0x0801b234
 8013784:	20004b10 	.word	0x20004b10

08013788 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013794:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013796:	210c      	movs	r1, #12
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f001 f855 	bl	8014848 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801379e:	4b06      	ldr	r3, [pc, #24]	; (80137b8 <dhcp_handle_nak+0x30>)
 80137a0:	4a05      	ldr	r2, [pc, #20]	; (80137b8 <dhcp_handle_nak+0x30>)
 80137a2:	4905      	ldr	r1, [pc, #20]	; (80137b8 <dhcp_handle_nak+0x30>)
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f7f9 f82d 	bl	800c804 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 fc48 	bl	8014040 <dhcp_discover>
}
 80137b0:	bf00      	nop
 80137b2:	3710      	adds	r7, #16
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}
 80137b8:	0801bec8 	.word	0x0801bec8

080137bc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b084      	sub	sp, #16
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80137ca:	2108      	movs	r1, #8
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f001 f83b 	bl	8014848 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	331c      	adds	r3, #28
 80137d6:	2200      	movs	r2, #0
 80137d8:	4619      	mov	r1, r3
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f002 fb3c 	bl	8015e58 <etharp_query>
 80137e0:	4603      	mov	r3, r0
 80137e2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	799b      	ldrb	r3, [r3, #6]
 80137e8:	2bff      	cmp	r3, #255	; 0xff
 80137ea:	d005      	beq.n	80137f8 <dhcp_check+0x3c>
    dhcp->tries++;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	799b      	ldrb	r3, [r3, #6]
 80137f0:	3301      	adds	r3, #1
 80137f2:	b2da      	uxtb	r2, r3
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80137f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80137fc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137fe:	893b      	ldrh	r3, [r7, #8]
 8013800:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013804:	4a06      	ldr	r2, [pc, #24]	; (8013820 <dhcp_check+0x64>)
 8013806:	fb82 1203 	smull	r1, r2, r2, r3
 801380a:	1152      	asrs	r2, r2, #5
 801380c:	17db      	asrs	r3, r3, #31
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	b29a      	uxth	r2, r3
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013816:	bf00      	nop
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	10624dd3 	.word	0x10624dd3

08013824 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013832:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013834:	4b0c      	ldr	r3, [pc, #48]	; (8013868 <dhcp_handle_offer+0x44>)
 8013836:	789b      	ldrb	r3, [r3, #2]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d011      	beq.n	8013860 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2200      	movs	r2, #0
 8013840:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013842:	4b0a      	ldr	r3, [pc, #40]	; (801386c <dhcp_handle_offer+0x48>)
 8013844:	689b      	ldr	r3, [r3, #8]
 8013846:	4618      	mov	r0, r3
 8013848:	f7f8 f947 	bl	800bada <lwip_htonl>
 801384c:	4602      	mov	r2, r0
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	691a      	ldr	r2, [r3, #16]
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f808 	bl	8013870 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013860:	bf00      	nop
 8013862:	3710      	adds	r7, #16
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	2000ce20 	.word	0x2000ce20
 801386c:	2000ce28 	.word	0x2000ce28

08013870 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013870:	b5b0      	push	{r4, r5, r7, lr}
 8013872:	b08a      	sub	sp, #40	; 0x28
 8013874:	af02      	add	r7, sp, #8
 8013876:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d109      	bne.n	8013892 <dhcp_select+0x22>
 801387e:	4b71      	ldr	r3, [pc, #452]	; (8013a44 <dhcp_select+0x1d4>)
 8013880:	f240 1277 	movw	r2, #375	; 0x177
 8013884:	4970      	ldr	r1, [pc, #448]	; (8013a48 <dhcp_select+0x1d8>)
 8013886:	4871      	ldr	r0, [pc, #452]	; (8013a4c <dhcp_select+0x1dc>)
 8013888:	f004 fb1e 	bl	8017ec8 <iprintf>
 801388c:	f06f 030f 	mvn.w	r3, #15
 8013890:	e0d3      	b.n	8013a3a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013896:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013898:	69bb      	ldr	r3, [r7, #24]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d109      	bne.n	80138b2 <dhcp_select+0x42>
 801389e:	4b69      	ldr	r3, [pc, #420]	; (8013a44 <dhcp_select+0x1d4>)
 80138a0:	f240 1279 	movw	r2, #377	; 0x179
 80138a4:	496a      	ldr	r1, [pc, #424]	; (8013a50 <dhcp_select+0x1e0>)
 80138a6:	4869      	ldr	r0, [pc, #420]	; (8013a4c <dhcp_select+0x1dc>)
 80138a8:	f004 fb0e 	bl	8017ec8 <iprintf>
 80138ac:	f06f 0305 	mvn.w	r3, #5
 80138b0:	e0c3      	b.n	8013a3a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80138b2:	2101      	movs	r1, #1
 80138b4:	69b8      	ldr	r0, [r7, #24]
 80138b6:	f000 ffc7 	bl	8014848 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80138ba:	f107 030c 	add.w	r3, r7, #12
 80138be:	2203      	movs	r2, #3
 80138c0:	69b9      	ldr	r1, [r7, #24]
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f001 fc4c 	bl	8015160 <dhcp_create_msg>
 80138c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f000 8085 	beq.w	80139dc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80138d8:	89b8      	ldrh	r0, [r7, #12]
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138e0:	2302      	movs	r3, #2
 80138e2:	2239      	movs	r2, #57	; 0x39
 80138e4:	f000 ffca 	bl	801487c <dhcp_option>
 80138e8:	4603      	mov	r3, r0
 80138ea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80138ec:	89b8      	ldrh	r0, [r7, #12]
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138f8:	461a      	mov	r2, r3
 80138fa:	f001 f819 	bl	8014930 <dhcp_option_short>
 80138fe:	4603      	mov	r3, r0
 8013900:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013902:	89b8      	ldrh	r0, [r7, #12]
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801390a:	2304      	movs	r3, #4
 801390c:	2232      	movs	r2, #50	; 0x32
 801390e:	f000 ffb5 	bl	801487c <dhcp_option>
 8013912:	4603      	mov	r3, r0
 8013914:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013916:	89bc      	ldrh	r4, [r7, #12]
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	69db      	ldr	r3, [r3, #28]
 8013922:	4618      	mov	r0, r3
 8013924:	f7f8 f8d9 	bl	800bada <lwip_htonl>
 8013928:	4603      	mov	r3, r0
 801392a:	461a      	mov	r2, r3
 801392c:	4629      	mov	r1, r5
 801392e:	4620      	mov	r0, r4
 8013930:	f001 f830 	bl	8014994 <dhcp_option_long>
 8013934:	4603      	mov	r3, r0
 8013936:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013938:	89b8      	ldrh	r0, [r7, #12]
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013940:	2304      	movs	r3, #4
 8013942:	2236      	movs	r2, #54	; 0x36
 8013944:	f000 ff9a 	bl	801487c <dhcp_option>
 8013948:	4603      	mov	r3, r0
 801394a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801394c:	89bc      	ldrh	r4, [r7, #12]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	699b      	ldr	r3, [r3, #24]
 8013958:	4618      	mov	r0, r3
 801395a:	f7f8 f8be 	bl	800bada <lwip_htonl>
 801395e:	4603      	mov	r3, r0
 8013960:	461a      	mov	r2, r3
 8013962:	4629      	mov	r1, r5
 8013964:	4620      	mov	r0, r4
 8013966:	f001 f815 	bl	8014994 <dhcp_option_long>
 801396a:	4603      	mov	r3, r0
 801396c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801396e:	89b8      	ldrh	r0, [r7, #12]
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013976:	2303      	movs	r3, #3
 8013978:	2237      	movs	r2, #55	; 0x37
 801397a:	f000 ff7f 	bl	801487c <dhcp_option>
 801397e:	4603      	mov	r3, r0
 8013980:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013982:	2300      	movs	r3, #0
 8013984:	77bb      	strb	r3, [r7, #30]
 8013986:	e00e      	b.n	80139a6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013988:	89b8      	ldrh	r0, [r7, #12]
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013990:	7fbb      	ldrb	r3, [r7, #30]
 8013992:	4a30      	ldr	r2, [pc, #192]	; (8013a54 <dhcp_select+0x1e4>)
 8013994:	5cd3      	ldrb	r3, [r2, r3]
 8013996:	461a      	mov	r2, r3
 8013998:	f000 ffa4 	bl	80148e4 <dhcp_option_byte>
 801399c:	4603      	mov	r3, r0
 801399e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80139a0:	7fbb      	ldrb	r3, [r7, #30]
 80139a2:	3301      	adds	r3, #1
 80139a4:	77bb      	strb	r3, [r7, #30]
 80139a6:	7fbb      	ldrb	r3, [r7, #30]
 80139a8:	2b02      	cmp	r3, #2
 80139aa:	d9ed      	bls.n	8013988 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80139ac:	89b8      	ldrh	r0, [r7, #12]
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	33f0      	adds	r3, #240	; 0xf0
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	4619      	mov	r1, r3
 80139b6:	f001 fca9 	bl	801530c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80139ba:	4b27      	ldr	r3, [pc, #156]	; (8013a58 <dhcp_select+0x1e8>)
 80139bc:	6818      	ldr	r0, [r3, #0]
 80139be:	4b27      	ldr	r3, [pc, #156]	; (8013a5c <dhcp_select+0x1ec>)
 80139c0:	9301      	str	r3, [sp, #4]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	9300      	str	r3, [sp, #0]
 80139c6:	2343      	movs	r3, #67	; 0x43
 80139c8:	4a25      	ldr	r2, [pc, #148]	; (8013a60 <dhcp_select+0x1f0>)
 80139ca:	6979      	ldr	r1, [r7, #20]
 80139cc:	f7ff fbda 	bl	8013184 <udp_sendto_if_src>
 80139d0:	4603      	mov	r3, r0
 80139d2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80139d4:	6978      	ldr	r0, [r7, #20]
 80139d6:	f7f9 fc23 	bl	800d220 <pbuf_free>
 80139da:	e001      	b.n	80139e0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80139dc:	23ff      	movs	r3, #255	; 0xff
 80139de:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	799b      	ldrb	r3, [r3, #6]
 80139e4:	2bff      	cmp	r3, #255	; 0xff
 80139e6:	d005      	beq.n	80139f4 <dhcp_select+0x184>
    dhcp->tries++;
 80139e8:	69bb      	ldr	r3, [r7, #24]
 80139ea:	799b      	ldrb	r3, [r3, #6]
 80139ec:	3301      	adds	r3, #1
 80139ee:	b2da      	uxtb	r2, r3
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	799b      	ldrb	r3, [r3, #6]
 80139f8:	2b05      	cmp	r3, #5
 80139fa:	d80d      	bhi.n	8013a18 <dhcp_select+0x1a8>
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	799b      	ldrb	r3, [r3, #6]
 8013a00:	461a      	mov	r2, r3
 8013a02:	2301      	movs	r3, #1
 8013a04:	4093      	lsls	r3, r2
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	461a      	mov	r2, r3
 8013a0a:	0152      	lsls	r2, r2, #5
 8013a0c:	1ad2      	subs	r2, r2, r3
 8013a0e:	0092      	lsls	r2, r2, #2
 8013a10:	4413      	add	r3, r2
 8013a12:	00db      	lsls	r3, r3, #3
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	e001      	b.n	8013a1c <dhcp_select+0x1ac>
 8013a18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013a1c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013a1e:	89fb      	ldrh	r3, [r7, #14]
 8013a20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013a24:	4a0f      	ldr	r2, [pc, #60]	; (8013a64 <dhcp_select+0x1f4>)
 8013a26:	fb82 1203 	smull	r1, r2, r2, r3
 8013a2a:	1152      	asrs	r2, r2, #5
 8013a2c:	17db      	asrs	r3, r3, #31
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013a36:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3720      	adds	r7, #32
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bdb0      	pop	{r4, r5, r7, pc}
 8013a42:	bf00      	nop
 8013a44:	0801b1d4 	.word	0x0801b1d4
 8013a48:	0801b280 	.word	0x0801b280
 8013a4c:	0801b234 	.word	0x0801b234
 8013a50:	0801b29c 	.word	0x0801b29c
 8013a54:	2000001c 	.word	0x2000001c
 8013a58:	20004b10 	.word	0x20004b10
 8013a5c:	0801bec8 	.word	0x0801bec8
 8013a60:	0801becc 	.word	0x0801becc
 8013a64:	10624dd3 	.word	0x10624dd3

08013a68 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013a6e:	4b27      	ldr	r3, [pc, #156]	; (8013b0c <dhcp_coarse_tmr+0xa4>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	607b      	str	r3, [r7, #4]
 8013a74:	e042      	b.n	8013afc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d039      	beq.n	8013af6 <dhcp_coarse_tmr+0x8e>
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	795b      	ldrb	r3, [r3, #5]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d035      	beq.n	8013af6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	8a9b      	ldrh	r3, [r3, #20]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d012      	beq.n	8013ab8 <dhcp_coarse_tmr+0x50>
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	8a5b      	ldrh	r3, [r3, #18]
 8013a96:	3301      	adds	r3, #1
 8013a98:	b29a      	uxth	r2, r3
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	825a      	strh	r2, [r3, #18]
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	8a5a      	ldrh	r2, [r3, #18]
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	8a9b      	ldrh	r3, [r3, #20]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d106      	bne.n	8013ab8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f000 fe32 	bl	8014714 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 f969 	bl	8013d88 <dhcp_start>
 8013ab6:	e01e      	b.n	8013af6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	8a1b      	ldrh	r3, [r3, #16]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d00b      	beq.n	8013ad8 <dhcp_coarse_tmr+0x70>
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	8a1b      	ldrh	r3, [r3, #16]
 8013ac4:	1e5a      	subs	r2, r3, #1
 8013ac6:	b291      	uxth	r1, r2
 8013ac8:	683a      	ldr	r2, [r7, #0]
 8013aca:	8211      	strh	r1, [r2, #16]
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d103      	bne.n	8013ad8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f000 f8c6 	bl	8013c62 <dhcp_t2_timeout>
 8013ad6:	e00e      	b.n	8013af6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	89db      	ldrh	r3, [r3, #14]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00a      	beq.n	8013af6 <dhcp_coarse_tmr+0x8e>
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	89db      	ldrh	r3, [r3, #14]
 8013ae4:	1e5a      	subs	r2, r3, #1
 8013ae6:	b291      	uxth	r1, r2
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	81d1      	strh	r1, [r2, #14]
 8013aec:	2b01      	cmp	r3, #1
 8013aee:	d102      	bne.n	8013af6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f000 f888 	bl	8013c06 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	607b      	str	r3, [r7, #4]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1b9      	bne.n	8013a76 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013b02:	bf00      	nop
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	2000cdf4 	.word	0x2000cdf4

08013b10 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b082      	sub	sp, #8
 8013b14:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013b16:	4b16      	ldr	r3, [pc, #88]	; (8013b70 <dhcp_fine_tmr+0x60>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	607b      	str	r3, [r7, #4]
 8013b1c:	e020      	b.n	8013b60 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b22:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d017      	beq.n	8013b5a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	891b      	ldrh	r3, [r3, #8]
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d906      	bls.n	8013b40 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	891b      	ldrh	r3, [r3, #8]
 8013b36:	3b01      	subs	r3, #1
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	811a      	strh	r2, [r3, #8]
 8013b3e:	e00c      	b.n	8013b5a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	891b      	ldrh	r3, [r3, #8]
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	d108      	bne.n	8013b5a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	891b      	ldrh	r3, [r3, #8]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f000 f80d 	bl	8013b74 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	607b      	str	r3, [r7, #4]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d1db      	bne.n	8013b1e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013b66:	bf00      	nop
 8013b68:	bf00      	nop
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	2000cdf4 	.word	0x2000cdf4

08013b74 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	795b      	ldrb	r3, [r3, #5]
 8013b86:	2b0c      	cmp	r3, #12
 8013b88:	d003      	beq.n	8013b92 <dhcp_timeout+0x1e>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	795b      	ldrb	r3, [r3, #5]
 8013b8e:	2b06      	cmp	r3, #6
 8013b90:	d103      	bne.n	8013b9a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f000 fa54 	bl	8014040 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013b98:	e031      	b.n	8013bfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	795b      	ldrb	r3, [r3, #5]
 8013b9e:	2b01      	cmp	r3, #1
 8013ba0:	d10e      	bne.n	8013bc0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	799b      	ldrb	r3, [r3, #6]
 8013ba6:	2b05      	cmp	r3, #5
 8013ba8:	d803      	bhi.n	8013bb2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f7ff fe60 	bl	8013870 <dhcp_select>
}
 8013bb0:	e025      	b.n	8013bfe <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f000 fdae 	bl	8014714 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f000 f8e5 	bl	8013d88 <dhcp_start>
}
 8013bbe:	e01e      	b.n	8013bfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	795b      	ldrb	r3, [r3, #5]
 8013bc4:	2b08      	cmp	r3, #8
 8013bc6:	d10b      	bne.n	8013be0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	799b      	ldrb	r3, [r3, #6]
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d803      	bhi.n	8013bd8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff fdf3 	bl	80137bc <dhcp_check>
}
 8013bd6:	e012      	b.n	8013bfe <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f000 fad3 	bl	8014184 <dhcp_bind>
}
 8013bde:	e00e      	b.n	8013bfe <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	795b      	ldrb	r3, [r3, #5]
 8013be4:	2b03      	cmp	r3, #3
 8013be6:	d10a      	bne.n	8013bfe <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	799b      	ldrb	r3, [r3, #6]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d803      	bhi.n	8013bf8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 fcd9 	bl	80145a8 <dhcp_reboot>
}
 8013bf6:	e002      	b.n	8013bfe <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f000 fa21 	bl	8014040 <dhcp_discover>
}
 8013bfe:	bf00      	nop
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b084      	sub	sp, #16
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c12:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	795b      	ldrb	r3, [r3, #5]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d007      	beq.n	8013c2c <dhcp_t1_timeout+0x26>
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	795b      	ldrb	r3, [r3, #5]
 8013c20:	2b0a      	cmp	r3, #10
 8013c22:	d003      	beq.n	8013c2c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c28:	2b05      	cmp	r3, #5
 8013c2a:	d116      	bne.n	8013c5a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f000 fb83 	bl	8014338 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	899b      	ldrh	r3, [r3, #12]
 8013c36:	461a      	mov	r2, r3
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	8a5b      	ldrh	r3, [r3, #18]
 8013c3c:	1ad3      	subs	r3, r2, r3
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	dd0b      	ble.n	8013c5a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	899b      	ldrh	r3, [r3, #12]
 8013c46:	461a      	mov	r2, r3
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	8a5b      	ldrh	r3, [r3, #18]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	0fda      	lsrs	r2, r3, #31
 8013c50:	4413      	add	r3, r2
 8013c52:	105b      	asrs	r3, r3, #1
 8013c54:	b29a      	uxth	r2, r3
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013c5a:	bf00      	nop
 8013c5c:	3710      	adds	r7, #16
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b084      	sub	sp, #16
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c6e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	795b      	ldrb	r3, [r3, #5]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d00b      	beq.n	8013c90 <dhcp_t2_timeout+0x2e>
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	795b      	ldrb	r3, [r3, #5]
 8013c7c:	2b0a      	cmp	r3, #10
 8013c7e:	d007      	beq.n	8013c90 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013c84:	2b05      	cmp	r3, #5
 8013c86:	d003      	beq.n	8013c90 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	795b      	ldrb	r3, [r3, #5]
 8013c8c:	2b04      	cmp	r3, #4
 8013c8e:	d116      	bne.n	8013cbe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 fbed 	bl	8014470 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	8a9b      	ldrh	r3, [r3, #20]
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	8a5b      	ldrh	r3, [r3, #18]
 8013ca0:	1ad3      	subs	r3, r2, r3
 8013ca2:	2b01      	cmp	r3, #1
 8013ca4:	dd0b      	ble.n	8013cbe <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	8a9b      	ldrh	r3, [r3, #20]
 8013caa:	461a      	mov	r2, r3
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	8a5b      	ldrh	r3, [r3, #18]
 8013cb0:	1ad3      	subs	r3, r2, r3
 8013cb2:	0fda      	lsrs	r2, r3, #31
 8013cb4:	4413      	add	r3, r2
 8013cb6:	105b      	asrs	r3, r3, #1
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013cbe:	bf00      	nop
 8013cc0:	3710      	adds	r7, #16
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
	...

08013cc8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013ce4:	4b26      	ldr	r3, [pc, #152]	; (8013d80 <dhcp_handle_ack+0xb8>)
 8013ce6:	78db      	ldrb	r3, [r3, #3]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d003      	beq.n	8013cf4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013cec:	4b25      	ldr	r3, [pc, #148]	; (8013d84 <dhcp_handle_ack+0xbc>)
 8013cee:	68da      	ldr	r2, [r3, #12]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013cf4:	4b22      	ldr	r3, [pc, #136]	; (8013d80 <dhcp_handle_ack+0xb8>)
 8013cf6:	791b      	ldrb	r3, [r3, #4]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d004      	beq.n	8013d06 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013cfc:	4b21      	ldr	r3, [pc, #132]	; (8013d84 <dhcp_handle_ack+0xbc>)
 8013cfe:	691a      	ldr	r2, [r3, #16]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8013d04:	e004      	b.n	8013d10 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d0a:	085a      	lsrs	r2, r3, #1
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013d10:	4b1b      	ldr	r3, [pc, #108]	; (8013d80 <dhcp_handle_ack+0xb8>)
 8013d12:	795b      	ldrb	r3, [r3, #5]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d004      	beq.n	8013d22 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013d18:	4b1a      	ldr	r3, [pc, #104]	; (8013d84 <dhcp_handle_ack+0xbc>)
 8013d1a:	695a      	ldr	r2, [r3, #20]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8013d20:	e007      	b.n	8013d32 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d26:	4613      	mov	r3, r2
 8013d28:	00db      	lsls	r3, r3, #3
 8013d2a:	1a9b      	subs	r3, r3, r2
 8013d2c:	08da      	lsrs	r2, r3, #3
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	691a      	ldr	r2, [r3, #16]
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013d3a:	4b11      	ldr	r3, [pc, #68]	; (8013d80 <dhcp_handle_ack+0xb8>)
 8013d3c:	799b      	ldrb	r3, [r3, #6]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d00b      	beq.n	8013d5a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013d42:	4b10      	ldr	r3, [pc, #64]	; (8013d84 <dhcp_handle_ack+0xbc>)
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7f7 fec7 	bl	800bada <lwip_htonl>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	2201      	movs	r2, #1
 8013d56:	71da      	strb	r2, [r3, #7]
 8013d58:	e002      	b.n	8013d60 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013d60:	4b07      	ldr	r3, [pc, #28]	; (8013d80 <dhcp_handle_ack+0xb8>)
 8013d62:	79db      	ldrb	r3, [r3, #7]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d007      	beq.n	8013d78 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013d68:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <dhcp_handle_ack+0xbc>)
 8013d6a:	69db      	ldr	r3, [r3, #28]
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7f7 feb4 	bl	800bada <lwip_htonl>
 8013d72:	4602      	mov	r2, r0
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013d78:	bf00      	nop
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	2000ce20 	.word	0x2000ce20
 8013d84:	2000ce28 	.word	0x2000ce28

08013d88 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d109      	bne.n	8013daa <dhcp_start+0x22>
 8013d96:	4b37      	ldr	r3, [pc, #220]	; (8013e74 <dhcp_start+0xec>)
 8013d98:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013d9c:	4936      	ldr	r1, [pc, #216]	; (8013e78 <dhcp_start+0xf0>)
 8013d9e:	4837      	ldr	r0, [pc, #220]	; (8013e7c <dhcp_start+0xf4>)
 8013da0:	f004 f892 	bl	8017ec8 <iprintf>
 8013da4:	f06f 030f 	mvn.w	r3, #15
 8013da8:	e060      	b.n	8013e6c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013db0:	f003 0301 	and.w	r3, r3, #1
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d109      	bne.n	8013dcc <dhcp_start+0x44>
 8013db8:	4b2e      	ldr	r3, [pc, #184]	; (8013e74 <dhcp_start+0xec>)
 8013dba:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013dbe:	4930      	ldr	r1, [pc, #192]	; (8013e80 <dhcp_start+0xf8>)
 8013dc0:	482e      	ldr	r0, [pc, #184]	; (8013e7c <dhcp_start+0xf4>)
 8013dc2:	f004 f881 	bl	8017ec8 <iprintf>
 8013dc6:	f06f 030f 	mvn.w	r3, #15
 8013dca:	e04f      	b.n	8013e6c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dd6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013dda:	d202      	bcs.n	8013de2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8013de0:	e044      	b.n	8013e6c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10d      	bne.n	8013e04 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013de8:	2034      	movs	r0, #52	; 0x34
 8013dea:	f7f8 f995 	bl	800c118 <mem_malloc>
 8013dee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d102      	bne.n	8013dfc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013df6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dfa:	e037      	b.n	8013e6c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	68fa      	ldr	r2, [r7, #12]
 8013e00:	625a      	str	r2, [r3, #36]	; 0x24
 8013e02:	e005      	b.n	8013e10 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	791b      	ldrb	r3, [r3, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013e0c:	f7ff fc92 	bl	8013734 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013e10:	2234      	movs	r2, #52	; 0x34
 8013e12:	2100      	movs	r1, #0
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f003 fff4 	bl	8017e02 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013e1a:	f7ff fc39 	bl	8013690 <dhcp_inc_pcb_refcount>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d002      	beq.n	8013e2a <dhcp_start+0xa2>
    return ERR_MEM;
 8013e24:	f04f 33ff 	mov.w	r3, #4294967295
 8013e28:	e020      	b.n	8013e6c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	2201      	movs	r2, #1
 8013e2e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013e36:	f003 0304 	and.w	r3, r3, #4
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d105      	bne.n	8013e4a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013e3e:	2102      	movs	r1, #2
 8013e40:	68f8      	ldr	r0, [r7, #12]
 8013e42:	f000 fd01 	bl	8014848 <dhcp_set_state>
    return ERR_OK;
 8013e46:	2300      	movs	r3, #0
 8013e48:	e010      	b.n	8013e6c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f8f8 	bl	8014040 <dhcp_discover>
 8013e50:	4603      	mov	r3, r0
 8013e52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013e54:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d005      	beq.n	8013e68 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 fc59 	bl	8014714 <dhcp_release_and_stop>
    return ERR_MEM;
 8013e62:	f04f 33ff 	mov.w	r3, #4294967295
 8013e66:	e001      	b.n	8013e6c <dhcp_start+0xe4>
  }
  return result;
 8013e68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	0801b1d4 	.word	0x0801b1d4
 8013e78:	0801b2b8 	.word	0x0801b2b8
 8013e7c:	0801b234 	.word	0x0801b234
 8013e80:	0801b2fc 	.word	0x0801b2fc

08013e84 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b084      	sub	sp, #16
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e90:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d025      	beq.n	8013ee4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	795b      	ldrb	r3, [r3, #5]
 8013e9c:	2b0a      	cmp	r3, #10
 8013e9e:	d008      	beq.n	8013eb2 <dhcp_network_changed+0x2e>
 8013ea0:	2b0a      	cmp	r3, #10
 8013ea2:	dc0d      	bgt.n	8013ec0 <dhcp_network_changed+0x3c>
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d01f      	beq.n	8013ee8 <dhcp_network_changed+0x64>
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	db09      	blt.n	8013ec0 <dhcp_network_changed+0x3c>
 8013eac:	3b03      	subs	r3, #3
 8013eae:	2b02      	cmp	r3, #2
 8013eb0:	d806      	bhi.n	8013ec0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f000 fb75 	bl	80145a8 <dhcp_reboot>
      break;
 8013ebe:	e014      	b.n	8013eea <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	795b      	ldrb	r3, [r3, #5]
 8013ec4:	2b0c      	cmp	r3, #12
 8013ec6:	d906      	bls.n	8013ed6 <dhcp_network_changed+0x52>
 8013ec8:	4b09      	ldr	r3, [pc, #36]	; (8013ef0 <dhcp_network_changed+0x6c>)
 8013eca:	f240 326d 	movw	r2, #877	; 0x36d
 8013ece:	4909      	ldr	r1, [pc, #36]	; (8013ef4 <dhcp_network_changed+0x70>)
 8013ed0:	4809      	ldr	r0, [pc, #36]	; (8013ef8 <dhcp_network_changed+0x74>)
 8013ed2:	f003 fff9 	bl	8017ec8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 f8af 	bl	8014040 <dhcp_discover>
      break;
 8013ee2:	e002      	b.n	8013eea <dhcp_network_changed+0x66>
    return;
 8013ee4:	bf00      	nop
 8013ee6:	e000      	b.n	8013eea <dhcp_network_changed+0x66>
      break;
 8013ee8:	bf00      	nop
  }
}
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}
 8013ef0:	0801b1d4 	.word	0x0801b1d4
 8013ef4:	0801b320 	.word	0x0801b320
 8013ef8:	0801b234 	.word	0x0801b234

08013efc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d107      	bne.n	8013f1c <dhcp_arp_reply+0x20>
 8013f0c:	4b0e      	ldr	r3, [pc, #56]	; (8013f48 <dhcp_arp_reply+0x4c>)
 8013f0e:	f240 328b 	movw	r2, #907	; 0x38b
 8013f12:	490e      	ldr	r1, [pc, #56]	; (8013f4c <dhcp_arp_reply+0x50>)
 8013f14:	480e      	ldr	r0, [pc, #56]	; (8013f50 <dhcp_arp_reply+0x54>)
 8013f16:	f003 ffd7 	bl	8017ec8 <iprintf>
 8013f1a:	e012      	b.n	8013f42 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f20:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00c      	beq.n	8013f42 <dhcp_arp_reply+0x46>
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	795b      	ldrb	r3, [r3, #5]
 8013f2c:	2b08      	cmp	r3, #8
 8013f2e:	d108      	bne.n	8013f42 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	69db      	ldr	r3, [r3, #28]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d102      	bne.n	8013f42 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f000 f809 	bl	8013f54 <dhcp_decline>
    }
  }
}
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	0801b1d4 	.word	0x0801b1d4
 8013f4c:	0801b2b8 	.word	0x0801b2b8
 8013f50:	0801b234 	.word	0x0801b234

08013f54 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013f54:	b5b0      	push	{r4, r5, r7, lr}
 8013f56:	b08a      	sub	sp, #40	; 0x28
 8013f58:	af02      	add	r7, sp, #8
 8013f5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f60:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013f62:	210c      	movs	r1, #12
 8013f64:	69b8      	ldr	r0, [r7, #24]
 8013f66:	f000 fc6f 	bl	8014848 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013f6a:	f107 030c 	add.w	r3, r7, #12
 8013f6e:	2204      	movs	r2, #4
 8013f70:	69b9      	ldr	r1, [r7, #24]
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f001 f8f4 	bl	8015160 <dhcp_create_msg>
 8013f78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d035      	beq.n	8013fec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013f86:	89b8      	ldrh	r0, [r7, #12]
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f8e:	2304      	movs	r3, #4
 8013f90:	2232      	movs	r2, #50	; 0x32
 8013f92:	f000 fc73 	bl	801487c <dhcp_option>
 8013f96:	4603      	mov	r3, r0
 8013f98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013f9a:	89bc      	ldrh	r4, [r7, #12]
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	69db      	ldr	r3, [r3, #28]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7f7 fd97 	bl	800bada <lwip_htonl>
 8013fac:	4603      	mov	r3, r0
 8013fae:	461a      	mov	r2, r3
 8013fb0:	4629      	mov	r1, r5
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f000 fcee 	bl	8014994 <dhcp_option_long>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fbc:	89b8      	ldrh	r0, [r7, #12]
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	33f0      	adds	r3, #240	; 0xf0
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	f001 f9a1 	bl	801530c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013fca:	4b19      	ldr	r3, [pc, #100]	; (8014030 <dhcp_decline+0xdc>)
 8013fcc:	6818      	ldr	r0, [r3, #0]
 8013fce:	4b19      	ldr	r3, [pc, #100]	; (8014034 <dhcp_decline+0xe0>)
 8013fd0:	9301      	str	r3, [sp, #4]
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	9300      	str	r3, [sp, #0]
 8013fd6:	2343      	movs	r3, #67	; 0x43
 8013fd8:	4a17      	ldr	r2, [pc, #92]	; (8014038 <dhcp_decline+0xe4>)
 8013fda:	6979      	ldr	r1, [r7, #20]
 8013fdc:	f7ff f8d2 	bl	8013184 <udp_sendto_if_src>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013fe4:	6978      	ldr	r0, [r7, #20]
 8013fe6:	f7f9 f91b 	bl	800d220 <pbuf_free>
 8013fea:	e001      	b.n	8013ff0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013fec:	23ff      	movs	r3, #255	; 0xff
 8013fee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	799b      	ldrb	r3, [r3, #6]
 8013ff4:	2bff      	cmp	r3, #255	; 0xff
 8013ff6:	d005      	beq.n	8014004 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	799b      	ldrb	r3, [r3, #6]
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	b2da      	uxtb	r2, r3
 8014000:	69bb      	ldr	r3, [r7, #24]
 8014002:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014004:	f242 7310 	movw	r3, #10000	; 0x2710
 8014008:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801400a:	89fb      	ldrh	r3, [r7, #14]
 801400c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014010:	4a0a      	ldr	r2, [pc, #40]	; (801403c <dhcp_decline+0xe8>)
 8014012:	fb82 1203 	smull	r1, r2, r2, r3
 8014016:	1152      	asrs	r2, r2, #5
 8014018:	17db      	asrs	r3, r3, #31
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	b29a      	uxth	r2, r3
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014022:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3720      	adds	r7, #32
 801402a:	46bd      	mov	sp, r7
 801402c:	bdb0      	pop	{r4, r5, r7, pc}
 801402e:	bf00      	nop
 8014030:	20004b10 	.word	0x20004b10
 8014034:	0801bec8 	.word	0x0801bec8
 8014038:	0801becc 	.word	0x0801becc
 801403c:	10624dd3 	.word	0x10624dd3

08014040 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08a      	sub	sp, #40	; 0x28
 8014044:	af02      	add	r7, sp, #8
 8014046:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014052:	69bb      	ldr	r3, [r7, #24]
 8014054:	2200      	movs	r2, #0
 8014056:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014058:	2106      	movs	r1, #6
 801405a:	69b8      	ldr	r0, [r7, #24]
 801405c:	f000 fbf4 	bl	8014848 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014060:	f107 0308 	add.w	r3, r7, #8
 8014064:	2201      	movs	r2, #1
 8014066:	69b9      	ldr	r1, [r7, #24]
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f001 f879 	bl	8015160 <dhcp_create_msg>
 801406e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d04b      	beq.n	801410e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801407c:	8938      	ldrh	r0, [r7, #8]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014084:	2302      	movs	r3, #2
 8014086:	2239      	movs	r2, #57	; 0x39
 8014088:	f000 fbf8 	bl	801487c <dhcp_option>
 801408c:	4603      	mov	r3, r0
 801408e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014090:	8938      	ldrh	r0, [r7, #8]
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801409c:	461a      	mov	r2, r3
 801409e:	f000 fc47 	bl	8014930 <dhcp_option_short>
 80140a2:	4603      	mov	r3, r0
 80140a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80140a6:	8938      	ldrh	r0, [r7, #8]
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140ae:	2303      	movs	r3, #3
 80140b0:	2237      	movs	r2, #55	; 0x37
 80140b2:	f000 fbe3 	bl	801487c <dhcp_option>
 80140b6:	4603      	mov	r3, r0
 80140b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140ba:	2300      	movs	r3, #0
 80140bc:	77fb      	strb	r3, [r7, #31]
 80140be:	e00e      	b.n	80140de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80140c0:	8938      	ldrh	r0, [r7, #8]
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140c8:	7ffb      	ldrb	r3, [r7, #31]
 80140ca:	4a29      	ldr	r2, [pc, #164]	; (8014170 <dhcp_discover+0x130>)
 80140cc:	5cd3      	ldrb	r3, [r2, r3]
 80140ce:	461a      	mov	r2, r3
 80140d0:	f000 fc08 	bl	80148e4 <dhcp_option_byte>
 80140d4:	4603      	mov	r3, r0
 80140d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140d8:	7ffb      	ldrb	r3, [r7, #31]
 80140da:	3301      	adds	r3, #1
 80140dc:	77fb      	strb	r3, [r7, #31]
 80140de:	7ffb      	ldrb	r3, [r7, #31]
 80140e0:	2b02      	cmp	r3, #2
 80140e2:	d9ed      	bls.n	80140c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80140e4:	8938      	ldrh	r0, [r7, #8]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	33f0      	adds	r3, #240	; 0xf0
 80140ea:	693a      	ldr	r2, [r7, #16]
 80140ec:	4619      	mov	r1, r3
 80140ee:	f001 f90d 	bl	801530c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80140f2:	4b20      	ldr	r3, [pc, #128]	; (8014174 <dhcp_discover+0x134>)
 80140f4:	6818      	ldr	r0, [r3, #0]
 80140f6:	4b20      	ldr	r3, [pc, #128]	; (8014178 <dhcp_discover+0x138>)
 80140f8:	9301      	str	r3, [sp, #4]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	9300      	str	r3, [sp, #0]
 80140fe:	2343      	movs	r3, #67	; 0x43
 8014100:	4a1e      	ldr	r2, [pc, #120]	; (801417c <dhcp_discover+0x13c>)
 8014102:	6939      	ldr	r1, [r7, #16]
 8014104:	f7ff f83e 	bl	8013184 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014108:	6938      	ldr	r0, [r7, #16]
 801410a:	f7f9 f889 	bl	800d220 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	799b      	ldrb	r3, [r3, #6]
 8014112:	2bff      	cmp	r3, #255	; 0xff
 8014114:	d005      	beq.n	8014122 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	799b      	ldrb	r3, [r3, #6]
 801411a:	3301      	adds	r3, #1
 801411c:	b2da      	uxtb	r2, r3
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	799b      	ldrb	r3, [r3, #6]
 8014126:	2b05      	cmp	r3, #5
 8014128:	d80d      	bhi.n	8014146 <dhcp_discover+0x106>
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	799b      	ldrb	r3, [r3, #6]
 801412e:	461a      	mov	r2, r3
 8014130:	2301      	movs	r3, #1
 8014132:	4093      	lsls	r3, r2
 8014134:	b29b      	uxth	r3, r3
 8014136:	461a      	mov	r2, r3
 8014138:	0152      	lsls	r2, r2, #5
 801413a:	1ad2      	subs	r2, r2, r3
 801413c:	0092      	lsls	r2, r2, #2
 801413e:	4413      	add	r3, r2
 8014140:	00db      	lsls	r3, r3, #3
 8014142:	b29b      	uxth	r3, r3
 8014144:	e001      	b.n	801414a <dhcp_discover+0x10a>
 8014146:	f64e 2360 	movw	r3, #60000	; 0xea60
 801414a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801414c:	897b      	ldrh	r3, [r7, #10]
 801414e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014152:	4a0b      	ldr	r2, [pc, #44]	; (8014180 <dhcp_discover+0x140>)
 8014154:	fb82 1203 	smull	r1, r2, r2, r3
 8014158:	1152      	asrs	r2, r2, #5
 801415a:	17db      	asrs	r3, r3, #31
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	b29a      	uxth	r2, r3
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3720      	adds	r7, #32
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	2000001c 	.word	0x2000001c
 8014174:	20004b10 	.word	0x20004b10
 8014178:	0801bec8 	.word	0x0801bec8
 801417c:	0801becc 	.word	0x0801becc
 8014180:	10624dd3 	.word	0x10624dd3

08014184 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b088      	sub	sp, #32
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d107      	bne.n	80141a2 <dhcp_bind+0x1e>
 8014192:	4b64      	ldr	r3, [pc, #400]	; (8014324 <dhcp_bind+0x1a0>)
 8014194:	f240 4215 	movw	r2, #1045	; 0x415
 8014198:	4963      	ldr	r1, [pc, #396]	; (8014328 <dhcp_bind+0x1a4>)
 801419a:	4864      	ldr	r0, [pc, #400]	; (801432c <dhcp_bind+0x1a8>)
 801419c:	f003 fe94 	bl	8017ec8 <iprintf>
 80141a0:	e0bc      	b.n	801431c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d107      	bne.n	80141be <dhcp_bind+0x3a>
 80141ae:	4b5d      	ldr	r3, [pc, #372]	; (8014324 <dhcp_bind+0x1a0>)
 80141b0:	f240 4217 	movw	r2, #1047	; 0x417
 80141b4:	495e      	ldr	r1, [pc, #376]	; (8014330 <dhcp_bind+0x1ac>)
 80141b6:	485d      	ldr	r0, [pc, #372]	; (801432c <dhcp_bind+0x1a8>)
 80141b8:	f003 fe86 	bl	8017ec8 <iprintf>
 80141bc:	e0ae      	b.n	801431c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80141be:	69bb      	ldr	r3, [r7, #24]
 80141c0:	2200      	movs	r2, #0
 80141c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141cc:	d019      	beq.n	8014202 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80141ce:	69bb      	ldr	r3, [r7, #24]
 80141d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141d2:	331e      	adds	r3, #30
 80141d4:	4a57      	ldr	r2, [pc, #348]	; (8014334 <dhcp_bind+0x1b0>)
 80141d6:	fba2 2303 	umull	r2, r3, r2, r3
 80141da:	095b      	lsrs	r3, r3, #5
 80141dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141e4:	d302      	bcc.n	80141ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80141e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	8a9b      	ldrh	r3, [r3, #20]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d102      	bne.n	8014202 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80141fc:	69bb      	ldr	r3, [r7, #24]
 80141fe:	2201      	movs	r2, #1
 8014200:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801420a:	d01d      	beq.n	8014248 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014210:	331e      	adds	r3, #30
 8014212:	4a48      	ldr	r2, [pc, #288]	; (8014334 <dhcp_bind+0x1b0>)
 8014214:	fba2 2303 	umull	r2, r3, r2, r3
 8014218:	095b      	lsrs	r3, r3, #5
 801421a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801421c:	69fb      	ldr	r3, [r7, #28]
 801421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014222:	d302      	bcc.n	801422a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014228:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	b29a      	uxth	r2, r3
 801422e:	69bb      	ldr	r3, [r7, #24]
 8014230:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014232:	69bb      	ldr	r3, [r7, #24]
 8014234:	895b      	ldrh	r3, [r3, #10]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d102      	bne.n	8014240 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	2201      	movs	r2, #1
 801423e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	895a      	ldrh	r2, [r3, #10]
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014250:	d01d      	beq.n	801428e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014256:	331e      	adds	r3, #30
 8014258:	4a36      	ldr	r2, [pc, #216]	; (8014334 <dhcp_bind+0x1b0>)
 801425a:	fba2 2303 	umull	r2, r3, r2, r3
 801425e:	095b      	lsrs	r3, r3, #5
 8014260:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014262:	69fb      	ldr	r3, [r7, #28]
 8014264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014268:	d302      	bcc.n	8014270 <dhcp_bind+0xec>
      timeout = 0xffff;
 801426a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801426e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	b29a      	uxth	r2, r3
 8014274:	69bb      	ldr	r3, [r7, #24]
 8014276:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014278:	69bb      	ldr	r3, [r7, #24]
 801427a:	899b      	ldrh	r3, [r3, #12]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d102      	bne.n	8014286 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	2201      	movs	r2, #1
 8014284:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	899a      	ldrh	r2, [r3, #12]
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801428e:	69bb      	ldr	r3, [r7, #24]
 8014290:	895a      	ldrh	r2, [r3, #10]
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	899b      	ldrh	r3, [r3, #12]
 8014296:	429a      	cmp	r2, r3
 8014298:	d306      	bcc.n	80142a8 <dhcp_bind+0x124>
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	899b      	ldrh	r3, [r3, #12]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d002      	beq.n	80142a8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	2200      	movs	r2, #0
 80142a6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80142a8:	69bb      	ldr	r3, [r7, #24]
 80142aa:	79db      	ldrb	r3, [r3, #7]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d003      	beq.n	80142b8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	6a1b      	ldr	r3, [r3, #32]
 80142b4:	613b      	str	r3, [r7, #16]
 80142b6:	e014      	b.n	80142e2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	331c      	adds	r3, #28
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80142c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	db02      	blt.n	80142ce <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80142c8:	23ff      	movs	r3, #255	; 0xff
 80142ca:	613b      	str	r3, [r7, #16]
 80142cc:	e009      	b.n	80142e2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80142ce:	7dfb      	ldrb	r3, [r7, #23]
 80142d0:	2bbf      	cmp	r3, #191	; 0xbf
 80142d2:	d903      	bls.n	80142dc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80142d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80142d8:	613b      	str	r3, [r7, #16]
 80142da:	e002      	b.n	80142e2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80142dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142e0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142e6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d108      	bne.n	8014300 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	69da      	ldr	r2, [r3, #28]
 80142f2:	693b      	ldr	r3, [r7, #16]
 80142f4:	4013      	ands	r3, r2
 80142f6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80142fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014300:	210a      	movs	r1, #10
 8014302:	69b8      	ldr	r0, [r7, #24]
 8014304:	f000 faa0 	bl	8014848 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014308:	69bb      	ldr	r3, [r7, #24]
 801430a:	f103 011c 	add.w	r1, r3, #28
 801430e:	f107 030c 	add.w	r3, r7, #12
 8014312:	f107 0210 	add.w	r2, r7, #16
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7f8 fa74 	bl	800c804 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801431c:	3720      	adds	r7, #32
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	0801b1d4 	.word	0x0801b1d4
 8014328:	0801b334 	.word	0x0801b334
 801432c:	0801b234 	.word	0x0801b234
 8014330:	0801b350 	.word	0x0801b350
 8014334:	88888889 	.word	0x88888889

08014338 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b08a      	sub	sp, #40	; 0x28
 801433c:	af02      	add	r7, sp, #8
 801433e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014344:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014346:	2105      	movs	r1, #5
 8014348:	69b8      	ldr	r0, [r7, #24]
 801434a:	f000 fa7d 	bl	8014848 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801434e:	f107 030c 	add.w	r3, r7, #12
 8014352:	2203      	movs	r2, #3
 8014354:	69b9      	ldr	r1, [r7, #24]
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f000 ff02 	bl	8015160 <dhcp_create_msg>
 801435c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d04e      	beq.n	8014402 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801436a:	89b8      	ldrh	r0, [r7, #12]
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014372:	2302      	movs	r3, #2
 8014374:	2239      	movs	r2, #57	; 0x39
 8014376:	f000 fa81 	bl	801487c <dhcp_option>
 801437a:	4603      	mov	r3, r0
 801437c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801437e:	89b8      	ldrh	r0, [r7, #12]
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801438a:	461a      	mov	r2, r3
 801438c:	f000 fad0 	bl	8014930 <dhcp_option_short>
 8014390:	4603      	mov	r3, r0
 8014392:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014394:	89b8      	ldrh	r0, [r7, #12]
 8014396:	693b      	ldr	r3, [r7, #16]
 8014398:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801439c:	2303      	movs	r3, #3
 801439e:	2237      	movs	r2, #55	; 0x37
 80143a0:	f000 fa6c 	bl	801487c <dhcp_option>
 80143a4:	4603      	mov	r3, r0
 80143a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143a8:	2300      	movs	r3, #0
 80143aa:	77bb      	strb	r3, [r7, #30]
 80143ac:	e00e      	b.n	80143cc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80143ae:	89b8      	ldrh	r0, [r7, #12]
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143b6:	7fbb      	ldrb	r3, [r7, #30]
 80143b8:	4a2a      	ldr	r2, [pc, #168]	; (8014464 <dhcp_renew+0x12c>)
 80143ba:	5cd3      	ldrb	r3, [r2, r3]
 80143bc:	461a      	mov	r2, r3
 80143be:	f000 fa91 	bl	80148e4 <dhcp_option_byte>
 80143c2:	4603      	mov	r3, r0
 80143c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143c6:	7fbb      	ldrb	r3, [r7, #30]
 80143c8:	3301      	adds	r3, #1
 80143ca:	77bb      	strb	r3, [r7, #30]
 80143cc:	7fbb      	ldrb	r3, [r7, #30]
 80143ce:	2b02      	cmp	r3, #2
 80143d0:	d9ed      	bls.n	80143ae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80143d2:	89b8      	ldrh	r0, [r7, #12]
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	33f0      	adds	r3, #240	; 0xf0
 80143d8:	697a      	ldr	r2, [r7, #20]
 80143da:	4619      	mov	r1, r3
 80143dc:	f000 ff96 	bl	801530c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80143e0:	4b21      	ldr	r3, [pc, #132]	; (8014468 <dhcp_renew+0x130>)
 80143e2:	6818      	ldr	r0, [r3, #0]
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	f103 0218 	add.w	r2, r3, #24
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	9300      	str	r3, [sp, #0]
 80143ee:	2343      	movs	r3, #67	; 0x43
 80143f0:	6979      	ldr	r1, [r7, #20]
 80143f2:	f7fe fe53 	bl	801309c <udp_sendto_if>
 80143f6:	4603      	mov	r3, r0
 80143f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80143fa:	6978      	ldr	r0, [r7, #20]
 80143fc:	f7f8 ff10 	bl	800d220 <pbuf_free>
 8014400:	e001      	b.n	8014406 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014402:	23ff      	movs	r3, #255	; 0xff
 8014404:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	799b      	ldrb	r3, [r3, #6]
 801440a:	2bff      	cmp	r3, #255	; 0xff
 801440c:	d005      	beq.n	801441a <dhcp_renew+0xe2>
    dhcp->tries++;
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	799b      	ldrb	r3, [r3, #6]
 8014412:	3301      	adds	r3, #1
 8014414:	b2da      	uxtb	r2, r3
 8014416:	69bb      	ldr	r3, [r7, #24]
 8014418:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	799b      	ldrb	r3, [r3, #6]
 801441e:	2b09      	cmp	r3, #9
 8014420:	d80a      	bhi.n	8014438 <dhcp_renew+0x100>
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	799b      	ldrb	r3, [r3, #6]
 8014426:	b29b      	uxth	r3, r3
 8014428:	461a      	mov	r2, r3
 801442a:	0152      	lsls	r2, r2, #5
 801442c:	1ad2      	subs	r2, r2, r3
 801442e:	0092      	lsls	r2, r2, #2
 8014430:	4413      	add	r3, r2
 8014432:	011b      	lsls	r3, r3, #4
 8014434:	b29b      	uxth	r3, r3
 8014436:	e001      	b.n	801443c <dhcp_renew+0x104>
 8014438:	f644 6320 	movw	r3, #20000	; 0x4e20
 801443c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801443e:	89fb      	ldrh	r3, [r7, #14]
 8014440:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014444:	4a09      	ldr	r2, [pc, #36]	; (801446c <dhcp_renew+0x134>)
 8014446:	fb82 1203 	smull	r1, r2, r2, r3
 801444a:	1152      	asrs	r2, r2, #5
 801444c:	17db      	asrs	r3, r3, #31
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	b29a      	uxth	r2, r3
 8014452:	69bb      	ldr	r3, [r7, #24]
 8014454:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014456:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801445a:	4618      	mov	r0, r3
 801445c:	3720      	adds	r7, #32
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	2000001c 	.word	0x2000001c
 8014468:	20004b10 	.word	0x20004b10
 801446c:	10624dd3 	.word	0x10624dd3

08014470 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08a      	sub	sp, #40	; 0x28
 8014474:	af02      	add	r7, sp, #8
 8014476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801447e:	2104      	movs	r1, #4
 8014480:	69b8      	ldr	r0, [r7, #24]
 8014482:	f000 f9e1 	bl	8014848 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014486:	f107 030c 	add.w	r3, r7, #12
 801448a:	2203      	movs	r2, #3
 801448c:	69b9      	ldr	r1, [r7, #24]
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 fe66 	bl	8015160 <dhcp_create_msg>
 8014494:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d04c      	beq.n	8014536 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144a2:	89b8      	ldrh	r0, [r7, #12]
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144aa:	2302      	movs	r3, #2
 80144ac:	2239      	movs	r2, #57	; 0x39
 80144ae:	f000 f9e5 	bl	801487c <dhcp_option>
 80144b2:	4603      	mov	r3, r0
 80144b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80144b6:	89b8      	ldrh	r0, [r7, #12]
 80144b8:	693b      	ldr	r3, [r7, #16]
 80144ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144c2:	461a      	mov	r2, r3
 80144c4:	f000 fa34 	bl	8014930 <dhcp_option_short>
 80144c8:	4603      	mov	r3, r0
 80144ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80144cc:	89b8      	ldrh	r0, [r7, #12]
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144d4:	2303      	movs	r3, #3
 80144d6:	2237      	movs	r2, #55	; 0x37
 80144d8:	f000 f9d0 	bl	801487c <dhcp_option>
 80144dc:	4603      	mov	r3, r0
 80144de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144e0:	2300      	movs	r3, #0
 80144e2:	77bb      	strb	r3, [r7, #30]
 80144e4:	e00e      	b.n	8014504 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80144e6:	89b8      	ldrh	r0, [r7, #12]
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144ee:	7fbb      	ldrb	r3, [r7, #30]
 80144f0:	4a29      	ldr	r2, [pc, #164]	; (8014598 <dhcp_rebind+0x128>)
 80144f2:	5cd3      	ldrb	r3, [r2, r3]
 80144f4:	461a      	mov	r2, r3
 80144f6:	f000 f9f5 	bl	80148e4 <dhcp_option_byte>
 80144fa:	4603      	mov	r3, r0
 80144fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80144fe:	7fbb      	ldrb	r3, [r7, #30]
 8014500:	3301      	adds	r3, #1
 8014502:	77bb      	strb	r3, [r7, #30]
 8014504:	7fbb      	ldrb	r3, [r7, #30]
 8014506:	2b02      	cmp	r3, #2
 8014508:	d9ed      	bls.n	80144e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801450a:	89b8      	ldrh	r0, [r7, #12]
 801450c:	693b      	ldr	r3, [r7, #16]
 801450e:	33f0      	adds	r3, #240	; 0xf0
 8014510:	697a      	ldr	r2, [r7, #20]
 8014512:	4619      	mov	r1, r3
 8014514:	f000 fefa 	bl	801530c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014518:	4b20      	ldr	r3, [pc, #128]	; (801459c <dhcp_rebind+0x12c>)
 801451a:	6818      	ldr	r0, [r3, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	2343      	movs	r3, #67	; 0x43
 8014522:	4a1f      	ldr	r2, [pc, #124]	; (80145a0 <dhcp_rebind+0x130>)
 8014524:	6979      	ldr	r1, [r7, #20]
 8014526:	f7fe fdb9 	bl	801309c <udp_sendto_if>
 801452a:	4603      	mov	r3, r0
 801452c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801452e:	6978      	ldr	r0, [r7, #20]
 8014530:	f7f8 fe76 	bl	800d220 <pbuf_free>
 8014534:	e001      	b.n	801453a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014536:	23ff      	movs	r3, #255	; 0xff
 8014538:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	799b      	ldrb	r3, [r3, #6]
 801453e:	2bff      	cmp	r3, #255	; 0xff
 8014540:	d005      	beq.n	801454e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	799b      	ldrb	r3, [r3, #6]
 8014546:	3301      	adds	r3, #1
 8014548:	b2da      	uxtb	r2, r3
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801454e:	69bb      	ldr	r3, [r7, #24]
 8014550:	799b      	ldrb	r3, [r3, #6]
 8014552:	2b09      	cmp	r3, #9
 8014554:	d80a      	bhi.n	801456c <dhcp_rebind+0xfc>
 8014556:	69bb      	ldr	r3, [r7, #24]
 8014558:	799b      	ldrb	r3, [r3, #6]
 801455a:	b29b      	uxth	r3, r3
 801455c:	461a      	mov	r2, r3
 801455e:	0152      	lsls	r2, r2, #5
 8014560:	1ad2      	subs	r2, r2, r3
 8014562:	0092      	lsls	r2, r2, #2
 8014564:	4413      	add	r3, r2
 8014566:	00db      	lsls	r3, r3, #3
 8014568:	b29b      	uxth	r3, r3
 801456a:	e001      	b.n	8014570 <dhcp_rebind+0x100>
 801456c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014570:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014572:	89fb      	ldrh	r3, [r7, #14]
 8014574:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014578:	4a0a      	ldr	r2, [pc, #40]	; (80145a4 <dhcp_rebind+0x134>)
 801457a:	fb82 1203 	smull	r1, r2, r2, r3
 801457e:	1152      	asrs	r2, r2, #5
 8014580:	17db      	asrs	r3, r3, #31
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	b29a      	uxth	r2, r3
 8014586:	69bb      	ldr	r3, [r7, #24]
 8014588:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801458a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3720      	adds	r7, #32
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	2000001c 	.word	0x2000001c
 801459c:	20004b10 	.word	0x20004b10
 80145a0:	0801becc 	.word	0x0801becc
 80145a4:	10624dd3 	.word	0x10624dd3

080145a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80145a8:	b5b0      	push	{r4, r5, r7, lr}
 80145aa:	b08a      	sub	sp, #40	; 0x28
 80145ac:	af02      	add	r7, sp, #8
 80145ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80145b6:	2103      	movs	r1, #3
 80145b8:	69b8      	ldr	r0, [r7, #24]
 80145ba:	f000 f945 	bl	8014848 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80145be:	f107 030c 	add.w	r3, r7, #12
 80145c2:	2203      	movs	r2, #3
 80145c4:	69b9      	ldr	r1, [r7, #24]
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f000 fdca 	bl	8015160 <dhcp_create_msg>
 80145cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d066      	beq.n	80146a2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80145da:	89b8      	ldrh	r0, [r7, #12]
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80145e2:	2302      	movs	r3, #2
 80145e4:	2239      	movs	r2, #57	; 0x39
 80145e6:	f000 f949 	bl	801487c <dhcp_option>
 80145ea:	4603      	mov	r3, r0
 80145ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80145ee:	89b8      	ldrh	r0, [r7, #12]
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	33f0      	adds	r3, #240	; 0xf0
 80145f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80145f8:	4619      	mov	r1, r3
 80145fa:	f000 f999 	bl	8014930 <dhcp_option_short>
 80145fe:	4603      	mov	r3, r0
 8014600:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014602:	89b8      	ldrh	r0, [r7, #12]
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801460a:	2304      	movs	r3, #4
 801460c:	2232      	movs	r2, #50	; 0x32
 801460e:	f000 f935 	bl	801487c <dhcp_option>
 8014612:	4603      	mov	r3, r0
 8014614:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014616:	89bc      	ldrh	r4, [r7, #12]
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	69db      	ldr	r3, [r3, #28]
 8014622:	4618      	mov	r0, r3
 8014624:	f7f7 fa59 	bl	800bada <lwip_htonl>
 8014628:	4603      	mov	r3, r0
 801462a:	461a      	mov	r2, r3
 801462c:	4629      	mov	r1, r5
 801462e:	4620      	mov	r0, r4
 8014630:	f000 f9b0 	bl	8014994 <dhcp_option_long>
 8014634:	4603      	mov	r3, r0
 8014636:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014638:	89b8      	ldrh	r0, [r7, #12]
 801463a:	693b      	ldr	r3, [r7, #16]
 801463c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014640:	2303      	movs	r3, #3
 8014642:	2237      	movs	r2, #55	; 0x37
 8014644:	f000 f91a 	bl	801487c <dhcp_option>
 8014648:	4603      	mov	r3, r0
 801464a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801464c:	2300      	movs	r3, #0
 801464e:	77bb      	strb	r3, [r7, #30]
 8014650:	e00e      	b.n	8014670 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014652:	89b8      	ldrh	r0, [r7, #12]
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801465a:	7fbb      	ldrb	r3, [r7, #30]
 801465c:	4a29      	ldr	r2, [pc, #164]	; (8014704 <dhcp_reboot+0x15c>)
 801465e:	5cd3      	ldrb	r3, [r2, r3]
 8014660:	461a      	mov	r2, r3
 8014662:	f000 f93f 	bl	80148e4 <dhcp_option_byte>
 8014666:	4603      	mov	r3, r0
 8014668:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801466a:	7fbb      	ldrb	r3, [r7, #30]
 801466c:	3301      	adds	r3, #1
 801466e:	77bb      	strb	r3, [r7, #30]
 8014670:	7fbb      	ldrb	r3, [r7, #30]
 8014672:	2b02      	cmp	r3, #2
 8014674:	d9ed      	bls.n	8014652 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014676:	89b8      	ldrh	r0, [r7, #12]
 8014678:	693b      	ldr	r3, [r7, #16]
 801467a:	33f0      	adds	r3, #240	; 0xf0
 801467c:	697a      	ldr	r2, [r7, #20]
 801467e:	4619      	mov	r1, r3
 8014680:	f000 fe44 	bl	801530c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014684:	4b20      	ldr	r3, [pc, #128]	; (8014708 <dhcp_reboot+0x160>)
 8014686:	6818      	ldr	r0, [r3, #0]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	9300      	str	r3, [sp, #0]
 801468c:	2343      	movs	r3, #67	; 0x43
 801468e:	4a1f      	ldr	r2, [pc, #124]	; (801470c <dhcp_reboot+0x164>)
 8014690:	6979      	ldr	r1, [r7, #20]
 8014692:	f7fe fd03 	bl	801309c <udp_sendto_if>
 8014696:	4603      	mov	r3, r0
 8014698:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801469a:	6978      	ldr	r0, [r7, #20]
 801469c:	f7f8 fdc0 	bl	800d220 <pbuf_free>
 80146a0:	e001      	b.n	80146a6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80146a2:	23ff      	movs	r3, #255	; 0xff
 80146a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80146a6:	69bb      	ldr	r3, [r7, #24]
 80146a8:	799b      	ldrb	r3, [r3, #6]
 80146aa:	2bff      	cmp	r3, #255	; 0xff
 80146ac:	d005      	beq.n	80146ba <dhcp_reboot+0x112>
    dhcp->tries++;
 80146ae:	69bb      	ldr	r3, [r7, #24]
 80146b0:	799b      	ldrb	r3, [r3, #6]
 80146b2:	3301      	adds	r3, #1
 80146b4:	b2da      	uxtb	r2, r3
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	799b      	ldrb	r3, [r3, #6]
 80146be:	2b09      	cmp	r3, #9
 80146c0:	d80a      	bhi.n	80146d8 <dhcp_reboot+0x130>
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	799b      	ldrb	r3, [r3, #6]
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	461a      	mov	r2, r3
 80146ca:	0152      	lsls	r2, r2, #5
 80146cc:	1ad2      	subs	r2, r2, r3
 80146ce:	0092      	lsls	r2, r2, #2
 80146d0:	4413      	add	r3, r2
 80146d2:	00db      	lsls	r3, r3, #3
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	e001      	b.n	80146dc <dhcp_reboot+0x134>
 80146d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80146dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80146de:	89fb      	ldrh	r3, [r7, #14]
 80146e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80146e4:	4a0a      	ldr	r2, [pc, #40]	; (8014710 <dhcp_reboot+0x168>)
 80146e6:	fb82 1203 	smull	r1, r2, r2, r3
 80146ea:	1152      	asrs	r2, r2, #5
 80146ec:	17db      	asrs	r3, r3, #31
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	69bb      	ldr	r3, [r7, #24]
 80146f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80146f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80146fa:	4618      	mov	r0, r3
 80146fc:	3720      	adds	r7, #32
 80146fe:	46bd      	mov	sp, r7
 8014700:	bdb0      	pop	{r4, r5, r7, pc}
 8014702:	bf00      	nop
 8014704:	2000001c 	.word	0x2000001c
 8014708:	20004b10 	.word	0x20004b10
 801470c:	0801becc 	.word	0x0801becc
 8014710:	10624dd3 	.word	0x10624dd3

08014714 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014714:	b5b0      	push	{r4, r5, r7, lr}
 8014716:	b08a      	sub	sp, #40	; 0x28
 8014718:	af02      	add	r7, sp, #8
 801471a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014720:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	2b00      	cmp	r3, #0
 8014726:	f000 8084 	beq.w	8014832 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	795b      	ldrb	r3, [r3, #5]
 801472e:	2b00      	cmp	r3, #0
 8014730:	f000 8081 	beq.w	8014836 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	699b      	ldr	r3, [r3, #24]
 8014738:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	2200      	movs	r2, #0
 801473e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	2200      	movs	r2, #0
 8014744:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	2200      	movs	r2, #0
 801474a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	2200      	movs	r2, #0
 8014750:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	2200      	movs	r2, #0
 8014756:	631a      	str	r2, [r3, #48]	; 0x30
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	2200      	movs	r2, #0
 801476c:	829a      	strh	r2, [r3, #20]
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	8a9a      	ldrh	r2, [r3, #20]
 8014772:	69fb      	ldr	r3, [r7, #28]
 8014774:	825a      	strh	r2, [r3, #18]
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	8a5a      	ldrh	r2, [r3, #18]
 801477a:	69fb      	ldr	r3, [r7, #28]
 801477c:	821a      	strh	r2, [r3, #16]
 801477e:	69fb      	ldr	r3, [r7, #28]
 8014780:	8a1a      	ldrh	r2, [r3, #16]
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f000 fdee 	bl	8015368 <dhcp_supplied_address>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d03b      	beq.n	801480a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014792:	f107 030e 	add.w	r3, r7, #14
 8014796:	2207      	movs	r2, #7
 8014798:	69f9      	ldr	r1, [r7, #28]
 801479a:	6878      	ldr	r0, [r7, #4]
 801479c:	f000 fce0 	bl	8015160 <dhcp_create_msg>
 80147a0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80147a2:	69bb      	ldr	r3, [r7, #24]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d030      	beq.n	801480a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80147ae:	89f8      	ldrh	r0, [r7, #14]
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147b6:	2304      	movs	r3, #4
 80147b8:	2236      	movs	r2, #54	; 0x36
 80147ba:	f000 f85f 	bl	801487c <dhcp_option>
 80147be:	4603      	mov	r3, r0
 80147c0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80147c2:	89fc      	ldrh	r4, [r7, #14]
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7f7 f984 	bl	800bada <lwip_htonl>
 80147d2:	4603      	mov	r3, r0
 80147d4:	461a      	mov	r2, r3
 80147d6:	4629      	mov	r1, r5
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 f8db 	bl	8014994 <dhcp_option_long>
 80147de:	4603      	mov	r3, r0
 80147e0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80147e2:	89f8      	ldrh	r0, [r7, #14]
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	33f0      	adds	r3, #240	; 0xf0
 80147e8:	69ba      	ldr	r2, [r7, #24]
 80147ea:	4619      	mov	r1, r3
 80147ec:	f000 fd8e 	bl	801530c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80147f0:	4b13      	ldr	r3, [pc, #76]	; (8014840 <dhcp_release_and_stop+0x12c>)
 80147f2:	6818      	ldr	r0, [r3, #0]
 80147f4:	f107 0210 	add.w	r2, r7, #16
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	9300      	str	r3, [sp, #0]
 80147fc:	2343      	movs	r3, #67	; 0x43
 80147fe:	69b9      	ldr	r1, [r7, #24]
 8014800:	f7fe fc4c 	bl	801309c <udp_sendto_if>
      pbuf_free(p_out);
 8014804:	69b8      	ldr	r0, [r7, #24]
 8014806:	f7f8 fd0b 	bl	800d220 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801480a:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <dhcp_release_and_stop+0x130>)
 801480c:	4a0d      	ldr	r2, [pc, #52]	; (8014844 <dhcp_release_and_stop+0x130>)
 801480e:	490d      	ldr	r1, [pc, #52]	; (8014844 <dhcp_release_and_stop+0x130>)
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7f7 fff7 	bl	800c804 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014816:	2100      	movs	r1, #0
 8014818:	69f8      	ldr	r0, [r7, #28]
 801481a:	f000 f815 	bl	8014848 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	791b      	ldrb	r3, [r3, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d008      	beq.n	8014838 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014826:	f7fe ff85 	bl	8013734 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	2200      	movs	r2, #0
 801482e:	711a      	strb	r2, [r3, #4]
 8014830:	e002      	b.n	8014838 <dhcp_release_and_stop+0x124>
    return;
 8014832:	bf00      	nop
 8014834:	e000      	b.n	8014838 <dhcp_release_and_stop+0x124>
    return;
 8014836:	bf00      	nop
  }
}
 8014838:	3720      	adds	r7, #32
 801483a:	46bd      	mov	sp, r7
 801483c:	bdb0      	pop	{r4, r5, r7, pc}
 801483e:	bf00      	nop
 8014840:	20004b10 	.word	0x20004b10
 8014844:	0801bec8 	.word	0x0801bec8

08014848 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014848:	b480      	push	{r7}
 801484a:	b083      	sub	sp, #12
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	460b      	mov	r3, r1
 8014852:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	795b      	ldrb	r3, [r3, #5]
 8014858:	78fa      	ldrb	r2, [r7, #3]
 801485a:	429a      	cmp	r2, r3
 801485c:	d008      	beq.n	8014870 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	78fa      	ldrb	r2, [r7, #3]
 8014862:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2200      	movs	r2, #0
 801486e:	811a      	strh	r2, [r3, #8]
  }
}
 8014870:	bf00      	nop
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6039      	str	r1, [r7, #0]
 8014884:	4611      	mov	r1, r2
 8014886:	461a      	mov	r2, r3
 8014888:	4603      	mov	r3, r0
 801488a:	80fb      	strh	r3, [r7, #6]
 801488c:	460b      	mov	r3, r1
 801488e:	717b      	strb	r3, [r7, #5]
 8014890:	4613      	mov	r3, r2
 8014892:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014894:	88fa      	ldrh	r2, [r7, #6]
 8014896:	793b      	ldrb	r3, [r7, #4]
 8014898:	4413      	add	r3, r2
 801489a:	3302      	adds	r3, #2
 801489c:	2b44      	cmp	r3, #68	; 0x44
 801489e:	d906      	bls.n	80148ae <dhcp_option+0x32>
 80148a0:	4b0d      	ldr	r3, [pc, #52]	; (80148d8 <dhcp_option+0x5c>)
 80148a2:	f240 529a 	movw	r2, #1434	; 0x59a
 80148a6:	490d      	ldr	r1, [pc, #52]	; (80148dc <dhcp_option+0x60>)
 80148a8:	480d      	ldr	r0, [pc, #52]	; (80148e0 <dhcp_option+0x64>)
 80148aa:	f003 fb0d 	bl	8017ec8 <iprintf>
  options[options_out_len++] = option_type;
 80148ae:	88fb      	ldrh	r3, [r7, #6]
 80148b0:	1c5a      	adds	r2, r3, #1
 80148b2:	80fa      	strh	r2, [r7, #6]
 80148b4:	461a      	mov	r2, r3
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	4413      	add	r3, r2
 80148ba:	797a      	ldrb	r2, [r7, #5]
 80148bc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80148be:	88fb      	ldrh	r3, [r7, #6]
 80148c0:	1c5a      	adds	r2, r3, #1
 80148c2:	80fa      	strh	r2, [r7, #6]
 80148c4:	461a      	mov	r2, r3
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	4413      	add	r3, r2
 80148ca:	793a      	ldrb	r2, [r7, #4]
 80148cc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80148ce:	88fb      	ldrh	r3, [r7, #6]
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3708      	adds	r7, #8
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	0801b1d4 	.word	0x0801b1d4
 80148dc:	0801b368 	.word	0x0801b368
 80148e0:	0801b234 	.word	0x0801b234

080148e4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	4603      	mov	r3, r0
 80148ec:	6039      	str	r1, [r7, #0]
 80148ee:	80fb      	strh	r3, [r7, #6]
 80148f0:	4613      	mov	r3, r2
 80148f2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80148f4:	88fb      	ldrh	r3, [r7, #6]
 80148f6:	2b43      	cmp	r3, #67	; 0x43
 80148f8:	d906      	bls.n	8014908 <dhcp_option_byte+0x24>
 80148fa:	4b0a      	ldr	r3, [pc, #40]	; (8014924 <dhcp_option_byte+0x40>)
 80148fc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014900:	4909      	ldr	r1, [pc, #36]	; (8014928 <dhcp_option_byte+0x44>)
 8014902:	480a      	ldr	r0, [pc, #40]	; (801492c <dhcp_option_byte+0x48>)
 8014904:	f003 fae0 	bl	8017ec8 <iprintf>
  options[options_out_len++] = value;
 8014908:	88fb      	ldrh	r3, [r7, #6]
 801490a:	1c5a      	adds	r2, r3, #1
 801490c:	80fa      	strh	r2, [r7, #6]
 801490e:	461a      	mov	r2, r3
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	4413      	add	r3, r2
 8014914:	797a      	ldrb	r2, [r7, #5]
 8014916:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014918:	88fb      	ldrh	r3, [r7, #6]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3708      	adds	r7, #8
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
 8014922:	bf00      	nop
 8014924:	0801b1d4 	.word	0x0801b1d4
 8014928:	0801b3ac 	.word	0x0801b3ac
 801492c:	0801b234 	.word	0x0801b234

08014930 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b082      	sub	sp, #8
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	6039      	str	r1, [r7, #0]
 801493a:	80fb      	strh	r3, [r7, #6]
 801493c:	4613      	mov	r3, r2
 801493e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014940:	88fb      	ldrh	r3, [r7, #6]
 8014942:	3302      	adds	r3, #2
 8014944:	2b44      	cmp	r3, #68	; 0x44
 8014946:	d906      	bls.n	8014956 <dhcp_option_short+0x26>
 8014948:	4b0f      	ldr	r3, [pc, #60]	; (8014988 <dhcp_option_short+0x58>)
 801494a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801494e:	490f      	ldr	r1, [pc, #60]	; (801498c <dhcp_option_short+0x5c>)
 8014950:	480f      	ldr	r0, [pc, #60]	; (8014990 <dhcp_option_short+0x60>)
 8014952:	f003 fab9 	bl	8017ec8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014956:	88bb      	ldrh	r3, [r7, #4]
 8014958:	0a1b      	lsrs	r3, r3, #8
 801495a:	b29a      	uxth	r2, r3
 801495c:	88fb      	ldrh	r3, [r7, #6]
 801495e:	1c59      	adds	r1, r3, #1
 8014960:	80f9      	strh	r1, [r7, #6]
 8014962:	4619      	mov	r1, r3
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	440b      	add	r3, r1
 8014968:	b2d2      	uxtb	r2, r2
 801496a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801496c:	88fb      	ldrh	r3, [r7, #6]
 801496e:	1c5a      	adds	r2, r3, #1
 8014970:	80fa      	strh	r2, [r7, #6]
 8014972:	461a      	mov	r2, r3
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	4413      	add	r3, r2
 8014978:	88ba      	ldrh	r2, [r7, #4]
 801497a:	b2d2      	uxtb	r2, r2
 801497c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801497e:	88fb      	ldrh	r3, [r7, #6]
}
 8014980:	4618      	mov	r0, r3
 8014982:	3708      	adds	r7, #8
 8014984:	46bd      	mov	sp, r7
 8014986:	bd80      	pop	{r7, pc}
 8014988:	0801b1d4 	.word	0x0801b1d4
 801498c:	0801b3e4 	.word	0x0801b3e4
 8014990:	0801b234 	.word	0x0801b234

08014994 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b084      	sub	sp, #16
 8014998:	af00      	add	r7, sp, #0
 801499a:	4603      	mov	r3, r0
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
 80149a0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80149a2:	89fb      	ldrh	r3, [r7, #14]
 80149a4:	3304      	adds	r3, #4
 80149a6:	2b44      	cmp	r3, #68	; 0x44
 80149a8:	d906      	bls.n	80149b8 <dhcp_option_long+0x24>
 80149aa:	4b19      	ldr	r3, [pc, #100]	; (8014a10 <dhcp_option_long+0x7c>)
 80149ac:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80149b0:	4918      	ldr	r1, [pc, #96]	; (8014a14 <dhcp_option_long+0x80>)
 80149b2:	4819      	ldr	r0, [pc, #100]	; (8014a18 <dhcp_option_long+0x84>)
 80149b4:	f003 fa88 	bl	8017ec8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	0e1a      	lsrs	r2, r3, #24
 80149bc:	89fb      	ldrh	r3, [r7, #14]
 80149be:	1c59      	adds	r1, r3, #1
 80149c0:	81f9      	strh	r1, [r7, #14]
 80149c2:	4619      	mov	r1, r3
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	440b      	add	r3, r1
 80149c8:	b2d2      	uxtb	r2, r2
 80149ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	0c1a      	lsrs	r2, r3, #16
 80149d0:	89fb      	ldrh	r3, [r7, #14]
 80149d2:	1c59      	adds	r1, r3, #1
 80149d4:	81f9      	strh	r1, [r7, #14]
 80149d6:	4619      	mov	r1, r3
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	440b      	add	r3, r1
 80149dc:	b2d2      	uxtb	r2, r2
 80149de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	0a1a      	lsrs	r2, r3, #8
 80149e4:	89fb      	ldrh	r3, [r7, #14]
 80149e6:	1c59      	adds	r1, r3, #1
 80149e8:	81f9      	strh	r1, [r7, #14]
 80149ea:	4619      	mov	r1, r3
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	440b      	add	r3, r1
 80149f0:	b2d2      	uxtb	r2, r2
 80149f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80149f4:	89fb      	ldrh	r3, [r7, #14]
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	81fa      	strh	r2, [r7, #14]
 80149fa:	461a      	mov	r2, r3
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	4413      	add	r3, r2
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	b2d2      	uxtb	r2, r2
 8014a04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014a06:	89fb      	ldrh	r3, [r7, #14]
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3710      	adds	r7, #16
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	0801b1d4 	.word	0x0801b1d4
 8014a14:	0801b420 	.word	0x0801b420
 8014a18:	0801b234 	.word	0x0801b234

08014a1c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b090      	sub	sp, #64	; 0x40
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014a26:	2300      	movs	r3, #0
 8014a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014a2e:	2208      	movs	r2, #8
 8014a30:	2100      	movs	r1, #0
 8014a32:	48be      	ldr	r0, [pc, #760]	; (8014d2c <dhcp_parse_reply+0x310>)
 8014a34:	f003 f9e5 	bl	8017e02 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	895b      	ldrh	r3, [r3, #10]
 8014a3c:	2b2b      	cmp	r3, #43	; 0x2b
 8014a3e:	d802      	bhi.n	8014a46 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014a40:	f06f 0301 	mvn.w	r3, #1
 8014a44:	e2a8      	b.n	8014f98 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014a4c:	23f0      	movs	r3, #240	; 0xf0
 8014a4e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	891b      	ldrh	r3, [r3, #8]
 8014a54:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014a5a:	e00c      	b.n	8014a76 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a5e:	895b      	ldrh	r3, [r3, #10]
 8014a60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a62:	1ad3      	subs	r3, r2, r3
 8014a64:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a68:	895b      	ldrh	r3, [r3, #10]
 8014a6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8014a6c:	1ad3      	subs	r3, r2, r3
 8014a6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d004      	beq.n	8014a86 <dhcp_parse_reply+0x6a>
 8014a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a7e:	895b      	ldrh	r3, [r3, #10]
 8014a80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d2ea      	bcs.n	8014a5c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d102      	bne.n	8014a92 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014a8c:	f06f 0301 	mvn.w	r3, #1
 8014a90:	e282      	b.n	8014f98 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014a92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a94:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014a96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a98:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a9c:	685b      	ldr	r3, [r3, #4]
 8014a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014aa0:	e23a      	b.n	8014f18 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014aa2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014aa6:	4413      	add	r3, r2
 8014aa8:	781b      	ldrb	r3, [r3, #0]
 8014aaa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014aac:	2300      	movs	r3, #0
 8014aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ab6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014ab8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014aba:	3302      	adds	r3, #2
 8014abc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014abe:	8bfa      	ldrh	r2, [r7, #30]
 8014ac0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d202      	bcs.n	8014acc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014ac6:	f06f 0301 	mvn.w	r3, #1
 8014aca:	e265      	b.n	8014f98 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014acc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ace:	3301      	adds	r3, #1
 8014ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ad2:	8952      	ldrh	r2, [r2, #10]
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	da07      	bge.n	8014ae8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014ad8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ada:	3301      	adds	r3, #1
 8014adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ade:	4413      	add	r3, r2
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ae6:	e00b      	b.n	8014b00 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d004      	beq.n	8014afa <dhcp_parse_reply+0xde>
 8014af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	685b      	ldr	r3, [r3, #4]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	e000      	b.n	8014afc <dhcp_parse_reply+0xe0>
 8014afa:	2300      	movs	r3, #0
 8014afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014b08:	7dfb      	ldrb	r3, [r7, #23]
 8014b0a:	2b3b      	cmp	r3, #59	; 0x3b
 8014b0c:	f200 812d 	bhi.w	8014d6a <dhcp_parse_reply+0x34e>
 8014b10:	a201      	add	r2, pc, #4	; (adr r2, 8014b18 <dhcp_parse_reply+0xfc>)
 8014b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b16:	bf00      	nop
 8014b18:	08014c09 	.word	0x08014c09
 8014b1c:	08014c19 	.word	0x08014c19
 8014b20:	08014d6b 	.word	0x08014d6b
 8014b24:	08014c3b 	.word	0x08014c3b
 8014b28:	08014d6b 	.word	0x08014d6b
 8014b2c:	08014d6b 	.word	0x08014d6b
 8014b30:	08014d6b 	.word	0x08014d6b
 8014b34:	08014d6b 	.word	0x08014d6b
 8014b38:	08014d6b 	.word	0x08014d6b
 8014b3c:	08014d6b 	.word	0x08014d6b
 8014b40:	08014d6b 	.word	0x08014d6b
 8014b44:	08014d6b 	.word	0x08014d6b
 8014b48:	08014d6b 	.word	0x08014d6b
 8014b4c:	08014d6b 	.word	0x08014d6b
 8014b50:	08014d6b 	.word	0x08014d6b
 8014b54:	08014d6b 	.word	0x08014d6b
 8014b58:	08014d6b 	.word	0x08014d6b
 8014b5c:	08014d6b 	.word	0x08014d6b
 8014b60:	08014d6b 	.word	0x08014d6b
 8014b64:	08014d6b 	.word	0x08014d6b
 8014b68:	08014d6b 	.word	0x08014d6b
 8014b6c:	08014d6b 	.word	0x08014d6b
 8014b70:	08014d6b 	.word	0x08014d6b
 8014b74:	08014d6b 	.word	0x08014d6b
 8014b78:	08014d6b 	.word	0x08014d6b
 8014b7c:	08014d6b 	.word	0x08014d6b
 8014b80:	08014d6b 	.word	0x08014d6b
 8014b84:	08014d6b 	.word	0x08014d6b
 8014b88:	08014d6b 	.word	0x08014d6b
 8014b8c:	08014d6b 	.word	0x08014d6b
 8014b90:	08014d6b 	.word	0x08014d6b
 8014b94:	08014d6b 	.word	0x08014d6b
 8014b98:	08014d6b 	.word	0x08014d6b
 8014b9c:	08014d6b 	.word	0x08014d6b
 8014ba0:	08014d6b 	.word	0x08014d6b
 8014ba4:	08014d6b 	.word	0x08014d6b
 8014ba8:	08014d6b 	.word	0x08014d6b
 8014bac:	08014d6b 	.word	0x08014d6b
 8014bb0:	08014d6b 	.word	0x08014d6b
 8014bb4:	08014d6b 	.word	0x08014d6b
 8014bb8:	08014d6b 	.word	0x08014d6b
 8014bbc:	08014d6b 	.word	0x08014d6b
 8014bc0:	08014d6b 	.word	0x08014d6b
 8014bc4:	08014d6b 	.word	0x08014d6b
 8014bc8:	08014d6b 	.word	0x08014d6b
 8014bcc:	08014d6b 	.word	0x08014d6b
 8014bd0:	08014d6b 	.word	0x08014d6b
 8014bd4:	08014d6b 	.word	0x08014d6b
 8014bd8:	08014d6b 	.word	0x08014d6b
 8014bdc:	08014d6b 	.word	0x08014d6b
 8014be0:	08014d6b 	.word	0x08014d6b
 8014be4:	08014c67 	.word	0x08014c67
 8014be8:	08014c89 	.word	0x08014c89
 8014bec:	08014cc5 	.word	0x08014cc5
 8014bf0:	08014ce7 	.word	0x08014ce7
 8014bf4:	08014d6b 	.word	0x08014d6b
 8014bf8:	08014d6b 	.word	0x08014d6b
 8014bfc:	08014d6b 	.word	0x08014d6b
 8014c00:	08014d09 	.word	0x08014d09
 8014c04:	08014d49 	.word	0x08014d49
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014c16:	e0ac      	b.n	8014d72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c1c:	2b04      	cmp	r3, #4
 8014c1e:	d009      	beq.n	8014c34 <dhcp_parse_reply+0x218>
 8014c20:	4b43      	ldr	r3, [pc, #268]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014c22:	f240 622e 	movw	r2, #1582	; 0x62e
 8014c26:	4943      	ldr	r1, [pc, #268]	; (8014d34 <dhcp_parse_reply+0x318>)
 8014c28:	4843      	ldr	r0, [pc, #268]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014c2a:	f003 f94d 	bl	8017ec8 <iprintf>
 8014c2e:	f06f 0305 	mvn.w	r3, #5
 8014c32:	e1b1      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014c34:	2306      	movs	r3, #6
 8014c36:	623b      	str	r3, [r7, #32]
        break;
 8014c38:	e09b      	b.n	8014d72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014c3a:	2304      	movs	r3, #4
 8014c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014c40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d209      	bcs.n	8014c60 <dhcp_parse_reply+0x244>
 8014c4c:	4b38      	ldr	r3, [pc, #224]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014c4e:	f240 6233 	movw	r2, #1587	; 0x633
 8014c52:	493a      	ldr	r1, [pc, #232]	; (8014d3c <dhcp_parse_reply+0x320>)
 8014c54:	4838      	ldr	r0, [pc, #224]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014c56:	f003 f937 	bl	8017ec8 <iprintf>
 8014c5a:	f06f 0305 	mvn.w	r3, #5
 8014c5e:	e19b      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014c60:	2307      	movs	r3, #7
 8014c62:	623b      	str	r3, [r7, #32]
        break;
 8014c64:	e085      	b.n	8014d72 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c6a:	2b04      	cmp	r3, #4
 8014c6c:	d009      	beq.n	8014c82 <dhcp_parse_reply+0x266>
 8014c6e:	4b30      	ldr	r3, [pc, #192]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014c70:	f240 6241 	movw	r2, #1601	; 0x641
 8014c74:	492f      	ldr	r1, [pc, #188]	; (8014d34 <dhcp_parse_reply+0x318>)
 8014c76:	4830      	ldr	r0, [pc, #192]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014c78:	f003 f926 	bl	8017ec8 <iprintf>
 8014c7c:	f06f 0305 	mvn.w	r3, #5
 8014c80:	e18a      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014c82:	2303      	movs	r3, #3
 8014c84:	623b      	str	r3, [r7, #32]
        break;
 8014c86:	e074      	b.n	8014d72 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d009      	beq.n	8014ca4 <dhcp_parse_reply+0x288>
 8014c90:	4b27      	ldr	r3, [pc, #156]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014c92:	f240 624f 	movw	r2, #1615	; 0x64f
 8014c96:	492a      	ldr	r1, [pc, #168]	; (8014d40 <dhcp_parse_reply+0x324>)
 8014c98:	4827      	ldr	r0, [pc, #156]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014c9a:	f003 f915 	bl	8017ec8 <iprintf>
 8014c9e:	f06f 0305 	mvn.w	r3, #5
 8014ca2:	e179      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014ca4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ca6:	2bf0      	cmp	r3, #240	; 0xf0
 8014ca8:	d009      	beq.n	8014cbe <dhcp_parse_reply+0x2a2>
 8014caa:	4b21      	ldr	r3, [pc, #132]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014cac:	f240 6251 	movw	r2, #1617	; 0x651
 8014cb0:	4924      	ldr	r1, [pc, #144]	; (8014d44 <dhcp_parse_reply+0x328>)
 8014cb2:	4821      	ldr	r0, [pc, #132]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014cb4:	f003 f908 	bl	8017ec8 <iprintf>
 8014cb8:	f06f 0305 	mvn.w	r3, #5
 8014cbc:	e16c      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	623b      	str	r3, [r7, #32]
        break;
 8014cc2:	e056      	b.n	8014d72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cc8:	2b01      	cmp	r3, #1
 8014cca:	d009      	beq.n	8014ce0 <dhcp_parse_reply+0x2c4>
 8014ccc:	4b18      	ldr	r3, [pc, #96]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014cce:	f240 6255 	movw	r2, #1621	; 0x655
 8014cd2:	491b      	ldr	r1, [pc, #108]	; (8014d40 <dhcp_parse_reply+0x324>)
 8014cd4:	4818      	ldr	r0, [pc, #96]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014cd6:	f003 f8f7 	bl	8017ec8 <iprintf>
 8014cda:	f06f 0305 	mvn.w	r3, #5
 8014cde:	e15b      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	623b      	str	r3, [r7, #32]
        break;
 8014ce4:	e045      	b.n	8014d72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cea:	2b04      	cmp	r3, #4
 8014cec:	d009      	beq.n	8014d02 <dhcp_parse_reply+0x2e6>
 8014cee:	4b10      	ldr	r3, [pc, #64]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014cf0:	f240 6259 	movw	r2, #1625	; 0x659
 8014cf4:	490f      	ldr	r1, [pc, #60]	; (8014d34 <dhcp_parse_reply+0x318>)
 8014cf6:	4810      	ldr	r0, [pc, #64]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014cf8:	f003 f8e6 	bl	8017ec8 <iprintf>
 8014cfc:	f06f 0305 	mvn.w	r3, #5
 8014d00:	e14a      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014d02:	2302      	movs	r3, #2
 8014d04:	623b      	str	r3, [r7, #32]
        break;
 8014d06:	e034      	b.n	8014d72 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d0c:	2b04      	cmp	r3, #4
 8014d0e:	d009      	beq.n	8014d24 <dhcp_parse_reply+0x308>
 8014d10:	4b07      	ldr	r3, [pc, #28]	; (8014d30 <dhcp_parse_reply+0x314>)
 8014d12:	f240 625d 	movw	r2, #1629	; 0x65d
 8014d16:	4907      	ldr	r1, [pc, #28]	; (8014d34 <dhcp_parse_reply+0x318>)
 8014d18:	4807      	ldr	r0, [pc, #28]	; (8014d38 <dhcp_parse_reply+0x31c>)
 8014d1a:	f003 f8d5 	bl	8017ec8 <iprintf>
 8014d1e:	f06f 0305 	mvn.w	r3, #5
 8014d22:	e139      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014d24:	2304      	movs	r3, #4
 8014d26:	623b      	str	r3, [r7, #32]
        break;
 8014d28:	e023      	b.n	8014d72 <dhcp_parse_reply+0x356>
 8014d2a:	bf00      	nop
 8014d2c:	2000ce20 	.word	0x2000ce20
 8014d30:	0801b1d4 	.word	0x0801b1d4
 8014d34:	0801b45c 	.word	0x0801b45c
 8014d38:	0801b234 	.word	0x0801b234
 8014d3c:	0801b468 	.word	0x0801b468
 8014d40:	0801b47c 	.word	0x0801b47c
 8014d44:	0801b488 	.word	0x0801b488
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d4c:	2b04      	cmp	r3, #4
 8014d4e:	d009      	beq.n	8014d64 <dhcp_parse_reply+0x348>
 8014d50:	4b93      	ldr	r3, [pc, #588]	; (8014fa0 <dhcp_parse_reply+0x584>)
 8014d52:	f240 6261 	movw	r2, #1633	; 0x661
 8014d56:	4993      	ldr	r1, [pc, #588]	; (8014fa4 <dhcp_parse_reply+0x588>)
 8014d58:	4893      	ldr	r0, [pc, #588]	; (8014fa8 <dhcp_parse_reply+0x58c>)
 8014d5a:	f003 f8b5 	bl	8017ec8 <iprintf>
 8014d5e:	f06f 0305 	mvn.w	r3, #5
 8014d62:	e119      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014d64:	2305      	movs	r3, #5
 8014d66:	623b      	str	r3, [r7, #32]
        break;
 8014d68:	e003      	b.n	8014d72 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014d70:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014d72:	7dfb      	ldrb	r3, [r7, #23]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d103      	bne.n	8014d80 <dhcp_parse_reply+0x364>
      offset++;
 8014d78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014d7e:	e0a1      	b.n	8014ec4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014d80:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d86:	4413      	add	r3, r2
 8014d88:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	dd02      	ble.n	8014d96 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014d90:	f06f 0301 	mvn.w	r3, #1
 8014d94:	e100      	b.n	8014f98 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d9e:	4413      	add	r3, r2
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	3302      	adds	r3, #2
 8014da4:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	f000 808a 	beq.w	8014ec4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014db0:	2300      	movs	r3, #0
 8014db2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014db4:	6a3b      	ldr	r3, [r7, #32]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	db02      	blt.n	8014dc0 <dhcp_parse_reply+0x3a4>
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	2b07      	cmp	r3, #7
 8014dbe:	dd06      	ble.n	8014dce <dhcp_parse_reply+0x3b2>
 8014dc0:	4b77      	ldr	r3, [pc, #476]	; (8014fa0 <dhcp_parse_reply+0x584>)
 8014dc2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014dc6:	4979      	ldr	r1, [pc, #484]	; (8014fac <dhcp_parse_reply+0x590>)
 8014dc8:	4877      	ldr	r0, [pc, #476]	; (8014fa8 <dhcp_parse_reply+0x58c>)
 8014dca:	f003 f87d 	bl	8017ec8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014dce:	4a78      	ldr	r2, [pc, #480]	; (8014fb0 <dhcp_parse_reply+0x594>)
 8014dd0:	6a3b      	ldr	r3, [r7, #32]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d174      	bne.n	8014ec4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014dda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014dde:	2b04      	cmp	r3, #4
 8014de0:	bf28      	it	cs
 8014de2:	2304      	movcs	r3, #4
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014de8:	8bfb      	ldrh	r3, [r7, #30]
 8014dea:	8aba      	ldrh	r2, [r7, #20]
 8014dec:	f107 0108 	add.w	r1, r7, #8
 8014df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df2:	f7f8 fc1b 	bl	800d62c <pbuf_copy_partial>
 8014df6:	4603      	mov	r3, r0
 8014df8:	461a      	mov	r2, r3
 8014dfa:	8abb      	ldrh	r3, [r7, #20]
 8014dfc:	4293      	cmp	r3, r2
 8014dfe:	d002      	beq.n	8014e06 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014e00:	f06f 0301 	mvn.w	r3, #1
 8014e04:	e0c8      	b.n	8014f98 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e0a:	2b04      	cmp	r3, #4
 8014e0c:	d933      	bls.n	8014e76 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e12:	f003 0303 	and.w	r3, r3, #3
 8014e16:	b2db      	uxtb	r3, r3
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d009      	beq.n	8014e30 <dhcp_parse_reply+0x414>
 8014e1c:	4b60      	ldr	r3, [pc, #384]	; (8014fa0 <dhcp_parse_reply+0x584>)
 8014e1e:	f240 6281 	movw	r2, #1665	; 0x681
 8014e22:	4964      	ldr	r1, [pc, #400]	; (8014fb4 <dhcp_parse_reply+0x598>)
 8014e24:	4860      	ldr	r0, [pc, #384]	; (8014fa8 <dhcp_parse_reply+0x58c>)
 8014e26:	f003 f84f 	bl	8017ec8 <iprintf>
 8014e2a:	f06f 0305 	mvn.w	r3, #5
 8014e2e:	e0b3      	b.n	8014f98 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014e30:	4a5f      	ldr	r2, [pc, #380]	; (8014fb0 <dhcp_parse_reply+0x594>)
 8014e32:	6a3b      	ldr	r3, [r7, #32]
 8014e34:	4413      	add	r3, r2
 8014e36:	2201      	movs	r2, #1
 8014e38:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7f6 fe4c 	bl	800bada <lwip_htonl>
 8014e42:	4602      	mov	r2, r0
 8014e44:	495c      	ldr	r1, [pc, #368]	; (8014fb8 <dhcp_parse_reply+0x59c>)
 8014e46:	6a3b      	ldr	r3, [r7, #32]
 8014e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e50:	3b04      	subs	r3, #4
 8014e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014e56:	8bfb      	ldrh	r3, [r7, #30]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014e5c:	8a7a      	ldrh	r2, [r7, #18]
 8014e5e:	8bfb      	ldrh	r3, [r7, #30]
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d202      	bcs.n	8014e6a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014e64:	f06f 0301 	mvn.w	r3, #1
 8014e68:	e096      	b.n	8014f98 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014e6a:	8a7b      	ldrh	r3, [r7, #18]
 8014e6c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014e6e:	6a3b      	ldr	r3, [r7, #32]
 8014e70:	3301      	adds	r3, #1
 8014e72:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014e74:	e79e      	b.n	8014db4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e7a:	2b04      	cmp	r3, #4
 8014e7c:	d106      	bne.n	8014e8c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7f6 fe2a 	bl	800bada <lwip_htonl>
 8014e86:	4603      	mov	r3, r0
 8014e88:	60bb      	str	r3, [r7, #8]
 8014e8a:	e011      	b.n	8014eb0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d009      	beq.n	8014ea8 <dhcp_parse_reply+0x48c>
 8014e94:	4b42      	ldr	r3, [pc, #264]	; (8014fa0 <dhcp_parse_reply+0x584>)
 8014e96:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014e9a:	4948      	ldr	r1, [pc, #288]	; (8014fbc <dhcp_parse_reply+0x5a0>)
 8014e9c:	4842      	ldr	r0, [pc, #264]	; (8014fa8 <dhcp_parse_reply+0x58c>)
 8014e9e:	f003 f813 	bl	8017ec8 <iprintf>
 8014ea2:	f06f 0305 	mvn.w	r3, #5
 8014ea6:	e077      	b.n	8014f98 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014ea8:	f107 0308 	add.w	r3, r7, #8
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014eb0:	4a3f      	ldr	r2, [pc, #252]	; (8014fb0 <dhcp_parse_reply+0x594>)
 8014eb2:	6a3b      	ldr	r3, [r7, #32]
 8014eb4:	4413      	add	r3, r2
 8014eb6:	2201      	movs	r2, #1
 8014eb8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014eba:	68ba      	ldr	r2, [r7, #8]
 8014ebc:	493e      	ldr	r1, [pc, #248]	; (8014fb8 <dhcp_parse_reply+0x59c>)
 8014ebe:	6a3b      	ldr	r3, [r7, #32]
 8014ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec6:	895b      	ldrh	r3, [r3, #10]
 8014ec8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d324      	bcc.n	8014f18 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed0:	895b      	ldrh	r3, [r3, #10]
 8014ed2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ed4:	1ad3      	subs	r3, r2, r3
 8014ed6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eda:	895b      	ldrh	r3, [r3, #10]
 8014edc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014ede:	1ad3      	subs	r3, r2, r3
 8014ee0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014ee2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ee4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d213      	bcs.n	8014f12 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d109      	bne.n	8014f0a <dhcp_parse_reply+0x4ee>
 8014ef6:	4b2a      	ldr	r3, [pc, #168]	; (8014fa0 <dhcp_parse_reply+0x584>)
 8014ef8:	f240 629d 	movw	r2, #1693	; 0x69d
 8014efc:	4930      	ldr	r1, [pc, #192]	; (8014fc0 <dhcp_parse_reply+0x5a4>)
 8014efe:	482a      	ldr	r0, [pc, #168]	; (8014fa8 <dhcp_parse_reply+0x58c>)
 8014f00:	f002 ffe2 	bl	8017ec8 <iprintf>
 8014f04:	f06f 0305 	mvn.w	r3, #5
 8014f08:	e046      	b.n	8014f98 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f10:	e002      	b.n	8014f18 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014f12:	f06f 0301 	mvn.w	r3, #1
 8014f16:	e03f      	b.n	8014f98 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d00a      	beq.n	8014f34 <dhcp_parse_reply+0x518>
 8014f1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014f20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d206      	bcs.n	8014f34 <dhcp_parse_reply+0x518>
 8014f26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014f2a:	4413      	add	r3, r2
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	2bff      	cmp	r3, #255	; 0xff
 8014f30:	f47f adb7 	bne.w	8014aa2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014f34:	4b1e      	ldr	r3, [pc, #120]	; (8014fb0 <dhcp_parse_reply+0x594>)
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d018      	beq.n	8014f6e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014f3c:	4b1e      	ldr	r3, [pc, #120]	; (8014fb8 <dhcp_parse_reply+0x59c>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014f42:	4b1b      	ldr	r3, [pc, #108]	; (8014fb0 <dhcp_parse_reply+0x594>)
 8014f44:	2200      	movs	r2, #0
 8014f46:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d102      	bne.n	8014f54 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014f4e:	2301      	movs	r3, #1
 8014f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f52:	e00c      	b.n	8014f6e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2b02      	cmp	r3, #2
 8014f58:	d102      	bne.n	8014f60 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f5e:	e006      	b.n	8014f6e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	2b03      	cmp	r3, #3
 8014f64:	d103      	bne.n	8014f6e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014f66:	2301      	movs	r3, #1
 8014f68:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d006      	beq.n	8014f82 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014f78:	236c      	movs	r3, #108	; 0x6c
 8014f7a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014f7c:	23ec      	movs	r3, #236	; 0xec
 8014f7e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014f80:	e569      	b.n	8014a56 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d006      	beq.n	8014f96 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014f8c:	232c      	movs	r3, #44	; 0x2c
 8014f8e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014f90:	236c      	movs	r3, #108	; 0x6c
 8014f92:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014f94:	e55f      	b.n	8014a56 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014f96:	2300      	movs	r3, #0
}
 8014f98:	4618      	mov	r0, r3
 8014f9a:	3740      	adds	r7, #64	; 0x40
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	0801b1d4 	.word	0x0801b1d4
 8014fa4:	0801b45c 	.word	0x0801b45c
 8014fa8:	0801b234 	.word	0x0801b234
 8014fac:	0801b4a0 	.word	0x0801b4a0
 8014fb0:	2000ce20 	.word	0x2000ce20
 8014fb4:	0801b4b4 	.word	0x0801b4b4
 8014fb8:	2000ce28 	.word	0x2000ce28
 8014fbc:	0801b4cc 	.word	0x0801b4cc
 8014fc0:	0801b4e0 	.word	0x0801b4e0

08014fc4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b08a      	sub	sp, #40	; 0x28
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]
 8014fd0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014fd2:	4b60      	ldr	r3, [pc, #384]	; (8015154 <dhcp_recv+0x190>)
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
 8014fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fdc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	f000 809d 	beq.w	8015126 <dhcp_recv+0x162>
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	791b      	ldrb	r3, [r3, #4]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f000 8098 	beq.w	8015126 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	895b      	ldrh	r3, [r3, #10]
 8014ffa:	2b2b      	cmp	r3, #43	; 0x2b
 8014ffc:	f240 8095 	bls.w	801512a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	2b02      	cmp	r3, #2
 8015006:	f040 8092 	bne.w	801512e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801500a:	2300      	movs	r3, #0
 801500c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015010:	e012      	b.n	8015038 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015016:	6a3a      	ldr	r2, [r7, #32]
 8015018:	4413      	add	r3, r2
 801501a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801501e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015022:	69b9      	ldr	r1, [r7, #24]
 8015024:	440b      	add	r3, r1
 8015026:	7f1b      	ldrb	r3, [r3, #28]
 8015028:	429a      	cmp	r2, r3
 801502a:	f040 8082 	bne.w	8015132 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801502e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015032:	3301      	adds	r3, #1
 8015034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015038:	6a3b      	ldr	r3, [r7, #32]
 801503a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801503e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015042:	429a      	cmp	r2, r3
 8015044:	d203      	bcs.n	801504e <dhcp_recv+0x8a>
 8015046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801504a:	2b05      	cmp	r3, #5
 801504c:	d9e1      	bls.n	8015012 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	4618      	mov	r0, r3
 8015054:	f7f6 fd41 	bl	800bada <lwip_htonl>
 8015058:	4602      	mov	r2, r0
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	429a      	cmp	r2, r3
 8015060:	d169      	bne.n	8015136 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015062:	69f9      	ldr	r1, [r7, #28]
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7ff fcd9 	bl	8014a1c <dhcp_parse_reply>
 801506a:	4603      	mov	r3, r0
 801506c:	2b00      	cmp	r3, #0
 801506e:	d164      	bne.n	801513a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015070:	4b39      	ldr	r3, [pc, #228]	; (8015158 <dhcp_recv+0x194>)
 8015072:	785b      	ldrb	r3, [r3, #1]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d062      	beq.n	801513e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801507e:	4b37      	ldr	r3, [pc, #220]	; (801515c <dhcp_recv+0x198>)
 8015080:	685b      	ldr	r3, [r3, #4]
 8015082:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015084:	7cfb      	ldrb	r3, [r7, #19]
 8015086:	2b05      	cmp	r3, #5
 8015088:	d12a      	bne.n	80150e0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801508a:	69fb      	ldr	r3, [r7, #28]
 801508c:	795b      	ldrb	r3, [r3, #5]
 801508e:	2b01      	cmp	r3, #1
 8015090:	d112      	bne.n	80150b8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015092:	6979      	ldr	r1, [r7, #20]
 8015094:	6a38      	ldr	r0, [r7, #32]
 8015096:	f7fe fe17 	bl	8013cc8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150a0:	f003 0308 	and.w	r3, r3, #8
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d003      	beq.n	80150b0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80150a8:	6a38      	ldr	r0, [r7, #32]
 80150aa:	f7fe fb87 	bl	80137bc <dhcp_check>
 80150ae:	e049      	b.n	8015144 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80150b0:	6a38      	ldr	r0, [r7, #32]
 80150b2:	f7ff f867 	bl	8014184 <dhcp_bind>
 80150b6:	e045      	b.n	8015144 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	795b      	ldrb	r3, [r3, #5]
 80150bc:	2b03      	cmp	r3, #3
 80150be:	d007      	beq.n	80150d0 <dhcp_recv+0x10c>
 80150c0:	69fb      	ldr	r3, [r7, #28]
 80150c2:	795b      	ldrb	r3, [r3, #5]
 80150c4:	2b04      	cmp	r3, #4
 80150c6:	d003      	beq.n	80150d0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80150c8:	69fb      	ldr	r3, [r7, #28]
 80150ca:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80150cc:	2b05      	cmp	r3, #5
 80150ce:	d139      	bne.n	8015144 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80150d0:	6979      	ldr	r1, [r7, #20]
 80150d2:	6a38      	ldr	r0, [r7, #32]
 80150d4:	f7fe fdf8 	bl	8013cc8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80150d8:	6a38      	ldr	r0, [r7, #32]
 80150da:	f7ff f853 	bl	8014184 <dhcp_bind>
 80150de:	e031      	b.n	8015144 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80150e0:	7cfb      	ldrb	r3, [r7, #19]
 80150e2:	2b06      	cmp	r3, #6
 80150e4:	d113      	bne.n	801510e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80150ea:	2b03      	cmp	r3, #3
 80150ec:	d00b      	beq.n	8015106 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150ee:	69fb      	ldr	r3, [r7, #28]
 80150f0:	795b      	ldrb	r3, [r3, #5]
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d007      	beq.n	8015106 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80150f6:	69fb      	ldr	r3, [r7, #28]
 80150f8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80150fa:	2b04      	cmp	r3, #4
 80150fc:	d003      	beq.n	8015106 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80150fe:	69fb      	ldr	r3, [r7, #28]
 8015100:	795b      	ldrb	r3, [r3, #5]
 8015102:	2b05      	cmp	r3, #5
 8015104:	d103      	bne.n	801510e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015106:	6a38      	ldr	r0, [r7, #32]
 8015108:	f7fe fb3e 	bl	8013788 <dhcp_handle_nak>
 801510c:	e01a      	b.n	8015144 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801510e:	7cfb      	ldrb	r3, [r7, #19]
 8015110:	2b02      	cmp	r3, #2
 8015112:	d116      	bne.n	8015142 <dhcp_recv+0x17e>
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	795b      	ldrb	r3, [r3, #5]
 8015118:	2b06      	cmp	r3, #6
 801511a:	d112      	bne.n	8015142 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801511c:	6979      	ldr	r1, [r7, #20]
 801511e:	6a38      	ldr	r0, [r7, #32]
 8015120:	f7fe fb80 	bl	8013824 <dhcp_handle_offer>
 8015124:	e00e      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015126:	bf00      	nop
 8015128:	e00c      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801512a:	bf00      	nop
 801512c:	e00a      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801512e:	bf00      	nop
 8015130:	e008      	b.n	8015144 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015132:	bf00      	nop
 8015134:	e006      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015136:	bf00      	nop
 8015138:	e004      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801513a:	bf00      	nop
 801513c:	e002      	b.n	8015144 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801513e:	bf00      	nop
 8015140:	e000      	b.n	8015144 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015142:	bf00      	nop
  pbuf_free(p);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7f8 f86b 	bl	800d220 <pbuf_free>
}
 801514a:	bf00      	nop
 801514c:	3728      	adds	r7, #40	; 0x28
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
 8015152:	bf00      	nop
 8015154:	200096d0 	.word	0x200096d0
 8015158:	2000ce20 	.word	0x2000ce20
 801515c:	2000ce28 	.word	0x2000ce28

08015160 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b088      	sub	sp, #32
 8015164:	af00      	add	r7, sp, #0
 8015166:	60f8      	str	r0, [r7, #12]
 8015168:	60b9      	str	r1, [r7, #8]
 801516a:	603b      	str	r3, [r7, #0]
 801516c:	4613      	mov	r3, r2
 801516e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d108      	bne.n	8015188 <dhcp_create_msg+0x28>
 8015176:	4b5f      	ldr	r3, [pc, #380]	; (80152f4 <dhcp_create_msg+0x194>)
 8015178:	f240 7269 	movw	r2, #1897	; 0x769
 801517c:	495e      	ldr	r1, [pc, #376]	; (80152f8 <dhcp_create_msg+0x198>)
 801517e:	485f      	ldr	r0, [pc, #380]	; (80152fc <dhcp_create_msg+0x19c>)
 8015180:	f002 fea2 	bl	8017ec8 <iprintf>
 8015184:	2300      	movs	r3, #0
 8015186:	e0b1      	b.n	80152ec <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d108      	bne.n	80151a0 <dhcp_create_msg+0x40>
 801518e:	4b59      	ldr	r3, [pc, #356]	; (80152f4 <dhcp_create_msg+0x194>)
 8015190:	f240 726a 	movw	r2, #1898	; 0x76a
 8015194:	495a      	ldr	r1, [pc, #360]	; (8015300 <dhcp_create_msg+0x1a0>)
 8015196:	4859      	ldr	r0, [pc, #356]	; (80152fc <dhcp_create_msg+0x19c>)
 8015198:	f002 fe96 	bl	8017ec8 <iprintf>
 801519c:	2300      	movs	r3, #0
 801519e:	e0a5      	b.n	80152ec <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80151a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80151a8:	2036      	movs	r0, #54	; 0x36
 80151aa:	f7f7 fd55 	bl	800cc58 <pbuf_alloc>
 80151ae:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80151b0:	69bb      	ldr	r3, [r7, #24]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d101      	bne.n	80151ba <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	e098      	b.n	80152ec <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	895b      	ldrh	r3, [r3, #10]
 80151be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80151c2:	d206      	bcs.n	80151d2 <dhcp_create_msg+0x72>
 80151c4:	4b4b      	ldr	r3, [pc, #300]	; (80152f4 <dhcp_create_msg+0x194>)
 80151c6:	f240 7271 	movw	r2, #1905	; 0x771
 80151ca:	494e      	ldr	r1, [pc, #312]	; (8015304 <dhcp_create_msg+0x1a4>)
 80151cc:	484b      	ldr	r0, [pc, #300]	; (80152fc <dhcp_create_msg+0x19c>)
 80151ce:	f002 fe7b 	bl	8017ec8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80151d2:	79fb      	ldrb	r3, [r7, #7]
 80151d4:	2b03      	cmp	r3, #3
 80151d6:	d103      	bne.n	80151e0 <dhcp_create_msg+0x80>
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	795b      	ldrb	r3, [r3, #5]
 80151dc:	2b03      	cmp	r3, #3
 80151de:	d10d      	bne.n	80151fc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	799b      	ldrb	r3, [r3, #6]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d105      	bne.n	80151f4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80151e8:	f002 fe86 	bl	8017ef8 <rand>
 80151ec:	4603      	mov	r3, r0
 80151ee:	461a      	mov	r2, r3
 80151f0:	4b45      	ldr	r3, [pc, #276]	; (8015308 <dhcp_create_msg+0x1a8>)
 80151f2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80151f4:	4b44      	ldr	r3, [pc, #272]	; (8015308 <dhcp_create_msg+0x1a8>)
 80151f6:	681a      	ldr	r2, [r3, #0]
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80151fc:	69bb      	ldr	r3, [r7, #24]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015202:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015206:	2100      	movs	r1, #0
 8015208:	6978      	ldr	r0, [r7, #20]
 801520a:	f002 fdfa 	bl	8017e02 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	2201      	movs	r2, #1
 8015212:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	2201      	movs	r2, #1
 8015218:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	4618      	mov	r0, r3
 801522a:	f7f6 fc56 	bl	800bada <lwip_htonl>
 801522e:	4602      	mov	r2, r0
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015234:	79fb      	ldrb	r3, [r7, #7]
 8015236:	2b08      	cmp	r3, #8
 8015238:	d010      	beq.n	801525c <dhcp_create_msg+0xfc>
 801523a:	79fb      	ldrb	r3, [r7, #7]
 801523c:	2b04      	cmp	r3, #4
 801523e:	d00d      	beq.n	801525c <dhcp_create_msg+0xfc>
 8015240:	79fb      	ldrb	r3, [r7, #7]
 8015242:	2b07      	cmp	r3, #7
 8015244:	d00a      	beq.n	801525c <dhcp_create_msg+0xfc>
 8015246:	79fb      	ldrb	r3, [r7, #7]
 8015248:	2b03      	cmp	r3, #3
 801524a:	d10c      	bne.n	8015266 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015250:	2b05      	cmp	r3, #5
 8015252:	d003      	beq.n	801525c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	795b      	ldrb	r3, [r3, #5]
 8015258:	2b04      	cmp	r3, #4
 801525a:	d104      	bne.n	8015266 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	3304      	adds	r3, #4
 8015260:	681a      	ldr	r2, [r3, #0]
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015266:	2300      	movs	r3, #0
 8015268:	83fb      	strh	r3, [r7, #30]
 801526a:	e00c      	b.n	8015286 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801526c:	8bfa      	ldrh	r2, [r7, #30]
 801526e:	8bfb      	ldrh	r3, [r7, #30]
 8015270:	68f9      	ldr	r1, [r7, #12]
 8015272:	440a      	add	r2, r1
 8015274:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015278:	697a      	ldr	r2, [r7, #20]
 801527a:	4413      	add	r3, r2
 801527c:	460a      	mov	r2, r1
 801527e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015280:	8bfb      	ldrh	r3, [r7, #30]
 8015282:	3301      	adds	r3, #1
 8015284:	83fb      	strh	r3, [r7, #30]
 8015286:	8bfb      	ldrh	r3, [r7, #30]
 8015288:	2b05      	cmp	r3, #5
 801528a:	d9ef      	bls.n	801526c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	2200      	movs	r2, #0
 8015290:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015294:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015298:	2200      	movs	r2, #0
 801529a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801529e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80152a2:	2200      	movs	r2, #0
 80152a4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80152a8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80152ac:	2200      	movs	r2, #0
 80152ae:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80152b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152bc:	2301      	movs	r3, #1
 80152be:	2235      	movs	r2, #53	; 0x35
 80152c0:	2000      	movs	r0, #0
 80152c2:	f7ff fadb 	bl	801487c <dhcp_option>
 80152c6:	4603      	mov	r3, r0
 80152c8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152d0:	79fa      	ldrb	r2, [r7, #7]
 80152d2:	8a7b      	ldrh	r3, [r7, #18]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7ff fb05 	bl	80148e4 <dhcp_option_byte>
 80152da:	4603      	mov	r3, r0
 80152dc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d002      	beq.n	80152ea <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	8a7a      	ldrh	r2, [r7, #18]
 80152e8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80152ea:	69bb      	ldr	r3, [r7, #24]
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3720      	adds	r7, #32
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}
 80152f4:	0801b1d4 	.word	0x0801b1d4
 80152f8:	0801b4f4 	.word	0x0801b4f4
 80152fc:	0801b234 	.word	0x0801b234
 8015300:	0801b514 	.word	0x0801b514
 8015304:	0801b534 	.word	0x0801b534
 8015308:	20004b18 	.word	0x20004b18

0801530c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b084      	sub	sp, #16
 8015310:	af00      	add	r7, sp, #0
 8015312:	4603      	mov	r3, r0
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	607a      	str	r2, [r7, #4]
 8015318:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801531a:	89fb      	ldrh	r3, [r7, #14]
 801531c:	1c5a      	adds	r2, r3, #1
 801531e:	81fa      	strh	r2, [r7, #14]
 8015320:	461a      	mov	r2, r3
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	4413      	add	r3, r2
 8015326:	22ff      	movs	r2, #255	; 0xff
 8015328:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801532a:	e007      	b.n	801533c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801532c:	89fb      	ldrh	r3, [r7, #14]
 801532e:	1c5a      	adds	r2, r3, #1
 8015330:	81fa      	strh	r2, [r7, #14]
 8015332:	461a      	mov	r2, r3
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	4413      	add	r3, r2
 8015338:	2200      	movs	r2, #0
 801533a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801533c:	89fb      	ldrh	r3, [r7, #14]
 801533e:	2b43      	cmp	r3, #67	; 0x43
 8015340:	d904      	bls.n	801534c <dhcp_option_trailer+0x40>
 8015342:	89fb      	ldrh	r3, [r7, #14]
 8015344:	f003 0303 	and.w	r3, r3, #3
 8015348:	2b00      	cmp	r3, #0
 801534a:	d002      	beq.n	8015352 <dhcp_option_trailer+0x46>
 801534c:	89fb      	ldrh	r3, [r7, #14]
 801534e:	2b43      	cmp	r3, #67	; 0x43
 8015350:	d9ec      	bls.n	801532c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015352:	89fb      	ldrh	r3, [r7, #14]
 8015354:	33f0      	adds	r3, #240	; 0xf0
 8015356:	b29b      	uxth	r3, r3
 8015358:	4619      	mov	r1, r3
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7f7 fdda 	bl	800cf14 <pbuf_realloc>
}
 8015360:	bf00      	nop
 8015362:	3710      	adds	r7, #16
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015368:	b480      	push	{r7}
 801536a:	b085      	sub	sp, #20
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d017      	beq.n	80153a6 <dhcp_supplied_address+0x3e>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801537a:	2b00      	cmp	r3, #0
 801537c:	d013      	beq.n	80153a6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015382:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	795b      	ldrb	r3, [r3, #5]
 8015388:	2b0a      	cmp	r3, #10
 801538a:	d007      	beq.n	801539c <dhcp_supplied_address+0x34>
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	795b      	ldrb	r3, [r3, #5]
 8015390:	2b05      	cmp	r3, #5
 8015392:	d003      	beq.n	801539c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015398:	2b04      	cmp	r3, #4
 801539a:	d101      	bne.n	80153a0 <dhcp_supplied_address+0x38>
 801539c:	2301      	movs	r3, #1
 801539e:	e000      	b.n	80153a2 <dhcp_supplied_address+0x3a>
 80153a0:	2300      	movs	r3, #0
 80153a2:	b2db      	uxtb	r3, r3
 80153a4:	e000      	b.n	80153a8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80153a6:	2300      	movs	r3, #0
}
 80153a8:	4618      	mov	r0, r3
 80153aa:	3714      	adds	r7, #20
 80153ac:	46bd      	mov	sp, r7
 80153ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b2:	4770      	bx	lr

080153b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b082      	sub	sp, #8
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80153bc:	4915      	ldr	r1, [pc, #84]	; (8015414 <etharp_free_entry+0x60>)
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	4613      	mov	r3, r2
 80153c2:	005b      	lsls	r3, r3, #1
 80153c4:	4413      	add	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	440b      	add	r3, r1
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d013      	beq.n	80153f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80153d0:	4910      	ldr	r1, [pc, #64]	; (8015414 <etharp_free_entry+0x60>)
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4413      	add	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	440b      	add	r3, r1
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7f7 ff1d 	bl	800d220 <pbuf_free>
    arp_table[i].q = NULL;
 80153e6:	490b      	ldr	r1, [pc, #44]	; (8015414 <etharp_free_entry+0x60>)
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	4613      	mov	r3, r2
 80153ec:	005b      	lsls	r3, r3, #1
 80153ee:	4413      	add	r3, r2
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	440b      	add	r3, r1
 80153f4:	2200      	movs	r2, #0
 80153f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80153f8:	4906      	ldr	r1, [pc, #24]	; (8015414 <etharp_free_entry+0x60>)
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	4613      	mov	r3, r2
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	4413      	add	r3, r2
 8015402:	00db      	lsls	r3, r3, #3
 8015404:	440b      	add	r3, r1
 8015406:	3314      	adds	r3, #20
 8015408:	2200      	movs	r2, #0
 801540a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801540c:	bf00      	nop
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20004b1c 	.word	0x20004b1c

08015418 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801541e:	2300      	movs	r3, #0
 8015420:	607b      	str	r3, [r7, #4]
 8015422:	e096      	b.n	8015552 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015424:	494f      	ldr	r1, [pc, #316]	; (8015564 <etharp_tmr+0x14c>)
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	440b      	add	r3, r1
 8015432:	3314      	adds	r3, #20
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015438:	78fb      	ldrb	r3, [r7, #3]
 801543a:	2b00      	cmp	r3, #0
 801543c:	f000 8086 	beq.w	801554c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015440:	4948      	ldr	r1, [pc, #288]	; (8015564 <etharp_tmr+0x14c>)
 8015442:	687a      	ldr	r2, [r7, #4]
 8015444:	4613      	mov	r3, r2
 8015446:	005b      	lsls	r3, r3, #1
 8015448:	4413      	add	r3, r2
 801544a:	00db      	lsls	r3, r3, #3
 801544c:	440b      	add	r3, r1
 801544e:	3312      	adds	r3, #18
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	3301      	adds	r3, #1
 8015454:	b298      	uxth	r0, r3
 8015456:	4943      	ldr	r1, [pc, #268]	; (8015564 <etharp_tmr+0x14c>)
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	4613      	mov	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	00db      	lsls	r3, r3, #3
 8015462:	440b      	add	r3, r1
 8015464:	3312      	adds	r3, #18
 8015466:	4602      	mov	r2, r0
 8015468:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801546a:	493e      	ldr	r1, [pc, #248]	; (8015564 <etharp_tmr+0x14c>)
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	4613      	mov	r3, r2
 8015470:	005b      	lsls	r3, r3, #1
 8015472:	4413      	add	r3, r2
 8015474:	00db      	lsls	r3, r3, #3
 8015476:	440b      	add	r3, r1
 8015478:	3312      	adds	r3, #18
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015480:	d215      	bcs.n	80154ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015482:	4938      	ldr	r1, [pc, #224]	; (8015564 <etharp_tmr+0x14c>)
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	4613      	mov	r3, r2
 8015488:	005b      	lsls	r3, r3, #1
 801548a:	4413      	add	r3, r2
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	440b      	add	r3, r1
 8015490:	3314      	adds	r3, #20
 8015492:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015494:	2b01      	cmp	r3, #1
 8015496:	d10e      	bne.n	80154b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015498:	4932      	ldr	r1, [pc, #200]	; (8015564 <etharp_tmr+0x14c>)
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	4613      	mov	r3, r2
 801549e:	005b      	lsls	r3, r3, #1
 80154a0:	4413      	add	r3, r2
 80154a2:	00db      	lsls	r3, r3, #3
 80154a4:	440b      	add	r3, r1
 80154a6:	3312      	adds	r3, #18
 80154a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80154aa:	2b04      	cmp	r3, #4
 80154ac:	d903      	bls.n	80154b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80154ae:	6878      	ldr	r0, [r7, #4]
 80154b0:	f7ff ff80 	bl	80153b4 <etharp_free_entry>
 80154b4:	e04a      	b.n	801554c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80154b6:	492b      	ldr	r1, [pc, #172]	; (8015564 <etharp_tmr+0x14c>)
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	4613      	mov	r3, r2
 80154bc:	005b      	lsls	r3, r3, #1
 80154be:	4413      	add	r3, r2
 80154c0:	00db      	lsls	r3, r3, #3
 80154c2:	440b      	add	r3, r1
 80154c4:	3314      	adds	r3, #20
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	2b03      	cmp	r3, #3
 80154ca:	d10a      	bne.n	80154e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80154cc:	4925      	ldr	r1, [pc, #148]	; (8015564 <etharp_tmr+0x14c>)
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	4613      	mov	r3, r2
 80154d2:	005b      	lsls	r3, r3, #1
 80154d4:	4413      	add	r3, r2
 80154d6:	00db      	lsls	r3, r3, #3
 80154d8:	440b      	add	r3, r1
 80154da:	3314      	adds	r3, #20
 80154dc:	2204      	movs	r2, #4
 80154de:	701a      	strb	r2, [r3, #0]
 80154e0:	e034      	b.n	801554c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80154e2:	4920      	ldr	r1, [pc, #128]	; (8015564 <etharp_tmr+0x14c>)
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	4613      	mov	r3, r2
 80154e8:	005b      	lsls	r3, r3, #1
 80154ea:	4413      	add	r3, r2
 80154ec:	00db      	lsls	r3, r3, #3
 80154ee:	440b      	add	r3, r1
 80154f0:	3314      	adds	r3, #20
 80154f2:	781b      	ldrb	r3, [r3, #0]
 80154f4:	2b04      	cmp	r3, #4
 80154f6:	d10a      	bne.n	801550e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80154f8:	491a      	ldr	r1, [pc, #104]	; (8015564 <etharp_tmr+0x14c>)
 80154fa:	687a      	ldr	r2, [r7, #4]
 80154fc:	4613      	mov	r3, r2
 80154fe:	005b      	lsls	r3, r3, #1
 8015500:	4413      	add	r3, r2
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	440b      	add	r3, r1
 8015506:	3314      	adds	r3, #20
 8015508:	2202      	movs	r2, #2
 801550a:	701a      	strb	r2, [r3, #0]
 801550c:	e01e      	b.n	801554c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801550e:	4915      	ldr	r1, [pc, #84]	; (8015564 <etharp_tmr+0x14c>)
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	4613      	mov	r3, r2
 8015514:	005b      	lsls	r3, r3, #1
 8015516:	4413      	add	r3, r2
 8015518:	00db      	lsls	r3, r3, #3
 801551a:	440b      	add	r3, r1
 801551c:	3314      	adds	r3, #20
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	2b01      	cmp	r3, #1
 8015522:	d113      	bne.n	801554c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015524:	490f      	ldr	r1, [pc, #60]	; (8015564 <etharp_tmr+0x14c>)
 8015526:	687a      	ldr	r2, [r7, #4]
 8015528:	4613      	mov	r3, r2
 801552a:	005b      	lsls	r3, r3, #1
 801552c:	4413      	add	r3, r2
 801552e:	00db      	lsls	r3, r3, #3
 8015530:	440b      	add	r3, r1
 8015532:	3308      	adds	r3, #8
 8015534:	6818      	ldr	r0, [r3, #0]
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	4613      	mov	r3, r2
 801553a:	005b      	lsls	r3, r3, #1
 801553c:	4413      	add	r3, r2
 801553e:	00db      	lsls	r3, r3, #3
 8015540:	4a08      	ldr	r2, [pc, #32]	; (8015564 <etharp_tmr+0x14c>)
 8015542:	4413      	add	r3, r2
 8015544:	3304      	adds	r3, #4
 8015546:	4619      	mov	r1, r3
 8015548:	f000 fe72 	bl	8016230 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	3301      	adds	r3, #1
 8015550:	607b      	str	r3, [r7, #4]
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	2b09      	cmp	r3, #9
 8015556:	f77f af65 	ble.w	8015424 <etharp_tmr+0xc>
      }
    }
  }
}
 801555a:	bf00      	nop
 801555c:	bf00      	nop
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	20004b1c 	.word	0x20004b1c

08015568 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b08a      	sub	sp, #40	; 0x28
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	460b      	mov	r3, r1
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015576:	230a      	movs	r3, #10
 8015578:	84fb      	strh	r3, [r7, #38]	; 0x26
 801557a:	230a      	movs	r3, #10
 801557c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801557e:	230a      	movs	r3, #10
 8015580:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015582:	2300      	movs	r3, #0
 8015584:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015586:	230a      	movs	r3, #10
 8015588:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801558a:	2300      	movs	r3, #0
 801558c:	83bb      	strh	r3, [r7, #28]
 801558e:	2300      	movs	r3, #0
 8015590:	837b      	strh	r3, [r7, #26]
 8015592:	2300      	movs	r3, #0
 8015594:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015596:	2300      	movs	r3, #0
 8015598:	843b      	strh	r3, [r7, #32]
 801559a:	e0ae      	b.n	80156fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801559c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155a0:	49a6      	ldr	r1, [pc, #664]	; (801583c <etharp_find_entry+0x2d4>)
 80155a2:	4613      	mov	r3, r2
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	4413      	add	r3, r2
 80155a8:	00db      	lsls	r3, r3, #3
 80155aa:	440b      	add	r3, r1
 80155ac:	3314      	adds	r3, #20
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80155b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80155b6:	2b0a      	cmp	r3, #10
 80155b8:	d105      	bne.n	80155c6 <etharp_find_entry+0x5e>
 80155ba:	7dfb      	ldrb	r3, [r7, #23]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d102      	bne.n	80155c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80155c0:	8c3b      	ldrh	r3, [r7, #32]
 80155c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80155c4:	e095      	b.n	80156f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80155c6:	7dfb      	ldrb	r3, [r7, #23]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	f000 8092 	beq.w	80156f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	2b01      	cmp	r3, #1
 80155d2:	d009      	beq.n	80155e8 <etharp_find_entry+0x80>
 80155d4:	7dfb      	ldrb	r3, [r7, #23]
 80155d6:	2b01      	cmp	r3, #1
 80155d8:	d806      	bhi.n	80155e8 <etharp_find_entry+0x80>
 80155da:	4b99      	ldr	r3, [pc, #612]	; (8015840 <etharp_find_entry+0x2d8>)
 80155dc:	f240 1223 	movw	r2, #291	; 0x123
 80155e0:	4998      	ldr	r1, [pc, #608]	; (8015844 <etharp_find_entry+0x2dc>)
 80155e2:	4899      	ldr	r0, [pc, #612]	; (8015848 <etharp_find_entry+0x2e0>)
 80155e4:	f002 fc70 	bl	8017ec8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d020      	beq.n	8015630 <etharp_find_entry+0xc8>
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	6819      	ldr	r1, [r3, #0]
 80155f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155f6:	4891      	ldr	r0, [pc, #580]	; (801583c <etharp_find_entry+0x2d4>)
 80155f8:	4613      	mov	r3, r2
 80155fa:	005b      	lsls	r3, r3, #1
 80155fc:	4413      	add	r3, r2
 80155fe:	00db      	lsls	r3, r3, #3
 8015600:	4403      	add	r3, r0
 8015602:	3304      	adds	r3, #4
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	4299      	cmp	r1, r3
 8015608:	d112      	bne.n	8015630 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00c      	beq.n	801562a <etharp_find_entry+0xc2>
 8015610:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015614:	4989      	ldr	r1, [pc, #548]	; (801583c <etharp_find_entry+0x2d4>)
 8015616:	4613      	mov	r3, r2
 8015618:	005b      	lsls	r3, r3, #1
 801561a:	4413      	add	r3, r2
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	440b      	add	r3, r1
 8015620:	3308      	adds	r3, #8
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	687a      	ldr	r2, [r7, #4]
 8015626:	429a      	cmp	r2, r3
 8015628:	d102      	bne.n	8015630 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801562a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801562e:	e100      	b.n	8015832 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015630:	7dfb      	ldrb	r3, [r7, #23]
 8015632:	2b01      	cmp	r3, #1
 8015634:	d140      	bne.n	80156b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801563a:	4980      	ldr	r1, [pc, #512]	; (801583c <etharp_find_entry+0x2d4>)
 801563c:	4613      	mov	r3, r2
 801563e:	005b      	lsls	r3, r3, #1
 8015640:	4413      	add	r3, r2
 8015642:	00db      	lsls	r3, r3, #3
 8015644:	440b      	add	r3, r1
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d01a      	beq.n	8015682 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801564c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015650:	497a      	ldr	r1, [pc, #488]	; (801583c <etharp_find_entry+0x2d4>)
 8015652:	4613      	mov	r3, r2
 8015654:	005b      	lsls	r3, r3, #1
 8015656:	4413      	add	r3, r2
 8015658:	00db      	lsls	r3, r3, #3
 801565a:	440b      	add	r3, r1
 801565c:	3312      	adds	r3, #18
 801565e:	881b      	ldrh	r3, [r3, #0]
 8015660:	8bba      	ldrh	r2, [r7, #28]
 8015662:	429a      	cmp	r2, r3
 8015664:	d845      	bhi.n	80156f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015666:	8c3b      	ldrh	r3, [r7, #32]
 8015668:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801566a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801566e:	4973      	ldr	r1, [pc, #460]	; (801583c <etharp_find_entry+0x2d4>)
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	3312      	adds	r3, #18
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	83bb      	strh	r3, [r7, #28]
 8015680:	e037      	b.n	80156f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015682:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015686:	496d      	ldr	r1, [pc, #436]	; (801583c <etharp_find_entry+0x2d4>)
 8015688:	4613      	mov	r3, r2
 801568a:	005b      	lsls	r3, r3, #1
 801568c:	4413      	add	r3, r2
 801568e:	00db      	lsls	r3, r3, #3
 8015690:	440b      	add	r3, r1
 8015692:	3312      	adds	r3, #18
 8015694:	881b      	ldrh	r3, [r3, #0]
 8015696:	8b7a      	ldrh	r2, [r7, #26]
 8015698:	429a      	cmp	r2, r3
 801569a:	d82a      	bhi.n	80156f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801569c:	8c3b      	ldrh	r3, [r7, #32]
 801569e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80156a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156a4:	4965      	ldr	r1, [pc, #404]	; (801583c <etharp_find_entry+0x2d4>)
 80156a6:	4613      	mov	r3, r2
 80156a8:	005b      	lsls	r3, r3, #1
 80156aa:	4413      	add	r3, r2
 80156ac:	00db      	lsls	r3, r3, #3
 80156ae:	440b      	add	r3, r1
 80156b0:	3312      	adds	r3, #18
 80156b2:	881b      	ldrh	r3, [r3, #0]
 80156b4:	837b      	strh	r3, [r7, #26]
 80156b6:	e01c      	b.n	80156f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80156b8:	7dfb      	ldrb	r3, [r7, #23]
 80156ba:	2b01      	cmp	r3, #1
 80156bc:	d919      	bls.n	80156f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80156be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156c2:	495e      	ldr	r1, [pc, #376]	; (801583c <etharp_find_entry+0x2d4>)
 80156c4:	4613      	mov	r3, r2
 80156c6:	005b      	lsls	r3, r3, #1
 80156c8:	4413      	add	r3, r2
 80156ca:	00db      	lsls	r3, r3, #3
 80156cc:	440b      	add	r3, r1
 80156ce:	3312      	adds	r3, #18
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	8b3a      	ldrh	r2, [r7, #24]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d80c      	bhi.n	80156f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80156d8:	8c3b      	ldrh	r3, [r7, #32]
 80156da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80156dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156e0:	4956      	ldr	r1, [pc, #344]	; (801583c <etharp_find_entry+0x2d4>)
 80156e2:	4613      	mov	r3, r2
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	4413      	add	r3, r2
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	440b      	add	r3, r1
 80156ec:	3312      	adds	r3, #18
 80156ee:	881b      	ldrh	r3, [r3, #0]
 80156f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156f2:	8c3b      	ldrh	r3, [r7, #32]
 80156f4:	3301      	adds	r3, #1
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	843b      	strh	r3, [r7, #32]
 80156fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156fe:	2b09      	cmp	r3, #9
 8015700:	f77f af4c 	ble.w	801559c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015704:	7afb      	ldrb	r3, [r7, #11]
 8015706:	f003 0302 	and.w	r3, r3, #2
 801570a:	2b00      	cmp	r3, #0
 801570c:	d108      	bne.n	8015720 <etharp_find_entry+0x1b8>
 801570e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015712:	2b0a      	cmp	r3, #10
 8015714:	d107      	bne.n	8015726 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015716:	7afb      	ldrb	r3, [r7, #11]
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	2b00      	cmp	r3, #0
 801571e:	d102      	bne.n	8015726 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015720:	f04f 33ff 	mov.w	r3, #4294967295
 8015724:	e085      	b.n	8015832 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015726:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801572a:	2b09      	cmp	r3, #9
 801572c:	dc02      	bgt.n	8015734 <etharp_find_entry+0x1cc>
    i = empty;
 801572e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015730:	843b      	strh	r3, [r7, #32]
 8015732:	e039      	b.n	80157a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015734:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015738:	2b09      	cmp	r3, #9
 801573a:	dc14      	bgt.n	8015766 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801573c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801573e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015740:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015744:	493d      	ldr	r1, [pc, #244]	; (801583c <etharp_find_entry+0x2d4>)
 8015746:	4613      	mov	r3, r2
 8015748:	005b      	lsls	r3, r3, #1
 801574a:	4413      	add	r3, r2
 801574c:	00db      	lsls	r3, r3, #3
 801574e:	440b      	add	r3, r1
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d018      	beq.n	8015788 <etharp_find_entry+0x220>
 8015756:	4b3a      	ldr	r3, [pc, #232]	; (8015840 <etharp_find_entry+0x2d8>)
 8015758:	f240 126d 	movw	r2, #365	; 0x16d
 801575c:	493b      	ldr	r1, [pc, #236]	; (801584c <etharp_find_entry+0x2e4>)
 801575e:	483a      	ldr	r0, [pc, #232]	; (8015848 <etharp_find_entry+0x2e0>)
 8015760:	f002 fbb2 	bl	8017ec8 <iprintf>
 8015764:	e010      	b.n	8015788 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015766:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801576a:	2b09      	cmp	r3, #9
 801576c:	dc02      	bgt.n	8015774 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801576e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015770:	843b      	strh	r3, [r7, #32]
 8015772:	e009      	b.n	8015788 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015774:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015778:	2b09      	cmp	r3, #9
 801577a:	dc02      	bgt.n	8015782 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801577c:	8bfb      	ldrh	r3, [r7, #30]
 801577e:	843b      	strh	r3, [r7, #32]
 8015780:	e002      	b.n	8015788 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015782:	f04f 33ff 	mov.w	r3, #4294967295
 8015786:	e054      	b.n	8015832 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015788:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801578c:	2b09      	cmp	r3, #9
 801578e:	dd06      	ble.n	801579e <etharp_find_entry+0x236>
 8015790:	4b2b      	ldr	r3, [pc, #172]	; (8015840 <etharp_find_entry+0x2d8>)
 8015792:	f240 127f 	movw	r2, #383	; 0x17f
 8015796:	492e      	ldr	r1, [pc, #184]	; (8015850 <etharp_find_entry+0x2e8>)
 8015798:	482b      	ldr	r0, [pc, #172]	; (8015848 <etharp_find_entry+0x2e0>)
 801579a:	f002 fb95 	bl	8017ec8 <iprintf>
    etharp_free_entry(i);
 801579e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80157a2:	4618      	mov	r0, r3
 80157a4:	f7ff fe06 	bl	80153b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80157a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80157ac:	2b09      	cmp	r3, #9
 80157ae:	dd06      	ble.n	80157be <etharp_find_entry+0x256>
 80157b0:	4b23      	ldr	r3, [pc, #140]	; (8015840 <etharp_find_entry+0x2d8>)
 80157b2:	f240 1283 	movw	r2, #387	; 0x183
 80157b6:	4926      	ldr	r1, [pc, #152]	; (8015850 <etharp_find_entry+0x2e8>)
 80157b8:	4823      	ldr	r0, [pc, #140]	; (8015848 <etharp_find_entry+0x2e0>)
 80157ba:	f002 fb85 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80157be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157c2:	491e      	ldr	r1, [pc, #120]	; (801583c <etharp_find_entry+0x2d4>)
 80157c4:	4613      	mov	r3, r2
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	4413      	add	r3, r2
 80157ca:	00db      	lsls	r3, r3, #3
 80157cc:	440b      	add	r3, r1
 80157ce:	3314      	adds	r3, #20
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d006      	beq.n	80157e4 <etharp_find_entry+0x27c>
 80157d6:	4b1a      	ldr	r3, [pc, #104]	; (8015840 <etharp_find_entry+0x2d8>)
 80157d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80157dc:	491d      	ldr	r1, [pc, #116]	; (8015854 <etharp_find_entry+0x2ec>)
 80157de:	481a      	ldr	r0, [pc, #104]	; (8015848 <etharp_find_entry+0x2e0>)
 80157e0:	f002 fb72 	bl	8017ec8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d00b      	beq.n	8015802 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80157ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6819      	ldr	r1, [r3, #0]
 80157f2:	4812      	ldr	r0, [pc, #72]	; (801583c <etharp_find_entry+0x2d4>)
 80157f4:	4613      	mov	r3, r2
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	4413      	add	r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	4403      	add	r3, r0
 80157fe:	3304      	adds	r3, #4
 8015800:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015802:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015806:	490d      	ldr	r1, [pc, #52]	; (801583c <etharp_find_entry+0x2d4>)
 8015808:	4613      	mov	r3, r2
 801580a:	005b      	lsls	r3, r3, #1
 801580c:	4413      	add	r3, r2
 801580e:	00db      	lsls	r3, r3, #3
 8015810:	440b      	add	r3, r1
 8015812:	3312      	adds	r3, #18
 8015814:	2200      	movs	r2, #0
 8015816:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015818:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801581c:	4907      	ldr	r1, [pc, #28]	; (801583c <etharp_find_entry+0x2d4>)
 801581e:	4613      	mov	r3, r2
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	4413      	add	r3, r2
 8015824:	00db      	lsls	r3, r3, #3
 8015826:	440b      	add	r3, r1
 8015828:	3308      	adds	r3, #8
 801582a:	687a      	ldr	r2, [r7, #4]
 801582c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801582e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015832:	4618      	mov	r0, r3
 8015834:	3728      	adds	r7, #40	; 0x28
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
 801583a:	bf00      	nop
 801583c:	20004b1c 	.word	0x20004b1c
 8015840:	0801b574 	.word	0x0801b574
 8015844:	0801b5ac 	.word	0x0801b5ac
 8015848:	0801b5ec 	.word	0x0801b5ec
 801584c:	0801b614 	.word	0x0801b614
 8015850:	0801b62c 	.word	0x0801b62c
 8015854:	0801b640 	.word	0x0801b640

08015858 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b088      	sub	sp, #32
 801585c:	af02      	add	r7, sp, #8
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	607a      	str	r2, [r7, #4]
 8015864:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801586c:	2b06      	cmp	r3, #6
 801586e:	d006      	beq.n	801587e <etharp_update_arp_entry+0x26>
 8015870:	4b48      	ldr	r3, [pc, #288]	; (8015994 <etharp_update_arp_entry+0x13c>)
 8015872:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015876:	4948      	ldr	r1, [pc, #288]	; (8015998 <etharp_update_arp_entry+0x140>)
 8015878:	4848      	ldr	r0, [pc, #288]	; (801599c <etharp_update_arp_entry+0x144>)
 801587a:	f002 fb25 	bl	8017ec8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d012      	beq.n	80158aa <etharp_update_arp_entry+0x52>
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00e      	beq.n	80158aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	68f9      	ldr	r1, [r7, #12]
 8015892:	4618      	mov	r0, r3
 8015894:	f001 f920 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 8015898:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801589a:	2b00      	cmp	r3, #0
 801589c:	d105      	bne.n	80158aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80158a6:	2be0      	cmp	r3, #224	; 0xe0
 80158a8:	d102      	bne.n	80158b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80158aa:	f06f 030f 	mvn.w	r3, #15
 80158ae:	e06c      	b.n	801598a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80158b0:	78fb      	ldrb	r3, [r7, #3]
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	4619      	mov	r1, r3
 80158b6:	68b8      	ldr	r0, [r7, #8]
 80158b8:	f7ff fe56 	bl	8015568 <etharp_find_entry>
 80158bc:	4603      	mov	r3, r0
 80158be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80158c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	da02      	bge.n	80158ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80158c8:	8afb      	ldrh	r3, [r7, #22]
 80158ca:	b25b      	sxtb	r3, r3
 80158cc:	e05d      	b.n	801598a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80158ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158d2:	4933      	ldr	r1, [pc, #204]	; (80159a0 <etharp_update_arp_entry+0x148>)
 80158d4:	4613      	mov	r3, r2
 80158d6:	005b      	lsls	r3, r3, #1
 80158d8:	4413      	add	r3, r2
 80158da:	00db      	lsls	r3, r3, #3
 80158dc:	440b      	add	r3, r1
 80158de:	3314      	adds	r3, #20
 80158e0:	2202      	movs	r2, #2
 80158e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80158e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158e8:	492d      	ldr	r1, [pc, #180]	; (80159a0 <etharp_update_arp_entry+0x148>)
 80158ea:	4613      	mov	r3, r2
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	4413      	add	r3, r2
 80158f0:	00db      	lsls	r3, r3, #3
 80158f2:	440b      	add	r3, r1
 80158f4:	3308      	adds	r3, #8
 80158f6:	68fa      	ldr	r2, [r7, #12]
 80158f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80158fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80158fe:	4613      	mov	r3, r2
 8015900:	005b      	lsls	r3, r3, #1
 8015902:	4413      	add	r3, r2
 8015904:	00db      	lsls	r3, r3, #3
 8015906:	3308      	adds	r3, #8
 8015908:	4a25      	ldr	r2, [pc, #148]	; (80159a0 <etharp_update_arp_entry+0x148>)
 801590a:	4413      	add	r3, r2
 801590c:	3304      	adds	r3, #4
 801590e:	2206      	movs	r2, #6
 8015910:	6879      	ldr	r1, [r7, #4]
 8015912:	4618      	mov	r0, r3
 8015914:	f002 fa67 	bl	8017de6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801591c:	4920      	ldr	r1, [pc, #128]	; (80159a0 <etharp_update_arp_entry+0x148>)
 801591e:	4613      	mov	r3, r2
 8015920:	005b      	lsls	r3, r3, #1
 8015922:	4413      	add	r3, r2
 8015924:	00db      	lsls	r3, r3, #3
 8015926:	440b      	add	r3, r1
 8015928:	3312      	adds	r3, #18
 801592a:	2200      	movs	r2, #0
 801592c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801592e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015932:	491b      	ldr	r1, [pc, #108]	; (80159a0 <etharp_update_arp_entry+0x148>)
 8015934:	4613      	mov	r3, r2
 8015936:	005b      	lsls	r3, r3, #1
 8015938:	4413      	add	r3, r2
 801593a:	00db      	lsls	r3, r3, #3
 801593c:	440b      	add	r3, r1
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d021      	beq.n	8015988 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015944:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015948:	4915      	ldr	r1, [pc, #84]	; (80159a0 <etharp_update_arp_entry+0x148>)
 801594a:	4613      	mov	r3, r2
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	4413      	add	r3, r2
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	440b      	add	r3, r1
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015958:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801595c:	4910      	ldr	r1, [pc, #64]	; (80159a0 <etharp_update_arp_entry+0x148>)
 801595e:	4613      	mov	r3, r2
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	4413      	add	r3, r2
 8015964:	00db      	lsls	r3, r3, #3
 8015966:	440b      	add	r3, r1
 8015968:	2200      	movs	r2, #0
 801596a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015976:	9300      	str	r3, [sp, #0]
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6939      	ldr	r1, [r7, #16]
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f001 ffb3 	bl	80178e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015982:	6938      	ldr	r0, [r7, #16]
 8015984:	f7f7 fc4c 	bl	800d220 <pbuf_free>
  }
  return ERR_OK;
 8015988:	2300      	movs	r3, #0
}
 801598a:	4618      	mov	r0, r3
 801598c:	3718      	adds	r7, #24
 801598e:	46bd      	mov	sp, r7
 8015990:	bd80      	pop	{r7, pc}
 8015992:	bf00      	nop
 8015994:	0801b574 	.word	0x0801b574
 8015998:	0801b66c 	.word	0x0801b66c
 801599c:	0801b5ec 	.word	0x0801b5ec
 80159a0:	20004b1c 	.word	0x20004b1c

080159a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159ac:	2300      	movs	r3, #0
 80159ae:	60fb      	str	r3, [r7, #12]
 80159b0:	e01e      	b.n	80159f0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80159b2:	4913      	ldr	r1, [pc, #76]	; (8015a00 <etharp_cleanup_netif+0x5c>)
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	4613      	mov	r3, r2
 80159b8:	005b      	lsls	r3, r3, #1
 80159ba:	4413      	add	r3, r2
 80159bc:	00db      	lsls	r3, r3, #3
 80159be:	440b      	add	r3, r1
 80159c0:	3314      	adds	r3, #20
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80159c6:	7afb      	ldrb	r3, [r7, #11]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d00e      	beq.n	80159ea <etharp_cleanup_netif+0x46>
 80159cc:	490c      	ldr	r1, [pc, #48]	; (8015a00 <etharp_cleanup_netif+0x5c>)
 80159ce:	68fa      	ldr	r2, [r7, #12]
 80159d0:	4613      	mov	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	4413      	add	r3, r2
 80159d6:	00db      	lsls	r3, r3, #3
 80159d8:	440b      	add	r3, r1
 80159da:	3308      	adds	r3, #8
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	687a      	ldr	r2, [r7, #4]
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d102      	bne.n	80159ea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80159e4:	68f8      	ldr	r0, [r7, #12]
 80159e6:	f7ff fce5 	bl	80153b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	3301      	adds	r3, #1
 80159ee:	60fb      	str	r3, [r7, #12]
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2b09      	cmp	r3, #9
 80159f4:	dddd      	ble.n	80159b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80159f6:	bf00      	nop
 80159f8:	bf00      	nop
 80159fa:	3710      	adds	r7, #16
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}
 8015a00:	20004b1c 	.word	0x20004b1c

08015a04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015a04:	b5b0      	push	{r4, r5, r7, lr}
 8015a06:	b08a      	sub	sp, #40	; 0x28
 8015a08:	af04      	add	r7, sp, #16
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d107      	bne.n	8015a24 <etharp_input+0x20>
 8015a14:	4b3f      	ldr	r3, [pc, #252]	; (8015b14 <etharp_input+0x110>)
 8015a16:	f240 228a 	movw	r2, #650	; 0x28a
 8015a1a:	493f      	ldr	r1, [pc, #252]	; (8015b18 <etharp_input+0x114>)
 8015a1c:	483f      	ldr	r0, [pc, #252]	; (8015b1c <etharp_input+0x118>)
 8015a1e:	f002 fa53 	bl	8017ec8 <iprintf>
 8015a22:	e074      	b.n	8015b0e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a34:	d10c      	bne.n	8015a50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015a3a:	2b06      	cmp	r3, #6
 8015a3c:	d108      	bne.n	8015a50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a42:	2b04      	cmp	r3, #4
 8015a44:	d104      	bne.n	8015a50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	885b      	ldrh	r3, [r3, #2]
 8015a4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a4c:	2b08      	cmp	r3, #8
 8015a4e:	d003      	beq.n	8015a58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7f7 fbe5 	bl	800d220 <pbuf_free>
    return;
 8015a56:	e05a      	b.n	8015b0e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	330e      	adds	r3, #14
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	3318      	adds	r3, #24
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	3304      	adds	r3, #4
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d102      	bne.n	8015a78 <etharp_input+0x74>
    for_us = 0;
 8015a72:	2300      	movs	r3, #0
 8015a74:	75fb      	strb	r3, [r7, #23]
 8015a76:	e009      	b.n	8015a8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015a78:	68ba      	ldr	r2, [r7, #8]
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	3304      	adds	r3, #4
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	bf0c      	ite	eq
 8015a84:	2301      	moveq	r3, #1
 8015a86:	2300      	movne	r3, #0
 8015a88:	b2db      	uxtb	r3, r3
 8015a8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	f103 0208 	add.w	r2, r3, #8
 8015a92:	7dfb      	ldrb	r3, [r7, #23]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d001      	beq.n	8015a9c <etharp_input+0x98>
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e000      	b.n	8015a9e <etharp_input+0x9a>
 8015a9c:	2302      	movs	r3, #2
 8015a9e:	f107 010c 	add.w	r1, r7, #12
 8015aa2:	6838      	ldr	r0, [r7, #0]
 8015aa4:	f7ff fed8 	bl	8015858 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	88db      	ldrh	r3, [r3, #6]
 8015aac:	b29b      	uxth	r3, r3
 8015aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ab2:	d003      	beq.n	8015abc <etharp_input+0xb8>
 8015ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ab8:	d01e      	beq.n	8015af8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015aba:	e025      	b.n	8015b08 <etharp_input+0x104>
      if (for_us) {
 8015abc:	7dfb      	ldrb	r3, [r7, #23]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d021      	beq.n	8015b06 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015ac8:	693b      	ldr	r3, [r7, #16]
 8015aca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015ad8:	693a      	ldr	r2, [r7, #16]
 8015ada:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015adc:	2102      	movs	r1, #2
 8015ade:	9103      	str	r1, [sp, #12]
 8015ae0:	f107 010c 	add.w	r1, r7, #12
 8015ae4:	9102      	str	r1, [sp, #8]
 8015ae6:	9201      	str	r2, [sp, #4]
 8015ae8:	9300      	str	r3, [sp, #0]
 8015aea:	462b      	mov	r3, r5
 8015aec:	4622      	mov	r2, r4
 8015aee:	4601      	mov	r1, r0
 8015af0:	6838      	ldr	r0, [r7, #0]
 8015af2:	f000 faef 	bl	80160d4 <etharp_raw>
      break;
 8015af6:	e006      	b.n	8015b06 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015af8:	f107 030c 	add.w	r3, r7, #12
 8015afc:	4619      	mov	r1, r3
 8015afe:	6838      	ldr	r0, [r7, #0]
 8015b00:	f7fe f9fc 	bl	8013efc <dhcp_arp_reply>
      break;
 8015b04:	e000      	b.n	8015b08 <etharp_input+0x104>
      break;
 8015b06:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7f7 fb89 	bl	800d220 <pbuf_free>
}
 8015b0e:	3718      	adds	r7, #24
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bdb0      	pop	{r4, r5, r7, pc}
 8015b14:	0801b574 	.word	0x0801b574
 8015b18:	0801b6c4 	.word	0x0801b6c4
 8015b1c:	0801b5ec 	.word	0x0801b5ec

08015b20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b086      	sub	sp, #24
 8015b24:	af02      	add	r7, sp, #8
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015b2e:	79fa      	ldrb	r2, [r7, #7]
 8015b30:	4944      	ldr	r1, [pc, #272]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015b32:	4613      	mov	r3, r2
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	4413      	add	r3, r2
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	440b      	add	r3, r1
 8015b3c:	3314      	adds	r3, #20
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	2b01      	cmp	r3, #1
 8015b42:	d806      	bhi.n	8015b52 <etharp_output_to_arp_index+0x32>
 8015b44:	4b40      	ldr	r3, [pc, #256]	; (8015c48 <etharp_output_to_arp_index+0x128>)
 8015b46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015b4a:	4940      	ldr	r1, [pc, #256]	; (8015c4c <etharp_output_to_arp_index+0x12c>)
 8015b4c:	4840      	ldr	r0, [pc, #256]	; (8015c50 <etharp_output_to_arp_index+0x130>)
 8015b4e:	f002 f9bb 	bl	8017ec8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015b52:	79fa      	ldrb	r2, [r7, #7]
 8015b54:	493b      	ldr	r1, [pc, #236]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015b56:	4613      	mov	r3, r2
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4413      	add	r3, r2
 8015b5c:	00db      	lsls	r3, r3, #3
 8015b5e:	440b      	add	r3, r1
 8015b60:	3314      	adds	r3, #20
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	d153      	bne.n	8015c10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015b68:	79fa      	ldrb	r2, [r7, #7]
 8015b6a:	4936      	ldr	r1, [pc, #216]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015b6c:	4613      	mov	r3, r2
 8015b6e:	005b      	lsls	r3, r3, #1
 8015b70:	4413      	add	r3, r2
 8015b72:	00db      	lsls	r3, r3, #3
 8015b74:	440b      	add	r3, r1
 8015b76:	3312      	adds	r3, #18
 8015b78:	881b      	ldrh	r3, [r3, #0]
 8015b7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015b7e:	d919      	bls.n	8015bb4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015b80:	79fa      	ldrb	r2, [r7, #7]
 8015b82:	4613      	mov	r3, r2
 8015b84:	005b      	lsls	r3, r3, #1
 8015b86:	4413      	add	r3, r2
 8015b88:	00db      	lsls	r3, r3, #3
 8015b8a:	4a2e      	ldr	r2, [pc, #184]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015b8c:	4413      	add	r3, r2
 8015b8e:	3304      	adds	r3, #4
 8015b90:	4619      	mov	r1, r3
 8015b92:	68f8      	ldr	r0, [r7, #12]
 8015b94:	f000 fb4c 	bl	8016230 <etharp_request>
 8015b98:	4603      	mov	r3, r0
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d138      	bne.n	8015c10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b9e:	79fa      	ldrb	r2, [r7, #7]
 8015ba0:	4928      	ldr	r1, [pc, #160]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015ba2:	4613      	mov	r3, r2
 8015ba4:	005b      	lsls	r3, r3, #1
 8015ba6:	4413      	add	r3, r2
 8015ba8:	00db      	lsls	r3, r3, #3
 8015baa:	440b      	add	r3, r1
 8015bac:	3314      	adds	r3, #20
 8015bae:	2203      	movs	r2, #3
 8015bb0:	701a      	strb	r2, [r3, #0]
 8015bb2:	e02d      	b.n	8015c10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015bb4:	79fa      	ldrb	r2, [r7, #7]
 8015bb6:	4923      	ldr	r1, [pc, #140]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	3312      	adds	r3, #18
 8015bc4:	881b      	ldrh	r3, [r3, #0]
 8015bc6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015bca:	d321      	bcc.n	8015c10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015bcc:	79fa      	ldrb	r2, [r7, #7]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	005b      	lsls	r3, r3, #1
 8015bd2:	4413      	add	r3, r2
 8015bd4:	00db      	lsls	r3, r3, #3
 8015bd6:	4a1b      	ldr	r2, [pc, #108]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015bd8:	4413      	add	r3, r2
 8015bda:	1d19      	adds	r1, r3, #4
 8015bdc:	79fa      	ldrb	r2, [r7, #7]
 8015bde:	4613      	mov	r3, r2
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	4413      	add	r3, r2
 8015be4:	00db      	lsls	r3, r3, #3
 8015be6:	3308      	adds	r3, #8
 8015be8:	4a16      	ldr	r2, [pc, #88]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015bea:	4413      	add	r3, r2
 8015bec:	3304      	adds	r3, #4
 8015bee:	461a      	mov	r2, r3
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	f000 fafb 	bl	80161ec <etharp_request_dst>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d109      	bne.n	8015c10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015bfc:	79fa      	ldrb	r2, [r7, #7]
 8015bfe:	4911      	ldr	r1, [pc, #68]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015c00:	4613      	mov	r3, r2
 8015c02:	005b      	lsls	r3, r3, #1
 8015c04:	4413      	add	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	440b      	add	r3, r1
 8015c0a:	3314      	adds	r3, #20
 8015c0c:	2203      	movs	r2, #3
 8015c0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015c16:	79fa      	ldrb	r2, [r7, #7]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	005b      	lsls	r3, r3, #1
 8015c1c:	4413      	add	r3, r2
 8015c1e:	00db      	lsls	r3, r3, #3
 8015c20:	3308      	adds	r3, #8
 8015c22:	4a08      	ldr	r2, [pc, #32]	; (8015c44 <etharp_output_to_arp_index+0x124>)
 8015c24:	4413      	add	r3, r2
 8015c26:	3304      	adds	r3, #4
 8015c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015c2c:	9200      	str	r2, [sp, #0]
 8015c2e:	460a      	mov	r2, r1
 8015c30:	68b9      	ldr	r1, [r7, #8]
 8015c32:	68f8      	ldr	r0, [r7, #12]
 8015c34:	f001 fe58 	bl	80178e8 <ethernet_output>
 8015c38:	4603      	mov	r3, r0
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}
 8015c42:	bf00      	nop
 8015c44:	20004b1c 	.word	0x20004b1c
 8015c48:	0801b574 	.word	0x0801b574
 8015c4c:	0801b6e4 	.word	0x0801b6e4
 8015c50:	0801b5ec 	.word	0x0801b5ec

08015c54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b08a      	sub	sp, #40	; 0x28
 8015c58:	af02      	add	r7, sp, #8
 8015c5a:	60f8      	str	r0, [r7, #12]
 8015c5c:	60b9      	str	r1, [r7, #8]
 8015c5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d106      	bne.n	8015c78 <etharp_output+0x24>
 8015c6a:	4b73      	ldr	r3, [pc, #460]	; (8015e38 <etharp_output+0x1e4>)
 8015c6c:	f240 321e 	movw	r2, #798	; 0x31e
 8015c70:	4972      	ldr	r1, [pc, #456]	; (8015e3c <etharp_output+0x1e8>)
 8015c72:	4873      	ldr	r0, [pc, #460]	; (8015e40 <etharp_output+0x1ec>)
 8015c74:	f002 f928 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d106      	bne.n	8015c8c <etharp_output+0x38>
 8015c7e:	4b6e      	ldr	r3, [pc, #440]	; (8015e38 <etharp_output+0x1e4>)
 8015c80:	f240 321f 	movw	r2, #799	; 0x31f
 8015c84:	496f      	ldr	r1, [pc, #444]	; (8015e44 <etharp_output+0x1f0>)
 8015c86:	486e      	ldr	r0, [pc, #440]	; (8015e40 <etharp_output+0x1ec>)
 8015c88:	f002 f91e 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <etharp_output+0x4c>
 8015c92:	4b69      	ldr	r3, [pc, #420]	; (8015e38 <etharp_output+0x1e4>)
 8015c94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015c98:	496b      	ldr	r1, [pc, #428]	; (8015e48 <etharp_output+0x1f4>)
 8015c9a:	4869      	ldr	r0, [pc, #420]	; (8015e40 <etharp_output+0x1ec>)
 8015c9c:	f002 f914 	bl	8017ec8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	68f9      	ldr	r1, [r7, #12]
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f000 ff16 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015cb2:	4b66      	ldr	r3, [pc, #408]	; (8015e4c <etharp_output+0x1f8>)
 8015cb4:	61fb      	str	r3, [r7, #28]
 8015cb6:	e0af      	b.n	8015e18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015cc0:	2be0      	cmp	r3, #224	; 0xe0
 8015cc2:	d118      	bne.n	8015cf6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015ccc:	235e      	movs	r3, #94	; 0x5e
 8015cce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	3302      	adds	r3, #2
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	3303      	adds	r3, #3
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015cee:	f107 0310 	add.w	r3, r7, #16
 8015cf2:	61fb      	str	r3, [r7, #28]
 8015cf4:	e090      	b.n	8015e18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	681a      	ldr	r2, [r3, #0]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	3304      	adds	r3, #4
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	405a      	eors	r2, r3
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	3308      	adds	r3, #8
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	4013      	ands	r3, r2
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d012      	beq.n	8015d34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015d14:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015d18:	4293      	cmp	r3, r2
 8015d1a:	d00b      	beq.n	8015d34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	330c      	adds	r3, #12
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d003      	beq.n	8015d2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	330c      	adds	r3, #12
 8015d2a:	61bb      	str	r3, [r7, #24]
 8015d2c:	e002      	b.n	8015d34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015d2e:	f06f 0303 	mvn.w	r3, #3
 8015d32:	e07d      	b.n	8015e30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d34:	4b46      	ldr	r3, [pc, #280]	; (8015e50 <etharp_output+0x1fc>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	4619      	mov	r1, r3
 8015d3a:	4a46      	ldr	r2, [pc, #280]	; (8015e54 <etharp_output+0x200>)
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	005b      	lsls	r3, r3, #1
 8015d40:	440b      	add	r3, r1
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	4413      	add	r3, r2
 8015d46:	3314      	adds	r3, #20
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	2b01      	cmp	r3, #1
 8015d4c:	d925      	bls.n	8015d9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015d4e:	4b40      	ldr	r3, [pc, #256]	; (8015e50 <etharp_output+0x1fc>)
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	4619      	mov	r1, r3
 8015d54:	4a3f      	ldr	r2, [pc, #252]	; (8015e54 <etharp_output+0x200>)
 8015d56:	460b      	mov	r3, r1
 8015d58:	005b      	lsls	r3, r3, #1
 8015d5a:	440b      	add	r3, r1
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	4413      	add	r3, r2
 8015d60:	3308      	adds	r3, #8
 8015d62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d64:	68fa      	ldr	r2, [r7, #12]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d117      	bne.n	8015d9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	681a      	ldr	r2, [r3, #0]
 8015d6e:	4b38      	ldr	r3, [pc, #224]	; (8015e50 <etharp_output+0x1fc>)
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	4618      	mov	r0, r3
 8015d74:	4937      	ldr	r1, [pc, #220]	; (8015e54 <etharp_output+0x200>)
 8015d76:	4603      	mov	r3, r0
 8015d78:	005b      	lsls	r3, r3, #1
 8015d7a:	4403      	add	r3, r0
 8015d7c:	00db      	lsls	r3, r3, #3
 8015d7e:	440b      	add	r3, r1
 8015d80:	3304      	adds	r3, #4
 8015d82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015d84:	429a      	cmp	r2, r3
 8015d86:	d108      	bne.n	8015d9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015d88:	4b31      	ldr	r3, [pc, #196]	; (8015e50 <etharp_output+0x1fc>)
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	461a      	mov	r2, r3
 8015d8e:	68b9      	ldr	r1, [r7, #8]
 8015d90:	68f8      	ldr	r0, [r7, #12]
 8015d92:	f7ff fec5 	bl	8015b20 <etharp_output_to_arp_index>
 8015d96:	4603      	mov	r3, r0
 8015d98:	e04a      	b.n	8015e30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	75fb      	strb	r3, [r7, #23]
 8015d9e:	e031      	b.n	8015e04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015da0:	7dfa      	ldrb	r2, [r7, #23]
 8015da2:	492c      	ldr	r1, [pc, #176]	; (8015e54 <etharp_output+0x200>)
 8015da4:	4613      	mov	r3, r2
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	4413      	add	r3, r2
 8015daa:	00db      	lsls	r3, r3, #3
 8015dac:	440b      	add	r3, r1
 8015dae:	3314      	adds	r3, #20
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b01      	cmp	r3, #1
 8015db4:	d923      	bls.n	8015dfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015db6:	7dfa      	ldrb	r2, [r7, #23]
 8015db8:	4926      	ldr	r1, [pc, #152]	; (8015e54 <etharp_output+0x200>)
 8015dba:	4613      	mov	r3, r2
 8015dbc:	005b      	lsls	r3, r3, #1
 8015dbe:	4413      	add	r3, r2
 8015dc0:	00db      	lsls	r3, r3, #3
 8015dc2:	440b      	add	r3, r1
 8015dc4:	3308      	adds	r3, #8
 8015dc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d117      	bne.n	8015dfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	6819      	ldr	r1, [r3, #0]
 8015dd2:	7dfa      	ldrb	r2, [r7, #23]
 8015dd4:	481f      	ldr	r0, [pc, #124]	; (8015e54 <etharp_output+0x200>)
 8015dd6:	4613      	mov	r3, r2
 8015dd8:	005b      	lsls	r3, r3, #1
 8015dda:	4413      	add	r3, r2
 8015ddc:	00db      	lsls	r3, r3, #3
 8015dde:	4403      	add	r3, r0
 8015de0:	3304      	adds	r3, #4
 8015de2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015de4:	4299      	cmp	r1, r3
 8015de6:	d10a      	bne.n	8015dfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015de8:	4a19      	ldr	r2, [pc, #100]	; (8015e50 <etharp_output+0x1fc>)
 8015dea:	7dfb      	ldrb	r3, [r7, #23]
 8015dec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
 8015df0:	461a      	mov	r2, r3
 8015df2:	68b9      	ldr	r1, [r7, #8]
 8015df4:	68f8      	ldr	r0, [r7, #12]
 8015df6:	f7ff fe93 	bl	8015b20 <etharp_output_to_arp_index>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	e018      	b.n	8015e30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015dfe:	7dfb      	ldrb	r3, [r7, #23]
 8015e00:	3301      	adds	r3, #1
 8015e02:	75fb      	strb	r3, [r7, #23]
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	2b09      	cmp	r3, #9
 8015e08:	d9ca      	bls.n	8015da0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015e0a:	68ba      	ldr	r2, [r7, #8]
 8015e0c:	69b9      	ldr	r1, [r7, #24]
 8015e0e:	68f8      	ldr	r0, [r7, #12]
 8015e10:	f000 f822 	bl	8015e58 <etharp_query>
 8015e14:	4603      	mov	r3, r0
 8015e16:	e00b      	b.n	8015e30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015e22:	9300      	str	r3, [sp, #0]
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	68b9      	ldr	r1, [r7, #8]
 8015e28:	68f8      	ldr	r0, [r7, #12]
 8015e2a:	f001 fd5d 	bl	80178e8 <ethernet_output>
 8015e2e:	4603      	mov	r3, r0
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3720      	adds	r7, #32
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}
 8015e38:	0801b574 	.word	0x0801b574
 8015e3c:	0801b6c4 	.word	0x0801b6c4
 8015e40:	0801b5ec 	.word	0x0801b5ec
 8015e44:	0801b714 	.word	0x0801b714
 8015e48:	0801b6b4 	.word	0x0801b6b4
 8015e4c:	0801bed0 	.word	0x0801bed0
 8015e50:	20004c0c 	.word	0x20004c0c
 8015e54:	20004b1c 	.word	0x20004b1c

08015e58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b08c      	sub	sp, #48	; 0x30
 8015e5c:	af02      	add	r7, sp, #8
 8015e5e:	60f8      	str	r0, [r7, #12]
 8015e60:	60b9      	str	r1, [r7, #8]
 8015e62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	332a      	adds	r3, #42	; 0x2a
 8015e68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015e6a:	23ff      	movs	r3, #255	; 0xff
 8015e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015e70:	2300      	movs	r3, #0
 8015e72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	68f9      	ldr	r1, [r7, #12]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f000 fe2c 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 8015e80:	4603      	mov	r3, r0
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d10c      	bne.n	8015ea0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e8e:	2be0      	cmp	r3, #224	; 0xe0
 8015e90:	d006      	beq.n	8015ea0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d003      	beq.n	8015ea0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d102      	bne.n	8015ea6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015ea0:	f06f 030f 	mvn.w	r3, #15
 8015ea4:	e101      	b.n	80160aa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015ea6:	68fa      	ldr	r2, [r7, #12]
 8015ea8:	2101      	movs	r1, #1
 8015eaa:	68b8      	ldr	r0, [r7, #8]
 8015eac:	f7ff fb5c 	bl	8015568 <etharp_find_entry>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015eb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	da02      	bge.n	8015ec2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015ebc:	8a7b      	ldrh	r3, [r7, #18]
 8015ebe:	b25b      	sxtb	r3, r3
 8015ec0:	e0f3      	b.n	80160aa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015ec2:	8a7b      	ldrh	r3, [r7, #18]
 8015ec4:	2b7e      	cmp	r3, #126	; 0x7e
 8015ec6:	d906      	bls.n	8015ed6 <etharp_query+0x7e>
 8015ec8:	4b7a      	ldr	r3, [pc, #488]	; (80160b4 <etharp_query+0x25c>)
 8015eca:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015ece:	497a      	ldr	r1, [pc, #488]	; (80160b8 <etharp_query+0x260>)
 8015ed0:	487a      	ldr	r0, [pc, #488]	; (80160bc <etharp_query+0x264>)
 8015ed2:	f001 fff9 	bl	8017ec8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015ed6:	8a7b      	ldrh	r3, [r7, #18]
 8015ed8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015eda:	7c7a      	ldrb	r2, [r7, #17]
 8015edc:	4978      	ldr	r1, [pc, #480]	; (80160c0 <etharp_query+0x268>)
 8015ede:	4613      	mov	r3, r2
 8015ee0:	005b      	lsls	r3, r3, #1
 8015ee2:	4413      	add	r3, r2
 8015ee4:	00db      	lsls	r3, r3, #3
 8015ee6:	440b      	add	r3, r1
 8015ee8:	3314      	adds	r3, #20
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d115      	bne.n	8015f1c <etharp_query+0xc4>
    is_new_entry = 1;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015ef4:	7c7a      	ldrb	r2, [r7, #17]
 8015ef6:	4972      	ldr	r1, [pc, #456]	; (80160c0 <etharp_query+0x268>)
 8015ef8:	4613      	mov	r3, r2
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	4413      	add	r3, r2
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	440b      	add	r3, r1
 8015f02:	3314      	adds	r3, #20
 8015f04:	2201      	movs	r2, #1
 8015f06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015f08:	7c7a      	ldrb	r2, [r7, #17]
 8015f0a:	496d      	ldr	r1, [pc, #436]	; (80160c0 <etharp_query+0x268>)
 8015f0c:	4613      	mov	r3, r2
 8015f0e:	005b      	lsls	r3, r3, #1
 8015f10:	4413      	add	r3, r2
 8015f12:	00db      	lsls	r3, r3, #3
 8015f14:	440b      	add	r3, r1
 8015f16:	3308      	adds	r3, #8
 8015f18:	68fa      	ldr	r2, [r7, #12]
 8015f1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015f1c:	7c7a      	ldrb	r2, [r7, #17]
 8015f1e:	4968      	ldr	r1, [pc, #416]	; (80160c0 <etharp_query+0x268>)
 8015f20:	4613      	mov	r3, r2
 8015f22:	005b      	lsls	r3, r3, #1
 8015f24:	4413      	add	r3, r2
 8015f26:	00db      	lsls	r3, r3, #3
 8015f28:	440b      	add	r3, r1
 8015f2a:	3314      	adds	r3, #20
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d011      	beq.n	8015f56 <etharp_query+0xfe>
 8015f32:	7c7a      	ldrb	r2, [r7, #17]
 8015f34:	4962      	ldr	r1, [pc, #392]	; (80160c0 <etharp_query+0x268>)
 8015f36:	4613      	mov	r3, r2
 8015f38:	005b      	lsls	r3, r3, #1
 8015f3a:	4413      	add	r3, r2
 8015f3c:	00db      	lsls	r3, r3, #3
 8015f3e:	440b      	add	r3, r1
 8015f40:	3314      	adds	r3, #20
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	2b01      	cmp	r3, #1
 8015f46:	d806      	bhi.n	8015f56 <etharp_query+0xfe>
 8015f48:	4b5a      	ldr	r3, [pc, #360]	; (80160b4 <etharp_query+0x25c>)
 8015f4a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015f4e:	495d      	ldr	r1, [pc, #372]	; (80160c4 <etharp_query+0x26c>)
 8015f50:	485a      	ldr	r0, [pc, #360]	; (80160bc <etharp_query+0x264>)
 8015f52:	f001 ffb9 	bl	8017ec8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015f56:	6a3b      	ldr	r3, [r7, #32]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d102      	bne.n	8015f62 <etharp_query+0x10a>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d10c      	bne.n	8015f7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015f62:	68b9      	ldr	r1, [r7, #8]
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f000 f963 	bl	8016230 <etharp_request>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d102      	bne.n	8015f7c <etharp_query+0x124>
      return result;
 8015f76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015f7a:	e096      	b.n	80160aa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d106      	bne.n	8015f90 <etharp_query+0x138>
 8015f82:	4b4c      	ldr	r3, [pc, #304]	; (80160b4 <etharp_query+0x25c>)
 8015f84:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015f88:	494f      	ldr	r1, [pc, #316]	; (80160c8 <etharp_query+0x270>)
 8015f8a:	484c      	ldr	r0, [pc, #304]	; (80160bc <etharp_query+0x264>)
 8015f8c:	f001 ff9c 	bl	8017ec8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015f90:	7c7a      	ldrb	r2, [r7, #17]
 8015f92:	494b      	ldr	r1, [pc, #300]	; (80160c0 <etharp_query+0x268>)
 8015f94:	4613      	mov	r3, r2
 8015f96:	005b      	lsls	r3, r3, #1
 8015f98:	4413      	add	r3, r2
 8015f9a:	00db      	lsls	r3, r3, #3
 8015f9c:	440b      	add	r3, r1
 8015f9e:	3314      	adds	r3, #20
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	d917      	bls.n	8015fd6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015fa6:	4a49      	ldr	r2, [pc, #292]	; (80160cc <etharp_query+0x274>)
 8015fa8:	7c7b      	ldrb	r3, [r7, #17]
 8015faa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015fac:	7c7a      	ldrb	r2, [r7, #17]
 8015fae:	4613      	mov	r3, r2
 8015fb0:	005b      	lsls	r3, r3, #1
 8015fb2:	4413      	add	r3, r2
 8015fb4:	00db      	lsls	r3, r3, #3
 8015fb6:	3308      	adds	r3, #8
 8015fb8:	4a41      	ldr	r2, [pc, #260]	; (80160c0 <etharp_query+0x268>)
 8015fba:	4413      	add	r3, r2
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015fc2:	9200      	str	r2, [sp, #0]
 8015fc4:	697a      	ldr	r2, [r7, #20]
 8015fc6:	6879      	ldr	r1, [r7, #4]
 8015fc8:	68f8      	ldr	r0, [r7, #12]
 8015fca:	f001 fc8d 	bl	80178e8 <ethernet_output>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fd4:	e067      	b.n	80160a6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015fd6:	7c7a      	ldrb	r2, [r7, #17]
 8015fd8:	4939      	ldr	r1, [pc, #228]	; (80160c0 <etharp_query+0x268>)
 8015fda:	4613      	mov	r3, r2
 8015fdc:	005b      	lsls	r3, r3, #1
 8015fde:	4413      	add	r3, r2
 8015fe0:	00db      	lsls	r3, r3, #3
 8015fe2:	440b      	add	r3, r1
 8015fe4:	3314      	adds	r3, #20
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	d15c      	bne.n	80160a6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015fec:	2300      	movs	r3, #0
 8015fee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ff4:	e01c      	b.n	8016030 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	895a      	ldrh	r2, [r3, #10]
 8015ffa:	69fb      	ldr	r3, [r7, #28]
 8015ffc:	891b      	ldrh	r3, [r3, #8]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d10a      	bne.n	8016018 <etharp_query+0x1c0>
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d006      	beq.n	8016018 <etharp_query+0x1c0>
 801600a:	4b2a      	ldr	r3, [pc, #168]	; (80160b4 <etharp_query+0x25c>)
 801600c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016010:	492f      	ldr	r1, [pc, #188]	; (80160d0 <etharp_query+0x278>)
 8016012:	482a      	ldr	r0, [pc, #168]	; (80160bc <etharp_query+0x264>)
 8016014:	f001 ff58 	bl	8017ec8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016018:	69fb      	ldr	r3, [r7, #28]
 801601a:	7b1b      	ldrb	r3, [r3, #12]
 801601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016020:	2b00      	cmp	r3, #0
 8016022:	d002      	beq.n	801602a <etharp_query+0x1d2>
        copy_needed = 1;
 8016024:	2301      	movs	r3, #1
 8016026:	61bb      	str	r3, [r7, #24]
        break;
 8016028:	e005      	b.n	8016036 <etharp_query+0x1de>
      }
      p = p->next;
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d1df      	bne.n	8015ff6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016036:	69bb      	ldr	r3, [r7, #24]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d007      	beq.n	801604c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801603c:	687a      	ldr	r2, [r7, #4]
 801603e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016042:	200e      	movs	r0, #14
 8016044:	f7f7 fb64 	bl	800d710 <pbuf_clone>
 8016048:	61f8      	str	r0, [r7, #28]
 801604a:	e004      	b.n	8016056 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016050:	69f8      	ldr	r0, [r7, #28]
 8016052:	f7f7 f98b 	bl	800d36c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016056:	69fb      	ldr	r3, [r7, #28]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d021      	beq.n	80160a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801605c:	7c7a      	ldrb	r2, [r7, #17]
 801605e:	4918      	ldr	r1, [pc, #96]	; (80160c0 <etharp_query+0x268>)
 8016060:	4613      	mov	r3, r2
 8016062:	005b      	lsls	r3, r3, #1
 8016064:	4413      	add	r3, r2
 8016066:	00db      	lsls	r3, r3, #3
 8016068:	440b      	add	r3, r1
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00a      	beq.n	8016086 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016070:	7c7a      	ldrb	r2, [r7, #17]
 8016072:	4913      	ldr	r1, [pc, #76]	; (80160c0 <etharp_query+0x268>)
 8016074:	4613      	mov	r3, r2
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	4413      	add	r3, r2
 801607a:	00db      	lsls	r3, r3, #3
 801607c:	440b      	add	r3, r1
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4618      	mov	r0, r3
 8016082:	f7f7 f8cd 	bl	800d220 <pbuf_free>
      }
      arp_table[i].q = p;
 8016086:	7c7a      	ldrb	r2, [r7, #17]
 8016088:	490d      	ldr	r1, [pc, #52]	; (80160c0 <etharp_query+0x268>)
 801608a:	4613      	mov	r3, r2
 801608c:	005b      	lsls	r3, r3, #1
 801608e:	4413      	add	r3, r2
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	440b      	add	r3, r1
 8016094:	69fa      	ldr	r2, [r7, #28]
 8016096:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016098:	2300      	movs	r3, #0
 801609a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801609e:	e002      	b.n	80160a6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80160a0:	23ff      	movs	r3, #255	; 0xff
 80160a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80160a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	3728      	adds	r7, #40	; 0x28
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd80      	pop	{r7, pc}
 80160b2:	bf00      	nop
 80160b4:	0801b574 	.word	0x0801b574
 80160b8:	0801b720 	.word	0x0801b720
 80160bc:	0801b5ec 	.word	0x0801b5ec
 80160c0:	20004b1c 	.word	0x20004b1c
 80160c4:	0801b730 	.word	0x0801b730
 80160c8:	0801b714 	.word	0x0801b714
 80160cc:	20004c0c 	.word	0x20004c0c
 80160d0:	0801b758 	.word	0x0801b758

080160d4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08a      	sub	sp, #40	; 0x28
 80160d8:	af02      	add	r7, sp, #8
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80160e2:	2300      	movs	r3, #0
 80160e4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d106      	bne.n	80160fa <etharp_raw+0x26>
 80160ec:	4b3a      	ldr	r3, [pc, #232]	; (80161d8 <etharp_raw+0x104>)
 80160ee:	f240 4257 	movw	r2, #1111	; 0x457
 80160f2:	493a      	ldr	r1, [pc, #232]	; (80161dc <etharp_raw+0x108>)
 80160f4:	483a      	ldr	r0, [pc, #232]	; (80161e0 <etharp_raw+0x10c>)
 80160f6:	f001 fee7 	bl	8017ec8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80160fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160fe:	211c      	movs	r1, #28
 8016100:	200e      	movs	r0, #14
 8016102:	f7f6 fda9 	bl	800cc58 <pbuf_alloc>
 8016106:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016108:	69bb      	ldr	r3, [r7, #24]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d102      	bne.n	8016114 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801610e:	f04f 33ff 	mov.w	r3, #4294967295
 8016112:	e05d      	b.n	80161d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016114:	69bb      	ldr	r3, [r7, #24]
 8016116:	895b      	ldrh	r3, [r3, #10]
 8016118:	2b1b      	cmp	r3, #27
 801611a:	d806      	bhi.n	801612a <etharp_raw+0x56>
 801611c:	4b2e      	ldr	r3, [pc, #184]	; (80161d8 <etharp_raw+0x104>)
 801611e:	f240 4262 	movw	r2, #1122	; 0x462
 8016122:	4930      	ldr	r1, [pc, #192]	; (80161e4 <etharp_raw+0x110>)
 8016124:	482e      	ldr	r0, [pc, #184]	; (80161e0 <etharp_raw+0x10c>)
 8016126:	f001 fecf 	bl	8017ec8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016130:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016132:	4618      	mov	r0, r3
 8016134:	f7f5 fcbc 	bl	800bab0 <lwip_htons>
 8016138:	4603      	mov	r3, r0
 801613a:	461a      	mov	r2, r3
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016146:	2b06      	cmp	r3, #6
 8016148:	d006      	beq.n	8016158 <etharp_raw+0x84>
 801614a:	4b23      	ldr	r3, [pc, #140]	; (80161d8 <etharp_raw+0x104>)
 801614c:	f240 4269 	movw	r2, #1129	; 0x469
 8016150:	4925      	ldr	r1, [pc, #148]	; (80161e8 <etharp_raw+0x114>)
 8016152:	4823      	ldr	r0, [pc, #140]	; (80161e0 <etharp_raw+0x10c>)
 8016154:	f001 feb8 	bl	8017ec8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	3308      	adds	r3, #8
 801615c:	2206      	movs	r2, #6
 801615e:	6839      	ldr	r1, [r7, #0]
 8016160:	4618      	mov	r0, r3
 8016162:	f001 fe40 	bl	8017de6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016166:	697b      	ldr	r3, [r7, #20]
 8016168:	3312      	adds	r3, #18
 801616a:	2206      	movs	r2, #6
 801616c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801616e:	4618      	mov	r0, r3
 8016170:	f001 fe39 	bl	8017de6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	330e      	adds	r3, #14
 8016178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801617a:	6812      	ldr	r2, [r2, #0]
 801617c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801617e:	697b      	ldr	r3, [r7, #20]
 8016180:	3318      	adds	r3, #24
 8016182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016184:	6812      	ldr	r2, [r2, #0]
 8016186:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	2200      	movs	r2, #0
 801618c:	701a      	strb	r2, [r3, #0]
 801618e:	2200      	movs	r2, #0
 8016190:	f042 0201 	orr.w	r2, r2, #1
 8016194:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	2200      	movs	r2, #0
 801619a:	f042 0208 	orr.w	r2, r2, #8
 801619e:	709a      	strb	r2, [r3, #2]
 80161a0:	2200      	movs	r2, #0
 80161a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	2206      	movs	r2, #6
 80161a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	2204      	movs	r2, #4
 80161ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80161b0:	f640 0306 	movw	r3, #2054	; 0x806
 80161b4:	9300      	str	r3, [sp, #0]
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	69b9      	ldr	r1, [r7, #24]
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f001 fb93 	bl	80178e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80161c2:	69b8      	ldr	r0, [r7, #24]
 80161c4:	f7f7 f82c 	bl	800d220 <pbuf_free>
  p = NULL;
 80161c8:	2300      	movs	r3, #0
 80161ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80161cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3720      	adds	r7, #32
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	0801b574 	.word	0x0801b574
 80161dc:	0801b6c4 	.word	0x0801b6c4
 80161e0:	0801b5ec 	.word	0x0801b5ec
 80161e4:	0801b774 	.word	0x0801b774
 80161e8:	0801b7a8 	.word	0x0801b7a8

080161ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80161ec:	b580      	push	{r7, lr}
 80161ee:	b088      	sub	sp, #32
 80161f0:	af04      	add	r7, sp, #16
 80161f2:	60f8      	str	r0, [r7, #12]
 80161f4:	60b9      	str	r1, [r7, #8]
 80161f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016208:	2201      	movs	r2, #1
 801620a:	9203      	str	r2, [sp, #12]
 801620c:	68ba      	ldr	r2, [r7, #8]
 801620e:	9202      	str	r2, [sp, #8]
 8016210:	4a06      	ldr	r2, [pc, #24]	; (801622c <etharp_request_dst+0x40>)
 8016212:	9201      	str	r2, [sp, #4]
 8016214:	9300      	str	r3, [sp, #0]
 8016216:	4603      	mov	r3, r0
 8016218:	687a      	ldr	r2, [r7, #4]
 801621a:	68f8      	ldr	r0, [r7, #12]
 801621c:	f7ff ff5a 	bl	80160d4 <etharp_raw>
 8016220:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	0801bed8 	.word	0x0801bed8

08016230 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	6078      	str	r0, [r7, #4]
 8016238:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801623a:	4a05      	ldr	r2, [pc, #20]	; (8016250 <etharp_request+0x20>)
 801623c:	6839      	ldr	r1, [r7, #0]
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f7ff ffd4 	bl	80161ec <etharp_request_dst>
 8016244:	4603      	mov	r3, r0
}
 8016246:	4618      	mov	r0, r3
 8016248:	3708      	adds	r7, #8
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	0801bed0 	.word	0x0801bed0

08016254 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b08e      	sub	sp, #56	; 0x38
 8016258:	af04      	add	r7, sp, #16
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801625e:	4b79      	ldr	r3, [pc, #484]	; (8016444 <icmp_input+0x1f0>)
 8016260:	689b      	ldr	r3, [r3, #8]
 8016262:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	f003 030f 	and.w	r3, r3, #15
 801626c:	b2db      	uxtb	r3, r3
 801626e:	009b      	lsls	r3, r3, #2
 8016270:	b2db      	uxtb	r3, r3
 8016272:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016274:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016276:	2b13      	cmp	r3, #19
 8016278:	f240 80cd 	bls.w	8016416 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	895b      	ldrh	r3, [r3, #10]
 8016280:	2b03      	cmp	r3, #3
 8016282:	f240 80ca 	bls.w	801641a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	685b      	ldr	r3, [r3, #4]
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016290:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016294:	2b00      	cmp	r3, #0
 8016296:	f000 80b7 	beq.w	8016408 <icmp_input+0x1b4>
 801629a:	2b08      	cmp	r3, #8
 801629c:	f040 80b7 	bne.w	801640e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80162a0:	4b69      	ldr	r3, [pc, #420]	; (8016448 <icmp_input+0x1f4>)
 80162a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80162a4:	4b67      	ldr	r3, [pc, #412]	; (8016444 <icmp_input+0x1f0>)
 80162a6:	695b      	ldr	r3, [r3, #20]
 80162a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80162ac:	2be0      	cmp	r3, #224	; 0xe0
 80162ae:	f000 80bb 	beq.w	8016428 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80162b2:	4b64      	ldr	r3, [pc, #400]	; (8016444 <icmp_input+0x1f0>)
 80162b4:	695b      	ldr	r3, [r3, #20]
 80162b6:	4a63      	ldr	r2, [pc, #396]	; (8016444 <icmp_input+0x1f0>)
 80162b8:	6812      	ldr	r2, [r2, #0]
 80162ba:	4611      	mov	r1, r2
 80162bc:	4618      	mov	r0, r3
 80162be:	f000 fc0b 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f040 80b1 	bne.w	801642c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	891b      	ldrh	r3, [r3, #8]
 80162ce:	2b07      	cmp	r3, #7
 80162d0:	f240 80a5 	bls.w	801641e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80162d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162d6:	330e      	adds	r3, #14
 80162d8:	4619      	mov	r1, r3
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7f6 ff0a 	bl	800d0f4 <pbuf_add_header>
 80162e0:	4603      	mov	r3, r0
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d04b      	beq.n	801637e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	891a      	ldrh	r2, [r3, #8]
 80162ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162ec:	4413      	add	r3, r2
 80162ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	891b      	ldrh	r3, [r3, #8]
 80162f4:	8b7a      	ldrh	r2, [r7, #26]
 80162f6:	429a      	cmp	r2, r3
 80162f8:	f0c0 809a 	bcc.w	8016430 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80162fc:	8b7b      	ldrh	r3, [r7, #26]
 80162fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016302:	4619      	mov	r1, r3
 8016304:	200e      	movs	r0, #14
 8016306:	f7f6 fca7 	bl	800cc58 <pbuf_alloc>
 801630a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	2b00      	cmp	r3, #0
 8016310:	f000 8090 	beq.w	8016434 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	895b      	ldrh	r3, [r3, #10]
 8016318:	461a      	mov	r2, r3
 801631a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801631c:	3308      	adds	r3, #8
 801631e:	429a      	cmp	r2, r3
 8016320:	d203      	bcs.n	801632a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016322:	6978      	ldr	r0, [r7, #20]
 8016324:	f7f6 ff7c 	bl	800d220 <pbuf_free>
          goto icmperr;
 8016328:	e085      	b.n	8016436 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016332:	4618      	mov	r0, r3
 8016334:	f001 fd57 	bl	8017de6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801633a:	4619      	mov	r1, r3
 801633c:	6978      	ldr	r0, [r7, #20]
 801633e:	f7f6 fee9 	bl	800d114 <pbuf_remove_header>
 8016342:	4603      	mov	r3, r0
 8016344:	2b00      	cmp	r3, #0
 8016346:	d009      	beq.n	801635c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016348:	4b40      	ldr	r3, [pc, #256]	; (801644c <icmp_input+0x1f8>)
 801634a:	22b6      	movs	r2, #182	; 0xb6
 801634c:	4940      	ldr	r1, [pc, #256]	; (8016450 <icmp_input+0x1fc>)
 801634e:	4841      	ldr	r0, [pc, #260]	; (8016454 <icmp_input+0x200>)
 8016350:	f001 fdba 	bl	8017ec8 <iprintf>
          pbuf_free(r);
 8016354:	6978      	ldr	r0, [r7, #20]
 8016356:	f7f6 ff63 	bl	800d220 <pbuf_free>
          goto icmperr;
 801635a:	e06c      	b.n	8016436 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801635c:	6879      	ldr	r1, [r7, #4]
 801635e:	6978      	ldr	r0, [r7, #20]
 8016360:	f7f7 f892 	bl	800d488 <pbuf_copy>
 8016364:	4603      	mov	r3, r0
 8016366:	2b00      	cmp	r3, #0
 8016368:	d003      	beq.n	8016372 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801636a:	6978      	ldr	r0, [r7, #20]
 801636c:	f7f6 ff58 	bl	800d220 <pbuf_free>
          goto icmperr;
 8016370:	e061      	b.n	8016436 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f7f6 ff54 	bl	800d220 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	607b      	str	r3, [r7, #4]
 801637c:	e00f      	b.n	801639e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801637e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016380:	330e      	adds	r3, #14
 8016382:	4619      	mov	r1, r3
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	f7f6 fec5 	bl	800d114 <pbuf_remove_header>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d006      	beq.n	801639e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016390:	4b2e      	ldr	r3, [pc, #184]	; (801644c <icmp_input+0x1f8>)
 8016392:	22c7      	movs	r2, #199	; 0xc7
 8016394:	4930      	ldr	r1, [pc, #192]	; (8016458 <icmp_input+0x204>)
 8016396:	482f      	ldr	r0, [pc, #188]	; (8016454 <icmp_input+0x200>)
 8016398:	f001 fd96 	bl	8017ec8 <iprintf>
          goto icmperr;
 801639c:	e04b      	b.n	8016436 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80163a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80163a6:	4619      	mov	r1, r3
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7f6 fea3 	bl	800d0f4 <pbuf_add_header>
 80163ae:	4603      	mov	r3, r0
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d12b      	bne.n	801640c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80163ba:	69fb      	ldr	r3, [r7, #28]
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80163c2:	4b20      	ldr	r3, [pc, #128]	; (8016444 <icmp_input+0x1f0>)
 80163c4:	691a      	ldr	r2, [r3, #16]
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	2200      	movs	r2, #0
 80163ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80163d0:	693b      	ldr	r3, [r7, #16]
 80163d2:	2200      	movs	r2, #0
 80163d4:	709a      	strb	r2, [r3, #2]
 80163d6:	2200      	movs	r2, #0
 80163d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	22ff      	movs	r2, #255	; 0xff
 80163de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	2200      	movs	r2, #0
 80163e4:	729a      	strb	r2, [r3, #10]
 80163e6:	2200      	movs	r2, #0
 80163e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	9302      	str	r3, [sp, #8]
 80163ee:	2301      	movs	r3, #1
 80163f0:	9301      	str	r3, [sp, #4]
 80163f2:	2300      	movs	r3, #0
 80163f4:	9300      	str	r3, [sp, #0]
 80163f6:	23ff      	movs	r3, #255	; 0xff
 80163f8:	2200      	movs	r2, #0
 80163fa:	69f9      	ldr	r1, [r7, #28]
 80163fc:	6878      	ldr	r0, [r7, #4]
 80163fe:	f000 fa93 	bl	8016928 <ip4_output_if>
 8016402:	4603      	mov	r3, r0
 8016404:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016406:	e001      	b.n	801640c <icmp_input+0x1b8>
      break;
 8016408:	bf00      	nop
 801640a:	e000      	b.n	801640e <icmp_input+0x1ba>
      break;
 801640c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f7f6 ff06 	bl	800d220 <pbuf_free>
  return;
 8016414:	e013      	b.n	801643e <icmp_input+0x1ea>
    goto lenerr;
 8016416:	bf00      	nop
 8016418:	e002      	b.n	8016420 <icmp_input+0x1cc>
    goto lenerr;
 801641a:	bf00      	nop
 801641c:	e000      	b.n	8016420 <icmp_input+0x1cc>
        goto lenerr;
 801641e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f7f6 fefd 	bl	800d220 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016426:	e00a      	b.n	801643e <icmp_input+0x1ea>
        goto icmperr;
 8016428:	bf00      	nop
 801642a:	e004      	b.n	8016436 <icmp_input+0x1e2>
        goto icmperr;
 801642c:	bf00      	nop
 801642e:	e002      	b.n	8016436 <icmp_input+0x1e2>
          goto icmperr;
 8016430:	bf00      	nop
 8016432:	e000      	b.n	8016436 <icmp_input+0x1e2>
          goto icmperr;
 8016434:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f7f6 fef2 	bl	800d220 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801643c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801643e:	3728      	adds	r7, #40	; 0x28
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	200096d0 	.word	0x200096d0
 8016448:	200096e4 	.word	0x200096e4
 801644c:	0801b7ec 	.word	0x0801b7ec
 8016450:	0801b824 	.word	0x0801b824
 8016454:	0801b85c 	.word	0x0801b85c
 8016458:	0801b884 	.word	0x0801b884

0801645c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	460b      	mov	r3, r1
 8016466:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016468:	78fb      	ldrb	r3, [r7, #3]
 801646a:	461a      	mov	r2, r3
 801646c:	2103      	movs	r1, #3
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f814 	bl	801649c <icmp_send_response>
}
 8016474:	bf00      	nop
 8016476:	3708      	adds	r7, #8
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}

0801647c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af00      	add	r7, sp, #0
 8016482:	6078      	str	r0, [r7, #4]
 8016484:	460b      	mov	r3, r1
 8016486:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016488:	78fb      	ldrb	r3, [r7, #3]
 801648a:	461a      	mov	r2, r3
 801648c:	210b      	movs	r1, #11
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 f804 	bl	801649c <icmp_send_response>
}
 8016494:	bf00      	nop
 8016496:	3708      	adds	r7, #8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}

0801649c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b08c      	sub	sp, #48	; 0x30
 80164a0:	af04      	add	r7, sp, #16
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	460b      	mov	r3, r1
 80164a6:	70fb      	strb	r3, [r7, #3]
 80164a8:	4613      	mov	r3, r2
 80164aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80164ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164b0:	2124      	movs	r1, #36	; 0x24
 80164b2:	2022      	movs	r0, #34	; 0x22
 80164b4:	f7f6 fbd0 	bl	800cc58 <pbuf_alloc>
 80164b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80164ba:	69fb      	ldr	r3, [r7, #28]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d04c      	beq.n	801655a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80164c0:	69fb      	ldr	r3, [r7, #28]
 80164c2:	895b      	ldrh	r3, [r3, #10]
 80164c4:	2b23      	cmp	r3, #35	; 0x23
 80164c6:	d806      	bhi.n	80164d6 <icmp_send_response+0x3a>
 80164c8:	4b26      	ldr	r3, [pc, #152]	; (8016564 <icmp_send_response+0xc8>)
 80164ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80164ce:	4926      	ldr	r1, [pc, #152]	; (8016568 <icmp_send_response+0xcc>)
 80164d0:	4826      	ldr	r0, [pc, #152]	; (801656c <icmp_send_response+0xd0>)
 80164d2:	f001 fcf9 	bl	8017ec8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	78fa      	ldrb	r2, [r7, #3]
 80164e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	78ba      	ldrb	r2, [r7, #2]
 80164ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	2200      	movs	r2, #0
 80164f2:	711a      	strb	r2, [r3, #4]
 80164f4:	2200      	movs	r2, #0
 80164f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	2200      	movs	r2, #0
 80164fc:	719a      	strb	r2, [r3, #6]
 80164fe:	2200      	movs	r2, #0
 8016500:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	f103 0008 	add.w	r0, r3, #8
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
 801650e:	221c      	movs	r2, #28
 8016510:	4619      	mov	r1, r3
 8016512:	f001 fc68 	bl	8017de6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016516:	69bb      	ldr	r3, [r7, #24]
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801651c:	f107 030c 	add.w	r3, r7, #12
 8016520:	4618      	mov	r0, r3
 8016522:	f000 f825 	bl	8016570 <ip4_route>
 8016526:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d011      	beq.n	8016552 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801652e:	697b      	ldr	r3, [r7, #20]
 8016530:	2200      	movs	r2, #0
 8016532:	709a      	strb	r2, [r3, #2]
 8016534:	2200      	movs	r2, #0
 8016536:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016538:	f107 020c 	add.w	r2, r7, #12
 801653c:	693b      	ldr	r3, [r7, #16]
 801653e:	9302      	str	r3, [sp, #8]
 8016540:	2301      	movs	r3, #1
 8016542:	9301      	str	r3, [sp, #4]
 8016544:	2300      	movs	r3, #0
 8016546:	9300      	str	r3, [sp, #0]
 8016548:	23ff      	movs	r3, #255	; 0xff
 801654a:	2100      	movs	r1, #0
 801654c:	69f8      	ldr	r0, [r7, #28]
 801654e:	f000 f9eb 	bl	8016928 <ip4_output_if>
  }
  pbuf_free(q);
 8016552:	69f8      	ldr	r0, [r7, #28]
 8016554:	f7f6 fe64 	bl	800d220 <pbuf_free>
 8016558:	e000      	b.n	801655c <icmp_send_response+0xc0>
    return;
 801655a:	bf00      	nop
}
 801655c:	3720      	adds	r7, #32
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}
 8016562:	bf00      	nop
 8016564:	0801b7ec 	.word	0x0801b7ec
 8016568:	0801b8b8 	.word	0x0801b8b8
 801656c:	0801b85c 	.word	0x0801b85c

08016570 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016570:	b480      	push	{r7}
 8016572:	b085      	sub	sp, #20
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016578:	4b33      	ldr	r3, [pc, #204]	; (8016648 <ip4_route+0xd8>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	60fb      	str	r3, [r7, #12]
 801657e:	e036      	b.n	80165ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016580:	68fb      	ldr	r3, [r7, #12]
 8016582:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016586:	f003 0301 	and.w	r3, r3, #1
 801658a:	b2db      	uxtb	r3, r3
 801658c:	2b00      	cmp	r3, #0
 801658e:	d02b      	beq.n	80165e8 <ip4_route+0x78>
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016596:	089b      	lsrs	r3, r3, #2
 8016598:	f003 0301 	and.w	r3, r3, #1
 801659c:	b2db      	uxtb	r3, r3
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d022      	beq.n	80165e8 <ip4_route+0x78>
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	3304      	adds	r3, #4
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d01d      	beq.n	80165e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	3304      	adds	r3, #4
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	405a      	eors	r2, r3
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	3308      	adds	r3, #8
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	4013      	ands	r3, r2
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d101      	bne.n	80165c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	e038      	b.n	801663a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80165ce:	f003 0302 	and.w	r3, r3, #2
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d108      	bne.n	80165e8 <ip4_route+0x78>
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	681a      	ldr	r2, [r3, #0]
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	330c      	adds	r3, #12
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d101      	bne.n	80165e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	e028      	b.n	801663a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	60fb      	str	r3, [r7, #12]
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d1c5      	bne.n	8016580 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80165f4:	4b15      	ldr	r3, [pc, #84]	; (801664c <ip4_route+0xdc>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d01a      	beq.n	8016632 <ip4_route+0xc2>
 80165fc:	4b13      	ldr	r3, [pc, #76]	; (801664c <ip4_route+0xdc>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016604:	f003 0301 	and.w	r3, r3, #1
 8016608:	2b00      	cmp	r3, #0
 801660a:	d012      	beq.n	8016632 <ip4_route+0xc2>
 801660c:	4b0f      	ldr	r3, [pc, #60]	; (801664c <ip4_route+0xdc>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016614:	f003 0304 	and.w	r3, r3, #4
 8016618:	2b00      	cmp	r3, #0
 801661a:	d00a      	beq.n	8016632 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801661c:	4b0b      	ldr	r3, [pc, #44]	; (801664c <ip4_route+0xdc>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	3304      	adds	r3, #4
 8016622:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016624:	2b00      	cmp	r3, #0
 8016626:	d004      	beq.n	8016632 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	b2db      	uxtb	r3, r3
 801662e:	2b7f      	cmp	r3, #127	; 0x7f
 8016630:	d101      	bne.n	8016636 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016632:	2300      	movs	r3, #0
 8016634:	e001      	b.n	801663a <ip4_route+0xca>
  }

  return netif_default;
 8016636:	4b05      	ldr	r3, [pc, #20]	; (801664c <ip4_route+0xdc>)
 8016638:	681b      	ldr	r3, [r3, #0]
}
 801663a:	4618      	mov	r0, r3
 801663c:	3714      	adds	r7, #20
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	2000cdf4 	.word	0x2000cdf4
 801664c:	2000cdf8 	.word	0x2000cdf8

08016650 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801665e:	f003 0301 	and.w	r3, r3, #1
 8016662:	b2db      	uxtb	r3, r3
 8016664:	2b00      	cmp	r3, #0
 8016666:	d016      	beq.n	8016696 <ip4_input_accept+0x46>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	3304      	adds	r3, #4
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d011      	beq.n	8016696 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016672:	4b0b      	ldr	r3, [pc, #44]	; (80166a0 <ip4_input_accept+0x50>)
 8016674:	695a      	ldr	r2, [r3, #20]
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	3304      	adds	r3, #4
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	429a      	cmp	r2, r3
 801667e:	d008      	beq.n	8016692 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016680:	4b07      	ldr	r3, [pc, #28]	; (80166a0 <ip4_input_accept+0x50>)
 8016682:	695b      	ldr	r3, [r3, #20]
 8016684:	6879      	ldr	r1, [r7, #4]
 8016686:	4618      	mov	r0, r3
 8016688:	f000 fa26 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 801668c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801668e:	2b00      	cmp	r3, #0
 8016690:	d001      	beq.n	8016696 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016692:	2301      	movs	r3, #1
 8016694:	e000      	b.n	8016698 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016696:	2300      	movs	r3, #0
}
 8016698:	4618      	mov	r0, r3
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	200096d0 	.word	0x200096d0

080166a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80166a4:	b580      	push	{r7, lr}
 80166a6:	b088      	sub	sp, #32
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80166ae:	2301      	movs	r3, #1
 80166b0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	685b      	ldr	r3, [r3, #4]
 80166b6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	091b      	lsrs	r3, r3, #4
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	2b04      	cmp	r3, #4
 80166c2:	d004      	beq.n	80166ce <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80166c4:	6878      	ldr	r0, [r7, #4]
 80166c6:	f7f6 fdab 	bl	800d220 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e123      	b.n	8016916 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80166ce:	69fb      	ldr	r3, [r7, #28]
 80166d0:	781b      	ldrb	r3, [r3, #0]
 80166d2:	f003 030f 	and.w	r3, r3, #15
 80166d6:	b2db      	uxtb	r3, r3
 80166d8:	009b      	lsls	r3, r3, #2
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	885b      	ldrh	r3, [r3, #2]
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7f5 f9e3 	bl	800bab0 <lwip_htons>
 80166ea:	4603      	mov	r3, r0
 80166ec:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	891b      	ldrh	r3, [r3, #8]
 80166f2:	8a3a      	ldrh	r2, [r7, #16]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d204      	bcs.n	8016702 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80166f8:	8a3b      	ldrh	r3, [r7, #16]
 80166fa:	4619      	mov	r1, r3
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f7f6 fc09 	bl	800cf14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	895b      	ldrh	r3, [r3, #10]
 8016706:	8a7a      	ldrh	r2, [r7, #18]
 8016708:	429a      	cmp	r2, r3
 801670a:	d807      	bhi.n	801671c <ip4_input+0x78>
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	891b      	ldrh	r3, [r3, #8]
 8016710:	8a3a      	ldrh	r2, [r7, #16]
 8016712:	429a      	cmp	r2, r3
 8016714:	d802      	bhi.n	801671c <ip4_input+0x78>
 8016716:	8a7b      	ldrh	r3, [r7, #18]
 8016718:	2b13      	cmp	r3, #19
 801671a:	d804      	bhi.n	8016726 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801671c:	6878      	ldr	r0, [r7, #4]
 801671e:	f7f6 fd7f 	bl	800d220 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016722:	2300      	movs	r3, #0
 8016724:	e0f7      	b.n	8016916 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	691b      	ldr	r3, [r3, #16]
 801672a:	4a7d      	ldr	r2, [pc, #500]	; (8016920 <ip4_input+0x27c>)
 801672c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	68db      	ldr	r3, [r3, #12]
 8016732:	4a7b      	ldr	r2, [pc, #492]	; (8016920 <ip4_input+0x27c>)
 8016734:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016736:	4b7a      	ldr	r3, [pc, #488]	; (8016920 <ip4_input+0x27c>)
 8016738:	695b      	ldr	r3, [r3, #20]
 801673a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801673e:	2be0      	cmp	r3, #224	; 0xe0
 8016740:	d112      	bne.n	8016768 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016748:	f003 0301 	and.w	r3, r3, #1
 801674c:	b2db      	uxtb	r3, r3
 801674e:	2b00      	cmp	r3, #0
 8016750:	d007      	beq.n	8016762 <ip4_input+0xbe>
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	3304      	adds	r3, #4
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d002      	beq.n	8016762 <ip4_input+0xbe>
      netif = inp;
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	61bb      	str	r3, [r7, #24]
 8016760:	e02a      	b.n	80167b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016762:	2300      	movs	r3, #0
 8016764:	61bb      	str	r3, [r7, #24]
 8016766:	e027      	b.n	80167b8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016768:	6838      	ldr	r0, [r7, #0]
 801676a:	f7ff ff71 	bl	8016650 <ip4_input_accept>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	d002      	beq.n	801677a <ip4_input+0xd6>
      netif = inp;
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	61bb      	str	r3, [r7, #24]
 8016778:	e01e      	b.n	80167b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801677a:	2300      	movs	r3, #0
 801677c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801677e:	4b68      	ldr	r3, [pc, #416]	; (8016920 <ip4_input+0x27c>)
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	b2db      	uxtb	r3, r3
 8016784:	2b7f      	cmp	r3, #127	; 0x7f
 8016786:	d017      	beq.n	80167b8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016788:	4b66      	ldr	r3, [pc, #408]	; (8016924 <ip4_input+0x280>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	61bb      	str	r3, [r7, #24]
 801678e:	e00e      	b.n	80167ae <ip4_input+0x10a>
          if (netif == inp) {
 8016790:	69ba      	ldr	r2, [r7, #24]
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	429a      	cmp	r2, r3
 8016796:	d006      	beq.n	80167a6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016798:	69b8      	ldr	r0, [r7, #24]
 801679a:	f7ff ff59 	bl	8016650 <ip4_input_accept>
 801679e:	4603      	mov	r3, r0
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d108      	bne.n	80167b6 <ip4_input+0x112>
 80167a4:	e000      	b.n	80167a8 <ip4_input+0x104>
            continue;
 80167a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80167a8:	69bb      	ldr	r3, [r7, #24]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	61bb      	str	r3, [r7, #24]
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d1ed      	bne.n	8016790 <ip4_input+0xec>
 80167b4:	e000      	b.n	80167b8 <ip4_input+0x114>
            break;
 80167b6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80167b8:	69bb      	ldr	r3, [r7, #24]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d111      	bne.n	80167e2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	7a5b      	ldrb	r3, [r3, #9]
 80167c2:	2b11      	cmp	r3, #17
 80167c4:	d10d      	bne.n	80167e2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80167c6:	8a7b      	ldrh	r3, [r7, #18]
 80167c8:	69fa      	ldr	r2, [r7, #28]
 80167ca:	4413      	add	r3, r2
 80167cc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	885b      	ldrh	r3, [r3, #2]
 80167d2:	b29b      	uxth	r3, r3
 80167d4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80167d8:	d103      	bne.n	80167e2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80167de:	2300      	movs	r3, #0
 80167e0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80167e2:	697b      	ldr	r3, [r7, #20]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d017      	beq.n	8016818 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80167e8:	4b4d      	ldr	r3, [pc, #308]	; (8016920 <ip4_input+0x27c>)
 80167ea:	691b      	ldr	r3, [r3, #16]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d013      	beq.n	8016818 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80167f0:	4b4b      	ldr	r3, [pc, #300]	; (8016920 <ip4_input+0x27c>)
 80167f2:	691b      	ldr	r3, [r3, #16]
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f000 f96e 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d105      	bne.n	801680e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016802:	4b47      	ldr	r3, [pc, #284]	; (8016920 <ip4_input+0x27c>)
 8016804:	691b      	ldr	r3, [r3, #16]
 8016806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801680a:	2be0      	cmp	r3, #224	; 0xe0
 801680c:	d104      	bne.n	8016818 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f7f6 fd06 	bl	800d220 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016814:	2300      	movs	r3, #0
 8016816:	e07e      	b.n	8016916 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016818:	69bb      	ldr	r3, [r7, #24]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d104      	bne.n	8016828 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7f6 fcfe 	bl	800d220 <pbuf_free>
    return ERR_OK;
 8016824:	2300      	movs	r3, #0
 8016826:	e076      	b.n	8016916 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016828:	69fb      	ldr	r3, [r7, #28]
 801682a:	88db      	ldrh	r3, [r3, #6]
 801682c:	b29b      	uxth	r3, r3
 801682e:	461a      	mov	r2, r3
 8016830:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016834:	4013      	ands	r3, r2
 8016836:	2b00      	cmp	r3, #0
 8016838:	d00b      	beq.n	8016852 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801683a:	6878      	ldr	r0, [r7, #4]
 801683c:	f000 fc92 	bl	8017164 <ip4_reass>
 8016840:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d101      	bne.n	801684c <ip4_input+0x1a8>
      return ERR_OK;
 8016848:	2300      	movs	r3, #0
 801684a:	e064      	b.n	8016916 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016852:	4a33      	ldr	r2, [pc, #204]	; (8016920 <ip4_input+0x27c>)
 8016854:	69bb      	ldr	r3, [r7, #24]
 8016856:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016858:	4a31      	ldr	r2, [pc, #196]	; (8016920 <ip4_input+0x27c>)
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801685e:	4a30      	ldr	r2, [pc, #192]	; (8016920 <ip4_input+0x27c>)
 8016860:	69fb      	ldr	r3, [r7, #28]
 8016862:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	f003 030f 	and.w	r3, r3, #15
 801686c:	b2db      	uxtb	r3, r3
 801686e:	009b      	lsls	r3, r3, #2
 8016870:	b2db      	uxtb	r3, r3
 8016872:	b29a      	uxth	r2, r3
 8016874:	4b2a      	ldr	r3, [pc, #168]	; (8016920 <ip4_input+0x27c>)
 8016876:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016878:	8a7b      	ldrh	r3, [r7, #18]
 801687a:	4619      	mov	r1, r3
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f7f6 fc49 	bl	800d114 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	7a5b      	ldrb	r3, [r3, #9]
 8016886:	2b11      	cmp	r3, #17
 8016888:	d006      	beq.n	8016898 <ip4_input+0x1f4>
 801688a:	2b11      	cmp	r3, #17
 801688c:	dc13      	bgt.n	80168b6 <ip4_input+0x212>
 801688e:	2b01      	cmp	r3, #1
 8016890:	d00c      	beq.n	80168ac <ip4_input+0x208>
 8016892:	2b06      	cmp	r3, #6
 8016894:	d005      	beq.n	80168a2 <ip4_input+0x1fe>
 8016896:	e00e      	b.n	80168b6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016898:	6839      	ldr	r1, [r7, #0]
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f7fc faea 	bl	8012e74 <udp_input>
        break;
 80168a0:	e026      	b.n	80168f0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80168a2:	6839      	ldr	r1, [r7, #0]
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f7f8 faff 	bl	800eea8 <tcp_input>
        break;
 80168aa:	e021      	b.n	80168f0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80168ac:	6839      	ldr	r1, [r7, #0]
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f7ff fcd0 	bl	8016254 <icmp_input>
        break;
 80168b4:	e01c      	b.n	80168f0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80168b6:	4b1a      	ldr	r3, [pc, #104]	; (8016920 <ip4_input+0x27c>)
 80168b8:	695b      	ldr	r3, [r3, #20]
 80168ba:	69b9      	ldr	r1, [r7, #24]
 80168bc:	4618      	mov	r0, r3
 80168be:	f000 f90b 	bl	8016ad8 <ip4_addr_isbroadcast_u32>
 80168c2:	4603      	mov	r3, r0
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d10f      	bne.n	80168e8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168c8:	4b15      	ldr	r3, [pc, #84]	; (8016920 <ip4_input+0x27c>)
 80168ca:	695b      	ldr	r3, [r3, #20]
 80168cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80168d0:	2be0      	cmp	r3, #224	; 0xe0
 80168d2:	d009      	beq.n	80168e8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80168d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168d8:	4619      	mov	r1, r3
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f7f6 fc8d 	bl	800d1fa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80168e0:	2102      	movs	r1, #2
 80168e2:	6878      	ldr	r0, [r7, #4]
 80168e4:	f7ff fdba 	bl	801645c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f7f6 fc99 	bl	800d220 <pbuf_free>
        break;
 80168ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80168f0:	4b0b      	ldr	r3, [pc, #44]	; (8016920 <ip4_input+0x27c>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80168f6:	4b0a      	ldr	r3, [pc, #40]	; (8016920 <ip4_input+0x27c>)
 80168f8:	2200      	movs	r2, #0
 80168fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80168fc:	4b08      	ldr	r3, [pc, #32]	; (8016920 <ip4_input+0x27c>)
 80168fe:	2200      	movs	r2, #0
 8016900:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016902:	4b07      	ldr	r3, [pc, #28]	; (8016920 <ip4_input+0x27c>)
 8016904:	2200      	movs	r2, #0
 8016906:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016908:	4b05      	ldr	r3, [pc, #20]	; (8016920 <ip4_input+0x27c>)
 801690a:	2200      	movs	r2, #0
 801690c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801690e:	4b04      	ldr	r3, [pc, #16]	; (8016920 <ip4_input+0x27c>)
 8016910:	2200      	movs	r2, #0
 8016912:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3720      	adds	r7, #32
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	200096d0 	.word	0x200096d0
 8016924:	2000cdf4 	.word	0x2000cdf4

08016928 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b08a      	sub	sp, #40	; 0x28
 801692c:	af04      	add	r7, sp, #16
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	60b9      	str	r1, [r7, #8]
 8016932:	607a      	str	r2, [r7, #4]
 8016934:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016936:	68bb      	ldr	r3, [r7, #8]
 8016938:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d009      	beq.n	8016954 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d003      	beq.n	801694e <ip4_output_if+0x26>
 8016946:	68bb      	ldr	r3, [r7, #8]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d102      	bne.n	8016954 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016950:	3304      	adds	r3, #4
 8016952:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016954:	78fa      	ldrb	r2, [r7, #3]
 8016956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016958:	9302      	str	r3, [sp, #8]
 801695a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801695e:	9301      	str	r3, [sp, #4]
 8016960:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016964:	9300      	str	r3, [sp, #0]
 8016966:	4613      	mov	r3, r2
 8016968:	687a      	ldr	r2, [r7, #4]
 801696a:	6979      	ldr	r1, [r7, #20]
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f000 f805 	bl	801697c <ip4_output_if_src>
 8016972:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016974:	4618      	mov	r0, r3
 8016976:	3718      	adds	r7, #24
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b088      	sub	sp, #32
 8016980:	af00      	add	r7, sp, #0
 8016982:	60f8      	str	r0, [r7, #12]
 8016984:	60b9      	str	r1, [r7, #8]
 8016986:	607a      	str	r2, [r7, #4]
 8016988:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	7b9b      	ldrb	r3, [r3, #14]
 801698e:	2b01      	cmp	r3, #1
 8016990:	d006      	beq.n	80169a0 <ip4_output_if_src+0x24>
 8016992:	4b4b      	ldr	r3, [pc, #300]	; (8016ac0 <ip4_output_if_src+0x144>)
 8016994:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016998:	494a      	ldr	r1, [pc, #296]	; (8016ac4 <ip4_output_if_src+0x148>)
 801699a:	484b      	ldr	r0, [pc, #300]	; (8016ac8 <ip4_output_if_src+0x14c>)
 801699c:	f001 fa94 	bl	8017ec8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d060      	beq.n	8016a68 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80169a6:	2314      	movs	r3, #20
 80169a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80169aa:	2114      	movs	r1, #20
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f7f6 fba1 	bl	800d0f4 <pbuf_add_header>
 80169b2:	4603      	mov	r3, r0
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d002      	beq.n	80169be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80169b8:	f06f 0301 	mvn.w	r3, #1
 80169bc:	e07c      	b.n	8016ab8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	685b      	ldr	r3, [r3, #4]
 80169c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	895b      	ldrh	r3, [r3, #10]
 80169c8:	2b13      	cmp	r3, #19
 80169ca:	d806      	bhi.n	80169da <ip4_output_if_src+0x5e>
 80169cc:	4b3c      	ldr	r3, [pc, #240]	; (8016ac0 <ip4_output_if_src+0x144>)
 80169ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80169d2:	493e      	ldr	r1, [pc, #248]	; (8016acc <ip4_output_if_src+0x150>)
 80169d4:	483c      	ldr	r0, [pc, #240]	; (8016ac8 <ip4_output_if_src+0x14c>)
 80169d6:	f001 fa77 	bl	8017ec8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80169da:	69fb      	ldr	r3, [r7, #28]
 80169dc:	78fa      	ldrb	r2, [r7, #3]
 80169de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80169e0:	69fb      	ldr	r3, [r7, #28]
 80169e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80169e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	69fb      	ldr	r3, [r7, #28]
 80169ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80169f0:	8b7b      	ldrh	r3, [r7, #26]
 80169f2:	089b      	lsrs	r3, r3, #2
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	b2db      	uxtb	r3, r3
 80169f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169fc:	b2da      	uxtb	r2, r3
 80169fe:	69fb      	ldr	r3, [r7, #28]
 8016a00:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016a08:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	891b      	ldrh	r3, [r3, #8]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7f5 f84e 	bl	800bab0 <lwip_htons>
 8016a14:	4603      	mov	r3, r0
 8016a16:	461a      	mov	r2, r3
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	2200      	movs	r2, #0
 8016a20:	719a      	strb	r2, [r3, #6]
 8016a22:	2200      	movs	r2, #0
 8016a24:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016a26:	4b2a      	ldr	r3, [pc, #168]	; (8016ad0 <ip4_output_if_src+0x154>)
 8016a28:	881b      	ldrh	r3, [r3, #0]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7f5 f840 	bl	800bab0 <lwip_htons>
 8016a30:	4603      	mov	r3, r0
 8016a32:	461a      	mov	r2, r3
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016a38:	4b25      	ldr	r3, [pc, #148]	; (8016ad0 <ip4_output_if_src+0x154>)
 8016a3a:	881b      	ldrh	r3, [r3, #0]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	b29a      	uxth	r2, r3
 8016a40:	4b23      	ldr	r3, [pc, #140]	; (8016ad0 <ip4_output_if_src+0x154>)
 8016a42:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d104      	bne.n	8016a54 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016a4a:	4b22      	ldr	r3, [pc, #136]	; (8016ad4 <ip4_output_if_src+0x158>)
 8016a4c:	681a      	ldr	r2, [r3, #0]
 8016a4e:	69fb      	ldr	r3, [r7, #28]
 8016a50:	60da      	str	r2, [r3, #12]
 8016a52:	e003      	b.n	8016a5c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	729a      	strb	r2, [r3, #10]
 8016a62:	2200      	movs	r2, #0
 8016a64:	72da      	strb	r2, [r3, #11]
 8016a66:	e00f      	b.n	8016a88 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	895b      	ldrh	r3, [r3, #10]
 8016a6c:	2b13      	cmp	r3, #19
 8016a6e:	d802      	bhi.n	8016a76 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016a70:	f06f 0301 	mvn.w	r3, #1
 8016a74:	e020      	b.n	8016ab8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	691b      	ldr	r3, [r3, #16]
 8016a80:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016a82:	f107 0314 	add.w	r3, r7, #20
 8016a86:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d00c      	beq.n	8016aaa <ip4_output_if_src+0x12e>
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	891a      	ldrh	r2, [r3, #8]
 8016a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d906      	bls.n	8016aaa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	f000 fd4d 	bl	8017540 <ip4_frag>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	e006      	b.n	8016ab8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aac:	695b      	ldr	r3, [r3, #20]
 8016aae:	687a      	ldr	r2, [r7, #4]
 8016ab0:	68f9      	ldr	r1, [r7, #12]
 8016ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ab4:	4798      	blx	r3
 8016ab6:	4603      	mov	r3, r0
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3720      	adds	r7, #32
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}
 8016ac0:	0801b8e4 	.word	0x0801b8e4
 8016ac4:	0801b918 	.word	0x0801b918
 8016ac8:	0801b924 	.word	0x0801b924
 8016acc:	0801b94c 	.word	0x0801b94c
 8016ad0:	20004c0e 	.word	0x20004c0e
 8016ad4:	0801bec8 	.word	0x0801bec8

08016ad8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016ad8:	b480      	push	{r7}
 8016ada:	b085      	sub	sp, #20
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016aec:	d002      	beq.n	8016af4 <ip4_addr_isbroadcast_u32+0x1c>
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d101      	bne.n	8016af8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016af4:	2301      	movs	r3, #1
 8016af6:	e02a      	b.n	8016b4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016afe:	f003 0302 	and.w	r3, r3, #2
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d101      	bne.n	8016b0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016b06:	2300      	movs	r3, #0
 8016b08:	e021      	b.n	8016b4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	3304      	adds	r3, #4
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	687a      	ldr	r2, [r7, #4]
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d101      	bne.n	8016b1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016b16:	2300      	movs	r3, #0
 8016b18:	e019      	b.n	8016b4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016b1a:	68fa      	ldr	r2, [r7, #12]
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	3304      	adds	r3, #4
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	405a      	eors	r2, r3
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	3308      	adds	r3, #8
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4013      	ands	r3, r2
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d10d      	bne.n	8016b4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	3308      	adds	r3, #8
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	43da      	mvns	r2, r3
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	3308      	adds	r3, #8
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d101      	bne.n	8016b4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016b48:	2301      	movs	r3, #1
 8016b4a:	e000      	b.n	8016b4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016b4c:	2300      	movs	r3, #0
  }
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3714      	adds	r7, #20
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr
	...

08016b5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016b62:	2300      	movs	r3, #0
 8016b64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016b66:	4b12      	ldr	r3, [pc, #72]	; (8016bb0 <ip_reass_tmr+0x54>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016b6c:	e018      	b.n	8016ba0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	7fdb      	ldrb	r3, [r3, #31]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00b      	beq.n	8016b8e <ip_reass_tmr+0x32>
      r->timer--;
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	7fdb      	ldrb	r3, [r3, #31]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	60fb      	str	r3, [r7, #12]
 8016b8c:	e008      	b.n	8016ba0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016b98:	68b9      	ldr	r1, [r7, #8]
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f000 f80a 	bl	8016bb4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1e3      	bne.n	8016b6e <ip_reass_tmr+0x12>
    }
  }
}
 8016ba6:	bf00      	nop
 8016ba8:	bf00      	nop
 8016baa:	3710      	adds	r7, #16
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	20004c10 	.word	0x20004c10

08016bb4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b088      	sub	sp, #32
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016bc2:	683a      	ldr	r2, [r7, #0]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	429a      	cmp	r2, r3
 8016bc8:	d105      	bne.n	8016bd6 <ip_reass_free_complete_datagram+0x22>
 8016bca:	4b45      	ldr	r3, [pc, #276]	; (8016ce0 <ip_reass_free_complete_datagram+0x12c>)
 8016bcc:	22ab      	movs	r2, #171	; 0xab
 8016bce:	4945      	ldr	r1, [pc, #276]	; (8016ce4 <ip_reass_free_complete_datagram+0x130>)
 8016bd0:	4845      	ldr	r0, [pc, #276]	; (8016ce8 <ip_reass_free_complete_datagram+0x134>)
 8016bd2:	f001 f979 	bl	8017ec8 <iprintf>
  if (prev != NULL) {
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d00a      	beq.n	8016bf2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d005      	beq.n	8016bf2 <ip_reass_free_complete_datagram+0x3e>
 8016be6:	4b3e      	ldr	r3, [pc, #248]	; (8016ce0 <ip_reass_free_complete_datagram+0x12c>)
 8016be8:	22ad      	movs	r2, #173	; 0xad
 8016bea:	4940      	ldr	r1, [pc, #256]	; (8016cec <ip_reass_free_complete_datagram+0x138>)
 8016bec:	483e      	ldr	r0, [pc, #248]	; (8016ce8 <ip_reass_free_complete_datagram+0x134>)
 8016bee:	f001 f96b 	bl	8017ec8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	889b      	ldrh	r3, [r3, #4]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d12a      	bne.n	8016c5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	685b      	ldr	r3, [r3, #4]
 8016c08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	681a      	ldr	r2, [r3, #0]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016c12:	69bb      	ldr	r3, [r7, #24]
 8016c14:	6858      	ldr	r0, [r3, #4]
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	3308      	adds	r3, #8
 8016c1a:	2214      	movs	r2, #20
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	f001 f8e2 	bl	8017de6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016c22:	2101      	movs	r1, #1
 8016c24:	69b8      	ldr	r0, [r7, #24]
 8016c26:	f7ff fc29 	bl	801647c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016c2a:	69b8      	ldr	r0, [r7, #24]
 8016c2c:	f7f6 fb86 	bl	800d33c <pbuf_clen>
 8016c30:	4603      	mov	r3, r0
 8016c32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c34:	8bfa      	ldrh	r2, [r7, #30]
 8016c36:	8a7b      	ldrh	r3, [r7, #18]
 8016c38:	4413      	add	r3, r2
 8016c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c3e:	db05      	blt.n	8016c4c <ip_reass_free_complete_datagram+0x98>
 8016c40:	4b27      	ldr	r3, [pc, #156]	; (8016ce0 <ip_reass_free_complete_datagram+0x12c>)
 8016c42:	22bc      	movs	r2, #188	; 0xbc
 8016c44:	492a      	ldr	r1, [pc, #168]	; (8016cf0 <ip_reass_free_complete_datagram+0x13c>)
 8016c46:	4828      	ldr	r0, [pc, #160]	; (8016ce8 <ip_reass_free_complete_datagram+0x134>)
 8016c48:	f001 f93e 	bl	8017ec8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016c4c:	8bfa      	ldrh	r2, [r7, #30]
 8016c4e:	8a7b      	ldrh	r3, [r7, #18]
 8016c50:	4413      	add	r3, r2
 8016c52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016c54:	69b8      	ldr	r0, [r7, #24]
 8016c56:	f7f6 fae3 	bl	800d220 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016c60:	e01f      	b.n	8016ca2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	685b      	ldr	r3, [r3, #4]
 8016c66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016c72:	68f8      	ldr	r0, [r7, #12]
 8016c74:	f7f6 fb62 	bl	800d33c <pbuf_clen>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c7c:	8bfa      	ldrh	r2, [r7, #30]
 8016c7e:	8a7b      	ldrh	r3, [r7, #18]
 8016c80:	4413      	add	r3, r2
 8016c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c86:	db05      	blt.n	8016c94 <ip_reass_free_complete_datagram+0xe0>
 8016c88:	4b15      	ldr	r3, [pc, #84]	; (8016ce0 <ip_reass_free_complete_datagram+0x12c>)
 8016c8a:	22cc      	movs	r2, #204	; 0xcc
 8016c8c:	4918      	ldr	r1, [pc, #96]	; (8016cf0 <ip_reass_free_complete_datagram+0x13c>)
 8016c8e:	4816      	ldr	r0, [pc, #88]	; (8016ce8 <ip_reass_free_complete_datagram+0x134>)
 8016c90:	f001 f91a 	bl	8017ec8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016c94:	8bfa      	ldrh	r2, [r7, #30]
 8016c96:	8a7b      	ldrh	r3, [r7, #18]
 8016c98:	4413      	add	r3, r2
 8016c9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	f7f6 fabf 	bl	800d220 <pbuf_free>
  while (p != NULL) {
 8016ca2:	69bb      	ldr	r3, [r7, #24]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d1dc      	bne.n	8016c62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016ca8:	6839      	ldr	r1, [r7, #0]
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f8c2 	bl	8016e34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016cb0:	4b10      	ldr	r3, [pc, #64]	; (8016cf4 <ip_reass_free_complete_datagram+0x140>)
 8016cb2:	881b      	ldrh	r3, [r3, #0]
 8016cb4:	8bfa      	ldrh	r2, [r7, #30]
 8016cb6:	429a      	cmp	r2, r3
 8016cb8:	d905      	bls.n	8016cc6 <ip_reass_free_complete_datagram+0x112>
 8016cba:	4b09      	ldr	r3, [pc, #36]	; (8016ce0 <ip_reass_free_complete_datagram+0x12c>)
 8016cbc:	22d2      	movs	r2, #210	; 0xd2
 8016cbe:	490e      	ldr	r1, [pc, #56]	; (8016cf8 <ip_reass_free_complete_datagram+0x144>)
 8016cc0:	4809      	ldr	r0, [pc, #36]	; (8016ce8 <ip_reass_free_complete_datagram+0x134>)
 8016cc2:	f001 f901 	bl	8017ec8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016cc6:	4b0b      	ldr	r3, [pc, #44]	; (8016cf4 <ip_reass_free_complete_datagram+0x140>)
 8016cc8:	881a      	ldrh	r2, [r3, #0]
 8016cca:	8bfb      	ldrh	r3, [r7, #30]
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	b29a      	uxth	r2, r3
 8016cd0:	4b08      	ldr	r3, [pc, #32]	; (8016cf4 <ip_reass_free_complete_datagram+0x140>)
 8016cd2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016cd4:	8bfb      	ldrh	r3, [r7, #30]
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3720      	adds	r7, #32
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	0801b97c 	.word	0x0801b97c
 8016ce4:	0801b9b8 	.word	0x0801b9b8
 8016ce8:	0801b9c4 	.word	0x0801b9c4
 8016cec:	0801b9ec 	.word	0x0801b9ec
 8016cf0:	0801ba00 	.word	0x0801ba00
 8016cf4:	20004c14 	.word	0x20004c14
 8016cf8:	0801ba20 	.word	0x0801ba20

08016cfc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b08a      	sub	sp, #40	; 0x28
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016d06:	2300      	movs	r3, #0
 8016d08:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016d0e:	2300      	movs	r3, #0
 8016d10:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016d12:	2300      	movs	r3, #0
 8016d14:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016d1a:	4b28      	ldr	r3, [pc, #160]	; (8016dbc <ip_reass_remove_oldest_datagram+0xc0>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d20:	e030      	b.n	8016d84 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	695a      	ldr	r2, [r3, #20]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d10c      	bne.n	8016d48 <ip_reass_remove_oldest_datagram+0x4c>
 8016d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d30:	699a      	ldr	r2, [r3, #24]
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	691b      	ldr	r3, [r3, #16]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d106      	bne.n	8016d48 <ip_reass_remove_oldest_datagram+0x4c>
 8016d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3c:	899a      	ldrh	r2, [r3, #12]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	889b      	ldrh	r3, [r3, #4]
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d014      	beq.n	8016d72 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016d4e:	6a3b      	ldr	r3, [r7, #32]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d104      	bne.n	8016d5e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	61bb      	str	r3, [r7, #24]
 8016d5c:	e009      	b.n	8016d72 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d60:	7fda      	ldrb	r2, [r3, #31]
 8016d62:	6a3b      	ldr	r3, [r7, #32]
 8016d64:	7fdb      	ldrb	r3, [r3, #31]
 8016d66:	429a      	cmp	r2, r3
 8016d68:	d803      	bhi.n	8016d72 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d001      	beq.n	8016d7e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d1cb      	bne.n	8016d22 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016d8a:	6a3b      	ldr	r3, [r7, #32]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d008      	beq.n	8016da2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016d90:	69b9      	ldr	r1, [r7, #24]
 8016d92:	6a38      	ldr	r0, [r7, #32]
 8016d94:	f7ff ff0e 	bl	8016bb4 <ip_reass_free_complete_datagram>
 8016d98:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016d9a:	697a      	ldr	r2, [r7, #20]
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	4413      	add	r3, r2
 8016da0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016da2:	697a      	ldr	r2, [r7, #20]
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	da02      	bge.n	8016db0 <ip_reass_remove_oldest_datagram+0xb4>
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	2b01      	cmp	r3, #1
 8016dae:	dcac      	bgt.n	8016d0a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016db0:	697b      	ldr	r3, [r7, #20]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3728      	adds	r7, #40	; 0x28
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}
 8016dba:	bf00      	nop
 8016dbc:	20004c10 	.word	0x20004c10

08016dc0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
 8016dc8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016dca:	2004      	movs	r0, #4
 8016dcc:	f7f5 fb26 	bl	800c41c <memp_malloc>
 8016dd0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d110      	bne.n	8016dfa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016dd8:	6839      	ldr	r1, [r7, #0]
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f7ff ff8e 	bl	8016cfc <ip_reass_remove_oldest_datagram>
 8016de0:	4602      	mov	r2, r0
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	4293      	cmp	r3, r2
 8016de6:	dc03      	bgt.n	8016df0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016de8:	2004      	movs	r0, #4
 8016dea:	f7f5 fb17 	bl	800c41c <memp_malloc>
 8016dee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d101      	bne.n	8016dfa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016df6:	2300      	movs	r3, #0
 8016df8:	e016      	b.n	8016e28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016dfa:	2220      	movs	r2, #32
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	68f8      	ldr	r0, [r7, #12]
 8016e00:	f000 ffff 	bl	8017e02 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	220f      	movs	r2, #15
 8016e08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016e0a:	4b09      	ldr	r3, [pc, #36]	; (8016e30 <ip_reass_enqueue_new_datagram+0x70>)
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016e12:	4a07      	ldr	r2, [pc, #28]	; (8016e30 <ip_reass_enqueue_new_datagram+0x70>)
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	3308      	adds	r3, #8
 8016e1c:	2214      	movs	r2, #20
 8016e1e:	6879      	ldr	r1, [r7, #4]
 8016e20:	4618      	mov	r0, r3
 8016e22:	f000 ffe0 	bl	8017de6 <memcpy>
  return ipr;
 8016e26:	68fb      	ldr	r3, [r7, #12]
}
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3710      	adds	r7, #16
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}
 8016e30:	20004c10 	.word	0x20004c10

08016e34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016e3e:	4b10      	ldr	r3, [pc, #64]	; (8016e80 <ip_reass_dequeue_datagram+0x4c>)
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	687a      	ldr	r2, [r7, #4]
 8016e44:	429a      	cmp	r2, r3
 8016e46:	d104      	bne.n	8016e52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	4a0c      	ldr	r2, [pc, #48]	; (8016e80 <ip_reass_dequeue_datagram+0x4c>)
 8016e4e:	6013      	str	r3, [r2, #0]
 8016e50:	e00d      	b.n	8016e6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d106      	bne.n	8016e66 <ip_reass_dequeue_datagram+0x32>
 8016e58:	4b0a      	ldr	r3, [pc, #40]	; (8016e84 <ip_reass_dequeue_datagram+0x50>)
 8016e5a:	f240 1245 	movw	r2, #325	; 0x145
 8016e5e:	490a      	ldr	r1, [pc, #40]	; (8016e88 <ip_reass_dequeue_datagram+0x54>)
 8016e60:	480a      	ldr	r0, [pc, #40]	; (8016e8c <ip_reass_dequeue_datagram+0x58>)
 8016e62:	f001 f831 	bl	8017ec8 <iprintf>
    prev->next = ipr->next;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016e6e:	6879      	ldr	r1, [r7, #4]
 8016e70:	2004      	movs	r0, #4
 8016e72:	f7f5 fb25 	bl	800c4c0 <memp_free>
}
 8016e76:	bf00      	nop
 8016e78:	3708      	adds	r7, #8
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	20004c10 	.word	0x20004c10
 8016e84:	0801b97c 	.word	0x0801b97c
 8016e88:	0801ba44 	.word	0x0801ba44
 8016e8c:	0801b9c4 	.word	0x0801b9c4

08016e90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b08c      	sub	sp, #48	; 0x30
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016eaa:	69fb      	ldr	r3, [r7, #28]
 8016eac:	885b      	ldrh	r3, [r3, #2]
 8016eae:	b29b      	uxth	r3, r3
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7f4 fdfd 	bl	800bab0 <lwip_htons>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016eba:	69fb      	ldr	r3, [r7, #28]
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	f003 030f 	and.w	r3, r3, #15
 8016ec2:	b2db      	uxtb	r3, r3
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016ec8:	7e7b      	ldrb	r3, [r7, #25]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	8b7a      	ldrh	r2, [r7, #26]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d202      	bcs.n	8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed6:	e135      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016ed8:	7e7b      	ldrb	r3, [r7, #25]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	8b7a      	ldrh	r2, [r7, #26]
 8016ede:	1ad3      	subs	r3, r2, r3
 8016ee0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016ee2:	69fb      	ldr	r3, [r7, #28]
 8016ee4:	88db      	ldrh	r3, [r3, #6]
 8016ee6:	b29b      	uxth	r3, r3
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7f4 fde1 	bl	800bab0 <lwip_htons>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	00db      	lsls	r3, r3, #3
 8016ef8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	685b      	ldr	r3, [r3, #4]
 8016efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f02:	2200      	movs	r2, #0
 8016f04:	701a      	strb	r2, [r3, #0]
 8016f06:	2200      	movs	r2, #0
 8016f08:	705a      	strb	r2, [r3, #1]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	709a      	strb	r2, [r3, #2]
 8016f0e:	2200      	movs	r2, #0
 8016f10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f14:	8afa      	ldrh	r2, [r7, #22]
 8016f16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016f18:	8afa      	ldrh	r2, [r7, #22]
 8016f1a:	8b7b      	ldrh	r3, [r7, #26]
 8016f1c:	4413      	add	r3, r2
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f26:	88db      	ldrh	r3, [r3, #6]
 8016f28:	b29b      	uxth	r3, r3
 8016f2a:	8afa      	ldrh	r2, [r7, #22]
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d902      	bls.n	8016f36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f30:	f04f 33ff 	mov.w	r3, #4294967295
 8016f34:	e106      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8016f3c:	e068      	b.n	8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f40:	685b      	ldr	r3, [r3, #4]
 8016f42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f46:	889b      	ldrh	r3, [r3, #4]
 8016f48:	b29a      	uxth	r2, r3
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	889b      	ldrh	r3, [r3, #4]
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	429a      	cmp	r2, r3
 8016f52:	d235      	bcs.n	8016fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d020      	beq.n	8016fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f62:	889b      	ldrh	r3, [r3, #4]
 8016f64:	b29a      	uxth	r2, r3
 8016f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f68:	88db      	ldrh	r3, [r3, #6]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	429a      	cmp	r2, r3
 8016f6e:	d307      	bcc.n	8016f80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f72:	88db      	ldrh	r3, [r3, #6]
 8016f74:	b29a      	uxth	r2, r3
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	889b      	ldrh	r3, [r3, #4]
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d902      	bls.n	8016f86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f80:	f04f 33ff 	mov.w	r3, #4294967295
 8016f84:	e0de      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f88:	68ba      	ldr	r2, [r7, #8]
 8016f8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f8e:	88db      	ldrh	r3, [r3, #6]
 8016f90:	b29a      	uxth	r2, r3
 8016f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f94:	889b      	ldrh	r3, [r3, #4]
 8016f96:	b29b      	uxth	r3, r3
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d03d      	beq.n	8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016fa0:	e03a      	b.n	8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fa4:	88db      	ldrh	r3, [r3, #6]
 8016fa6:	b29a      	uxth	r2, r3
 8016fa8:	693b      	ldr	r3, [r7, #16]
 8016faa:	889b      	ldrh	r3, [r3, #4]
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	429a      	cmp	r2, r3
 8016fb0:	d902      	bls.n	8016fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fb6:	e0c5      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	68ba      	ldr	r2, [r7, #8]
 8016fbc:	605a      	str	r2, [r3, #4]
      break;
 8016fbe:	e02b      	b.n	8017018 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fc2:	889b      	ldrh	r3, [r3, #4]
 8016fc4:	b29a      	uxth	r2, r3
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	889b      	ldrh	r3, [r3, #4]
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d102      	bne.n	8016fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd4:	e0b6      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fd8:	889b      	ldrh	r3, [r3, #4]
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	693b      	ldr	r3, [r7, #16]
 8016fde:	88db      	ldrh	r3, [r3, #6]
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	d202      	bcs.n	8016fec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8016fea:	e0ab      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d009      	beq.n	8017006 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff4:	88db      	ldrh	r3, [r3, #6]
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	693b      	ldr	r3, [r7, #16]
 8016ffa:	889b      	ldrh	r3, [r3, #4]
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	429a      	cmp	r2, r3
 8017000:	d001      	beq.n	8017006 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017002:	2300      	movs	r3, #0
 8017004:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801700c:	693b      	ldr	r3, [r7, #16]
 801700e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017012:	2b00      	cmp	r3, #0
 8017014:	d193      	bne.n	8016f3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017016:	e000      	b.n	801701a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017018:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701c:	2b00      	cmp	r3, #0
 801701e:	d12d      	bne.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	2b00      	cmp	r3, #0
 8017024:	d01c      	beq.n	8017060 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017028:	88db      	ldrh	r3, [r3, #6]
 801702a:	b29a      	uxth	r2, r3
 801702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702e:	889b      	ldrh	r3, [r3, #4]
 8017030:	b29b      	uxth	r3, r3
 8017032:	429a      	cmp	r2, r3
 8017034:	d906      	bls.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017036:	4b45      	ldr	r3, [pc, #276]	; (801714c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017038:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801703c:	4944      	ldr	r1, [pc, #272]	; (8017150 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801703e:	4845      	ldr	r0, [pc, #276]	; (8017154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017040:	f000 ff42 	bl	8017ec8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017046:	68ba      	ldr	r2, [r7, #8]
 8017048:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704c:	88db      	ldrh	r3, [r3, #6]
 801704e:	b29a      	uxth	r2, r3
 8017050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017052:	889b      	ldrh	r3, [r3, #4]
 8017054:	b29b      	uxth	r3, r3
 8017056:	429a      	cmp	r2, r3
 8017058:	d010      	beq.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801705a:	2300      	movs	r3, #0
 801705c:	623b      	str	r3, [r7, #32]
 801705e:	e00d      	b.n	801707c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	685b      	ldr	r3, [r3, #4]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d006      	beq.n	8017076 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017068:	4b38      	ldr	r3, [pc, #224]	; (801714c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801706a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801706e:	493a      	ldr	r1, [pc, #232]	; (8017158 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017070:	4838      	ldr	r0, [pc, #224]	; (8017154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017072:	f000 ff29 	bl	8017ec8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	68ba      	ldr	r2, [r7, #8]
 801707a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d105      	bne.n	801708e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	7f9b      	ldrb	r3, [r3, #30]
 8017086:	f003 0301 	and.w	r3, r3, #1
 801708a:	2b00      	cmp	r3, #0
 801708c:	d059      	beq.n	8017142 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801708e:	6a3b      	ldr	r3, [r7, #32]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d04f      	beq.n	8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d006      	beq.n	80170aa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	889b      	ldrh	r3, [r3, #4]
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d002      	beq.n	80170b0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80170aa:	2300      	movs	r3, #0
 80170ac:	623b      	str	r3, [r7, #32]
 80170ae:	e041      	b.n	8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80170b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80170b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80170ba:	e012      	b.n	80170e2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80170bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80170c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c4:	88db      	ldrh	r3, [r3, #6]
 80170c6:	b29a      	uxth	r2, r3
 80170c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170ca:	889b      	ldrh	r3, [r3, #4]
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d002      	beq.n	80170d8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80170d2:	2300      	movs	r3, #0
 80170d4:	623b      	str	r3, [r7, #32]
            break;
 80170d6:	e007      	b.n	80170e8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80170d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170da:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80170dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80170e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d1e9      	bne.n	80170bc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80170e8:	6a3b      	ldr	r3, [r7, #32]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d022      	beq.n	8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	685b      	ldr	r3, [r3, #4]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d106      	bne.n	8017104 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80170f6:	4b15      	ldr	r3, [pc, #84]	; (801714c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80170f8:	f240 12df 	movw	r2, #479	; 0x1df
 80170fc:	4917      	ldr	r1, [pc, #92]	; (801715c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80170fe:	4815      	ldr	r0, [pc, #84]	; (8017154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017100:	f000 fee2 	bl	8017ec8 <iprintf>
          LWIP_ASSERT("sanity check",
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	685b      	ldr	r3, [r3, #4]
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801710c:	429a      	cmp	r2, r3
 801710e:	d106      	bne.n	801711e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017110:	4b0e      	ldr	r3, [pc, #56]	; (801714c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017112:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017116:	4911      	ldr	r1, [pc, #68]	; (801715c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017118:	480e      	ldr	r0, [pc, #56]	; (8017154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801711a:	f000 fed5 	bl	8017ec8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d006      	beq.n	8017134 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017126:	4b09      	ldr	r3, [pc, #36]	; (801714c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017128:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801712c:	490c      	ldr	r1, [pc, #48]	; (8017160 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801712e:	4809      	ldr	r0, [pc, #36]	; (8017154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017130:	f000 feca 	bl	8017ec8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017134:	6a3b      	ldr	r3, [r7, #32]
 8017136:	2b00      	cmp	r3, #0
 8017138:	bf14      	ite	ne
 801713a:	2301      	movne	r3, #1
 801713c:	2300      	moveq	r3, #0
 801713e:	b2db      	uxtb	r3, r3
 8017140:	e000      	b.n	8017144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017142:	2300      	movs	r3, #0
}
 8017144:	4618      	mov	r0, r3
 8017146:	3730      	adds	r7, #48	; 0x30
 8017148:	46bd      	mov	sp, r7
 801714a:	bd80      	pop	{r7, pc}
 801714c:	0801b97c 	.word	0x0801b97c
 8017150:	0801ba60 	.word	0x0801ba60
 8017154:	0801b9c4 	.word	0x0801b9c4
 8017158:	0801ba80 	.word	0x0801ba80
 801715c:	0801bab8 	.word	0x0801bab8
 8017160:	0801bac8 	.word	0x0801bac8

08017164 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b08e      	sub	sp, #56	; 0x38
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	685b      	ldr	r3, [r3, #4]
 8017170:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	f003 030f 	and.w	r3, r3, #15
 801717a:	b2db      	uxtb	r3, r3
 801717c:	009b      	lsls	r3, r3, #2
 801717e:	b2db      	uxtb	r3, r3
 8017180:	2b14      	cmp	r3, #20
 8017182:	f040 8167 	bne.w	8017454 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017188:	88db      	ldrh	r3, [r3, #6]
 801718a:	b29b      	uxth	r3, r3
 801718c:	4618      	mov	r0, r3
 801718e:	f7f4 fc8f 	bl	800bab0 <lwip_htons>
 8017192:	4603      	mov	r3, r0
 8017194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017198:	b29b      	uxth	r3, r3
 801719a:	00db      	lsls	r3, r3, #3
 801719c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a0:	885b      	ldrh	r3, [r3, #2]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	4618      	mov	r0, r3
 80171a6:	f7f4 fc83 	bl	800bab0 <lwip_htons>
 80171aa:	4603      	mov	r3, r0
 80171ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80171ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b0:	781b      	ldrb	r3, [r3, #0]
 80171b2:	f003 030f 	and.w	r3, r3, #15
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	009b      	lsls	r3, r3, #2
 80171ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80171be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80171c6:	429a      	cmp	r2, r3
 80171c8:	f0c0 8146 	bcc.w	8017458 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80171cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80171d0:	b29b      	uxth	r3, r3
 80171d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80171d4:	1ad3      	subs	r3, r2, r3
 80171d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f7f6 f8af 	bl	800d33c <pbuf_clen>
 80171de:	4603      	mov	r3, r0
 80171e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80171e2:	4b9f      	ldr	r3, [pc, #636]	; (8017460 <ip4_reass+0x2fc>)
 80171e4:	881b      	ldrh	r3, [r3, #0]
 80171e6:	461a      	mov	r2, r3
 80171e8:	8c3b      	ldrh	r3, [r7, #32]
 80171ea:	4413      	add	r3, r2
 80171ec:	2b0a      	cmp	r3, #10
 80171ee:	dd10      	ble.n	8017212 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80171f0:	8c3b      	ldrh	r3, [r7, #32]
 80171f2:	4619      	mov	r1, r3
 80171f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171f6:	f7ff fd81 	bl	8016cfc <ip_reass_remove_oldest_datagram>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f000 812d 	beq.w	801745c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017202:	4b97      	ldr	r3, [pc, #604]	; (8017460 <ip4_reass+0x2fc>)
 8017204:	881b      	ldrh	r3, [r3, #0]
 8017206:	461a      	mov	r2, r3
 8017208:	8c3b      	ldrh	r3, [r7, #32]
 801720a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801720c:	2b0a      	cmp	r3, #10
 801720e:	f300 8125 	bgt.w	801745c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017212:	4b94      	ldr	r3, [pc, #592]	; (8017464 <ip4_reass+0x300>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	633b      	str	r3, [r7, #48]	; 0x30
 8017218:	e015      	b.n	8017246 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721c:	695a      	ldr	r2, [r3, #20]
 801721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	429a      	cmp	r2, r3
 8017224:	d10c      	bne.n	8017240 <ip4_reass+0xdc>
 8017226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017228:	699a      	ldr	r2, [r3, #24]
 801722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722c:	691b      	ldr	r3, [r3, #16]
 801722e:	429a      	cmp	r2, r3
 8017230:	d106      	bne.n	8017240 <ip4_reass+0xdc>
 8017232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017234:	899a      	ldrh	r2, [r3, #12]
 8017236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017238:	889b      	ldrh	r3, [r3, #4]
 801723a:	b29b      	uxth	r3, r3
 801723c:	429a      	cmp	r2, r3
 801723e:	d006      	beq.n	801724e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	633b      	str	r3, [r7, #48]	; 0x30
 8017246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017248:	2b00      	cmp	r3, #0
 801724a:	d1e6      	bne.n	801721a <ip4_reass+0xb6>
 801724c:	e000      	b.n	8017250 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801724e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017252:	2b00      	cmp	r3, #0
 8017254:	d109      	bne.n	801726a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017256:	8c3b      	ldrh	r3, [r7, #32]
 8017258:	4619      	mov	r1, r3
 801725a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801725c:	f7ff fdb0 	bl	8016dc0 <ip_reass_enqueue_new_datagram>
 8017260:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017264:	2b00      	cmp	r3, #0
 8017266:	d11c      	bne.n	80172a2 <ip4_reass+0x13e>
      goto nullreturn;
 8017268:	e109      	b.n	801747e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801726c:	88db      	ldrh	r3, [r3, #6]
 801726e:	b29b      	uxth	r3, r3
 8017270:	4618      	mov	r0, r3
 8017272:	f7f4 fc1d 	bl	800bab0 <lwip_htons>
 8017276:	4603      	mov	r3, r0
 8017278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801727c:	2b00      	cmp	r3, #0
 801727e:	d110      	bne.n	80172a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017282:	89db      	ldrh	r3, [r3, #14]
 8017284:	4618      	mov	r0, r3
 8017286:	f7f4 fc13 	bl	800bab0 <lwip_htons>
 801728a:	4603      	mov	r3, r0
 801728c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017290:	2b00      	cmp	r3, #0
 8017292:	d006      	beq.n	80172a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017296:	3308      	adds	r3, #8
 8017298:	2214      	movs	r2, #20
 801729a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801729c:	4618      	mov	r0, r3
 801729e:	f000 fda2 	bl	8017de6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80172a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a4:	88db      	ldrh	r3, [r3, #6]
 80172a6:	b29b      	uxth	r3, r3
 80172a8:	f003 0320 	and.w	r3, r3, #32
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	bf0c      	ite	eq
 80172b0:	2301      	moveq	r3, #1
 80172b2:	2300      	movne	r3, #0
 80172b4:	b2db      	uxtb	r3, r3
 80172b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00e      	beq.n	80172dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80172be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80172c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80172c2:	4413      	add	r3, r2
 80172c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80172c6:	8b7a      	ldrh	r2, [r7, #26]
 80172c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80172ca:	429a      	cmp	r2, r3
 80172cc:	f0c0 80a0 	bcc.w	8017410 <ip4_reass+0x2ac>
 80172d0:	8b7b      	ldrh	r3, [r7, #26]
 80172d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80172d6:	4293      	cmp	r3, r2
 80172d8:	f200 809a 	bhi.w	8017410 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80172dc:	69fa      	ldr	r2, [r7, #28]
 80172de:	6879      	ldr	r1, [r7, #4]
 80172e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172e2:	f7ff fdd5 	bl	8016e90 <ip_reass_chain_frag_into_datagram_and_validate>
 80172e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80172e8:	697b      	ldr	r3, [r7, #20]
 80172ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ee:	f000 8091 	beq.w	8017414 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80172f2:	4b5b      	ldr	r3, [pc, #364]	; (8017460 <ip4_reass+0x2fc>)
 80172f4:	881a      	ldrh	r2, [r3, #0]
 80172f6:	8c3b      	ldrh	r3, [r7, #32]
 80172f8:	4413      	add	r3, r2
 80172fa:	b29a      	uxth	r2, r3
 80172fc:	4b58      	ldr	r3, [pc, #352]	; (8017460 <ip4_reass+0x2fc>)
 80172fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017300:	69fb      	ldr	r3, [r7, #28]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d00d      	beq.n	8017322 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017306:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801730a:	4413      	add	r3, r2
 801730c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017310:	8a7a      	ldrh	r2, [r7, #18]
 8017312:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017316:	7f9b      	ldrb	r3, [r3, #30]
 8017318:	f043 0301 	orr.w	r3, r3, #1
 801731c:	b2da      	uxtb	r2, r3
 801731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017320:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017322:	697b      	ldr	r3, [r7, #20]
 8017324:	2b01      	cmp	r3, #1
 8017326:	d171      	bne.n	801740c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732a:	8b9b      	ldrh	r3, [r3, #28]
 801732c:	3314      	adds	r3, #20
 801732e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017332:	685b      	ldr	r3, [r3, #4]
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017344:	3308      	adds	r3, #8
 8017346:	2214      	movs	r2, #20
 8017348:	4619      	mov	r1, r3
 801734a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801734c:	f000 fd4b 	bl	8017de6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017350:	8a3b      	ldrh	r3, [r7, #16]
 8017352:	4618      	mov	r0, r3
 8017354:	f7f4 fbac 	bl	800bab0 <lwip_htons>
 8017358:	4603      	mov	r3, r0
 801735a:	461a      	mov	r2, r3
 801735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801735e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017362:	2200      	movs	r2, #0
 8017364:	719a      	strb	r2, [r3, #6]
 8017366:	2200      	movs	r2, #0
 8017368:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801736c:	2200      	movs	r2, #0
 801736e:	729a      	strb	r2, [r3, #10]
 8017370:	2200      	movs	r2, #0
 8017372:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801737a:	e00d      	b.n	8017398 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801737c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801737e:	685b      	ldr	r3, [r3, #4]
 8017380:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017382:	2114      	movs	r1, #20
 8017384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017386:	f7f5 fec5 	bl	800d114 <pbuf_remove_header>
      pbuf_cat(p, r);
 801738a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f7f6 f815 	bl	800d3bc <pbuf_cat>
      r = iprh->next_pbuf;
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801739a:	2b00      	cmp	r3, #0
 801739c:	d1ee      	bne.n	801737c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801739e:	4b31      	ldr	r3, [pc, #196]	; (8017464 <ip4_reass+0x300>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d102      	bne.n	80173ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80173a8:	2300      	movs	r3, #0
 80173aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173ac:	e010      	b.n	80173d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80173ae:	4b2d      	ldr	r3, [pc, #180]	; (8017464 <ip4_reass+0x300>)
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173b4:	e007      	b.n	80173c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80173b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173bc:	429a      	cmp	r2, r3
 80173be:	d006      	beq.n	80173ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80173c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80173c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d1f4      	bne.n	80173b6 <ip4_reass+0x252>
 80173cc:	e000      	b.n	80173d0 <ip4_reass+0x26c>
          break;
 80173ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80173d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80173d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173d4:	f7ff fd2e 	bl	8016e34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80173d8:	6878      	ldr	r0, [r7, #4]
 80173da:	f7f5 ffaf 	bl	800d33c <pbuf_clen>
 80173de:	4603      	mov	r3, r0
 80173e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80173e2:	4b1f      	ldr	r3, [pc, #124]	; (8017460 <ip4_reass+0x2fc>)
 80173e4:	881b      	ldrh	r3, [r3, #0]
 80173e6:	8c3a      	ldrh	r2, [r7, #32]
 80173e8:	429a      	cmp	r2, r3
 80173ea:	d906      	bls.n	80173fa <ip4_reass+0x296>
 80173ec:	4b1e      	ldr	r3, [pc, #120]	; (8017468 <ip4_reass+0x304>)
 80173ee:	f240 229b 	movw	r2, #667	; 0x29b
 80173f2:	491e      	ldr	r1, [pc, #120]	; (801746c <ip4_reass+0x308>)
 80173f4:	481e      	ldr	r0, [pc, #120]	; (8017470 <ip4_reass+0x30c>)
 80173f6:	f000 fd67 	bl	8017ec8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80173fa:	4b19      	ldr	r3, [pc, #100]	; (8017460 <ip4_reass+0x2fc>)
 80173fc:	881a      	ldrh	r2, [r3, #0]
 80173fe:	8c3b      	ldrh	r3, [r7, #32]
 8017400:	1ad3      	subs	r3, r2, r3
 8017402:	b29a      	uxth	r2, r3
 8017404:	4b16      	ldr	r3, [pc, #88]	; (8017460 <ip4_reass+0x2fc>)
 8017406:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	e03c      	b.n	8017486 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801740c:	2300      	movs	r3, #0
 801740e:	e03a      	b.n	8017486 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017410:	bf00      	nop
 8017412:	e000      	b.n	8017416 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017414:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017418:	2b00      	cmp	r3, #0
 801741a:	d106      	bne.n	801742a <ip4_reass+0x2c6>
 801741c:	4b12      	ldr	r3, [pc, #72]	; (8017468 <ip4_reass+0x304>)
 801741e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017422:	4914      	ldr	r1, [pc, #80]	; (8017474 <ip4_reass+0x310>)
 8017424:	4812      	ldr	r0, [pc, #72]	; (8017470 <ip4_reass+0x30c>)
 8017426:	f000 fd4f 	bl	8017ec8 <iprintf>
  if (ipr->p == NULL) {
 801742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d124      	bne.n	801747c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017432:	4b0c      	ldr	r3, [pc, #48]	; (8017464 <ip4_reass+0x300>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017438:	429a      	cmp	r2, r3
 801743a:	d006      	beq.n	801744a <ip4_reass+0x2e6>
 801743c:	4b0a      	ldr	r3, [pc, #40]	; (8017468 <ip4_reass+0x304>)
 801743e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017442:	490d      	ldr	r1, [pc, #52]	; (8017478 <ip4_reass+0x314>)
 8017444:	480a      	ldr	r0, [pc, #40]	; (8017470 <ip4_reass+0x30c>)
 8017446:	f000 fd3f 	bl	8017ec8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801744a:	2100      	movs	r1, #0
 801744c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801744e:	f7ff fcf1 	bl	8016e34 <ip_reass_dequeue_datagram>
 8017452:	e014      	b.n	801747e <ip4_reass+0x31a>
    goto nullreturn;
 8017454:	bf00      	nop
 8017456:	e012      	b.n	801747e <ip4_reass+0x31a>
    goto nullreturn;
 8017458:	bf00      	nop
 801745a:	e010      	b.n	801747e <ip4_reass+0x31a>
      goto nullreturn;
 801745c:	bf00      	nop
 801745e:	e00e      	b.n	801747e <ip4_reass+0x31a>
 8017460:	20004c14 	.word	0x20004c14
 8017464:	20004c10 	.word	0x20004c10
 8017468:	0801b97c 	.word	0x0801b97c
 801746c:	0801baec 	.word	0x0801baec
 8017470:	0801b9c4 	.word	0x0801b9c4
 8017474:	0801bb08 	.word	0x0801bb08
 8017478:	0801bb14 	.word	0x0801bb14
  }

nullreturn:
 801747c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f7f5 fece 	bl	800d220 <pbuf_free>
  return NULL;
 8017484:	2300      	movs	r3, #0
}
 8017486:	4618      	mov	r0, r3
 8017488:	3738      	adds	r7, #56	; 0x38
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop

08017490 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017494:	2005      	movs	r0, #5
 8017496:	f7f4 ffc1 	bl	800c41c <memp_malloc>
 801749a:	4603      	mov	r3, r0
}
 801749c:	4618      	mov	r0, r3
 801749e:	bd80      	pop	{r7, pc}

080174a0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b082      	sub	sp, #8
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d106      	bne.n	80174bc <ip_frag_free_pbuf_custom_ref+0x1c>
 80174ae:	4b07      	ldr	r3, [pc, #28]	; (80174cc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80174b0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80174b4:	4906      	ldr	r1, [pc, #24]	; (80174d0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80174b6:	4807      	ldr	r0, [pc, #28]	; (80174d4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80174b8:	f000 fd06 	bl	8017ec8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80174bc:	6879      	ldr	r1, [r7, #4]
 80174be:	2005      	movs	r0, #5
 80174c0:	f7f4 fffe 	bl	800c4c0 <memp_free>
}
 80174c4:	bf00      	nop
 80174c6:	3708      	adds	r7, #8
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}
 80174cc:	0801b97c 	.word	0x0801b97c
 80174d0:	0801bb34 	.word	0x0801bb34
 80174d4:	0801b9c4 	.word	0x0801b9c4

080174d8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b084      	sub	sp, #16
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d106      	bne.n	80174f8 <ipfrag_free_pbuf_custom+0x20>
 80174ea:	4b11      	ldr	r3, [pc, #68]	; (8017530 <ipfrag_free_pbuf_custom+0x58>)
 80174ec:	f240 22ce 	movw	r2, #718	; 0x2ce
 80174f0:	4910      	ldr	r1, [pc, #64]	; (8017534 <ipfrag_free_pbuf_custom+0x5c>)
 80174f2:	4811      	ldr	r0, [pc, #68]	; (8017538 <ipfrag_free_pbuf_custom+0x60>)
 80174f4:	f000 fce8 	bl	8017ec8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d006      	beq.n	801750e <ipfrag_free_pbuf_custom+0x36>
 8017500:	4b0b      	ldr	r3, [pc, #44]	; (8017530 <ipfrag_free_pbuf_custom+0x58>)
 8017502:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017506:	490d      	ldr	r1, [pc, #52]	; (801753c <ipfrag_free_pbuf_custom+0x64>)
 8017508:	480b      	ldr	r0, [pc, #44]	; (8017538 <ipfrag_free_pbuf_custom+0x60>)
 801750a:	f000 fcdd 	bl	8017ec8 <iprintf>
  if (pcr->original != NULL) {
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	695b      	ldr	r3, [r3, #20]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d004      	beq.n	8017520 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	695b      	ldr	r3, [r3, #20]
 801751a:	4618      	mov	r0, r3
 801751c:	f7f5 fe80 	bl	800d220 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017520:	68f8      	ldr	r0, [r7, #12]
 8017522:	f7ff ffbd 	bl	80174a0 <ip_frag_free_pbuf_custom_ref>
}
 8017526:	bf00      	nop
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	0801b97c 	.word	0x0801b97c
 8017534:	0801bb40 	.word	0x0801bb40
 8017538:	0801b9c4 	.word	0x0801b9c4
 801753c:	0801bb4c 	.word	0x0801bb4c

08017540 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b094      	sub	sp, #80	; 0x50
 8017544:	af02      	add	r7, sp, #8
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801754c:	2300      	movs	r3, #0
 801754e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017556:	3b14      	subs	r3, #20
 8017558:	2b00      	cmp	r3, #0
 801755a:	da00      	bge.n	801755e <ip4_frag+0x1e>
 801755c:	3307      	adds	r3, #7
 801755e:	10db      	asrs	r3, r3, #3
 8017560:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017562:	2314      	movs	r3, #20
 8017564:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	f003 030f 	and.w	r3, r3, #15
 8017578:	b2db      	uxtb	r3, r3
 801757a:	009b      	lsls	r3, r3, #2
 801757c:	b2db      	uxtb	r3, r3
 801757e:	2b14      	cmp	r3, #20
 8017580:	d002      	beq.n	8017588 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017582:	f06f 0305 	mvn.w	r3, #5
 8017586:	e110      	b.n	80177aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	895b      	ldrh	r3, [r3, #10]
 801758c:	2b13      	cmp	r3, #19
 801758e:	d809      	bhi.n	80175a4 <ip4_frag+0x64>
 8017590:	4b88      	ldr	r3, [pc, #544]	; (80177b4 <ip4_frag+0x274>)
 8017592:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017596:	4988      	ldr	r1, [pc, #544]	; (80177b8 <ip4_frag+0x278>)
 8017598:	4888      	ldr	r0, [pc, #544]	; (80177bc <ip4_frag+0x27c>)
 801759a:	f000 fc95 	bl	8017ec8 <iprintf>
 801759e:	f06f 0305 	mvn.w	r3, #5
 80175a2:	e102      	b.n	80177aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80175a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175a6:	88db      	ldrh	r3, [r3, #6]
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	4618      	mov	r0, r3
 80175ac:	f7f4 fa80 	bl	800bab0 <lwip_htons>
 80175b0:	4603      	mov	r3, r0
 80175b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80175b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80175be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80175c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	891b      	ldrh	r3, [r3, #8]
 80175ca:	3b14      	subs	r3, #20
 80175cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80175d0:	e0e1      	b.n	8017796 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80175d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175d4:	00db      	lsls	r3, r3, #3
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80175dc:	4293      	cmp	r3, r2
 80175de:	bf28      	it	cs
 80175e0:	4613      	movcs	r3, r2
 80175e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80175e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175e8:	2114      	movs	r1, #20
 80175ea:	200e      	movs	r0, #14
 80175ec:	f7f5 fb34 	bl	800cc58 <pbuf_alloc>
 80175f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80175f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f000 80d5 	beq.w	80177a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80175fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175fc:	895b      	ldrh	r3, [r3, #10]
 80175fe:	2b13      	cmp	r3, #19
 8017600:	d806      	bhi.n	8017610 <ip4_frag+0xd0>
 8017602:	4b6c      	ldr	r3, [pc, #432]	; (80177b4 <ip4_frag+0x274>)
 8017604:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017608:	496d      	ldr	r1, [pc, #436]	; (80177c0 <ip4_frag+0x280>)
 801760a:	486c      	ldr	r0, [pc, #432]	; (80177bc <ip4_frag+0x27c>)
 801760c:	f000 fc5c 	bl	8017ec8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017612:	685b      	ldr	r3, [r3, #4]
 8017614:	2214      	movs	r2, #20
 8017616:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017618:	4618      	mov	r0, r3
 801761a:	f000 fbe4 	bl	8017de6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017624:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017626:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801762a:	e064      	b.n	80176f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	895a      	ldrh	r2, [r3, #10]
 8017630:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017632:	1ad3      	subs	r3, r2, r3
 8017634:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	895b      	ldrh	r3, [r3, #10]
 801763a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801763c:	429a      	cmp	r2, r3
 801763e:	d906      	bls.n	801764e <ip4_frag+0x10e>
 8017640:	4b5c      	ldr	r3, [pc, #368]	; (80177b4 <ip4_frag+0x274>)
 8017642:	f240 322d 	movw	r2, #813	; 0x32d
 8017646:	495f      	ldr	r1, [pc, #380]	; (80177c4 <ip4_frag+0x284>)
 8017648:	485c      	ldr	r0, [pc, #368]	; (80177bc <ip4_frag+0x27c>)
 801764a:	f000 fc3d 	bl	8017ec8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801764e:	8bfa      	ldrh	r2, [r7, #30]
 8017650:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017654:	4293      	cmp	r3, r2
 8017656:	bf28      	it	cs
 8017658:	4613      	movcs	r3, r2
 801765a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801765e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017662:	2b00      	cmp	r3, #0
 8017664:	d105      	bne.n	8017672 <ip4_frag+0x132>
        poff = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	60fb      	str	r3, [r7, #12]
        continue;
 8017670:	e041      	b.n	80176f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017672:	f7ff ff0d 	bl	8017490 <ip_frag_alloc_pbuf_custom_ref>
 8017676:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017678:	69bb      	ldr	r3, [r7, #24]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d103      	bne.n	8017686 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801767e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017680:	f7f5 fdce 	bl	800d220 <pbuf_free>
        goto memerr;
 8017684:	e08f      	b.n	80177a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017686:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801768c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801768e:	4413      	add	r3, r2
 8017690:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017694:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017698:	9201      	str	r2, [sp, #4]
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	4603      	mov	r3, r0
 801769e:	2241      	movs	r2, #65	; 0x41
 80176a0:	2000      	movs	r0, #0
 80176a2:	f7f5 fc03 	bl	800ceac <pbuf_alloced_custom>
 80176a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d106      	bne.n	80176bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80176ae:	69b8      	ldr	r0, [r7, #24]
 80176b0:	f7ff fef6 	bl	80174a0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80176b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80176b6:	f7f5 fdb3 	bl	800d220 <pbuf_free>
        goto memerr;
 80176ba:	e074      	b.n	80177a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80176bc:	68f8      	ldr	r0, [r7, #12]
 80176be:	f7f5 fe55 	bl	800d36c <pbuf_ref>
      pcr->original = p;
 80176c2:	69bb      	ldr	r3, [r7, #24]
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80176c8:	69bb      	ldr	r3, [r7, #24]
 80176ca:	4a3f      	ldr	r2, [pc, #252]	; (80177c8 <ip4_frag+0x288>)
 80176cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80176ce:	6979      	ldr	r1, [r7, #20]
 80176d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80176d2:	f7f5 fe73 	bl	800d3bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80176d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80176da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80176de:	1ad3      	subs	r3, r2, r3
 80176e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80176e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d004      	beq.n	80176f6 <ip4_frag+0x1b6>
        poff = 0;
 80176ec:	2300      	movs	r3, #0
 80176ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80176f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d196      	bne.n	801762c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80176fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017700:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017704:	4413      	add	r3, r2
 8017706:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801770c:	f1a3 0213 	sub.w	r2, r3, #19
 8017710:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017714:	429a      	cmp	r2, r3
 8017716:	bfcc      	ite	gt
 8017718:	2301      	movgt	r3, #1
 801771a:	2300      	movle	r3, #0
 801771c:	b2db      	uxtb	r3, r3
 801771e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017720:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017728:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d002      	beq.n	8017736 <ip4_frag+0x1f6>
 8017730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017732:	2b00      	cmp	r3, #0
 8017734:	d003      	beq.n	801773e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017738:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801773c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801773e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017740:	4618      	mov	r0, r3
 8017742:	f7f4 f9b5 	bl	800bab0 <lwip_htons>
 8017746:	4603      	mov	r3, r0
 8017748:	461a      	mov	r2, r3
 801774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801774c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801774e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017750:	3314      	adds	r3, #20
 8017752:	b29b      	uxth	r3, r3
 8017754:	4618      	mov	r0, r3
 8017756:	f7f4 f9ab 	bl	800bab0 <lwip_htons>
 801775a:	4603      	mov	r3, r0
 801775c:	461a      	mov	r2, r3
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017764:	2200      	movs	r2, #0
 8017766:	729a      	strb	r2, [r3, #10]
 8017768:	2200      	movs	r2, #0
 801776a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	695b      	ldr	r3, [r3, #20]
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017774:	68b8      	ldr	r0, [r7, #8]
 8017776:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801777a:	f7f5 fd51 	bl	800d220 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801777e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017782:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017784:	1ad3      	subs	r3, r2, r3
 8017786:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801778a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801778e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017790:	4413      	add	r3, r2
 8017792:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017796:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801779a:	2b00      	cmp	r3, #0
 801779c:	f47f af19 	bne.w	80175d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80177a0:	2300      	movs	r3, #0
 80177a2:	e002      	b.n	80177aa <ip4_frag+0x26a>
      goto memerr;
 80177a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80177a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80177aa:	4618      	mov	r0, r3
 80177ac:	3748      	adds	r7, #72	; 0x48
 80177ae:	46bd      	mov	sp, r7
 80177b0:	bd80      	pop	{r7, pc}
 80177b2:	bf00      	nop
 80177b4:	0801b97c 	.word	0x0801b97c
 80177b8:	0801bb58 	.word	0x0801bb58
 80177bc:	0801b9c4 	.word	0x0801b9c4
 80177c0:	0801bb74 	.word	0x0801bb74
 80177c4:	0801bb94 	.word	0x0801bb94
 80177c8:	080174d9 	.word	0x080174d9

080177cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b086      	sub	sp, #24
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80177d6:	230e      	movs	r3, #14
 80177d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	895b      	ldrh	r3, [r3, #10]
 80177de:	2b0e      	cmp	r3, #14
 80177e0:	d96e      	bls.n	80178c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	7bdb      	ldrb	r3, [r3, #15]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d106      	bne.n	80177f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80177f0:	3301      	adds	r3, #1
 80177f2:	b2da      	uxtb	r2, r3
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80177fe:	693b      	ldr	r3, [r7, #16]
 8017800:	7b1a      	ldrb	r2, [r3, #12]
 8017802:	7b5b      	ldrb	r3, [r3, #13]
 8017804:	021b      	lsls	r3, r3, #8
 8017806:	4313      	orrs	r3, r2
 8017808:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801780a:	693b      	ldr	r3, [r7, #16]
 801780c:	781b      	ldrb	r3, [r3, #0]
 801780e:	f003 0301 	and.w	r3, r3, #1
 8017812:	2b00      	cmp	r3, #0
 8017814:	d023      	beq.n	801785e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	781b      	ldrb	r3, [r3, #0]
 801781a:	2b01      	cmp	r3, #1
 801781c:	d10f      	bne.n	801783e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	785b      	ldrb	r3, [r3, #1]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d11b      	bne.n	801785e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801782a:	2b5e      	cmp	r3, #94	; 0x5e
 801782c:	d117      	bne.n	801785e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	7b5b      	ldrb	r3, [r3, #13]
 8017832:	f043 0310 	orr.w	r3, r3, #16
 8017836:	b2da      	uxtb	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	735a      	strb	r2, [r3, #13]
 801783c:	e00f      	b.n	801785e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	2206      	movs	r2, #6
 8017842:	4928      	ldr	r1, [pc, #160]	; (80178e4 <ethernet_input+0x118>)
 8017844:	4618      	mov	r0, r3
 8017846:	f000 fac0 	bl	8017dca <memcmp>
 801784a:	4603      	mov	r3, r0
 801784c:	2b00      	cmp	r3, #0
 801784e:	d106      	bne.n	801785e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	7b5b      	ldrb	r3, [r3, #13]
 8017854:	f043 0308 	orr.w	r3, r3, #8
 8017858:	b2da      	uxtb	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801785e:	89fb      	ldrh	r3, [r7, #14]
 8017860:	2b08      	cmp	r3, #8
 8017862:	d003      	beq.n	801786c <ethernet_input+0xa0>
 8017864:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017868:	d014      	beq.n	8017894 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801786a:	e032      	b.n	80178d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017872:	f003 0308 	and.w	r3, r3, #8
 8017876:	2b00      	cmp	r3, #0
 8017878:	d024      	beq.n	80178c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801787a:	8afb      	ldrh	r3, [r7, #22]
 801787c:	4619      	mov	r1, r3
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f7f5 fc48 	bl	800d114 <pbuf_remove_header>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d11e      	bne.n	80178c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801788a:	6839      	ldr	r1, [r7, #0]
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f7fe ff09 	bl	80166a4 <ip4_input>
      break;
 8017892:	e013      	b.n	80178bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801789a:	f003 0308 	and.w	r3, r3, #8
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d014      	beq.n	80178cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80178a2:	8afb      	ldrh	r3, [r7, #22]
 80178a4:	4619      	mov	r1, r3
 80178a6:	6878      	ldr	r0, [r7, #4]
 80178a8:	f7f5 fc34 	bl	800d114 <pbuf_remove_header>
 80178ac:	4603      	mov	r3, r0
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d10e      	bne.n	80178d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80178b2:	6839      	ldr	r1, [r7, #0]
 80178b4:	6878      	ldr	r0, [r7, #4]
 80178b6:	f7fe f8a5 	bl	8015a04 <etharp_input>
      break;
 80178ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80178bc:	2300      	movs	r3, #0
 80178be:	e00c      	b.n	80178da <ethernet_input+0x10e>
    goto free_and_return;
 80178c0:	bf00      	nop
 80178c2:	e006      	b.n	80178d2 <ethernet_input+0x106>
        goto free_and_return;
 80178c4:	bf00      	nop
 80178c6:	e004      	b.n	80178d2 <ethernet_input+0x106>
        goto free_and_return;
 80178c8:	bf00      	nop
 80178ca:	e002      	b.n	80178d2 <ethernet_input+0x106>
        goto free_and_return;
 80178cc:	bf00      	nop
 80178ce:	e000      	b.n	80178d2 <ethernet_input+0x106>
        goto free_and_return;
 80178d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f7f5 fca4 	bl	800d220 <pbuf_free>
  return ERR_OK;
 80178d8:	2300      	movs	r3, #0
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3718      	adds	r7, #24
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}
 80178e2:	bf00      	nop
 80178e4:	0801bed0 	.word	0x0801bed0

080178e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b086      	sub	sp, #24
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	607a      	str	r2, [r7, #4]
 80178f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80178f6:	8c3b      	ldrh	r3, [r7, #32]
 80178f8:	4618      	mov	r0, r3
 80178fa:	f7f4 f8d9 	bl	800bab0 <lwip_htons>
 80178fe:	4603      	mov	r3, r0
 8017900:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017902:	210e      	movs	r1, #14
 8017904:	68b8      	ldr	r0, [r7, #8]
 8017906:	f7f5 fbf5 	bl	800d0f4 <pbuf_add_header>
 801790a:	4603      	mov	r3, r0
 801790c:	2b00      	cmp	r3, #0
 801790e:	d125      	bne.n	801795c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	685b      	ldr	r3, [r3, #4]
 8017914:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	8afa      	ldrh	r2, [r7, #22]
 801791a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	2206      	movs	r2, #6
 8017920:	6839      	ldr	r1, [r7, #0]
 8017922:	4618      	mov	r0, r3
 8017924:	f000 fa5f 	bl	8017de6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017928:	693b      	ldr	r3, [r7, #16]
 801792a:	3306      	adds	r3, #6
 801792c:	2206      	movs	r2, #6
 801792e:	6879      	ldr	r1, [r7, #4]
 8017930:	4618      	mov	r0, r3
 8017932:	f000 fa58 	bl	8017de6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801793c:	2b06      	cmp	r3, #6
 801793e:	d006      	beq.n	801794e <ethernet_output+0x66>
 8017940:	4b0a      	ldr	r3, [pc, #40]	; (801796c <ethernet_output+0x84>)
 8017942:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017946:	490a      	ldr	r1, [pc, #40]	; (8017970 <ethernet_output+0x88>)
 8017948:	480a      	ldr	r0, [pc, #40]	; (8017974 <ethernet_output+0x8c>)
 801794a:	f000 fabd 	bl	8017ec8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	699b      	ldr	r3, [r3, #24]
 8017952:	68b9      	ldr	r1, [r7, #8]
 8017954:	68f8      	ldr	r0, [r7, #12]
 8017956:	4798      	blx	r3
 8017958:	4603      	mov	r3, r0
 801795a:	e002      	b.n	8017962 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801795c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801795e:	f06f 0301 	mvn.w	r3, #1
}
 8017962:	4618      	mov	r0, r3
 8017964:	3718      	adds	r7, #24
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}
 801796a:	bf00      	nop
 801796c:	0801bba4 	.word	0x0801bba4
 8017970:	0801bbdc 	.word	0x0801bbdc
 8017974:	0801bc10 	.word	0x0801bc10

08017978 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	2200      	movs	r2, #0
 8017986:	2104      	movs	r1, #4
 8017988:	4618      	mov	r0, r3
 801798a:	f7f0 fc41 	bl	8008210 <osMessageQueueNew>
 801798e:	4602      	mov	r2, r0
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d102      	bne.n	80179a2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801799c:	f04f 33ff 	mov.w	r3, #4294967295
 80179a0:	e000      	b.n	80179a4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80179a2:	2300      	movs	r3, #0
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3708      	adds	r7, #8
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}

080179ac <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80179ac:	b580      	push	{r7, lr}
 80179ae:	b084      	sub	sp, #16
 80179b0:	af00      	add	r7, sp, #0
 80179b2:	6078      	str	r0, [r7, #4]
 80179b4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	6818      	ldr	r0, [r3, #0]
 80179ba:	4639      	mov	r1, r7
 80179bc:	2300      	movs	r3, #0
 80179be:	2200      	movs	r2, #0
 80179c0:	f7f0 fc9a 	bl	80082f8 <osMessageQueuePut>
 80179c4:	4603      	mov	r3, r0
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d102      	bne.n	80179d0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80179ca:	2300      	movs	r3, #0
 80179cc:	73fb      	strb	r3, [r7, #15]
 80179ce:	e001      	b.n	80179d4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80179d0:	23ff      	movs	r3, #255	; 0xff
 80179d2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80179d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179d8:	4618      	mov	r0, r3
 80179da:	3710      	adds	r7, #16
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b086      	sub	sp, #24
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	60b9      	str	r1, [r7, #8]
 80179ea:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80179ec:	f7f0 f920 	bl	8007c30 <osKernelGetTickCount>
 80179f0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d013      	beq.n	8017a20 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	6818      	ldr	r0, [r3, #0]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2200      	movs	r2, #0
 8017a00:	68b9      	ldr	r1, [r7, #8]
 8017a02:	f7f0 fcd9 	bl	80083b8 <osMessageQueueGet>
 8017a06:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d105      	bne.n	8017a1a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8017a0e:	f7f0 f90f 	bl	8007c30 <osKernelGetTickCount>
 8017a12:	4602      	mov	r2, r0
 8017a14:	697b      	ldr	r3, [r7, #20]
 8017a16:	1ad3      	subs	r3, r2, r3
 8017a18:	e00f      	b.n	8017a3a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017a1e:	e00c      	b.n	8017a3a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	6818      	ldr	r0, [r3, #0]
 8017a24:	f04f 33ff 	mov.w	r3, #4294967295
 8017a28:	2200      	movs	r2, #0
 8017a2a:	68b9      	ldr	r1, [r7, #8]
 8017a2c:	f7f0 fcc4 	bl	80083b8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017a30:	f7f0 f8fe 	bl	8007c30 <osKernelGetTickCount>
 8017a34:	4602      	mov	r2, r0
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017a3a:	4618      	mov	r0, r3
 8017a3c:	3718      	adds	r7, #24
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}

08017a42 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017a42:	b480      	push	{r7}
 8017a44:	b083      	sub	sp, #12
 8017a46:	af00      	add	r7, sp, #0
 8017a48:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d101      	bne.n	8017a56 <sys_mbox_valid+0x14>
    return 0;
 8017a52:	2300      	movs	r3, #0
 8017a54:	e000      	b.n	8017a58 <sys_mbox_valid+0x16>
  else
    return 1;
 8017a56:	2301      	movs	r3, #1
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	370c      	adds	r7, #12
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a62:	4770      	bx	lr

08017a64 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017a68:	2000      	movs	r0, #0
 8017a6a:	f7f0 f9a3 	bl	8007db4 <osMutexNew>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	4a01      	ldr	r2, [pc, #4]	; (8017a78 <sys_init+0x14>)
 8017a72:	6013      	str	r3, [r2, #0]
#endif
}
 8017a74:	bf00      	nop
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	2000ce4c 	.word	0x2000ce4c

08017a7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017a84:	2000      	movs	r0, #0
 8017a86:	f7f0 f995 	bl	8007db4 <osMutexNew>
 8017a8a:	4602      	mov	r2, r0
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d102      	bne.n	8017a9e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017a98:	f04f 33ff 	mov.w	r3, #4294967295
 8017a9c:	e000      	b.n	8017aa0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017a9e:	2300      	movs	r3, #0
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3708      	adds	r7, #8
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f7f0 fa01 	bl	8007ec0 <osMutexAcquire>
#endif
}
 8017abe:	bf00      	nop
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}

08017ac6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017ac6:	b580      	push	{r7, lr}
 8017ac8:	b082      	sub	sp, #8
 8017aca:	af00      	add	r7, sp, #0
 8017acc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7f0 fa3f 	bl	8007f56 <osMutexRelease>
}
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}

08017ae0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b08e      	sub	sp, #56	; 0x38
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017aee:	f107 0314 	add.w	r3, r7, #20
 8017af2:	2224      	movs	r2, #36	; 0x24
 8017af4:	2100      	movs	r1, #0
 8017af6:	4618      	mov	r0, r3
 8017af8:	f000 f983 	bl	8017e02 <memset>
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	617b      	str	r3, [r7, #20]
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8017b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017b08:	f107 0314 	add.w	r3, r7, #20
 8017b0c:	461a      	mov	r2, r3
 8017b0e:	6879      	ldr	r1, [r7, #4]
 8017b10:	68b8      	ldr	r0, [r7, #8]
 8017b12:	f7f0 f8a2 	bl	8007c5a <osThreadNew>
 8017b16:	4603      	mov	r3, r0
#endif
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3738      	adds	r7, #56	; 0x38
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}

08017b20 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017b24:	4b04      	ldr	r3, [pc, #16]	; (8017b38 <sys_arch_protect+0x18>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	f04f 31ff 	mov.w	r1, #4294967295
 8017b2c:	4618      	mov	r0, r3
 8017b2e:	f7f0 f9c7 	bl	8007ec0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017b32:	2301      	movs	r3, #1
}
 8017b34:	4618      	mov	r0, r3
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	2000ce4c 	.word	0x2000ce4c

08017b3c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b082      	sub	sp, #8
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017b44:	4b04      	ldr	r3, [pc, #16]	; (8017b58 <sys_arch_unprotect+0x1c>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f7f0 fa04 	bl	8007f56 <osMutexRelease>
}
 8017b4e:	bf00      	nop
 8017b50:	3708      	adds	r7, #8
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	2000ce4c 	.word	0x2000ce4c

08017b5c <slave_set_tx_rx>:
        osSemaphoreRelease(slave->idle_sem);
    }
}

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b082      	sub	sp, #8
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	460b      	mov	r3, r1
 8017b66:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	6858      	ldr	r0, [r3, #4]
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	8919      	ldrh	r1, [r3, #8]
 8017b74:	78fb      	ldrb	r3, [r7, #3]
 8017b76:	2b01      	cmp	r3, #1
 8017b78:	bf0c      	ite	eq
 8017b7a:	2301      	moveq	r3, #1
 8017b7c:	2300      	movne	r3, #0
 8017b7e:	b2db      	uxtb	r3, r3
 8017b80:	461a      	mov	r2, r3
 8017b82:	f7ec fd5d 	bl	8004640 <HAL_GPIO_WritePin>
}
 8017b86:	bf00      	nop
 8017b88:	3708      	adds	r7, #8
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}
	...

08017b90 <std>:
 8017b90:	2300      	movs	r3, #0
 8017b92:	b510      	push	{r4, lr}
 8017b94:	4604      	mov	r4, r0
 8017b96:	e9c0 3300 	strd	r3, r3, [r0]
 8017b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017b9e:	6083      	str	r3, [r0, #8]
 8017ba0:	8181      	strh	r1, [r0, #12]
 8017ba2:	6643      	str	r3, [r0, #100]	; 0x64
 8017ba4:	81c2      	strh	r2, [r0, #14]
 8017ba6:	6183      	str	r3, [r0, #24]
 8017ba8:	4619      	mov	r1, r3
 8017baa:	2208      	movs	r2, #8
 8017bac:	305c      	adds	r0, #92	; 0x5c
 8017bae:	f000 f928 	bl	8017e02 <memset>
 8017bb2:	4b05      	ldr	r3, [pc, #20]	; (8017bc8 <std+0x38>)
 8017bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8017bb6:	4b05      	ldr	r3, [pc, #20]	; (8017bcc <std+0x3c>)
 8017bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017bba:	4b05      	ldr	r3, [pc, #20]	; (8017bd0 <std+0x40>)
 8017bbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017bbe:	4b05      	ldr	r3, [pc, #20]	; (8017bd4 <std+0x44>)
 8017bc0:	6224      	str	r4, [r4, #32]
 8017bc2:	6323      	str	r3, [r4, #48]	; 0x30
 8017bc4:	bd10      	pop	{r4, pc}
 8017bc6:	bf00      	nop
 8017bc8:	0801806d 	.word	0x0801806d
 8017bcc:	0801808f 	.word	0x0801808f
 8017bd0:	080180c7 	.word	0x080180c7
 8017bd4:	080180eb 	.word	0x080180eb

08017bd8 <_cleanup_r>:
 8017bd8:	4901      	ldr	r1, [pc, #4]	; (8017be0 <_cleanup_r+0x8>)
 8017bda:	f000 b8af 	b.w	8017d3c <_fwalk_reent>
 8017bde:	bf00      	nop
 8017be0:	08018281 	.word	0x08018281

08017be4 <__sfmoreglue>:
 8017be4:	b570      	push	{r4, r5, r6, lr}
 8017be6:	1e4a      	subs	r2, r1, #1
 8017be8:	2568      	movs	r5, #104	; 0x68
 8017bea:	4355      	muls	r5, r2
 8017bec:	460e      	mov	r6, r1
 8017bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017bf2:	f000 f90f 	bl	8017e14 <_malloc_r>
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	b140      	cbz	r0, 8017c0c <__sfmoreglue+0x28>
 8017bfa:	2100      	movs	r1, #0
 8017bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8017c00:	300c      	adds	r0, #12
 8017c02:	60a0      	str	r0, [r4, #8]
 8017c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017c08:	f000 f8fb 	bl	8017e02 <memset>
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	bd70      	pop	{r4, r5, r6, pc}

08017c10 <__sfp_lock_acquire>:
 8017c10:	4801      	ldr	r0, [pc, #4]	; (8017c18 <__sfp_lock_acquire+0x8>)
 8017c12:	f000 b8d8 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 8017c16:	bf00      	nop
 8017c18:	2000ce58 	.word	0x2000ce58

08017c1c <__sfp_lock_release>:
 8017c1c:	4801      	ldr	r0, [pc, #4]	; (8017c24 <__sfp_lock_release+0x8>)
 8017c1e:	f000 b8d3 	b.w	8017dc8 <__retarget_lock_release_recursive>
 8017c22:	bf00      	nop
 8017c24:	2000ce58 	.word	0x2000ce58

08017c28 <__sinit_lock_acquire>:
 8017c28:	4801      	ldr	r0, [pc, #4]	; (8017c30 <__sinit_lock_acquire+0x8>)
 8017c2a:	f000 b8cc 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 8017c2e:	bf00      	nop
 8017c30:	2000ce53 	.word	0x2000ce53

08017c34 <__sinit_lock_release>:
 8017c34:	4801      	ldr	r0, [pc, #4]	; (8017c3c <__sinit_lock_release+0x8>)
 8017c36:	f000 b8c7 	b.w	8017dc8 <__retarget_lock_release_recursive>
 8017c3a:	bf00      	nop
 8017c3c:	2000ce53 	.word	0x2000ce53

08017c40 <__sinit>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	4604      	mov	r4, r0
 8017c44:	f7ff fff0 	bl	8017c28 <__sinit_lock_acquire>
 8017c48:	69a3      	ldr	r3, [r4, #24]
 8017c4a:	b11b      	cbz	r3, 8017c54 <__sinit+0x14>
 8017c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c50:	f7ff bff0 	b.w	8017c34 <__sinit_lock_release>
 8017c54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017c58:	6523      	str	r3, [r4, #80]	; 0x50
 8017c5a:	4b13      	ldr	r3, [pc, #76]	; (8017ca8 <__sinit+0x68>)
 8017c5c:	4a13      	ldr	r2, [pc, #76]	; (8017cac <__sinit+0x6c>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	62a2      	str	r2, [r4, #40]	; 0x28
 8017c62:	42a3      	cmp	r3, r4
 8017c64:	bf04      	itt	eq
 8017c66:	2301      	moveq	r3, #1
 8017c68:	61a3      	streq	r3, [r4, #24]
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f000 f820 	bl	8017cb0 <__sfp>
 8017c70:	6060      	str	r0, [r4, #4]
 8017c72:	4620      	mov	r0, r4
 8017c74:	f000 f81c 	bl	8017cb0 <__sfp>
 8017c78:	60a0      	str	r0, [r4, #8]
 8017c7a:	4620      	mov	r0, r4
 8017c7c:	f000 f818 	bl	8017cb0 <__sfp>
 8017c80:	2200      	movs	r2, #0
 8017c82:	60e0      	str	r0, [r4, #12]
 8017c84:	2104      	movs	r1, #4
 8017c86:	6860      	ldr	r0, [r4, #4]
 8017c88:	f7ff ff82 	bl	8017b90 <std>
 8017c8c:	68a0      	ldr	r0, [r4, #8]
 8017c8e:	2201      	movs	r2, #1
 8017c90:	2109      	movs	r1, #9
 8017c92:	f7ff ff7d 	bl	8017b90 <std>
 8017c96:	68e0      	ldr	r0, [r4, #12]
 8017c98:	2202      	movs	r2, #2
 8017c9a:	2112      	movs	r1, #18
 8017c9c:	f7ff ff78 	bl	8017b90 <std>
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	61a3      	str	r3, [r4, #24]
 8017ca4:	e7d2      	b.n	8017c4c <__sinit+0xc>
 8017ca6:	bf00      	nop
 8017ca8:	0801bf40 	.word	0x0801bf40
 8017cac:	08017bd9 	.word	0x08017bd9

08017cb0 <__sfp>:
 8017cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cb2:	4607      	mov	r7, r0
 8017cb4:	f7ff ffac 	bl	8017c10 <__sfp_lock_acquire>
 8017cb8:	4b1e      	ldr	r3, [pc, #120]	; (8017d34 <__sfp+0x84>)
 8017cba:	681e      	ldr	r6, [r3, #0]
 8017cbc:	69b3      	ldr	r3, [r6, #24]
 8017cbe:	b913      	cbnz	r3, 8017cc6 <__sfp+0x16>
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	f7ff ffbd 	bl	8017c40 <__sinit>
 8017cc6:	3648      	adds	r6, #72	; 0x48
 8017cc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ccc:	3b01      	subs	r3, #1
 8017cce:	d503      	bpl.n	8017cd8 <__sfp+0x28>
 8017cd0:	6833      	ldr	r3, [r6, #0]
 8017cd2:	b30b      	cbz	r3, 8017d18 <__sfp+0x68>
 8017cd4:	6836      	ldr	r6, [r6, #0]
 8017cd6:	e7f7      	b.n	8017cc8 <__sfp+0x18>
 8017cd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017cdc:	b9d5      	cbnz	r5, 8017d14 <__sfp+0x64>
 8017cde:	4b16      	ldr	r3, [pc, #88]	; (8017d38 <__sfp+0x88>)
 8017ce0:	60e3      	str	r3, [r4, #12]
 8017ce2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017ce6:	6665      	str	r5, [r4, #100]	; 0x64
 8017ce8:	f000 f86c 	bl	8017dc4 <__retarget_lock_init_recursive>
 8017cec:	f7ff ff96 	bl	8017c1c <__sfp_lock_release>
 8017cf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017cf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017cf8:	6025      	str	r5, [r4, #0]
 8017cfa:	61a5      	str	r5, [r4, #24]
 8017cfc:	2208      	movs	r2, #8
 8017cfe:	4629      	mov	r1, r5
 8017d00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017d04:	f000 f87d 	bl	8017e02 <memset>
 8017d08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017d0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017d10:	4620      	mov	r0, r4
 8017d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d14:	3468      	adds	r4, #104	; 0x68
 8017d16:	e7d9      	b.n	8017ccc <__sfp+0x1c>
 8017d18:	2104      	movs	r1, #4
 8017d1a:	4638      	mov	r0, r7
 8017d1c:	f7ff ff62 	bl	8017be4 <__sfmoreglue>
 8017d20:	4604      	mov	r4, r0
 8017d22:	6030      	str	r0, [r6, #0]
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d1d5      	bne.n	8017cd4 <__sfp+0x24>
 8017d28:	f7ff ff78 	bl	8017c1c <__sfp_lock_release>
 8017d2c:	230c      	movs	r3, #12
 8017d2e:	603b      	str	r3, [r7, #0]
 8017d30:	e7ee      	b.n	8017d10 <__sfp+0x60>
 8017d32:	bf00      	nop
 8017d34:	0801bf40 	.word	0x0801bf40
 8017d38:	ffff0001 	.word	0xffff0001

08017d3c <_fwalk_reent>:
 8017d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d40:	4606      	mov	r6, r0
 8017d42:	4688      	mov	r8, r1
 8017d44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017d48:	2700      	movs	r7, #0
 8017d4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017d4e:	f1b9 0901 	subs.w	r9, r9, #1
 8017d52:	d505      	bpl.n	8017d60 <_fwalk_reent+0x24>
 8017d54:	6824      	ldr	r4, [r4, #0]
 8017d56:	2c00      	cmp	r4, #0
 8017d58:	d1f7      	bne.n	8017d4a <_fwalk_reent+0xe>
 8017d5a:	4638      	mov	r0, r7
 8017d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d60:	89ab      	ldrh	r3, [r5, #12]
 8017d62:	2b01      	cmp	r3, #1
 8017d64:	d907      	bls.n	8017d76 <_fwalk_reent+0x3a>
 8017d66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d6a:	3301      	adds	r3, #1
 8017d6c:	d003      	beq.n	8017d76 <_fwalk_reent+0x3a>
 8017d6e:	4629      	mov	r1, r5
 8017d70:	4630      	mov	r0, r6
 8017d72:	47c0      	blx	r8
 8017d74:	4307      	orrs	r7, r0
 8017d76:	3568      	adds	r5, #104	; 0x68
 8017d78:	e7e9      	b.n	8017d4e <_fwalk_reent+0x12>
	...

08017d7c <__libc_init_array>:
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	4d0d      	ldr	r5, [pc, #52]	; (8017db4 <__libc_init_array+0x38>)
 8017d80:	4c0d      	ldr	r4, [pc, #52]	; (8017db8 <__libc_init_array+0x3c>)
 8017d82:	1b64      	subs	r4, r4, r5
 8017d84:	10a4      	asrs	r4, r4, #2
 8017d86:	2600      	movs	r6, #0
 8017d88:	42a6      	cmp	r6, r4
 8017d8a:	d109      	bne.n	8017da0 <__libc_init_array+0x24>
 8017d8c:	4d0b      	ldr	r5, [pc, #44]	; (8017dbc <__libc_init_array+0x40>)
 8017d8e:	4c0c      	ldr	r4, [pc, #48]	; (8017dc0 <__libc_init_array+0x44>)
 8017d90:	f000 ffcc 	bl	8018d2c <_init>
 8017d94:	1b64      	subs	r4, r4, r5
 8017d96:	10a4      	asrs	r4, r4, #2
 8017d98:	2600      	movs	r6, #0
 8017d9a:	42a6      	cmp	r6, r4
 8017d9c:	d105      	bne.n	8017daa <__libc_init_array+0x2e>
 8017d9e:	bd70      	pop	{r4, r5, r6, pc}
 8017da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017da4:	4798      	blx	r3
 8017da6:	3601      	adds	r6, #1
 8017da8:	e7ee      	b.n	8017d88 <__libc_init_array+0xc>
 8017daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8017dae:	4798      	blx	r3
 8017db0:	3601      	adds	r6, #1
 8017db2:	e7f2      	b.n	8017d9a <__libc_init_array+0x1e>
 8017db4:	0801c034 	.word	0x0801c034
 8017db8:	0801c034 	.word	0x0801c034
 8017dbc:	0801c034 	.word	0x0801c034
 8017dc0:	0801c038 	.word	0x0801c038

08017dc4 <__retarget_lock_init_recursive>:
 8017dc4:	4770      	bx	lr

08017dc6 <__retarget_lock_acquire_recursive>:
 8017dc6:	4770      	bx	lr

08017dc8 <__retarget_lock_release_recursive>:
 8017dc8:	4770      	bx	lr

08017dca <memcmp>:
 8017dca:	b530      	push	{r4, r5, lr}
 8017dcc:	3901      	subs	r1, #1
 8017dce:	2400      	movs	r4, #0
 8017dd0:	42a2      	cmp	r2, r4
 8017dd2:	d101      	bne.n	8017dd8 <memcmp+0xe>
 8017dd4:	2000      	movs	r0, #0
 8017dd6:	e005      	b.n	8017de4 <memcmp+0x1a>
 8017dd8:	5d03      	ldrb	r3, [r0, r4]
 8017dda:	3401      	adds	r4, #1
 8017ddc:	5d0d      	ldrb	r5, [r1, r4]
 8017dde:	42ab      	cmp	r3, r5
 8017de0:	d0f6      	beq.n	8017dd0 <memcmp+0x6>
 8017de2:	1b58      	subs	r0, r3, r5
 8017de4:	bd30      	pop	{r4, r5, pc}

08017de6 <memcpy>:
 8017de6:	440a      	add	r2, r1
 8017de8:	4291      	cmp	r1, r2
 8017dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8017dee:	d100      	bne.n	8017df2 <memcpy+0xc>
 8017df0:	4770      	bx	lr
 8017df2:	b510      	push	{r4, lr}
 8017df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017dfc:	4291      	cmp	r1, r2
 8017dfe:	d1f9      	bne.n	8017df4 <memcpy+0xe>
 8017e00:	bd10      	pop	{r4, pc}

08017e02 <memset>:
 8017e02:	4402      	add	r2, r0
 8017e04:	4603      	mov	r3, r0
 8017e06:	4293      	cmp	r3, r2
 8017e08:	d100      	bne.n	8017e0c <memset+0xa>
 8017e0a:	4770      	bx	lr
 8017e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8017e10:	e7f9      	b.n	8017e06 <memset+0x4>
	...

08017e14 <_malloc_r>:
 8017e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e16:	1ccd      	adds	r5, r1, #3
 8017e18:	f025 0503 	bic.w	r5, r5, #3
 8017e1c:	3508      	adds	r5, #8
 8017e1e:	2d0c      	cmp	r5, #12
 8017e20:	bf38      	it	cc
 8017e22:	250c      	movcc	r5, #12
 8017e24:	2d00      	cmp	r5, #0
 8017e26:	4606      	mov	r6, r0
 8017e28:	db01      	blt.n	8017e2e <_malloc_r+0x1a>
 8017e2a:	42a9      	cmp	r1, r5
 8017e2c:	d903      	bls.n	8017e36 <_malloc_r+0x22>
 8017e2e:	230c      	movs	r3, #12
 8017e30:	6033      	str	r3, [r6, #0]
 8017e32:	2000      	movs	r0, #0
 8017e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e36:	f000 fa8b 	bl	8018350 <__malloc_lock>
 8017e3a:	4921      	ldr	r1, [pc, #132]	; (8017ec0 <_malloc_r+0xac>)
 8017e3c:	680a      	ldr	r2, [r1, #0]
 8017e3e:	4614      	mov	r4, r2
 8017e40:	b99c      	cbnz	r4, 8017e6a <_malloc_r+0x56>
 8017e42:	4f20      	ldr	r7, [pc, #128]	; (8017ec4 <_malloc_r+0xb0>)
 8017e44:	683b      	ldr	r3, [r7, #0]
 8017e46:	b923      	cbnz	r3, 8017e52 <_malloc_r+0x3e>
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	f000 f8fe 	bl	801804c <_sbrk_r>
 8017e50:	6038      	str	r0, [r7, #0]
 8017e52:	4629      	mov	r1, r5
 8017e54:	4630      	mov	r0, r6
 8017e56:	f000 f8f9 	bl	801804c <_sbrk_r>
 8017e5a:	1c43      	adds	r3, r0, #1
 8017e5c:	d123      	bne.n	8017ea6 <_malloc_r+0x92>
 8017e5e:	230c      	movs	r3, #12
 8017e60:	6033      	str	r3, [r6, #0]
 8017e62:	4630      	mov	r0, r6
 8017e64:	f000 fa7a 	bl	801835c <__malloc_unlock>
 8017e68:	e7e3      	b.n	8017e32 <_malloc_r+0x1e>
 8017e6a:	6823      	ldr	r3, [r4, #0]
 8017e6c:	1b5b      	subs	r3, r3, r5
 8017e6e:	d417      	bmi.n	8017ea0 <_malloc_r+0x8c>
 8017e70:	2b0b      	cmp	r3, #11
 8017e72:	d903      	bls.n	8017e7c <_malloc_r+0x68>
 8017e74:	6023      	str	r3, [r4, #0]
 8017e76:	441c      	add	r4, r3
 8017e78:	6025      	str	r5, [r4, #0]
 8017e7a:	e004      	b.n	8017e86 <_malloc_r+0x72>
 8017e7c:	6863      	ldr	r3, [r4, #4]
 8017e7e:	42a2      	cmp	r2, r4
 8017e80:	bf0c      	ite	eq
 8017e82:	600b      	streq	r3, [r1, #0]
 8017e84:	6053      	strne	r3, [r2, #4]
 8017e86:	4630      	mov	r0, r6
 8017e88:	f000 fa68 	bl	801835c <__malloc_unlock>
 8017e8c:	f104 000b 	add.w	r0, r4, #11
 8017e90:	1d23      	adds	r3, r4, #4
 8017e92:	f020 0007 	bic.w	r0, r0, #7
 8017e96:	1ac2      	subs	r2, r0, r3
 8017e98:	d0cc      	beq.n	8017e34 <_malloc_r+0x20>
 8017e9a:	1a1b      	subs	r3, r3, r0
 8017e9c:	50a3      	str	r3, [r4, r2]
 8017e9e:	e7c9      	b.n	8017e34 <_malloc_r+0x20>
 8017ea0:	4622      	mov	r2, r4
 8017ea2:	6864      	ldr	r4, [r4, #4]
 8017ea4:	e7cc      	b.n	8017e40 <_malloc_r+0x2c>
 8017ea6:	1cc4      	adds	r4, r0, #3
 8017ea8:	f024 0403 	bic.w	r4, r4, #3
 8017eac:	42a0      	cmp	r0, r4
 8017eae:	d0e3      	beq.n	8017e78 <_malloc_r+0x64>
 8017eb0:	1a21      	subs	r1, r4, r0
 8017eb2:	4630      	mov	r0, r6
 8017eb4:	f000 f8ca 	bl	801804c <_sbrk_r>
 8017eb8:	3001      	adds	r0, #1
 8017eba:	d1dd      	bne.n	8017e78 <_malloc_r+0x64>
 8017ebc:	e7cf      	b.n	8017e5e <_malloc_r+0x4a>
 8017ebe:	bf00      	nop
 8017ec0:	20004c18 	.word	0x20004c18
 8017ec4:	20004c1c 	.word	0x20004c1c

08017ec8 <iprintf>:
 8017ec8:	b40f      	push	{r0, r1, r2, r3}
 8017eca:	4b0a      	ldr	r3, [pc, #40]	; (8017ef4 <iprintf+0x2c>)
 8017ecc:	b513      	push	{r0, r1, r4, lr}
 8017ece:	681c      	ldr	r4, [r3, #0]
 8017ed0:	b124      	cbz	r4, 8017edc <iprintf+0x14>
 8017ed2:	69a3      	ldr	r3, [r4, #24]
 8017ed4:	b913      	cbnz	r3, 8017edc <iprintf+0x14>
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7ff feb2 	bl	8017c40 <__sinit>
 8017edc:	ab05      	add	r3, sp, #20
 8017ede:	9a04      	ldr	r2, [sp, #16]
 8017ee0:	68a1      	ldr	r1, [r4, #8]
 8017ee2:	9301      	str	r3, [sp, #4]
 8017ee4:	4620      	mov	r0, r4
 8017ee6:	f000 fab9 	bl	801845c <_vfiprintf_r>
 8017eea:	b002      	add	sp, #8
 8017eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ef0:	b004      	add	sp, #16
 8017ef2:	4770      	bx	lr
 8017ef4:	20000020 	.word	0x20000020

08017ef8 <rand>:
 8017ef8:	4b17      	ldr	r3, [pc, #92]	; (8017f58 <rand+0x60>)
 8017efa:	b510      	push	{r4, lr}
 8017efc:	681c      	ldr	r4, [r3, #0]
 8017efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017f00:	b9b3      	cbnz	r3, 8017f30 <rand+0x38>
 8017f02:	2018      	movs	r0, #24
 8017f04:	f000 fa1c 	bl	8018340 <malloc>
 8017f08:	63a0      	str	r0, [r4, #56]	; 0x38
 8017f0a:	b928      	cbnz	r0, 8017f18 <rand+0x20>
 8017f0c:	4602      	mov	r2, r0
 8017f0e:	4b13      	ldr	r3, [pc, #76]	; (8017f5c <rand+0x64>)
 8017f10:	4813      	ldr	r0, [pc, #76]	; (8017f60 <rand+0x68>)
 8017f12:	214e      	movs	r1, #78	; 0x4e
 8017f14:	f000 f900 	bl	8018118 <__assert_func>
 8017f18:	4a12      	ldr	r2, [pc, #72]	; (8017f64 <rand+0x6c>)
 8017f1a:	4b13      	ldr	r3, [pc, #76]	; (8017f68 <rand+0x70>)
 8017f1c:	e9c0 2300 	strd	r2, r3, [r0]
 8017f20:	4b12      	ldr	r3, [pc, #72]	; (8017f6c <rand+0x74>)
 8017f22:	6083      	str	r3, [r0, #8]
 8017f24:	230b      	movs	r3, #11
 8017f26:	8183      	strh	r3, [r0, #12]
 8017f28:	2201      	movs	r2, #1
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017f30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017f32:	480f      	ldr	r0, [pc, #60]	; (8017f70 <rand+0x78>)
 8017f34:	690a      	ldr	r2, [r1, #16]
 8017f36:	694b      	ldr	r3, [r1, #20]
 8017f38:	4c0e      	ldr	r4, [pc, #56]	; (8017f74 <rand+0x7c>)
 8017f3a:	4350      	muls	r0, r2
 8017f3c:	fb04 0003 	mla	r0, r4, r3, r0
 8017f40:	fba2 3404 	umull	r3, r4, r2, r4
 8017f44:	1c5a      	adds	r2, r3, #1
 8017f46:	4404      	add	r4, r0
 8017f48:	f144 0000 	adc.w	r0, r4, #0
 8017f4c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017f50:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017f54:	bd10      	pop	{r4, pc}
 8017f56:	bf00      	nop
 8017f58:	20000020 	.word	0x20000020
 8017f5c:	0801bf44 	.word	0x0801bf44
 8017f60:	0801bf5b 	.word	0x0801bf5b
 8017f64:	abcd330e 	.word	0xabcd330e
 8017f68:	e66d1234 	.word	0xe66d1234
 8017f6c:	0005deec 	.word	0x0005deec
 8017f70:	5851f42d 	.word	0x5851f42d
 8017f74:	4c957f2d 	.word	0x4c957f2d

08017f78 <cleanup_glue>:
 8017f78:	b538      	push	{r3, r4, r5, lr}
 8017f7a:	460c      	mov	r4, r1
 8017f7c:	6809      	ldr	r1, [r1, #0]
 8017f7e:	4605      	mov	r5, r0
 8017f80:	b109      	cbz	r1, 8017f86 <cleanup_glue+0xe>
 8017f82:	f7ff fff9 	bl	8017f78 <cleanup_glue>
 8017f86:	4621      	mov	r1, r4
 8017f88:	4628      	mov	r0, r5
 8017f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f8e:	f000 b9eb 	b.w	8018368 <_free_r>
	...

08017f94 <_reclaim_reent>:
 8017f94:	4b2c      	ldr	r3, [pc, #176]	; (8018048 <_reclaim_reent+0xb4>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	4283      	cmp	r3, r0
 8017f9a:	b570      	push	{r4, r5, r6, lr}
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	d051      	beq.n	8018044 <_reclaim_reent+0xb0>
 8017fa0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017fa2:	b143      	cbz	r3, 8017fb6 <_reclaim_reent+0x22>
 8017fa4:	68db      	ldr	r3, [r3, #12]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d14a      	bne.n	8018040 <_reclaim_reent+0xac>
 8017faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fac:	6819      	ldr	r1, [r3, #0]
 8017fae:	b111      	cbz	r1, 8017fb6 <_reclaim_reent+0x22>
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 f9d9 	bl	8018368 <_free_r>
 8017fb6:	6961      	ldr	r1, [r4, #20]
 8017fb8:	b111      	cbz	r1, 8017fc0 <_reclaim_reent+0x2c>
 8017fba:	4620      	mov	r0, r4
 8017fbc:	f000 f9d4 	bl	8018368 <_free_r>
 8017fc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017fc2:	b111      	cbz	r1, 8017fca <_reclaim_reent+0x36>
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	f000 f9cf 	bl	8018368 <_free_r>
 8017fca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017fcc:	b111      	cbz	r1, 8017fd4 <_reclaim_reent+0x40>
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f000 f9ca 	bl	8018368 <_free_r>
 8017fd4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017fd6:	b111      	cbz	r1, 8017fde <_reclaim_reent+0x4a>
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f000 f9c5 	bl	8018368 <_free_r>
 8017fde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017fe0:	b111      	cbz	r1, 8017fe8 <_reclaim_reent+0x54>
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	f000 f9c0 	bl	8018368 <_free_r>
 8017fe8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017fea:	b111      	cbz	r1, 8017ff2 <_reclaim_reent+0x5e>
 8017fec:	4620      	mov	r0, r4
 8017fee:	f000 f9bb 	bl	8018368 <_free_r>
 8017ff2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017ff4:	b111      	cbz	r1, 8017ffc <_reclaim_reent+0x68>
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	f000 f9b6 	bl	8018368 <_free_r>
 8017ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ffe:	b111      	cbz	r1, 8018006 <_reclaim_reent+0x72>
 8018000:	4620      	mov	r0, r4
 8018002:	f000 f9b1 	bl	8018368 <_free_r>
 8018006:	69a3      	ldr	r3, [r4, #24]
 8018008:	b1e3      	cbz	r3, 8018044 <_reclaim_reent+0xb0>
 801800a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801800c:	4620      	mov	r0, r4
 801800e:	4798      	blx	r3
 8018010:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018012:	b1b9      	cbz	r1, 8018044 <_reclaim_reent+0xb0>
 8018014:	4620      	mov	r0, r4
 8018016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801801a:	f7ff bfad 	b.w	8017f78 <cleanup_glue>
 801801e:	5949      	ldr	r1, [r1, r5]
 8018020:	b941      	cbnz	r1, 8018034 <_reclaim_reent+0xa0>
 8018022:	3504      	adds	r5, #4
 8018024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018026:	2d80      	cmp	r5, #128	; 0x80
 8018028:	68d9      	ldr	r1, [r3, #12]
 801802a:	d1f8      	bne.n	801801e <_reclaim_reent+0x8a>
 801802c:	4620      	mov	r0, r4
 801802e:	f000 f99b 	bl	8018368 <_free_r>
 8018032:	e7ba      	b.n	8017faa <_reclaim_reent+0x16>
 8018034:	680e      	ldr	r6, [r1, #0]
 8018036:	4620      	mov	r0, r4
 8018038:	f000 f996 	bl	8018368 <_free_r>
 801803c:	4631      	mov	r1, r6
 801803e:	e7ef      	b.n	8018020 <_reclaim_reent+0x8c>
 8018040:	2500      	movs	r5, #0
 8018042:	e7ef      	b.n	8018024 <_reclaim_reent+0x90>
 8018044:	bd70      	pop	{r4, r5, r6, pc}
 8018046:	bf00      	nop
 8018048:	20000020 	.word	0x20000020

0801804c <_sbrk_r>:
 801804c:	b538      	push	{r3, r4, r5, lr}
 801804e:	4d06      	ldr	r5, [pc, #24]	; (8018068 <_sbrk_r+0x1c>)
 8018050:	2300      	movs	r3, #0
 8018052:	4604      	mov	r4, r0
 8018054:	4608      	mov	r0, r1
 8018056:	602b      	str	r3, [r5, #0]
 8018058:	f7e9 fa08 	bl	800146c <_sbrk>
 801805c:	1c43      	adds	r3, r0, #1
 801805e:	d102      	bne.n	8018066 <_sbrk_r+0x1a>
 8018060:	682b      	ldr	r3, [r5, #0]
 8018062:	b103      	cbz	r3, 8018066 <_sbrk_r+0x1a>
 8018064:	6023      	str	r3, [r4, #0]
 8018066:	bd38      	pop	{r3, r4, r5, pc}
 8018068:	2000ce48 	.word	0x2000ce48

0801806c <__sread>:
 801806c:	b510      	push	{r4, lr}
 801806e:	460c      	mov	r4, r1
 8018070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018074:	f000 fcb6 	bl	80189e4 <_read_r>
 8018078:	2800      	cmp	r0, #0
 801807a:	bfab      	itete	ge
 801807c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801807e:	89a3      	ldrhlt	r3, [r4, #12]
 8018080:	181b      	addge	r3, r3, r0
 8018082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018086:	bfac      	ite	ge
 8018088:	6563      	strge	r3, [r4, #84]	; 0x54
 801808a:	81a3      	strhlt	r3, [r4, #12]
 801808c:	bd10      	pop	{r4, pc}

0801808e <__swrite>:
 801808e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018092:	461f      	mov	r7, r3
 8018094:	898b      	ldrh	r3, [r1, #12]
 8018096:	05db      	lsls	r3, r3, #23
 8018098:	4605      	mov	r5, r0
 801809a:	460c      	mov	r4, r1
 801809c:	4616      	mov	r6, r2
 801809e:	d505      	bpl.n	80180ac <__swrite+0x1e>
 80180a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180a4:	2302      	movs	r3, #2
 80180a6:	2200      	movs	r2, #0
 80180a8:	f000 f938 	bl	801831c <_lseek_r>
 80180ac:	89a3      	ldrh	r3, [r4, #12]
 80180ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80180b6:	81a3      	strh	r3, [r4, #12]
 80180b8:	4632      	mov	r2, r6
 80180ba:	463b      	mov	r3, r7
 80180bc:	4628      	mov	r0, r5
 80180be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180c2:	f000 b817 	b.w	80180f4 <_write_r>

080180c6 <__sseek>:
 80180c6:	b510      	push	{r4, lr}
 80180c8:	460c      	mov	r4, r1
 80180ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180ce:	f000 f925 	bl	801831c <_lseek_r>
 80180d2:	1c43      	adds	r3, r0, #1
 80180d4:	89a3      	ldrh	r3, [r4, #12]
 80180d6:	bf15      	itete	ne
 80180d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80180da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80180de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80180e2:	81a3      	strheq	r3, [r4, #12]
 80180e4:	bf18      	it	ne
 80180e6:	81a3      	strhne	r3, [r4, #12]
 80180e8:	bd10      	pop	{r4, pc}

080180ea <__sclose>:
 80180ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180ee:	f000 b831 	b.w	8018154 <_close_r>
	...

080180f4 <_write_r>:
 80180f4:	b538      	push	{r3, r4, r5, lr}
 80180f6:	4d07      	ldr	r5, [pc, #28]	; (8018114 <_write_r+0x20>)
 80180f8:	4604      	mov	r4, r0
 80180fa:	4608      	mov	r0, r1
 80180fc:	4611      	mov	r1, r2
 80180fe:	2200      	movs	r2, #0
 8018100:	602a      	str	r2, [r5, #0]
 8018102:	461a      	mov	r2, r3
 8018104:	f7e9 f961 	bl	80013ca <_write>
 8018108:	1c43      	adds	r3, r0, #1
 801810a:	d102      	bne.n	8018112 <_write_r+0x1e>
 801810c:	682b      	ldr	r3, [r5, #0]
 801810e:	b103      	cbz	r3, 8018112 <_write_r+0x1e>
 8018110:	6023      	str	r3, [r4, #0]
 8018112:	bd38      	pop	{r3, r4, r5, pc}
 8018114:	2000ce48 	.word	0x2000ce48

08018118 <__assert_func>:
 8018118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801811a:	4614      	mov	r4, r2
 801811c:	461a      	mov	r2, r3
 801811e:	4b09      	ldr	r3, [pc, #36]	; (8018144 <__assert_func+0x2c>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	4605      	mov	r5, r0
 8018124:	68d8      	ldr	r0, [r3, #12]
 8018126:	b14c      	cbz	r4, 801813c <__assert_func+0x24>
 8018128:	4b07      	ldr	r3, [pc, #28]	; (8018148 <__assert_func+0x30>)
 801812a:	9100      	str	r1, [sp, #0]
 801812c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018130:	4906      	ldr	r1, [pc, #24]	; (801814c <__assert_func+0x34>)
 8018132:	462b      	mov	r3, r5
 8018134:	f000 f8e0 	bl	80182f8 <fiprintf>
 8018138:	f000 fd26 	bl	8018b88 <abort>
 801813c:	4b04      	ldr	r3, [pc, #16]	; (8018150 <__assert_func+0x38>)
 801813e:	461c      	mov	r4, r3
 8018140:	e7f3      	b.n	801812a <__assert_func+0x12>
 8018142:	bf00      	nop
 8018144:	20000020 	.word	0x20000020
 8018148:	0801bfba 	.word	0x0801bfba
 801814c:	0801bfc7 	.word	0x0801bfc7
 8018150:	0801bff5 	.word	0x0801bff5

08018154 <_close_r>:
 8018154:	b538      	push	{r3, r4, r5, lr}
 8018156:	4d06      	ldr	r5, [pc, #24]	; (8018170 <_close_r+0x1c>)
 8018158:	2300      	movs	r3, #0
 801815a:	4604      	mov	r4, r0
 801815c:	4608      	mov	r0, r1
 801815e:	602b      	str	r3, [r5, #0]
 8018160:	f7e9 f94f 	bl	8001402 <_close>
 8018164:	1c43      	adds	r3, r0, #1
 8018166:	d102      	bne.n	801816e <_close_r+0x1a>
 8018168:	682b      	ldr	r3, [r5, #0]
 801816a:	b103      	cbz	r3, 801816e <_close_r+0x1a>
 801816c:	6023      	str	r3, [r4, #0]
 801816e:	bd38      	pop	{r3, r4, r5, pc}
 8018170:	2000ce48 	.word	0x2000ce48

08018174 <__sflush_r>:
 8018174:	898a      	ldrh	r2, [r1, #12]
 8018176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817a:	4605      	mov	r5, r0
 801817c:	0710      	lsls	r0, r2, #28
 801817e:	460c      	mov	r4, r1
 8018180:	d458      	bmi.n	8018234 <__sflush_r+0xc0>
 8018182:	684b      	ldr	r3, [r1, #4]
 8018184:	2b00      	cmp	r3, #0
 8018186:	dc05      	bgt.n	8018194 <__sflush_r+0x20>
 8018188:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801818a:	2b00      	cmp	r3, #0
 801818c:	dc02      	bgt.n	8018194 <__sflush_r+0x20>
 801818e:	2000      	movs	r0, #0
 8018190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018196:	2e00      	cmp	r6, #0
 8018198:	d0f9      	beq.n	801818e <__sflush_r+0x1a>
 801819a:	2300      	movs	r3, #0
 801819c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80181a0:	682f      	ldr	r7, [r5, #0]
 80181a2:	602b      	str	r3, [r5, #0]
 80181a4:	d032      	beq.n	801820c <__sflush_r+0x98>
 80181a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181a8:	89a3      	ldrh	r3, [r4, #12]
 80181aa:	075a      	lsls	r2, r3, #29
 80181ac:	d505      	bpl.n	80181ba <__sflush_r+0x46>
 80181ae:	6863      	ldr	r3, [r4, #4]
 80181b0:	1ac0      	subs	r0, r0, r3
 80181b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181b4:	b10b      	cbz	r3, 80181ba <__sflush_r+0x46>
 80181b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181b8:	1ac0      	subs	r0, r0, r3
 80181ba:	2300      	movs	r3, #0
 80181bc:	4602      	mov	r2, r0
 80181be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181c0:	6a21      	ldr	r1, [r4, #32]
 80181c2:	4628      	mov	r0, r5
 80181c4:	47b0      	blx	r6
 80181c6:	1c43      	adds	r3, r0, #1
 80181c8:	89a3      	ldrh	r3, [r4, #12]
 80181ca:	d106      	bne.n	80181da <__sflush_r+0x66>
 80181cc:	6829      	ldr	r1, [r5, #0]
 80181ce:	291d      	cmp	r1, #29
 80181d0:	d82c      	bhi.n	801822c <__sflush_r+0xb8>
 80181d2:	4a2a      	ldr	r2, [pc, #168]	; (801827c <__sflush_r+0x108>)
 80181d4:	40ca      	lsrs	r2, r1
 80181d6:	07d6      	lsls	r6, r2, #31
 80181d8:	d528      	bpl.n	801822c <__sflush_r+0xb8>
 80181da:	2200      	movs	r2, #0
 80181dc:	6062      	str	r2, [r4, #4]
 80181de:	04d9      	lsls	r1, r3, #19
 80181e0:	6922      	ldr	r2, [r4, #16]
 80181e2:	6022      	str	r2, [r4, #0]
 80181e4:	d504      	bpl.n	80181f0 <__sflush_r+0x7c>
 80181e6:	1c42      	adds	r2, r0, #1
 80181e8:	d101      	bne.n	80181ee <__sflush_r+0x7a>
 80181ea:	682b      	ldr	r3, [r5, #0]
 80181ec:	b903      	cbnz	r3, 80181f0 <__sflush_r+0x7c>
 80181ee:	6560      	str	r0, [r4, #84]	; 0x54
 80181f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181f2:	602f      	str	r7, [r5, #0]
 80181f4:	2900      	cmp	r1, #0
 80181f6:	d0ca      	beq.n	801818e <__sflush_r+0x1a>
 80181f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181fc:	4299      	cmp	r1, r3
 80181fe:	d002      	beq.n	8018206 <__sflush_r+0x92>
 8018200:	4628      	mov	r0, r5
 8018202:	f000 f8b1 	bl	8018368 <_free_r>
 8018206:	2000      	movs	r0, #0
 8018208:	6360      	str	r0, [r4, #52]	; 0x34
 801820a:	e7c1      	b.n	8018190 <__sflush_r+0x1c>
 801820c:	6a21      	ldr	r1, [r4, #32]
 801820e:	2301      	movs	r3, #1
 8018210:	4628      	mov	r0, r5
 8018212:	47b0      	blx	r6
 8018214:	1c41      	adds	r1, r0, #1
 8018216:	d1c7      	bne.n	80181a8 <__sflush_r+0x34>
 8018218:	682b      	ldr	r3, [r5, #0]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d0c4      	beq.n	80181a8 <__sflush_r+0x34>
 801821e:	2b1d      	cmp	r3, #29
 8018220:	d001      	beq.n	8018226 <__sflush_r+0xb2>
 8018222:	2b16      	cmp	r3, #22
 8018224:	d101      	bne.n	801822a <__sflush_r+0xb6>
 8018226:	602f      	str	r7, [r5, #0]
 8018228:	e7b1      	b.n	801818e <__sflush_r+0x1a>
 801822a:	89a3      	ldrh	r3, [r4, #12]
 801822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018230:	81a3      	strh	r3, [r4, #12]
 8018232:	e7ad      	b.n	8018190 <__sflush_r+0x1c>
 8018234:	690f      	ldr	r7, [r1, #16]
 8018236:	2f00      	cmp	r7, #0
 8018238:	d0a9      	beq.n	801818e <__sflush_r+0x1a>
 801823a:	0793      	lsls	r3, r2, #30
 801823c:	680e      	ldr	r6, [r1, #0]
 801823e:	bf08      	it	eq
 8018240:	694b      	ldreq	r3, [r1, #20]
 8018242:	600f      	str	r7, [r1, #0]
 8018244:	bf18      	it	ne
 8018246:	2300      	movne	r3, #0
 8018248:	eba6 0807 	sub.w	r8, r6, r7
 801824c:	608b      	str	r3, [r1, #8]
 801824e:	f1b8 0f00 	cmp.w	r8, #0
 8018252:	dd9c      	ble.n	801818e <__sflush_r+0x1a>
 8018254:	6a21      	ldr	r1, [r4, #32]
 8018256:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018258:	4643      	mov	r3, r8
 801825a:	463a      	mov	r2, r7
 801825c:	4628      	mov	r0, r5
 801825e:	47b0      	blx	r6
 8018260:	2800      	cmp	r0, #0
 8018262:	dc06      	bgt.n	8018272 <__sflush_r+0xfe>
 8018264:	89a3      	ldrh	r3, [r4, #12]
 8018266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801826a:	81a3      	strh	r3, [r4, #12]
 801826c:	f04f 30ff 	mov.w	r0, #4294967295
 8018270:	e78e      	b.n	8018190 <__sflush_r+0x1c>
 8018272:	4407      	add	r7, r0
 8018274:	eba8 0800 	sub.w	r8, r8, r0
 8018278:	e7e9      	b.n	801824e <__sflush_r+0xda>
 801827a:	bf00      	nop
 801827c:	20400001 	.word	0x20400001

08018280 <_fflush_r>:
 8018280:	b538      	push	{r3, r4, r5, lr}
 8018282:	690b      	ldr	r3, [r1, #16]
 8018284:	4605      	mov	r5, r0
 8018286:	460c      	mov	r4, r1
 8018288:	b913      	cbnz	r3, 8018290 <_fflush_r+0x10>
 801828a:	2500      	movs	r5, #0
 801828c:	4628      	mov	r0, r5
 801828e:	bd38      	pop	{r3, r4, r5, pc}
 8018290:	b118      	cbz	r0, 801829a <_fflush_r+0x1a>
 8018292:	6983      	ldr	r3, [r0, #24]
 8018294:	b90b      	cbnz	r3, 801829a <_fflush_r+0x1a>
 8018296:	f7ff fcd3 	bl	8017c40 <__sinit>
 801829a:	4b14      	ldr	r3, [pc, #80]	; (80182ec <_fflush_r+0x6c>)
 801829c:	429c      	cmp	r4, r3
 801829e:	d11b      	bne.n	80182d8 <_fflush_r+0x58>
 80182a0:	686c      	ldr	r4, [r5, #4]
 80182a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d0ef      	beq.n	801828a <_fflush_r+0xa>
 80182aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182ac:	07d0      	lsls	r0, r2, #31
 80182ae:	d404      	bmi.n	80182ba <_fflush_r+0x3a>
 80182b0:	0599      	lsls	r1, r3, #22
 80182b2:	d402      	bmi.n	80182ba <_fflush_r+0x3a>
 80182b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182b6:	f7ff fd86 	bl	8017dc6 <__retarget_lock_acquire_recursive>
 80182ba:	4628      	mov	r0, r5
 80182bc:	4621      	mov	r1, r4
 80182be:	f7ff ff59 	bl	8018174 <__sflush_r>
 80182c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80182c4:	07da      	lsls	r2, r3, #31
 80182c6:	4605      	mov	r5, r0
 80182c8:	d4e0      	bmi.n	801828c <_fflush_r+0xc>
 80182ca:	89a3      	ldrh	r3, [r4, #12]
 80182cc:	059b      	lsls	r3, r3, #22
 80182ce:	d4dd      	bmi.n	801828c <_fflush_r+0xc>
 80182d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182d2:	f7ff fd79 	bl	8017dc8 <__retarget_lock_release_recursive>
 80182d6:	e7d9      	b.n	801828c <_fflush_r+0xc>
 80182d8:	4b05      	ldr	r3, [pc, #20]	; (80182f0 <_fflush_r+0x70>)
 80182da:	429c      	cmp	r4, r3
 80182dc:	d101      	bne.n	80182e2 <_fflush_r+0x62>
 80182de:	68ac      	ldr	r4, [r5, #8]
 80182e0:	e7df      	b.n	80182a2 <_fflush_r+0x22>
 80182e2:	4b04      	ldr	r3, [pc, #16]	; (80182f4 <_fflush_r+0x74>)
 80182e4:	429c      	cmp	r4, r3
 80182e6:	bf08      	it	eq
 80182e8:	68ec      	ldreq	r4, [r5, #12]
 80182ea:	e7da      	b.n	80182a2 <_fflush_r+0x22>
 80182ec:	0801bf00 	.word	0x0801bf00
 80182f0:	0801bf20 	.word	0x0801bf20
 80182f4:	0801bee0 	.word	0x0801bee0

080182f8 <fiprintf>:
 80182f8:	b40e      	push	{r1, r2, r3}
 80182fa:	b503      	push	{r0, r1, lr}
 80182fc:	4601      	mov	r1, r0
 80182fe:	ab03      	add	r3, sp, #12
 8018300:	4805      	ldr	r0, [pc, #20]	; (8018318 <fiprintf+0x20>)
 8018302:	f853 2b04 	ldr.w	r2, [r3], #4
 8018306:	6800      	ldr	r0, [r0, #0]
 8018308:	9301      	str	r3, [sp, #4]
 801830a:	f000 f8a7 	bl	801845c <_vfiprintf_r>
 801830e:	b002      	add	sp, #8
 8018310:	f85d eb04 	ldr.w	lr, [sp], #4
 8018314:	b003      	add	sp, #12
 8018316:	4770      	bx	lr
 8018318:	20000020 	.word	0x20000020

0801831c <_lseek_r>:
 801831c:	b538      	push	{r3, r4, r5, lr}
 801831e:	4d07      	ldr	r5, [pc, #28]	; (801833c <_lseek_r+0x20>)
 8018320:	4604      	mov	r4, r0
 8018322:	4608      	mov	r0, r1
 8018324:	4611      	mov	r1, r2
 8018326:	2200      	movs	r2, #0
 8018328:	602a      	str	r2, [r5, #0]
 801832a:	461a      	mov	r2, r3
 801832c:	f7e9 f890 	bl	8001450 <_lseek>
 8018330:	1c43      	adds	r3, r0, #1
 8018332:	d102      	bne.n	801833a <_lseek_r+0x1e>
 8018334:	682b      	ldr	r3, [r5, #0]
 8018336:	b103      	cbz	r3, 801833a <_lseek_r+0x1e>
 8018338:	6023      	str	r3, [r4, #0]
 801833a:	bd38      	pop	{r3, r4, r5, pc}
 801833c:	2000ce48 	.word	0x2000ce48

08018340 <malloc>:
 8018340:	4b02      	ldr	r3, [pc, #8]	; (801834c <malloc+0xc>)
 8018342:	4601      	mov	r1, r0
 8018344:	6818      	ldr	r0, [r3, #0]
 8018346:	f7ff bd65 	b.w	8017e14 <_malloc_r>
 801834a:	bf00      	nop
 801834c:	20000020 	.word	0x20000020

08018350 <__malloc_lock>:
 8018350:	4801      	ldr	r0, [pc, #4]	; (8018358 <__malloc_lock+0x8>)
 8018352:	f7ff bd38 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 8018356:	bf00      	nop
 8018358:	2000ce54 	.word	0x2000ce54

0801835c <__malloc_unlock>:
 801835c:	4801      	ldr	r0, [pc, #4]	; (8018364 <__malloc_unlock+0x8>)
 801835e:	f7ff bd33 	b.w	8017dc8 <__retarget_lock_release_recursive>
 8018362:	bf00      	nop
 8018364:	2000ce54 	.word	0x2000ce54

08018368 <_free_r>:
 8018368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801836a:	2900      	cmp	r1, #0
 801836c:	d048      	beq.n	8018400 <_free_r+0x98>
 801836e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018372:	9001      	str	r0, [sp, #4]
 8018374:	2b00      	cmp	r3, #0
 8018376:	f1a1 0404 	sub.w	r4, r1, #4
 801837a:	bfb8      	it	lt
 801837c:	18e4      	addlt	r4, r4, r3
 801837e:	f7ff ffe7 	bl	8018350 <__malloc_lock>
 8018382:	4a20      	ldr	r2, [pc, #128]	; (8018404 <_free_r+0x9c>)
 8018384:	9801      	ldr	r0, [sp, #4]
 8018386:	6813      	ldr	r3, [r2, #0]
 8018388:	4615      	mov	r5, r2
 801838a:	b933      	cbnz	r3, 801839a <_free_r+0x32>
 801838c:	6063      	str	r3, [r4, #4]
 801838e:	6014      	str	r4, [r2, #0]
 8018390:	b003      	add	sp, #12
 8018392:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018396:	f7ff bfe1 	b.w	801835c <__malloc_unlock>
 801839a:	42a3      	cmp	r3, r4
 801839c:	d90b      	bls.n	80183b6 <_free_r+0x4e>
 801839e:	6821      	ldr	r1, [r4, #0]
 80183a0:	1862      	adds	r2, r4, r1
 80183a2:	4293      	cmp	r3, r2
 80183a4:	bf04      	itt	eq
 80183a6:	681a      	ldreq	r2, [r3, #0]
 80183a8:	685b      	ldreq	r3, [r3, #4]
 80183aa:	6063      	str	r3, [r4, #4]
 80183ac:	bf04      	itt	eq
 80183ae:	1852      	addeq	r2, r2, r1
 80183b0:	6022      	streq	r2, [r4, #0]
 80183b2:	602c      	str	r4, [r5, #0]
 80183b4:	e7ec      	b.n	8018390 <_free_r+0x28>
 80183b6:	461a      	mov	r2, r3
 80183b8:	685b      	ldr	r3, [r3, #4]
 80183ba:	b10b      	cbz	r3, 80183c0 <_free_r+0x58>
 80183bc:	42a3      	cmp	r3, r4
 80183be:	d9fa      	bls.n	80183b6 <_free_r+0x4e>
 80183c0:	6811      	ldr	r1, [r2, #0]
 80183c2:	1855      	adds	r5, r2, r1
 80183c4:	42a5      	cmp	r5, r4
 80183c6:	d10b      	bne.n	80183e0 <_free_r+0x78>
 80183c8:	6824      	ldr	r4, [r4, #0]
 80183ca:	4421      	add	r1, r4
 80183cc:	1854      	adds	r4, r2, r1
 80183ce:	42a3      	cmp	r3, r4
 80183d0:	6011      	str	r1, [r2, #0]
 80183d2:	d1dd      	bne.n	8018390 <_free_r+0x28>
 80183d4:	681c      	ldr	r4, [r3, #0]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	6053      	str	r3, [r2, #4]
 80183da:	4421      	add	r1, r4
 80183dc:	6011      	str	r1, [r2, #0]
 80183de:	e7d7      	b.n	8018390 <_free_r+0x28>
 80183e0:	d902      	bls.n	80183e8 <_free_r+0x80>
 80183e2:	230c      	movs	r3, #12
 80183e4:	6003      	str	r3, [r0, #0]
 80183e6:	e7d3      	b.n	8018390 <_free_r+0x28>
 80183e8:	6825      	ldr	r5, [r4, #0]
 80183ea:	1961      	adds	r1, r4, r5
 80183ec:	428b      	cmp	r3, r1
 80183ee:	bf04      	itt	eq
 80183f0:	6819      	ldreq	r1, [r3, #0]
 80183f2:	685b      	ldreq	r3, [r3, #4]
 80183f4:	6063      	str	r3, [r4, #4]
 80183f6:	bf04      	itt	eq
 80183f8:	1949      	addeq	r1, r1, r5
 80183fa:	6021      	streq	r1, [r4, #0]
 80183fc:	6054      	str	r4, [r2, #4]
 80183fe:	e7c7      	b.n	8018390 <_free_r+0x28>
 8018400:	b003      	add	sp, #12
 8018402:	bd30      	pop	{r4, r5, pc}
 8018404:	20004c18 	.word	0x20004c18

08018408 <__sfputc_r>:
 8018408:	6893      	ldr	r3, [r2, #8]
 801840a:	3b01      	subs	r3, #1
 801840c:	2b00      	cmp	r3, #0
 801840e:	b410      	push	{r4}
 8018410:	6093      	str	r3, [r2, #8]
 8018412:	da08      	bge.n	8018426 <__sfputc_r+0x1e>
 8018414:	6994      	ldr	r4, [r2, #24]
 8018416:	42a3      	cmp	r3, r4
 8018418:	db01      	blt.n	801841e <__sfputc_r+0x16>
 801841a:	290a      	cmp	r1, #10
 801841c:	d103      	bne.n	8018426 <__sfputc_r+0x1e>
 801841e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018422:	f000 baf1 	b.w	8018a08 <__swbuf_r>
 8018426:	6813      	ldr	r3, [r2, #0]
 8018428:	1c58      	adds	r0, r3, #1
 801842a:	6010      	str	r0, [r2, #0]
 801842c:	7019      	strb	r1, [r3, #0]
 801842e:	4608      	mov	r0, r1
 8018430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018434:	4770      	bx	lr

08018436 <__sfputs_r>:
 8018436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018438:	4606      	mov	r6, r0
 801843a:	460f      	mov	r7, r1
 801843c:	4614      	mov	r4, r2
 801843e:	18d5      	adds	r5, r2, r3
 8018440:	42ac      	cmp	r4, r5
 8018442:	d101      	bne.n	8018448 <__sfputs_r+0x12>
 8018444:	2000      	movs	r0, #0
 8018446:	e007      	b.n	8018458 <__sfputs_r+0x22>
 8018448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801844c:	463a      	mov	r2, r7
 801844e:	4630      	mov	r0, r6
 8018450:	f7ff ffda 	bl	8018408 <__sfputc_r>
 8018454:	1c43      	adds	r3, r0, #1
 8018456:	d1f3      	bne.n	8018440 <__sfputs_r+0xa>
 8018458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801845c <_vfiprintf_r>:
 801845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018460:	460d      	mov	r5, r1
 8018462:	b09d      	sub	sp, #116	; 0x74
 8018464:	4614      	mov	r4, r2
 8018466:	4698      	mov	r8, r3
 8018468:	4606      	mov	r6, r0
 801846a:	b118      	cbz	r0, 8018474 <_vfiprintf_r+0x18>
 801846c:	6983      	ldr	r3, [r0, #24]
 801846e:	b90b      	cbnz	r3, 8018474 <_vfiprintf_r+0x18>
 8018470:	f7ff fbe6 	bl	8017c40 <__sinit>
 8018474:	4b89      	ldr	r3, [pc, #548]	; (801869c <_vfiprintf_r+0x240>)
 8018476:	429d      	cmp	r5, r3
 8018478:	d11b      	bne.n	80184b2 <_vfiprintf_r+0x56>
 801847a:	6875      	ldr	r5, [r6, #4]
 801847c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801847e:	07d9      	lsls	r1, r3, #31
 8018480:	d405      	bmi.n	801848e <_vfiprintf_r+0x32>
 8018482:	89ab      	ldrh	r3, [r5, #12]
 8018484:	059a      	lsls	r2, r3, #22
 8018486:	d402      	bmi.n	801848e <_vfiprintf_r+0x32>
 8018488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801848a:	f7ff fc9c 	bl	8017dc6 <__retarget_lock_acquire_recursive>
 801848e:	89ab      	ldrh	r3, [r5, #12]
 8018490:	071b      	lsls	r3, r3, #28
 8018492:	d501      	bpl.n	8018498 <_vfiprintf_r+0x3c>
 8018494:	692b      	ldr	r3, [r5, #16]
 8018496:	b9eb      	cbnz	r3, 80184d4 <_vfiprintf_r+0x78>
 8018498:	4629      	mov	r1, r5
 801849a:	4630      	mov	r0, r6
 801849c:	f000 fb06 	bl	8018aac <__swsetup_r>
 80184a0:	b1c0      	cbz	r0, 80184d4 <_vfiprintf_r+0x78>
 80184a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184a4:	07dc      	lsls	r4, r3, #31
 80184a6:	d50e      	bpl.n	80184c6 <_vfiprintf_r+0x6a>
 80184a8:	f04f 30ff 	mov.w	r0, #4294967295
 80184ac:	b01d      	add	sp, #116	; 0x74
 80184ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184b2:	4b7b      	ldr	r3, [pc, #492]	; (80186a0 <_vfiprintf_r+0x244>)
 80184b4:	429d      	cmp	r5, r3
 80184b6:	d101      	bne.n	80184bc <_vfiprintf_r+0x60>
 80184b8:	68b5      	ldr	r5, [r6, #8]
 80184ba:	e7df      	b.n	801847c <_vfiprintf_r+0x20>
 80184bc:	4b79      	ldr	r3, [pc, #484]	; (80186a4 <_vfiprintf_r+0x248>)
 80184be:	429d      	cmp	r5, r3
 80184c0:	bf08      	it	eq
 80184c2:	68f5      	ldreq	r5, [r6, #12]
 80184c4:	e7da      	b.n	801847c <_vfiprintf_r+0x20>
 80184c6:	89ab      	ldrh	r3, [r5, #12]
 80184c8:	0598      	lsls	r0, r3, #22
 80184ca:	d4ed      	bmi.n	80184a8 <_vfiprintf_r+0x4c>
 80184cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184ce:	f7ff fc7b 	bl	8017dc8 <__retarget_lock_release_recursive>
 80184d2:	e7e9      	b.n	80184a8 <_vfiprintf_r+0x4c>
 80184d4:	2300      	movs	r3, #0
 80184d6:	9309      	str	r3, [sp, #36]	; 0x24
 80184d8:	2320      	movs	r3, #32
 80184da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184de:	f8cd 800c 	str.w	r8, [sp, #12]
 80184e2:	2330      	movs	r3, #48	; 0x30
 80184e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80186a8 <_vfiprintf_r+0x24c>
 80184e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80184ec:	f04f 0901 	mov.w	r9, #1
 80184f0:	4623      	mov	r3, r4
 80184f2:	469a      	mov	sl, r3
 80184f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184f8:	b10a      	cbz	r2, 80184fe <_vfiprintf_r+0xa2>
 80184fa:	2a25      	cmp	r2, #37	; 0x25
 80184fc:	d1f9      	bne.n	80184f2 <_vfiprintf_r+0x96>
 80184fe:	ebba 0b04 	subs.w	fp, sl, r4
 8018502:	d00b      	beq.n	801851c <_vfiprintf_r+0xc0>
 8018504:	465b      	mov	r3, fp
 8018506:	4622      	mov	r2, r4
 8018508:	4629      	mov	r1, r5
 801850a:	4630      	mov	r0, r6
 801850c:	f7ff ff93 	bl	8018436 <__sfputs_r>
 8018510:	3001      	adds	r0, #1
 8018512:	f000 80aa 	beq.w	801866a <_vfiprintf_r+0x20e>
 8018516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018518:	445a      	add	r2, fp
 801851a:	9209      	str	r2, [sp, #36]	; 0x24
 801851c:	f89a 3000 	ldrb.w	r3, [sl]
 8018520:	2b00      	cmp	r3, #0
 8018522:	f000 80a2 	beq.w	801866a <_vfiprintf_r+0x20e>
 8018526:	2300      	movs	r3, #0
 8018528:	f04f 32ff 	mov.w	r2, #4294967295
 801852c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018530:	f10a 0a01 	add.w	sl, sl, #1
 8018534:	9304      	str	r3, [sp, #16]
 8018536:	9307      	str	r3, [sp, #28]
 8018538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801853c:	931a      	str	r3, [sp, #104]	; 0x68
 801853e:	4654      	mov	r4, sl
 8018540:	2205      	movs	r2, #5
 8018542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018546:	4858      	ldr	r0, [pc, #352]	; (80186a8 <_vfiprintf_r+0x24c>)
 8018548:	f7e7 fe42 	bl	80001d0 <memchr>
 801854c:	9a04      	ldr	r2, [sp, #16]
 801854e:	b9d8      	cbnz	r0, 8018588 <_vfiprintf_r+0x12c>
 8018550:	06d1      	lsls	r1, r2, #27
 8018552:	bf44      	itt	mi
 8018554:	2320      	movmi	r3, #32
 8018556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801855a:	0713      	lsls	r3, r2, #28
 801855c:	bf44      	itt	mi
 801855e:	232b      	movmi	r3, #43	; 0x2b
 8018560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018564:	f89a 3000 	ldrb.w	r3, [sl]
 8018568:	2b2a      	cmp	r3, #42	; 0x2a
 801856a:	d015      	beq.n	8018598 <_vfiprintf_r+0x13c>
 801856c:	9a07      	ldr	r2, [sp, #28]
 801856e:	4654      	mov	r4, sl
 8018570:	2000      	movs	r0, #0
 8018572:	f04f 0c0a 	mov.w	ip, #10
 8018576:	4621      	mov	r1, r4
 8018578:	f811 3b01 	ldrb.w	r3, [r1], #1
 801857c:	3b30      	subs	r3, #48	; 0x30
 801857e:	2b09      	cmp	r3, #9
 8018580:	d94e      	bls.n	8018620 <_vfiprintf_r+0x1c4>
 8018582:	b1b0      	cbz	r0, 80185b2 <_vfiprintf_r+0x156>
 8018584:	9207      	str	r2, [sp, #28]
 8018586:	e014      	b.n	80185b2 <_vfiprintf_r+0x156>
 8018588:	eba0 0308 	sub.w	r3, r0, r8
 801858c:	fa09 f303 	lsl.w	r3, r9, r3
 8018590:	4313      	orrs	r3, r2
 8018592:	9304      	str	r3, [sp, #16]
 8018594:	46a2      	mov	sl, r4
 8018596:	e7d2      	b.n	801853e <_vfiprintf_r+0xe2>
 8018598:	9b03      	ldr	r3, [sp, #12]
 801859a:	1d19      	adds	r1, r3, #4
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	9103      	str	r1, [sp, #12]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	bfbb      	ittet	lt
 80185a4:	425b      	neglt	r3, r3
 80185a6:	f042 0202 	orrlt.w	r2, r2, #2
 80185aa:	9307      	strge	r3, [sp, #28]
 80185ac:	9307      	strlt	r3, [sp, #28]
 80185ae:	bfb8      	it	lt
 80185b0:	9204      	strlt	r2, [sp, #16]
 80185b2:	7823      	ldrb	r3, [r4, #0]
 80185b4:	2b2e      	cmp	r3, #46	; 0x2e
 80185b6:	d10c      	bne.n	80185d2 <_vfiprintf_r+0x176>
 80185b8:	7863      	ldrb	r3, [r4, #1]
 80185ba:	2b2a      	cmp	r3, #42	; 0x2a
 80185bc:	d135      	bne.n	801862a <_vfiprintf_r+0x1ce>
 80185be:	9b03      	ldr	r3, [sp, #12]
 80185c0:	1d1a      	adds	r2, r3, #4
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	9203      	str	r2, [sp, #12]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	bfb8      	it	lt
 80185ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80185ce:	3402      	adds	r4, #2
 80185d0:	9305      	str	r3, [sp, #20]
 80185d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80186b8 <_vfiprintf_r+0x25c>
 80185d6:	7821      	ldrb	r1, [r4, #0]
 80185d8:	2203      	movs	r2, #3
 80185da:	4650      	mov	r0, sl
 80185dc:	f7e7 fdf8 	bl	80001d0 <memchr>
 80185e0:	b140      	cbz	r0, 80185f4 <_vfiprintf_r+0x198>
 80185e2:	2340      	movs	r3, #64	; 0x40
 80185e4:	eba0 000a 	sub.w	r0, r0, sl
 80185e8:	fa03 f000 	lsl.w	r0, r3, r0
 80185ec:	9b04      	ldr	r3, [sp, #16]
 80185ee:	4303      	orrs	r3, r0
 80185f0:	3401      	adds	r4, #1
 80185f2:	9304      	str	r3, [sp, #16]
 80185f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185f8:	482c      	ldr	r0, [pc, #176]	; (80186ac <_vfiprintf_r+0x250>)
 80185fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80185fe:	2206      	movs	r2, #6
 8018600:	f7e7 fde6 	bl	80001d0 <memchr>
 8018604:	2800      	cmp	r0, #0
 8018606:	d03f      	beq.n	8018688 <_vfiprintf_r+0x22c>
 8018608:	4b29      	ldr	r3, [pc, #164]	; (80186b0 <_vfiprintf_r+0x254>)
 801860a:	bb1b      	cbnz	r3, 8018654 <_vfiprintf_r+0x1f8>
 801860c:	9b03      	ldr	r3, [sp, #12]
 801860e:	3307      	adds	r3, #7
 8018610:	f023 0307 	bic.w	r3, r3, #7
 8018614:	3308      	adds	r3, #8
 8018616:	9303      	str	r3, [sp, #12]
 8018618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801861a:	443b      	add	r3, r7
 801861c:	9309      	str	r3, [sp, #36]	; 0x24
 801861e:	e767      	b.n	80184f0 <_vfiprintf_r+0x94>
 8018620:	fb0c 3202 	mla	r2, ip, r2, r3
 8018624:	460c      	mov	r4, r1
 8018626:	2001      	movs	r0, #1
 8018628:	e7a5      	b.n	8018576 <_vfiprintf_r+0x11a>
 801862a:	2300      	movs	r3, #0
 801862c:	3401      	adds	r4, #1
 801862e:	9305      	str	r3, [sp, #20]
 8018630:	4619      	mov	r1, r3
 8018632:	f04f 0c0a 	mov.w	ip, #10
 8018636:	4620      	mov	r0, r4
 8018638:	f810 2b01 	ldrb.w	r2, [r0], #1
 801863c:	3a30      	subs	r2, #48	; 0x30
 801863e:	2a09      	cmp	r2, #9
 8018640:	d903      	bls.n	801864a <_vfiprintf_r+0x1ee>
 8018642:	2b00      	cmp	r3, #0
 8018644:	d0c5      	beq.n	80185d2 <_vfiprintf_r+0x176>
 8018646:	9105      	str	r1, [sp, #20]
 8018648:	e7c3      	b.n	80185d2 <_vfiprintf_r+0x176>
 801864a:	fb0c 2101 	mla	r1, ip, r1, r2
 801864e:	4604      	mov	r4, r0
 8018650:	2301      	movs	r3, #1
 8018652:	e7f0      	b.n	8018636 <_vfiprintf_r+0x1da>
 8018654:	ab03      	add	r3, sp, #12
 8018656:	9300      	str	r3, [sp, #0]
 8018658:	462a      	mov	r2, r5
 801865a:	4b16      	ldr	r3, [pc, #88]	; (80186b4 <_vfiprintf_r+0x258>)
 801865c:	a904      	add	r1, sp, #16
 801865e:	4630      	mov	r0, r6
 8018660:	f3af 8000 	nop.w
 8018664:	4607      	mov	r7, r0
 8018666:	1c78      	adds	r0, r7, #1
 8018668:	d1d6      	bne.n	8018618 <_vfiprintf_r+0x1bc>
 801866a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801866c:	07d9      	lsls	r1, r3, #31
 801866e:	d405      	bmi.n	801867c <_vfiprintf_r+0x220>
 8018670:	89ab      	ldrh	r3, [r5, #12]
 8018672:	059a      	lsls	r2, r3, #22
 8018674:	d402      	bmi.n	801867c <_vfiprintf_r+0x220>
 8018676:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018678:	f7ff fba6 	bl	8017dc8 <__retarget_lock_release_recursive>
 801867c:	89ab      	ldrh	r3, [r5, #12]
 801867e:	065b      	lsls	r3, r3, #25
 8018680:	f53f af12 	bmi.w	80184a8 <_vfiprintf_r+0x4c>
 8018684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018686:	e711      	b.n	80184ac <_vfiprintf_r+0x50>
 8018688:	ab03      	add	r3, sp, #12
 801868a:	9300      	str	r3, [sp, #0]
 801868c:	462a      	mov	r2, r5
 801868e:	4b09      	ldr	r3, [pc, #36]	; (80186b4 <_vfiprintf_r+0x258>)
 8018690:	a904      	add	r1, sp, #16
 8018692:	4630      	mov	r0, r6
 8018694:	f000 f880 	bl	8018798 <_printf_i>
 8018698:	e7e4      	b.n	8018664 <_vfiprintf_r+0x208>
 801869a:	bf00      	nop
 801869c:	0801bf00 	.word	0x0801bf00
 80186a0:	0801bf20 	.word	0x0801bf20
 80186a4:	0801bee0 	.word	0x0801bee0
 80186a8:	0801bff6 	.word	0x0801bff6
 80186ac:	0801c000 	.word	0x0801c000
 80186b0:	00000000 	.word	0x00000000
 80186b4:	08018437 	.word	0x08018437
 80186b8:	0801bffc 	.word	0x0801bffc

080186bc <_printf_common>:
 80186bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186c0:	4616      	mov	r6, r2
 80186c2:	4699      	mov	r9, r3
 80186c4:	688a      	ldr	r2, [r1, #8]
 80186c6:	690b      	ldr	r3, [r1, #16]
 80186c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80186cc:	4293      	cmp	r3, r2
 80186ce:	bfb8      	it	lt
 80186d0:	4613      	movlt	r3, r2
 80186d2:	6033      	str	r3, [r6, #0]
 80186d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80186d8:	4607      	mov	r7, r0
 80186da:	460c      	mov	r4, r1
 80186dc:	b10a      	cbz	r2, 80186e2 <_printf_common+0x26>
 80186de:	3301      	adds	r3, #1
 80186e0:	6033      	str	r3, [r6, #0]
 80186e2:	6823      	ldr	r3, [r4, #0]
 80186e4:	0699      	lsls	r1, r3, #26
 80186e6:	bf42      	ittt	mi
 80186e8:	6833      	ldrmi	r3, [r6, #0]
 80186ea:	3302      	addmi	r3, #2
 80186ec:	6033      	strmi	r3, [r6, #0]
 80186ee:	6825      	ldr	r5, [r4, #0]
 80186f0:	f015 0506 	ands.w	r5, r5, #6
 80186f4:	d106      	bne.n	8018704 <_printf_common+0x48>
 80186f6:	f104 0a19 	add.w	sl, r4, #25
 80186fa:	68e3      	ldr	r3, [r4, #12]
 80186fc:	6832      	ldr	r2, [r6, #0]
 80186fe:	1a9b      	subs	r3, r3, r2
 8018700:	42ab      	cmp	r3, r5
 8018702:	dc26      	bgt.n	8018752 <_printf_common+0x96>
 8018704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018708:	1e13      	subs	r3, r2, #0
 801870a:	6822      	ldr	r2, [r4, #0]
 801870c:	bf18      	it	ne
 801870e:	2301      	movne	r3, #1
 8018710:	0692      	lsls	r2, r2, #26
 8018712:	d42b      	bmi.n	801876c <_printf_common+0xb0>
 8018714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018718:	4649      	mov	r1, r9
 801871a:	4638      	mov	r0, r7
 801871c:	47c0      	blx	r8
 801871e:	3001      	adds	r0, #1
 8018720:	d01e      	beq.n	8018760 <_printf_common+0xa4>
 8018722:	6823      	ldr	r3, [r4, #0]
 8018724:	68e5      	ldr	r5, [r4, #12]
 8018726:	6832      	ldr	r2, [r6, #0]
 8018728:	f003 0306 	and.w	r3, r3, #6
 801872c:	2b04      	cmp	r3, #4
 801872e:	bf08      	it	eq
 8018730:	1aad      	subeq	r5, r5, r2
 8018732:	68a3      	ldr	r3, [r4, #8]
 8018734:	6922      	ldr	r2, [r4, #16]
 8018736:	bf0c      	ite	eq
 8018738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801873c:	2500      	movne	r5, #0
 801873e:	4293      	cmp	r3, r2
 8018740:	bfc4      	itt	gt
 8018742:	1a9b      	subgt	r3, r3, r2
 8018744:	18ed      	addgt	r5, r5, r3
 8018746:	2600      	movs	r6, #0
 8018748:	341a      	adds	r4, #26
 801874a:	42b5      	cmp	r5, r6
 801874c:	d11a      	bne.n	8018784 <_printf_common+0xc8>
 801874e:	2000      	movs	r0, #0
 8018750:	e008      	b.n	8018764 <_printf_common+0xa8>
 8018752:	2301      	movs	r3, #1
 8018754:	4652      	mov	r2, sl
 8018756:	4649      	mov	r1, r9
 8018758:	4638      	mov	r0, r7
 801875a:	47c0      	blx	r8
 801875c:	3001      	adds	r0, #1
 801875e:	d103      	bne.n	8018768 <_printf_common+0xac>
 8018760:	f04f 30ff 	mov.w	r0, #4294967295
 8018764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018768:	3501      	adds	r5, #1
 801876a:	e7c6      	b.n	80186fa <_printf_common+0x3e>
 801876c:	18e1      	adds	r1, r4, r3
 801876e:	1c5a      	adds	r2, r3, #1
 8018770:	2030      	movs	r0, #48	; 0x30
 8018772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018776:	4422      	add	r2, r4
 8018778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801877c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018780:	3302      	adds	r3, #2
 8018782:	e7c7      	b.n	8018714 <_printf_common+0x58>
 8018784:	2301      	movs	r3, #1
 8018786:	4622      	mov	r2, r4
 8018788:	4649      	mov	r1, r9
 801878a:	4638      	mov	r0, r7
 801878c:	47c0      	blx	r8
 801878e:	3001      	adds	r0, #1
 8018790:	d0e6      	beq.n	8018760 <_printf_common+0xa4>
 8018792:	3601      	adds	r6, #1
 8018794:	e7d9      	b.n	801874a <_printf_common+0x8e>
	...

08018798 <_printf_i>:
 8018798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801879c:	460c      	mov	r4, r1
 801879e:	4691      	mov	r9, r2
 80187a0:	7e27      	ldrb	r7, [r4, #24]
 80187a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80187a4:	2f78      	cmp	r7, #120	; 0x78
 80187a6:	4680      	mov	r8, r0
 80187a8:	469a      	mov	sl, r3
 80187aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80187ae:	d807      	bhi.n	80187c0 <_printf_i+0x28>
 80187b0:	2f62      	cmp	r7, #98	; 0x62
 80187b2:	d80a      	bhi.n	80187ca <_printf_i+0x32>
 80187b4:	2f00      	cmp	r7, #0
 80187b6:	f000 80d8 	beq.w	801896a <_printf_i+0x1d2>
 80187ba:	2f58      	cmp	r7, #88	; 0x58
 80187bc:	f000 80a3 	beq.w	8018906 <_printf_i+0x16e>
 80187c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80187c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80187c8:	e03a      	b.n	8018840 <_printf_i+0xa8>
 80187ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80187ce:	2b15      	cmp	r3, #21
 80187d0:	d8f6      	bhi.n	80187c0 <_printf_i+0x28>
 80187d2:	a001      	add	r0, pc, #4	; (adr r0, 80187d8 <_printf_i+0x40>)
 80187d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80187d8:	08018831 	.word	0x08018831
 80187dc:	08018845 	.word	0x08018845
 80187e0:	080187c1 	.word	0x080187c1
 80187e4:	080187c1 	.word	0x080187c1
 80187e8:	080187c1 	.word	0x080187c1
 80187ec:	080187c1 	.word	0x080187c1
 80187f0:	08018845 	.word	0x08018845
 80187f4:	080187c1 	.word	0x080187c1
 80187f8:	080187c1 	.word	0x080187c1
 80187fc:	080187c1 	.word	0x080187c1
 8018800:	080187c1 	.word	0x080187c1
 8018804:	08018951 	.word	0x08018951
 8018808:	08018875 	.word	0x08018875
 801880c:	08018933 	.word	0x08018933
 8018810:	080187c1 	.word	0x080187c1
 8018814:	080187c1 	.word	0x080187c1
 8018818:	08018973 	.word	0x08018973
 801881c:	080187c1 	.word	0x080187c1
 8018820:	08018875 	.word	0x08018875
 8018824:	080187c1 	.word	0x080187c1
 8018828:	080187c1 	.word	0x080187c1
 801882c:	0801893b 	.word	0x0801893b
 8018830:	680b      	ldr	r3, [r1, #0]
 8018832:	1d1a      	adds	r2, r3, #4
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	600a      	str	r2, [r1, #0]
 8018838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801883c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018840:	2301      	movs	r3, #1
 8018842:	e0a3      	b.n	801898c <_printf_i+0x1f4>
 8018844:	6825      	ldr	r5, [r4, #0]
 8018846:	6808      	ldr	r0, [r1, #0]
 8018848:	062e      	lsls	r6, r5, #24
 801884a:	f100 0304 	add.w	r3, r0, #4
 801884e:	d50a      	bpl.n	8018866 <_printf_i+0xce>
 8018850:	6805      	ldr	r5, [r0, #0]
 8018852:	600b      	str	r3, [r1, #0]
 8018854:	2d00      	cmp	r5, #0
 8018856:	da03      	bge.n	8018860 <_printf_i+0xc8>
 8018858:	232d      	movs	r3, #45	; 0x2d
 801885a:	426d      	negs	r5, r5
 801885c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018860:	485e      	ldr	r0, [pc, #376]	; (80189dc <_printf_i+0x244>)
 8018862:	230a      	movs	r3, #10
 8018864:	e019      	b.n	801889a <_printf_i+0x102>
 8018866:	f015 0f40 	tst.w	r5, #64	; 0x40
 801886a:	6805      	ldr	r5, [r0, #0]
 801886c:	600b      	str	r3, [r1, #0]
 801886e:	bf18      	it	ne
 8018870:	b22d      	sxthne	r5, r5
 8018872:	e7ef      	b.n	8018854 <_printf_i+0xbc>
 8018874:	680b      	ldr	r3, [r1, #0]
 8018876:	6825      	ldr	r5, [r4, #0]
 8018878:	1d18      	adds	r0, r3, #4
 801887a:	6008      	str	r0, [r1, #0]
 801887c:	0628      	lsls	r0, r5, #24
 801887e:	d501      	bpl.n	8018884 <_printf_i+0xec>
 8018880:	681d      	ldr	r5, [r3, #0]
 8018882:	e002      	b.n	801888a <_printf_i+0xf2>
 8018884:	0669      	lsls	r1, r5, #25
 8018886:	d5fb      	bpl.n	8018880 <_printf_i+0xe8>
 8018888:	881d      	ldrh	r5, [r3, #0]
 801888a:	4854      	ldr	r0, [pc, #336]	; (80189dc <_printf_i+0x244>)
 801888c:	2f6f      	cmp	r7, #111	; 0x6f
 801888e:	bf0c      	ite	eq
 8018890:	2308      	moveq	r3, #8
 8018892:	230a      	movne	r3, #10
 8018894:	2100      	movs	r1, #0
 8018896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801889a:	6866      	ldr	r6, [r4, #4]
 801889c:	60a6      	str	r6, [r4, #8]
 801889e:	2e00      	cmp	r6, #0
 80188a0:	bfa2      	ittt	ge
 80188a2:	6821      	ldrge	r1, [r4, #0]
 80188a4:	f021 0104 	bicge.w	r1, r1, #4
 80188a8:	6021      	strge	r1, [r4, #0]
 80188aa:	b90d      	cbnz	r5, 80188b0 <_printf_i+0x118>
 80188ac:	2e00      	cmp	r6, #0
 80188ae:	d04d      	beq.n	801894c <_printf_i+0x1b4>
 80188b0:	4616      	mov	r6, r2
 80188b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80188b6:	fb03 5711 	mls	r7, r3, r1, r5
 80188ba:	5dc7      	ldrb	r7, [r0, r7]
 80188bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80188c0:	462f      	mov	r7, r5
 80188c2:	42bb      	cmp	r3, r7
 80188c4:	460d      	mov	r5, r1
 80188c6:	d9f4      	bls.n	80188b2 <_printf_i+0x11a>
 80188c8:	2b08      	cmp	r3, #8
 80188ca:	d10b      	bne.n	80188e4 <_printf_i+0x14c>
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	07df      	lsls	r7, r3, #31
 80188d0:	d508      	bpl.n	80188e4 <_printf_i+0x14c>
 80188d2:	6923      	ldr	r3, [r4, #16]
 80188d4:	6861      	ldr	r1, [r4, #4]
 80188d6:	4299      	cmp	r1, r3
 80188d8:	bfde      	ittt	le
 80188da:	2330      	movle	r3, #48	; 0x30
 80188dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80188e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80188e4:	1b92      	subs	r2, r2, r6
 80188e6:	6122      	str	r2, [r4, #16]
 80188e8:	f8cd a000 	str.w	sl, [sp]
 80188ec:	464b      	mov	r3, r9
 80188ee:	aa03      	add	r2, sp, #12
 80188f0:	4621      	mov	r1, r4
 80188f2:	4640      	mov	r0, r8
 80188f4:	f7ff fee2 	bl	80186bc <_printf_common>
 80188f8:	3001      	adds	r0, #1
 80188fa:	d14c      	bne.n	8018996 <_printf_i+0x1fe>
 80188fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018900:	b004      	add	sp, #16
 8018902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018906:	4835      	ldr	r0, [pc, #212]	; (80189dc <_printf_i+0x244>)
 8018908:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801890c:	6823      	ldr	r3, [r4, #0]
 801890e:	680e      	ldr	r6, [r1, #0]
 8018910:	061f      	lsls	r7, r3, #24
 8018912:	f856 5b04 	ldr.w	r5, [r6], #4
 8018916:	600e      	str	r6, [r1, #0]
 8018918:	d514      	bpl.n	8018944 <_printf_i+0x1ac>
 801891a:	07d9      	lsls	r1, r3, #31
 801891c:	bf44      	itt	mi
 801891e:	f043 0320 	orrmi.w	r3, r3, #32
 8018922:	6023      	strmi	r3, [r4, #0]
 8018924:	b91d      	cbnz	r5, 801892e <_printf_i+0x196>
 8018926:	6823      	ldr	r3, [r4, #0]
 8018928:	f023 0320 	bic.w	r3, r3, #32
 801892c:	6023      	str	r3, [r4, #0]
 801892e:	2310      	movs	r3, #16
 8018930:	e7b0      	b.n	8018894 <_printf_i+0xfc>
 8018932:	6823      	ldr	r3, [r4, #0]
 8018934:	f043 0320 	orr.w	r3, r3, #32
 8018938:	6023      	str	r3, [r4, #0]
 801893a:	2378      	movs	r3, #120	; 0x78
 801893c:	4828      	ldr	r0, [pc, #160]	; (80189e0 <_printf_i+0x248>)
 801893e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018942:	e7e3      	b.n	801890c <_printf_i+0x174>
 8018944:	065e      	lsls	r6, r3, #25
 8018946:	bf48      	it	mi
 8018948:	b2ad      	uxthmi	r5, r5
 801894a:	e7e6      	b.n	801891a <_printf_i+0x182>
 801894c:	4616      	mov	r6, r2
 801894e:	e7bb      	b.n	80188c8 <_printf_i+0x130>
 8018950:	680b      	ldr	r3, [r1, #0]
 8018952:	6826      	ldr	r6, [r4, #0]
 8018954:	6960      	ldr	r0, [r4, #20]
 8018956:	1d1d      	adds	r5, r3, #4
 8018958:	600d      	str	r5, [r1, #0]
 801895a:	0635      	lsls	r5, r6, #24
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	d501      	bpl.n	8018964 <_printf_i+0x1cc>
 8018960:	6018      	str	r0, [r3, #0]
 8018962:	e002      	b.n	801896a <_printf_i+0x1d2>
 8018964:	0671      	lsls	r1, r6, #25
 8018966:	d5fb      	bpl.n	8018960 <_printf_i+0x1c8>
 8018968:	8018      	strh	r0, [r3, #0]
 801896a:	2300      	movs	r3, #0
 801896c:	6123      	str	r3, [r4, #16]
 801896e:	4616      	mov	r6, r2
 8018970:	e7ba      	b.n	80188e8 <_printf_i+0x150>
 8018972:	680b      	ldr	r3, [r1, #0]
 8018974:	1d1a      	adds	r2, r3, #4
 8018976:	600a      	str	r2, [r1, #0]
 8018978:	681e      	ldr	r6, [r3, #0]
 801897a:	6862      	ldr	r2, [r4, #4]
 801897c:	2100      	movs	r1, #0
 801897e:	4630      	mov	r0, r6
 8018980:	f7e7 fc26 	bl	80001d0 <memchr>
 8018984:	b108      	cbz	r0, 801898a <_printf_i+0x1f2>
 8018986:	1b80      	subs	r0, r0, r6
 8018988:	6060      	str	r0, [r4, #4]
 801898a:	6863      	ldr	r3, [r4, #4]
 801898c:	6123      	str	r3, [r4, #16]
 801898e:	2300      	movs	r3, #0
 8018990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018994:	e7a8      	b.n	80188e8 <_printf_i+0x150>
 8018996:	6923      	ldr	r3, [r4, #16]
 8018998:	4632      	mov	r2, r6
 801899a:	4649      	mov	r1, r9
 801899c:	4640      	mov	r0, r8
 801899e:	47d0      	blx	sl
 80189a0:	3001      	adds	r0, #1
 80189a2:	d0ab      	beq.n	80188fc <_printf_i+0x164>
 80189a4:	6823      	ldr	r3, [r4, #0]
 80189a6:	079b      	lsls	r3, r3, #30
 80189a8:	d413      	bmi.n	80189d2 <_printf_i+0x23a>
 80189aa:	68e0      	ldr	r0, [r4, #12]
 80189ac:	9b03      	ldr	r3, [sp, #12]
 80189ae:	4298      	cmp	r0, r3
 80189b0:	bfb8      	it	lt
 80189b2:	4618      	movlt	r0, r3
 80189b4:	e7a4      	b.n	8018900 <_printf_i+0x168>
 80189b6:	2301      	movs	r3, #1
 80189b8:	4632      	mov	r2, r6
 80189ba:	4649      	mov	r1, r9
 80189bc:	4640      	mov	r0, r8
 80189be:	47d0      	blx	sl
 80189c0:	3001      	adds	r0, #1
 80189c2:	d09b      	beq.n	80188fc <_printf_i+0x164>
 80189c4:	3501      	adds	r5, #1
 80189c6:	68e3      	ldr	r3, [r4, #12]
 80189c8:	9903      	ldr	r1, [sp, #12]
 80189ca:	1a5b      	subs	r3, r3, r1
 80189cc:	42ab      	cmp	r3, r5
 80189ce:	dcf2      	bgt.n	80189b6 <_printf_i+0x21e>
 80189d0:	e7eb      	b.n	80189aa <_printf_i+0x212>
 80189d2:	2500      	movs	r5, #0
 80189d4:	f104 0619 	add.w	r6, r4, #25
 80189d8:	e7f5      	b.n	80189c6 <_printf_i+0x22e>
 80189da:	bf00      	nop
 80189dc:	0801c007 	.word	0x0801c007
 80189e0:	0801c018 	.word	0x0801c018

080189e4 <_read_r>:
 80189e4:	b538      	push	{r3, r4, r5, lr}
 80189e6:	4d07      	ldr	r5, [pc, #28]	; (8018a04 <_read_r+0x20>)
 80189e8:	4604      	mov	r4, r0
 80189ea:	4608      	mov	r0, r1
 80189ec:	4611      	mov	r1, r2
 80189ee:	2200      	movs	r2, #0
 80189f0:	602a      	str	r2, [r5, #0]
 80189f2:	461a      	mov	r2, r3
 80189f4:	f7e8 fccc 	bl	8001390 <_read>
 80189f8:	1c43      	adds	r3, r0, #1
 80189fa:	d102      	bne.n	8018a02 <_read_r+0x1e>
 80189fc:	682b      	ldr	r3, [r5, #0]
 80189fe:	b103      	cbz	r3, 8018a02 <_read_r+0x1e>
 8018a00:	6023      	str	r3, [r4, #0]
 8018a02:	bd38      	pop	{r3, r4, r5, pc}
 8018a04:	2000ce48 	.word	0x2000ce48

08018a08 <__swbuf_r>:
 8018a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a0a:	460e      	mov	r6, r1
 8018a0c:	4614      	mov	r4, r2
 8018a0e:	4605      	mov	r5, r0
 8018a10:	b118      	cbz	r0, 8018a1a <__swbuf_r+0x12>
 8018a12:	6983      	ldr	r3, [r0, #24]
 8018a14:	b90b      	cbnz	r3, 8018a1a <__swbuf_r+0x12>
 8018a16:	f7ff f913 	bl	8017c40 <__sinit>
 8018a1a:	4b21      	ldr	r3, [pc, #132]	; (8018aa0 <__swbuf_r+0x98>)
 8018a1c:	429c      	cmp	r4, r3
 8018a1e:	d12b      	bne.n	8018a78 <__swbuf_r+0x70>
 8018a20:	686c      	ldr	r4, [r5, #4]
 8018a22:	69a3      	ldr	r3, [r4, #24]
 8018a24:	60a3      	str	r3, [r4, #8]
 8018a26:	89a3      	ldrh	r3, [r4, #12]
 8018a28:	071a      	lsls	r2, r3, #28
 8018a2a:	d52f      	bpl.n	8018a8c <__swbuf_r+0x84>
 8018a2c:	6923      	ldr	r3, [r4, #16]
 8018a2e:	b36b      	cbz	r3, 8018a8c <__swbuf_r+0x84>
 8018a30:	6923      	ldr	r3, [r4, #16]
 8018a32:	6820      	ldr	r0, [r4, #0]
 8018a34:	1ac0      	subs	r0, r0, r3
 8018a36:	6963      	ldr	r3, [r4, #20]
 8018a38:	b2f6      	uxtb	r6, r6
 8018a3a:	4283      	cmp	r3, r0
 8018a3c:	4637      	mov	r7, r6
 8018a3e:	dc04      	bgt.n	8018a4a <__swbuf_r+0x42>
 8018a40:	4621      	mov	r1, r4
 8018a42:	4628      	mov	r0, r5
 8018a44:	f7ff fc1c 	bl	8018280 <_fflush_r>
 8018a48:	bb30      	cbnz	r0, 8018a98 <__swbuf_r+0x90>
 8018a4a:	68a3      	ldr	r3, [r4, #8]
 8018a4c:	3b01      	subs	r3, #1
 8018a4e:	60a3      	str	r3, [r4, #8]
 8018a50:	6823      	ldr	r3, [r4, #0]
 8018a52:	1c5a      	adds	r2, r3, #1
 8018a54:	6022      	str	r2, [r4, #0]
 8018a56:	701e      	strb	r6, [r3, #0]
 8018a58:	6963      	ldr	r3, [r4, #20]
 8018a5a:	3001      	adds	r0, #1
 8018a5c:	4283      	cmp	r3, r0
 8018a5e:	d004      	beq.n	8018a6a <__swbuf_r+0x62>
 8018a60:	89a3      	ldrh	r3, [r4, #12]
 8018a62:	07db      	lsls	r3, r3, #31
 8018a64:	d506      	bpl.n	8018a74 <__swbuf_r+0x6c>
 8018a66:	2e0a      	cmp	r6, #10
 8018a68:	d104      	bne.n	8018a74 <__swbuf_r+0x6c>
 8018a6a:	4621      	mov	r1, r4
 8018a6c:	4628      	mov	r0, r5
 8018a6e:	f7ff fc07 	bl	8018280 <_fflush_r>
 8018a72:	b988      	cbnz	r0, 8018a98 <__swbuf_r+0x90>
 8018a74:	4638      	mov	r0, r7
 8018a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a78:	4b0a      	ldr	r3, [pc, #40]	; (8018aa4 <__swbuf_r+0x9c>)
 8018a7a:	429c      	cmp	r4, r3
 8018a7c:	d101      	bne.n	8018a82 <__swbuf_r+0x7a>
 8018a7e:	68ac      	ldr	r4, [r5, #8]
 8018a80:	e7cf      	b.n	8018a22 <__swbuf_r+0x1a>
 8018a82:	4b09      	ldr	r3, [pc, #36]	; (8018aa8 <__swbuf_r+0xa0>)
 8018a84:	429c      	cmp	r4, r3
 8018a86:	bf08      	it	eq
 8018a88:	68ec      	ldreq	r4, [r5, #12]
 8018a8a:	e7ca      	b.n	8018a22 <__swbuf_r+0x1a>
 8018a8c:	4621      	mov	r1, r4
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f000 f80c 	bl	8018aac <__swsetup_r>
 8018a94:	2800      	cmp	r0, #0
 8018a96:	d0cb      	beq.n	8018a30 <__swbuf_r+0x28>
 8018a98:	f04f 37ff 	mov.w	r7, #4294967295
 8018a9c:	e7ea      	b.n	8018a74 <__swbuf_r+0x6c>
 8018a9e:	bf00      	nop
 8018aa0:	0801bf00 	.word	0x0801bf00
 8018aa4:	0801bf20 	.word	0x0801bf20
 8018aa8:	0801bee0 	.word	0x0801bee0

08018aac <__swsetup_r>:
 8018aac:	4b32      	ldr	r3, [pc, #200]	; (8018b78 <__swsetup_r+0xcc>)
 8018aae:	b570      	push	{r4, r5, r6, lr}
 8018ab0:	681d      	ldr	r5, [r3, #0]
 8018ab2:	4606      	mov	r6, r0
 8018ab4:	460c      	mov	r4, r1
 8018ab6:	b125      	cbz	r5, 8018ac2 <__swsetup_r+0x16>
 8018ab8:	69ab      	ldr	r3, [r5, #24]
 8018aba:	b913      	cbnz	r3, 8018ac2 <__swsetup_r+0x16>
 8018abc:	4628      	mov	r0, r5
 8018abe:	f7ff f8bf 	bl	8017c40 <__sinit>
 8018ac2:	4b2e      	ldr	r3, [pc, #184]	; (8018b7c <__swsetup_r+0xd0>)
 8018ac4:	429c      	cmp	r4, r3
 8018ac6:	d10f      	bne.n	8018ae8 <__swsetup_r+0x3c>
 8018ac8:	686c      	ldr	r4, [r5, #4]
 8018aca:	89a3      	ldrh	r3, [r4, #12]
 8018acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ad0:	0719      	lsls	r1, r3, #28
 8018ad2:	d42c      	bmi.n	8018b2e <__swsetup_r+0x82>
 8018ad4:	06dd      	lsls	r5, r3, #27
 8018ad6:	d411      	bmi.n	8018afc <__swsetup_r+0x50>
 8018ad8:	2309      	movs	r3, #9
 8018ada:	6033      	str	r3, [r6, #0]
 8018adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018ae0:	81a3      	strh	r3, [r4, #12]
 8018ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8018ae6:	e03e      	b.n	8018b66 <__swsetup_r+0xba>
 8018ae8:	4b25      	ldr	r3, [pc, #148]	; (8018b80 <__swsetup_r+0xd4>)
 8018aea:	429c      	cmp	r4, r3
 8018aec:	d101      	bne.n	8018af2 <__swsetup_r+0x46>
 8018aee:	68ac      	ldr	r4, [r5, #8]
 8018af0:	e7eb      	b.n	8018aca <__swsetup_r+0x1e>
 8018af2:	4b24      	ldr	r3, [pc, #144]	; (8018b84 <__swsetup_r+0xd8>)
 8018af4:	429c      	cmp	r4, r3
 8018af6:	bf08      	it	eq
 8018af8:	68ec      	ldreq	r4, [r5, #12]
 8018afa:	e7e6      	b.n	8018aca <__swsetup_r+0x1e>
 8018afc:	0758      	lsls	r0, r3, #29
 8018afe:	d512      	bpl.n	8018b26 <__swsetup_r+0x7a>
 8018b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b02:	b141      	cbz	r1, 8018b16 <__swsetup_r+0x6a>
 8018b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b08:	4299      	cmp	r1, r3
 8018b0a:	d002      	beq.n	8018b12 <__swsetup_r+0x66>
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	f7ff fc2b 	bl	8018368 <_free_r>
 8018b12:	2300      	movs	r3, #0
 8018b14:	6363      	str	r3, [r4, #52]	; 0x34
 8018b16:	89a3      	ldrh	r3, [r4, #12]
 8018b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b1c:	81a3      	strh	r3, [r4, #12]
 8018b1e:	2300      	movs	r3, #0
 8018b20:	6063      	str	r3, [r4, #4]
 8018b22:	6923      	ldr	r3, [r4, #16]
 8018b24:	6023      	str	r3, [r4, #0]
 8018b26:	89a3      	ldrh	r3, [r4, #12]
 8018b28:	f043 0308 	orr.w	r3, r3, #8
 8018b2c:	81a3      	strh	r3, [r4, #12]
 8018b2e:	6923      	ldr	r3, [r4, #16]
 8018b30:	b94b      	cbnz	r3, 8018b46 <__swsetup_r+0x9a>
 8018b32:	89a3      	ldrh	r3, [r4, #12]
 8018b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b3c:	d003      	beq.n	8018b46 <__swsetup_r+0x9a>
 8018b3e:	4621      	mov	r1, r4
 8018b40:	4630      	mov	r0, r6
 8018b42:	f000 f84d 	bl	8018be0 <__smakebuf_r>
 8018b46:	89a0      	ldrh	r0, [r4, #12]
 8018b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b4c:	f010 0301 	ands.w	r3, r0, #1
 8018b50:	d00a      	beq.n	8018b68 <__swsetup_r+0xbc>
 8018b52:	2300      	movs	r3, #0
 8018b54:	60a3      	str	r3, [r4, #8]
 8018b56:	6963      	ldr	r3, [r4, #20]
 8018b58:	425b      	negs	r3, r3
 8018b5a:	61a3      	str	r3, [r4, #24]
 8018b5c:	6923      	ldr	r3, [r4, #16]
 8018b5e:	b943      	cbnz	r3, 8018b72 <__swsetup_r+0xc6>
 8018b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b64:	d1ba      	bne.n	8018adc <__swsetup_r+0x30>
 8018b66:	bd70      	pop	{r4, r5, r6, pc}
 8018b68:	0781      	lsls	r1, r0, #30
 8018b6a:	bf58      	it	pl
 8018b6c:	6963      	ldrpl	r3, [r4, #20]
 8018b6e:	60a3      	str	r3, [r4, #8]
 8018b70:	e7f4      	b.n	8018b5c <__swsetup_r+0xb0>
 8018b72:	2000      	movs	r0, #0
 8018b74:	e7f7      	b.n	8018b66 <__swsetup_r+0xba>
 8018b76:	bf00      	nop
 8018b78:	20000020 	.word	0x20000020
 8018b7c:	0801bf00 	.word	0x0801bf00
 8018b80:	0801bf20 	.word	0x0801bf20
 8018b84:	0801bee0 	.word	0x0801bee0

08018b88 <abort>:
 8018b88:	b508      	push	{r3, lr}
 8018b8a:	2006      	movs	r0, #6
 8018b8c:	f000 f890 	bl	8018cb0 <raise>
 8018b90:	2001      	movs	r0, #1
 8018b92:	f7e8 fbf3 	bl	800137c <_exit>

08018b96 <__swhatbuf_r>:
 8018b96:	b570      	push	{r4, r5, r6, lr}
 8018b98:	460e      	mov	r6, r1
 8018b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b9e:	2900      	cmp	r1, #0
 8018ba0:	b096      	sub	sp, #88	; 0x58
 8018ba2:	4614      	mov	r4, r2
 8018ba4:	461d      	mov	r5, r3
 8018ba6:	da07      	bge.n	8018bb8 <__swhatbuf_r+0x22>
 8018ba8:	2300      	movs	r3, #0
 8018baa:	602b      	str	r3, [r5, #0]
 8018bac:	89b3      	ldrh	r3, [r6, #12]
 8018bae:	061a      	lsls	r2, r3, #24
 8018bb0:	d410      	bmi.n	8018bd4 <__swhatbuf_r+0x3e>
 8018bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bb6:	e00e      	b.n	8018bd6 <__swhatbuf_r+0x40>
 8018bb8:	466a      	mov	r2, sp
 8018bba:	f000 f895 	bl	8018ce8 <_fstat_r>
 8018bbe:	2800      	cmp	r0, #0
 8018bc0:	dbf2      	blt.n	8018ba8 <__swhatbuf_r+0x12>
 8018bc2:	9a01      	ldr	r2, [sp, #4]
 8018bc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018bc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018bcc:	425a      	negs	r2, r3
 8018bce:	415a      	adcs	r2, r3
 8018bd0:	602a      	str	r2, [r5, #0]
 8018bd2:	e7ee      	b.n	8018bb2 <__swhatbuf_r+0x1c>
 8018bd4:	2340      	movs	r3, #64	; 0x40
 8018bd6:	2000      	movs	r0, #0
 8018bd8:	6023      	str	r3, [r4, #0]
 8018bda:	b016      	add	sp, #88	; 0x58
 8018bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08018be0 <__smakebuf_r>:
 8018be0:	898b      	ldrh	r3, [r1, #12]
 8018be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018be4:	079d      	lsls	r5, r3, #30
 8018be6:	4606      	mov	r6, r0
 8018be8:	460c      	mov	r4, r1
 8018bea:	d507      	bpl.n	8018bfc <__smakebuf_r+0x1c>
 8018bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018bf0:	6023      	str	r3, [r4, #0]
 8018bf2:	6123      	str	r3, [r4, #16]
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	6163      	str	r3, [r4, #20]
 8018bf8:	b002      	add	sp, #8
 8018bfa:	bd70      	pop	{r4, r5, r6, pc}
 8018bfc:	ab01      	add	r3, sp, #4
 8018bfe:	466a      	mov	r2, sp
 8018c00:	f7ff ffc9 	bl	8018b96 <__swhatbuf_r>
 8018c04:	9900      	ldr	r1, [sp, #0]
 8018c06:	4605      	mov	r5, r0
 8018c08:	4630      	mov	r0, r6
 8018c0a:	f7ff f903 	bl	8017e14 <_malloc_r>
 8018c0e:	b948      	cbnz	r0, 8018c24 <__smakebuf_r+0x44>
 8018c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c14:	059a      	lsls	r2, r3, #22
 8018c16:	d4ef      	bmi.n	8018bf8 <__smakebuf_r+0x18>
 8018c18:	f023 0303 	bic.w	r3, r3, #3
 8018c1c:	f043 0302 	orr.w	r3, r3, #2
 8018c20:	81a3      	strh	r3, [r4, #12]
 8018c22:	e7e3      	b.n	8018bec <__smakebuf_r+0xc>
 8018c24:	4b0d      	ldr	r3, [pc, #52]	; (8018c5c <__smakebuf_r+0x7c>)
 8018c26:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c28:	89a3      	ldrh	r3, [r4, #12]
 8018c2a:	6020      	str	r0, [r4, #0]
 8018c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c30:	81a3      	strh	r3, [r4, #12]
 8018c32:	9b00      	ldr	r3, [sp, #0]
 8018c34:	6163      	str	r3, [r4, #20]
 8018c36:	9b01      	ldr	r3, [sp, #4]
 8018c38:	6120      	str	r0, [r4, #16]
 8018c3a:	b15b      	cbz	r3, 8018c54 <__smakebuf_r+0x74>
 8018c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c40:	4630      	mov	r0, r6
 8018c42:	f000 f863 	bl	8018d0c <_isatty_r>
 8018c46:	b128      	cbz	r0, 8018c54 <__smakebuf_r+0x74>
 8018c48:	89a3      	ldrh	r3, [r4, #12]
 8018c4a:	f023 0303 	bic.w	r3, r3, #3
 8018c4e:	f043 0301 	orr.w	r3, r3, #1
 8018c52:	81a3      	strh	r3, [r4, #12]
 8018c54:	89a0      	ldrh	r0, [r4, #12]
 8018c56:	4305      	orrs	r5, r0
 8018c58:	81a5      	strh	r5, [r4, #12]
 8018c5a:	e7cd      	b.n	8018bf8 <__smakebuf_r+0x18>
 8018c5c:	08017bd9 	.word	0x08017bd9

08018c60 <_raise_r>:
 8018c60:	291f      	cmp	r1, #31
 8018c62:	b538      	push	{r3, r4, r5, lr}
 8018c64:	4604      	mov	r4, r0
 8018c66:	460d      	mov	r5, r1
 8018c68:	d904      	bls.n	8018c74 <_raise_r+0x14>
 8018c6a:	2316      	movs	r3, #22
 8018c6c:	6003      	str	r3, [r0, #0]
 8018c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c72:	bd38      	pop	{r3, r4, r5, pc}
 8018c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018c76:	b112      	cbz	r2, 8018c7e <_raise_r+0x1e>
 8018c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c7c:	b94b      	cbnz	r3, 8018c92 <_raise_r+0x32>
 8018c7e:	4620      	mov	r0, r4
 8018c80:	f000 f830 	bl	8018ce4 <_getpid_r>
 8018c84:	462a      	mov	r2, r5
 8018c86:	4601      	mov	r1, r0
 8018c88:	4620      	mov	r0, r4
 8018c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c8e:	f000 b817 	b.w	8018cc0 <_kill_r>
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	d00a      	beq.n	8018cac <_raise_r+0x4c>
 8018c96:	1c59      	adds	r1, r3, #1
 8018c98:	d103      	bne.n	8018ca2 <_raise_r+0x42>
 8018c9a:	2316      	movs	r3, #22
 8018c9c:	6003      	str	r3, [r0, #0]
 8018c9e:	2001      	movs	r0, #1
 8018ca0:	e7e7      	b.n	8018c72 <_raise_r+0x12>
 8018ca2:	2400      	movs	r4, #0
 8018ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018ca8:	4628      	mov	r0, r5
 8018caa:	4798      	blx	r3
 8018cac:	2000      	movs	r0, #0
 8018cae:	e7e0      	b.n	8018c72 <_raise_r+0x12>

08018cb0 <raise>:
 8018cb0:	4b02      	ldr	r3, [pc, #8]	; (8018cbc <raise+0xc>)
 8018cb2:	4601      	mov	r1, r0
 8018cb4:	6818      	ldr	r0, [r3, #0]
 8018cb6:	f7ff bfd3 	b.w	8018c60 <_raise_r>
 8018cba:	bf00      	nop
 8018cbc:	20000020 	.word	0x20000020

08018cc0 <_kill_r>:
 8018cc0:	b538      	push	{r3, r4, r5, lr}
 8018cc2:	4d07      	ldr	r5, [pc, #28]	; (8018ce0 <_kill_r+0x20>)
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	4604      	mov	r4, r0
 8018cc8:	4608      	mov	r0, r1
 8018cca:	4611      	mov	r1, r2
 8018ccc:	602b      	str	r3, [r5, #0]
 8018cce:	f7e8 fb43 	bl	8001358 <_kill>
 8018cd2:	1c43      	adds	r3, r0, #1
 8018cd4:	d102      	bne.n	8018cdc <_kill_r+0x1c>
 8018cd6:	682b      	ldr	r3, [r5, #0]
 8018cd8:	b103      	cbz	r3, 8018cdc <_kill_r+0x1c>
 8018cda:	6023      	str	r3, [r4, #0]
 8018cdc:	bd38      	pop	{r3, r4, r5, pc}
 8018cde:	bf00      	nop
 8018ce0:	2000ce48 	.word	0x2000ce48

08018ce4 <_getpid_r>:
 8018ce4:	f7e8 bb30 	b.w	8001348 <_getpid>

08018ce8 <_fstat_r>:
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	4d07      	ldr	r5, [pc, #28]	; (8018d08 <_fstat_r+0x20>)
 8018cec:	2300      	movs	r3, #0
 8018cee:	4604      	mov	r4, r0
 8018cf0:	4608      	mov	r0, r1
 8018cf2:	4611      	mov	r1, r2
 8018cf4:	602b      	str	r3, [r5, #0]
 8018cf6:	f7e8 fb90 	bl	800141a <_fstat>
 8018cfa:	1c43      	adds	r3, r0, #1
 8018cfc:	d102      	bne.n	8018d04 <_fstat_r+0x1c>
 8018cfe:	682b      	ldr	r3, [r5, #0]
 8018d00:	b103      	cbz	r3, 8018d04 <_fstat_r+0x1c>
 8018d02:	6023      	str	r3, [r4, #0]
 8018d04:	bd38      	pop	{r3, r4, r5, pc}
 8018d06:	bf00      	nop
 8018d08:	2000ce48 	.word	0x2000ce48

08018d0c <_isatty_r>:
 8018d0c:	b538      	push	{r3, r4, r5, lr}
 8018d0e:	4d06      	ldr	r5, [pc, #24]	; (8018d28 <_isatty_r+0x1c>)
 8018d10:	2300      	movs	r3, #0
 8018d12:	4604      	mov	r4, r0
 8018d14:	4608      	mov	r0, r1
 8018d16:	602b      	str	r3, [r5, #0]
 8018d18:	f7e8 fb8f 	bl	800143a <_isatty>
 8018d1c:	1c43      	adds	r3, r0, #1
 8018d1e:	d102      	bne.n	8018d26 <_isatty_r+0x1a>
 8018d20:	682b      	ldr	r3, [r5, #0]
 8018d22:	b103      	cbz	r3, 8018d26 <_isatty_r+0x1a>
 8018d24:	6023      	str	r3, [r4, #0]
 8018d26:	bd38      	pop	{r3, r4, r5, pc}
 8018d28:	2000ce48 	.word	0x2000ce48

08018d2c <_init>:
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	bf00      	nop
 8018d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d32:	bc08      	pop	{r3}
 8018d34:	469e      	mov	lr, r3
 8018d36:	4770      	bx	lr

08018d38 <_fini>:
 8018d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d3a:	bf00      	nop
 8018d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d3e:	bc08      	pop	{r3}
 8018d40:	469e      	mov	lr, r3
 8018d42:	4770      	bx	lr
