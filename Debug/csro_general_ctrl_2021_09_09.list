
csro_general_ctrl_2021_09_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e8  0801a548  0801a548  0002a548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d830  0801d830  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d830  0801d830  0002d830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d838  0801d838  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d838  0801d838  0002d838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d83c  0801d83c  0002d83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0801d840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300d0  2**0
                  CONTENTS
 10 .bss          0000d004  200000d0  200000d0  000300d0  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  2000d0d4  2000d0d4  000300d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054c44  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009d89  00000000  00000000  00084d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a20  00000000  00000000  0008ead0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002818  00000000  00000000  000914f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035f57  00000000  00000000  00093d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043c62  00000000  00000000  000c9c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103641  00000000  00000000  0010d8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00210f02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b874  00000000  00000000  00210f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a530 	.word	0x0801a530

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	0801a530 	.word	0x0801a530

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b75      	ldr	r3, [pc, #468]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000ef4:	4a75      	ldr	r2, [pc, #468]	; (80010cc <MX_ADC1_Init+0x1ec>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef8:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b71      	ldr	r3, [pc, #452]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b6e      	ldr	r3, [pc, #440]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b6b      	ldr	r3, [pc, #428]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b69      	ldr	r3, [pc, #420]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f22:	4a6b      	ldr	r2, [pc, #428]	; (80010d0 <MX_ADC1_Init+0x1f0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b68      	ldr	r3, [pc, #416]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000f2c:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f2e:	220d      	movs	r2, #13
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f32:	4b65      	ldr	r3, [pc, #404]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	4861      	ldr	r0, [pc, #388]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f42:	f001 ffc7 	bl	8002ed4 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 fd9e 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f50:	230d      	movs	r3, #13
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000f58:	2306      	movs	r3, #6
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4859      	ldr	r0, [pc, #356]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f62:	f002 fa73 	bl	800344c <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 fd8e 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f70:	230c      	movs	r3, #12
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f74:	2302      	movs	r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4852      	ldr	r0, [pc, #328]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f7e:	f002 fa65 	bl	800344c <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f88:	f000 fd80 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f90:	2303      	movs	r3, #3
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	4619      	mov	r1, r3
 8000f98:	484b      	ldr	r0, [pc, #300]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000f9a:	f002 fa57 	bl	800344c <HAL_ADC_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fa4:	f000 fd72 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fa8:	2309      	movs	r3, #9
 8000faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fac:	2304      	movs	r3, #4
 8000fae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4844      	ldr	r0, [pc, #272]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fb6:	f002 fa49 	bl	800344c <HAL_ADC_ConfigChannel>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fc0:	f000 fd64 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483d      	ldr	r0, [pc, #244]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fd2:	f002 fa3b 	bl	800344c <HAL_ADC_ConfigChannel>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000fdc:	f000 fd56 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	4836      	ldr	r0, [pc, #216]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8000fee:	f002 fa2d 	bl	800344c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ff8:	f000 fd48 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001000:	2307      	movs	r3, #7
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	482f      	ldr	r0, [pc, #188]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800100a:	f002 fa1f 	bl	800344c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001014:	f000 fd3a 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001018:	2305      	movs	r3, #5
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4828      	ldr	r0, [pc, #160]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001026:	f002 fa11 	bl	800344c <HAL_ADC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001030:	f000 fd2c 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001034:	2306      	movs	r3, #6
 8001036:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8001038:	2309      	movs	r3, #9
 800103a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4821      	ldr	r0, [pc, #132]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001042:	f002 fa03 	bl	800344c <HAL_ADC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800104c:	f000 fd1e 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001050:	2308      	movs	r3, #8
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001054:	230a      	movs	r3, #10
 8001056:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800105e:	f002 f9f5 	bl	800344c <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001068:	f000 fd10 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800106c:	2310      	movs	r3, #16
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001070:	230b      	movs	r3, #11
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4813      	ldr	r0, [pc, #76]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 800107a:	f002 f9e7 	bl	800344c <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001084:	f000 fd02 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001088:	2311      	movs	r3, #17
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800108c:	230c      	movs	r3, #12
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 8001096:	f002 f9d9 	bl	800344c <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80010a0:	f000 fcf4 	bl	8001a8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80010a4:	2312      	movs	r3, #18
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80010a8:	230d      	movs	r3, #13
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0x1e8>)
 80010b2:	f002 f9cb 	bl	800344c <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80010bc:	f000 fce6 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20004c6c 	.word	0x20004c6c
 80010cc:	40012000 	.word	0x40012000
 80010d0:	0f000001 	.word	0x0f000001

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_ADC_MspInit+0x154>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f040 8094 	bne.w	8001220 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_ADC_MspInit+0x158>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001106:	6453      	str	r3, [r2, #68]	; 0x44
 8001108:	4b48      	ldr	r3, [pc, #288]	; (800122c <HAL_ADC_MspInit+0x158>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <HAL_ADC_MspInit+0x158>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a43      	ldr	r2, [pc, #268]	; (800122c <HAL_ADC_MspInit+0x158>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a3c      	ldr	r2, [pc, #240]	; (800122c <HAL_ADC_MspInit+0x158>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a35      	ldr	r2, [pc, #212]	; (800122c <HAL_ADC_MspInit+0x158>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_ADC_MspInit+0x158>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = DP_VF3_Pin|DP_VF2_Pin|DP_VF1_Pin;
 8001168:	230d      	movs	r3, #13
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	482d      	ldr	r0, [pc, #180]	; (8001230 <HAL_ADC_MspInit+0x15c>)
 800117c:	f004 fa9a 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF1_Pin|NTC_VF2_Pin|NTC_VF3_Pin|NTC_VF4_Pin
 8001180:	2379      	movs	r3, #121	; 0x79
 8001182:	61fb      	str	r3, [r7, #28]
                          |NTC_VF5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4828      	ldr	r0, [pc, #160]	; (8001234 <HAL_ADC_MspInit+0x160>)
 8001194:	f004 fa8e 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF6_Pin|VALVE_FEEDBACK_Pin;
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	4823      	ldr	r0, [pc, #140]	; (8001238 <HAL_ADC_MspInit+0x164>)
 80011ac:	f004 fa82 	bl	80056b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_ADC_MspInit+0x16c>)
 80011b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <HAL_ADC_MspInit+0x168>)
 80011f6:	f002 fcb5 	bl	8003b64 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001200:	f000 fc44 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_ADC_MspInit+0x168>)
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
 800120a:	4a0c      	ldr	r2, [pc, #48]	; (800123c <HAL_ADC_MspInit+0x168>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2105      	movs	r1, #5
 8001214:	2012      	movs	r0, #18
 8001216:	f002 fc7b 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800121a:	2012      	movs	r0, #18
 800121c:	f002 fc94 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001220:	bf00      	nop
 8001222:	3730      	adds	r7, #48	; 0x30
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40012000 	.word	0x40012000
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	20004cb4 	.word	0x20004cb4
 8001240:	40026410 	.word	0x40026410

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <MX_DMA_Init+0xd8>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <MX_DMA_Init+0xd8>)
 8001254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <MX_DMA_Init+0xd8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b2c      	ldr	r3, [pc, #176]	; (800131c <MX_DMA_Init+0xd8>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a2b      	ldr	r2, [pc, #172]	; (800131c <MX_DMA_Init+0xd8>)
 8001270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b29      	ldr	r3, [pc, #164]	; (800131c <MX_DMA_Init+0xd8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	200c      	movs	r0, #12
 8001288:	f002 fc42 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800128c:	200c      	movs	r0, #12
 800128e:	f002 fc5b 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	200e      	movs	r0, #14
 8001298:	f002 fc3a 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800129c:	200e      	movs	r0, #14
 800129e:	f002 fc53 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2010      	movs	r0, #16
 80012a8:	f002 fc32 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ac:	2010      	movs	r0, #16
 80012ae:	f002 fc4b 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2011      	movs	r0, #17
 80012b8:	f002 fc2a 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012bc:	2011      	movs	r0, #17
 80012be:	f002 fc43 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2038      	movs	r0, #56	; 0x38
 80012c8:	f002 fc22 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012cc:	2038      	movs	r0, #56	; 0x38
 80012ce:	f002 fc3b 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	2039      	movs	r0, #57	; 0x39
 80012d8:	f002 fc1a 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012dc:	2039      	movs	r0, #57	; 0x39
 80012de:	f002 fc33 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2105      	movs	r1, #5
 80012e6:	203a      	movs	r0, #58	; 0x3a
 80012e8:	f002 fc12 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012ec:	203a      	movs	r0, #58	; 0x3a
 80012ee:	f002 fc2b 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	2045      	movs	r0, #69	; 0x45
 80012f8:	f002 fc0a 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012fc:	2045      	movs	r0, #69	; 0x45
 80012fe:	f002 fc23 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2046      	movs	r0, #70	; 0x46
 8001308:	f002 fc02 	bl	8003b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800130c:	2046      	movs	r0, #70	; 0x46
 800130e:	f002 fc1b 	bl	8003b48 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue01_attributes);
 8001324:	4a28      	ldr	r2, [pc, #160]	; (80013c8 <MX_FREERTOS_Init+0xa8>)
 8001326:	2102      	movs	r1, #2
 8001328:	2010      	movs	r0, #16
 800132a:	f008 f95f 	bl	80095ec <osMessageQueueNew>
 800132e:	4603      	mov	r3, r0
 8001330:	4a26      	ldr	r2, [pc, #152]	; (80013cc <MX_FREERTOS_Init+0xac>)
 8001332:	6013      	str	r3, [r2, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew (16, sizeof(uint16_t), &Queue02_attributes);
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <MX_FREERTOS_Init+0xb0>)
 8001336:	2102      	movs	r1, #2
 8001338:	2010      	movs	r0, #16
 800133a:	f008 f957 	bl	80095ec <osMessageQueueNew>
 800133e:	4603      	mov	r3, r0
 8001340:	4a24      	ldr	r2, [pc, #144]	; (80013d4 <MX_FREERTOS_Init+0xb4>)
 8001342:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <MX_FREERTOS_Init+0xb8>)
 8001346:	2100      	movs	r1, #0
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <MX_FREERTOS_Init+0xbc>)
 800134a:	f007 fe74 	bl	8009036 <osThreadNew>
 800134e:	4603      	mov	r3, r0
 8001350:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MX_FREERTOS_Init+0xc0>)
 8001352:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8001354:	4a23      	ldr	r2, [pc, #140]	; (80013e4 <MX_FREERTOS_Init+0xc4>)
 8001356:	2100      	movs	r1, #0
 8001358:	4823      	ldr	r0, [pc, #140]	; (80013e8 <MX_FREERTOS_Init+0xc8>)
 800135a:	f007 fe6c 	bl	8009036 <osThreadNew>
 800135e:	4603      	mov	r3, r0
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <MX_FREERTOS_Init+0xcc>)
 8001362:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8001364:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <MX_FREERTOS_Init+0xd0>)
 8001366:	2100      	movs	r1, #0
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_FREERTOS_Init+0xd4>)
 800136a:	f007 fe64 	bl	8009036 <osThreadNew>
 800136e:	4603      	mov	r3, r0
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <MX_FREERTOS_Init+0xd8>)
 8001372:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8001374:	4a21      	ldr	r2, [pc, #132]	; (80013fc <MX_FREERTOS_Init+0xdc>)
 8001376:	2100      	movs	r1, #0
 8001378:	4821      	ldr	r0, [pc, #132]	; (8001400 <MX_FREERTOS_Init+0xe0>)
 800137a:	f007 fe5c 	bl	8009036 <osThreadNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <MX_FREERTOS_Init+0xe4>)
 8001382:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <MX_FREERTOS_Init+0xe8>)
 8001386:	2100      	movs	r1, #0
 8001388:	4820      	ldr	r0, [pc, #128]	; (800140c <MX_FREERTOS_Init+0xec>)
 800138a:	f007 fe54 	bl	8009036 <osThreadNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <MX_FREERTOS_Init+0xf0>)
 8001392:	6013      	str	r3, [r2, #0]

  /* creation of Task06 */
  Task06Handle = osThreadNew(StartTask06, NULL, &Task06_attributes);
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <MX_FREERTOS_Init+0xf4>)
 8001396:	2100      	movs	r1, #0
 8001398:	481f      	ldr	r0, [pc, #124]	; (8001418 <MX_FREERTOS_Init+0xf8>)
 800139a:	f007 fe4c 	bl	8009036 <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <MX_FREERTOS_Init+0xfc>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* creation of Task07 */
  Task07Handle = osThreadNew(StartTask07, NULL, &Task07_attributes);
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <MX_FREERTOS_Init+0x100>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <MX_FREERTOS_Init+0x104>)
 80013aa:	f007 fe44 	bl	8009036 <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <MX_FREERTOS_Init+0x108>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of Task08 */
  Task08Handle = osThreadNew(StartTask08, NULL, &Task08_attributes);
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <MX_FREERTOS_Init+0x10c>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <MX_FREERTOS_Init+0x110>)
 80013ba:	f007 fe3c 	bl	8009036 <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <MX_FREERTOS_Init+0x114>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0801d55c 	.word	0x0801d55c
 80013cc:	20004d1c 	.word	0x20004d1c
 80013d0:	0801d574 	.word	0x0801d574
 80013d4:	20004d5c 	.word	0x20004d5c
 80013d8:	0801d43c 	.word	0x0801d43c
 80013dc:	08001439 	.word	0x08001439
 80013e0:	20004d30 	.word	0x20004d30
 80013e4:	0801d460 	.word	0x0801d460
 80013e8:	0800144d 	.word	0x0800144d
 80013ec:	20004d18 	.word	0x20004d18
 80013f0:	0801d484 	.word	0x0801d484
 80013f4:	0800145d 	.word	0x0800145d
 80013f8:	20004d50 	.word	0x20004d50
 80013fc:	0801d4a8 	.word	0x0801d4a8
 8001400:	0800146d 	.word	0x0800146d
 8001404:	20004d20 	.word	0x20004d20
 8001408:	0801d4cc 	.word	0x0801d4cc
 800140c:	0800147d 	.word	0x0800147d
 8001410:	20004d54 	.word	0x20004d54
 8001414:	0801d4f0 	.word	0x0801d4f0
 8001418:	0800148d 	.word	0x0800148d
 800141c:	20004d34 	.word	0x20004d34
 8001420:	0801d514 	.word	0x0801d514
 8001424:	0800149d 	.word	0x0800149d
 8001428:	20004d28 	.word	0x20004d28
 800142c:	0801d538 	.word	0x0801d538
 8001430:	080014ad 	.word	0x080014ad
 8001434:	20004d2c 	.word	0x20004d2c

08001438 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001440:	f007 f8d6 	bl	80085f0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f007 fe88 	bl	800915a <osDelay>
 800144a:	e7fb      	b.n	8001444 <StartTask01+0xc>

0800144c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f007 fe80 	bl	800915a <osDelay>
 800145a:	e7fb      	b.n	8001454 <StartTask02+0x8>

0800145c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f007 fe78 	bl	800915a <osDelay>
 800146a:	e7fb      	b.n	8001464 <StartTask03+0x8>

0800146c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f007 fe70 	bl	800915a <osDelay>
 800147a:	e7fb      	b.n	8001474 <StartTask04+0x8>

0800147c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f007 fe68 	bl	800915a <osDelay>
 800148a:	e7fb      	b.n	8001484 <StartTask05+0x8>

0800148c <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f007 fe60 	bl	800915a <osDelay>
 800149a:	e7fb      	b.n	8001494 <StartTask06+0x8>

0800149c <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f007 fe58 	bl	800915a <osDelay>
 80014aa:	e7fb      	b.n	80014a4 <StartTask07+0x8>

080014ac <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */
  fnd_input_adc_init();
 80014b4:	f001 fbaa 	bl	8002c0c <fnd_input_adc_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 80014b8:	2064      	movs	r0, #100	; 0x64
 80014ba:	f007 fe4e 	bl	800915a <osDelay>
    fnd_input_gpio_read_di(di);
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <StartTask08+0x2c>)
 80014c0:	f001 fbf8 	bl	8002cb4 <fnd_input_gpio_read_di>
    fnd_input_gpio_read_ida(ida);
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <StartTask08+0x30>)
 80014c6:	f001 fc23 	bl	8002d10 <fnd_input_gpio_read_ida>
    fnd_input_gpio_read_idb(idb);
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <StartTask08+0x34>)
 80014cc:	f001 fc4e 	bl	8002d6c <fnd_input_gpio_read_idb>
    fnd_input_adc_read_ntc_temp(ntc_temp);
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <StartTask08+0x38>)
 80014d2:	f001 fba9 	bl	8002c28 <fnd_input_adc_read_ntc_temp>
    osDelay(100);
 80014d6:	e7ef      	b.n	80014b8 <StartTask08+0xc>
 80014d8:	20004d24 	.word	0x20004d24
 80014dc:	20004d14 	.word	0x20004d14
 80014e0:	20004d58 	.word	0x20004d58
 80014e4:	20004d38 	.word	0x20004d38

080014e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	4b8c      	ldr	r3, [pc, #560]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a8b      	ldr	r2, [pc, #556]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001508:	f043 0310 	orr.w	r3, r3, #16
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b89      	ldr	r3, [pc, #548]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	4b85      	ldr	r3, [pc, #532]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a84      	ldr	r2, [pc, #528]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b82      	ldr	r3, [pc, #520]	; (8001734 <MX_GPIO_Init+0x24c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <MX_GPIO_Init+0x24c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a7d      	ldr	r2, [pc, #500]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b77      	ldr	r3, [pc, #476]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a76      	ldr	r2, [pc, #472]	; (8001734 <MX_GPIO_Init+0x24c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b74      	ldr	r3, [pc, #464]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b70      	ldr	r3, [pc, #448]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a6f      	ldr	r2, [pc, #444]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b6d      	ldr	r3, [pc, #436]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b69      	ldr	r3, [pc, #420]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a68      	ldr	r2, [pc, #416]	; (8001734 <MX_GPIO_Init+0x24c>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <MX_GPIO_Init+0x24c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 80015a6:	2200      	movs	r2, #0
 80015a8:	f24f 51ff 	movw	r1, #62975	; 0xf5ff
 80015ac:	4862      	ldr	r0, [pc, #392]	; (8001738 <MX_GPIO_Init+0x250>)
 80015ae:	f004 fa35 	bl	8005a1c <HAL_GPIO_WritePin>
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80015b8:	4860      	ldr	r0, [pc, #384]	; (800173c <MX_GPIO_Init+0x254>)
 80015ba:	f004 fa2f 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 80015be:	2200      	movs	r2, #0
 80015c0:	f24c 7104 	movw	r1, #50948	; 0xc704
 80015c4:	485e      	ldr	r0, [pc, #376]	; (8001740 <MX_GPIO_Init+0x258>)
 80015c6:	f004 fa29 	bl	8005a1c <HAL_GPIO_WritePin>
                          |RLY6_Pin|RLY5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_B1_Pin|EN4_Pin|EN2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f248 4110 	movw	r1, #33808	; 0x8410
 80015d0:	485c      	ldr	r0, [pc, #368]	; (8001744 <MX_GPIO_Init+0x25c>)
 80015d2:	f004 fa23 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	485a      	ldr	r0, [pc, #360]	; (8001748 <MX_GPIO_Init+0x260>)
 80015de:	f004 fa1d 	bl	8005a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 80015e2:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 80015e6:	61fb      	str	r3, [r7, #28]
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	484f      	ldr	r0, [pc, #316]	; (8001738 <MX_GPIO_Init+0x250>)
 80015fc:	f004 f85a 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin;
 8001600:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4848      	ldr	r0, [pc, #288]	; (800173c <MX_GPIO_Init+0x254>)
 800161a:	f004 f84b 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800161e:	2303      	movs	r3, #3
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001622:	2303      	movs	r3, #3
 8001624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4846      	ldr	r0, [pc, #280]	; (800174c <MX_GPIO_Init+0x264>)
 8001632:	f004 f83f 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8001636:	f24c 7304 	movw	r3, #50948	; 0xc704
 800163a:	61fb      	str	r3, [r7, #28]
                          |RLY6_Pin|RLY5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	483c      	ldr	r0, [pc, #240]	; (8001740 <MX_GPIO_Init+0x258>)
 8001650:	f004 f830 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_B1_Pin|EN4_Pin|EN2_Pin;
 8001654:	f248 4310 	movw	r3, #33808	; 0x8410
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 031c 	add.w	r3, r7, #28
 800166a:	4619      	mov	r1, r3
 800166c:	4835      	ldr	r0, [pc, #212]	; (8001744 <MX_GPIO_Init+0x25c>)
 800166e:	f004 f821 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001672:	f647 030f 	movw	r3, #30735	; 0x780f
 8001676:	61fb      	str	r3, [r7, #28]
                          |IDB4_Pin|IDB3_Pin|IDB2_Pin|IDB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	482f      	ldr	r0, [pc, #188]	; (8001744 <MX_GPIO_Init+0x25c>)
 8001688:	f004 f814 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	4826      	ldr	r0, [pc, #152]	; (800173c <MX_GPIO_Init+0x254>)
 80016a2:	f004 f807 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN1_Pin;
 80016a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4822      	ldr	r0, [pc, #136]	; (8001748 <MX_GPIO_Init+0x260>)
 80016c0:	f003 fff8 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	481b      	ldr	r0, [pc, #108]	; (8001748 <MX_GPIO_Init+0x260>)
 80016da:	f003 ffeb 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDA4_Pin;
 80016de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IDA4_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <MX_GPIO_Init+0x260>)
 80016f4:	f003 ffde 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IDA3_Pin|IDA2_Pin|IDA1_Pin;
 80016f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	480b      	ldr	r0, [pc, #44]	; (800173c <MX_GPIO_Init+0x254>)
 800170e:	f003 ffd1 	bl	80056b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_GPIO_Init+0x25c>)
 8001726:	f003 ffc5 	bl	80056b4 <HAL_GPIO_Init>

}
 800172a:	bf00      	nop
 800172c:	3730      	adds	r7, #48	; 0x30
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40021000 	.word	0x40021000
 800173c:	40020800 	.word	0x40020800
 8001740:	40020400 	.word	0x40020400
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40020000 	.word	0x40020000
 800174c:	40021c00 	.word	0x40021c00

08001750 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x54>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_I2C1_Init+0x50>)
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x58>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_I2C1_Init+0x50>)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_I2C1_Init+0x50>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_I2C1_Init+0x50>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C1_Init+0x50>)
 800178e:	f004 f95f 	bl	8005a50 <HAL_I2C_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 f978 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20004db4 	.word	0x20004db4
 80017a4:	40005400 	.word	0x40005400
 80017a8:	000186a0 	.word	0x000186a0

080017ac <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C3_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <MX_I2C3_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C3_Init+0x50>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_I2C3_Init+0x58>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C3_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_I2C3_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_I2C3_Init+0x50>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <MX_I2C3_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_I2C3_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <MX_I2C3_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_I2C3_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_I2C3_Init+0x50>)
 80017ea:	f004 f931 	bl	8005a50 <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017f4:	f000 f94a 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20004d60 	.word	0x20004d60
 8001800:	40005c00 	.word	0x40005c00
 8001804:	000186a0 	.word	0x000186a0

08001808 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a42      	ldr	r2, [pc, #264]	; (8001930 <HAL_I2C_MspInit+0x128>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12c      	bne.n	8001884 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001846:	23c0      	movs	r3, #192	; 0xc0
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001856:	2304      	movs	r3, #4
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4835      	ldr	r0, [pc, #212]	; (8001938 <HAL_I2C_MspInit+0x130>)
 8001862:	f003 ff27 	bl	80056b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	4b32      	ldr	r3, [pc, #200]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001882:	e050      	b.n	8001926 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a2c      	ldr	r2, [pc, #176]	; (800193c <HAL_I2C_MspInit+0x134>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d14b      	bne.n	8001926 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b28      	ldr	r3, [pc, #160]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018cc:	2312      	movs	r3, #18
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018d8:	2304      	movs	r3, #4
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	4619      	mov	r1, r3
 80018e2:	4817      	ldr	r0, [pc, #92]	; (8001940 <HAL_I2C_MspInit+0x138>)
 80018e4:	f003 fee6 	bl	80056b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ee:	2312      	movs	r3, #18
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018fa:	2304      	movs	r3, #4
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	480f      	ldr	r0, [pc, #60]	; (8001944 <HAL_I2C_MspInit+0x13c>)
 8001906:	f003 fed5 	bl	80056b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
}
 8001926:	bf00      	nop
 8001928:	3730      	adds	r7, #48	; 0x30
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40005400 	.word	0x40005400
 8001934:	40023800 	.word	0x40023800
 8001938:	40020400 	.word	0x40020400
 800193c:	40005c00 	.word	0x40005c00
 8001940:	40020800 	.word	0x40020800
 8001944:	40020000 	.word	0x40020000

08001948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194c:	f001 fa5c 	bl	8002e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001950:	f000 f820 	bl	8001994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001954:	f7ff fdc8 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001958:	f7ff fc74 	bl	8001244 <MX_DMA_Init>
  MX_ADC1_Init();
 800195c:	f7ff fac0 	bl	8000ee0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001960:	f7ff fef6 	bl	8001750 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001964:	f7ff ff22 	bl	80017ac <MX_I2C3_Init>
  MX_TIM1_Init();
 8001968:	f000 faae 	bl	8001ec8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800196c:	f000 fb58 	bl	8002020 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001970:	f000 fbcc 	bl	800210c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001974:	f000 fd18 	bl	80023a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001978:	f000 fd40 	bl	80023fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800197c:	f000 fd68 	bl	8002450 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001980:	f000 fd90 	bl	80024a4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001984:	f007 faf8 	bl	8008f78 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001988:	f7ff fcca 	bl	8001320 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800198c:	f007 fb18 	bl	8008fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001990:	e7fe      	b.n	8001990 <main+0x48>
	...

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2230      	movs	r2, #48	; 0x30
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f017 fc1d 	bl	80191e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <SystemClock_Config+0xcc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <SystemClock_Config+0xcc>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <SystemClock_Config+0xcc>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <SystemClock_Config+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <SystemClock_Config+0xd0>)
 80019de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <SystemClock_Config+0xd0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f8:	2310      	movs	r3, #16
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a04:	2308      	movs	r3, #8
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a08:	23a8      	movs	r3, #168	; 0xa8
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a10:	2304      	movs	r3, #4
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 f95d 	bl	8005cd8 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a24:	f000 f832 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2105      	movs	r1, #5
 8001a46:	4618      	mov	r0, r3
 8001a48:	f004 fbbe 	bl	80061c8 <HAL_RCC_ClockConfig>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a52:	f000 f81b 	bl	8001a8c <Error_Handler>
  }
}
 8001a56:	bf00      	nop
 8001a58:	3750      	adds	r7, #80	; 0x50
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a7a:	f001 f9e7 	bl	8002e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40002000 	.word	0x40002000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_MspInit+0x54>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_MspInit+0x54>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <HAL_MspInit+0x54>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_MspInit+0x54>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_MspInit+0x54>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_MspInit+0x54>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	210f      	movs	r1, #15
 8001ada:	f06f 0001 	mvn.w	r0, #1
 8001ade:	f002 f817 	bl	8003b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	202d      	movs	r0, #45	; 0x2d
 8001b06:	f002 f803 	bl	8003b10 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001b0a:	202d      	movs	r0, #45	; 0x2d
 8001b0c:	f002 f81c 	bl	8003b48 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_InitTick+0xa4>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2c:	f107 0210 	add.w	r2, r7, #16
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fd16 	bl	8006568 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b3c:	f004 fcec 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b48:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_InitTick+0xa8>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0c9b      	lsrs	r3, r3, #18
 8001b50:	3b01      	subs	r3, #1
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_InitTick+0xac>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_InitTick+0xb0>)
 8001b58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <HAL_InitTick+0xac>)
 8001b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b60:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b62:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_InitTick+0xac>)
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_InitTick+0xac>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_InitTick+0xac>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b74:	4809      	ldr	r0, [pc, #36]	; (8001b9c <HAL_InitTick+0xac>)
 8001b76:	f004 fd29 	bl	80065cc <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d104      	bne.n	8001b8a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b80:	4806      	ldr	r0, [pc, #24]	; (8001b9c <HAL_InitTick+0xac>)
 8001b82:	f004 fd73 	bl	800666c <HAL_TIM_Base_Start_IT>
 8001b86:	4603      	mov	r3, r0
 8001b88:	e000      	b.n	8001b8c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3730      	adds	r7, #48	; 0x30
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	431bde83 	.word	0x431bde83
 8001b9c:	20004e08 	.word	0x20004e08
 8001ba0:	40002000 	.word	0x40002000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA1_Stream1_IRQHandler+0x10>)
 8001bd6:	f002 f95d 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20004fe8 	.word	0x20004fe8

08001be4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <DMA1_Stream3_IRQHandler+0x10>)
 8001bea:	f002 f953 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000508c 	.word	0x2000508c

08001bf8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <DMA1_Stream5_IRQHandler+0x10>)
 8001bfe:	f002 f949 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20004f28 	.word	0x20004f28

08001c0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <DMA1_Stream6_IRQHandler+0x10>)
 8001c12:	f002 f93f 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000520c 	.word	0x2000520c

08001c20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <ADC_IRQHandler+0x10>)
 8001c26:	f001 f998 	bl	8002f5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20004c6c 	.word	0x20004c6c

08001c34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <USART1_IRQHandler+0x10>)
 8001c3a:	f005 fec9 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000526c 	.word	0x2000526c

08001c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART2_IRQHandler+0x10>)
 8001c4e:	f005 febf 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	200052f4 	.word	0x200052f4

08001c5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <USART3_IRQHandler+0x10>)
 8001c62:	f005 feb5 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20005048 	.word	0x20005048

08001c70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c76:	f004 fe1b 	bl	80068b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20004e08 	.word	0x20004e08

08001c84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8a:	f002 f903 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20004cb4 	.word	0x20004cb4

08001c98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA2_Stream1_IRQHandler+0x10>)
 8001c9e:	f002 f8f9 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20004f88 	.word	0x20004f88

08001cac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream2_IRQHandler+0x10>)
 8001cb2:	f002 f8ef 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200051ac 	.word	0x200051ac

08001cc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <ETH_IRQHandler+0x10>)
 8001cc6:	f002 ff33 	bl	8004b30 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200080ec 	.word	0x200080ec

08001cd4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA2_Stream6_IRQHandler+0x10>)
 8001cda:	f002 f8db 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000514c 	.word	0x2000514c

08001ce8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <DMA2_Stream7_IRQHandler+0x10>)
 8001cee:	f002 f8d1 	bl	8003e94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200050ec 	.word	0x200050ec

08001cfc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <USART6_IRQHandler+0x10>)
 8001d02:	f005 fe65 	bl	80079d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200052b0 	.word	0x200052b0

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d2a:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <_kill+0x20>)
 8001d2c:	2216      	movs	r2, #22
 8001d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	2000d0c0 	.word	0x2000d0c0

08001d44 <_exit>:

void _exit (int status)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ffe5 	bl	8001d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d56:	e7fe      	b.n	8001d56 <_exit+0x12>

08001d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e00a      	b.n	8001d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d6a:	f3af 8000 	nop.w
 8001d6e:	4601      	mov	r1, r0
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	60ba      	str	r2, [r7, #8]
 8001d76:	b2ca      	uxtb	r2, r1
 8001d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf0      	blt.n	8001d6a <_read+0x12>
	}

return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e009      	b.n	8001db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	60ba      	str	r2, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf1      	blt.n	8001da4 <_write+0x12>
	}
	return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_close>:

int _close(int file)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df2:	605a      	str	r2, [r3, #4]
	return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <_isatty>:

int _isatty(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
	return 1;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
	return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e3c:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_sbrk+0x5c>)
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <_sbrk+0x60>)
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x64>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <_sbrk+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d205      	bcs.n	8001e70 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <_sbrk+0x6c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	20020000 	.word	0x20020000
 8001e94:	00000800 	.word	0x00000800
 8001e98:	200000ec 	.word	0x200000ec
 8001e9c:	2000d0d8 	.word	0x2000d0d8
 8001ea0:	2000d0c0 	.word	0x2000d0c0

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b096      	sub	sp, #88	; 0x58
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2220      	movs	r2, #32
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f017 f96e 	bl	80191e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f08:	4a44      	ldr	r2, [pc, #272]	; (800201c <MX_TIM1_Init+0x154>)
 8001f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f0c:	4b42      	ldr	r3, [pc, #264]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f18:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f32:	4839      	ldr	r0, [pc, #228]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f34:	f004 fb4a 	bl	80065cc <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f3e:	f7ff fda5 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4832      	ldr	r0, [pc, #200]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f50:	f004 ff14 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f5a:	f7ff fd97 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f5e:	482e      	ldr	r0, [pc, #184]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f60:	f004 fbf4 	bl	800674c <HAL_TIM_PWM_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f6a:	f7ff fd8f 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4826      	ldr	r0, [pc, #152]	; (8002018 <MX_TIM1_Init+0x150>)
 8001f7e:	f005 fbf7 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f88:	f7ff fd80 	bl	8001a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2360      	movs	r3, #96	; 0x60
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4819      	ldr	r0, [pc, #100]	; (8002018 <MX_TIM1_Init+0x150>)
 8001fb2:	f004 fe21 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fbc:	f7ff fd66 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM1_Init+0x150>)
 8001fca:	f004 fe15 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001fd4:	f7ff fd5a 	bl	8001a8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff6:	1d3b      	adds	r3, r7, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM1_Init+0x150>)
 8001ffc:	f005 fc34 	bl	8007868 <HAL_TIMEx_ConfigBreakDeadTime>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002006:	f7ff fd41 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM1_Init+0x150>)
 800200c:	f000 f96c 	bl	80022e8 <HAL_TIM_MspPostInit>

}
 8002010:	bf00      	nop
 8002012:	3758      	adds	r7, #88	; 0x58
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20004e98 	.word	0x20004e98
 800201c:	40010000 	.word	0x40010000

08002020 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	; 0x38
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002034:	f107 0320 	add.w	r3, r7, #32
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <MX_TIM2_Init+0xe8>)
 8002052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <MX_TIM2_Init+0xe8>)
 800205a:	2200      	movs	r2, #0
 800205c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <MX_TIM2_Init+0xe8>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002064:	4b28      	ldr	r3, [pc, #160]	; (8002108 <MX_TIM2_Init+0xe8>)
 8002066:	f04f 32ff 	mov.w	r2, #4294967295
 800206a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	4b26      	ldr	r3, [pc, #152]	; (8002108 <MX_TIM2_Init+0xe8>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <MX_TIM2_Init+0xe8>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002078:	4823      	ldr	r0, [pc, #140]	; (8002108 <MX_TIM2_Init+0xe8>)
 800207a:	f004 faa7 	bl	80065cc <HAL_TIM_Base_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002084:	f7ff fd02 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002092:	4619      	mov	r1, r3
 8002094:	481c      	ldr	r0, [pc, #112]	; (8002108 <MX_TIM2_Init+0xe8>)
 8002096:	f004 fe71 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020a0:	f7ff fcf4 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a4:	4818      	ldr	r0, [pc, #96]	; (8002108 <MX_TIM2_Init+0xe8>)
 80020a6:	f004 fb51 	bl	800674c <HAL_TIM_PWM_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020b0:	f7ff fcec 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020bc:	f107 0320 	add.w	r3, r7, #32
 80020c0:	4619      	mov	r1, r3
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_TIM2_Init+0xe8>)
 80020c4:	f005 fb54 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020ce:	f7ff fcdd 	bl	8001a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d2:	2360      	movs	r3, #96	; 0x60
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2204      	movs	r2, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM2_Init+0xe8>)
 80020ea:	f004 fd85 	bl	8006bf8 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020f4:	f7ff fcca 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM2_Init+0xe8>)
 80020fa:	f000 f8f5 	bl	80022e8 <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3738      	adds	r7, #56	; 0x38
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20004ee0 	.word	0x20004ee0

0800210c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002112:	f107 0318 	add.w	r3, r7, #24
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002136:	4b31      	ldr	r3, [pc, #196]	; (80021fc <MX_TIM3_Init+0xf0>)
 8002138:	4a31      	ldr	r2, [pc, #196]	; (8002200 <MX_TIM3_Init+0xf4>)
 800213a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800213c:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <MX_TIM3_Init+0xf0>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <MX_TIM3_Init+0xf0>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <MX_TIM3_Init+0xf0>)
 800214a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <MX_TIM3_Init+0xf0>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <MX_TIM3_Init+0xf0>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800215c:	4827      	ldr	r0, [pc, #156]	; (80021fc <MX_TIM3_Init+0xf0>)
 800215e:	f004 fa35 	bl	80065cc <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8002168:	f7ff fc90 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002170:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4619      	mov	r1, r3
 8002178:	4820      	ldr	r0, [pc, #128]	; (80021fc <MX_TIM3_Init+0xf0>)
 800217a:	f004 fdff 	bl	8006d7c <HAL_TIM_ConfigClockSource>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002184:	f7ff fc82 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002188:	481c      	ldr	r0, [pc, #112]	; (80021fc <MX_TIM3_Init+0xf0>)
 800218a:	f004 fb38 	bl	80067fe <HAL_TIM_IC_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002194:	f7ff fc7a 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	4619      	mov	r1, r3
 80021a6:	4815      	ldr	r0, [pc, #84]	; (80021fc <MX_TIM3_Init+0xf0>)
 80021a8:	f005 fae2 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80021b2:	f7ff fc6b 	bl	8001a8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021ba:	2301      	movs	r3, #1
 80021bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	463b      	mov	r3, r7
 80021c8:	2200      	movs	r2, #0
 80021ca:	4619      	mov	r1, r3
 80021cc:	480b      	ldr	r0, [pc, #44]	; (80021fc <MX_TIM3_Init+0xf0>)
 80021ce:	f004 fc77 	bl	8006ac0 <HAL_TIM_IC_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80021d8:	f7ff fc58 	bl	8001a8c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80021dc:	463b      	mov	r3, r7
 80021de:	2204      	movs	r2, #4
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <MX_TIM3_Init+0xf0>)
 80021e4:	f004 fc6c 	bl	8006ac0 <HAL_TIM_IC_ConfigChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80021ee:	f7ff fc4d 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004e50 	.word	0x20004e50
 8002200:	40000400 	.word	0x40000400

08002204 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_TIM_Base_MspInit+0xd4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a2b      	ldr	r2, [pc, #172]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b29      	ldr	r3, [pc, #164]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002242:	e044      	b.n	80022ce <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d10e      	bne.n	800226c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b22      	ldr	r3, [pc, #136]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
}
 800226a:	e030      	b.n	80022ce <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_TIM_Base_MspInit+0xdc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d12b      	bne.n	80022ce <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <HAL_TIM_Base_MspInit+0xd8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 80022ae:	2330      	movs	r3, #48	; 0x30
 80022b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4806      	ldr	r0, [pc, #24]	; (80022e4 <HAL_TIM_Base_MspInit+0xe0>)
 80022ca:	f003 f9f3 	bl	80056b4 <HAL_GPIO_Init>
}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010000 	.word	0x40010000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40020400 	.word	0x40020400

080022e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <HAL_TIM_MspPostInit+0xb0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11f      	bne.n	800234a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a22      	ldr	r2, [pc, #136]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 8002326:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4817      	ldr	r0, [pc, #92]	; (80023a0 <HAL_TIM_MspPostInit+0xb8>)
 8002344:	f003 f9b6 	bl	80056b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002348:	e022      	b.n	8002390 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002352:	d11d      	bne.n	8002390 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b0d      	ldr	r3, [pc, #52]	; (800239c <HAL_TIM_MspPostInit+0xb4>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VALVE_PWM_Pin;
 8002370:	2308      	movs	r3, #8
 8002372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002380:	2301      	movs	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VALVE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <HAL_TIM_MspPostInit+0xbc>)
 800238c:	f003 f992 	bl	80056b4 <HAL_GPIO_Init>
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40010000 	.word	0x40010000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40020400 	.word	0x40020400

080023a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <MX_USART1_UART_Init+0x50>)
 80023b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023ce:	220c      	movs	r2, #12
 80023d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023de:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_USART1_UART_Init+0x4c>)
 80023e0:	f005 faa8 	bl	8007934 <HAL_UART_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ea:	f7ff fb4f 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000526c 	.word	0x2000526c
 80023f8:	40011000 	.word	0x40011000

080023fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002402:	4a12      	ldr	r2, [pc, #72]	; (800244c <MX_USART2_UART_Init+0x50>)
 8002404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800240c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002422:	220c      	movs	r2, #12
 8002424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_USART2_UART_Init+0x4c>)
 8002434:	f005 fa7e 	bl	8007934 <HAL_UART_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800243e:	f7ff fb25 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200052f4 	.word	0x200052f4
 800244c:	40004400 	.word	0x40004400

08002450 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <MX_USART3_UART_Init+0x50>)
 8002458:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <MX_USART3_UART_Init+0x4c>)
 800245c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002460:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <MX_USART3_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <MX_USART3_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_USART3_UART_Init+0x4c>)
 8002488:	f005 fa54 	bl	8007934 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002492:	f7ff fafb 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20005048 	.word	0x20005048
 80024a0:	40004800 	.word	0x40004800

080024a4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <MX_USART6_UART_Init+0x50>)
 80024ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USART6_UART_Init+0x4c>)
 80024dc:	f005 fa2a 	bl	8007934 <HAL_UART_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024e6:	f7ff fad1 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200052b0 	.word	0x200052b0
 80024f4:	40011400 	.word	0x40011400

080024f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b090      	sub	sp, #64	; 0x40
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a97      	ldr	r2, [pc, #604]	; (8002774 <HAL_UART_MspInit+0x27c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	f040 8093 	bne.w	8002642 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002520:	4b95      	ldr	r3, [pc, #596]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	4a94      	ldr	r2, [pc, #592]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002526:	f043 0310 	orr.w	r3, r3, #16
 800252a:	6453      	str	r3, [r2, #68]	; 0x44
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_UART_MspInit+0x280>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_UART_MspInit+0x280>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a8d      	ldr	r2, [pc, #564]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_UART_MspInit+0x280>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002554:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002566:	2307      	movs	r3, #7
 8002568:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256e:	4619      	mov	r1, r3
 8002570:	4882      	ldr	r0, [pc, #520]	; (800277c <HAL_UART_MspInit+0x284>)
 8002572:	f003 f89f 	bl	80056b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002576:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_UART_MspInit+0x288>)
 8002578:	4a82      	ldr	r2, [pc, #520]	; (8002784 <HAL_UART_MspInit+0x28c>)
 800257a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <HAL_UART_MspInit+0x288>)
 800257e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002582:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <HAL_UART_MspInit+0x288>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_UART_MspInit+0x288>)
 800258c:	2200      	movs	r2, #0
 800258e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <HAL_UART_MspInit+0x288>)
 8002592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002596:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002598:	4b79      	ldr	r3, [pc, #484]	; (8002780 <HAL_UART_MspInit+0x288>)
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259e:	4b78      	ldr	r3, [pc, #480]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80025a4:	4b76      	ldr	r3, [pc, #472]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b74      	ldr	r3, [pc, #464]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80025b8:	4871      	ldr	r0, [pc, #452]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025ba:	f001 fad3 	bl	8003b64 <HAL_DMA_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80025c4:	f7ff fa62 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
 80025ce:	4a6c      	ldr	r2, [pc, #432]	; (8002780 <HAL_UART_MspInit+0x288>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025d6:	4a6d      	ldr	r2, [pc, #436]	; (800278c <HAL_UART_MspInit+0x294>)
 80025d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025da:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025e2:	4b69      	ldr	r3, [pc, #420]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e8:	4b67      	ldr	r3, [pc, #412]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025f6:	4b64      	ldr	r3, [pc, #400]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025fc:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_UART_MspInit+0x290>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002602:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_UART_MspInit+0x290>)
 8002604:	2200      	movs	r2, #0
 8002606:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002608:	4b5f      	ldr	r3, [pc, #380]	; (8002788 <HAL_UART_MspInit+0x290>)
 800260a:	2200      	movs	r2, #0
 800260c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_UART_MspInit+0x290>)
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002614:	485c      	ldr	r0, [pc, #368]	; (8002788 <HAL_UART_MspInit+0x290>)
 8002616:	f001 faa5 	bl	8003b64 <HAL_DMA_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002620:	f7ff fa34 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_UART_MspInit+0x290>)
 8002628:	635a      	str	r2, [r3, #52]	; 0x34
 800262a:	4a57      	ldr	r2, [pc, #348]	; (8002788 <HAL_UART_MspInit+0x290>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2105      	movs	r1, #5
 8002634:	2025      	movs	r0, #37	; 0x25
 8002636:	f001 fa6b 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800263a:	2025      	movs	r0, #37	; 0x25
 800263c:	f001 fa84 	bl	8003b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002640:	e1e2      	b.n	8002a08 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_UART_MspInit+0x298>)
 8002648:	4293      	cmp	r3, r2
 800264a:	f040 80ad 	bne.w	80027a8 <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a48      	ldr	r2, [pc, #288]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	623b      	str	r3, [r7, #32]
 8002668:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_UART_MspInit+0x280>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_UART_MspInit+0x280>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002686:	2360      	movs	r3, #96	; 0x60
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002692:	2303      	movs	r3, #3
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002696:	2307      	movs	r3, #7
 8002698:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800269e:	4619      	mov	r1, r3
 80026a0:	483c      	ldr	r0, [pc, #240]	; (8002794 <HAL_UART_MspInit+0x29c>)
 80026a2:	f003 f807 	bl	80056b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026a8:	4a3c      	ldr	r2, [pc, #240]	; (800279c <HAL_UART_MspInit+0x2a4>)
 80026aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026ac:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c0:	4b35      	ldr	r3, [pc, #212]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026c8:	4b33      	ldr	r3, [pc, #204]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026dc:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026e8:	482b      	ldr	r0, [pc, #172]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026ea:	f001 fa3b 	bl	8003b64 <HAL_DMA_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80026f4:	f7ff f9ca 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
 80026fe:	4a26      	ldr	r2, [pc, #152]	; (8002798 <HAL_UART_MspInit+0x2a0>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002706:	4a27      	ldr	r2, [pc, #156]	; (80027a4 <HAL_UART_MspInit+0x2ac>)
 8002708:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800270a:	4b25      	ldr	r3, [pc, #148]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 800270c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002710:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002714:	2240      	movs	r2, #64	; 0x40
 8002716:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002720:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002724:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002734:	2200      	movs	r2, #0
 8002736:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002744:	4816      	ldr	r0, [pc, #88]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002746:	f001 fa0d 	bl	8003b64 <HAL_DMA_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002750:	f7ff f99c 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 8002758:	635a      	str	r2, [r3, #52]	; 0x34
 800275a:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <HAL_UART_MspInit+0x2a8>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2105      	movs	r1, #5
 8002764:	2026      	movs	r0, #38	; 0x26
 8002766:	f001 f9d3 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800276a:	2026      	movs	r0, #38	; 0x26
 800276c:	f001 f9ec 	bl	8003b48 <HAL_NVIC_EnableIRQ>
}
 8002770:	e14a      	b.n	8002a08 <HAL_UART_MspInit+0x510>
 8002772:	bf00      	nop
 8002774:	40011000 	.word	0x40011000
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000
 8002780:	200051ac 	.word	0x200051ac
 8002784:	40026440 	.word	0x40026440
 8002788:	200050ec 	.word	0x200050ec
 800278c:	400264b8 	.word	0x400264b8
 8002790:	40004400 	.word	0x40004400
 8002794:	40020c00 	.word	0x40020c00
 8002798:	20004f28 	.word	0x20004f28
 800279c:	40026088 	.word	0x40026088
 80027a0:	2000520c 	.word	0x2000520c
 80027a4:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a98      	ldr	r2, [pc, #608]	; (8002a10 <HAL_UART_MspInit+0x518>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	f040 8093 	bne.w	80028da <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	4b96      	ldr	r3, [pc, #600]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a95      	ldr	r2, [pc, #596]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c2:	6413      	str	r3, [r2, #64]	; 0x40
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	4b8f      	ldr	r3, [pc, #572]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	4a8e      	ldr	r2, [pc, #568]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027da:	f043 0308 	orr.w	r3, r3, #8
 80027de:	6313      	str	r3, [r2, #48]	; 0x30
 80027e0:	4b8c      	ldr	r3, [pc, #560]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027fe:	2307      	movs	r3, #7
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	4883      	ldr	r0, [pc, #524]	; (8002a18 <HAL_UART_MspInit+0x520>)
 800280a:	f002 ff53 	bl	80056b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800280e:	4b83      	ldr	r3, [pc, #524]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002810:	4a83      	ldr	r2, [pc, #524]	; (8002a20 <HAL_UART_MspInit+0x528>)
 8002812:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800281c:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <HAL_UART_MspInit+0x524>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002822:	4b7e      	ldr	r3, [pc, #504]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <HAL_UART_MspInit+0x524>)
 800282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002830:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002836:	4b79      	ldr	r3, [pc, #484]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800283c:	4b77      	ldr	r3, [pc, #476]	; (8002a1c <HAL_UART_MspInit+0x524>)
 800283e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002842:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284a:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <HAL_UART_MspInit+0x524>)
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002850:	4872      	ldr	r0, [pc, #456]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002852:	f001 f987 	bl	8003b64 <HAL_DMA_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_MspInit+0x368>
      Error_Handler();
 800285c:	f7ff f916 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
 8002866:	4a6d      	ldr	r2, [pc, #436]	; (8002a1c <HAL_UART_MspInit+0x524>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 800286e:	4a6e      	ldr	r2, [pc, #440]	; (8002a28 <HAL_UART_MspInit+0x530>)
 8002870:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002872:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 8002874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002878:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800287a:	4b6a      	ldr	r3, [pc, #424]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 800287c:	2240      	movs	r2, #64	; 0x40
 800287e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002880:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002886:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 8002888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800289a:	4b62      	ldr	r3, [pc, #392]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 800289c:	2200      	movs	r2, #0
 800289e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028a0:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028ac:	485d      	ldr	r0, [pc, #372]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 80028ae:	f001 f959 	bl	8003b64 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 80028b8:	f7ff f8e8 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a59      	ldr	r2, [pc, #356]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_UART_MspInit+0x52c>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2105      	movs	r1, #5
 80028cc:	2027      	movs	r0, #39	; 0x27
 80028ce:	f001 f91f 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028d2:	2027      	movs	r0, #39	; 0x27
 80028d4:	f001 f938 	bl	8003b48 <HAL_NVIC_EnableIRQ>
}
 80028d8:	e096      	b.n	8002a08 <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <HAL_UART_MspInit+0x534>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	f040 8091 	bne.w	8002a08 <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b43      	ldr	r3, [pc, #268]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a42      	ldr	r2, [pc, #264]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <HAL_UART_MspInit+0x51c>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800291e:	23c0      	movs	r3, #192	; 0xc0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800292e:	2308      	movs	r3, #8
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002936:	4619      	mov	r1, r3
 8002938:	483d      	ldr	r0, [pc, #244]	; (8002a30 <HAL_UART_MspInit+0x538>)
 800293a:	f002 febb 	bl	80056b4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002940:	4a3d      	ldr	r2, [pc, #244]	; (8002a38 <HAL_UART_MspInit+0x540>)
 8002942:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002946:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800294a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002954:	2200      	movs	r2, #0
 8002956:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 800295a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002980:	482c      	ldr	r0, [pc, #176]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002982:	f001 f8ef 	bl	8003b64 <HAL_DMA_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_MspInit+0x498>
      Error_Handler();
 800298c:	f7ff f87e 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a28      	ldr	r2, [pc, #160]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
 8002996:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <HAL_UART_MspInit+0x53c>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800299c:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_UART_MspInit+0x544>)
 800299e:	4a28      	ldr	r2, [pc, #160]	; (8002a40 <HAL_UART_MspInit+0x548>)
 80029a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029a4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80029a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029aa:	4b24      	ldr	r3, [pc, #144]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029ac:	2240      	movs	r2, #64	; 0x40
 80029ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b0:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029be:	4b1f      	ldr	r3, [pc, #124]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029d8:	2200      	movs	r2, #0
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80029dc:	4817      	ldr	r0, [pc, #92]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029de:	f001 f8c1 	bl	8003b64 <HAL_DMA_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 80029e8:	f7ff f850 	bl	8001a8c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
 80029f2:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <HAL_UART_MspInit+0x544>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2105      	movs	r1, #5
 80029fc:	2047      	movs	r0, #71	; 0x47
 80029fe:	f001 f887 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a02:	2047      	movs	r0, #71	; 0x47
 8002a04:	f001 f8a0 	bl	8003b48 <HAL_NVIC_EnableIRQ>
}
 8002a08:	bf00      	nop
 8002a0a:	3740      	adds	r7, #64	; 0x40
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40004800 	.word	0x40004800
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	20004fe8 	.word	0x20004fe8
 8002a20:	40026028 	.word	0x40026028
 8002a24:	2000508c 	.word	0x2000508c
 8002a28:	40026058 	.word	0x40026058
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	20004f88 	.word	0x20004f88
 8002a38:	40026428 	.word	0x40026428
 8002a3c:	2000514c 	.word	0x2000514c
 8002a40:	400264a0 	.word	0x400264a0

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a60:	4c0b      	ldr	r4, [pc, #44]	; (8002a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6e:	f7ff fa19 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f016 fb73 	bl	801915c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7fe ff67 	bl	8001948 <main>
  bx  lr    
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002a88:	0801d840 	.word	0x0801d840
  ldr r2, =_sbss
 8002a8c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002a90:	2000d0d4 	.word	0x2000d0d4

08002a94 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <CAN1_RX0_IRQHandler>
	...

08002a98 <HAL_UART_TxCpltCallback>:
        slave_uart_idle(&slaves[2]);
    }
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_UART_TxCpltCallback+0x54>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d104      	bne.n	8002ab6 <HAL_UART_TxCpltCallback+0x1e>
        slave_set_tx_rx(&slaves[0], rx);
 8002aac:	2100      	movs	r1, #0
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <HAL_UART_TxCpltCallback+0x54>)
 8002ab0:	f016 fa44 	bl	8018f3c <slave_set_tx_rx>
    else if (huart == slaves[1].uart_port->uart)
        slave_set_tx_rx(&slaves[1], rx);
    else if (huart == slaves[2].uart_port->uart)
        slave_set_tx_rx(&slaves[2], rx);
}
 8002ab4:	e016      	b.n	8002ae4 <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[1].uart_port->uart)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_UART_TxCpltCallback+0x54>)
 8002ab8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d104      	bne.n	8002ace <HAL_UART_TxCpltCallback+0x36>
        slave_set_tx_rx(&slaves[1], rx);
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	480a      	ldr	r0, [pc, #40]	; (8002af0 <HAL_UART_TxCpltCallback+0x58>)
 8002ac8:	f016 fa38 	bl	8018f3c <slave_set_tx_rx>
}
 8002acc:	e00a      	b.n	8002ae4 <HAL_UART_TxCpltCallback+0x4c>
    else if (huart == slaves[2].uart_port->uart)
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_UART_TxCpltCallback+0x54>)
 8002ad0:	f8d3 3840 	ldr.w	r3, [r3, #2112]	; 0x840
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d103      	bne.n	8002ae4 <HAL_UART_TxCpltCallback+0x4c>
        slave_set_tx_rx(&slaves[2], rx);
 8002adc:	2100      	movs	r1, #0
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_UART_TxCpltCallback+0x5c>)
 8002ae0:	f016 fa2c 	bl	8018f3c <slave_set_tx_rx>
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20005338 	.word	0x20005338
 8002af0:	20005758 	.word	0x20005758
 8002af4:	20005b78 	.word	0x20005b78

08002af8 <get_channel_average>:
#define DATA_PER_CH 10

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002b08:	2300      	movs	r3, #0
 8002b0a:	72fb      	strb	r3, [r7, #11]
 8002b0c:	e017      	b.n	8002b3e <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8002b0e:	79f9      	ldrb	r1, [r7, #7]
 8002b10:	7afa      	ldrb	r2, [r7, #11]
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <get_channel_average+0x6c>)
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002b38:	7afb      	ldrb	r3, [r7, #11]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	72fb      	strb	r3, [r7, #11]
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d9e4      	bls.n	8002b0e <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8002b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b50:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b54:	eeb0 0a67 	vmov.f32	s0, s15
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20006598 	.word	0x20006598

08002b68 <calculate_ntc_temperature>:

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b72:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b76:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b82:	f7fd fe5b 	bl	800083c <__aeabi_ddiv>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	ec43 2b17 	vmov	d7, r2, r3
 8002b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b92:	eef0 0a67 	vmov.f32	s1, s15
 8002b96:	f017 fabf 	bl	801a118 <log>
 8002b9a:	ec51 0b10 	vmov	r0, r1, d0
 8002b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba2:	f7fd fe4b 	bl	800083c <__aeabi_ddiv>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	a315      	add	r3, pc, #84	; (adr r3, 8002c04 <calculate_ntc_temperature+0x9c>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fb62 	bl	800027c <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	490f      	ldr	r1, [pc, #60]	; (8002c00 <calculate_ntc_temperature+0x98>)
 8002bc2:	f7fd fe3b 	bl	800083c <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	a30a      	add	r3, pc, #40	; (adr r3, 8002bf8 <calculate_ntc_temperature+0x90>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fb50 	bl	8000278 <__aeabi_dsub>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fd ffb2 	bl	8000b48 <__aeabi_d2f>
 8002be4:	4603      	mov	r3, r0
 8002be6:	ee07 3a90 	vmov	s15, r3
}
 8002bea:	eeb0 0a67 	vmov.f32	s0, s15
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	66666666 	.word	0x66666666
 8002bfc:	40711266 	.word	0x40711266
 8002c00:	3ff00000 	.word	0x3ff00000
 8002c04:	dcb5db83 	.word	0xdcb5db83
 8002c08:	3f6b79e1 	.word	0x3f6b79e1

08002c0c <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8002c10:	2282      	movs	r2, #130	; 0x82
 8002c12:	4903      	ldr	r1, [pc, #12]	; (8002c20 <fnd_input_adc_init+0x14>)
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <fnd_input_adc_init+0x18>)
 8002c16:	f000 fae1 	bl	80031dc <HAL_ADC_Start_DMA>
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20006598 	.word	0x20006598
 8002c24:	20004c6c 	.word	0x20004c6c

08002c28 <fnd_input_adc_read_ntc_temp>:

void fnd_input_adc_read_ntc_temp(float *values)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	e029      	b.n	8002c8a <fnd_input_adc_read_ntc_temp+0x62>
    {
        float ntc_adc_value = get_channel_average(i + 4);
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5b 	bl	8002af8 <get_channel_average>
 8002c42:	ed87 0a04 	vstr	s0, [r7, #16]
        float ntc_resister_value = (float)1 * ntc_adc_value / (4096 - ntc_adc_value);
 8002c46:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002cb0 <fnd_input_adc_read_ntc_temp+0x88>
 8002c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c52:	edd7 6a04 	vldr	s13, [r7, #16]
 8002c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c5a:	edc7 7a03 	vstr	s15, [r7, #12]
        values[i] = calculate_ntc_temperature(ntc_resister_value, 10.0, 3950);
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7fd fc6a 	bl	8000538 <__aeabi_f2d>
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	18d4      	adds	r4, r2, r3
 8002c6c:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8002ca0 <fnd_input_adc_read_ntc_temp+0x78>
 8002c70:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002ca8 <fnd_input_adc_read_ntc_temp+0x80>
 8002c74:	ec41 0b10 	vmov	d0, r0, r1
 8002c78:	f7ff ff76 	bl	8002b68 <calculate_ntc_temperature>
 8002c7c:	eef0 7a40 	vmov.f32	s15, s0
 8002c80:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < 6; i++)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	3301      	adds	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d9d2      	bls.n	8002c36 <fnd_input_adc_read_ntc_temp+0xe>
    }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	371c      	adds	r7, #28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	00000000 	.word	0x00000000
 8002ca4:	40aedc00 	.word	0x40aedc00
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	40240000 	.word	0x40240000
 8002cb0:	45800000 	.word	0x45800000

08002cb4 <fnd_input_gpio_read_di>:
GPIO_TypeDef *gpio_idb_port[4] = {IDB1_GPIO_Port, IDB2_GPIO_Port, IDB3_GPIO_Port, IDB4_GPIO_Port};

uint16_t gpio_idb_pin[4] = {IDB1_Pin, IDB2_Pin, IDB3_Pin, IDB4_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e019      	b.n	8002cf6 <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <fnd_input_gpio_read_di+0x54>)
 8002cc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	490f      	ldr	r1, [pc, #60]	; (8002d0c <fnd_input_gpio_read_di+0x58>)
 8002cce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f002 fe89 	bl	80059ec <HAL_GPIO_ReadPin>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf0c      	ite	eq
 8002ce0:	2301      	moveq	r3, #1
 8002ce2:	2300      	movne	r3, #0
 8002ce4:	b2d9      	uxtb	r1, r3
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4413      	add	r3, r2
 8002cec:	460a      	mov	r2, r1
 8002cee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d9e2      	bls.n	8002cc2 <fnd_input_gpio_read_di+0xe>
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000014 	.word	0x20000014

08002d10 <fnd_input_gpio_read_ida>:

void fnd_input_gpio_read_ida(uint8_t *values)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e019      	b.n	8002d52 <fnd_input_gpio_read_ida+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_ida_port[i], gpio_ida_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <fnd_input_gpio_read_ida+0x54>)
 8002d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	490f      	ldr	r1, [pc, #60]	; (8002d68 <fnd_input_gpio_read_ida+0x58>)
 8002d2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f002 fe5b 	bl	80059ec <HAL_GPIO_ReadPin>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2d9      	uxtb	r1, r3
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	460a      	mov	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d9e2      	bls.n	8002d1e <fnd_input_gpio_read_ida+0xe>
    }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000001c 	.word	0x2000001c
 8002d68:	2000002c 	.word	0x2000002c

08002d6c <fnd_input_gpio_read_idb>:

void fnd_input_gpio_read_idb(uint8_t *values)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e019      	b.n	8002dae <fnd_input_gpio_read_idb+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_idb_port[i], gpio_idb_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <fnd_input_gpio_read_idb+0x54>)
 8002d7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	490f      	ldr	r1, [pc, #60]	; (8002dc4 <fnd_input_gpio_read_idb+0x58>)
 8002d86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f002 fe2d 	bl	80059ec <HAL_GPIO_ReadPin>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2d9      	uxtb	r1, r3
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	460a      	mov	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	3301      	adds	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d9e2      	bls.n	8002d7a <fnd_input_gpio_read_idb+0xe>
    }
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000034 	.word	0x20000034
 8002dc4:	20000044 	.word	0x20000044

08002dc8 <HAL_TIM_IC_CaptureCallback>:
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	7f1b      	ldrb	r3, [r3, #28]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_TIM_IC_CaptureCallback+0x1c>
    {
        spd_pulse[0]++;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002de0:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 8002de2:	e008      	b.n	8002df6 <HAL_TIM_IC_CaptureCallback+0x2e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	7f1b      	ldrb	r3, [r3, #28]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d104      	bne.n	8002df6 <HAL_TIM_IC_CaptureCallback+0x2e>
        spd_pulse[1]++;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	3301      	adds	r3, #1
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002df4:	6053      	str	r3, [r2, #4]
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	200067a0 	.word	0x200067a0

08002e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_Init+0x40>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_Init+0x40>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_Init+0x40>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <HAL_Init+0x40>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_Init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <HAL_Init+0x40>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f000 fe62 	bl	8003afa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e36:	200f      	movs	r0, #15
 8002e38:	f7fe fe5a 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e3c:	f7fe fe2c 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00

08002e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x20>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_IncTick+0x24>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_IncTick+0x24>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000050 	.word	0x20000050
 8002e70:	200067a8 	.word	0x200067a8

08002e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return uwTick;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_GetTick+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	200067a8 	.word	0x200067a8

08002e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff ffee 	bl	8002e74 <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d005      	beq.n	8002eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <HAL_Delay+0x44>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eb2:	bf00      	nop
 8002eb4:	f7ff ffde 	bl	8002e74 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d8f7      	bhi.n	8002eb4 <HAL_Delay+0x28>
  {
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000050 	.word	0x20000050

08002ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e033      	b.n	8002f52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fe f8ee 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 0310 	and.w	r3, r3, #16
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f1a:	f023 0302 	bic.w	r3, r3, #2
 8002f1e:	f043 0202 	orr.w	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fbb2 	bl	8003690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
 8002f42:	e001      	b.n	8002f48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	bf0c      	ite	eq
 8002f8e:	2301      	moveq	r3, #1
 8002f90:	2300      	movne	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d049      	beq.n	8003030 <HAL_ADC_IRQHandler+0xd6>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d046      	beq.n	8003030 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d105      	bne.n	8002fba <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d12b      	bne.n	8003020 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d127      	bne.n	8003020 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d119      	bne.n	8003020 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0220 	bic.w	r2, r2, #32
 8002ffa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f9eb 	bl	80033fc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0212 	mvn.w	r2, #18
 800302e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d057      	beq.n	8003112 <HAL_ADC_IRQHandler+0x1b8>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d054      	beq.n	8003112 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d139      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12b      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d124      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11d      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d119      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030dc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fc42 	bl	800398c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 020c 	mvn.w	r2, #12
 8003110:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <HAL_ADC_IRQHandler+0x21a>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d014      	beq.n	8003174 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d10d      	bne.n	8003174 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f95d 	bl	8003424 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0201 	mvn.w	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003198:	bf0c      	ite	eq
 800319a:	2301      	moveq	r3, #1
 800319c:	2300      	movne	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x27a>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d012      	beq.n	80031d4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0220 	mvn.w	r2, #32
 80031c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f937 	bl	8003438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f06f 0220 	mvn.w	r2, #32
 80031d2:	601a      	str	r2, [r3, #0]
  }
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_Start_DMA+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e0e9      	b.n	80033ce <HAL_ADC_Start_DMA+0x1f2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d018      	beq.n	8003242 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003220:	4b6d      	ldr	r3, [pc, #436]	; (80033d8 <HAL_ADC_Start_DMA+0x1fc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6d      	ldr	r2, [pc, #436]	; (80033dc <HAL_ADC_Start_DMA+0x200>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0c9a      	lsrs	r2, r3, #18
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003234:	e002      	b.n	800323c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	3b01      	subs	r3, #1
 800323a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003250:	d107      	bne.n	8003262 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003260:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 80a1 	bne.w	80033b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800329c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	d106      	bne.n	80032c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f023 0206 	bic.w	r2, r3, #6
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
 80032be:	e002      	b.n	80032c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <HAL_ADC_Start_DMA+0x204>)
 80032d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <HAL_ADC_Start_DMA+0x208>)
 80032d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <HAL_ADC_Start_DMA+0x20c>)
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	4a41      	ldr	r2, [pc, #260]	; (80033ec <HAL_ADC_Start_DMA+0x210>)
 80032e8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003302:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003312:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	334c      	adds	r3, #76	; 0x4c
 800331e:	4619      	mov	r1, r3
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f000 fccc 	bl	8003cc0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2b00      	cmp	r3, #0
 8003332:	d12a      	bne.n	800338a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_ADC_Start_DMA+0x214>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d015      	beq.n	800336a <HAL_ADC_Start_DMA+0x18e>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <HAL_ADC_Start_DMA+0x218>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d105      	bne.n	8003354 <HAL_ADC_Start_DMA+0x178>
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_ADC_Start_DMA+0x204>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00a      	beq.n	800336a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_ADC_Start_DMA+0x21c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d136      	bne.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_ADC_Start_DMA+0x204>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	d130      	bne.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d129      	bne.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e020      	b.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_ADC_Start_DMA+0x214>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d11b      	bne.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d114      	bne.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e00b      	b.n	80033cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000
 80033dc:	431bde83 	.word	0x431bde83
 80033e0:	40012300 	.word	0x40012300
 80033e4:	08003889 	.word	0x08003889
 80033e8:	08003943 	.word	0x08003943
 80033ec:	0800395f 	.word	0x0800395f
 80033f0:	40012000 	.word	0x40012000
 80033f4:	40012100 	.word	0x40012100
 80033f8:	40012200 	.word	0x40012200

080033fc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e105      	b.n	8003674 <HAL_ADC_ConfigChannel+0x228>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d925      	bls.n	80034c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68d9      	ldr	r1, [r3, #12]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	3b1e      	subs	r3, #30
 800348e:	2207      	movs	r2, #7
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43da      	mvns	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	400a      	ands	r2, r1
 800349c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68d9      	ldr	r1, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	4603      	mov	r3, r0
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4403      	add	r3, r0
 80034b6:	3b1e      	subs	r3, #30
 80034b8:	409a      	lsls	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	e022      	b.n	800350a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6919      	ldr	r1, [r3, #16]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	2207      	movs	r2, #7
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	400a      	ands	r2, r1
 80034e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6919      	ldr	r1, [r3, #16]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	4618      	mov	r0, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	4403      	add	r3, r0
 8003500:	409a      	lsls	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d824      	bhi.n	800355c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	3b05      	subs	r3, #5
 8003524:	221f      	movs	r2, #31
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	400a      	ands	r2, r1
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	4618      	mov	r0, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	3b05      	subs	r3, #5
 800354e:	fa00 f203 	lsl.w	r2, r0, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	635a      	str	r2, [r3, #52]	; 0x34
 800355a:	e04c      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d824      	bhi.n	80035ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	3b23      	subs	r3, #35	; 0x23
 8003576:	221f      	movs	r2, #31
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43da      	mvns	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	400a      	ands	r2, r1
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	4618      	mov	r0, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b23      	subs	r3, #35	; 0x23
 80035a0:	fa00 f203 	lsl.w	r2, r0, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
 80035ac:	e023      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	3b41      	subs	r3, #65	; 0x41
 80035c0:	221f      	movs	r2, #31
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	400a      	ands	r2, r1
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	4618      	mov	r0, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b41      	subs	r3, #65	; 0x41
 80035ea:	fa00 f203 	lsl.w	r2, r0, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035f6:	4b22      	ldr	r3, [pc, #136]	; (8003680 <HAL_ADC_ConfigChannel+0x234>)
 80035f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_ADC_ConfigChannel+0x238>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1cc>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b12      	cmp	r3, #18
 800360a:	d105      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_ADC_ConfigChannel+0x238>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d123      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b10      	cmp	r3, #16
 8003628:	d003      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x1e6>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b11      	cmp	r3, #17
 8003630:	d11b      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d111      	bne.n	800366a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <HAL_ADC_ConfigChannel+0x23c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_ADC_ConfigChannel+0x240>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	0c9a      	lsrs	r2, r3, #18
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012300 	.word	0x40012300
 8003684:	40012000 	.word	0x40012000
 8003688:	20000000 	.word	0x20000000
 800368c:	431bde83 	.word	0x431bde83

08003690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003698:	4b79      	ldr	r3, [pc, #484]	; (8003880 <ADC_Init+0x1f0>)
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	021a      	lsls	r2, r3, #8
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	4a58      	ldr	r2, [pc, #352]	; (8003884 <ADC_Init+0x1f4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d022      	beq.n	800376e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	e00f      	b.n	800378e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800378c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0202 	bic.w	r2, r2, #2
 800379c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	7e1b      	ldrb	r3, [r3, #24]
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6859      	ldr	r1, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	3b01      	subs	r3, #1
 80037e8:	035a      	lsls	r2, r3, #13
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	e007      	b.n	8003804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	3b01      	subs	r3, #1
 8003820:	051a      	lsls	r2, r3, #20
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003846:	025a      	lsls	r2, r3, #9
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	029a      	lsls	r2, r3, #10
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	40012300 	.word	0x40012300
 8003884:	0f000001 	.word	0x0f000001

08003888 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d13c      	bne.n	800391c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d12b      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d127      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0220 	bic.w	r2, r2, #32
 80038ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7ff fd71 	bl	80033fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800391a:	e00e      	b.n	800393a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff fd85 	bl	8003438 <HAL_ADC_ErrorCallback>
}
 800392e:	e004      	b.n	800393a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7ff fd5d 	bl	8003410 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7ff fd5a 	bl	8003438 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039d2:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <__NVIC_SetPriorityGrouping+0x44>)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	60d3      	str	r3, [r2, #12]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <__NVIC_GetPriorityGrouping+0x18>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0307 	and.w	r3, r3, #7
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	db0b      	blt.n	8003a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	4907      	ldr	r1, [pc, #28]	; (8003a3c <__NVIC_EnableIRQ+0x38>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2001      	movs	r0, #1
 8003a26:	fa00 f202 	lsl.w	r2, r0, r2
 8003a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	e000e100 	.word	0xe000e100

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	db0a      	blt.n	8003a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	490c      	ldr	r1, [pc, #48]	; (8003a8c <__NVIC_SetPriority+0x4c>)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	0112      	lsls	r2, r2, #4
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	440b      	add	r3, r1
 8003a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a68:	e00a      	b.n	8003a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <__NVIC_SetPriority+0x50>)
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	3b04      	subs	r3, #4
 8003a78:	0112      	lsls	r2, r2, #4
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	761a      	strb	r2, [r3, #24]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000e100 	.word	0xe000e100
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f1c3 0307 	rsb	r3, r3, #7
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf28      	it	cs
 8003ab2:	2304      	movcs	r3, #4
 8003ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d902      	bls.n	8003ac4 <NVIC_EncodePriority+0x30>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3b03      	subs	r3, #3
 8003ac2:	e000      	b.n	8003ac6 <NVIC_EncodePriority+0x32>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43da      	mvns	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae6:	43d9      	mvns	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	4313      	orrs	r3, r2
         );
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ff4c 	bl	80039a0 <__NVIC_SetPriorityGrouping>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b22:	f7ff ff61 	bl	80039e8 <__NVIC_GetPriorityGrouping>
 8003b26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6978      	ldr	r0, [r7, #20]
 8003b2e:	f7ff ffb1 	bl	8003a94 <NVIC_EncodePriority>
 8003b32:	4602      	mov	r2, r0
 8003b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff80 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b40:	bf00      	nop
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff ff54 	bl	8003a04 <__NVIC_EnableIRQ>
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b70:	f7ff f980 	bl	8002e74 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e099      	b.n	8003cb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ba0:	e00f      	b.n	8003bc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ba2:	f7ff f967 	bl	8002e74 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d908      	bls.n	8003bc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e078      	b.n	8003cb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e8      	bne.n	8003ba2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_DMA_Init+0x158>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d107      	bne.n	8003c2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	4313      	orrs	r3, r2
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f023 0307 	bic.w	r3, r3, #7
 8003c42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d117      	bne.n	8003c86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fb01 	bl	8004270 <DMA_CheckFifoParam>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c82:	2301      	movs	r3, #1
 8003c84:	e016      	b.n	8003cb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fab8 	bl	8004204 <DMA_CalcBaseAndBitshift>
 8003c94:	4603      	mov	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	223f      	movs	r2, #63	; 0x3f
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	f010803f 	.word	0xf010803f

08003cc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_DMA_Start_IT+0x26>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e040      	b.n	8003d68 <HAL_DMA_Start_IT+0xa8>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d12f      	bne.n	8003d5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa4a 	bl	80041a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	223f      	movs	r2, #63	; 0x3f
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0216 	orr.w	r2, r2, #22
 8003d2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e005      	b.n	8003d66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d7e:	f7ff f879 	bl	8002e74 <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	; 0x80
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e052      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0216 	bic.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_DMA_Abort+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	e013      	b.n	8003e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df4:	f7ff f83e 	bl	8002e74 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d90c      	bls.n	8003e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e015      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e4      	bne.n	8003df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2e:	223f      	movs	r2, #63	; 0x3f
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ea0:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_DMA_IRQHandler+0x258>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a92      	ldr	r2, [pc, #584]	; (80040f0 <HAL_DMA_IRQHandler+0x25c>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01a      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0204 	bic.w	r2, r2, #4
 8003ee6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2208      	movs	r2, #8
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2201      	movs	r2, #1
 8003f06:	409a      	lsls	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2201      	movs	r2, #1
 8003f24:	409a      	lsls	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f043 0202 	orr.w	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	2204      	movs	r2, #4
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f64:	f043 0204 	orr.w	r2, r3, #4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f70:	2210      	movs	r2, #16
 8003f72:	409a      	lsls	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d043      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d03c      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	2210      	movs	r2, #16
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d018      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d024      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	e01f      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01b      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	4798      	blx	r3
 8003fd4:	e016      	b.n	8004004 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0208 	bic.w	r2, r2, #8
 8003ff2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	2220      	movs	r2, #32
 800400a:	409a      	lsls	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4013      	ands	r3, r2
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 808e 	beq.w	8004132 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8086 	beq.w	8004132 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	2220      	movs	r2, #32
 800402c:	409a      	lsls	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b05      	cmp	r3, #5
 800403c:	d136      	bne.n	80040ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0216 	bic.w	r2, r2, #22
 800404c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800405c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_DMA_IRQHandler+0x1da>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0208 	bic.w	r2, r2, #8
 800407c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	223f      	movs	r2, #63	; 0x3f
 8004084:	409a      	lsls	r2, r3
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d07d      	beq.n	800419e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
        }
        return;
 80040aa:	e078      	b.n	800419e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01c      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d108      	bne.n	80040da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d030      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
 80040d8:	e02b      	b.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d027      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
 80040ea:	e022      	b.n	8004132 <HAL_DMA_IRQHandler+0x29e>
 80040ec:	20000000 	.word	0x20000000
 80040f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0210 	bic.w	r2, r2, #16
 8004110:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	2b00      	cmp	r3, #0
 8004138:	d032      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2205      	movs	r2, #5
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	3301      	adds	r3, #1
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	429a      	cmp	r2, r3
 8004168:	d307      	bcc.n	800417a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f2      	bne.n	800415e <HAL_DMA_IRQHandler+0x2ca>
 8004178:	e000      	b.n	800417c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800417a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	4798      	blx	r3
 800419c:	e000      	b.n	80041a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800419e:	bf00      	nop
    }
  }
}
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop

080041a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d108      	bne.n	80041e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e6:	e007      	b.n	80041f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	3b10      	subs	r3, #16
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <DMA_CalcBaseAndBitshift+0x64>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x68>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b03      	cmp	r3, #3
 8004230:	d909      	bls.n	8004246 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	1d1a      	adds	r2, r3, #4
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	e007      	b.n	8004256 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	aaaaaaab 	.word	0xaaaaaaab
 800426c:	0801d5a4 	.word	0x0801d5a4

08004270 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0x5a>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d856      	bhi.n	800433e <DMA_CheckFifoParam+0xce>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <DMA_CheckFifoParam+0x28>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042bb 	.word	0x080042bb
 80042a0:	080042a9 	.word	0x080042a9
 80042a4:	0800433f 	.word	0x0800433f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d046      	beq.n	8004342 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e043      	b.n	8004342 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c2:	d140      	bne.n	8004346 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c8:	e03d      	b.n	8004346 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d2:	d121      	bne.n	8004318 <DMA_CheckFifoParam+0xa8>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d837      	bhi.n	800434a <DMA_CheckFifoParam+0xda>
 80042da:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <DMA_CheckFifoParam+0x70>)
 80042dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	080042f7 	.word	0x080042f7
 80042e8:	080042f1 	.word	0x080042f1
 80042ec:	08004309 	.word	0x08004309
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	73fb      	strb	r3, [r7, #15]
      break;
 80042f4:	e030      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d025      	beq.n	800434e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004306:	e022      	b.n	800434e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004310:	d11f      	bne.n	8004352 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004316:	e01c      	b.n	8004352 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d903      	bls.n	8004326 <DMA_CheckFifoParam+0xb6>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d003      	beq.n	800432c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004324:	e018      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      break;
 800432a:	e015      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00e      	beq.n	8004356 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e00b      	b.n	8004356 <DMA_CheckFifoParam+0xe6>
      break;
 800433e:	bf00      	nop
 8004340:	e00a      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e008      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e006      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;   
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
    }
  } 
  
  return status; 
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop

08004368 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004378:	4baa      	ldr	r3, [pc, #680]	; (8004624 <HAL_ETH_Init+0x2bc>)
 800437a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e183      	b.n	8004696 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f004 f998 	bl	80086d8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a8:	2300      	movs	r3, #0
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	4b9e      	ldr	r3, [pc, #632]	; (8004628 <HAL_ETH_Init+0x2c0>)
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	4a9d      	ldr	r2, [pc, #628]	; (8004628 <HAL_ETH_Init+0x2c0>)
 80043b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b6:	6453      	str	r3, [r2, #68]	; 0x44
 80043b8:	4b9b      	ldr	r3, [pc, #620]	; (8004628 <HAL_ETH_Init+0x2c0>)
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80043c4:	4b99      	ldr	r3, [pc, #612]	; (800462c <HAL_ETH_Init+0x2c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a98      	ldr	r2, [pc, #608]	; (800462c <HAL_ETH_Init+0x2c4>)
 80043ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80043d0:	4b96      	ldr	r3, [pc, #600]	; (800462c <HAL_ETH_Init+0x2c4>)
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	4994      	ldr	r1, [pc, #592]	; (800462c <HAL_ETH_Init+0x2c4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80043f6:	f7fe fd3d 	bl	8002e74 <HAL_GetTick>
 80043fa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80043fc:	e011      	b.n	8004422 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80043fe:	f7fe fd39 	bl	8002e74 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800440c:	d909      	bls.n	8004422 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e139      	b.n	8004696 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1e4      	bne.n	80043fe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f023 031c 	bic.w	r3, r3, #28
 8004442:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004444:	f002 f85c 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8004448:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4a78      	ldr	r2, [pc, #480]	; (8004630 <HAL_ETH_Init+0x2c8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d908      	bls.n	8004464 <HAL_ETH_Init+0xfc>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4a77      	ldr	r2, [pc, #476]	; (8004634 <HAL_ETH_Init+0x2cc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d804      	bhi.n	8004464 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e027      	b.n	80044b4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_ETH_Init+0x2cc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d908      	bls.n	800447e <HAL_ETH_Init+0x116>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4a6d      	ldr	r2, [pc, #436]	; (8004624 <HAL_ETH_Init+0x2bc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d204      	bcs.n	800447e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f043 030c 	orr.w	r3, r3, #12
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e01a      	b.n	80044b4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	4a68      	ldr	r2, [pc, #416]	; (8004624 <HAL_ETH_Init+0x2bc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d303      	bcc.n	800448e <HAL_ETH_Init+0x126>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	4a6b      	ldr	r2, [pc, #428]	; (8004638 <HAL_ETH_Init+0x2d0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d911      	bls.n	80044b2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	4a69      	ldr	r2, [pc, #420]	; (8004638 <HAL_ETH_Init+0x2d0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d908      	bls.n	80044a8 <HAL_ETH_Init+0x140>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	4a68      	ldr	r2, [pc, #416]	; (800463c <HAL_ETH_Init+0x2d4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d804      	bhi.n	80044a8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e005      	b.n	80044b4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f043 0310 	orr.w	r3, r3, #16
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e000      	b.n	80044b4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80044b2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80044bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80044c0:	2100      	movs	r1, #0
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fc17 	bl	8004cf6 <HAL_ETH_WritePHYRegister>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80044d2:	6939      	ldr	r1, [r7, #16]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 fdcd 	bl	8005074 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0d7      	b.n	8004696 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80044e6:	20ff      	movs	r0, #255	; 0xff
 80044e8:	f7fe fcd0 	bl	8002e8c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a5 	beq.w	8004640 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f6:	f7fe fcbd 	bl	8002e74 <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	461a      	mov	r2, r3
 8004502:	2101      	movs	r1, #1
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fb8e 	bl	8004c26 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800450a:	f7fe fcb3 	bl	8002e74 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f241 3288 	movw	r2, #5000	; 0x1388
 8004518:	4293      	cmp	r3, r2
 800451a:	d90f      	bls.n	800453c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004520:	6939      	ldr	r1, [r7, #16]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fda6 	bl	8005074 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0ac      	b.n	8004696 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0da      	beq.n	80044fc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800454a:	2100      	movs	r1, #0
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fbd2 	bl	8004cf6 <HAL_ETH_WritePHYRegister>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fd88 	bl	8005074 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800456c:	2301      	movs	r3, #1
 800456e:	e092      	b.n	8004696 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004570:	f7fe fc80 	bl	8002e74 <HAL_GetTick>
 8004574:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004576:	f107 030c 	add.w	r3, r7, #12
 800457a:	461a      	mov	r2, r3
 800457c:	2101      	movs	r1, #1
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fb51 	bl	8004c26 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004584:	f7fe fc76 	bl	8002e74 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d90f      	bls.n	80045b6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800459a:	6939      	ldr	r1, [r7, #16]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fd69 	bl	8005074 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e06f      	b.n	8004696 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0da      	beq.n	8004576 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	461a      	mov	r2, r3
 80045c6:	2110      	movs	r1, #16
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb2c 	bl	8004c26 <HAL_ETH_ReadPHYRegister>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80045d8:	6939      	ldr	r1, [r7, #16]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fd4a 	bl	8005074 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80045e8:	2301      	movs	r3, #1
 80045ea:	e054      	b.n	8004696 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d004      	beq.n	8004600 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	e002      	b.n	8004606 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
 8004616:	e035      	b.n	8004684 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e030      	b.n	8004684 <HAL_ETH_Init+0x31c>
 8004622:	bf00      	nop
 8004624:	03938700 	.word	0x03938700
 8004628:	40023800 	.word	0x40023800
 800462c:	40013800 	.word	0x40013800
 8004630:	01312cff 	.word	0x01312cff
 8004634:	02160ebf 	.word	0x02160ebf
 8004638:	05f5e0ff 	.word	0x05f5e0ff
 800463c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	08db      	lsrs	r3, r3, #3
 8004646:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004650:	4313      	orrs	r3, r2
 8004652:	b29b      	uxth	r3, r3
 8004654:	461a      	mov	r2, r3
 8004656:	2100      	movs	r1, #0
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb4c 	bl	8004cf6 <HAL_ETH_WritePHYRegister>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00b      	beq.n	800467c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fd02 	bl	8005074 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e00c      	b.n	8004696 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800467c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004680:	f7fe fc04 	bl	8002e8c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004684:	6939      	ldr	r1, [r7, #16]
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fcf4 	bl	8005074 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop

080046a0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_ETH_DMATxDescListInit+0x20>
 80046bc:	2302      	movs	r3, #2
 80046be:	e052      	b.n	8004766 <HAL_ETH_DMATxDescListInit+0xc6>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e030      	b.n	800473e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	015b      	lsls	r3, r3, #5
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	4413      	add	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046ec:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	3b01      	subs	r3, #1
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	d208      	bcs.n	8004732 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3301      	adds	r3, #1
 8004724:	015b      	lsls	r3, r3, #5
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	461a      	mov	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	60da      	str	r2, [r3, #12]
 8004730:	e002      	b.n	8004738 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	3301      	adds	r3, #1
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3ca      	bcc.n	80046dc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	3310      	adds	r3, #16
 8004752:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004772:	b480      	push	{r7}
 8004774:	b087      	sub	sp, #28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	607a      	str	r2, [r7, #4]
 800477e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_ETH_DMARxDescListInit+0x20>
 800478e:	2302      	movs	r3, #2
 8004790:	e056      	b.n	8004840 <HAL_ETH_DMARxDescListInit+0xce>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e034      	b.n	8004818 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	015b      	lsls	r3, r3, #5
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047be:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80047c6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	461a      	mov	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d208      	bcs.n	800480c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	015b      	lsls	r3, r3, #5
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	4413      	add	r3, r2
 8004804:	461a      	mov	r2, r3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	e002      	b.n	8004812 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d3c6      	bcc.n	80047ae <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482a:	330c      	adds	r3, #12
 800482c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_ETH_TransmitFrame+0x24>
 800486c:	2302      	movs	r3, #2
 800486e:	e0cd      	b.n	8004a0c <HAL_ETH_TransmitFrame+0x1c0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004896:	2301      	movs	r3, #1
 8004898:	e0b8      	b.n	8004a0c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	da09      	bge.n	80048b8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2212      	movs	r2, #18
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0a9      	b.n	8004a0c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80048be:	4293      	cmp	r3, r2
 80048c0:	d915      	bls.n	80048ee <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	4a54      	ldr	r2, [pc, #336]	; (8004a18 <HAL_ETH_TransmitFrame+0x1cc>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0a9b      	lsrs	r3, r3, #10
 80048cc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_ETH_TransmitFrame+0x1cc>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	0a9b      	lsrs	r3, r3, #10
 80048d8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3301      	adds	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e001      	b.n	80048f2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80048ee:	2301      	movs	r3, #1
 80048f0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11c      	bne.n	8004932 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004902:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004906:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004912:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004922:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004930:	e04b      	b.n	80049ca <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e044      	b.n	80049c2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004946:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d107      	bne.n	800495e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800495c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004962:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004966:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3b01      	subs	r3, #1
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d116      	bne.n	80049a0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004980:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	4a25      	ldr	r2, [pc, #148]	; (8004a1c <HAL_ETH_TransmitFrame+0x1d0>)
 8004986:	fb02 f203 	mul.w	r2, r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4413      	add	r3, r2
 800498e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004992:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800499e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80049ae:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	3301      	adds	r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3b6      	bcc.n	8004938 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d2:	3314      	adds	r3, #20
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	3314      	adds	r3, #20
 80049e8:	2204      	movs	r2, #4
 80049ea:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	3304      	adds	r3, #4
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	ac02b00b 	.word	0xac02b00b
 8004a1c:	fffffa0c 	.word	0xfffffa0c

08004a20 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e074      	b.n	8004b24 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004a4a:	e05a      	b.n	8004b02 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d10d      	bne.n	8004a7e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	461a      	mov	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a7c:	e041      	b.n	8004b02 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa2:	e02e      	b.n	8004b02 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d103      	bne.n	8004ac6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004ad2:	1f1a      	subs	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e010      	b.n	8004b24 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db02      	blt.n	8004b12 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d99c      	bls.n	8004a4c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	3314      	adds	r3, #20
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d112      	bne.n	8004b72 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f003 fe71 	bl	8008834 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	2240      	movs	r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b70:	e01b      	b.n	8004baa <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	3314      	adds	r3, #20
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d111      	bne.n	8004baa <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f839 	bl	8004bfe <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	3314      	adds	r3, #20
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bb8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc2:	3314      	adds	r3, #20
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bce:	d112      	bne.n	8004bf6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f81e 	bl	8004c12 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bde:	3314      	adds	r3, #20
 8004be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004be4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b82      	cmp	r3, #130	; 0x82
 8004c46:	d101      	bne.n	8004c4c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e050      	b.n	8004cee <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2282      	movs	r2, #130	; 0x82
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	f003 031c 	and.w	r3, r3, #28
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8a1b      	ldrh	r3, [r3, #16]
 8004c68:	02db      	lsls	r3, r3, #11
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004c72:	897b      	ldrh	r3, [r7, #10]
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0302 	bic.w	r3, r3, #2
 8004c86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c98:	f7fe f8ec 	bl	8002e74 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004c9e:	e015      	b.n	8004ccc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004ca0:	f7fe f8e8 	bl	8002e74 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cae:	d309      	bcc.n	8004cc4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e014      	b.n	8004cee <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e4      	bne.n	8004ca0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b42      	cmp	r3, #66	; 0x42
 8004d16:	d101      	bne.n	8004d1c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e04e      	b.n	8004dba <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2242      	movs	r2, #66	; 0x42
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f003 031c 	and.w	r3, r3, #28
 8004d32:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8a1b      	ldrh	r3, [r3, #16]
 8004d38:	02db      	lsls	r3, r3, #11
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004d42:	897b      	ldrh	r3, [r7, #10]
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f043 0302 	orr.w	r3, r3, #2
 8004d56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d72:	f7fe f87f 	bl	8002e74 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d78:	e015      	b.n	8004da6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004d7a:	f7fe f87b 	bl	8002e74 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d309      	bcc.n	8004d9e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e00d      	b.n	8004dba <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e4      	bne.n	8004d7a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ETH_Start+0x16>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e01f      	b.n	8004e18 <HAL_ETH_Start+0x56>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb45 	bl	8005478 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb7c 	bl	80054ec <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fc13 	bl	8005620 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fbb0 	bl	8005560 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fbdd 	bl	80055c0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_ETH_Stop+0x16>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e01f      	b.n	8004e76 <HAL_ETH_Stop+0x56>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fba2 	bl	8005590 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fbcf 	bl	80055f0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fb67 	bl	8005526 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fbe1 	bl	8005620 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb27 	bl	80054b2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_ETH_ConfigMAC+0x1c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e0e4      	b.n	8005066 <HAL_ETH_ConfigMAC+0x1e6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80b1 	beq.w	8005016 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4b6c      	ldr	r3, [pc, #432]	; (8005070 <HAL_ETH_ConfigMAC+0x1f0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004ecc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004ed2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004ed8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004ede:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004ee4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004eea:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004ef0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8004ef6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004efc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004f02:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004f08:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004f0e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7fd ffb0 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f3c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004f42:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004f48:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004f4e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004f54:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004f5a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004f66:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004f68:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f72:	2001      	movs	r0, #1
 8004f74:	f7fd ff8a 	bl	8002e8c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004f88:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f92:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004fb0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004fb6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004fbc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004fc2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004fc8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7fd ff53 	bl	8002e8c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005006:	2001      	movs	r0, #1
 8005008:	f7fd ff40 	bl	8002e8c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	61da      	str	r2, [r3, #28]
 8005014:	e01e      	b.n	8005054 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005024:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005046:	2001      	movs	r0, #1
 8005048:	f7fd ff20 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	ff20810f 	.word	0xff20810f

08005074 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0b0      	sub	sp, #192	; 0xc0
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005090:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005098:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800509a:	2300      	movs	r3, #0
 800509c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800509e:	2300      	movs	r3, #0
 80050a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80050a2:	2300      	movs	r3, #0
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80050ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050be:	663b      	str	r3, [r7, #96]	; 0x60
 80050c0:	e001      	b.n	80050c6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80050c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050ca:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050d0:	2300      	movs	r3, #0
 80050d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80050d8:	2300      	movs	r3, #0
 80050da:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005108:	2300      	movs	r3, #0
 800510a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800510e:	2300      	movs	r3, #0
 8005110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800511a:	2300      	movs	r3, #0
 800511c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005126:	2300      	movs	r3, #0
 8005128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005132:	2300      	movs	r3, #0
 8005134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005148:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800514c:	4bac      	ldr	r3, [pc, #688]	; (8005400 <ETH_MACDMAConfig+0x38c>)
 800514e:	4013      	ands	r3, r2
 8005150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005154:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005158:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800515c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005160:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005166:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800516a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800516c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800516e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005174:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005178:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800517a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800517c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800517e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005180:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005184:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005188:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800518a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800519c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051a8:	2001      	movs	r0, #1
 80051aa:	f7fd fe6f 	bl	8002e8c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80051b6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80051b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80051ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80051bc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80051be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80051c0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80051c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80051c6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80051c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80051cc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80051ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80051d2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80051d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80051d8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80051dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80051e4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80051e6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80051f2:	2001      	movs	r0, #1
 80051f4:	f7fd fe4a 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005200:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800520a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005214:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005220:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005224:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005228:	4013      	ands	r3, r2
 800522a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800522e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005232:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005234:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005238:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800523a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800523e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005244:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800524a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800524c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005250:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005252:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005264:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005270:	2001      	movs	r0, #1
 8005272:	f7fd fe0b 	bl	8002e8c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800527e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005280:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005284:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800529a:	2001      	movs	r0, #1
 800529c:	f7fd fdf6 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80052a8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80052ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052b2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80052b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052bc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80052ce:	2304      	movs	r3, #4
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80052d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80052d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052e8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80052f2:	2300      	movs	r3, #0
 80052f4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fe:	3318      	adds	r3, #24
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005306:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800530a:	4b3e      	ldr	r3, [pc, #248]	; (8005404 <ETH_MACDMAConfig+0x390>)
 800530c:	4013      	ands	r3, r2
 800530e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005312:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005314:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005316:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005318:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800531a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800531c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800531e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005320:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005322:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005324:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005326:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005328:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800532a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800532e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005332:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	3318      	adds	r3, #24
 8005348:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800534c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	3318      	adds	r3, #24
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800535e:	2001      	movs	r0, #1
 8005360:	f7fd fd94 	bl	8002e8c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536c:	3318      	adds	r3, #24
 800536e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005372:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005378:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800537a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800537c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005380:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005384:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005388:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800538a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800538c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800538e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80053ac:	2001      	movs	r0, #1
 80053ae:	f7fd fd6d 	bl	8002e8c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80053be:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10f      	bne.n	80053e8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d0:	331c      	adds	r3, #28
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e4:	331c      	adds	r3, #28
 80053e6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	461a      	mov	r2, r3
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f809 	bl	8005408 <ETH_MACAddressConfig>
}
 80053f6:	bf00      	nop
 80053f8:	37c0      	adds	r7, #192	; 0xc0
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	ff20810f 	.word	0xff20810f
 8005404:	f8de3f23 	.word	0xf8de3f23

08005408 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3305      	adds	r3, #5
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	3204      	adds	r2, #4
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	4313      	orrs	r3, r2
 8005424:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <ETH_MACAddressConfig+0x68>)
 800542a:	4413      	add	r3, r2
 800542c:	461a      	mov	r2, r3
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3303      	adds	r3, #3
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	061a      	lsls	r2, r3, #24
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3302      	adds	r3, #2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3301      	adds	r3, #1
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	4313      	orrs	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	7812      	ldrb	r2, [r2, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4b06      	ldr	r3, [pc, #24]	; (8005474 <ETH_MACAddressConfig+0x6c>)
 800545a:	4413      	add	r3, r2
 800545c:	461a      	mov	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6013      	str	r3, [r2, #0]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40028040 	.word	0x40028040
 8005474:	40028044 	.word	0x40028044

08005478 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800549c:	2001      	movs	r0, #1
 800549e:	f000 f8e9 	bl	8005674 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0208 	bic.w	r2, r2, #8
 80054cc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f000 f8cc 	bl	8005674 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0204 	orr.w	r2, r2, #4
 8005506:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005510:	2001      	movs	r0, #1
 8005512:	f000 f8af 	bl	8005674 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0204 	bic.w	r2, r2, #4
 8005540:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800554a:	2001      	movs	r0, #1
 800554c:	f000 f892 	bl	8005674 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	601a      	str	r2, [r3, #0]
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005570:	3318      	adds	r3, #24
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800557c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005580:	3318      	adds	r3, #24
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a0:	3318      	adds	r3, #24
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b0:	3318      	adds	r3, #24
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	3318      	adds	r3, #24
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0202 	orr.w	r2, r2, #2
 80055dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e0:	3318      	adds	r3, #24
 80055e2:	601a      	str	r2, [r3, #0]
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005600:	3318      	adds	r3, #24
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0202 	bic.w	r2, r2, #2
 800560c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005610:	3318      	adds	r3, #24
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005634:	3318      	adds	r3, #24
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005644:	3318      	adds	r3, #24
 8005646:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	3318      	adds	r3, #24
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005656:	2001      	movs	r0, #1
 8005658:	f000 f80c 	bl	8005674 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005666:	3318      	adds	r3, #24
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <ETH_Delay+0x38>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0b      	ldr	r2, [pc, #44]	; (80056b0 <ETH_Delay+0x3c>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	0a5b      	lsrs	r3, r3, #9
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	fb02 f303 	mul.w	r3, r2, r3
 800568e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005690:	bf00      	nop
  } 
  while (Delay --);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	60fa      	str	r2, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f9      	bne.n	8005690 <ETH_Delay+0x1c>
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000000 	.word	0x20000000
 80056b0:	10624dd3 	.word	0x10624dd3

080056b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e16b      	b.n	80059a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056d0:	2201      	movs	r2, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4013      	ands	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	f040 815a 	bne.w	80059a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d005      	beq.n	8005706 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005702:	2b02      	cmp	r3, #2
 8005704:	d130      	bne.n	8005768 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	2203      	movs	r2, #3
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4013      	ands	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	fa02 f303 	lsl.w	r3, r2, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4313      	orrs	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800573c:	2201      	movs	r2, #1
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f003 0201 	and.w	r2, r3, #1
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b03      	cmp	r3, #3
 8005772:	d017      	beq.n	80057a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	2203      	movs	r2, #3
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d123      	bne.n	80057f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	08da      	lsrs	r2, r3, #3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3208      	adds	r2, #8
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	220f      	movs	r2, #15
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	08da      	lsrs	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	3208      	adds	r2, #8
 80057f2:	69b9      	ldr	r1, [r7, #24]
 80057f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	2203      	movs	r2, #3
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4013      	ands	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 0203 	and.w	r2, r3, #3
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80b4 	beq.w	80059a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b60      	ldr	r3, [pc, #384]	; (80059c0 <HAL_GPIO_Init+0x30c>)
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	4a5f      	ldr	r2, [pc, #380]	; (80059c0 <HAL_GPIO_Init+0x30c>)
 8005844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005848:	6453      	str	r3, [r2, #68]	; 0x44
 800584a:	4b5d      	ldr	r3, [pc, #372]	; (80059c0 <HAL_GPIO_Init+0x30c>)
 800584c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005856:	4a5b      	ldr	r2, [pc, #364]	; (80059c4 <HAL_GPIO_Init+0x310>)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	3302      	adds	r3, #2
 800585e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	220f      	movs	r2, #15
 800586e:	fa02 f303 	lsl.w	r3, r2, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a52      	ldr	r2, [pc, #328]	; (80059c8 <HAL_GPIO_Init+0x314>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <HAL_GPIO_Init+0x226>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a51      	ldr	r2, [pc, #324]	; (80059cc <HAL_GPIO_Init+0x318>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d025      	beq.n	80058d6 <HAL_GPIO_Init+0x222>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a50      	ldr	r2, [pc, #320]	; (80059d0 <HAL_GPIO_Init+0x31c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01f      	beq.n	80058d2 <HAL_GPIO_Init+0x21e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a4f      	ldr	r2, [pc, #316]	; (80059d4 <HAL_GPIO_Init+0x320>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d019      	beq.n	80058ce <HAL_GPIO_Init+0x21a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a4e      	ldr	r2, [pc, #312]	; (80059d8 <HAL_GPIO_Init+0x324>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_GPIO_Init+0x216>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a4d      	ldr	r2, [pc, #308]	; (80059dc <HAL_GPIO_Init+0x328>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00d      	beq.n	80058c6 <HAL_GPIO_Init+0x212>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a4c      	ldr	r2, [pc, #304]	; (80059e0 <HAL_GPIO_Init+0x32c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <HAL_GPIO_Init+0x20e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a4b      	ldr	r2, [pc, #300]	; (80059e4 <HAL_GPIO_Init+0x330>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d101      	bne.n	80058be <HAL_GPIO_Init+0x20a>
 80058ba:	2307      	movs	r3, #7
 80058bc:	e00e      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058be:	2308      	movs	r3, #8
 80058c0:	e00c      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058c2:	2306      	movs	r3, #6
 80058c4:	e00a      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058c6:	2305      	movs	r3, #5
 80058c8:	e008      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058ca:	2304      	movs	r3, #4
 80058cc:	e006      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058ce:	2303      	movs	r3, #3
 80058d0:	e004      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e002      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <HAL_GPIO_Init+0x228>
 80058da:	2300      	movs	r3, #0
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	f002 0203 	and.w	r2, r2, #3
 80058e2:	0092      	lsls	r2, r2, #2
 80058e4:	4093      	lsls	r3, r2
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058ec:	4935      	ldr	r1, [pc, #212]	; (80059c4 <HAL_GPIO_Init+0x310>)
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	3302      	adds	r3, #2
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058fa:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <HAL_GPIO_Init+0x334>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800591e:	4a32      	ldr	r2, [pc, #200]	; (80059e8 <HAL_GPIO_Init+0x334>)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005924:	4b30      	ldr	r3, [pc, #192]	; (80059e8 <HAL_GPIO_Init+0x334>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005948:	4a27      	ldr	r2, [pc, #156]	; (80059e8 <HAL_GPIO_Init+0x334>)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800594e:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_GPIO_Init+0x334>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	43db      	mvns	r3, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4013      	ands	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005972:	4a1d      	ldr	r2, [pc, #116]	; (80059e8 <HAL_GPIO_Init+0x334>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <HAL_GPIO_Init+0x334>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	43db      	mvns	r3, r3
 8005982:	69ba      	ldr	r2, [r7, #24]
 8005984:	4013      	ands	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <HAL_GPIO_Init+0x334>)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	3301      	adds	r3, #1
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	f67f ae90 	bls.w	80056d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	3724      	adds	r7, #36	; 0x24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40013800 	.word	0x40013800
 80059c8:	40020000 	.word	0x40020000
 80059cc:	40020400 	.word	0x40020400
 80059d0:	40020800 	.word	0x40020800
 80059d4:	40020c00 	.word	0x40020c00
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40021400 	.word	0x40021400
 80059e0:	40021800 	.word	0x40021800
 80059e4:	40021c00 	.word	0x40021c00
 80059e8:	40013c00 	.word	0x40013c00

080059ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	887b      	ldrh	r3, [r7, #2]
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
 8005a08:	e001      	b.n	8005a0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	807b      	strh	r3, [r7, #2]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a2c:	787b      	ldrb	r3, [r7, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a38:	e003      	b.n	8005a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a3a:	887b      	ldrh	r3, [r7, #2]
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	619a      	str	r2, [r3, #24]
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e12b      	b.n	8005cba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fb fec6 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2224      	movs	r2, #36	; 0x24
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0201 	bic.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f000 fd30 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	4a81      	ldr	r2, [pc, #516]	; (8005cc4 <HAL_I2C_Init+0x274>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d807      	bhi.n	8005ad4 <HAL_I2C_Init+0x84>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a80      	ldr	r2, [pc, #512]	; (8005cc8 <HAL_I2C_Init+0x278>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	bf94      	ite	ls
 8005acc:	2301      	movls	r3, #1
 8005ace:	2300      	movhi	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e006      	b.n	8005ae2 <HAL_I2C_Init+0x92>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a7d      	ldr	r2, [pc, #500]	; (8005ccc <HAL_I2C_Init+0x27c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	bf94      	ite	ls
 8005adc:	2301      	movls	r3, #1
 8005ade:	2300      	movhi	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0e7      	b.n	8005cba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4a78      	ldr	r2, [pc, #480]	; (8005cd0 <HAL_I2C_Init+0x280>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	0c9b      	lsrs	r3, r3, #18
 8005af4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a6a      	ldr	r2, [pc, #424]	; (8005cc4 <HAL_I2C_Init+0x274>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d802      	bhi.n	8005b24 <HAL_I2C_Init+0xd4>
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	3301      	adds	r3, #1
 8005b22:	e009      	b.n	8005b38 <HAL_I2C_Init+0xe8>
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	4a69      	ldr	r2, [pc, #420]	; (8005cd4 <HAL_I2C_Init+0x284>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	099b      	lsrs	r3, r3, #6
 8005b36:	3301      	adds	r3, #1
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	495c      	ldr	r1, [pc, #368]	; (8005cc4 <HAL_I2C_Init+0x274>)
 8005b54:	428b      	cmp	r3, r1
 8005b56:	d819      	bhi.n	8005b8c <HAL_I2C_Init+0x13c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	1e59      	subs	r1, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b6c:	400b      	ands	r3, r1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_I2C_Init+0x138>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1e59      	subs	r1, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b80:	3301      	adds	r3, #1
 8005b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b86:	e051      	b.n	8005c2c <HAL_I2C_Init+0x1dc>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	e04f      	b.n	8005c2c <HAL_I2C_Init+0x1dc>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d111      	bne.n	8005bb8 <HAL_I2C_Init+0x168>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	1e58      	subs	r0, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	440b      	add	r3, r1
 8005ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	e012      	b.n	8005bde <HAL_I2C_Init+0x18e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1e58      	subs	r0, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	0099      	lsls	r1, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bce:	3301      	adds	r3, #1
 8005bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf0c      	ite	eq
 8005bd8:	2301      	moveq	r3, #1
 8005bda:	2300      	movne	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_I2C_Init+0x196>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e022      	b.n	8005c2c <HAL_I2C_Init+0x1dc>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10e      	bne.n	8005c0c <HAL_I2C_Init+0x1bc>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1e58      	subs	r0, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6859      	ldr	r1, [r3, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	440b      	add	r3, r1
 8005bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	e00f      	b.n	8005c2c <HAL_I2C_Init+0x1dc>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	1e58      	subs	r0, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	0099      	lsls	r1, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c22:	3301      	adds	r3, #1
 8005c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	6809      	ldr	r1, [r1, #0]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	431a      	orrs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6911      	ldr	r1, [r2, #16]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	4311      	orrs	r1, r2
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695a      	ldr	r2, [r3, #20]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f042 0201 	orr.w	r2, r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	000186a0 	.word	0x000186a0
 8005cc8:	001e847f 	.word	0x001e847f
 8005ccc:	003d08ff 	.word	0x003d08ff
 8005cd0:	431bde83 	.word	0x431bde83
 8005cd4:	10624dd3 	.word	0x10624dd3

08005cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e264      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d075      	beq.n	8005de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cf6:	4ba3      	ldr	r3, [pc, #652]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 030c 	and.w	r3, r3, #12
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d00c      	beq.n	8005d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d02:	4ba0      	ldr	r3, [pc, #640]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d0a:	2b08      	cmp	r3, #8
 8005d0c:	d112      	bne.n	8005d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d0e:	4b9d      	ldr	r3, [pc, #628]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d1a:	d10b      	bne.n	8005d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1c:	4b99      	ldr	r3, [pc, #612]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d05b      	beq.n	8005de0 <HAL_RCC_OscConfig+0x108>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d157      	bne.n	8005de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e23f      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3c:	d106      	bne.n	8005d4c <HAL_RCC_OscConfig+0x74>
 8005d3e:	4b91      	ldr	r3, [pc, #580]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a90      	ldr	r2, [pc, #576]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	e01d      	b.n	8005d88 <HAL_RCC_OscConfig+0xb0>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x98>
 8005d56:	4b8b      	ldr	r3, [pc, #556]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a8a      	ldr	r2, [pc, #552]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a87      	ldr	r2, [pc, #540]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	e00b      	b.n	8005d88 <HAL_RCC_OscConfig+0xb0>
 8005d70:	4b84      	ldr	r3, [pc, #528]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a83      	ldr	r2, [pc, #524]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	4b81      	ldr	r3, [pc, #516]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a80      	ldr	r2, [pc, #512]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d013      	beq.n	8005db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fd f870 	bl	8002e74 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fd f86c 	bl	8002e74 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	; 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e204      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005daa:	4b76      	ldr	r3, [pc, #472]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f0      	beq.n	8005d98 <HAL_RCC_OscConfig+0xc0>
 8005db6:	e014      	b.n	8005de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fd f85c 	bl	8002e74 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fd f858 	bl	8002e74 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e1f0      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dd2:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1f0      	bne.n	8005dc0 <HAL_RCC_OscConfig+0xe8>
 8005dde:	e000      	b.n	8005de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d063      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dee:	4b65      	ldr	r3, [pc, #404]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dfa:	4b62      	ldr	r3, [pc, #392]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d11c      	bne.n	8005e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e06:	4b5f      	ldr	r3, [pc, #380]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d116      	bne.n	8005e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e12:	4b5c      	ldr	r3, [pc, #368]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d005      	beq.n	8005e2a <HAL_RCC_OscConfig+0x152>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d001      	beq.n	8005e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e1c4      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e2a:	4b56      	ldr	r3, [pc, #344]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	4952      	ldr	r1, [pc, #328]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3e:	e03a      	b.n	8005eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d020      	beq.n	8005e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e48:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <HAL_RCC_OscConfig+0x2b0>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4e:	f7fd f811 	bl	8002e74 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e56:	f7fd f80d 	bl	8002e74 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e1a5      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e68:	4b46      	ldr	r3, [pc, #280]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e74:	4b43      	ldr	r3, [pc, #268]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4940      	ldr	r1, [pc, #256]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]
 8005e88:	e015      	b.n	8005eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e8a:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <HAL_RCC_OscConfig+0x2b0>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fc fff0 	bl	8002e74 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e98:	f7fc ffec 	bl	8002e74 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e184      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eaa:	4b36      	ldr	r3, [pc, #216]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d030      	beq.n	8005f24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eca:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <HAL_RCC_OscConfig+0x2b4>)
 8005ecc:	2201      	movs	r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fc ffd0 	bl	8002e74 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ed8:	f7fc ffcc 	bl	8002e74 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e164      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eea:	4b26      	ldr	r3, [pc, #152]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x200>
 8005ef6:	e015      	b.n	8005f24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <HAL_RCC_OscConfig+0x2b4>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efe:	f7fc ffb9 	bl	8002e74 <HAL_GetTick>
 8005f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f06:	f7fc ffb5 	bl	8002e74 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e14d      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f18:	4b1a      	ldr	r3, [pc, #104]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f0      	bne.n	8005f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80a0 	beq.w	8006072 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10f      	bne.n	8005f62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	4a0e      	ldr	r2, [pc, #56]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f50:	6413      	str	r3, [r2, #64]	; 0x40
 8005f52:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	60bb      	str	r3, [r7, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCC_OscConfig+0x2b8>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d121      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <HAL_RCC_OscConfig+0x2b8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a07      	ldr	r2, [pc, #28]	; (8005f90 <HAL_RCC_OscConfig+0x2b8>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f7a:	f7fc ff7b 	bl	8002e74 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	e011      	b.n	8005fa6 <HAL_RCC_OscConfig+0x2ce>
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	42470000 	.word	0x42470000
 8005f8c:	42470e80 	.word	0x42470e80
 8005f90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f94:	f7fc ff6e 	bl	8002e74 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e106      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa6:	4b85      	ldr	r3, [pc, #532]	; (80061bc <HAL_RCC_OscConfig+0x4e4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d106      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x2f0>
 8005fba:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	4a80      	ldr	r2, [pc, #512]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fc0:	f043 0301 	orr.w	r3, r3, #1
 8005fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc6:	e01c      	b.n	8006002 <HAL_RCC_OscConfig+0x32a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d10c      	bne.n	8005fea <HAL_RCC_OscConfig+0x312>
 8005fd0:	4b7b      	ldr	r3, [pc, #492]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4a7a      	ldr	r2, [pc, #488]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	; 0x70
 8005fdc:	4b78      	ldr	r3, [pc, #480]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	4a77      	ldr	r2, [pc, #476]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe8:	e00b      	b.n	8006002 <HAL_RCC_OscConfig+0x32a>
 8005fea:	4b75      	ldr	r3, [pc, #468]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a74      	ldr	r2, [pc, #464]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff6:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a71      	ldr	r2, [pc, #452]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8005ffc:	f023 0304 	bic.w	r3, r3, #4
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d015      	beq.n	8006036 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fc ff33 	bl	8002e74 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fc ff2f 	bl	8002e74 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e0c5      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006028:	4b65      	ldr	r3, [pc, #404]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ee      	beq.n	8006012 <HAL_RCC_OscConfig+0x33a>
 8006034:	e014      	b.n	8006060 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006036:	f7fc ff1d 	bl	8002e74 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603c:	e00a      	b.n	8006054 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603e:	f7fc ff19 	bl	8002e74 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f241 3288 	movw	r2, #5000	; 0x1388
 800604c:	4293      	cmp	r3, r2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e0af      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006054:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1ee      	bne.n	800603e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d105      	bne.n	8006072 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006066:	4b56      	ldr	r3, [pc, #344]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	4a55      	ldr	r2, [pc, #340]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 800606c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 809b 	beq.w	80061b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800607c:	4b50      	ldr	r3, [pc, #320]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 030c 	and.w	r3, r3, #12
 8006084:	2b08      	cmp	r3, #8
 8006086:	d05c      	beq.n	8006142 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d141      	bne.n	8006114 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006090:	4b4c      	ldr	r3, [pc, #304]	; (80061c4 <HAL_RCC_OscConfig+0x4ec>)
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7fc feed 	bl	8002e74 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800609e:	f7fc fee9 	bl	8002e74 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e081      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	019b      	lsls	r3, r3, #6
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	3b01      	subs	r3, #1
 80060d6:	041b      	lsls	r3, r3, #16
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	061b      	lsls	r3, r3, #24
 80060e0:	4937      	ldr	r1, [pc, #220]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060e6:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <HAL_RCC_OscConfig+0x4ec>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fc fec2 	bl	8002e74 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fc febe 	bl	8002e74 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e056      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006106:	4b2e      	ldr	r3, [pc, #184]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x41c>
 8006112:	e04e      	b.n	80061b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006114:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <HAL_RCC_OscConfig+0x4ec>)
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611a:	f7fc feab 	bl	8002e74 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006122:	f7fc fea7 	bl	8002e74 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e03f      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f0      	bne.n	8006122 <HAL_RCC_OscConfig+0x44a>
 8006140:	e037      	b.n	80061b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e032      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800614e:	4b1c      	ldr	r3, [pc, #112]	; (80061c0 <HAL_RCC_OscConfig+0x4e8>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d028      	beq.n	80061ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006166:	429a      	cmp	r2, r3
 8006168:	d121      	bne.n	80061ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d11a      	bne.n	80061ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800617e:	4013      	ands	r3, r2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006184:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006186:	4293      	cmp	r3, r2
 8006188:	d111      	bne.n	80061ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	085b      	lsrs	r3, r3, #1
 8006196:	3b01      	subs	r3, #1
 8006198:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d107      	bne.n	80061ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d001      	beq.n	80061b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40007000 	.word	0x40007000
 80061c0:	40023800 	.word	0x40023800
 80061c4:	42470060 	.word	0x42470060

080061c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0cc      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061dc:	4b68      	ldr	r3, [pc, #416]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d90c      	bls.n	8006204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b65      	ldr	r3, [pc, #404]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b63      	ldr	r3, [pc, #396]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0b8      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d020      	beq.n	8006252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800621c:	4b59      	ldr	r3, [pc, #356]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a58      	ldr	r2, [pc, #352]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006234:	4b53      	ldr	r3, [pc, #332]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4a52      	ldr	r2, [pc, #328]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800623e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006240:	4b50      	ldr	r3, [pc, #320]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	494d      	ldr	r1, [pc, #308]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	4313      	orrs	r3, r2
 8006250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d044      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d107      	bne.n	8006276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006266:	4b47      	ldr	r3, [pc, #284]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d119      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e07f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d003      	beq.n	8006286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006282:	2b03      	cmp	r3, #3
 8006284:	d107      	bne.n	8006296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006286:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e06f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006296:	4b3b      	ldr	r3, [pc, #236]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e067      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062a6:	4b37      	ldr	r3, [pc, #220]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f023 0203 	bic.w	r2, r3, #3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4934      	ldr	r1, [pc, #208]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062b8:	f7fc fddc 	bl	8002e74 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	e00a      	b.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062c0:	f7fc fdd8 	bl	8002e74 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e04f      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062d6:	4b2b      	ldr	r3, [pc, #172]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 020c 	and.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d1eb      	bne.n	80062c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062e8:	4b25      	ldr	r3, [pc, #148]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d20c      	bcs.n	8006310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f6:	4b22      	ldr	r3, [pc, #136]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b20      	ldr	r3, [pc, #128]	; (8006380 <HAL_RCC_ClockConfig+0x1b8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e032      	b.n	8006376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800631c:	4b19      	ldr	r3, [pc, #100]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	4916      	ldr	r1, [pc, #88]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	490e      	ldr	r1, [pc, #56]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	4313      	orrs	r3, r2
 800634c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800634e:	f000 f821 	bl	8006394 <HAL_RCC_GetSysClockFreq>
 8006352:	4602      	mov	r2, r0
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	490a      	ldr	r1, [pc, #40]	; (8006388 <HAL_RCC_ClockConfig+0x1c0>)
 8006360:	5ccb      	ldrb	r3, [r1, r3]
 8006362:	fa22 f303 	lsr.w	r3, r2, r3
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCC_ClockConfig+0x1c8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fb fbbe 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40023c00 	.word	0x40023c00
 8006384:	40023800 	.word	0x40023800
 8006388:	0801d58c 	.word	0x0801d58c
 800638c:	20000000 	.word	0x20000000
 8006390:	2000004c 	.word	0x2000004c

08006394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006394:	b5b0      	push	{r4, r5, r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800639a:	2100      	movs	r1, #0
 800639c:	6079      	str	r1, [r7, #4]
 800639e:	2100      	movs	r1, #0
 80063a0:	60f9      	str	r1, [r7, #12]
 80063a2:	2100      	movs	r1, #0
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063a6:	2100      	movs	r1, #0
 80063a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063aa:	4952      	ldr	r1, [pc, #328]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063ac:	6889      	ldr	r1, [r1, #8]
 80063ae:	f001 010c 	and.w	r1, r1, #12
 80063b2:	2908      	cmp	r1, #8
 80063b4:	d00d      	beq.n	80063d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80063b6:	2908      	cmp	r1, #8
 80063b8:	f200 8094 	bhi.w	80064e4 <HAL_RCC_GetSysClockFreq+0x150>
 80063bc:	2900      	cmp	r1, #0
 80063be:	d002      	beq.n	80063c6 <HAL_RCC_GetSysClockFreq+0x32>
 80063c0:	2904      	cmp	r1, #4
 80063c2:	d003      	beq.n	80063cc <HAL_RCC_GetSysClockFreq+0x38>
 80063c4:	e08e      	b.n	80064e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063c6:	4b4c      	ldr	r3, [pc, #304]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80063c8:	60bb      	str	r3, [r7, #8]
       break;
 80063ca:	e08e      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063cc:	4b4b      	ldr	r3, [pc, #300]	; (80064fc <HAL_RCC_GetSysClockFreq+0x168>)
 80063ce:	60bb      	str	r3, [r7, #8]
      break;
 80063d0:	e08b      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063d2:	4948      	ldr	r1, [pc, #288]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063d4:	6849      	ldr	r1, [r1, #4]
 80063d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80063da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063dc:	4945      	ldr	r1, [pc, #276]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063de:	6849      	ldr	r1, [r1, #4]
 80063e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d024      	beq.n	8006432 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063e8:	4942      	ldr	r1, [pc, #264]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80063ea:	6849      	ldr	r1, [r1, #4]
 80063ec:	0989      	lsrs	r1, r1, #6
 80063ee:	4608      	mov	r0, r1
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80063f8:	f04f 0500 	mov.w	r5, #0
 80063fc:	ea00 0204 	and.w	r2, r0, r4
 8006400:	ea01 0305 	and.w	r3, r1, r5
 8006404:	493d      	ldr	r1, [pc, #244]	; (80064fc <HAL_RCC_GetSysClockFreq+0x168>)
 8006406:	fb01 f003 	mul.w	r0, r1, r3
 800640a:	2100      	movs	r1, #0
 800640c:	fb01 f102 	mul.w	r1, r1, r2
 8006410:	1844      	adds	r4, r0, r1
 8006412:	493a      	ldr	r1, [pc, #232]	; (80064fc <HAL_RCC_GetSysClockFreq+0x168>)
 8006414:	fba2 0101 	umull	r0, r1, r2, r1
 8006418:	1863      	adds	r3, r4, r1
 800641a:	4619      	mov	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	461a      	mov	r2, r3
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f7fa fbe0 	bl	8000be8 <__aeabi_uldivmod>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4613      	mov	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e04a      	b.n	80064c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006432:	4b30      	ldr	r3, [pc, #192]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	461a      	mov	r2, r3
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006442:	f04f 0100 	mov.w	r1, #0
 8006446:	ea02 0400 	and.w	r4, r2, r0
 800644a:	ea03 0501 	and.w	r5, r3, r1
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	014b      	lsls	r3, r1, #5
 800645c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006460:	0142      	lsls	r2, r0, #5
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	1b00      	subs	r0, r0, r4
 8006468:	eb61 0105 	sbc.w	r1, r1, r5
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	018b      	lsls	r3, r1, #6
 8006476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800647a:	0182      	lsls	r2, r0, #6
 800647c:	1a12      	subs	r2, r2, r0
 800647e:	eb63 0301 	sbc.w	r3, r3, r1
 8006482:	f04f 0000 	mov.w	r0, #0
 8006486:	f04f 0100 	mov.w	r1, #0
 800648a:	00d9      	lsls	r1, r3, #3
 800648c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006490:	00d0      	lsls	r0, r2, #3
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	1912      	adds	r2, r2, r4
 8006498:	eb45 0303 	adc.w	r3, r5, r3
 800649c:	f04f 0000 	mov.w	r0, #0
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	0299      	lsls	r1, r3, #10
 80064a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064aa:	0290      	lsls	r0, r2, #10
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4610      	mov	r0, r2
 80064b2:	4619      	mov	r1, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	f7fa fb94 	bl	8000be8 <__aeabi_uldivmod>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4613      	mov	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064c8:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	3301      	adds	r3, #1
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e0:	60bb      	str	r3, [r7, #8]
      break;
 80064e2:	e002      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80064e6:	60bb      	str	r3, [r7, #8]
      break;
 80064e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ea:	68bb      	ldr	r3, [r7, #8]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bdb0      	pop	{r4, r5, r7, pc}
 80064f4:	40023800 	.word	0x40023800
 80064f8:	00f42400 	.word	0x00f42400
 80064fc:	017d7840 	.word	0x017d7840

08006500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006504:	4b03      	ldr	r3, [pc, #12]	; (8006514 <HAL_RCC_GetHCLKFreq+0x14>)
 8006506:	681b      	ldr	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	20000000 	.word	0x20000000

08006518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800651c:	f7ff fff0 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	0a9b      	lsrs	r3, r3, #10
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	4903      	ldr	r1, [pc, #12]	; (800653c <HAL_RCC_GetPCLK1Freq+0x24>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40023800 	.word	0x40023800
 800653c:	0801d59c 	.word	0x0801d59c

08006540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006544:	f7ff ffdc 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006548:	4602      	mov	r2, r0
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	0b5b      	lsrs	r3, r3, #13
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006556:	5ccb      	ldrb	r3, [r1, r3]
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800655c:	4618      	mov	r0, r3
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40023800 	.word	0x40023800
 8006564:	0801d59c 	.word	0x0801d59c

08006568 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	220f      	movs	r2, #15
 8006576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006578:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <HAL_RCC_GetClockConfig+0x5c>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0203 	and.w	r2, r3, #3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006584:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_RCC_GetClockConfig+0x5c>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	08db      	lsrs	r3, r3, #3
 80065a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <HAL_RCC_GetClockConfig+0x60>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0207 	and.w	r2, r3, #7
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	601a      	str	r2, [r3, #0]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	40023c00 	.word	0x40023c00

080065cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e041      	b.n	8006662 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fe06 	bl	8002204 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f000 fc9c 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b01      	cmp	r3, #1
 800667e:	d001      	beq.n	8006684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e04e      	b.n	8006722 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0201 	orr.w	r2, r2, #1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <HAL_TIM_Base_Start_IT+0xc4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d022      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ae:	d01d      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <HAL_TIM_Base_Start_IT+0xc8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d018      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <HAL_TIM_Base_Start_IT+0xcc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <HAL_TIM_Base_Start_IT+0xd0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00e      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_TIM_Base_Start_IT+0xd4>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	; (8006744 <HAL_TIM_Base_Start_IT+0xd8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x80>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIM_Base_Start_IT+0xdc>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d111      	bne.n	8006710 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b06      	cmp	r3, #6
 80066fc:	d010      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0201 	orr.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800670e:	e007      	b.n	8006720 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40010000 	.word	0x40010000
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40010400 	.word	0x40010400
 8006744:	40014000 	.word	0x40014000
 8006748:	40001800 	.word	0x40001800

0800674c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e041      	b.n	80067e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f839 	bl	80067ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f000 fbdc 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e041      	b.n	8006894 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f839 	bl	800689c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3304      	adds	r3, #4
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f000 fb83 	bl	8006f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0202 	mvn.w	r2, #2
 80068dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fc fa68 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fb05 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fb0c 	bl	8006f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d122      	bne.n	8006960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d11b      	bne.n	8006960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0204 	mvn.w	r2, #4
 8006930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc fa3e 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
 800694c:	e005      	b.n	800695a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fadb 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fae2 	bl	8006f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b08      	cmp	r3, #8
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b08      	cmp	r3, #8
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0208 	mvn.w	r2, #8
 8006984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2204      	movs	r2, #4
 800698a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fc fa14 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fab1 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fab8 	bl	8006f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0310 	and.w	r3, r3, #16
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0210 	mvn.w	r2, #16
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2208      	movs	r2, #8
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fc f9ea 	bl	8002dc8 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa87 	bl	8006f0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa8e 	bl	8006f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10e      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d107      	bne.n	8006a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0201 	mvn.w	r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb f81a 	bl	8001a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	2b80      	cmp	r3, #128	; 0x80
 8006a40:	d10e      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d107      	bne.n	8006a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 ff60 	bl	8007920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d10e      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b40      	cmp	r3, #64	; 0x40
 8006a7a:	d107      	bne.n	8006a8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa53 	bl	8006f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	2b20      	cmp	r3, #32
 8006a98:	d10e      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d107      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f06f 0220 	mvn.w	r2, #32
 8006ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 ff2a 	bl	800790c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006acc:	2300      	movs	r3, #0
 8006ace:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_IC_ConfigChannel+0x1e>
 8006ada:	2302      	movs	r3, #2
 8006adc:	e088      	b.n	8006bf0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11b      	bne.n	8006b24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6818      	ldr	r0, [r3, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f000 fc74 	bl	80073e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 020c 	bic.w	r2, r2, #12
 8006b0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6999      	ldr	r1, [r3, #24]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	619a      	str	r2, [r3, #24]
 8006b22:	e060      	b.n	8006be6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d11c      	bne.n	8006b64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6819      	ldr	r1, [r3, #0]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f000 fcf8 	bl	800752e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	699a      	ldr	r2, [r3, #24]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6999      	ldr	r1, [r3, #24]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	021a      	lsls	r2, r3, #8
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	619a      	str	r2, [r3, #24]
 8006b62:	e040      	b.n	8006be6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d11b      	bne.n	8006ba2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f000 fd45 	bl	8007608 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 020c 	bic.w	r2, r2, #12
 8006b8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69d9      	ldr	r1, [r3, #28]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	61da      	str	r2, [r3, #28]
 8006ba0:	e021      	b.n	8006be6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d11c      	bne.n	8006be2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f000 fd62 	bl	8007680 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69d9      	ldr	r1, [r3, #28]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	61da      	str	r2, [r3, #28]
 8006be0:	e001      	b.n	8006be6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e0ae      	b.n	8006d74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	f200 809f 	bhi.w	8006d64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c61 	.word	0x08006c61
 8006c30:	08006d65 	.word	0x08006d65
 8006c34:	08006d65 	.word	0x08006d65
 8006c38:	08006d65 	.word	0x08006d65
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006d65 	.word	0x08006d65
 8006c44:	08006d65 	.word	0x08006d65
 8006c48:	08006d65 	.word	0x08006d65
 8006c4c:	08006ce3 	.word	0x08006ce3
 8006c50:	08006d65 	.word	0x08006d65
 8006c54:	08006d65 	.word	0x08006d65
 8006c58:	08006d65 	.word	0x08006d65
 8006c5c:	08006d23 	.word	0x08006d23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fa0e 	bl	8007088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0208 	orr.w	r2, r2, #8
 8006c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6999      	ldr	r1, [r3, #24]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	619a      	str	r2, [r3, #24]
      break;
 8006c9e:	e064      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa5e 	bl	8007168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6999      	ldr	r1, [r3, #24]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	021a      	lsls	r2, r3, #8
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	619a      	str	r2, [r3, #24]
      break;
 8006ce0:	e043      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fab3 	bl	8007254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0208 	orr.w	r2, r2, #8
 8006cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0204 	bic.w	r2, r2, #4
 8006d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69d9      	ldr	r1, [r3, #28]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	61da      	str	r2, [r3, #28]
      break;
 8006d20:	e023      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fb07 	bl	800733c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	021a      	lsls	r2, r3, #8
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	61da      	str	r2, [r3, #28]
      break;
 8006d62:	e002      	b.n	8006d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3718      	adds	r7, #24
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIM_ConfigClockSource+0x1c>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e0b4      	b.n	8006f02 <HAL_TIM_ConfigClockSource+0x186>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d03e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0xd4>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd6:	f200 8087 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	f000 8086 	beq.w	8006eee <HAL_TIM_ConfigClockSource+0x172>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de6:	d87f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b70      	cmp	r3, #112	; 0x70
 8006dea:	d01a      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0xa6>
 8006dec:	2b70      	cmp	r3, #112	; 0x70
 8006dee:	d87b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006df0:	2b60      	cmp	r3, #96	; 0x60
 8006df2:	d050      	beq.n	8006e96 <HAL_TIM_ConfigClockSource+0x11a>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d877      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006df8:	2b50      	cmp	r3, #80	; 0x50
 8006dfa:	d03c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0xfa>
 8006dfc:	2b50      	cmp	r3, #80	; 0x50
 8006dfe:	d873      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e00:	2b40      	cmp	r3, #64	; 0x40
 8006e02:	d058      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d86f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d064      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d86b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d060      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d867      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05c      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d05a      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8006e20:	e062      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6899      	ldr	r1, [r3, #8]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f000 fc7d 	bl	8007730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	609a      	str	r2, [r3, #8]
      break;
 8006e4e:	e04f      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f000 fc66 	bl	8007730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e72:	609a      	str	r2, [r3, #8]
      break;
 8006e74:	e03c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6859      	ldr	r1, [r3, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f000 fb24 	bl	80074d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2150      	movs	r1, #80	; 0x50
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fc33 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8006e94:	e02c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f000 fb80 	bl	80075a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2160      	movs	r1, #96	; 0x60
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fc23 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8006eb4:	e01c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f000 fb04 	bl	80074d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2140      	movs	r1, #64	; 0x40
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fc13 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8006ed4:	e00c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 fc0a 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e000      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a40      	ldr	r2, [pc, #256]	; (800705c <TIM_Base_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <TIM_Base_SetConfig+0x40>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f66:	d00f      	beq.n	8006f88 <TIM_Base_SetConfig+0x40>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a3d      	ldr	r2, [pc, #244]	; (8007060 <TIM_Base_SetConfig+0x118>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <TIM_Base_SetConfig+0x40>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a3c      	ldr	r2, [pc, #240]	; (8007064 <TIM_Base_SetConfig+0x11c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_Base_SetConfig+0x40>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a3b      	ldr	r2, [pc, #236]	; (8007068 <TIM_Base_SetConfig+0x120>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a3a      	ldr	r2, [pc, #232]	; (800706c <TIM_Base_SetConfig+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a2f      	ldr	r2, [pc, #188]	; (800705c <TIM_Base_SetConfig+0x114>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d02b      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d027      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	; (8007060 <TIM_Base_SetConfig+0x118>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d023      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a2b      	ldr	r2, [pc, #172]	; (8007064 <TIM_Base_SetConfig+0x11c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01f      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <TIM_Base_SetConfig+0x120>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01b      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a29      	ldr	r2, [pc, #164]	; (800706c <TIM_Base_SetConfig+0x124>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d017      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a28      	ldr	r2, [pc, #160]	; (8007070 <TIM_Base_SetConfig+0x128>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a27      	ldr	r2, [pc, #156]	; (8007074 <TIM_Base_SetConfig+0x12c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00f      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a26      	ldr	r2, [pc, #152]	; (8007078 <TIM_Base_SetConfig+0x130>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00b      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a25      	ldr	r2, [pc, #148]	; (800707c <TIM_Base_SetConfig+0x134>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d007      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a24      	ldr	r2, [pc, #144]	; (8007080 <TIM_Base_SetConfig+0x138>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d003      	beq.n	8006ffa <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a23      	ldr	r2, [pc, #140]	; (8007084 <TIM_Base_SetConfig+0x13c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d108      	bne.n	800700c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a0a      	ldr	r2, [pc, #40]	; (800705c <TIM_Base_SetConfig+0x114>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_Base_SetConfig+0xf8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a0c      	ldr	r2, [pc, #48]	; (800706c <TIM_Base_SetConfig+0x124>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d103      	bne.n	8007048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	615a      	str	r2, [r3, #20]
}
 800704e:	bf00      	nop
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	40010000 	.word	0x40010000
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	40000c00 	.word	0x40000c00
 800706c:	40010400 	.word	0x40010400
 8007070:	40014000 	.word	0x40014000
 8007074:	40014400 	.word	0x40014400
 8007078:	40014800 	.word	0x40014800
 800707c:	40001800 	.word	0x40001800
 8007080:	40001c00 	.word	0x40001c00
 8007084:	40002000 	.word	0x40002000

08007088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0201 	bic.w	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0303 	bic.w	r3, r3, #3
 80070be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f023 0302 	bic.w	r3, r3, #2
 80070d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a20      	ldr	r2, [pc, #128]	; (8007160 <TIM_OC1_SetConfig+0xd8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_OC1_SetConfig+0x64>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <TIM_OC1_SetConfig+0xdc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d10c      	bne.n	8007106 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f023 0308 	bic.w	r3, r3, #8
 80070f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f023 0304 	bic.w	r3, r3, #4
 8007104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a15      	ldr	r2, [pc, #84]	; (8007160 <TIM_OC1_SetConfig+0xd8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d003      	beq.n	8007116 <TIM_OC1_SetConfig+0x8e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a14      	ldr	r2, [pc, #80]	; (8007164 <TIM_OC1_SetConfig+0xdc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d111      	bne.n	800713a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800711c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	621a      	str	r2, [r3, #32]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40010000 	.word	0x40010000
 8007164:	40010400 	.word	0x40010400

08007168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f023 0210 	bic.w	r2, r3, #16
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f023 0320 	bic.w	r3, r3, #32
 80071b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	011b      	lsls	r3, r3, #4
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a22      	ldr	r2, [pc, #136]	; (800724c <TIM_OC2_SetConfig+0xe4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_OC2_SetConfig+0x68>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a21      	ldr	r2, [pc, #132]	; (8007250 <TIM_OC2_SetConfig+0xe8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10d      	bne.n	80071ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <TIM_OC2_SetConfig+0xe4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC2_SetConfig+0x94>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a16      	ldr	r2, [pc, #88]	; (8007250 <TIM_OC2_SetConfig+0xe8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d113      	bne.n	8007224 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40010400 	.word	0x40010400

08007254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800729c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a21      	ldr	r2, [pc, #132]	; (8007334 <TIM_OC3_SetConfig+0xe0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d003      	beq.n	80072ba <TIM_OC3_SetConfig+0x66>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a20      	ldr	r2, [pc, #128]	; (8007338 <TIM_OC3_SetConfig+0xe4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d10d      	bne.n	80072d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <TIM_OC3_SetConfig+0xe0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC3_SetConfig+0x92>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a15      	ldr	r2, [pc, #84]	; (8007338 <TIM_OC3_SetConfig+0xe4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d113      	bne.n	800730e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	621a      	str	r2, [r3, #32]
}
 8007328:	bf00      	nop
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40010000 	.word	0x40010000
 8007338:	40010400 	.word	0x40010400

0800733c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800736a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	031b      	lsls	r3, r3, #12
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a12      	ldr	r2, [pc, #72]	; (80073e0 <TIM_OC4_SetConfig+0xa4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC4_SetConfig+0x68>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <TIM_OC4_SetConfig+0xa8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d109      	bne.n	80073b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	019b      	lsls	r3, r3, #6
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40010400 	.word	0x40010400

080073e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0201 	bic.w	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <TIM_TI1_SetConfig+0xcc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01b      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741c:	d017      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <TIM_TI1_SetConfig+0xd0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a24      	ldr	r2, [pc, #144]	; (80074bc <TIM_TI1_SetConfig+0xd4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00f      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a23      	ldr	r2, [pc, #140]	; (80074c0 <TIM_TI1_SetConfig+0xd8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00b      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <TIM_TI1_SetConfig+0xdc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d007      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <TIM_TI1_SetConfig+0xe0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_TI1_SetConfig+0x66>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <TIM_TI1_SetConfig+0xe4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <TIM_TI1_SetConfig+0x6a>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <TIM_TI1_SetConfig+0x6c>
 8007452:	2300      	movs	r3, #0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f023 0303 	bic.w	r3, r3, #3
 800745e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4313      	orrs	r3, r2
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e003      	b.n	8007472 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f043 0301 	orr.w	r3, r3, #1
 8007470:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	b2db      	uxtb	r3, r3
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f023 030a 	bic.w	r3, r3, #10
 800748c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f003 030a 	and.w	r3, r3, #10
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40010000 	.word	0x40010000
 80074b8:	40000400 	.word	0x40000400
 80074bc:	40000800 	.word	0x40000800
 80074c0:	40000c00 	.word	0x40000c00
 80074c4:	40010400 	.word	0x40010400
 80074c8:	40014000 	.word	0x40014000
 80074cc:	40001800 	.word	0x40001800

080074d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f023 0201 	bic.w	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f023 030a 	bic.w	r3, r3, #10
 800750c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800752e:	b480      	push	{r7}
 8007530:	b087      	sub	sp, #28
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f023 0210 	bic.w	r2, r3, #16
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800755a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800756c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	031b      	lsls	r3, r3, #12
 8007572:	b29b      	uxth	r3, r3
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007580:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	621a      	str	r2, [r3, #32]
}
 800759c:	bf00      	nop
 800759e:	371c      	adds	r7, #28
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f023 0210 	bic.w	r2, r3, #16
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	031b      	lsls	r3, r3, #12
 80075d8:	697a      	ldr	r2, [r7, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	621a      	str	r2, [r3, #32]
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0303 	bic.w	r3, r3, #3
 8007634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	b2db      	uxtb	r3, r3
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007658:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	4313      	orrs	r3, r2
 8007666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	621a      	str	r2, [r3, #32]
}
 8007674:	bf00      	nop
 8007676:	371c      	adds	r7, #28
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	031b      	lsls	r3, r3, #12
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	031b      	lsls	r3, r3, #12
 80076d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	f043 0307 	orr.w	r3, r3, #7
 800771c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	609a      	str	r2, [r3, #8]
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800774a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	021a      	lsls	r2, r3, #8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	431a      	orrs	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4313      	orrs	r3, r2
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	609a      	str	r2, [r3, #8]
}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e05a      	b.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a21      	ldr	r2, [pc, #132]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d4:	d01d      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a17      	ldr	r2, [pc, #92]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a15      	ldr	r2, [pc, #84]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10c      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40001800 	.word	0x40001800

08007868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007880:	2302      	movs	r3, #2
 8007882:	e03d      	b.n	8007900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e03f      	b.n	80079c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fa fdcc 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2224      	movs	r2, #36	; 0x24
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fc71 	bl	8008260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800798c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800799c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b0ba      	sub	sp, #232	; 0xe8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10f      	bne.n	8007a36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <HAL_UART_IRQHandler+0x66>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb5b 	bl	80080ea <UART_Receive_IT>
      return;
 8007a34:	e256      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 80de 	beq.w	8007bfc <HAL_UART_IRQHandler+0x22c>
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80d1 	beq.w	8007bfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <HAL_UART_IRQHandler+0xae>
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d005      	beq.n	8007a7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f043 0201 	orr.w	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0304 	and.w	r3, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00b      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xd2>
 8007a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f043 0202 	orr.w	r2, r3, #2
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf6>
 8007aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d005      	beq.n	8007ac6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f043 0204 	orr.w	r2, r3, #4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d011      	beq.n	8007af6 <HAL_UART_IRQHandler+0x126>
 8007ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f043 0208 	orr.w	r2, r3, #8
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 81ed 	beq.w	8007eda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_UART_IRQHandler+0x14e>
 8007b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fae6 	bl	80080ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2301      	moveq	r3, #1
 8007b2e:	2300      	movne	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <HAL_UART_IRQHandler+0x17a>
 8007b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d04f      	beq.n	8007bea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f9ee 	bl	8007f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5a:	2b40      	cmp	r3, #64	; 0x40
 8007b5c:	d141      	bne.n	8007be2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3314      	adds	r3, #20
 8007b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1d9      	bne.n	8007b5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	4a7d      	ldr	r2, [pc, #500]	; (8007dac <HAL_UART_IRQHandler+0x3dc>)
 8007bb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fc f946 	bl	8003e50 <HAL_DMA_Abort_IT>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d016      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	e00e      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f990 	bl	8007f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e00a      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f98c 	bl	8007f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e006      	b.n	8007bf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f988 	bl	8007f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bf6:	e170      	b.n	8007eda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	bf00      	nop
    return;
 8007bfa:	e16e      	b.n	8007eda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	f040 814a 	bne.w	8007e9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f003 0310 	and.w	r3, r3, #16
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8143 	beq.w	8007e9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 813c 	beq.w	8007e9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	f040 80b4 	bne.w	8007db0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8140 	beq.w	8007ede <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c66:	429a      	cmp	r2, r3
 8007c68:	f080 8139 	bcs.w	8007ede <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7e:	f000 8088 	beq.w	8007d92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1d9      	bne.n	8007c82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3314      	adds	r3, #20
 8007cd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd8:	e853 3f00 	ldrex	r3, [r3]
 8007cdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3314      	adds	r3, #20
 8007cee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e1      	bne.n	8007cce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3314      	adds	r3, #20
 8007d10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3314      	adds	r3, #20
 8007d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e3      	bne.n	8007d0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	330c      	adds	r3, #12
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	330c      	adds	r3, #12
 8007d70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d74:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e3      	bne.n	8007d50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fb ffef 	bl	8003d70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f8b6 	bl	8007f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007da8:	e099      	b.n	8007ede <HAL_UART_IRQHandler+0x50e>
 8007daa:	bf00      	nop
 8007dac:	08007ff3 	.word	0x08007ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 808b 	beq.w	8007ee2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8086 	beq.w	8007ee2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	e853 3f00 	ldrex	r3, [r3]
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007dfa:	647a      	str	r2, [r7, #68]	; 0x44
 8007dfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e3      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3314      	adds	r3, #20
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f023 0301 	bic.w	r3, r3, #1
 8007e24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3314      	adds	r3, #20
 8007e2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e32:	633a      	str	r2, [r7, #48]	; 0x30
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e3      	bne.n	8007e0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	330c      	adds	r3, #12
 8007e5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	e853 3f00 	ldrex	r3, [r3]
 8007e62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0310 	bic.w	r3, r3, #16
 8007e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e78:	61fa      	str	r2, [r7, #28]
 8007e7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	69b9      	ldr	r1, [r7, #24]
 8007e7e:	69fa      	ldr	r2, [r7, #28]
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	617b      	str	r3, [r7, #20]
   return(result);
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e3      	bne.n	8007e54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f83e 	bl	8007f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e98:	e023      	b.n	8007ee2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d009      	beq.n	8007eba <HAL_UART_IRQHandler+0x4ea>
 8007ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8b1 	bl	800801a <UART_Transmit_IT>
    return;
 8007eb8:	e014      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x514>
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8f1 	bl	80080ba <UART_EndTransmit_IT>
    return;
 8007ed8:	e004      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
    return;
 8007eda:	bf00      	nop
 8007edc:	e002      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8007ede:	bf00      	nop
 8007ee0:	e000      	b.n	8007ee4 <HAL_UART_IRQHandler+0x514>
      return;
 8007ee2:	bf00      	nop
  }
}
 8007ee4:	37e8      	adds	r7, #232	; 0xe8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop

08007eec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b095      	sub	sp, #84	; 0x54
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	330c      	adds	r3, #12
 8007f52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f54:	643a      	str	r2, [r7, #64]	; 0x40
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e5      	bne.n	8007f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3314      	adds	r3, #20
 8007f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f023 0301 	bic.w	r3, r3, #1
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d119      	bne.n	8007fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f023 0310 	bic.w	r3, r3, #16
 8007fba:	647b      	str	r3, [r7, #68]	; 0x44
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fc4:	61ba      	str	r2, [r7, #24]
 8007fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6979      	ldr	r1, [r7, #20]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fe6:	bf00      	nop
 8007fe8:	3754      	adds	r7, #84	; 0x54
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b084      	sub	sp, #16
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff77 	bl	8007f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b21      	cmp	r3, #33	; 0x21
 800802c:	d13e      	bne.n	80080ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008036:	d114      	bne.n	8008062 <UART_Transmit_IT+0x48>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d110      	bne.n	8008062 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a1b      	ldr	r3, [r3, #32]
 8008044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	1c9a      	adds	r2, r3, #2
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	621a      	str	r2, [r3, #32]
 8008060:	e008      	b.n	8008074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6211      	str	r1, [r2, #32]
 800806c:	781a      	ldrb	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008078:	b29b      	uxth	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b29b      	uxth	r3, r3
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	4619      	mov	r1, r3
 8008082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10f      	bne.n	80080a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	e000      	b.n	80080ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080ac:	2302      	movs	r3, #2
  }
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7fa fcdc 	bl	8002a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b08c      	sub	sp, #48	; 0x30
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2b22      	cmp	r3, #34	; 0x22
 80080fc:	f040 80ab 	bne.w	8008256 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008108:	d117      	bne.n	800813a <UART_Receive_IT+0x50>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d113      	bne.n	800813a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008128:	b29a      	uxth	r2, r3
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	1c9a      	adds	r2, r3, #2
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
 8008138:	e026      	b.n	8008188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800814c:	d007      	beq.n	800815e <UART_Receive_IT+0x74>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <UART_Receive_IT+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d106      	bne.n	800816c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	b2da      	uxtb	r2, r3
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	e008      	b.n	800817e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	b2db      	uxtb	r3, r3
 8008174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008178:	b2da      	uxtb	r2, r3
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800818c:	b29b      	uxth	r3, r3
 800818e:	3b01      	subs	r3, #1
 8008190:	b29b      	uxth	r3, r3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008198:	2b00      	cmp	r3, #0
 800819a:	d15a      	bne.n	8008252 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0220 	bic.w	r2, r2, #32
 80081aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0201 	bic.w	r2, r2, #1
 80081ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2220      	movs	r2, #32
 80081d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d135      	bne.n	8008248 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	330c      	adds	r3, #12
 80081e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	613b      	str	r3, [r7, #16]
   return(result);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f023 0310 	bic.w	r3, r3, #16
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	330c      	adds	r3, #12
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	623a      	str	r2, [r7, #32]
 8008204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	69f9      	ldr	r1, [r7, #28]
 8008208:	6a3a      	ldr	r2, [r7, #32]
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e5      	bne.n	80081e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0310 	and.w	r3, r3, #16
 8008220:	2b10      	cmp	r3, #16
 8008222:	d10a      	bne.n	800823a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7ff fe67 	bl	8007f14 <HAL_UARTEx_RxEventCallback>
 8008246:	e002      	b.n	800824e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fe4f 	bl	8007eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e002      	b.n	8008258 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e000      	b.n	8008258 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008256:	2302      	movs	r3, #2
  }
}
 8008258:	4618      	mov	r0, r3
 800825a:	3730      	adds	r7, #48	; 0x30
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	b09f      	sub	sp, #124	; 0x7c
 8008266:	af00      	add	r7, sp, #0
 8008268:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800826a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008276:	68d9      	ldr	r1, [r3, #12]
 8008278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	ea40 0301 	orr.w	r3, r0, r1
 8008280:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	431a      	orrs	r2, r3
 800828c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	431a      	orrs	r2, r3
 8008292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	4313      	orrs	r3, r2
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800829a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082a4:	f021 010c 	bic.w	r1, r1, #12
 80082a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ae:	430b      	orrs	r3, r1
 80082b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082be:	6999      	ldr	r1, [r3, #24]
 80082c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	ea40 0301 	orr.w	r3, r0, r1
 80082c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4bc5      	ldr	r3, [pc, #788]	; (80085e4 <UART_SetConfig+0x384>)
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d004      	beq.n	80082de <UART_SetConfig+0x7e>
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4bc3      	ldr	r3, [pc, #780]	; (80085e8 <UART_SetConfig+0x388>)
 80082da:	429a      	cmp	r2, r3
 80082dc:	d103      	bne.n	80082e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082de:	f7fe f92f 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 80082e2:	6778      	str	r0, [r7, #116]	; 0x74
 80082e4:	e002      	b.n	80082ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082e6:	f7fe f917 	bl	8006518 <HAL_RCC_GetPCLK1Freq>
 80082ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f4:	f040 80b6 	bne.w	8008464 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fa:	461c      	mov	r4, r3
 80082fc:	f04f 0500 	mov.w	r5, #0
 8008300:	4622      	mov	r2, r4
 8008302:	462b      	mov	r3, r5
 8008304:	1891      	adds	r1, r2, r2
 8008306:	6439      	str	r1, [r7, #64]	; 0x40
 8008308:	415b      	adcs	r3, r3
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
 800830c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008310:	1912      	adds	r2, r2, r4
 8008312:	eb45 0303 	adc.w	r3, r5, r3
 8008316:	f04f 0000 	mov.w	r0, #0
 800831a:	f04f 0100 	mov.w	r1, #0
 800831e:	00d9      	lsls	r1, r3, #3
 8008320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008324:	00d0      	lsls	r0, r2, #3
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	1911      	adds	r1, r2, r4
 800832c:	6639      	str	r1, [r7, #96]	; 0x60
 800832e:	416b      	adcs	r3, r5
 8008330:	667b      	str	r3, [r7, #100]	; 0x64
 8008332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	461a      	mov	r2, r3
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	1891      	adds	r1, r2, r2
 800833e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008340:	415b      	adcs	r3, r3
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008348:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800834c:	f7f8 fc4c 	bl	8000be8 <__aeabi_uldivmod>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	4ba5      	ldr	r3, [pc, #660]	; (80085ec <UART_SetConfig+0x38c>)
 8008356:	fba3 2302 	umull	r2, r3, r3, r2
 800835a:	095b      	lsrs	r3, r3, #5
 800835c:	011e      	lsls	r6, r3, #4
 800835e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008360:	461c      	mov	r4, r3
 8008362:	f04f 0500 	mov.w	r5, #0
 8008366:	4622      	mov	r2, r4
 8008368:	462b      	mov	r3, r5
 800836a:	1891      	adds	r1, r2, r2
 800836c:	6339      	str	r1, [r7, #48]	; 0x30
 800836e:	415b      	adcs	r3, r3
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008376:	1912      	adds	r2, r2, r4
 8008378:	eb45 0303 	adc.w	r3, r5, r3
 800837c:	f04f 0000 	mov.w	r0, #0
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	00d9      	lsls	r1, r3, #3
 8008386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800838a:	00d0      	lsls	r0, r2, #3
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	1911      	adds	r1, r2, r4
 8008392:	65b9      	str	r1, [r7, #88]	; 0x58
 8008394:	416b      	adcs	r3, r5
 8008396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	461a      	mov	r2, r3
 800839e:	f04f 0300 	mov.w	r3, #0
 80083a2:	1891      	adds	r1, r2, r2
 80083a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80083a6:	415b      	adcs	r3, r3
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80083b2:	f7f8 fc19 	bl	8000be8 <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b8c      	ldr	r3, [pc, #560]	; (80085ec <UART_SetConfig+0x38c>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	; 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	3332      	adds	r3, #50	; 0x32
 80083ce:	4a87      	ldr	r2, [pc, #540]	; (80085ec <UART_SetConfig+0x38c>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	005b      	lsls	r3, r3, #1
 80083d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083dc:	441e      	add	r6, r3
 80083de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e0:	4618      	mov	r0, r3
 80083e2:	f04f 0100 	mov.w	r1, #0
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	1894      	adds	r4, r2, r2
 80083ec:	623c      	str	r4, [r7, #32]
 80083ee:	415b      	adcs	r3, r3
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
 80083f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083f6:	1812      	adds	r2, r2, r0
 80083f8:	eb41 0303 	adc.w	r3, r1, r3
 80083fc:	f04f 0400 	mov.w	r4, #0
 8008400:	f04f 0500 	mov.w	r5, #0
 8008404:	00dd      	lsls	r5, r3, #3
 8008406:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800840a:	00d4      	lsls	r4, r2, #3
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	1814      	adds	r4, r2, r0
 8008412:	653c      	str	r4, [r7, #80]	; 0x50
 8008414:	414b      	adcs	r3, r1
 8008416:	657b      	str	r3, [r7, #84]	; 0x54
 8008418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	461a      	mov	r2, r3
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	1891      	adds	r1, r2, r2
 8008424:	61b9      	str	r1, [r7, #24]
 8008426:	415b      	adcs	r3, r3
 8008428:	61fb      	str	r3, [r7, #28]
 800842a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800842e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008432:	f7f8 fbd9 	bl	8000be8 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4b6c      	ldr	r3, [pc, #432]	; (80085ec <UART_SetConfig+0x38c>)
 800843c:	fba3 1302 	umull	r1, r3, r3, r2
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	2164      	movs	r1, #100	; 0x64
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	3332      	adds	r3, #50	; 0x32
 800844e:	4a67      	ldr	r2, [pc, #412]	; (80085ec <UART_SetConfig+0x38c>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	f003 0207 	and.w	r2, r3, #7
 800845a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4432      	add	r2, r6
 8008460:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008462:	e0b9      	b.n	80085d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008466:	461c      	mov	r4, r3
 8008468:	f04f 0500 	mov.w	r5, #0
 800846c:	4622      	mov	r2, r4
 800846e:	462b      	mov	r3, r5
 8008470:	1891      	adds	r1, r2, r2
 8008472:	6139      	str	r1, [r7, #16]
 8008474:	415b      	adcs	r3, r3
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800847c:	1912      	adds	r2, r2, r4
 800847e:	eb45 0303 	adc.w	r3, r5, r3
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f04f 0100 	mov.w	r1, #0
 800848a:	00d9      	lsls	r1, r3, #3
 800848c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008490:	00d0      	lsls	r0, r2, #3
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	eb12 0804 	adds.w	r8, r2, r4
 800849a:	eb43 0905 	adc.w	r9, r3, r5
 800849e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f04f 0100 	mov.w	r1, #0
 80084a8:	f04f 0200 	mov.w	r2, #0
 80084ac:	f04f 0300 	mov.w	r3, #0
 80084b0:	008b      	lsls	r3, r1, #2
 80084b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084b6:	0082      	lsls	r2, r0, #2
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb94 	bl	8000be8 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4b49      	ldr	r3, [pc, #292]	; (80085ec <UART_SetConfig+0x38c>)
 80084c6:	fba3 2302 	umull	r2, r3, r3, r2
 80084ca:	095b      	lsrs	r3, r3, #5
 80084cc:	011e      	lsls	r6, r3, #4
 80084ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d0:	4618      	mov	r0, r3
 80084d2:	f04f 0100 	mov.w	r1, #0
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	1894      	adds	r4, r2, r2
 80084dc:	60bc      	str	r4, [r7, #8]
 80084de:	415b      	adcs	r3, r3
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084e6:	1812      	adds	r2, r2, r0
 80084e8:	eb41 0303 	adc.w	r3, r1, r3
 80084ec:	f04f 0400 	mov.w	r4, #0
 80084f0:	f04f 0500 	mov.w	r5, #0
 80084f4:	00dd      	lsls	r5, r3, #3
 80084f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084fa:	00d4      	lsls	r4, r2, #3
 80084fc:	4622      	mov	r2, r4
 80084fe:	462b      	mov	r3, r5
 8008500:	1814      	adds	r4, r2, r0
 8008502:	64bc      	str	r4, [r7, #72]	; 0x48
 8008504:	414b      	adcs	r3, r1
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	4618      	mov	r0, r3
 800850e:	f04f 0100 	mov.w	r1, #0
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	f04f 0300 	mov.w	r3, #0
 800851a:	008b      	lsls	r3, r1, #2
 800851c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008520:	0082      	lsls	r2, r0, #2
 8008522:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008526:	f7f8 fb5f 	bl	8000be8 <__aeabi_uldivmod>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	4b2f      	ldr	r3, [pc, #188]	; (80085ec <UART_SetConfig+0x38c>)
 8008530:	fba3 1302 	umull	r1, r3, r3, r2
 8008534:	095b      	lsrs	r3, r3, #5
 8008536:	2164      	movs	r1, #100	; 0x64
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	3332      	adds	r3, #50	; 0x32
 8008542:	4a2a      	ldr	r2, [pc, #168]	; (80085ec <UART_SetConfig+0x38c>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800854e:	441e      	add	r6, r3
 8008550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008552:	4618      	mov	r0, r3
 8008554:	f04f 0100 	mov.w	r1, #0
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	1894      	adds	r4, r2, r2
 800855e:	603c      	str	r4, [r7, #0]
 8008560:	415b      	adcs	r3, r3
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008568:	1812      	adds	r2, r2, r0
 800856a:	eb41 0303 	adc.w	r3, r1, r3
 800856e:	f04f 0400 	mov.w	r4, #0
 8008572:	f04f 0500 	mov.w	r5, #0
 8008576:	00dd      	lsls	r5, r3, #3
 8008578:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800857c:	00d4      	lsls	r4, r2, #3
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	eb12 0a00 	adds.w	sl, r2, r0
 8008586:	eb43 0b01 	adc.w	fp, r3, r1
 800858a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f04f 0100 	mov.w	r1, #0
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	008b      	lsls	r3, r1, #2
 800859e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085a2:	0082      	lsls	r2, r0, #2
 80085a4:	4650      	mov	r0, sl
 80085a6:	4659      	mov	r1, fp
 80085a8:	f7f8 fb1e 	bl	8000be8 <__aeabi_uldivmod>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <UART_SetConfig+0x38c>)
 80085b2:	fba3 1302 	umull	r1, r3, r3, r2
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	2164      	movs	r1, #100	; 0x64
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	3332      	adds	r3, #50	; 0x32
 80085c4:	4a09      	ldr	r2, [pc, #36]	; (80085ec <UART_SetConfig+0x38c>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	f003 020f 	and.w	r2, r3, #15
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4432      	add	r2, r6
 80085d6:	609a      	str	r2, [r3, #8]
}
 80085d8:	bf00      	nop
 80085da:	377c      	adds	r7, #124	; 0x7c
 80085dc:	46bd      	mov	sp, r7
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	bf00      	nop
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40011400 	.word	0x40011400
 80085ec:	51eb851f 	.word	0x51eb851f

080085f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80085f6:	2100      	movs	r1, #0
 80085f8:	2000      	movs	r0, #0
 80085fa:	f004 fbff 	bl	800cdfc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80085fe:	4b2a      	ldr	r3, [pc, #168]	; (80086a8 <MX_LWIP_Init+0xb8>)
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8008604:	4b29      	ldr	r3, [pc, #164]	; (80086ac <MX_LWIP_Init+0xbc>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <MX_LWIP_Init+0xc0>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008610:	4b28      	ldr	r3, [pc, #160]	; (80086b4 <MX_LWIP_Init+0xc4>)
 8008612:	9302      	str	r3, [sp, #8]
 8008614:	4b28      	ldr	r3, [pc, #160]	; (80086b8 <MX_LWIP_Init+0xc8>)
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <MX_LWIP_Init+0xc0>)
 800861e:	4a23      	ldr	r2, [pc, #140]	; (80086ac <MX_LWIP_Init+0xbc>)
 8008620:	4921      	ldr	r1, [pc, #132]	; (80086a8 <MX_LWIP_Init+0xb8>)
 8008622:	4826      	ldr	r0, [pc, #152]	; (80086bc <MX_LWIP_Init+0xcc>)
 8008624:	f005 f96e 	bl	800d904 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008628:	4824      	ldr	r0, [pc, #144]	; (80086bc <MX_LWIP_Init+0xcc>)
 800862a:	f005 fb25 	bl	800dc78 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800862e:	4b23      	ldr	r3, [pc, #140]	; (80086bc <MX_LWIP_Init+0xcc>)
 8008630:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008634:	089b      	lsrs	r3, r3, #2
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008640:	481e      	ldr	r0, [pc, #120]	; (80086bc <MX_LWIP_Init+0xcc>)
 8008642:	f005 fb29 	bl	800dc98 <netif_set_up>
 8008646:	e002      	b.n	800864e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008648:	481c      	ldr	r0, [pc, #112]	; (80086bc <MX_LWIP_Init+0xcc>)
 800864a:	f005 fb91 	bl	800dd70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800864e:	491c      	ldr	r1, [pc, #112]	; (80086c0 <MX_LWIP_Init+0xd0>)
 8008650:	481a      	ldr	r0, [pc, #104]	; (80086bc <MX_LWIP_Init+0xcc>)
 8008652:	f005 fc27 	bl	800dea4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8008656:	2200      	movs	r2, #0
 8008658:	2101      	movs	r1, #1
 800865a:	2001      	movs	r0, #1
 800865c:	f000 fea6 	bl	80093ac <osSemaphoreNew>
 8008660:	4603      	mov	r3, r0
 8008662:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <MX_LWIP_Init+0xd4>)
 8008664:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <MX_LWIP_Init+0xd8>)
 8008668:	4a14      	ldr	r2, [pc, #80]	; (80086bc <MX_LWIP_Init+0xcc>)
 800866a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800866c:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <MX_LWIP_Init+0xd4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <MX_LWIP_Init+0xd8>)
 8008672:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008674:	2224      	movs	r2, #36	; 0x24
 8008676:	2100      	movs	r1, #0
 8008678:	4814      	ldr	r0, [pc, #80]	; (80086cc <MX_LWIP_Init+0xdc>)
 800867a:	f010 fdb2 	bl	80191e2 <memset>
  attributes.name = "LinkThr";
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <MX_LWIP_Init+0xdc>)
 8008680:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <MX_LWIP_Init+0xe0>)
 8008682:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008684:	4b11      	ldr	r3, [pc, #68]	; (80086cc <MX_LWIP_Init+0xdc>)
 8008686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800868a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800868c:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <MX_LWIP_Init+0xdc>)
 800868e:	2210      	movs	r2, #16
 8008690:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8008692:	4a0e      	ldr	r2, [pc, #56]	; (80086cc <MX_LWIP_Init+0xdc>)
 8008694:	490c      	ldr	r1, [pc, #48]	; (80086c8 <MX_LWIP_Init+0xd8>)
 8008696:	480f      	ldr	r0, [pc, #60]	; (80086d4 <MX_LWIP_Init+0xe4>)
 8008698:	f000 fccd 	bl	8009036 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800869c:	4807      	ldr	r0, [pc, #28]	; (80086bc <MX_LWIP_Init+0xcc>)
 800869e:	f00c fd63 	bl	8015168 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80086a2:	bf00      	nop
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20006810 	.word	0x20006810
 80086ac:	20006814 	.word	0x20006814
 80086b0:	20006818 	.word	0x20006818
 80086b4:	0800cd39 	.word	0x0800cd39
 80086b8:	08008d01 	.word	0x08008d01
 80086bc:	200067d8 	.word	0x200067d8
 80086c0:	08008de5 	.word	0x08008de5
 80086c4:	200000f0 	.word	0x200000f0
 80086c8:	200067ac 	.word	0x200067ac
 80086cc:	200067b4 	.word	0x200067b4
 80086d0:	0801a598 	.word	0x0801a598
 80086d4:	08008d6d 	.word	0x08008d6d

080086d8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08e      	sub	sp, #56	; 0x38
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	605a      	str	r2, [r3, #4]
 80086ea:	609a      	str	r2, [r3, #8]
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a4a      	ldr	r2, [pc, #296]	; (8008820 <HAL_ETH_MspInit+0x148>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	f040 808d 	bne.w	8008816 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80086fc:	2300      	movs	r3, #0
 80086fe:	623b      	str	r3, [r7, #32]
 8008700:	4b48      	ldr	r3, [pc, #288]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	4a47      	ldr	r2, [pc, #284]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800870a:	6313      	str	r3, [r2, #48]	; 0x30
 800870c:	4b45      	ldr	r3, [pc, #276]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008714:	623b      	str	r3, [r7, #32]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	2300      	movs	r3, #0
 800871a:	61fb      	str	r3, [r7, #28]
 800871c:	4b41      	ldr	r3, [pc, #260]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800871e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008720:	4a40      	ldr	r2, [pc, #256]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008726:	6313      	str	r3, [r2, #48]	; 0x30
 8008728:	4b3e      	ldr	r3, [pc, #248]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	4b3a      	ldr	r3, [pc, #232]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	4a39      	ldr	r2, [pc, #228]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800873e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008742:	6313      	str	r3, [r2, #48]	; 0x30
 8008744:	4b37      	ldr	r3, [pc, #220]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	4b33      	ldr	r3, [pc, #204]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	4a32      	ldr	r2, [pc, #200]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800875a:	f043 0304 	orr.w	r3, r3, #4
 800875e:	6313      	str	r3, [r2, #48]	; 0x30
 8008760:	4b30      	ldr	r3, [pc, #192]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	f003 0304 	and.w	r3, r3, #4
 8008768:	617b      	str	r3, [r7, #20]
 800876a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800876c:	2300      	movs	r3, #0
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	4a2b      	ldr	r2, [pc, #172]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	6313      	str	r3, [r2, #48]	; 0x30
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800877e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008788:	2300      	movs	r3, #0
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	4b25      	ldr	r3, [pc, #148]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	4a24      	ldr	r2, [pc, #144]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 8008792:	f043 0302 	orr.w	r3, r3, #2
 8008796:	6313      	str	r3, [r2, #48]	; 0x30
 8008798:	4b22      	ldr	r3, [pc, #136]	; (8008824 <HAL_ETH_MspInit+0x14c>)
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80087a4:	2332      	movs	r3, #50	; 0x32
 80087a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a8:	2302      	movs	r3, #2
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087b0:	2303      	movs	r3, #3
 80087b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087b4:	230b      	movs	r3, #11
 80087b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087bc:	4619      	mov	r1, r3
 80087be:	481a      	ldr	r0, [pc, #104]	; (8008828 <HAL_ETH_MspInit+0x150>)
 80087c0:	f7fc ff78 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80087c4:	2386      	movs	r3, #134	; 0x86
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c8:	2302      	movs	r3, #2
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087d0:	2303      	movs	r3, #3
 80087d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087d4:	230b      	movs	r3, #11
 80087d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087dc:	4619      	mov	r1, r3
 80087de:	4813      	ldr	r0, [pc, #76]	; (800882c <HAL_ETH_MspInit+0x154>)
 80087e0:	f7fc ff68 	bl	80056b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80087e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ea:	2302      	movs	r3, #2
 80087ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f2:	2303      	movs	r3, #3
 80087f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80087f6:	230b      	movs	r3, #11
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087fe:	4619      	mov	r1, r3
 8008800:	480b      	ldr	r0, [pc, #44]	; (8008830 <HAL_ETH_MspInit+0x158>)
 8008802:	f7fc ff57 	bl	80056b4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008806:	2200      	movs	r2, #0
 8008808:	2105      	movs	r1, #5
 800880a:	203d      	movs	r0, #61	; 0x3d
 800880c:	f7fb f980 	bl	8003b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008810:	203d      	movs	r0, #61	; 0x3d
 8008812:	f7fb f999 	bl	8003b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008816:	bf00      	nop
 8008818:	3738      	adds	r7, #56	; 0x38
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40028000 	.word	0x40028000
 8008824:	40023800 	.word	0x40023800
 8008828:	40020800 	.word	0x40020800
 800882c:	40020000 	.word	0x40020000
 8008830:	40020400 	.word	0x40020400

08008834 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <HAL_ETH_RxCpltCallback+0x1c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fe8f 	bl	8009564 <osSemaphoreRelease>
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200000f4 	.word	0x200000f4

08008854 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b090      	sub	sp, #64	; 0x40
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800885c:	2300      	movs	r3, #0
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008860:	4b5d      	ldr	r3, [pc, #372]	; (80089d8 <low_level_init+0x184>)
 8008862:	4a5e      	ldr	r2, [pc, #376]	; (80089dc <low_level_init+0x188>)
 8008864:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008866:	4b5c      	ldr	r3, [pc, #368]	; (80089d8 <low_level_init+0x184>)
 8008868:	2201      	movs	r2, #1
 800886a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800886c:	4b5a      	ldr	r3, [pc, #360]	; (80089d8 <low_level_init+0x184>)
 800886e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008872:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008874:	4b58      	ldr	r3, [pc, #352]	; (80089d8 <low_level_init+0x184>)
 8008876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800887a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800887c:	4b56      	ldr	r3, [pc, #344]	; (80089d8 <low_level_init+0x184>)
 800887e:	2201      	movs	r2, #1
 8008880:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008882:	2300      	movs	r3, #0
 8008884:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8008886:	2380      	movs	r3, #128	; 0x80
 8008888:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800888a:	23e1      	movs	r3, #225	; 0xe1
 800888c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8008892:	2300      	movs	r3, #0
 8008894:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8008896:	2300      	movs	r3, #0
 8008898:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800889a:	4a4f      	ldr	r2, [pc, #316]	; (80089d8 <low_level_init+0x184>)
 800889c:	f107 030c 	add.w	r3, r7, #12
 80088a0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80088a2:	4b4d      	ldr	r3, [pc, #308]	; (80089d8 <low_level_init+0x184>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80088a8:	4b4b      	ldr	r3, [pc, #300]	; (80089d8 <low_level_init+0x184>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80088ae:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <low_level_init+0x184>)
 80088b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80088b4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80088b6:	4848      	ldr	r0, [pc, #288]	; (80089d8 <low_level_init+0x184>)
 80088b8:	f7fb fd56 	bl	8004368 <HAL_ETH_Init>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80088c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d108      	bne.n	80088dc <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088d0:	f043 0304 	orr.w	r3, r3, #4
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80088dc:	2304      	movs	r3, #4
 80088de:	4a40      	ldr	r2, [pc, #256]	; (80089e0 <low_level_init+0x18c>)
 80088e0:	4940      	ldr	r1, [pc, #256]	; (80089e4 <low_level_init+0x190>)
 80088e2:	483d      	ldr	r0, [pc, #244]	; (80089d8 <low_level_init+0x184>)
 80088e4:	f7fb fedc 	bl	80046a0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80088e8:	2304      	movs	r3, #4
 80088ea:	4a3f      	ldr	r2, [pc, #252]	; (80089e8 <low_level_init+0x194>)
 80088ec:	493f      	ldr	r1, [pc, #252]	; (80089ec <low_level_init+0x198>)
 80088ee:	483a      	ldr	r0, [pc, #232]	; (80089d8 <low_level_init+0x184>)
 80088f0:	f7fb ff3f 	bl	8004772 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2206      	movs	r2, #6
 80088f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80088fc:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <low_level_init+0x184>)
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008908:	4b33      	ldr	r3, [pc, #204]	; (80089d8 <low_level_init+0x184>)
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	785a      	ldrb	r2, [r3, #1]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008914:	4b30      	ldr	r3, [pc, #192]	; (80089d8 <low_level_init+0x184>)
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	789a      	ldrb	r2, [r3, #2]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008920:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <low_level_init+0x184>)
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	78da      	ldrb	r2, [r3, #3]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800892c:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <low_level_init+0x184>)
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	791a      	ldrb	r2, [r3, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008938:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <low_level_init+0x184>)
 800893a:	695b      	ldr	r3, [r3, #20]
 800893c:	795a      	ldrb	r2, [r3, #5]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800894a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008952:	f043 030a 	orr.w	r3, r3, #10
 8008956:	b2da      	uxtb	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800895e:	2200      	movs	r2, #0
 8008960:	2101      	movs	r1, #1
 8008962:	2001      	movs	r0, #1
 8008964:	f000 fd22 	bl	80093ac <osSemaphoreNew>
 8008968:	4603      	mov	r3, r0
 800896a:	4a21      	ldr	r2, [pc, #132]	; (80089f0 <low_level_init+0x19c>)
 800896c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800896e:	f107 0314 	add.w	r3, r7, #20
 8008972:	2224      	movs	r2, #36	; 0x24
 8008974:	2100      	movs	r1, #0
 8008976:	4618      	mov	r0, r3
 8008978:	f010 fc33 	bl	80191e2 <memset>
  attributes.name = "EthIf";
 800897c:	4b1d      	ldr	r3, [pc, #116]	; (80089f4 <low_level_init+0x1a0>)
 800897e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008980:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008984:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8008986:	2330      	movs	r3, #48	; 0x30
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800898a:	f107 0314 	add.w	r3, r7, #20
 800898e:	461a      	mov	r2, r3
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4819      	ldr	r0, [pc, #100]	; (80089f8 <low_level_init+0x1a4>)
 8008994:	f000 fb4f 	bl	8009036 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008998:	480f      	ldr	r0, [pc, #60]	; (80089d8 <low_level_init+0x184>)
 800899a:	f7fc fa12 	bl	8004dc2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800899e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089a2:	461a      	mov	r2, r3
 80089a4:	211d      	movs	r1, #29
 80089a6:	480c      	ldr	r0, [pc, #48]	; (80089d8 <low_level_init+0x184>)
 80089a8:	f7fc f93d 	bl	8004c26 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	f043 030b 	orr.w	r3, r3, #11
 80089b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80089b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b6:	461a      	mov	r2, r3
 80089b8:	211d      	movs	r1, #29
 80089ba:	4807      	ldr	r0, [pc, #28]	; (80089d8 <low_level_init+0x184>)
 80089bc:	f7fc f99b 	bl	8004cf6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80089c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089c4:	461a      	mov	r2, r3
 80089c6:	211d      	movs	r1, #29
 80089c8:	4803      	ldr	r0, [pc, #12]	; (80089d8 <low_level_init+0x184>)
 80089ca:	f7fc f92c 	bl	8004c26 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80089ce:	bf00      	nop
 80089d0:	3740      	adds	r7, #64	; 0x40
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200080ec 	.word	0x200080ec
 80089dc:	40028000 	.word	0x40028000
 80089e0:	20008134 	.word	0x20008134
 80089e4:	2000681c 	.word	0x2000681c
 80089e8:	2000689c 	.word	0x2000689c
 80089ec:	2000806c 	.word	0x2000806c
 80089f0:	200000f4 	.word	0x200000f4
 80089f4:	0801a5a0 	.word	0x0801a5a0
 80089f8:	08008ca1 	.word	0x08008ca1

080089fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008a06:	4b4b      	ldr	r3, [pc, #300]	; (8008b34 <low_level_output+0x138>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008a1e:	4b45      	ldr	r3, [pc, #276]	; (8008b34 <low_level_output+0x138>)
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	623b      	str	r3, [r7, #32]
 8008a2c:	e05a      	b.n	8008ae4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da03      	bge.n	8008a3e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008a36:	23f8      	movs	r3, #248	; 0xf8
 8008a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008a3c:	e05c      	b.n	8008af8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008a3e:	6a3b      	ldr	r3, [r7, #32]
 8008a40:	895b      	ldrh	r3, [r3, #10]
 8008a42:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008a48:	e02f      	b.n	8008aaa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	18d0      	adds	r0, r2, r3
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	18d1      	adds	r1, r2, r3
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008a5e:	3304      	adds	r3, #4
 8008a60:	461a      	mov	r2, r3
 8008a62:	f010 fbb0 	bl	80191c6 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da03      	bge.n	8008a7c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008a74:	23f8      	movs	r3, #248	; 0xf8
 8008a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008a7a:	e03d      	b.n	8008af8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008a8c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008a98:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008aa4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d8c8      	bhi.n	8008a4a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	18d0      	adds	r0, r2, r3
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f010 fb7c 	bl	80191c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	623b      	str	r3, [r7, #32]
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1a1      	bne.n	8008a2e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008aea:	6979      	ldr	r1, [r7, #20]
 8008aec:	4811      	ldr	r0, [pc, #68]	; (8008b34 <low_level_output+0x138>)
 8008aee:	f7fb fead 	bl	800484c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008af8:	4b0e      	ldr	r3, [pc, #56]	; (8008b34 <low_level_output+0x138>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b00:	3314      	adds	r3, #20
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00d      	beq.n	8008b28 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <low_level_output+0x138>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b14:	3314      	adds	r3, #20
 8008b16:	2220      	movs	r2, #32
 8008b18:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <low_level_output+0x138>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b22:	3304      	adds	r3, #4
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3728      	adds	r7, #40	; 0x28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	200080ec 	.word	0x200080ec

08008b38 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08c      	sub	sp, #48	; 0x30
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008b5c:	484f      	ldr	r0, [pc, #316]	; (8008c9c <low_level_input+0x164>)
 8008b5e:	f7fb ff5f 	bl	8004a20 <HAL_ETH_GetReceivedFrame_IT>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <low_level_input+0x34>

    return NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e092      	b.n	8008c92 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008b6c:	4b4b      	ldr	r3, [pc, #300]	; (8008c9c <low_level_input+0x164>)
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b70:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008b72:	4b4a      	ldr	r3, [pc, #296]	; (8008c9c <low_level_input+0x164>)
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008b7e:	89fb      	ldrh	r3, [r7, #14]
 8008b80:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008b84:	4619      	mov	r1, r3
 8008b86:	2000      	movs	r0, #0
 8008b88:	f005 fa56 	bl	800e038 <pbuf_alloc>
 8008b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d04b      	beq.n	8008c2c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008b94:	4b41      	ldr	r3, [pc, #260]	; (8008c9c <low_level_input+0x164>)
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba2:	e040      	b.n	8008c26 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	895b      	ldrh	r3, [r3, #10]
 8008ba8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008bae:	e021      	b.n	8008bf4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	18d0      	adds	r0, r2, r3
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	18d1      	adds	r1, r2, r3
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f010 fafd 	bl	80191c6 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008be2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008bee:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d8d6      	bhi.n	8008bb0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	18d0      	adds	r0, r2, r3
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	4413      	add	r3, r2
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4619      	mov	r1, r3
 8008c14:	f010 fad7 	bl	80191c6 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1bb      	bne.n	8008ba4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008c2c:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <low_level_input+0x164>)
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008c32:	2300      	movs	r3, #0
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	e00b      	b.n	8008c50 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <low_level_input+0x164>)
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d3ee      	bcc.n	8008c38 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008c5a:	4b10      	ldr	r3, [pc, #64]	; (8008c9c <low_level_input+0x164>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008c60:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <low_level_input+0x164>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c68:	3314      	adds	r3, #20
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <low_level_input+0x164>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7c:	3314      	adds	r3, #20
 8008c7e:	2280      	movs	r2, #128	; 0x80
 8008c80:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008c82:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <low_level_input+0x164>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3730      	adds	r7, #48	; 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200080ec 	.word	0x200080ec

08008ca0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008cac:	4b12      	ldr	r3, [pc, #72]	; (8008cf8 <ethernetif_input+0x58>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fc03 	bl	80094c0 <osSemaphoreAcquire>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1f5      	bne.n	8008cac <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008cc0:	480e      	ldr	r0, [pc, #56]	; (8008cfc <ethernetif_input+0x5c>)
 8008cc2:	f010 f8e1 	bl	8018e88 <sys_mutex_lock>
        p = low_level_input( netif );
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff ff36 	bl	8008b38 <low_level_input>
 8008ccc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00a      	beq.n	8008cea <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	68b8      	ldr	r0, [r7, #8]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d002      	beq.n	8008cea <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f005 fc8b 	bl	800e600 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008cea:	4804      	ldr	r0, [pc, #16]	; (8008cfc <ethernetif_input+0x5c>)
 8008cec:	f010 f8db 	bl	8018ea6 <sys_mutex_unlock>
      } while(p!=NULL);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e4      	bne.n	8008cc0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008cf6:	e7d9      	b.n	8008cac <ethernetif_input+0xc>
 8008cf8:	200000f4 	.word	0x200000f4
 8008cfc:	20009944 	.word	0x20009944

08008d00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d106      	bne.n	8008d1c <ethernetif_init+0x1c>
 8008d0e:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <ethernetif_init+0x48>)
 8008d10:	f44f 720c 	mov.w	r2, #560	; 0x230
 8008d14:	490d      	ldr	r1, [pc, #52]	; (8008d4c <ethernetif_init+0x4c>)
 8008d16:	480e      	ldr	r0, [pc, #56]	; (8008d50 <ethernetif_init+0x50>)
 8008d18:	f010 fac6 	bl	80192a8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2273      	movs	r2, #115	; 0x73
 8008d20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2274      	movs	r2, #116	; 0x74
 8008d28:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <ethernetif_init+0x54>)
 8008d30:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <ethernetif_init+0x58>)
 8008d36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fd8b 	bl	8008854 <low_level_init>

  return ERR_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	0801a5a8 	.word	0x0801a5a8
 8008d4c:	0801a5c4 	.word	0x0801a5c4
 8008d50:	0801a5d4 	.word	0x0801a5d4
 8008d54:	08017035 	.word	0x08017035
 8008d58:	080089fd 	.word	0x080089fd

08008d5c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008d60:	f7fa f888 	bl	8002e74 <HAL_GetTick>
 8008d64:	4603      	mov	r3, r0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	bd80      	pop	{r7, pc}
	...

08008d6c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008d7c:	f107 0308 	add.w	r3, r7, #8
 8008d80:	461a      	mov	r2, r3
 8008d82:	2101      	movs	r1, #1
 8008d84:	4816      	ldr	r0, [pc, #88]	; (8008de0 <ethernetif_set_link+0x74>)
 8008d86:	f7fb ff4e 	bl	8004c26 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d9a:	f003 0304 	and.w	r3, r3, #4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d108      	bne.n	8008db4 <ethernetif_set_link+0x48>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f005 f811 	bl	800ddd4 <netif_set_link_up>
 8008db2:	e011      	b.n	8008dd8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dbc:	089b      	lsrs	r3, r3, #2
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <ethernetif_set_link+0x6c>
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d104      	bne.n	8008dd8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f005 f836 	bl	800de44 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008dd8:	20c8      	movs	r0, #200	; 0xc8
 8008dda:	f000 f9be 	bl	800915a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008dde:	e7cd      	b.n	8008d7c <ethernetif_set_link+0x10>
 8008de0:	200080ec 	.word	0x200080ec

08008de4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008dfa:	089b      	lsrs	r3, r3, #2
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d05d      	beq.n	8008ec2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008e06:	4b34      	ldr	r3, [pc, #208]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d03f      	beq.n	8008e8e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e12:	2100      	movs	r1, #0
 8008e14:	4830      	ldr	r0, [pc, #192]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e16:	f7fb ff6e 	bl	8004cf6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008e1a:	f7fa f82b 	bl	8002e74 <HAL_GetTick>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008e22:	f107 0308 	add.w	r3, r7, #8
 8008e26:	461a      	mov	r2, r3
 8008e28:	2101      	movs	r1, #1
 8008e2a:	482b      	ldr	r0, [pc, #172]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e2c:	f7fb fefb 	bl	8004c26 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008e30:	f7fa f820 	bl	8002e74 <HAL_GetTick>
 8008e34:	4602      	mov	r2, r0
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e3e:	d828      	bhi.n	8008e92 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0eb      	beq.n	8008e22 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008e4a:	f107 0308 	add.w	r3, r7, #8
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2110      	movs	r1, #16
 8008e52:	4821      	ldr	r0, [pc, #132]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e54:	f7fb fee7 	bl	8004c26 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d004      	beq.n	8008e6c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008e62:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e68:	60da      	str	r2, [r3, #12]
 8008e6a:	e002      	b.n	8008e72 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008e6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008e7c:	4b16      	ldr	r3, [pc, #88]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	609a      	str	r2, [r3, #8]
 8008e82:	e016      	b.n	8008eb2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	e011      	b.n	8008eb2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008e8e:	bf00      	nop
 8008e90:	e000      	b.n	8008e94 <ethernetif_update_config+0xb0>
          goto error;
 8008e92:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008e94:	4b10      	ldr	r3, [pc, #64]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	08db      	lsrs	r3, r3, #3
 8008e9a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2100      	movs	r1, #0
 8008eac:	480a      	ldr	r0, [pc, #40]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008eae:	f7fb ff22 	bl	8004cf6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4808      	ldr	r0, [pc, #32]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008eb6:	f7fb ffe3 	bl	8004e80 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008eba:	4807      	ldr	r0, [pc, #28]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008ebc:	f7fb ff81 	bl	8004dc2 <HAL_ETH_Start>
 8008ec0:	e002      	b.n	8008ec8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <ethernetif_update_config+0xf4>)
 8008ec4:	f7fb ffac 	bl	8004e20 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f807 	bl	8008edc <ethernetif_notify_conn_changed>
}
 8008ece:	bf00      	nop
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	200080ec 	.word	0x200080ec

08008edc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <__NVIC_SetPriority>:
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	db0a      	blt.n	8008f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	490c      	ldr	r1, [pc, #48]	; (8008f3c <__NVIC_SetPriority+0x4c>)
 8008f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f0e:	0112      	lsls	r2, r2, #4
 8008f10:	b2d2      	uxtb	r2, r2
 8008f12:	440b      	add	r3, r1
 8008f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f18:	e00a      	b.n	8008f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	4908      	ldr	r1, [pc, #32]	; (8008f40 <__NVIC_SetPriority+0x50>)
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	3b04      	subs	r3, #4
 8008f28:	0112      	lsls	r2, r2, #4
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	761a      	strb	r2, [r3, #24]
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	e000e100 	.word	0xe000e100
 8008f40:	e000ed00 	.word	0xe000ed00

08008f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <SysTick_Handler+0x1c>)
 8008f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f4c:	f002 fc96 	bl	800b87c <xTaskGetSchedulerState>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d001      	beq.n	8008f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f56:	f003 fb7f 	bl	800c658 <xPortSysTickHandler>
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	e000e010 	.word	0xe000e010

08008f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f06f 0004 	mvn.w	r0, #4
 8008f6e:	f7ff ffbf 	bl	8008ef0 <__NVIC_SetPriority>
#endif
}
 8008f72:	bf00      	nop
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f7e:	f3ef 8305 	mrs	r3, IPSR
 8008f82:	603b      	str	r3, [r7, #0]
  return(result);
 8008f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f8a:	f06f 0305 	mvn.w	r3, #5
 8008f8e:	607b      	str	r3, [r7, #4]
 8008f90:	e00c      	b.n	8008fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <osKernelInitialize+0x44>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <osKernelInitialize+0x44>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	607b      	str	r3, [r7, #4]
 8008fa4:	e002      	b.n	8008fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fac:	687b      	ldr	r3, [r7, #4]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	200000f8 	.word	0x200000f8

08008fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc6:	f3ef 8305 	mrs	r3, IPSR
 8008fca:	603b      	str	r3, [r7, #0]
  return(result);
 8008fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8008fd2:	f06f 0305 	mvn.w	r3, #5
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	e010      	b.n	8008ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <osKernelStart+0x48>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d109      	bne.n	8008ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008fe2:	f7ff ffbf 	bl	8008f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	; (8009008 <osKernelStart+0x48>)
 8008fe8:	2202      	movs	r2, #2
 8008fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008fec:	f001 ffc8 	bl	800af80 <vTaskStartScheduler>
      stat = osOK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	e002      	b.n	8008ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ffc:	687b      	ldr	r3, [r7, #4]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200000f8 	.word	0x200000f8

0800900c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009012:	f3ef 8305 	mrs	r3, IPSR
 8009016:	603b      	str	r3, [r7, #0]
  return(result);
 8009018:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800901e:	f002 f8db 	bl	800b1d8 <xTaskGetTickCountFromISR>
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	e002      	b.n	800902c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8009026:	f002 f8c7 	bl	800b1b8 <xTaskGetTickCount>
 800902a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800902c:	687b      	ldr	r3, [r7, #4]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009036:	b580      	push	{r7, lr}
 8009038:	b08e      	sub	sp, #56	; 0x38
 800903a:	af04      	add	r7, sp, #16
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009046:	f3ef 8305 	mrs	r3, IPSR
 800904a:	617b      	str	r3, [r7, #20]
  return(result);
 800904c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800904e:	2b00      	cmp	r3, #0
 8009050:	d17e      	bne.n	8009150 <osThreadNew+0x11a>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d07b      	beq.n	8009150 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800905c:	2318      	movs	r3, #24
 800905e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d045      	beq.n	80090fc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <osThreadNew+0x48>
        name = attr->name;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d008      	beq.n	80090a4 <osThreadNew+0x6e>
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b38      	cmp	r3, #56	; 0x38
 8009096:	d805      	bhi.n	80090a4 <osThreadNew+0x6e>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <osThreadNew+0x72>
        return (NULL);
 80090a4:	2300      	movs	r3, #0
 80090a6:	e054      	b.n	8009152 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	089b      	lsrs	r3, r3, #2
 80090b6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00e      	beq.n	80090de <osThreadNew+0xa8>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	2bbb      	cmp	r3, #187	; 0xbb
 80090c6:	d90a      	bls.n	80090de <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d006      	beq.n	80090de <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <osThreadNew+0xa8>
        mem = 1;
 80090d8:	2301      	movs	r3, #1
 80090da:	61bb      	str	r3, [r7, #24]
 80090dc:	e010      	b.n	8009100 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10c      	bne.n	8009100 <osThreadNew+0xca>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d108      	bne.n	8009100 <osThreadNew+0xca>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d104      	bne.n	8009100 <osThreadNew+0xca>
          mem = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	e001      	b.n	8009100 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d110      	bne.n	8009128 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800910e:	9202      	str	r2, [sp, #8]
 8009110:	9301      	str	r3, [sp, #4]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6a3a      	ldr	r2, [r7, #32]
 800911a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f001 fd43 	bl	800aba8 <xTaskCreateStatic>
 8009122:	4603      	mov	r3, r0
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e013      	b.n	8009150 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d110      	bne.n	8009150 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	b29a      	uxth	r2, r3
 8009132:	f107 0310 	add.w	r3, r7, #16
 8009136:	9301      	str	r3, [sp, #4]
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 fd8e 	bl	800ac62 <xTaskCreate>
 8009146:	4603      	mov	r3, r0
 8009148:	2b01      	cmp	r3, #1
 800914a:	d001      	beq.n	8009150 <osThreadNew+0x11a>
            hTask = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009150:	693b      	ldr	r3, [r7, #16]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3728      	adds	r7, #40	; 0x28
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	60bb      	str	r3, [r7, #8]
  return(result);
 8009168:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <osDelay+0x1c>
    stat = osErrorISR;
 800916e:	f06f 0305 	mvn.w	r3, #5
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e007      	b.n	8009186 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 fec9 	bl	800af18 <vTaskDelay>
    }
  }

  return (stat);
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009198:	2300      	movs	r3, #0
 800919a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800919c:	f3ef 8305 	mrs	r3, IPSR
 80091a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80091a2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d174      	bne.n	8009292 <osMutexNew+0x102>
    if (attr != NULL) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	e001      	b.n	80091ba <osMutexNew+0x2a>
    } else {
      type = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <osMutexNew+0x3a>
      rmtx = 1U;
 80091c4:	2301      	movs	r3, #1
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e001      	b.n	80091ce <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d15c      	bne.n	8009292 <osMutexNew+0x102>
      mem = -1;
 80091d8:	f04f 33ff 	mov.w	r3, #4294967295
 80091dc:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d015      	beq.n	8009210 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <osMutexNew+0x6a>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	2b4f      	cmp	r3, #79	; 0x4f
 80091f2:	d902      	bls.n	80091fa <osMutexNew+0x6a>
          mem = 1;
 80091f4:	2301      	movs	r3, #1
 80091f6:	613b      	str	r3, [r7, #16]
 80091f8:	e00c      	b.n	8009214 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d108      	bne.n	8009214 <osMutexNew+0x84>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <osMutexNew+0x84>
            mem = 0;
 800920a:	2300      	movs	r3, #0
 800920c:	613b      	str	r3, [r7, #16]
 800920e:	e001      	b.n	8009214 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d112      	bne.n	8009240 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	4619      	mov	r1, r3
 8009226:	2004      	movs	r0, #4
 8009228:	f000 fd69 	bl	8009cfe <xQueueCreateMutexStatic>
 800922c:	61f8      	str	r0, [r7, #28]
 800922e:	e016      	b.n	800925e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	4619      	mov	r1, r3
 8009236:	2001      	movs	r0, #1
 8009238:	f000 fd61 	bl	8009cfe <xQueueCreateMutexStatic>
 800923c:	61f8      	str	r0, [r7, #28]
 800923e:	e00e      	b.n	800925e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800924c:	2004      	movs	r0, #4
 800924e:	f000 fd3e 	bl	8009cce <xQueueCreateMutex>
 8009252:	61f8      	str	r0, [r7, #28]
 8009254:	e003      	b.n	800925e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009256:	2001      	movs	r0, #1
 8009258:	f000 fd39 	bl	8009cce <xQueueCreateMutex>
 800925c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00c      	beq.n	800927e <osMutexNew+0xee>
        if (attr != NULL) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <osMutexNew+0xe2>
          name = attr->name;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	e001      	b.n	8009276 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	69f8      	ldr	r0, [r7, #28]
 800927a:	f001 fc0d 	bl	800aa98 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d006      	beq.n	8009292 <osMutexNew+0x102>
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009292:	69fb      	ldr	r3, [r7, #28]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3720      	adds	r7, #32
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f003 0301 	and.w	r3, r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ba:	f3ef 8305 	mrs	r3, IPSR
 80092be:	60bb      	str	r3, [r7, #8]
  return(result);
 80092c0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <osMutexAcquire+0x32>
    stat = osErrorISR;
 80092c6:	f06f 0305 	mvn.w	r3, #5
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	e02c      	b.n	8009328 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d103      	bne.n	80092dc <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80092d4:	f06f 0303 	mvn.w	r3, #3
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e025      	b.n	8009328 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d011      	beq.n	8009306 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6938      	ldr	r0, [r7, #16]
 80092e6:	f000 fd59 	bl	8009d9c <xQueueTakeMutexRecursive>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d01b      	beq.n	8009328 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80092f6:	f06f 0301 	mvn.w	r3, #1
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e014      	b.n	8009328 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80092fe:	f06f 0302 	mvn.w	r3, #2
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e010      	b.n	8009328 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6938      	ldr	r0, [r7, #16]
 800930a:	f001 f8ed 	bl	800a4e8 <xQueueSemaphoreTake>
 800930e:	4603      	mov	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d009      	beq.n	8009328 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d003      	beq.n	8009322 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800931a:	f06f 0301 	mvn.w	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e002      	b.n	8009328 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009322:	f06f 0302 	mvn.w	r3, #2
 8009326:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8009328:	697b      	ldr	r3, [r7, #20]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934e:	f3ef 8305 	mrs	r3, IPSR
 8009352:	60bb      	str	r3, [r7, #8]
  return(result);
 8009354:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <osMutexRelease+0x30>
    stat = osErrorISR;
 800935a:	f06f 0305 	mvn.w	r3, #5
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e01f      	b.n	80093a2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d103      	bne.n	8009370 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009368:	f06f 0303 	mvn.w	r3, #3
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	e018      	b.n	80093a2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d009      	beq.n	800938a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009376:	6938      	ldr	r0, [r7, #16]
 8009378:	f000 fcdc 	bl	8009d34 <xQueueGiveMutexRecursive>
 800937c:	4603      	mov	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d00f      	beq.n	80093a2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009382:	f06f 0302 	mvn.w	r3, #2
 8009386:	617b      	str	r3, [r7, #20]
 8009388:	e00b      	b.n	80093a2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800938a:	2300      	movs	r3, #0
 800938c:	2200      	movs	r2, #0
 800938e:	2100      	movs	r1, #0
 8009390:	6938      	ldr	r0, [r7, #16]
 8009392:	f000 fda3 	bl	8009edc <xQueueGenericSend>
 8009396:	4603      	mov	r3, r0
 8009398:	2b01      	cmp	r3, #1
 800939a:	d002      	beq.n	80093a2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800939c:	f06f 0302 	mvn.w	r3, #2
 80093a0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80093a2:	697b      	ldr	r3, [r7, #20]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08a      	sub	sp, #40	; 0x28
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093bc:	f3ef 8305 	mrs	r3, IPSR
 80093c0:	613b      	str	r3, [r7, #16]
  return(result);
 80093c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d175      	bne.n	80094b4 <osSemaphoreNew+0x108>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d072      	beq.n	80094b4 <osSemaphoreNew+0x108>
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d86e      	bhi.n	80094b4 <osSemaphoreNew+0x108>
    mem = -1;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d015      	beq.n	800940e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d006      	beq.n	80093f8 <osSemaphoreNew+0x4c>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	2b4f      	cmp	r3, #79	; 0x4f
 80093f0:	d902      	bls.n	80093f8 <osSemaphoreNew+0x4c>
        mem = 1;
 80093f2:	2301      	movs	r3, #1
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	e00c      	b.n	8009412 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d108      	bne.n	8009412 <osSemaphoreNew+0x66>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d104      	bne.n	8009412 <osSemaphoreNew+0x66>
          mem = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	e001      	b.n	8009412 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800940e:	2300      	movs	r3, #0
 8009410:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d04c      	beq.n	80094b4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d128      	bne.n	8009472 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d10a      	bne.n	800943c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2203      	movs	r2, #3
 800942c:	9200      	str	r2, [sp, #0]
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	2001      	movs	r0, #1
 8009434:	f000 fb5c 	bl	8009af0 <xQueueGenericCreateStatic>
 8009438:	61f8      	str	r0, [r7, #28]
 800943a:	e005      	b.n	8009448 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800943c:	2203      	movs	r2, #3
 800943e:	2100      	movs	r1, #0
 8009440:	2001      	movs	r0, #1
 8009442:	f000 fbcd 	bl	8009be0 <xQueueGenericCreate>
 8009446:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d022      	beq.n	8009494 <osSemaphoreNew+0xe8>
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d01f      	beq.n	8009494 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009454:	2300      	movs	r3, #0
 8009456:	2200      	movs	r2, #0
 8009458:	2100      	movs	r1, #0
 800945a:	69f8      	ldr	r0, [r7, #28]
 800945c:	f000 fd3e 	bl	8009edc <xQueueGenericSend>
 8009460:	4603      	mov	r3, r0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d016      	beq.n	8009494 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009466:	69f8      	ldr	r0, [r7, #28]
 8009468:	f001 f9ca 	bl	800a800 <vQueueDelete>
            hSemaphore = NULL;
 800946c:	2300      	movs	r3, #0
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	e010      	b.n	8009494 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d108      	bne.n	800948a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	461a      	mov	r2, r3
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fcc1 	bl	8009e08 <xQueueCreateCountingSemaphoreStatic>
 8009486:	61f8      	str	r0, [r7, #28]
 8009488:	e004      	b.n	8009494 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fcf2 	bl	8009e76 <xQueueCreateCountingSemaphore>
 8009492:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00c      	beq.n	80094b4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e001      	b.n	80094ac <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80094a8:	2300      	movs	r3, #0
 80094aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80094ac:	6979      	ldr	r1, [r7, #20]
 80094ae:	69f8      	ldr	r0, [r7, #28]
 80094b0:	f001 faf2 	bl	800aa98 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80094b4:	69fb      	ldr	r3, [r7, #28]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
	...

080094c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d103      	bne.n	80094e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80094d8:	f06f 0303 	mvn.w	r3, #3
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e039      	b.n	8009554 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80094f2:	f06f 0303 	mvn.w	r3, #3
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	e02c      	b.n	8009554 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80094fe:	f107 0308 	add.w	r3, r7, #8
 8009502:	461a      	mov	r2, r3
 8009504:	2100      	movs	r1, #0
 8009506:	6938      	ldr	r0, [r7, #16]
 8009508:	f001 f8fa 	bl	800a700 <xQueueReceiveFromISR>
 800950c:	4603      	mov	r3, r0
 800950e:	2b01      	cmp	r3, #1
 8009510:	d003      	beq.n	800951a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009512:	f06f 0302 	mvn.w	r3, #2
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e01c      	b.n	8009554 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d019      	beq.n	8009554 <osSemaphoreAcquire+0x94>
 8009520:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <osSemaphoreAcquire+0xa0>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	e010      	b.n	8009554 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6938      	ldr	r0, [r7, #16]
 8009536:	f000 ffd7 	bl	800a4e8 <xQueueSemaphoreTake>
 800953a:	4603      	mov	r3, r0
 800953c:	2b01      	cmp	r3, #1
 800953e:	d009      	beq.n	8009554 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009546:	f06f 0301 	mvn.w	r3, #1
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e002      	b.n	8009554 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800954e:	f06f 0302 	mvn.w	r3, #2
 8009552:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009554:	697b      	ldr	r3, [r7, #20]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009570:	2300      	movs	r3, #0
 8009572:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800957a:	f06f 0303 	mvn.w	r3, #3
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e02c      	b.n	80095dc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009582:	f3ef 8305 	mrs	r3, IPSR
 8009586:	60fb      	str	r3, [r7, #12]
  return(result);
 8009588:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01a      	beq.n	80095c4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800958e:	2300      	movs	r3, #0
 8009590:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4619      	mov	r1, r3
 8009598:	6938      	ldr	r0, [r7, #16]
 800959a:	f000 fe38 	bl	800a20e <xQueueGiveFromISR>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d003      	beq.n	80095ac <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80095a4:	f06f 0302 	mvn.w	r3, #2
 80095a8:	617b      	str	r3, [r7, #20]
 80095aa:	e017      	b.n	80095dc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d014      	beq.n	80095dc <osSemaphoreRelease+0x78>
 80095b2:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <osSemaphoreRelease+0x84>)
 80095b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	e00b      	b.n	80095dc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80095c4:	2300      	movs	r3, #0
 80095c6:	2200      	movs	r2, #0
 80095c8:	2100      	movs	r1, #0
 80095ca:	6938      	ldr	r0, [r7, #16]
 80095cc:	f000 fc86 	bl	8009edc <xQueueGenericSend>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d002      	beq.n	80095dc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80095d6:	f06f 0302 	mvn.w	r3, #2
 80095da:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80095dc:	697b      	ldr	r3, [r7, #20]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	e000ed04 	.word	0xe000ed04

080095ec <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	; 0x28
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fc:	f3ef 8305 	mrs	r3, IPSR
 8009600:	613b      	str	r3, [r7, #16]
  return(result);
 8009602:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009604:	2b00      	cmp	r3, #0
 8009606:	d15f      	bne.n	80096c8 <osMessageQueueNew+0xdc>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d05c      	beq.n	80096c8 <osMessageQueueNew+0xdc>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d059      	beq.n	80096c8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009614:	f04f 33ff 	mov.w	r3, #4294967295
 8009618:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d029      	beq.n	8009674 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d012      	beq.n	800964e <osMessageQueueNew+0x62>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	2b4f      	cmp	r3, #79	; 0x4f
 800962e:	d90e      	bls.n	800964e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	429a      	cmp	r2, r3
 8009646:	d302      	bcc.n	800964e <osMessageQueueNew+0x62>
        mem = 1;
 8009648:	2301      	movs	r3, #1
 800964a:	61bb      	str	r3, [r7, #24]
 800964c:	e014      	b.n	8009678 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d110      	bne.n	8009678 <osMessageQueueNew+0x8c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009662:	2b00      	cmp	r3, #0
 8009664:	d108      	bne.n	8009678 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <osMessageQueueNew+0x8c>
          mem = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	61bb      	str	r3, [r7, #24]
 8009672:	e001      	b.n	8009678 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d10b      	bne.n	8009696 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2100      	movs	r1, #0
 8009688:	9100      	str	r1, [sp, #0]
 800968a:	68b9      	ldr	r1, [r7, #8]
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f000 fa2f 	bl	8009af0 <xQueueGenericCreateStatic>
 8009692:	61f8      	str	r0, [r7, #28]
 8009694:	e008      	b.n	80096a8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d105      	bne.n	80096a8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800969c:	2200      	movs	r2, #0
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fa9d 	bl	8009be0 <xQueueGenericCreate>
 80096a6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00c      	beq.n	80096c8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <osMessageQueueNew+0xd0>
        name = attr->name;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	617b      	str	r3, [r7, #20]
 80096ba:	e001      	b.n	80096c0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80096c0:	6979      	ldr	r1, [r7, #20]
 80096c2:	69f8      	ldr	r0, [r7, #28]
 80096c4:	f001 f9e8 	bl	800aa98 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80096c8:	69fb      	ldr	r3, [r7, #28]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ec:	f3ef 8305 	mrs	r3, IPSR
 80096f0:	617b      	str	r3, [r7, #20]
  return(result);
 80096f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d028      	beq.n	800974a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <osMessageQueuePut+0x36>
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <osMessageQueuePut+0x36>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800970a:	f06f 0303 	mvn.w	r3, #3
 800970e:	61fb      	str	r3, [r7, #28]
 8009710:	e038      	b.n	8009784 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009716:	f107 0210 	add.w	r2, r7, #16
 800971a:	2300      	movs	r3, #0
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	69b8      	ldr	r0, [r7, #24]
 8009720:	f000 fcda 	bl	800a0d8 <xQueueGenericSendFromISR>
 8009724:	4603      	mov	r3, r0
 8009726:	2b01      	cmp	r3, #1
 8009728:	d003      	beq.n	8009732 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800972a:	f06f 0302 	mvn.w	r3, #2
 800972e:	61fb      	str	r3, [r7, #28]
 8009730:	e028      	b.n	8009784 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d025      	beq.n	8009784 <osMessageQueuePut+0xb0>
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <osMessageQueuePut+0xbc>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	e01c      	b.n	8009784 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d002      	beq.n	8009756 <osMessageQueuePut+0x82>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009756:	f06f 0303 	mvn.w	r3, #3
 800975a:	61fb      	str	r3, [r7, #28]
 800975c:	e012      	b.n	8009784 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800975e:	2300      	movs	r3, #0
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	69b8      	ldr	r0, [r7, #24]
 8009766:	f000 fbb9 	bl	8009edc <xQueueGenericSend>
 800976a:	4603      	mov	r3, r0
 800976c:	2b01      	cmp	r3, #1
 800976e:	d009      	beq.n	8009784 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009776:	f06f 0301 	mvn.w	r3, #1
 800977a:	61fb      	str	r3, [r7, #28]
 800977c:	e002      	b.n	8009784 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800977e:	f06f 0302 	mvn.w	r3, #2
 8009782:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009784:	69fb      	ldr	r3, [r7, #28]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3720      	adds	r7, #32
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
 80097a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80097a6:	2300      	movs	r3, #0
 80097a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097aa:	f3ef 8305 	mrs	r3, IPSR
 80097ae:	617b      	str	r3, [r7, #20]
  return(result);
 80097b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d028      	beq.n	8009808 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <osMessageQueueGet+0x34>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <osMessageQueueGet+0x34>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80097c8:	f06f 0303 	mvn.w	r3, #3
 80097cc:	61fb      	str	r3, [r7, #28]
 80097ce:	e037      	b.n	8009840 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80097d0:	2300      	movs	r3, #0
 80097d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80097d4:	f107 0310 	add.w	r3, r7, #16
 80097d8:	461a      	mov	r2, r3
 80097da:	68b9      	ldr	r1, [r7, #8]
 80097dc:	69b8      	ldr	r0, [r7, #24]
 80097de:	f000 ff8f 	bl	800a700 <xQueueReceiveFromISR>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d003      	beq.n	80097f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80097e8:	f06f 0302 	mvn.w	r3, #2
 80097ec:	61fb      	str	r3, [r7, #28]
 80097ee:	e027      	b.n	8009840 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d024      	beq.n	8009840 <osMessageQueueGet+0xac>
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <osMessageQueueGet+0xb8>)
 80097f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	e01b      	b.n	8009840 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <osMessageQueueGet+0x80>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d103      	bne.n	800981c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009814:	f06f 0303 	mvn.w	r3, #3
 8009818:	61fb      	str	r3, [r7, #28]
 800981a:	e011      	b.n	8009840 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	69b8      	ldr	r0, [r7, #24]
 8009822:	f000 fd81 	bl	800a328 <xQueueReceive>
 8009826:	4603      	mov	r3, r0
 8009828:	2b01      	cmp	r3, #1
 800982a:	d009      	beq.n	8009840 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009832:	f06f 0301 	mvn.w	r3, #1
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	e002      	b.n	8009840 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800983a:	f06f 0302 	mvn.w	r3, #2
 800983e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009840:	69fb      	ldr	r3, [r7, #28]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3720      	adds	r7, #32
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	e000ed04 	.word	0xe000ed04

08009850 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a07      	ldr	r2, [pc, #28]	; (800987c <vApplicationGetIdleTaskMemory+0x2c>)
 8009860:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	4a06      	ldr	r2, [pc, #24]	; (8009880 <vApplicationGetIdleTaskMemory+0x30>)
 8009866:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2280      	movs	r2, #128	; 0x80
 800986c:	601a      	str	r2, [r3, #0]
}
 800986e:	bf00      	nop
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	200000fc 	.word	0x200000fc
 8009880:	200001b8 	.word	0x200001b8

08009884 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a07      	ldr	r2, [pc, #28]	; (80098b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009894:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	4a06      	ldr	r2, [pc, #24]	; (80098b4 <vApplicationGetTimerTaskMemory+0x30>)
 800989a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098a2:	601a      	str	r2, [r3, #0]
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	200003b8 	.word	0x200003b8
 80098b4:	20000474 	.word	0x20000474

080098b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f103 0208 	add.w	r2, r3, #8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295
 80098d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f103 0208 	add.w	r2, r3, #8
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f103 0208 	add.w	r2, r3, #8
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009912:	b480      	push	{r7}
 8009914:	b085      	sub	sp, #20
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	601a      	str	r2, [r3, #0]
}
 800994e:	bf00      	nop
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800995a:	b480      	push	{r7}
 800995c:	b085      	sub	sp, #20
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009970:	d103      	bne.n	800997a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e00c      	b.n	8009994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3308      	adds	r3, #8
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	e002      	b.n	8009988 <vListInsert+0x2e>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	429a      	cmp	r2, r3
 8009992:	d2f6      	bcs.n	8009982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	1c5a      	adds	r2, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
}
 80099c0:	bf00      	nop
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	6892      	ldr	r2, [r2, #8]
 80099e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6852      	ldr	r2, [r2, #4]
 80099ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d103      	bne.n	8009a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	1e5a      	subs	r2, r3, #1
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10a      	bne.n	8009a4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009a46:	bf00      	nop
 8009a48:	e7fe      	b.n	8009a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009a4a:	f002 fd73 	bl	800c534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a56:	68f9      	ldr	r1, [r7, #12]
 8009a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a5a:	fb01 f303 	mul.w	r3, r1, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	68f9      	ldr	r1, [r7, #12]
 8009a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a80:	fb01 f303 	mul.w	r3, r1, r3
 8009a84:	441a      	add	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	22ff      	movs	r2, #255	; 0xff
 8009a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	22ff      	movs	r2, #255	; 0xff
 8009a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d114      	bne.n	8009aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01a      	beq.n	8009ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3310      	adds	r3, #16
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 fd13 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d012      	beq.n	8009ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <xQueueGenericReset+0xcc>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	e009      	b.n	8009ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3310      	adds	r3, #16
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fef2 	bl	80098b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3324      	adds	r3, #36	; 0x24
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff feed 	bl	80098b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ade:	f002 fd59 	bl	800c594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ae2:	2301      	movs	r3, #1
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	e000ed04 	.word	0xe000ed04

08009af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08e      	sub	sp, #56	; 0x38
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
 8009afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10a      	bne.n	8009b36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <xQueueGenericCreateStatic+0x52>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <xQueueGenericCreateStatic+0x56>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e000      	b.n	8009b48 <xQueueGenericCreateStatic+0x58>
 8009b46:	2300      	movs	r3, #0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	623b      	str	r3, [r7, #32]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d102      	bne.n	8009b6e <xQueueGenericCreateStatic+0x7e>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <xQueueGenericCreateStatic+0x82>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e000      	b.n	8009b74 <xQueueGenericCreateStatic+0x84>
 8009b72:	2300      	movs	r3, #0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d10a      	bne.n	8009b8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7c:	f383 8811 	msr	BASEPRI, r3
 8009b80:	f3bf 8f6f 	isb	sy
 8009b84:	f3bf 8f4f 	dsb	sy
 8009b88:	61fb      	str	r3, [r7, #28]
}
 8009b8a:	bf00      	nop
 8009b8c:	e7fe      	b.n	8009b8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b8e:	2350      	movs	r3, #80	; 0x50
 8009b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b50      	cmp	r3, #80	; 0x50
 8009b96:	d00a      	beq.n	8009bae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	61bb      	str	r3, [r7, #24]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f83f 	bl	8009c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3730      	adds	r7, #48	; 0x30
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10a      	bne.n	8009c0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	613b      	str	r3, [r7, #16]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	fb02 f303 	mul.w	r3, r2, r3
 8009c12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	3350      	adds	r3, #80	; 0x50
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f002 fdad 	bl	800c778 <pvPortMalloc>
 8009c1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	3350      	adds	r3, #80	; 0x50
 8009c2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c38:	79fa      	ldrb	r2, [r7, #7]
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 f805 	bl	8009c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c4a:	69bb      	ldr	r3, [r7, #24]
	}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	69ba      	ldr	r2, [r7, #24]
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	e002      	b.n	8009c76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c82:	2101      	movs	r1, #1
 8009c84:	69b8      	ldr	r0, [r7, #24]
 8009c86:	f7ff fecb 	bl	8009a20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00e      	beq.n	8009cc6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f90b 	bl	8009edc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	617b      	str	r3, [r7, #20]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009ce0:	79fb      	ldrb	r3, [r7, #7]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6939      	ldr	r1, [r7, #16]
 8009ce6:	6978      	ldr	r0, [r7, #20]
 8009ce8:	f7ff ff7a 	bl	8009be0 <xQueueGenericCreate>
 8009cec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7ff ffd3 	bl	8009c9a <prvInitialiseMutex>

		return xNewQueue;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b088      	sub	sp, #32
 8009d02:	af02      	add	r7, sp, #8
 8009d04:	4603      	mov	r3, r0
 8009d06:	6039      	str	r1, [r7, #0]
 8009d08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	617b      	str	r3, [r7, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d12:	79fb      	ldrb	r3, [r7, #7]
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6939      	ldr	r1, [r7, #16]
 8009d1c:	6978      	ldr	r0, [r7, #20]
 8009d1e:	f7ff fee7 	bl	8009af0 <xQueueGenericCreateStatic>
 8009d22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff ffb8 	bl	8009c9a <prvInitialiseMutex>

		return xNewQueue;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
	}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009d34:	b590      	push	{r4, r7, lr}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10a      	bne.n	8009d5c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60fb      	str	r3, [r7, #12]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	689c      	ldr	r4, [r3, #8]
 8009d60:	f001 fd7c 	bl	800b85c <xTaskGetCurrentTaskHandle>
 8009d64:	4603      	mov	r3, r0
 8009d66:	429c      	cmp	r4, r3
 8009d68:	d111      	bne.n	8009d8e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	1e5a      	subs	r2, r3, #1
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d105      	bne.n	8009d88 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2100      	movs	r1, #0
 8009d82:	6938      	ldr	r0, [r7, #16]
 8009d84:	f000 f8aa 	bl	8009edc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	e001      	b.n	8009d92 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009d92:	697b      	ldr	r3, [r7, #20]
	}
 8009d94:	4618      	mov	r0, r3
 8009d96:	371c      	adds	r7, #28
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd90      	pop	{r4, r7, pc}

08009d9c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009d9c:	b590      	push	{r4, r7, lr}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	60fb      	str	r3, [r7, #12]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	689c      	ldr	r4, [r3, #8]
 8009dca:	f001 fd47 	bl	800b85c <xTaskGetCurrentTaskHandle>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d107      	bne.n	8009de4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009dde:	2301      	movs	r3, #1
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	e00c      	b.n	8009dfe <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	6938      	ldr	r0, [r7, #16]
 8009de8:	f000 fb7e 	bl	800a4e8 <xQueueSemaphoreTake>
 8009dec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d004      	beq.n	8009dfe <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009dfe:	697b      	ldr	r3, [r7, #20]
	}
 8009e00:	4618      	mov	r0, r3
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd90      	pop	{r4, r7, pc}

08009e08 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	61bb      	str	r3, [r7, #24]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d90a      	bls.n	8009e4e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	617b      	str	r3, [r7, #20]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e4e:	2302      	movs	r3, #2
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	2100      	movs	r1, #0
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff fe49 	bl	8009af0 <xQueueGenericCreateStatic>
 8009e5e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
	}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b086      	sub	sp, #24
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	613b      	str	r3, [r7, #16]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d90a      	bls.n	8009eba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	60fb      	str	r3, [r7, #12]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009eba:	2202      	movs	r2, #2
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fe8e 	bl	8009be0 <xQueueGenericCreate>
 8009ec4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ed2:	697b      	ldr	r3, [r7, #20]
	}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3718      	adds	r7, #24
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08e      	sub	sp, #56	; 0x38
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009eea:	2300      	movs	r3, #0
 8009eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueGenericSend+0x32>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d103      	bne.n	8009f1c <xQueueGenericSend+0x40>
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <xQueueGenericSend+0x44>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e000      	b.n	8009f22 <xQueueGenericSend+0x46>
 8009f20:	2300      	movs	r3, #0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10a      	bne.n	8009f3c <xQueueGenericSend+0x60>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f38:	bf00      	nop
 8009f3a:	e7fe      	b.n	8009f3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	d103      	bne.n	8009f4a <xQueueGenericSend+0x6e>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <xQueueGenericSend+0x72>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <xQueueGenericSend+0x74>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericSend+0x8e>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	623b      	str	r3, [r7, #32]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f6a:	f001 fc87 	bl	800b87c <xTaskGetSchedulerState>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d102      	bne.n	8009f7a <xQueueGenericSend+0x9e>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d101      	bne.n	8009f7e <xQueueGenericSend+0xa2>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e000      	b.n	8009f80 <xQueueGenericSend+0xa4>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10a      	bne.n	8009f9a <xQueueGenericSend+0xbe>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	61fb      	str	r3, [r7, #28]
}
 8009f96:	bf00      	nop
 8009f98:	e7fe      	b.n	8009f98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f9a:	f002 facb 	bl	800c534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d302      	bcc.n	8009fb0 <xQueueGenericSend+0xd4>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b02      	cmp	r3, #2
 8009fae:	d129      	bne.n	800a004 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	68b9      	ldr	r1, [r7, #8]
 8009fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb6:	f000 fc5e 	bl	800a876 <prvCopyDataToQueue>
 8009fba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d010      	beq.n	8009fe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	3324      	adds	r3, #36	; 0x24
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f001 fa85 	bl	800b4d8 <xTaskRemoveFromEventList>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d013      	beq.n	8009ffc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fd4:	4b3f      	ldr	r3, [pc, #252]	; (800a0d4 <xQueueGenericSend+0x1f8>)
 8009fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fda:	601a      	str	r2, [r3, #0]
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	e00a      	b.n	8009ffc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d007      	beq.n	8009ffc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fec:	4b39      	ldr	r3, [pc, #228]	; (800a0d4 <xQueueGenericSend+0x1f8>)
 8009fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ffc:	f002 faca 	bl	800c594 <vPortExitCritical>
				return pdPASS;
 800a000:	2301      	movs	r3, #1
 800a002:	e063      	b.n	800a0cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d103      	bne.n	800a012 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a00a:	f002 fac3 	bl	800c594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	e05c      	b.n	800a0cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a014:	2b00      	cmp	r3, #0
 800a016:	d106      	bne.n	800a026 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a018:	f107 0314 	add.w	r3, r7, #20
 800a01c:	4618      	mov	r0, r3
 800a01e:	f001 fabf 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a022:	2301      	movs	r3, #1
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a026:	f002 fab5 	bl	800c594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a02a:	f001 f819 	bl	800b060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a02e:	f002 fa81 	bl	800c534 <vPortEnterCritical>
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a038:	b25b      	sxtb	r3, r3
 800a03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03e:	d103      	bne.n	800a048 <xQueueGenericSend+0x16c>
 800a040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a04e:	b25b      	sxtb	r3, r3
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a054:	d103      	bne.n	800a05e <xQueueGenericSend+0x182>
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a05e:	f002 fa99 	bl	800c594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a062:	1d3a      	adds	r2, r7, #4
 800a064:	f107 0314 	add.w	r3, r7, #20
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f001 faae 	bl	800b5cc <xTaskCheckForTimeOut>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d124      	bne.n	800a0c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a078:	f000 fcf5 	bl	800aa66 <prvIsQueueFull>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d018      	beq.n	800a0b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	3310      	adds	r3, #16
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f001 f9d4 	bl	800b438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a092:	f000 fc80 	bl	800a996 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a096:	f000 fff1 	bl	800b07c <xTaskResumeAll>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f47f af7c 	bne.w	8009f9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a0a2:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <xQueueGenericSend+0x1f8>)
 800a0a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	e772      	b.n	8009f9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a0b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0b6:	f000 fc6e 	bl	800a996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0ba:	f000 ffdf 	bl	800b07c <xTaskResumeAll>
 800a0be:	e76c      	b.n	8009f9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c2:	f000 fc68 	bl	800a996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0c6:	f000 ffd9 	bl	800b07c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3738      	adds	r7, #56	; 0x38
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b090      	sub	sp, #64	; 0x40
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10a      	bne.n	800a106 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <xQueueGenericSendFromISR+0x3c>
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <xQueueGenericSendFromISR+0x40>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <xQueueGenericSendFromISR+0x42>
 800a118:	2300      	movs	r3, #0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10a      	bne.n	800a134 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d103      	bne.n	800a142 <xQueueGenericSendFromISR+0x6a>
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <xQueueGenericSendFromISR+0x6e>
 800a142:	2301      	movs	r3, #1
 800a144:	e000      	b.n	800a148 <xQueueGenericSendFromISR+0x70>
 800a146:	2300      	movs	r3, #0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	623b      	str	r3, [r7, #32]
}
 800a15e:	bf00      	nop
 800a160:	e7fe      	b.n	800a160 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a162:	f002 fac9 	bl	800c6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a166:	f3ef 8211 	mrs	r2, BASEPRI
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	61fa      	str	r2, [r7, #28]
 800a17c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a17e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a180:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d302      	bcc.n	800a194 <xQueueGenericSendFromISR+0xbc>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b02      	cmp	r3, #2
 800a192:	d12f      	bne.n	800a1f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a1aa:	f000 fb64 	bl	800a876 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a1ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b6:	d112      	bne.n	800a1de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d016      	beq.n	800a1ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	3324      	adds	r3, #36	; 0x24
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f001 f987 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00e      	beq.n	800a1ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	e007      	b.n	800a1ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	b25a      	sxtb	r2, r3
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a1f2:	e001      	b.n	800a1f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a202:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a206:	4618      	mov	r0, r3
 800a208:	3740      	adds	r7, #64	; 0x40
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b08e      	sub	sp, #56	; 0x38
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	623b      	str	r3, [r7, #32]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	61fb      	str	r3, [r7, #28]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d103      	bne.n	800a266 <xQueueGiveFromISR+0x58>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <xQueueGiveFromISR+0x5c>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <xQueueGiveFromISR+0x5e>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	61bb      	str	r3, [r7, #24]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a286:	f002 fa37 	bl	800c6f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a28a:	f3ef 8211 	mrs	r2, BASEPRI
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	617a      	str	r2, [r7, #20]
 800a2a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a2a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d22b      	bcs.n	800a30e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d112      	bne.n	800a2f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d016      	beq.n	800a308 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	3324      	adds	r3, #36	; 0x24
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 f8fa 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00e      	beq.n	800a308 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00b      	beq.n	800a308 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e007      	b.n	800a308 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	b25a      	sxtb	r2, r3
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a308:	2301      	movs	r3, #1
 800a30a:	637b      	str	r3, [r7, #52]	; 0x34
 800a30c:	e001      	b.n	800a312 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	637b      	str	r3, [r7, #52]	; 0x34
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f383 8811 	msr	BASEPRI, r3
}
 800a31c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a320:	4618      	mov	r0, r3
 800a322:	3738      	adds	r7, #56	; 0x38
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08c      	sub	sp, #48	; 0x30
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a334:	2300      	movs	r3, #0
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <xQueueReceive+0x30>
	__asm volatile
 800a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	623b      	str	r3, [r7, #32]
}
 800a354:	bf00      	nop
 800a356:	e7fe      	b.n	800a356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <xQueueReceive+0x3e>
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <xQueueReceive+0x42>
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <xQueueReceive+0x44>
 800a36a:	2300      	movs	r3, #0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10a      	bne.n	800a386 <xQueueReceive+0x5e>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	61fb      	str	r3, [r7, #28]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a386:	f001 fa79 	bl	800b87c <xTaskGetSchedulerState>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d102      	bne.n	800a396 <xQueueReceive+0x6e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <xQueueReceive+0x72>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <xQueueReceive+0x74>
 800a39a:	2300      	movs	r3, #0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <xQueueReceive+0x8e>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61bb      	str	r3, [r7, #24]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3b6:	f002 f8bd 	bl	800c534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01f      	beq.n	800a406 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3c6:	68b9      	ldr	r1, [r7, #8]
 800a3c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ca:	f000 fabe 	bl	800a94a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	1e5a      	subs	r2, r3, #1
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00f      	beq.n	800a3fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	3310      	adds	r3, #16
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 f878 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3ee:	4b3d      	ldr	r3, [pc, #244]	; (800a4e4 <xQueueReceive+0x1bc>)
 800a3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3fe:	f002 f8c9 	bl	800c594 <vPortExitCritical>
				return pdPASS;
 800a402:	2301      	movs	r3, #1
 800a404:	e069      	b.n	800a4da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a40c:	f002 f8c2 	bl	800c594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a410:	2300      	movs	r3, #0
 800a412:	e062      	b.n	800a4da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a41a:	f107 0310 	add.w	r3, r7, #16
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f8be 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a428:	f002 f8b4 	bl	800c594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a42c:	f000 fe18 	bl	800b060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a430:	f002 f880 	bl	800c534 <vPortEnterCritical>
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d103      	bne.n	800a44a <xQueueReceive+0x122>
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a450:	b25b      	sxtb	r3, r3
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a456:	d103      	bne.n	800a460 <xQueueReceive+0x138>
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a460:	f002 f898 	bl	800c594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a464:	1d3a      	adds	r2, r7, #4
 800a466:	f107 0310 	add.w	r3, r7, #16
 800a46a:	4611      	mov	r1, r2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 f8ad 	bl	800b5cc <xTaskCheckForTimeOut>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d123      	bne.n	800a4c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47a:	f000 fade 	bl	800aa3a <prvIsQueueEmpty>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d017      	beq.n	800a4b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4618      	mov	r0, r3
 800a48e:	f000 ffd3 	bl	800b438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a494:	f000 fa7f 	bl	800a996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a498:	f000 fdf0 	bl	800b07c <xTaskResumeAll>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d189      	bne.n	800a3b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a4a2:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <xQueueReceive+0x1bc>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	e780      	b.n	800a3b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f000 fa6e 	bl	800a996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ba:	f000 fddf 	bl	800b07c <xTaskResumeAll>
 800a4be:	e77a      	b.n	800a3b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c2:	f000 fa68 	bl	800a996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c6:	f000 fdd9 	bl	800b07c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4cc:	f000 fab5 	bl	800aa3a <prvIsQueueEmpty>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f43f af6f 	beq.w	800a3b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a4d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3730      	adds	r7, #48	; 0x30
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	e000ed04 	.word	0xe000ed04

0800a4e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b08e      	sub	sp, #56	; 0x38
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	623b      	str	r3, [r7, #32]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61fb      	str	r3, [r7, #28]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a538:	f001 f9a0 	bl	800b87c <xTaskGetSchedulerState>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <xQueueSemaphoreTake+0x60>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <xQueueSemaphoreTake+0x64>
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <xQueueSemaphoreTake+0x66>
 800a54c:	2300      	movs	r3, #0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61bb      	str	r3, [r7, #24]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a568:	f001 ffe4 	bl	800c534 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	2b00      	cmp	r3, #0
 800a576:	d024      	beq.n	800a5c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57a:	1e5a      	subs	r2, r3, #1
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a588:	f001 faee 	bl	800bb68 <pvTaskIncrementMutexHeldCount>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00f      	beq.n	800a5ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	3310      	adds	r3, #16
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 ff9a 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d007      	beq.n	800a5ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5aa:	4b54      	ldr	r3, [pc, #336]	; (800a6fc <xQueueSemaphoreTake+0x214>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5ba:	f001 ffeb 	bl	800c594 <vPortExitCritical>
				return pdPASS;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e097      	b.n	800a6f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d111      	bne.n	800a5ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5e4:	f001 ffd6 	bl	800c594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e082      	b.n	800a6f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5f2:	f107 030c 	add.w	r3, r7, #12
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 ffd2 	bl	800b5a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a600:	f001 ffc8 	bl	800c594 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a604:	f000 fd2c 	bl	800b060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a608:	f001 ff94 	bl	800c534 <vPortEnterCritical>
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a612:	b25b      	sxtb	r3, r3
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a618:	d103      	bne.n	800a622 <xQueueSemaphoreTake+0x13a>
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a628:	b25b      	sxtb	r3, r3
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62e:	d103      	bne.n	800a638 <xQueueSemaphoreTake+0x150>
 800a630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a632:	2200      	movs	r2, #0
 800a634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a638:	f001 ffac 	bl	800c594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a63c:	463a      	mov	r2, r7
 800a63e:	f107 030c 	add.w	r3, r7, #12
 800a642:	4611      	mov	r1, r2
 800a644:	4618      	mov	r0, r3
 800a646:	f000 ffc1 	bl	800b5cc <xTaskCheckForTimeOut>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d132      	bne.n	800a6b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a652:	f000 f9f2 	bl	800aa3a <prvIsQueueEmpty>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d026      	beq.n	800a6aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d109      	bne.n	800a678 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a664:	f001 ff66 	bl	800c534 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 f923 	bl	800b8b8 <xTaskPriorityInherit>
 800a672:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a674:	f001 ff8e 	bl	800c594 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fed9 	bl	800b438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a688:	f000 f985 	bl	800a996 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a68c:	f000 fcf6 	bl	800b07c <xTaskResumeAll>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	f47f af68 	bne.w	800a568 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a698:	4b18      	ldr	r3, [pc, #96]	; (800a6fc <xQueueSemaphoreTake+0x214>)
 800a69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	f3bf 8f6f 	isb	sy
 800a6a8:	e75e      	b.n	800a568 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6ac:	f000 f973 	bl	800a996 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6b0:	f000 fce4 	bl	800b07c <xTaskResumeAll>
 800a6b4:	e758      	b.n	800a568 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6b8:	f000 f96d 	bl	800a996 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6bc:	f000 fcde 	bl	800b07c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6c2:	f000 f9ba 	bl	800aa3a <prvIsQueueEmpty>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f43f af4d 	beq.w	800a568 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00d      	beq.n	800a6f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a6d4:	f001 ff2e 	bl	800c534 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6da:	f000 f8b4 	bl	800a846 <prvGetDisinheritPriorityAfterTimeout>
 800a6de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 f9bc 	bl	800ba64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6ec:	f001 ff52 	bl	800c594 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3738      	adds	r7, #56	; 0x38
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	e000ed04 	.word	0xe000ed04

0800a700 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	623b      	str	r3, [r7, #32]
}
 800a728:	bf00      	nop
 800a72a:	e7fe      	b.n	800a72a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d103      	bne.n	800a73a <xQueueReceiveFromISR+0x3a>
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	2b00      	cmp	r3, #0
 800a738:	d101      	bne.n	800a73e <xQueueReceiveFromISR+0x3e>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e000      	b.n	800a740 <xQueueReceiveFromISR+0x40>
 800a73e:	2300      	movs	r3, #0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10a      	bne.n	800a75a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	61fb      	str	r3, [r7, #28]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a75a:	f001 ffcd 	bl	800c6f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a75e:	f3ef 8211 	mrs	r2, BASEPRI
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	61ba      	str	r2, [r7, #24]
 800a774:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a776:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	2b00      	cmp	r3, #0
 800a784:	d02f      	beq.n	800a7e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a794:	f000 f8d9 	bl	800a94a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	1e5a      	subs	r2, r3, #1
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a7a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a8:	d112      	bne.n	800a7d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d016      	beq.n	800a7e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	3310      	adds	r3, #16
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fe8e 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00e      	beq.n	800a7e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	e007      	b.n	800a7e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	b25a      	sxtb	r2, r3
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	637b      	str	r3, [r7, #52]	; 0x34
 800a7e4:	e001      	b.n	800a7ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f383 8811 	msr	BASEPRI, r3
}
 800a7f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3738      	adds	r7, #56	; 0x38
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <vQueueDelete+0x28>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	60bb      	str	r3, [r7, #8]
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f95f 	bl	800aaec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a834:	2b00      	cmp	r3, #0
 800a836:	d102      	bne.n	800a83e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f002 f869 	bl	800c910 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	2b00      	cmp	r3, #0
 800a854:	d006      	beq.n	800a864 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	e001      	b.n	800a868 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a868:	68fb      	ldr	r3, [r7, #12]
	}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b086      	sub	sp, #24
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a882:	2300      	movs	r3, #0
 800a884:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10d      	bne.n	800a8b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d14d      	bne.n	800a938 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f001 f871 	bl	800b988 <xTaskPriorityDisinherit>
 800a8a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	609a      	str	r2, [r3, #8]
 800a8ae:	e043      	b.n	800a938 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d119      	bne.n	800a8ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6858      	ldr	r0, [r3, #4]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	461a      	mov	r2, r3
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	f00e fc80 	bl	80191c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685a      	ldr	r2, [r3, #4]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ce:	441a      	add	r2, r3
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	685a      	ldr	r2, [r3, #4]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d32b      	bcc.n	800a938 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	605a      	str	r2, [r3, #4]
 800a8e8:	e026      	b.n	800a938 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68d8      	ldr	r0, [r3, #12]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	f00e fc66 	bl	80191c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	425b      	negs	r3, r3
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d207      	bcs.n	800a926 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	425b      	negs	r3, r3
 800a920:	441a      	add	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d105      	bne.n	800a938 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3b01      	subs	r3, #1
 800a936:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	1c5a      	adds	r2, r3, #1
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a940:	697b      	ldr	r3, [r7, #20]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b082      	sub	sp, #8
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d018      	beq.n	800a98e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	441a      	add	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68da      	ldr	r2, [r3, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	d303      	bcc.n	800a97e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68d9      	ldr	r1, [r3, #12]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	461a      	mov	r2, r3
 800a988:	6838      	ldr	r0, [r7, #0]
 800a98a:	f00e fc1c 	bl	80191c6 <memcpy>
	}
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a99e:	f001 fdc9 	bl	800c534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9aa:	e011      	b.n	800a9d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d012      	beq.n	800a9da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3324      	adds	r3, #36	; 0x24
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 fd8d 	bl	800b4d8 <xTaskRemoveFromEventList>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9c4:	f000 fe64 	bl	800b690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dce9      	bgt.n	800a9ac <prvUnlockQueue+0x16>
 800a9d8:	e000      	b.n	800a9dc <prvUnlockQueue+0x46>
					break;
 800a9da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	22ff      	movs	r2, #255	; 0xff
 800a9e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9e4:	f001 fdd6 	bl	800c594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9e8:	f001 fda4 	bl	800c534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9f4:	e011      	b.n	800aa1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d012      	beq.n	800aa24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3310      	adds	r3, #16
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fd68 	bl	800b4d8 <xTaskRemoveFromEventList>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa0e:	f000 fe3f 	bl	800b690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dce9      	bgt.n	800a9f6 <prvUnlockQueue+0x60>
 800aa22:	e000      	b.n	800aa26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	22ff      	movs	r2, #255	; 0xff
 800aa2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa2e:	f001 fdb1 	bl	800c594 <vPortExitCritical>
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa42:	f001 fd77 	bl	800c534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d102      	bne.n	800aa54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	e001      	b.n	800aa58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa58:	f001 fd9c 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa6e:	f001 fd61 	bl	800c534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d102      	bne.n	800aa84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e001      	b.n	800aa88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa84:	2300      	movs	r3, #0
 800aa86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa88:	f001 fd84 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	e014      	b.n	800aad2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aaa8:	4a0f      	ldr	r2, [pc, #60]	; (800aae8 <vQueueAddToRegistry+0x50>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10b      	bne.n	800aacc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aab4:	490c      	ldr	r1, [pc, #48]	; (800aae8 <vQueueAddToRegistry+0x50>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aabe:	4a0a      	ldr	r2, [pc, #40]	; (800aae8 <vQueueAddToRegistry+0x50>)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	4413      	add	r3, r2
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aaca:	e006      	b.n	800aada <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3301      	adds	r3, #1
 800aad0:	60fb      	str	r3, [r7, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b07      	cmp	r3, #7
 800aad6:	d9e7      	bls.n	800aaa8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	20009904 	.word	0x20009904

0800aaec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	60fb      	str	r3, [r7, #12]
 800aaf8:	e016      	b.n	800ab28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aafa:	4a10      	ldr	r2, [pc, #64]	; (800ab3c <vQueueUnregisterQueue+0x50>)
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	4413      	add	r3, r2
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d10b      	bne.n	800ab22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <vQueueUnregisterQueue+0x50>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2100      	movs	r1, #0
 800ab10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ab14:	4a09      	ldr	r2, [pc, #36]	; (800ab3c <vQueueUnregisterQueue+0x50>)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	4413      	add	r3, r2
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	605a      	str	r2, [r3, #4]
				break;
 800ab20:	e006      	b.n	800ab30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b07      	cmp	r3, #7
 800ab2c:	d9e5      	bls.n	800aafa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ab2e:	bf00      	nop
 800ab30:	bf00      	nop
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	20009904 	.word	0x20009904

0800ab40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab50:	f001 fcf0 	bl	800c534 <vPortEnterCritical>
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab5a:	b25b      	sxtb	r3, r3
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab60:	d103      	bne.n	800ab6a <vQueueWaitForMessageRestricted+0x2a>
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab70:	b25b      	sxtb	r3, r3
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab76:	d103      	bne.n	800ab80 <vQueueWaitForMessageRestricted+0x40>
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab80:	f001 fd08 	bl	800c594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d106      	bne.n	800ab9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	68b9      	ldr	r1, [r7, #8]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fc73 	bl	800b480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab9a:	6978      	ldr	r0, [r7, #20]
 800ab9c:	f7ff fefb 	bl	800a996 <prvUnlockQueue>
	}
 800aba0:	bf00      	nop
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af04      	add	r7, sp, #16
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	623b      	str	r3, [r7, #32]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xTaskCreateStatic+0x46>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	61fb      	str	r3, [r7, #28]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800abee:	23bc      	movs	r3, #188	; 0xbc
 800abf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2bbc      	cmp	r3, #188	; 0xbc
 800abf6:	d00a      	beq.n	800ac0e <xTaskCreateStatic+0x66>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	61bb      	str	r3, [r7, #24]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01e      	beq.n	800ac54 <xTaskCreateStatic+0xac>
 800ac16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d01b      	beq.n	800ac54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	2202      	movs	r2, #2
 800ac2a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	9302      	str	r3, [sp, #8]
 800ac36:	f107 0314 	add.w	r3, r7, #20
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 f850 	bl	800acec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac4e:	f000 f8f3 	bl	800ae38 <prvAddNewTaskToReadyList>
 800ac52:	e001      	b.n	800ac58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac58:	697b      	ldr	r3, [r7, #20]
	}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3728      	adds	r7, #40	; 0x28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b08c      	sub	sp, #48	; 0x30
 800ac66:	af04      	add	r7, sp, #16
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	603b      	str	r3, [r7, #0]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac72:	88fb      	ldrh	r3, [r7, #6]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 fd7e 	bl	800c778 <pvPortMalloc>
 800ac7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00e      	beq.n	800aca2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac84:	20bc      	movs	r0, #188	; 0xbc
 800ac86:	f001 fd77 	bl	800c778 <pvPortMalloc>
 800ac8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	631a      	str	r2, [r3, #48]	; 0x30
 800ac98:	e005      	b.n	800aca6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac9a:	6978      	ldr	r0, [r7, #20]
 800ac9c:	f001 fe38 	bl	800c910 <vPortFree>
 800aca0:	e001      	b.n	800aca6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d017      	beq.n	800acdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acb4:	88fa      	ldrh	r2, [r7, #6]
 800acb6:	2300      	movs	r3, #0
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	9302      	str	r3, [sp, #8]
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	9301      	str	r3, [sp, #4]
 800acc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68b9      	ldr	r1, [r7, #8]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 f80e 	bl	800acec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800acd0:	69f8      	ldr	r0, [r7, #28]
 800acd2:	f000 f8b1 	bl	800ae38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800acd6:	2301      	movs	r3, #1
 800acd8:	61bb      	str	r3, [r7, #24]
 800acda:	e002      	b.n	800ace2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800acdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ace0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ace2:	69bb      	ldr	r3, [r7, #24]
	}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3720      	adds	r7, #32
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	461a      	mov	r2, r3
 800ad04:	21a5      	movs	r1, #165	; 0xa5
 800ad06:	f00e fa6c 	bl	80191e2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad14:	3b01      	subs	r3, #1
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	f023 0307 	bic.w	r3, r3, #7
 800ad22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	f003 0307 	and.w	r3, r3, #7
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	617b      	str	r3, [r7, #20]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d01f      	beq.n	800ad8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	61fb      	str	r3, [r7, #28]
 800ad4e:	e012      	b.n	800ad76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	3334      	adds	r3, #52	; 0x34
 800ad60:	460a      	mov	r2, r1
 800ad62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d006      	beq.n	800ad7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	3301      	adds	r3, #1
 800ad74:	61fb      	str	r3, [r7, #28]
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	2b0f      	cmp	r3, #15
 800ad7a:	d9e9      	bls.n	800ad50 <prvInitialiseNewTask+0x64>
 800ad7c:	e000      	b.n	800ad80 <prvInitialiseNewTask+0x94>
			{
				break;
 800ad7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad88:	e003      	b.n	800ad92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	2b37      	cmp	r3, #55	; 0x37
 800ad96:	d901      	bls.n	800ad9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad98:	2337      	movs	r3, #55	; 0x37
 800ad9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	2200      	movs	r2, #0
 800adac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	3304      	adds	r3, #4
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fda0 	bl	80098f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	3318      	adds	r3, #24
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe fd9b 	bl	80098f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800add6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	3354      	adds	r3, #84	; 0x54
 800adec:	2260      	movs	r2, #96	; 0x60
 800adee:	2100      	movs	r1, #0
 800adf0:	4618      	mov	r0, r3
 800adf2:	f00e f9f6 	bl	80191e2 <memset>
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <prvInitialiseNewTask+0x140>)
 800adfa:	659a      	str	r2, [r3, #88]	; 0x58
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	4a0c      	ldr	r2, [pc, #48]	; (800ae30 <prvInitialiseNewTask+0x144>)
 800ae00:	65da      	str	r2, [r3, #92]	; 0x5c
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	4a0b      	ldr	r2, [pc, #44]	; (800ae34 <prvInitialiseNewTask+0x148>)
 800ae06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	69b8      	ldr	r0, [r7, #24]
 800ae0e:	f001 fa61 	bl	800c2d4 <pxPortInitialiseStack>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae24:	bf00      	nop
 800ae26:	3720      	adds	r7, #32
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	0801d704 	.word	0x0801d704
 800ae30:	0801d724 	.word	0x0801d724
 800ae34:	0801d6e4 	.word	0x0801d6e4

0800ae38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae40:	f001 fb78 	bl	800c534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae44:	4b2d      	ldr	r3, [pc, #180]	; (800aefc <prvAddNewTaskToReadyList+0xc4>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	4a2c      	ldr	r2, [pc, #176]	; (800aefc <prvAddNewTaskToReadyList+0xc4>)
 800ae4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae4e:	4b2c      	ldr	r3, [pc, #176]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d109      	bne.n	800ae6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae56:	4a2a      	ldr	r2, [pc, #168]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae5c:	4b27      	ldr	r3, [pc, #156]	; (800aefc <prvAddNewTaskToReadyList+0xc4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d110      	bne.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae64:	f000 fc38 	bl	800b6d8 <prvInitialiseTaskLists>
 800ae68:	e00d      	b.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae6a:	4b26      	ldr	r3, [pc, #152]	; (800af04 <prvAddNewTaskToReadyList+0xcc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae72:	4b23      	ldr	r3, [pc, #140]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d802      	bhi.n	800ae86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae80:	4a1f      	ldr	r2, [pc, #124]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae86:	4b20      	ldr	r3, [pc, #128]	; (800af08 <prvAddNewTaskToReadyList+0xd0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	4a1e      	ldr	r2, [pc, #120]	; (800af08 <prvAddNewTaskToReadyList+0xd0>)
 800ae8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae90:	4b1d      	ldr	r3, [pc, #116]	; (800af08 <prvAddNewTaskToReadyList+0xd0>)
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae9c:	4b1b      	ldr	r3, [pc, #108]	; (800af0c <prvAddNewTaskToReadyList+0xd4>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d903      	bls.n	800aeac <prvAddNewTaskToReadyList+0x74>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	4a18      	ldr	r2, [pc, #96]	; (800af0c <prvAddNewTaskToReadyList+0xd4>)
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4a15      	ldr	r2, [pc, #84]	; (800af10 <prvAddNewTaskToReadyList+0xd8>)
 800aeba:	441a      	add	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3304      	adds	r3, #4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fe fd25 	bl	8009912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fb64 	bl	800c594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <prvAddNewTaskToReadyList+0xcc>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00e      	beq.n	800aef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <prvAddNewTaskToReadyList+0xc8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	429a      	cmp	r2, r3
 800aee0:	d207      	bcs.n	800aef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <prvAddNewTaskToReadyList+0xdc>)
 800aee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000d48 	.word	0x20000d48
 800af00:	20000874 	.word	0x20000874
 800af04:	20000d54 	.word	0x20000d54
 800af08:	20000d64 	.word	0x20000d64
 800af0c:	20000d50 	.word	0x20000d50
 800af10:	20000878 	.word	0x20000878
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d017      	beq.n	800af5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af2a:	4b13      	ldr	r3, [pc, #76]	; (800af78 <vTaskDelay+0x60>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00a      	beq.n	800af48 <vTaskDelay+0x30>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60bb      	str	r3, [r7, #8]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af48:	f000 f88a 	bl	800b060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fe1e 	bl	800bb90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af54:	f000 f892 	bl	800b07c <xTaskResumeAll>
 800af58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d107      	bne.n	800af70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af60:	4b06      	ldr	r3, [pc, #24]	; (800af7c <vTaskDelay+0x64>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af70:	bf00      	nop
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	20000d70 	.word	0x20000d70
 800af7c:	e000ed04 	.word	0xe000ed04

0800af80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b08a      	sub	sp, #40	; 0x28
 800af84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af86:	2300      	movs	r3, #0
 800af88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af8e:	463a      	mov	r2, r7
 800af90:	1d39      	adds	r1, r7, #4
 800af92:	f107 0308 	add.w	r3, r7, #8
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fc5a 	bl	8009850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	9202      	str	r2, [sp, #8]
 800afa4:	9301      	str	r3, [sp, #4]
 800afa6:	2300      	movs	r3, #0
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	2300      	movs	r3, #0
 800afac:	460a      	mov	r2, r1
 800afae:	4924      	ldr	r1, [pc, #144]	; (800b040 <vTaskStartScheduler+0xc0>)
 800afb0:	4824      	ldr	r0, [pc, #144]	; (800b044 <vTaskStartScheduler+0xc4>)
 800afb2:	f7ff fdf9 	bl	800aba8 <xTaskCreateStatic>
 800afb6:	4603      	mov	r3, r0
 800afb8:	4a23      	ldr	r2, [pc, #140]	; (800b048 <vTaskStartScheduler+0xc8>)
 800afba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afbc:	4b22      	ldr	r3, [pc, #136]	; (800b048 <vTaskStartScheduler+0xc8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800afc4:	2301      	movs	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
 800afc8:	e001      	b.n	800afce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d102      	bne.n	800afda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800afd4:	f000 fe30 	bl	800bc38 <xTimerCreateTimerTask>
 800afd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11b      	bne.n	800b018 <vTaskStartScheduler+0x98>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	613b      	str	r3, [r7, #16]
}
 800aff2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aff4:	4b15      	ldr	r3, [pc, #84]	; (800b04c <vTaskStartScheduler+0xcc>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	3354      	adds	r3, #84	; 0x54
 800affa:	4a15      	ldr	r2, [pc, #84]	; (800b050 <vTaskStartScheduler+0xd0>)
 800affc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800affe:	4b15      	ldr	r3, [pc, #84]	; (800b054 <vTaskStartScheduler+0xd4>)
 800b000:	f04f 32ff 	mov.w	r2, #4294967295
 800b004:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <vTaskStartScheduler+0xd8>)
 800b008:	2201      	movs	r2, #1
 800b00a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b00c:	4b13      	ldr	r3, [pc, #76]	; (800b05c <vTaskStartScheduler+0xdc>)
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b012:	f001 f9ed 	bl	800c3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b016:	e00e      	b.n	800b036 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01e:	d10a      	bne.n	800b036 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	e7fe      	b.n	800b034 <vTaskStartScheduler+0xb4>
}
 800b036:	bf00      	nop
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	0801a5fc 	.word	0x0801a5fc
 800b044:	0800b6a9 	.word	0x0800b6a9
 800b048:	20000d6c 	.word	0x20000d6c
 800b04c:	20000874 	.word	0x20000874
 800b050:	20000068 	.word	0x20000068
 800b054:	20000d68 	.word	0x20000d68
 800b058:	20000d54 	.word	0x20000d54
 800b05c:	20000d4c 	.word	0x20000d4c

0800b060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <vTaskSuspendAll+0x18>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	4a03      	ldr	r2, [pc, #12]	; (800b078 <vTaskSuspendAll+0x18>)
 800b06c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b06e:	bf00      	nop
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20000d70 	.word	0x20000d70

0800b07c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b08a:	4b42      	ldr	r3, [pc, #264]	; (800b194 <xTaskResumeAll+0x118>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	603b      	str	r3, [r7, #0]
}
 800b0a4:	bf00      	nop
 800b0a6:	e7fe      	b.n	800b0a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0a8:	f001 fa44 	bl	800c534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0ac:	4b39      	ldr	r3, [pc, #228]	; (800b194 <xTaskResumeAll+0x118>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	4a38      	ldr	r2, [pc, #224]	; (800b194 <xTaskResumeAll+0x118>)
 800b0b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b6:	4b37      	ldr	r3, [pc, #220]	; (800b194 <xTaskResumeAll+0x118>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d162      	bne.n	800b184 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0be:	4b36      	ldr	r3, [pc, #216]	; (800b198 <xTaskResumeAll+0x11c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d05e      	beq.n	800b184 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0c6:	e02f      	b.n	800b128 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c8:	4b34      	ldr	r3, [pc, #208]	; (800b19c <xTaskResumeAll+0x120>)
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3318      	adds	r3, #24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fe fc79 	bl	80099cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3304      	adds	r3, #4
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fc74 	bl	80099cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e8:	4b2d      	ldr	r3, [pc, #180]	; (800b1a0 <xTaskResumeAll+0x124>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	d903      	bls.n	800b0f8 <xTaskResumeAll+0x7c>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	4a2a      	ldr	r2, [pc, #168]	; (800b1a0 <xTaskResumeAll+0x124>)
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4a27      	ldr	r2, [pc, #156]	; (800b1a4 <xTaskResumeAll+0x128>)
 800b106:	441a      	add	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f7fe fbff 	bl	8009912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4b23      	ldr	r3, [pc, #140]	; (800b1a8 <xTaskResumeAll+0x12c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	429a      	cmp	r2, r3
 800b120:	d302      	bcc.n	800b128 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b122:	4b22      	ldr	r3, [pc, #136]	; (800b1ac <xTaskResumeAll+0x130>)
 800b124:	2201      	movs	r2, #1
 800b126:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b128:	4b1c      	ldr	r3, [pc, #112]	; (800b19c <xTaskResumeAll+0x120>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1cb      	bne.n	800b0c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b136:	f000 fb71 	bl	800b81c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <xTaskResumeAll+0x134>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d010      	beq.n	800b168 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b146:	f000 f859 	bl	800b1fc <xTaskIncrementTick>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b150:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <xTaskResumeAll+0x130>)
 800b152:	2201      	movs	r2, #1
 800b154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3b01      	subs	r3, #1
 800b15a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1f1      	bne.n	800b146 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b162:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <xTaskResumeAll+0x134>)
 800b164:	2200      	movs	r2, #0
 800b166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b168:	4b10      	ldr	r3, [pc, #64]	; (800b1ac <xTaskResumeAll+0x130>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b170:	2301      	movs	r3, #1
 800b172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b174:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <xTaskResumeAll+0x138>)
 800b176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b184:	f001 fa06 	bl	800c594 <vPortExitCritical>

	return xAlreadyYielded;
 800b188:	68bb      	ldr	r3, [r7, #8]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000d70 	.word	0x20000d70
 800b198:	20000d48 	.word	0x20000d48
 800b19c:	20000d08 	.word	0x20000d08
 800b1a0:	20000d50 	.word	0x20000d50
 800b1a4:	20000878 	.word	0x20000878
 800b1a8:	20000874 	.word	0x20000874
 800b1ac:	20000d5c 	.word	0x20000d5c
 800b1b0:	20000d58 	.word	0x20000d58
 800b1b4:	e000ed04 	.word	0xe000ed04

0800b1b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <xTaskGetTickCount+0x1c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1c4:	687b      	ldr	r3, [r7, #4]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000d4c 	.word	0x20000d4c

0800b1d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1de:	f001 fa8b 	bl	800c6f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b1e6:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <xTaskGetTickCountFromISR+0x20>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1ec:	683b      	ldr	r3, [r7, #0]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000d4c 	.word	0x20000d4c

0800b1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b202:	2300      	movs	r3, #0
 800b204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b206:	4b4f      	ldr	r3, [pc, #316]	; (800b344 <xTaskIncrementTick+0x148>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f040 808f 	bne.w	800b32e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b210:	4b4d      	ldr	r3, [pc, #308]	; (800b348 <xTaskIncrementTick+0x14c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b218:	4a4b      	ldr	r2, [pc, #300]	; (800b348 <xTaskIncrementTick+0x14c>)
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d120      	bne.n	800b266 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b224:	4b49      	ldr	r3, [pc, #292]	; (800b34c <xTaskIncrementTick+0x150>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <xTaskIncrementTick+0x48>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	603b      	str	r3, [r7, #0]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <xTaskIncrementTick+0x46>
 800b244:	4b41      	ldr	r3, [pc, #260]	; (800b34c <xTaskIncrementTick+0x150>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	4b41      	ldr	r3, [pc, #260]	; (800b350 <xTaskIncrementTick+0x154>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a3f      	ldr	r2, [pc, #252]	; (800b34c <xTaskIncrementTick+0x150>)
 800b250:	6013      	str	r3, [r2, #0]
 800b252:	4a3f      	ldr	r2, [pc, #252]	; (800b350 <xTaskIncrementTick+0x154>)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	4b3e      	ldr	r3, [pc, #248]	; (800b354 <xTaskIncrementTick+0x158>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3301      	adds	r3, #1
 800b25e:	4a3d      	ldr	r2, [pc, #244]	; (800b354 <xTaskIncrementTick+0x158>)
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	f000 fadb 	bl	800b81c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b266:	4b3c      	ldr	r3, [pc, #240]	; (800b358 <xTaskIncrementTick+0x15c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d349      	bcc.n	800b304 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b270:	4b36      	ldr	r3, [pc, #216]	; (800b34c <xTaskIncrementTick+0x150>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d104      	bne.n	800b284 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b27a:	4b37      	ldr	r3, [pc, #220]	; (800b358 <xTaskIncrementTick+0x15c>)
 800b27c:	f04f 32ff 	mov.w	r2, #4294967295
 800b280:	601a      	str	r2, [r3, #0]
					break;
 800b282:	e03f      	b.n	800b304 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b284:	4b31      	ldr	r3, [pc, #196]	; (800b34c <xTaskIncrementTick+0x150>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b294:	693a      	ldr	r2, [r7, #16]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d203      	bcs.n	800b2a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b29c:	4a2e      	ldr	r2, [pc, #184]	; (800b358 <xTaskIncrementTick+0x15c>)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2a2:	e02f      	b.n	800b304 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe fb8f 	bl	80099cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d004      	beq.n	800b2c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	3318      	adds	r3, #24
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fe fb86 	bl	80099cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4b25      	ldr	r3, [pc, #148]	; (800b35c <xTaskIncrementTick+0x160>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d903      	bls.n	800b2d4 <xTaskIncrementTick+0xd8>
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a22      	ldr	r2, [pc, #136]	; (800b35c <xTaskIncrementTick+0x160>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4a1f      	ldr	r2, [pc, #124]	; (800b360 <xTaskIncrementTick+0x164>)
 800b2e2:	441a      	add	r2, r3
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f7fe fb11 	bl	8009912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	; (800b364 <xTaskIncrementTick+0x168>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d3b8      	bcc.n	800b270 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2fe:	2301      	movs	r3, #1
 800b300:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b302:	e7b5      	b.n	800b270 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b304:	4b17      	ldr	r3, [pc, #92]	; (800b364 <xTaskIncrementTick+0x168>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30a:	4915      	ldr	r1, [pc, #84]	; (800b360 <xTaskIncrementTick+0x164>)
 800b30c:	4613      	mov	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	440b      	add	r3, r1
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d901      	bls.n	800b320 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b320:	4b11      	ldr	r3, [pc, #68]	; (800b368 <xTaskIncrementTick+0x16c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d007      	beq.n	800b338 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	e004      	b.n	800b338 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <xTaskIncrementTick+0x170>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a0d      	ldr	r2, [pc, #52]	; (800b36c <xTaskIncrementTick+0x170>)
 800b336:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b338:	697b      	ldr	r3, [r7, #20]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000d70 	.word	0x20000d70
 800b348:	20000d4c 	.word	0x20000d4c
 800b34c:	20000d00 	.word	0x20000d00
 800b350:	20000d04 	.word	0x20000d04
 800b354:	20000d60 	.word	0x20000d60
 800b358:	20000d68 	.word	0x20000d68
 800b35c:	20000d50 	.word	0x20000d50
 800b360:	20000878 	.word	0x20000878
 800b364:	20000874 	.word	0x20000874
 800b368:	20000d5c 	.word	0x20000d5c
 800b36c:	20000d58 	.word	0x20000d58

0800b370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b376:	4b2a      	ldr	r3, [pc, #168]	; (800b420 <vTaskSwitchContext+0xb0>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b37e:	4b29      	ldr	r3, [pc, #164]	; (800b424 <vTaskSwitchContext+0xb4>)
 800b380:	2201      	movs	r2, #1
 800b382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b384:	e046      	b.n	800b414 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <vTaskSwitchContext+0xb4>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38c:	4b26      	ldr	r3, [pc, #152]	; (800b428 <vTaskSwitchContext+0xb8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	e010      	b.n	800b3b6 <vTaskSwitchContext+0x46>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10a      	bne.n	800b3b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	607b      	str	r3, [r7, #4]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <vTaskSwitchContext+0x3e>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	491d      	ldr	r1, [pc, #116]	; (800b42c <vTaskSwitchContext+0xbc>)
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	440b      	add	r3, r1
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d0e4      	beq.n	800b394 <vTaskSwitchContext+0x24>
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	4413      	add	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4a15      	ldr	r2, [pc, #84]	; (800b42c <vTaskSwitchContext+0xbc>)
 800b3d6:	4413      	add	r3, r2
 800b3d8:	60bb      	str	r3, [r7, #8]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	605a      	str	r2, [r3, #4]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d104      	bne.n	800b3fa <vTaskSwitchContext+0x8a>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	605a      	str	r2, [r3, #4]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	4a0b      	ldr	r2, [pc, #44]	; (800b430 <vTaskSwitchContext+0xc0>)
 800b402:	6013      	str	r3, [r2, #0]
 800b404:	4a08      	ldr	r2, [pc, #32]	; (800b428 <vTaskSwitchContext+0xb8>)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b40a:	4b09      	ldr	r3, [pc, #36]	; (800b430 <vTaskSwitchContext+0xc0>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3354      	adds	r3, #84	; 0x54
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <vTaskSwitchContext+0xc4>)
 800b412:	6013      	str	r3, [r2, #0]
}
 800b414:	bf00      	nop
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	20000d70 	.word	0x20000d70
 800b424:	20000d5c 	.word	0x20000d5c
 800b428:	20000d50 	.word	0x20000d50
 800b42c:	20000878 	.word	0x20000878
 800b430:	20000874 	.word	0x20000874
 800b434:	20000068 	.word	0x20000068

0800b438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10a      	bne.n	800b45e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	60fb      	str	r3, [r7, #12]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b45e:	4b07      	ldr	r3, [pc, #28]	; (800b47c <vTaskPlaceOnEventList+0x44>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	3318      	adds	r3, #24
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fe fa77 	bl	800995a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b46c:	2101      	movs	r1, #1
 800b46e:	6838      	ldr	r0, [r7, #0]
 800b470:	f000 fb8e 	bl	800bb90 <prvAddCurrentTaskToDelayedList>
}
 800b474:	bf00      	nop
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20000874 	.word	0x20000874

0800b480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	617b      	str	r3, [r7, #20]
}
 800b4a4:	bf00      	nop
 800b4a6:	e7fe      	b.n	800b4a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3318      	adds	r3, #24
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7fe fa2e 	bl	8009912 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	68b8      	ldr	r0, [r7, #8]
 800b4c6:	f000 fb63 	bl	800bb90 <prvAddCurrentTaskToDelayedList>
	}
 800b4ca:	bf00      	nop
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	20000874 	.word	0x20000874

0800b4d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60fb      	str	r3, [r7, #12]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	3318      	adds	r3, #24
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe fa5f 	bl	80099cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b50e:	4b1e      	ldr	r3, [pc, #120]	; (800b588 <xTaskRemoveFromEventList+0xb0>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d11d      	bne.n	800b552 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	3304      	adds	r3, #4
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe fa56 	bl	80099cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b524:	4b19      	ldr	r3, [pc, #100]	; (800b58c <xTaskRemoveFromEventList+0xb4>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d903      	bls.n	800b534 <xTaskRemoveFromEventList+0x5c>
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b530:	4a16      	ldr	r2, [pc, #88]	; (800b58c <xTaskRemoveFromEventList+0xb4>)
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b538:	4613      	mov	r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4a13      	ldr	r2, [pc, #76]	; (800b590 <xTaskRemoveFromEventList+0xb8>)
 800b542:	441a      	add	r2, r3
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3304      	adds	r3, #4
 800b548:	4619      	mov	r1, r3
 800b54a:	4610      	mov	r0, r2
 800b54c:	f7fe f9e1 	bl	8009912 <vListInsertEnd>
 800b550:	e005      	b.n	800b55e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	3318      	adds	r3, #24
 800b556:	4619      	mov	r1, r3
 800b558:	480e      	ldr	r0, [pc, #56]	; (800b594 <xTaskRemoveFromEventList+0xbc>)
 800b55a:	f7fe f9da 	bl	8009912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b562:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <xTaskRemoveFromEventList+0xc0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b568:	429a      	cmp	r2, r3
 800b56a:	d905      	bls.n	800b578 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b56c:	2301      	movs	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b570:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <xTaskRemoveFromEventList+0xc4>)
 800b572:	2201      	movs	r2, #1
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	e001      	b.n	800b57c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b57c:	697b      	ldr	r3, [r7, #20]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20000d70 	.word	0x20000d70
 800b58c:	20000d50 	.word	0x20000d50
 800b590:	20000878 	.word	0x20000878
 800b594:	20000d08 	.word	0x20000d08
 800b598:	20000874 	.word	0x20000874
 800b59c:	20000d5c 	.word	0x20000d5c

0800b5a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5a8:	4b06      	ldr	r3, [pc, #24]	; (800b5c4 <vTaskInternalSetTimeOutState+0x24>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5b0:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <vTaskInternalSetTimeOutState+0x28>)
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	20000d60 	.word	0x20000d60
 800b5c8:	20000d4c 	.word	0x20000d4c

0800b5cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b088      	sub	sp, #32
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	613b      	str	r3, [r7, #16]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	60fb      	str	r3, [r7, #12]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b60e:	f000 ff91 	bl	800c534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <xTaskCheckForTimeOut+0xbc>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62a:	d102      	bne.n	800b632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61fb      	str	r3, [r7, #28]
 800b630:	e023      	b.n	800b67a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b15      	ldr	r3, [pc, #84]	; (800b68c <xTaskCheckForTimeOut+0xc0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d007      	beq.n	800b64e <xTaskCheckForTimeOut+0x82>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	429a      	cmp	r2, r3
 800b646:	d302      	bcc.n	800b64e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b648:	2301      	movs	r3, #1
 800b64a:	61fb      	str	r3, [r7, #28]
 800b64c:	e015      	b.n	800b67a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	429a      	cmp	r2, r3
 800b656:	d20b      	bcs.n	800b670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	1ad2      	subs	r2, r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff ff9b 	bl	800b5a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	e004      	b.n	800b67a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b67a:	f000 ff8b 	bl	800c594 <vPortExitCritical>

	return xReturn;
 800b67e:	69fb      	ldr	r3, [r7, #28]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	20000d4c 	.word	0x20000d4c
 800b68c:	20000d60 	.word	0x20000d60

0800b690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b694:	4b03      	ldr	r3, [pc, #12]	; (800b6a4 <vTaskMissedYield+0x14>)
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
}
 800b69a:	bf00      	nop
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	20000d5c 	.word	0x20000d5c

0800b6a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6b0:	f000 f852 	bl	800b758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6b4:	4b06      	ldr	r3, [pc, #24]	; (800b6d0 <prvIdleTask+0x28>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d9f9      	bls.n	800b6b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6bc:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <prvIdleTask+0x2c>)
 800b6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6c2:	601a      	str	r2, [r3, #0]
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6cc:	e7f0      	b.n	800b6b0 <prvIdleTask+0x8>
 800b6ce:	bf00      	nop
 800b6d0:	20000878 	.word	0x20000878
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6de:	2300      	movs	r3, #0
 800b6e0:	607b      	str	r3, [r7, #4]
 800b6e2:	e00c      	b.n	800b6fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	009b      	lsls	r3, r3, #2
 800b6ee:	4a12      	ldr	r2, [pc, #72]	; (800b738 <prvInitialiseTaskLists+0x60>)
 800b6f0:	4413      	add	r3, r2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7fe f8e0 	bl	80098b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	607b      	str	r3, [r7, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b37      	cmp	r3, #55	; 0x37
 800b702:	d9ef      	bls.n	800b6e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b704:	480d      	ldr	r0, [pc, #52]	; (800b73c <prvInitialiseTaskLists+0x64>)
 800b706:	f7fe f8d7 	bl	80098b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b70a:	480d      	ldr	r0, [pc, #52]	; (800b740 <prvInitialiseTaskLists+0x68>)
 800b70c:	f7fe f8d4 	bl	80098b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b710:	480c      	ldr	r0, [pc, #48]	; (800b744 <prvInitialiseTaskLists+0x6c>)
 800b712:	f7fe f8d1 	bl	80098b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b716:	480c      	ldr	r0, [pc, #48]	; (800b748 <prvInitialiseTaskLists+0x70>)
 800b718:	f7fe f8ce 	bl	80098b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b71c:	480b      	ldr	r0, [pc, #44]	; (800b74c <prvInitialiseTaskLists+0x74>)
 800b71e:	f7fe f8cb 	bl	80098b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b722:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <prvInitialiseTaskLists+0x78>)
 800b724:	4a05      	ldr	r2, [pc, #20]	; (800b73c <prvInitialiseTaskLists+0x64>)
 800b726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b728:	4b0a      	ldr	r3, [pc, #40]	; (800b754 <prvInitialiseTaskLists+0x7c>)
 800b72a:	4a05      	ldr	r2, [pc, #20]	; (800b740 <prvInitialiseTaskLists+0x68>)
 800b72c:	601a      	str	r2, [r3, #0]
}
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000878 	.word	0x20000878
 800b73c:	20000cd8 	.word	0x20000cd8
 800b740:	20000cec 	.word	0x20000cec
 800b744:	20000d08 	.word	0x20000d08
 800b748:	20000d1c 	.word	0x20000d1c
 800b74c:	20000d34 	.word	0x20000d34
 800b750:	20000d00 	.word	0x20000d00
 800b754:	20000d04 	.word	0x20000d04

0800b758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b75e:	e019      	b.n	800b794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b760:	f000 fee8 	bl	800c534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b764:	4b10      	ldr	r3, [pc, #64]	; (800b7a8 <prvCheckTasksWaitingTermination+0x50>)
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	3304      	adds	r3, #4
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe f92b 	bl	80099cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b776:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <prvCheckTasksWaitingTermination+0x54>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	4a0b      	ldr	r2, [pc, #44]	; (800b7ac <prvCheckTasksWaitingTermination+0x54>)
 800b77e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b780:	4b0b      	ldr	r3, [pc, #44]	; (800b7b0 <prvCheckTasksWaitingTermination+0x58>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	3b01      	subs	r3, #1
 800b786:	4a0a      	ldr	r2, [pc, #40]	; (800b7b0 <prvCheckTasksWaitingTermination+0x58>)
 800b788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b78a:	f000 ff03 	bl	800c594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f810 	bl	800b7b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b794:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <prvCheckTasksWaitingTermination+0x58>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e1      	bne.n	800b760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000d1c 	.word	0x20000d1c
 800b7ac:	20000d48 	.word	0x20000d48
 800b7b0:	20000d30 	.word	0x20000d30

0800b7b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3354      	adds	r3, #84	; 0x54
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f00d fdd7 	bl	8019374 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d108      	bne.n	800b7e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 f89b 	bl	800c910 <vPortFree>
				vPortFree( pxTCB );
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f001 f898 	bl	800c910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7e0:	e018      	b.n	800b814 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d103      	bne.n	800b7f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f001 f88f 	bl	800c910 <vPortFree>
	}
 800b7f2:	e00f      	b.n	800b814 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d00a      	beq.n	800b814 <prvDeleteTCB+0x60>
	__asm volatile
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60fb      	str	r3, [r7, #12]
}
 800b810:	bf00      	nop
 800b812:	e7fe      	b.n	800b812 <prvDeleteTCB+0x5e>
	}
 800b814:	bf00      	nop
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b822:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <prvResetNextTaskUnblockTime+0x38>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d104      	bne.n	800b836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	; (800b858 <prvResetNextTaskUnblockTime+0x3c>)
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b834:	e008      	b.n	800b848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b836:	4b07      	ldr	r3, [pc, #28]	; (800b854 <prvResetNextTaskUnblockTime+0x38>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4a04      	ldr	r2, [pc, #16]	; (800b858 <prvResetNextTaskUnblockTime+0x3c>)
 800b846:	6013      	str	r3, [r2, #0]
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000d00 	.word	0x20000d00
 800b858:	20000d68 	.word	0x20000d68

0800b85c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <xTaskGetCurrentTaskHandle+0x1c>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b868:	687b      	ldr	r3, [r7, #4]
	}
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	20000874 	.word	0x20000874

0800b87c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b882:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <xTaskGetSchedulerState+0x34>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b88a:	2301      	movs	r3, #1
 800b88c:	607b      	str	r3, [r7, #4]
 800b88e:	e008      	b.n	800b8a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b890:	4b08      	ldr	r3, [pc, #32]	; (800b8b4 <xTaskGetSchedulerState+0x38>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d102      	bne.n	800b89e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b898:	2302      	movs	r3, #2
 800b89a:	607b      	str	r3, [r7, #4]
 800b89c:	e001      	b.n	800b8a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b8a2:	687b      	ldr	r3, [r7, #4]
	}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20000d54 	.word	0x20000d54
 800b8b4:	20000d70 	.word	0x20000d70

0800b8b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d051      	beq.n	800b972 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d2:	4b2a      	ldr	r3, [pc, #168]	; (800b97c <xTaskPriorityInherit+0xc4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d241      	bcs.n	800b960 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	db06      	blt.n	800b8f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8e4:	4b25      	ldr	r3, [pc, #148]	; (800b97c <xTaskPriorityInherit+0xc4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	6959      	ldr	r1, [r3, #20]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <xTaskPriorityInherit+0xc8>)
 800b904:	4413      	add	r3, r2
 800b906:	4299      	cmp	r1, r3
 800b908:	d122      	bne.n	800b950 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f85c 	bl	80099cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b914:	4b19      	ldr	r3, [pc, #100]	; (800b97c <xTaskPriorityInherit+0xc4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b922:	4b18      	ldr	r3, [pc, #96]	; (800b984 <xTaskPriorityInherit+0xcc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d903      	bls.n	800b932 <xTaskPriorityInherit+0x7a>
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	4a15      	ldr	r2, [pc, #84]	; (800b984 <xTaskPriorityInherit+0xcc>)
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4a10      	ldr	r2, [pc, #64]	; (800b980 <xTaskPriorityInherit+0xc8>)
 800b940:	441a      	add	r2, r3
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3304      	adds	r3, #4
 800b946:	4619      	mov	r1, r3
 800b948:	4610      	mov	r0, r2
 800b94a:	f7fd ffe2 	bl	8009912 <vListInsertEnd>
 800b94e:	e004      	b.n	800b95a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b950:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <xTaskPriorityInherit+0xc4>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b95a:	2301      	movs	r3, #1
 800b95c:	60fb      	str	r3, [r7, #12]
 800b95e:	e008      	b.n	800b972 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b964:	4b05      	ldr	r3, [pc, #20]	; (800b97c <xTaskPriorityInherit+0xc4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d201      	bcs.n	800b972 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b972:	68fb      	ldr	r3, [r7, #12]
	}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20000874 	.word	0x20000874
 800b980:	20000878 	.word	0x20000878
 800b984:	20000d50 	.word	0x20000d50

0800b988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b994:	2300      	movs	r3, #0
 800b996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d056      	beq.n	800ba4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b99e:	4b2e      	ldr	r3, [pc, #184]	; (800ba58 <xTaskPriorityDisinherit+0xd0>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	693a      	ldr	r2, [r7, #16]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d00a      	beq.n	800b9be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	60fb      	str	r3, [r7, #12]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	60bb      	str	r3, [r7, #8]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e0:	1e5a      	subs	r2, r3, #1
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d02c      	beq.n	800ba4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d128      	bne.n	800ba4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fd ffe4 	bl	80099cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <xTaskPriorityDisinherit+0xd4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d903      	bls.n	800ba2c <xTaskPriorityDisinherit+0xa4>
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	4a0c      	ldr	r2, [pc, #48]	; (800ba5c <xTaskPriorityDisinherit+0xd4>)
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <xTaskPriorityDisinherit+0xd8>)
 800ba3a:	441a      	add	r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4619      	mov	r1, r3
 800ba42:	4610      	mov	r0, r2
 800ba44:	f7fd ff65 	bl	8009912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba4c:	697b      	ldr	r3, [r7, #20]
	}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20000874 	.word	0x20000874
 800ba5c:	20000d50 	.word	0x20000d50
 800ba60:	20000878 	.word	0x20000878

0800ba64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b088      	sub	sp, #32
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba72:	2301      	movs	r3, #1
 800ba74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d06a      	beq.n	800bb52 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	60fb      	str	r3, [r7, #12]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d902      	bls.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	e002      	b.n	800bab0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	69fa      	ldr	r2, [r7, #28]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d04b      	beq.n	800bb52 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d146      	bne.n	800bb52 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bac4:	4b25      	ldr	r3, [pc, #148]	; (800bb5c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d10a      	bne.n	800bae4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	60bb      	str	r3, [r7, #8]
}
 800bae0:	bf00      	nop
 800bae2:	e7fe      	b.n	800bae2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	db04      	blt.n	800bb02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf8:	69fb      	ldr	r3, [r7, #28]
 800bafa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	6959      	ldr	r1, [r3, #20]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4413      	add	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4a13      	ldr	r2, [pc, #76]	; (800bb60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb12:	4413      	add	r3, r2
 800bb14:	4299      	cmp	r1, r3
 800bb16:	d11c      	bne.n	800bb52 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fd ff55 	bl	80099cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	4b0f      	ldr	r3, [pc, #60]	; (800bb64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d903      	bls.n	800bb36 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb32:	4a0c      	ldr	r2, [pc, #48]	; (800bb64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4a07      	ldr	r2, [pc, #28]	; (800bb60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb44:	441a      	add	r2, r3
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fd fee0 	bl	8009912 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb52:	bf00      	nop
 800bb54:	3720      	adds	r7, #32
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000874 	.word	0x20000874
 800bb60:	20000878 	.word	0x20000878
 800bb64:	20000d50 	.word	0x20000d50

0800bb68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb68:	b480      	push	{r7}
 800bb6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb6c:	4b07      	ldr	r3, [pc, #28]	; (800bb8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb7a:	3201      	adds	r2, #1
 800bb7c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bb7e:	4b03      	ldr	r3, [pc, #12]	; (800bb8c <pvTaskIncrementMutexHeldCount+0x24>)
 800bb80:	681b      	ldr	r3, [r3, #0]
	}
 800bb82:	4618      	mov	r0, r3
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000874 	.word	0x20000874

0800bb90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb9a:	4b21      	ldr	r3, [pc, #132]	; (800bc20 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd ff10 	bl	80099cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb2:	d10a      	bne.n	800bbca <prvAddCurrentTaskToDelayedList+0x3a>
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d007      	beq.n	800bbca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbba:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4819      	ldr	r0, [pc, #100]	; (800bc28 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbc4:	f7fd fea5 	bl	8009912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbc8:	e026      	b.n	800bc18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4413      	add	r3, r2
 800bbd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbd2:	4b14      	ldr	r3, [pc, #80]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d209      	bcs.n	800bbf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbe2:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3304      	adds	r3, #4
 800bbec:	4619      	mov	r1, r3
 800bbee:	4610      	mov	r0, r2
 800bbf0:	f7fd feb3 	bl	800995a <vListInsert>
}
 800bbf4:	e010      	b.n	800bc18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf6:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4b0a      	ldr	r3, [pc, #40]	; (800bc24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3304      	adds	r3, #4
 800bc00:	4619      	mov	r1, r3
 800bc02:	4610      	mov	r0, r2
 800bc04:	f7fd fea9 	bl	800995a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d202      	bcs.n	800bc18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc12:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6013      	str	r3, [r2, #0]
}
 800bc18:	bf00      	nop
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20000d4c 	.word	0x20000d4c
 800bc24:	20000874 	.word	0x20000874
 800bc28:	20000d34 	.word	0x20000d34
 800bc2c:	20000d04 	.word	0x20000d04
 800bc30:	20000d00 	.word	0x20000d00
 800bc34:	20000d68 	.word	0x20000d68

0800bc38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b08a      	sub	sp, #40	; 0x28
 800bc3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc42:	f000 fb07 	bl	800c254 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc46:	4b1c      	ldr	r3, [pc, #112]	; (800bcb8 <xTimerCreateTimerTask+0x80>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d021      	beq.n	800bc92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc56:	1d3a      	adds	r2, r7, #4
 800bc58:	f107 0108 	add.w	r1, r7, #8
 800bc5c:	f107 030c 	add.w	r3, r7, #12
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fd fe0f 	bl	8009884 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	9202      	str	r2, [sp, #8]
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	2302      	movs	r3, #2
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	2300      	movs	r3, #0
 800bc76:	460a      	mov	r2, r1
 800bc78:	4910      	ldr	r1, [pc, #64]	; (800bcbc <xTimerCreateTimerTask+0x84>)
 800bc7a:	4811      	ldr	r0, [pc, #68]	; (800bcc0 <xTimerCreateTimerTask+0x88>)
 800bc7c:	f7fe ff94 	bl	800aba8 <xTaskCreateStatic>
 800bc80:	4603      	mov	r3, r0
 800bc82:	4a10      	ldr	r2, [pc, #64]	; (800bcc4 <xTimerCreateTimerTask+0x8c>)
 800bc84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc86:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <xTimerCreateTimerTask+0x8c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d001      	beq.n	800bc92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10a      	bne.n	800bcae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9c:	f383 8811 	msr	BASEPRI, r3
 800bca0:	f3bf 8f6f 	isb	sy
 800bca4:	f3bf 8f4f 	dsb	sy
 800bca8:	613b      	str	r3, [r7, #16]
}
 800bcaa:	bf00      	nop
 800bcac:	e7fe      	b.n	800bcac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcae:	697b      	ldr	r3, [r7, #20]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3718      	adds	r7, #24
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	20000da4 	.word	0x20000da4
 800bcbc:	0801a604 	.word	0x0801a604
 800bcc0:	0800bdfd 	.word	0x0800bdfd
 800bcc4:	20000da8 	.word	0x20000da8

0800bcc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	; 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	623b      	str	r3, [r7, #32]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcf6:	4b1a      	ldr	r3, [pc, #104]	; (800bd60 <xTimerGenericCommand+0x98>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d02a      	beq.n	800bd54 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2b05      	cmp	r3, #5
 800bd0e:	dc18      	bgt.n	800bd42 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd10:	f7ff fdb4 	bl	800b87c <xTaskGetSchedulerState>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d109      	bne.n	800bd2e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd1a:	4b11      	ldr	r3, [pc, #68]	; (800bd60 <xTimerGenericCommand+0x98>)
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	f107 0110 	add.w	r1, r7, #16
 800bd22:	2300      	movs	r3, #0
 800bd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd26:	f7fe f8d9 	bl	8009edc <xQueueGenericSend>
 800bd2a:	6278      	str	r0, [r7, #36]	; 0x24
 800bd2c:	e012      	b.n	800bd54 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd2e:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <xTimerGenericCommand+0x98>)
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	f107 0110 	add.w	r1, r7, #16
 800bd36:	2300      	movs	r3, #0
 800bd38:	2200      	movs	r2, #0
 800bd3a:	f7fe f8cf 	bl	8009edc <xQueueGenericSend>
 800bd3e:	6278      	str	r0, [r7, #36]	; 0x24
 800bd40:	e008      	b.n	800bd54 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd42:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <xTimerGenericCommand+0x98>)
 800bd44:	6818      	ldr	r0, [r3, #0]
 800bd46:	f107 0110 	add.w	r1, r7, #16
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	f7fe f9c3 	bl	800a0d8 <xQueueGenericSendFromISR>
 800bd52:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3728      	adds	r7, #40	; 0x28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000da4 	.word	0x20000da4

0800bd64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6e:	4b22      	ldr	r3, [pc, #136]	; (800bdf8 <prvProcessExpiredTimer+0x94>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd fe25 	bl	80099cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d022      	beq.n	800bdd6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	6978      	ldr	r0, [r7, #20]
 800bd9e:	f000 f8d1 	bl	800bf44 <prvInsertTimerInActiveList>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01f      	beq.n	800bde8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	6978      	ldr	r0, [r7, #20]
 800bdb4:	f7ff ff88 	bl	800bcc8 <xTimerGenericCommand>
 800bdb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d113      	bne.n	800bde8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60fb      	str	r3, [r7, #12]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bddc:	f023 0301 	bic.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	6978      	ldr	r0, [r7, #20]
 800bdee:	4798      	blx	r3
}
 800bdf0:	bf00      	nop
 800bdf2:	3718      	adds	r7, #24
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20000d9c 	.word	0x20000d9c

0800bdfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be04:	f107 0308 	add.w	r3, r7, #8
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 f857 	bl	800bebc <prvGetNextExpireTime>
 800be0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	4619      	mov	r1, r3
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f000 f803 	bl	800be20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1a:	f000 f8d5 	bl	800bfc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be1e:	e7f1      	b.n	800be04 <prvTimerTask+0x8>

0800be20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be2a:	f7ff f919 	bl	800b060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be2e:	f107 0308 	add.w	r3, r7, #8
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f866 	bl	800bf04 <prvSampleTimeNow>
 800be38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d130      	bne.n	800bea2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10a      	bne.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d806      	bhi.n	800be5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be4e:	f7ff f915 	bl	800b07c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff ff85 	bl	800bd64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be5a:	e024      	b.n	800bea6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be62:	4b13      	ldr	r3, [pc, #76]	; (800beb0 <prvProcessTimerOrBlockTask+0x90>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <prvProcessTimerOrBlockTask+0x50>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e000      	b.n	800be72 <prvProcessTimerOrBlockTask+0x52>
 800be70:	2300      	movs	r3, #0
 800be72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be74:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <prvProcessTimerOrBlockTask+0x94>)
 800be76:	6818      	ldr	r0, [r3, #0]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe fe5d 	bl	800ab40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be86:	f7ff f8f9 	bl	800b07c <xTaskResumeAll>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be90:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <prvProcessTimerOrBlockTask+0x98>)
 800be92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be96:	601a      	str	r2, [r3, #0]
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	f3bf 8f6f 	isb	sy
}
 800bea0:	e001      	b.n	800bea6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bea2:	f7ff f8eb 	bl	800b07c <xTaskResumeAll>
}
 800bea6:	bf00      	nop
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	20000da0 	.word	0x20000da0
 800beb4:	20000da4 	.word	0x20000da4
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bec4:	4b0e      	ldr	r3, [pc, #56]	; (800bf00 <prvGetNextExpireTime+0x44>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <prvGetNextExpireTime+0x16>
 800bece:	2201      	movs	r2, #1
 800bed0:	e000      	b.n	800bed4 <prvGetNextExpireTime+0x18>
 800bed2:	2200      	movs	r2, #0
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee0:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <prvGetNextExpireTime+0x44>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]
 800beea:	e001      	b.n	800bef0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef0:	68fb      	ldr	r3, [r7, #12]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	20000d9c 	.word	0x20000d9c

0800bf04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf0c:	f7ff f954 	bl	800b1b8 <xTaskGetTickCount>
 800bf10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf12:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <prvSampleTimeNow+0x3c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d205      	bcs.n	800bf28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf1c:	f000 f936 	bl	800c18c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e002      	b.n	800bf2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf2e:	4a04      	ldr	r2, [pc, #16]	; (800bf40 <prvSampleTimeNow+0x3c>)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf34:	68fb      	ldr	r3, [r7, #12]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20000dac 	.word	0x20000dac

0800bf44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf52:	2300      	movs	r3, #0
 800bf54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d812      	bhi.n	800bf90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	1ad2      	subs	r2, r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	e01b      	b.n	800bfb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf7e:	4b10      	ldr	r3, [pc, #64]	; (800bfc0 <prvInsertTimerInActiveList+0x7c>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f7fd fce6 	bl	800995a <vListInsert>
 800bf8e:	e012      	b.n	800bfb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d206      	bcs.n	800bfa6 <prvInsertTimerInActiveList+0x62>
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d302      	bcc.n	800bfa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	617b      	str	r3, [r7, #20]
 800bfa4:	e007      	b.n	800bfb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfa6:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <prvInsertTimerInActiveList+0x80>)
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fd fcd2 	bl	800995a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfb6:	697b      	ldr	r3, [r7, #20]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	20000da0 	.word	0x20000da0
 800bfc4:	20000d9c 	.word	0x20000d9c

0800bfc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08e      	sub	sp, #56	; 0x38
 800bfcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfce:	e0ca      	b.n	800c166 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	da18      	bge.n	800c008 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfd6:	1d3b      	adds	r3, r7, #4
 800bfd8:	3304      	adds	r3, #4
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10a      	bne.n	800bff8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	61fb      	str	r3, [r7, #28]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bffe:	6850      	ldr	r0, [r2, #4]
 800c000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c002:	6892      	ldr	r2, [r2, #8]
 800c004:	4611      	mov	r1, r2
 800c006:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f2c0 80aa 	blt.w	800c164 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	695b      	ldr	r3, [r3, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	3304      	adds	r3, #4
 800c020:	4618      	mov	r0, r3
 800c022:	f7fd fcd3 	bl	80099cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c026:	463b      	mov	r3, r7
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff ff6b 	bl	800bf04 <prvSampleTimeNow>
 800c02e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2b09      	cmp	r3, #9
 800c034:	f200 8097 	bhi.w	800c166 <prvProcessReceivedCommands+0x19e>
 800c038:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <prvProcessReceivedCommands+0x78>)
 800c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03e:	bf00      	nop
 800c040:	0800c069 	.word	0x0800c069
 800c044:	0800c069 	.word	0x0800c069
 800c048:	0800c069 	.word	0x0800c069
 800c04c:	0800c0dd 	.word	0x0800c0dd
 800c050:	0800c0f1 	.word	0x0800c0f1
 800c054:	0800c13b 	.word	0x0800c13b
 800c058:	0800c069 	.word	0x0800c069
 800c05c:	0800c069 	.word	0x0800c069
 800c060:	0800c0dd 	.word	0x0800c0dd
 800c064:	0800c0f1 	.word	0x0800c0f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	b2da      	uxtb	r2, r3
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	18d1      	adds	r1, r2, r3
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c088:	f7ff ff5c 	bl	800bf44 <prvInsertTimerInActiveList>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d069      	beq.n	800c166 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c098:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d05e      	beq.n	800c166 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	441a      	add	r2, r3
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0ba:	f7ff fe05 	bl	800bcc8 <xTimerGenericCommand>
 800c0be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c0:	6a3b      	ldr	r3, [r7, #32]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d14f      	bne.n	800c166 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	61bb      	str	r3, [r7, #24]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0e2:	f023 0301 	bic.w	r3, r3, #1
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c0ee:	e03a      	b.n	800c166 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0f6:	f043 0301 	orr.w	r3, r3, #1
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10a      	bne.n	800c126 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	617b      	str	r3, [r7, #20]
}
 800c122:	bf00      	nop
 800c124:	e7fe      	b.n	800c124 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12c:	18d1      	adds	r1, r2, r3
 800c12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c134:	f7ff ff06 	bl	800bf44 <prvInsertTimerInActiveList>
					break;
 800c138:	e015      	b.n	800c166 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c14a:	f000 fbe1 	bl	800c910 <vPortFree>
 800c14e:	e00a      	b.n	800c166 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c156:	f023 0301 	bic.w	r3, r3, #1
 800c15a:	b2da      	uxtb	r2, r3
 800c15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c162:	e000      	b.n	800c166 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c164:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c166:	4b08      	ldr	r3, [pc, #32]	; (800c188 <prvProcessReceivedCommands+0x1c0>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	1d39      	adds	r1, r7, #4
 800c16c:	2200      	movs	r2, #0
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe f8da 	bl	800a328 <xQueueReceive>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	f47f af2a 	bne.w	800bfd0 <prvProcessReceivedCommands+0x8>
	}
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3730      	adds	r7, #48	; 0x30
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000da4 	.word	0x20000da4

0800c18c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b088      	sub	sp, #32
 800c190:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c192:	e048      	b.n	800c226 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c194:	4b2d      	ldr	r3, [pc, #180]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19e:	4b2b      	ldr	r3, [pc, #172]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fd fc0d 	bl	80099cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d02e      	beq.n	800c226 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d90e      	bls.n	800c1f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1e6:	4b19      	ldr	r3, [pc, #100]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4610      	mov	r0, r2
 800c1f2:	f7fd fbb2 	bl	800995a <vListInsert>
 800c1f6:	e016      	b.n	800c226 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	2100      	movs	r1, #0
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f7ff fd60 	bl	800bcc8 <xTimerGenericCommand>
 800c208:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	603b      	str	r3, [r7, #0]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c226:	4b09      	ldr	r3, [pc, #36]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1b1      	bne.n	800c194 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c230:	4b06      	ldr	r3, [pc, #24]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c236:	4b06      	ldr	r3, [pc, #24]	; (800c250 <prvSwitchTimerLists+0xc4>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a04      	ldr	r2, [pc, #16]	; (800c24c <prvSwitchTimerLists+0xc0>)
 800c23c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c23e:	4a04      	ldr	r2, [pc, #16]	; (800c250 <prvSwitchTimerLists+0xc4>)
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	6013      	str	r3, [r2, #0]
}
 800c244:	bf00      	nop
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20000d9c 	.word	0x20000d9c
 800c250:	20000da0 	.word	0x20000da0

0800c254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c25a:	f000 f96b 	bl	800c534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c25e:	4b15      	ldr	r3, [pc, #84]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d120      	bne.n	800c2a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c266:	4814      	ldr	r0, [pc, #80]	; (800c2b8 <prvCheckForValidListAndQueue+0x64>)
 800c268:	f7fd fb26 	bl	80098b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c26c:	4813      	ldr	r0, [pc, #76]	; (800c2bc <prvCheckForValidListAndQueue+0x68>)
 800c26e:	f7fd fb23 	bl	80098b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c272:	4b13      	ldr	r3, [pc, #76]	; (800c2c0 <prvCheckForValidListAndQueue+0x6c>)
 800c274:	4a10      	ldr	r2, [pc, #64]	; (800c2b8 <prvCheckForValidListAndQueue+0x64>)
 800c276:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c278:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <prvCheckForValidListAndQueue+0x70>)
 800c27a:	4a10      	ldr	r2, [pc, #64]	; (800c2bc <prvCheckForValidListAndQueue+0x68>)
 800c27c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c27e:	2300      	movs	r3, #0
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <prvCheckForValidListAndQueue+0x74>)
 800c284:	4a11      	ldr	r2, [pc, #68]	; (800c2cc <prvCheckForValidListAndQueue+0x78>)
 800c286:	2110      	movs	r1, #16
 800c288:	200a      	movs	r0, #10
 800c28a:	f7fd fc31 	bl	8009af0 <xQueueGenericCreateStatic>
 800c28e:	4603      	mov	r3, r0
 800c290:	4a08      	ldr	r2, [pc, #32]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c292:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c294:	4b07      	ldr	r3, [pc, #28]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d005      	beq.n	800c2a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <prvCheckForValidListAndQueue+0x60>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	490b      	ldr	r1, [pc, #44]	; (800c2d0 <prvCheckForValidListAndQueue+0x7c>)
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe fbf8 	bl	800aa98 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2a8:	f000 f974 	bl	800c594 <vPortExitCritical>
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000da4 	.word	0x20000da4
 800c2b8:	20000d74 	.word	0x20000d74
 800c2bc:	20000d88 	.word	0x20000d88
 800c2c0:	20000d9c 	.word	0x20000d9c
 800c2c4:	20000da0 	.word	0x20000da0
 800c2c8:	20000e50 	.word	0x20000e50
 800c2cc:	20000db0 	.word	0x20000db0
 800c2d0:	0801a60c 	.word	0x0801a60c

0800c2d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3b04      	subs	r3, #4
 800c2e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c2ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	f023 0201 	bic.w	r2, r3, #1
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3b04      	subs	r3, #4
 800c302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c304:	4a0c      	ldr	r2, [pc, #48]	; (800c338 <pxPortInitialiseStack+0x64>)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	3b14      	subs	r3, #20
 800c30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	3b04      	subs	r3, #4
 800c31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f06f 0202 	mvn.w	r2, #2
 800c322:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3b20      	subs	r3, #32
 800c328:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c32a:	68fb      	ldr	r3, [r7, #12]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	0800c33d 	.word	0x0800c33d

0800c33c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	b085      	sub	sp, #20
 800c340:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c346:	4b12      	ldr	r3, [pc, #72]	; (800c390 <prvTaskExitError+0x54>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34e:	d00a      	beq.n	800c366 <prvTaskExitError+0x2a>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	60fb      	str	r3, [r7, #12]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <prvTaskExitError+0x28>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60bb      	str	r3, [r7, #8]
}
 800c378:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c37a:	bf00      	nop
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d0fc      	beq.n	800c37c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr
 800c390:	20000054 	.word	0x20000054
	...

0800c3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <pxCurrentTCBConst2>)
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	6808      	ldr	r0, [r1, #0]
 800c3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f380 8809 	msr	PSP, r0
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8811 	msr	BASEPRI, r0
 800c3ba:	4770      	bx	lr
 800c3bc:	f3af 8000 	nop.w

0800c3c0 <pxCurrentTCBConst2>:
 800c3c0:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3c8:	4808      	ldr	r0, [pc, #32]	; (800c3ec <prvPortStartFirstTask+0x24>)
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	6800      	ldr	r0, [r0, #0]
 800c3ce:	f380 8808 	msr	MSP, r0
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8814 	msr	CONTROL, r0
 800c3da:	b662      	cpsie	i
 800c3dc:	b661      	cpsie	f
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	df00      	svc	0
 800c3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3ea:	bf00      	nop
 800c3ec:	e000ed08 	.word	0xe000ed08

0800c3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3f6:	4b46      	ldr	r3, [pc, #280]	; (800c510 <xPortStartScheduler+0x120>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	4a46      	ldr	r2, [pc, #280]	; (800c514 <xPortStartScheduler+0x124>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d10a      	bne.n	800c416 <xPortStartScheduler+0x26>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	613b      	str	r3, [r7, #16]
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c416:	4b3e      	ldr	r3, [pc, #248]	; (800c510 <xPortStartScheduler+0x120>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a3f      	ldr	r2, [pc, #252]	; (800c518 <xPortStartScheduler+0x128>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10a      	bne.n	800c436 <xPortStartScheduler+0x46>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60fb      	str	r3, [r7, #12]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c436:	4b39      	ldr	r3, [pc, #228]	; (800c51c <xPortStartScheduler+0x12c>)
 800c438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	22ff      	movs	r2, #255	; 0xff
 800c446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c450:	78fb      	ldrb	r3, [r7, #3]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	4b31      	ldr	r3, [pc, #196]	; (800c520 <xPortStartScheduler+0x130>)
 800c45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c45e:	4b31      	ldr	r3, [pc, #196]	; (800c524 <xPortStartScheduler+0x134>)
 800c460:	2207      	movs	r2, #7
 800c462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c464:	e009      	b.n	800c47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c466:	4b2f      	ldr	r3, [pc, #188]	; (800c524 <xPortStartScheduler+0x134>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3b01      	subs	r3, #1
 800c46c:	4a2d      	ldr	r2, [pc, #180]	; (800c524 <xPortStartScheduler+0x134>)
 800c46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	005b      	lsls	r3, r3, #1
 800c476:	b2db      	uxtb	r3, r3
 800c478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c482:	2b80      	cmp	r3, #128	; 0x80
 800c484:	d0ef      	beq.n	800c466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c486:	4b27      	ldr	r3, [pc, #156]	; (800c524 <xPortStartScheduler+0x134>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f1c3 0307 	rsb	r3, r3, #7
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d00a      	beq.n	800c4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	60bb      	str	r3, [r7, #8]
}
 800c4a4:	bf00      	nop
 800c4a6:	e7fe      	b.n	800c4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4a8:	4b1e      	ldr	r3, [pc, #120]	; (800c524 <xPortStartScheduler+0x134>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	4a1d      	ldr	r2, [pc, #116]	; (800c524 <xPortStartScheduler+0x134>)
 800c4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4b2:	4b1c      	ldr	r3, [pc, #112]	; (800c524 <xPortStartScheduler+0x134>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4ba:	4a1a      	ldr	r2, [pc, #104]	; (800c524 <xPortStartScheduler+0x134>)
 800c4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	b2da      	uxtb	r2, r3
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <xPortStartScheduler+0x138>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <xPortStartScheduler+0x138>)
 800c4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4d2:	4b15      	ldr	r3, [pc, #84]	; (800c528 <xPortStartScheduler+0x138>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a14      	ldr	r2, [pc, #80]	; (800c528 <xPortStartScheduler+0x138>)
 800c4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4de:	f000 f8dd 	bl	800c69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4e2:	4b12      	ldr	r3, [pc, #72]	; (800c52c <xPortStartScheduler+0x13c>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4e8:	f000 f8fc 	bl	800c6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4ec:	4b10      	ldr	r3, [pc, #64]	; (800c530 <xPortStartScheduler+0x140>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a0f      	ldr	r2, [pc, #60]	; (800c530 <xPortStartScheduler+0x140>)
 800c4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4f8:	f7ff ff66 	bl	800c3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4fc:	f7fe ff38 	bl	800b370 <vTaskSwitchContext>
	prvTaskExitError();
 800c500:	f7ff ff1c 	bl	800c33c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	e000ed00 	.word	0xe000ed00
 800c514:	410fc271 	.word	0x410fc271
 800c518:	410fc270 	.word	0x410fc270
 800c51c:	e000e400 	.word	0xe000e400
 800c520:	20000ea0 	.word	0x20000ea0
 800c524:	20000ea4 	.word	0x20000ea4
 800c528:	e000ed20 	.word	0xe000ed20
 800c52c:	20000054 	.word	0x20000054
 800c530:	e000ef34 	.word	0xe000ef34

0800c534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	607b      	str	r3, [r7, #4]
}
 800c54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c54e:	4b0f      	ldr	r3, [pc, #60]	; (800c58c <vPortEnterCritical+0x58>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3301      	adds	r3, #1
 800c554:	4a0d      	ldr	r2, [pc, #52]	; (800c58c <vPortEnterCritical+0x58>)
 800c556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c558:	4b0c      	ldr	r3, [pc, #48]	; (800c58c <vPortEnterCritical+0x58>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d10f      	bne.n	800c580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c560:	4b0b      	ldr	r3, [pc, #44]	; (800c590 <vPortEnterCritical+0x5c>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d00a      	beq.n	800c580 <vPortEnterCritical+0x4c>
	__asm volatile
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	603b      	str	r3, [r7, #0]
}
 800c57c:	bf00      	nop
 800c57e:	e7fe      	b.n	800c57e <vPortEnterCritical+0x4a>
	}
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	20000054 	.word	0x20000054
 800c590:	e000ed04 	.word	0xe000ed04

0800c594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c59a:	4b12      	ldr	r3, [pc, #72]	; (800c5e4 <vPortExitCritical+0x50>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d10a      	bne.n	800c5b8 <vPortExitCritical+0x24>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	607b      	str	r3, [r7, #4]
}
 800c5b4:	bf00      	nop
 800c5b6:	e7fe      	b.n	800c5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5b8:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	4a09      	ldr	r2, [pc, #36]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <vPortExitCritical+0x50>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d105      	bne.n	800c5d6 <vPortExitCritical+0x42>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	f383 8811 	msr	BASEPRI, r3
}
 800c5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20000054 	.word	0x20000054
	...

0800c5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5f0:	f3ef 8009 	mrs	r0, PSP
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	4b15      	ldr	r3, [pc, #84]	; (800c650 <pxCurrentTCBConst>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	f01e 0f10 	tst.w	lr, #16
 800c600:	bf08      	it	eq
 800c602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	6010      	str	r0, [r2, #0]
 800c60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c614:	f380 8811 	msr	BASEPRI, r0
 800c618:	f3bf 8f4f 	dsb	sy
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f7fe fea6 	bl	800b370 <vTaskSwitchContext>
 800c624:	f04f 0000 	mov.w	r0, #0
 800c628:	f380 8811 	msr	BASEPRI, r0
 800c62c:	bc09      	pop	{r0, r3}
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	6808      	ldr	r0, [r1, #0]
 800c632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c636:	f01e 0f10 	tst.w	lr, #16
 800c63a:	bf08      	it	eq
 800c63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c640:	f380 8809 	msr	PSP, r0
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	f3af 8000 	nop.w

0800c650 <pxCurrentTCBConst>:
 800c650:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c654:	bf00      	nop
 800c656:	bf00      	nop

0800c658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	607b      	str	r3, [r7, #4]
}
 800c670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c672:	f7fe fdc3 	bl	800b1fc <xTaskIncrementTick>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d003      	beq.n	800c684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c67c:	4b06      	ldr	r3, [pc, #24]	; (800c698 <xPortSysTickHandler+0x40>)
 800c67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c682:	601a      	str	r2, [r3, #0]
 800c684:	2300      	movs	r3, #0
 800c686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	f383 8811 	msr	BASEPRI, r3
}
 800c68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c69c:	b480      	push	{r7}
 800c69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6a0:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <vPortSetupTimerInterrupt+0x34>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <vPortSetupTimerInterrupt+0x38>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6ac:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a0a      	ldr	r2, [pc, #40]	; (800c6dc <vPortSetupTimerInterrupt+0x40>)
 800c6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b6:	099b      	lsrs	r3, r3, #6
 800c6b8:	4a09      	ldr	r2, [pc, #36]	; (800c6e0 <vPortSetupTimerInterrupt+0x44>)
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6be:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <vPortSetupTimerInterrupt+0x34>)
 800c6c0:	2207      	movs	r2, #7
 800c6c2:	601a      	str	r2, [r3, #0]
}
 800c6c4:	bf00      	nop
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	e000e010 	.word	0xe000e010
 800c6d4:	e000e018 	.word	0xe000e018
 800c6d8:	20000000 	.word	0x20000000
 800c6dc:	10624dd3 	.word	0x10624dd3
 800c6e0:	e000e014 	.word	0xe000e014

0800c6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c6f4 <vPortEnableVFP+0x10>
 800c6e8:	6801      	ldr	r1, [r0, #0]
 800c6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c6ee:	6001      	str	r1, [r0, #0]
 800c6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6f2:	bf00      	nop
 800c6f4:	e000ed88 	.word	0xe000ed88

0800c6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6fe:	f3ef 8305 	mrs	r3, IPSR
 800c702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2b0f      	cmp	r3, #15
 800c708:	d914      	bls.n	800c734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c70a:	4a17      	ldr	r2, [pc, #92]	; (800c768 <vPortValidateInterruptPriority+0x70>)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c714:	4b15      	ldr	r3, [pc, #84]	; (800c76c <vPortValidateInterruptPriority+0x74>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	7afa      	ldrb	r2, [r7, #11]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d20a      	bcs.n	800c734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c734:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <vPortValidateInterruptPriority+0x78>)
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <vPortValidateInterruptPriority+0x7c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d90a      	bls.n	800c75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	603b      	str	r3, [r7, #0]
}
 800c756:	bf00      	nop
 800c758:	e7fe      	b.n	800c758 <vPortValidateInterruptPriority+0x60>
	}
 800c75a:	bf00      	nop
 800c75c:	3714      	adds	r7, #20
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	e000e3f0 	.word	0xe000e3f0
 800c76c:	20000ea0 	.word	0x20000ea0
 800c770:	e000ed0c 	.word	0xe000ed0c
 800c774:	20000ea4 	.word	0x20000ea4

0800c778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b08a      	sub	sp, #40	; 0x28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c784:	f7fe fc6c 	bl	800b060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c788:	4b5b      	ldr	r3, [pc, #364]	; (800c8f8 <pvPortMalloc+0x180>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d101      	bne.n	800c794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c790:	f000 f920 	bl	800c9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c794:	4b59      	ldr	r3, [pc, #356]	; (800c8fc <pvPortMalloc+0x184>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4013      	ands	r3, r2
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f040 8093 	bne.w	800c8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d01d      	beq.n	800c7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c7a8:	2208      	movs	r2, #8
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f003 0307 	and.w	r3, r3, #7
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d014      	beq.n	800c7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f023 0307 	bic.w	r3, r3, #7
 800c7c0:	3308      	adds	r3, #8
 800c7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00a      	beq.n	800c7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	617b      	str	r3, [r7, #20]
}
 800c7e0:	bf00      	nop
 800c7e2:	e7fe      	b.n	800c7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d06e      	beq.n	800c8c8 <pvPortMalloc+0x150>
 800c7ea:	4b45      	ldr	r3, [pc, #276]	; (800c900 <pvPortMalloc+0x188>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d869      	bhi.n	800c8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7f4:	4b43      	ldr	r3, [pc, #268]	; (800c904 <pvPortMalloc+0x18c>)
 800c7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7f8:	4b42      	ldr	r3, [pc, #264]	; (800c904 <pvPortMalloc+0x18c>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7fe:	e004      	b.n	800c80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d903      	bls.n	800c81c <pvPortMalloc+0xa4>
 800c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f1      	bne.n	800c800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c81c:	4b36      	ldr	r3, [pc, #216]	; (800c8f8 <pvPortMalloc+0x180>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c822:	429a      	cmp	r2, r3
 800c824:	d050      	beq.n	800c8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2208      	movs	r2, #8
 800c82c:	4413      	add	r3, r2
 800c82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	2308      	movs	r3, #8
 800c842:	005b      	lsls	r3, r3, #1
 800c844:	429a      	cmp	r2, r3
 800c846:	d91f      	bls.n	800c888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4413      	add	r3, r2
 800c84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	f003 0307 	and.w	r3, r3, #7
 800c856:	2b00      	cmp	r3, #0
 800c858:	d00a      	beq.n	800c870 <pvPortMalloc+0xf8>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	613b      	str	r3, [r7, #16]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	1ad2      	subs	r2, r2, r3
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c882:	69b8      	ldr	r0, [r7, #24]
 800c884:	f000 f908 	bl	800ca98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c888:	4b1d      	ldr	r3, [pc, #116]	; (800c900 <pvPortMalloc+0x188>)
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	1ad3      	subs	r3, r2, r3
 800c892:	4a1b      	ldr	r2, [pc, #108]	; (800c900 <pvPortMalloc+0x188>)
 800c894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c896:	4b1a      	ldr	r3, [pc, #104]	; (800c900 <pvPortMalloc+0x188>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	4b1b      	ldr	r3, [pc, #108]	; (800c908 <pvPortMalloc+0x190>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d203      	bcs.n	800c8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8a2:	4b17      	ldr	r3, [pc, #92]	; (800c900 <pvPortMalloc+0x188>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a18      	ldr	r2, [pc, #96]	; (800c908 <pvPortMalloc+0x190>)
 800c8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <pvPortMalloc+0x184>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <pvPortMalloc+0x194>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	4a11      	ldr	r2, [pc, #68]	; (800c90c <pvPortMalloc+0x194>)
 800c8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8c8:	f7fe fbd8 	bl	800b07c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00a      	beq.n	800c8ec <pvPortMalloc+0x174>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	60fb      	str	r3, [r7, #12]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <pvPortMalloc+0x172>
	return pvReturn;
 800c8ec:	69fb      	ldr	r3, [r7, #28]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3728      	adds	r7, #40	; 0x28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20004ab0 	.word	0x20004ab0
 800c8fc:	20004ac4 	.word	0x20004ac4
 800c900:	20004ab4 	.word	0x20004ab4
 800c904:	20004aa8 	.word	0x20004aa8
 800c908:	20004ab8 	.word	0x20004ab8
 800c90c:	20004abc 	.word	0x20004abc

0800c910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d04d      	beq.n	800c9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c922:	2308      	movs	r3, #8
 800c924:	425b      	negs	r3, r3
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4413      	add	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <vPortFree+0xb8>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4013      	ands	r3, r2
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10a      	bne.n	800c954 <vPortFree+0x44>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	60fb      	str	r3, [r7, #12]
}
 800c950:	bf00      	nop
 800c952:	e7fe      	b.n	800c952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00a      	beq.n	800c972 <vPortFree+0x62>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	60bb      	str	r3, [r7, #8]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4b14      	ldr	r3, [pc, #80]	; (800c9c8 <vPortFree+0xb8>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d01e      	beq.n	800c9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d11a      	bne.n	800c9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <vPortFree+0xb8>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	43db      	mvns	r3, r3
 800c992:	401a      	ands	r2, r3
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c998:	f7fe fb62 	bl	800b060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	685a      	ldr	r2, [r3, #4]
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <vPortFree+0xbc>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	4a09      	ldr	r2, [pc, #36]	; (800c9cc <vPortFree+0xbc>)
 800c9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9aa:	6938      	ldr	r0, [r7, #16]
 800c9ac:	f000 f874 	bl	800ca98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9b0:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <vPortFree+0xc0>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <vPortFree+0xc0>)
 800c9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9ba:	f7fe fb5f 	bl	800b07c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9be:	bf00      	nop
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20004ac4 	.word	0x20004ac4
 800c9cc:	20004ab4 	.word	0x20004ab4
 800c9d0:	20004ac0 	.word	0x20004ac0

0800c9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9e0:	4b27      	ldr	r3, [pc, #156]	; (800ca80 <prvHeapInit+0xac>)
 800c9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	f003 0307 	and.w	r3, r3, #7
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d00c      	beq.n	800ca08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3307      	adds	r3, #7
 800c9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f023 0307 	bic.w	r3, r3, #7
 800c9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	1ad3      	subs	r3, r2, r3
 800ca02:	4a1f      	ldr	r2, [pc, #124]	; (800ca80 <prvHeapInit+0xac>)
 800ca04:	4413      	add	r3, r2
 800ca06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca0c:	4a1d      	ldr	r2, [pc, #116]	; (800ca84 <prvHeapInit+0xb0>)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca12:	4b1c      	ldr	r3, [pc, #112]	; (800ca84 <prvHeapInit+0xb0>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca20:	2208      	movs	r2, #8
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	1a9b      	subs	r3, r3, r2
 800ca26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f023 0307 	bic.w	r3, r3, #7
 800ca2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	4a15      	ldr	r2, [pc, #84]	; (800ca88 <prvHeapInit+0xb4>)
 800ca34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <prvHeapInit+0xb4>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca3e:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <prvHeapInit+0xb4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2200      	movs	r2, #0
 800ca44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	1ad2      	subs	r2, r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca54:	4b0c      	ldr	r3, [pc, #48]	; (800ca88 <prvHeapInit+0xb4>)
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <prvHeapInit+0xb8>)
 800ca62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	4a09      	ldr	r2, [pc, #36]	; (800ca90 <prvHeapInit+0xbc>)
 800ca6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <prvHeapInit+0xc0>)
 800ca6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	bf00      	nop
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr
 800ca80:	20000ea8 	.word	0x20000ea8
 800ca84:	20004aa8 	.word	0x20004aa8
 800ca88:	20004ab0 	.word	0x20004ab0
 800ca8c:	20004ab8 	.word	0x20004ab8
 800ca90:	20004ab4 	.word	0x20004ab4
 800ca94:	20004ac4 	.word	0x20004ac4

0800ca98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800caa0:	4b28      	ldr	r3, [pc, #160]	; (800cb44 <prvInsertBlockIntoFreeList+0xac>)
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e002      	b.n	800caac <prvInsertBlockIntoFreeList+0x14>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	60fb      	str	r3, [r7, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d8f7      	bhi.n	800caa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	4413      	add	r3, r2
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d108      	bne.n	800cada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	685a      	ldr	r2, [r3, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	441a      	add	r2, r3
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	68ba      	ldr	r2, [r7, #8]
 800cae4:	441a      	add	r2, r3
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d118      	bne.n	800cb20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	4b15      	ldr	r3, [pc, #84]	; (800cb48 <prvInsertBlockIntoFreeList+0xb0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d00d      	beq.n	800cb16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685a      	ldr	r2, [r3, #4]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	441a      	add	r2, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	601a      	str	r2, [r3, #0]
 800cb14:	e008      	b.n	800cb28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb16:	4b0c      	ldr	r3, [pc, #48]	; (800cb48 <prvInsertBlockIntoFreeList+0xb0>)
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	e003      	b.n	800cb28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d002      	beq.n	800cb36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb36:	bf00      	nop
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20004aa8 	.word	0x20004aa8
 800cb48:	20004ab0 	.word	0x20004ab0

0800cb4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cb56:	f007 fa97 	bl	8014088 <sys_timeouts_sleeptime>
 800cb5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb62:	d10b      	bne.n	800cb7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cb64:	4813      	ldr	r0, [pc, #76]	; (800cbb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb66:	f00c f99e 	bl	8018ea6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	6839      	ldr	r1, [r7, #0]
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f00c f926 	bl	8018dc0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cb74:	480f      	ldr	r0, [pc, #60]	; (800cbb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb76:	f00c f987 	bl	8018e88 <sys_mutex_lock>
    return;
 800cb7a:	e018      	b.n	800cbae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cb82:	f007 fa47 	bl	8014014 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cb86:	e7e6      	b.n	800cb56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cb88:	480a      	ldr	r0, [pc, #40]	; (800cbb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb8a:	f00c f98c 	bl	8018ea6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f00c f914 	bl	8018dc0 <sys_arch_mbox_fetch>
 800cb98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cb9a:	4806      	ldr	r0, [pc, #24]	; (800cbb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800cb9c:	f00c f974 	bl	8018e88 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba6:	d102      	bne.n	800cbae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cba8:	f007 fa34 	bl	8014014 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cbac:	e7d3      	b.n	800cb56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	20009944 	.word	0x20009944

0800cbb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cbc0:	4810      	ldr	r0, [pc, #64]	; (800cc04 <tcpip_thread+0x4c>)
 800cbc2:	f00c f961 	bl	8018e88 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cbc6:	4b10      	ldr	r3, [pc, #64]	; (800cc08 <tcpip_thread+0x50>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d005      	beq.n	800cbda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cbce:	4b0e      	ldr	r3, [pc, #56]	; (800cc08 <tcpip_thread+0x50>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a0e      	ldr	r2, [pc, #56]	; (800cc0c <tcpip_thread+0x54>)
 800cbd4:	6812      	ldr	r2, [r2, #0]
 800cbd6:	4610      	mov	r0, r2
 800cbd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cbda:	f107 030c 	add.w	r3, r7, #12
 800cbde:	4619      	mov	r1, r3
 800cbe0:	480b      	ldr	r0, [pc, #44]	; (800cc10 <tcpip_thread+0x58>)
 800cbe2:	f7ff ffb3 	bl	800cb4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d106      	bne.n	800cbfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cbec:	4b09      	ldr	r3, [pc, #36]	; (800cc14 <tcpip_thread+0x5c>)
 800cbee:	2291      	movs	r2, #145	; 0x91
 800cbf0:	4909      	ldr	r1, [pc, #36]	; (800cc18 <tcpip_thread+0x60>)
 800cbf2:	480a      	ldr	r0, [pc, #40]	; (800cc1c <tcpip_thread+0x64>)
 800cbf4:	f00c fb58 	bl	80192a8 <iprintf>
      continue;
 800cbf8:	e003      	b.n	800cc02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f80f 	bl	800cc20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cc02:	e7ea      	b.n	800cbda <tcpip_thread+0x22>
 800cc04:	20009944 	.word	0x20009944
 800cc08:	20004ac8 	.word	0x20004ac8
 800cc0c:	20004acc 	.word	0x20004acc
 800cc10:	20004ad0 	.word	0x20004ad0
 800cc14:	0801a614 	.word	0x0801a614
 800cc18:	0801a644 	.word	0x0801a644
 800cc1c:	0801a664 	.word	0x0801a664

0800cc20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d026      	beq.n	800cc7e <tcpip_thread_handle_msg+0x5e>
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	dc2b      	bgt.n	800cc8c <tcpip_thread_handle_msg+0x6c>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <tcpip_thread_handle_msg+0x1e>
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d015      	beq.n	800cc68 <tcpip_thread_handle_msg+0x48>
 800cc3c:	e026      	b.n	800cc8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	6850      	ldr	r0, [r2, #4]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	6892      	ldr	r2, [r2, #8]
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	4798      	blx	r3
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d004      	beq.n	800cc5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f001 fcd1 	bl	800e600 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	2009      	movs	r0, #9
 800cc62:	f000 fe1d 	bl	800d8a0 <memp_free>
      break;
 800cc66:	e018      	b.n	800cc9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	6892      	ldr	r2, [r2, #8]
 800cc70:	4610      	mov	r0, r2
 800cc72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cc74:	6879      	ldr	r1, [r7, #4]
 800cc76:	2008      	movs	r0, #8
 800cc78:	f000 fe12 	bl	800d8a0 <memp_free>
      break;
 800cc7c:	e00d      	b.n	800cc9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6892      	ldr	r2, [r2, #8]
 800cc86:	4610      	mov	r0, r2
 800cc88:	4798      	blx	r3
      break;
 800cc8a:	e006      	b.n	800cc9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cc8c:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <tcpip_thread_handle_msg+0x84>)
 800cc8e:	22cf      	movs	r2, #207	; 0xcf
 800cc90:	4905      	ldr	r1, [pc, #20]	; (800cca8 <tcpip_thread_handle_msg+0x88>)
 800cc92:	4806      	ldr	r0, [pc, #24]	; (800ccac <tcpip_thread_handle_msg+0x8c>)
 800cc94:	f00c fb08 	bl	80192a8 <iprintf>
      break;
 800cc98:	bf00      	nop
  }
}
 800cc9a:	bf00      	nop
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	0801a614 	.word	0x0801a614
 800cca8:	0801a644 	.word	0x0801a644
 800ccac:	0801a664 	.word	0x0801a664

0800ccb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	60b9      	str	r1, [r7, #8]
 800ccba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ccbc:	481a      	ldr	r0, [pc, #104]	; (800cd28 <tcpip_inpkt+0x78>)
 800ccbe:	f00c f8b0 	bl	8018e22 <sys_mbox_valid>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d105      	bne.n	800ccd4 <tcpip_inpkt+0x24>
 800ccc8:	4b18      	ldr	r3, [pc, #96]	; (800cd2c <tcpip_inpkt+0x7c>)
 800ccca:	22fc      	movs	r2, #252	; 0xfc
 800cccc:	4918      	ldr	r1, [pc, #96]	; (800cd30 <tcpip_inpkt+0x80>)
 800ccce:	4819      	ldr	r0, [pc, #100]	; (800cd34 <tcpip_inpkt+0x84>)
 800ccd0:	f00c faea 	bl	80192a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ccd4:	2009      	movs	r0, #9
 800ccd6:	f000 fd91 	bl	800d7fc <memp_malloc>
 800ccda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cce2:	f04f 33ff 	mov.w	r3, #4294967295
 800cce6:	e01a      	b.n	800cd1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cd00:	6979      	ldr	r1, [r7, #20]
 800cd02:	4809      	ldr	r0, [pc, #36]	; (800cd28 <tcpip_inpkt+0x78>)
 800cd04:	f00c f842 	bl	8018d8c <sys_mbox_trypost>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cd0e:	6979      	ldr	r1, [r7, #20]
 800cd10:	2009      	movs	r0, #9
 800cd12:	f000 fdc5 	bl	800d8a0 <memp_free>
    return ERR_MEM;
 800cd16:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1a:	e000      	b.n	800cd1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cd1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20004ad0 	.word	0x20004ad0
 800cd2c:	0801a614 	.word	0x0801a614
 800cd30:	0801a68c 	.word	0x0801a68c
 800cd34:	0801a664 	.word	0x0801a664

0800cd38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd48:	f003 0318 	and.w	r3, r3, #24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d006      	beq.n	800cd5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cd50:	4a08      	ldr	r2, [pc, #32]	; (800cd74 <tcpip_input+0x3c>)
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff ffab 	bl	800ccb0 <tcpip_inpkt>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	e005      	b.n	800cd6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800cd5e:	4a06      	ldr	r2, [pc, #24]	; (800cd78 <tcpip_input+0x40>)
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff ffa4 	bl	800ccb0 <tcpip_inpkt>
 800cd68:	4603      	mov	r3, r0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	08018bad 	.word	0x08018bad
 800cd78:	08017a85 	.word	0x08017a85

0800cd7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800cd86:	4819      	ldr	r0, [pc, #100]	; (800cdec <tcpip_try_callback+0x70>)
 800cd88:	f00c f84b 	bl	8018e22 <sys_mbox_valid>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <tcpip_try_callback+0x24>
 800cd92:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <tcpip_try_callback+0x74>)
 800cd94:	f240 125d 	movw	r2, #349	; 0x15d
 800cd98:	4916      	ldr	r1, [pc, #88]	; (800cdf4 <tcpip_try_callback+0x78>)
 800cd9a:	4817      	ldr	r0, [pc, #92]	; (800cdf8 <tcpip_try_callback+0x7c>)
 800cd9c:	f00c fa84 	bl	80192a8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800cda0:	2008      	movs	r0, #8
 800cda2:	f000 fd2b 	bl	800d7fc <memp_malloc>
 800cda6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d102      	bne.n	800cdb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb2:	e017      	b.n	800cde4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cdc6:	68f9      	ldr	r1, [r7, #12]
 800cdc8:	4808      	ldr	r0, [pc, #32]	; (800cdec <tcpip_try_callback+0x70>)
 800cdca:	f00b ffdf 	bl	8018d8c <sys_mbox_trypost>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d006      	beq.n	800cde2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cdd4:	68f9      	ldr	r1, [r7, #12]
 800cdd6:	2008      	movs	r0, #8
 800cdd8:	f000 fd62 	bl	800d8a0 <memp_free>
    return ERR_MEM;
 800cddc:	f04f 33ff 	mov.w	r3, #4294967295
 800cde0:	e000      	b.n	800cde4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20004ad0 	.word	0x20004ad0
 800cdf0:	0801a614 	.word	0x0801a614
 800cdf4:	0801a68c 	.word	0x0801a68c
 800cdf8:	0801a664 	.word	0x0801a664

0800cdfc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af02      	add	r7, sp, #8
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ce06:	f000 f871 	bl	800ceec <lwip_init>

  tcpip_init_done = initfunc;
 800ce0a:	4a17      	ldr	r2, [pc, #92]	; (800ce68 <tcpip_init+0x6c>)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ce10:	4a16      	ldr	r2, [pc, #88]	; (800ce6c <tcpip_init+0x70>)
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ce16:	2106      	movs	r1, #6
 800ce18:	4815      	ldr	r0, [pc, #84]	; (800ce70 <tcpip_init+0x74>)
 800ce1a:	f00b ff9d 	bl	8018d58 <sys_mbox_new>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d006      	beq.n	800ce32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ce24:	4b13      	ldr	r3, [pc, #76]	; (800ce74 <tcpip_init+0x78>)
 800ce26:	f240 2261 	movw	r2, #609	; 0x261
 800ce2a:	4913      	ldr	r1, [pc, #76]	; (800ce78 <tcpip_init+0x7c>)
 800ce2c:	4813      	ldr	r0, [pc, #76]	; (800ce7c <tcpip_init+0x80>)
 800ce2e:	f00c fa3b 	bl	80192a8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ce32:	4813      	ldr	r0, [pc, #76]	; (800ce80 <tcpip_init+0x84>)
 800ce34:	f00c f812 	bl	8018e5c <sys_mutex_new>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d006      	beq.n	800ce4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <tcpip_init+0x78>)
 800ce40:	f240 2265 	movw	r2, #613	; 0x265
 800ce44:	490f      	ldr	r1, [pc, #60]	; (800ce84 <tcpip_init+0x88>)
 800ce46:	480d      	ldr	r0, [pc, #52]	; (800ce7c <tcpip_init+0x80>)
 800ce48:	f00c fa2e 	bl	80192a8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ce4c:	2318      	movs	r3, #24
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce54:	2200      	movs	r2, #0
 800ce56:	490c      	ldr	r1, [pc, #48]	; (800ce88 <tcpip_init+0x8c>)
 800ce58:	480c      	ldr	r0, [pc, #48]	; (800ce8c <tcpip_init+0x90>)
 800ce5a:	f00c f831 	bl	8018ec0 <sys_thread_new>
}
 800ce5e:	bf00      	nop
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20004ac8 	.word	0x20004ac8
 800ce6c:	20004acc 	.word	0x20004acc
 800ce70:	20004ad0 	.word	0x20004ad0
 800ce74:	0801a614 	.word	0x0801a614
 800ce78:	0801a69c 	.word	0x0801a69c
 800ce7c:	0801a664 	.word	0x0801a664
 800ce80:	20009944 	.word	0x20009944
 800ce84:	0801a6c0 	.word	0x0801a6c0
 800ce88:	0800cbb9 	.word	0x0800cbb9
 800ce8c:	0801a6e4 	.word	0x0801a6e4

0800ce90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ce9a:	88fb      	ldrh	r3, [r7, #6]
 800ce9c:	021b      	lsls	r3, r3, #8
 800ce9e:	b21a      	sxth	r2, r3
 800cea0:	88fb      	ldrh	r3, [r7, #6]
 800cea2:	0a1b      	lsrs	r3, r3, #8
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	b21b      	sxth	r3, r3
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	b21b      	sxth	r3, r3
 800ceac:	b29b      	uxth	r3, r3
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr

0800ceba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	061a      	lsls	r2, r3, #24
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	021b      	lsls	r3, r3, #8
 800ceca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cece:	431a      	orrs	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	0a1b      	lsrs	r3, r3, #8
 800ced4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ced8:	431a      	orrs	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	0e1b      	lsrs	r3, r3, #24
 800cede:	4313      	orrs	r3, r2
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cef2:	2300      	movs	r3, #0
 800cef4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cef6:	f00b ffa5 	bl	8018e44 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cefa:	f000 f8d5 	bl	800d0a8 <mem_init>
  memp_init();
 800cefe:	f000 fc31 	bl	800d764 <memp_init>
  pbuf_init();
  netif_init();
 800cf02:	f000 fcf7 	bl	800d8f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cf06:	f007 f8f7 	bl	80140f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cf0a:	f001 fe23 	bl	800eb54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cf0e:	f007 f839 	bl	8013f84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	4603      	mov	r3, r0
 800cf24:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cf26:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <ptr_to_mem+0x20>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	88fb      	ldrh	r3, [r7, #6]
 800cf2c:	4413      	add	r3, r2
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	370c      	adds	r7, #12
 800cf32:	46bd      	mov	sp, r7
 800cf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20004ad4 	.word	0x20004ad4

0800cf40 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cf48:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <mem_to_ptr+0x20>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	b29b      	uxth	r3, r3
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	20004ad4 	.word	0x20004ad4

0800cf64 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cf6c:	4b45      	ldr	r3, [pc, #276]	; (800d084 <plug_holes+0x120>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d206      	bcs.n	800cf84 <plug_holes+0x20>
 800cf76:	4b44      	ldr	r3, [pc, #272]	; (800d088 <plug_holes+0x124>)
 800cf78:	f240 12df 	movw	r2, #479	; 0x1df
 800cf7c:	4943      	ldr	r1, [pc, #268]	; (800d08c <plug_holes+0x128>)
 800cf7e:	4844      	ldr	r0, [pc, #272]	; (800d090 <plug_holes+0x12c>)
 800cf80:	f00c f992 	bl	80192a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cf84:	4b43      	ldr	r3, [pc, #268]	; (800d094 <plug_holes+0x130>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d306      	bcc.n	800cf9c <plug_holes+0x38>
 800cf8e:	4b3e      	ldr	r3, [pc, #248]	; (800d088 <plug_holes+0x124>)
 800cf90:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cf94:	4940      	ldr	r1, [pc, #256]	; (800d098 <plug_holes+0x134>)
 800cf96:	483e      	ldr	r0, [pc, #248]	; (800d090 <plug_holes+0x12c>)
 800cf98:	f00c f986 	bl	80192a8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	791b      	ldrb	r3, [r3, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <plug_holes+0x4e>
 800cfa4:	4b38      	ldr	r3, [pc, #224]	; (800d088 <plug_holes+0x124>)
 800cfa6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cfaa:	493c      	ldr	r1, [pc, #240]	; (800d09c <plug_holes+0x138>)
 800cfac:	4838      	ldr	r0, [pc, #224]	; (800d090 <plug_holes+0x12c>)
 800cfae:	f00c f97b 	bl	80192a8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfba:	d906      	bls.n	800cfca <plug_holes+0x66>
 800cfbc:	4b32      	ldr	r3, [pc, #200]	; (800d088 <plug_holes+0x124>)
 800cfbe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cfc2:	4937      	ldr	r1, [pc, #220]	; (800d0a0 <plug_holes+0x13c>)
 800cfc4:	4832      	ldr	r0, [pc, #200]	; (800d090 <plug_holes+0x12c>)
 800cfc6:	f00c f96f 	bl	80192a8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff ffa4 	bl	800cf1c <ptr_to_mem>
 800cfd4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cfd6:	687a      	ldr	r2, [r7, #4]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d024      	beq.n	800d028 <plug_holes+0xc4>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	791b      	ldrb	r3, [r3, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d120      	bne.n	800d028 <plug_holes+0xc4>
 800cfe6:	4b2b      	ldr	r3, [pc, #172]	; (800d094 <plug_holes+0x130>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68fa      	ldr	r2, [r7, #12]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d01b      	beq.n	800d028 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cff0:	4b2c      	ldr	r3, [pc, #176]	; (800d0a4 <plug_holes+0x140>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d102      	bne.n	800d000 <plug_holes+0x9c>
      lfree = mem;
 800cffa:	4a2a      	ldr	r2, [pc, #168]	; (800d0a4 <plug_holes+0x140>)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	881a      	ldrh	r2, [r3, #0]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	881b      	ldrh	r3, [r3, #0]
 800d00c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d010:	d00a      	beq.n	800d028 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	881b      	ldrh	r3, [r3, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f7ff ff80 	bl	800cf1c <ptr_to_mem>
 800d01c:	4604      	mov	r4, r0
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff ff8e 	bl	800cf40 <mem_to_ptr>
 800d024:	4603      	mov	r3, r0
 800d026:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	885b      	ldrh	r3, [r3, #2]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7ff ff75 	bl	800cf1c <ptr_to_mem>
 800d032:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d01f      	beq.n	800d07c <plug_holes+0x118>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	791b      	ldrb	r3, [r3, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d11b      	bne.n	800d07c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d044:	4b17      	ldr	r3, [pc, #92]	; (800d0a4 <plug_holes+0x140>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d102      	bne.n	800d054 <plug_holes+0xf0>
      lfree = pmem;
 800d04e:	4a15      	ldr	r2, [pc, #84]	; (800d0a4 <plug_holes+0x140>)
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	881a      	ldrh	r2, [r3, #0]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	881b      	ldrh	r3, [r3, #0]
 800d060:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d064:	d00a      	beq.n	800d07c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7ff ff56 	bl	800cf1c <ptr_to_mem>
 800d070:	4604      	mov	r4, r0
 800d072:	68b8      	ldr	r0, [r7, #8]
 800d074:	f7ff ff64 	bl	800cf40 <mem_to_ptr>
 800d078:	4603      	mov	r3, r0
 800d07a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d07c:	bf00      	nop
 800d07e:	3714      	adds	r7, #20
 800d080:	46bd      	mov	sp, r7
 800d082:	bd90      	pop	{r4, r7, pc}
 800d084:	20004ad4 	.word	0x20004ad4
 800d088:	0801a6f4 	.word	0x0801a6f4
 800d08c:	0801a724 	.word	0x0801a724
 800d090:	0801a73c 	.word	0x0801a73c
 800d094:	20004ad8 	.word	0x20004ad8
 800d098:	0801a764 	.word	0x0801a764
 800d09c:	0801a780 	.word	0x0801a780
 800d0a0:	0801a79c 	.word	0x0801a79c
 800d0a4:	20004ae0 	.word	0x20004ae0

0800d0a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d0ae:	4b1f      	ldr	r3, [pc, #124]	; (800d12c <mem_init+0x84>)
 800d0b0:	3303      	adds	r3, #3
 800d0b2:	f023 0303 	bic.w	r3, r3, #3
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	4b1d      	ldr	r3, [pc, #116]	; (800d130 <mem_init+0x88>)
 800d0ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d0bc:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <mem_init+0x88>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d0c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d0d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d0da:	f7ff ff1f 	bl	800cf1c <ptr_to_mem>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	4a14      	ldr	r2, [pc, #80]	; (800d134 <mem_init+0x8c>)
 800d0e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d0e4:	4b13      	ldr	r3, [pc, #76]	; (800d134 <mem_init+0x8c>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d0ec:	4b11      	ldr	r3, [pc, #68]	; (800d134 <mem_init+0x8c>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d0f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <mem_init+0x8c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d0fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d100:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <mem_init+0x88>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a0c      	ldr	r2, [pc, #48]	; (800d138 <mem_init+0x90>)
 800d106:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d108:	480c      	ldr	r0, [pc, #48]	; (800d13c <mem_init+0x94>)
 800d10a:	f00b fea7 	bl	8018e5c <sys_mutex_new>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d006      	beq.n	800d122 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d114:	4b0a      	ldr	r3, [pc, #40]	; (800d140 <mem_init+0x98>)
 800d116:	f240 221f 	movw	r2, #543	; 0x21f
 800d11a:	490a      	ldr	r1, [pc, #40]	; (800d144 <mem_init+0x9c>)
 800d11c:	480a      	ldr	r0, [pc, #40]	; (800d148 <mem_init+0xa0>)
 800d11e:	f00c f8c3 	bl	80192a8 <iprintf>
  }
}
 800d122:	bf00      	nop
 800d124:	3708      	adds	r7, #8
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	20009960 	.word	0x20009960
 800d130:	20004ad4 	.word	0x20004ad4
 800d134:	20004ad8 	.word	0x20004ad8
 800d138:	20004ae0 	.word	0x20004ae0
 800d13c:	20004adc 	.word	0x20004adc
 800d140:	0801a6f4 	.word	0x0801a6f4
 800d144:	0801a7c8 	.word	0x0801a7c8
 800d148:	0801a73c 	.word	0x0801a73c

0800d14c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff fef3 	bl	800cf40 <mem_to_ptr>
 800d15a:	4603      	mov	r3, r0
 800d15c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff feda 	bl	800cf1c <ptr_to_mem>
 800d168:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	885b      	ldrh	r3, [r3, #2]
 800d16e:	4618      	mov	r0, r3
 800d170:	f7ff fed4 	bl	800cf1c <ptr_to_mem>
 800d174:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d17e:	d818      	bhi.n	800d1b2 <mem_link_valid+0x66>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	885b      	ldrh	r3, [r3, #2]
 800d184:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d188:	d813      	bhi.n	800d1b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d18e:	8afa      	ldrh	r2, [r7, #22]
 800d190:	429a      	cmp	r2, r3
 800d192:	d004      	beq.n	800d19e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	8afa      	ldrh	r2, [r7, #22]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d109      	bne.n	800d1b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d19e:	4b08      	ldr	r3, [pc, #32]	; (800d1c0 <mem_link_valid+0x74>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d006      	beq.n	800d1b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	885b      	ldrh	r3, [r3, #2]
 800d1ac:	8afa      	ldrh	r2, [r7, #22]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d001      	beq.n	800d1b6 <mem_link_valid+0x6a>
    return 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e000      	b.n	800d1b8 <mem_link_valid+0x6c>
  }
  return 1;
 800d1b6:	2301      	movs	r3, #1
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20004ad8 	.word	0x20004ad8

0800d1c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b088      	sub	sp, #32
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d070      	beq.n	800d2b4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f003 0303 	and.w	r3, r3, #3
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00d      	beq.n	800d1f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d1dc:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <mem_free+0xf8>)
 800d1de:	f240 2273 	movw	r2, #627	; 0x273
 800d1e2:	4937      	ldr	r1, [pc, #220]	; (800d2c0 <mem_free+0xfc>)
 800d1e4:	4837      	ldr	r0, [pc, #220]	; (800d2c4 <mem_free+0x100>)
 800d1e6:	f00c f85f 	bl	80192a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1ea:	f00b fe89 	bl	8018f00 <sys_arch_protect>
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f00b fe93 	bl	8018f1c <sys_arch_unprotect>
    return;
 800d1f6:	e05e      	b.n	800d2b6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3b08      	subs	r3, #8
 800d1fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d1fe:	4b32      	ldr	r3, [pc, #200]	; (800d2c8 <mem_free+0x104>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	429a      	cmp	r2, r3
 800d206:	d306      	bcc.n	800d216 <mem_free+0x52>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f103 020c 	add.w	r2, r3, #12
 800d20e:	4b2f      	ldr	r3, [pc, #188]	; (800d2cc <mem_free+0x108>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d90d      	bls.n	800d232 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d216:	4b29      	ldr	r3, [pc, #164]	; (800d2bc <mem_free+0xf8>)
 800d218:	f240 227f 	movw	r2, #639	; 0x27f
 800d21c:	492c      	ldr	r1, [pc, #176]	; (800d2d0 <mem_free+0x10c>)
 800d21e:	4829      	ldr	r0, [pc, #164]	; (800d2c4 <mem_free+0x100>)
 800d220:	f00c f842 	bl	80192a8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d224:	f00b fe6c 	bl	8018f00 <sys_arch_protect>
 800d228:	6138      	str	r0, [r7, #16]
 800d22a:	6938      	ldr	r0, [r7, #16]
 800d22c:	f00b fe76 	bl	8018f1c <sys_arch_unprotect>
    return;
 800d230:	e041      	b.n	800d2b6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d232:	4828      	ldr	r0, [pc, #160]	; (800d2d4 <mem_free+0x110>)
 800d234:	f00b fe28 	bl	8018e88 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	791b      	ldrb	r3, [r3, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d110      	bne.n	800d262 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d240:	4b1e      	ldr	r3, [pc, #120]	; (800d2bc <mem_free+0xf8>)
 800d242:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d246:	4924      	ldr	r1, [pc, #144]	; (800d2d8 <mem_free+0x114>)
 800d248:	481e      	ldr	r0, [pc, #120]	; (800d2c4 <mem_free+0x100>)
 800d24a:	f00c f82d 	bl	80192a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d24e:	4821      	ldr	r0, [pc, #132]	; (800d2d4 <mem_free+0x110>)
 800d250:	f00b fe29 	bl	8018ea6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d254:	f00b fe54 	bl	8018f00 <sys_arch_protect>
 800d258:	6178      	str	r0, [r7, #20]
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f00b fe5e 	bl	8018f1c <sys_arch_unprotect>
    return;
 800d260:	e029      	b.n	800d2b6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d262:	69f8      	ldr	r0, [r7, #28]
 800d264:	f7ff ff72 	bl	800d14c <mem_link_valid>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d110      	bne.n	800d290 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d26e:	4b13      	ldr	r3, [pc, #76]	; (800d2bc <mem_free+0xf8>)
 800d270:	f240 2295 	movw	r2, #661	; 0x295
 800d274:	4919      	ldr	r1, [pc, #100]	; (800d2dc <mem_free+0x118>)
 800d276:	4813      	ldr	r0, [pc, #76]	; (800d2c4 <mem_free+0x100>)
 800d278:	f00c f816 	bl	80192a8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d27c:	4815      	ldr	r0, [pc, #84]	; (800d2d4 <mem_free+0x110>)
 800d27e:	f00b fe12 	bl	8018ea6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d282:	f00b fe3d 	bl	8018f00 <sys_arch_protect>
 800d286:	61b8      	str	r0, [r7, #24]
 800d288:	69b8      	ldr	r0, [r7, #24]
 800d28a:	f00b fe47 	bl	8018f1c <sys_arch_unprotect>
    return;
 800d28e:	e012      	b.n	800d2b6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	2200      	movs	r2, #0
 800d294:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d296:	4b12      	ldr	r3, [pc, #72]	; (800d2e0 <mem_free+0x11c>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	69fa      	ldr	r2, [r7, #28]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d202      	bcs.n	800d2a6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d2a0:	4a0f      	ldr	r2, [pc, #60]	; (800d2e0 <mem_free+0x11c>)
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d2a6:	69f8      	ldr	r0, [r7, #28]
 800d2a8:	f7ff fe5c 	bl	800cf64 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d2ac:	4809      	ldr	r0, [pc, #36]	; (800d2d4 <mem_free+0x110>)
 800d2ae:	f00b fdfa 	bl	8018ea6 <sys_mutex_unlock>
 800d2b2:	e000      	b.n	800d2b6 <mem_free+0xf2>
    return;
 800d2b4:	bf00      	nop
}
 800d2b6:	3720      	adds	r7, #32
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	0801a6f4 	.word	0x0801a6f4
 800d2c0:	0801a7e4 	.word	0x0801a7e4
 800d2c4:	0801a73c 	.word	0x0801a73c
 800d2c8:	20004ad4 	.word	0x20004ad4
 800d2cc:	20004ad8 	.word	0x20004ad8
 800d2d0:	0801a808 	.word	0x0801a808
 800d2d4:	20004adc 	.word	0x20004adc
 800d2d8:	0801a824 	.word	0x0801a824
 800d2dc:	0801a84c 	.word	0x0801a84c
 800d2e0:	20004ae0 	.word	0x20004ae0

0800d2e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d2f0:	887b      	ldrh	r3, [r7, #2]
 800d2f2:	3303      	adds	r3, #3
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f023 0303 	bic.w	r3, r3, #3
 800d2fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d2fc:	8bfb      	ldrh	r3, [r7, #30]
 800d2fe:	2b0b      	cmp	r3, #11
 800d300:	d801      	bhi.n	800d306 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d302:	230c      	movs	r3, #12
 800d304:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d306:	8bfb      	ldrh	r3, [r7, #30]
 800d308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d30c:	d803      	bhi.n	800d316 <mem_trim+0x32>
 800d30e:	8bfa      	ldrh	r2, [r7, #30]
 800d310:	887b      	ldrh	r3, [r7, #2]
 800d312:	429a      	cmp	r2, r3
 800d314:	d201      	bcs.n	800d31a <mem_trim+0x36>
    return NULL;
 800d316:	2300      	movs	r3, #0
 800d318:	e0d8      	b.n	800d4cc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d31a:	4b6e      	ldr	r3, [pc, #440]	; (800d4d4 <mem_trim+0x1f0>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	d304      	bcc.n	800d32e <mem_trim+0x4a>
 800d324:	4b6c      	ldr	r3, [pc, #432]	; (800d4d8 <mem_trim+0x1f4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d306      	bcc.n	800d33c <mem_trim+0x58>
 800d32e:	4b6b      	ldr	r3, [pc, #428]	; (800d4dc <mem_trim+0x1f8>)
 800d330:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d334:	496a      	ldr	r1, [pc, #424]	; (800d4e0 <mem_trim+0x1fc>)
 800d336:	486b      	ldr	r0, [pc, #428]	; (800d4e4 <mem_trim+0x200>)
 800d338:	f00b ffb6 	bl	80192a8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d33c:	4b65      	ldr	r3, [pc, #404]	; (800d4d4 <mem_trim+0x1f0>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	429a      	cmp	r2, r3
 800d344:	d304      	bcc.n	800d350 <mem_trim+0x6c>
 800d346:	4b64      	ldr	r3, [pc, #400]	; (800d4d8 <mem_trim+0x1f4>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d307      	bcc.n	800d360 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d350:	f00b fdd6 	bl	8018f00 <sys_arch_protect>
 800d354:	60b8      	str	r0, [r7, #8]
 800d356:	68b8      	ldr	r0, [r7, #8]
 800d358:	f00b fde0 	bl	8018f1c <sys_arch_unprotect>
    return rmem;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	e0b5      	b.n	800d4cc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3b08      	subs	r3, #8
 800d364:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d366:	69b8      	ldr	r0, [r7, #24]
 800d368:	f7ff fdea 	bl	800cf40 <mem_to_ptr>
 800d36c:	4603      	mov	r3, r0
 800d36e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	881a      	ldrh	r2, [r3, #0]
 800d374:	8afb      	ldrh	r3, [r7, #22]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	b29b      	uxth	r3, r3
 800d37a:	3b08      	subs	r3, #8
 800d37c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d37e:	8bfa      	ldrh	r2, [r7, #30]
 800d380:	8abb      	ldrh	r3, [r7, #20]
 800d382:	429a      	cmp	r2, r3
 800d384:	d906      	bls.n	800d394 <mem_trim+0xb0>
 800d386:	4b55      	ldr	r3, [pc, #340]	; (800d4dc <mem_trim+0x1f8>)
 800d388:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d38c:	4956      	ldr	r1, [pc, #344]	; (800d4e8 <mem_trim+0x204>)
 800d38e:	4855      	ldr	r0, [pc, #340]	; (800d4e4 <mem_trim+0x200>)
 800d390:	f00b ff8a 	bl	80192a8 <iprintf>
  if (newsize > size) {
 800d394:	8bfa      	ldrh	r2, [r7, #30]
 800d396:	8abb      	ldrh	r3, [r7, #20]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d901      	bls.n	800d3a0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d39c:	2300      	movs	r3, #0
 800d39e:	e095      	b.n	800d4cc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d3a0:	8bfa      	ldrh	r2, [r7, #30]
 800d3a2:	8abb      	ldrh	r3, [r7, #20]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d101      	bne.n	800d3ac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	e08f      	b.n	800d4cc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3ac:	484f      	ldr	r0, [pc, #316]	; (800d4ec <mem_trim+0x208>)
 800d3ae:	f00b fd6b 	bl	8018e88 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fdb0 	bl	800cf1c <ptr_to_mem>
 800d3bc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	791b      	ldrb	r3, [r3, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d13f      	bne.n	800d446 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3ce:	d106      	bne.n	800d3de <mem_trim+0xfa>
 800d3d0:	4b42      	ldr	r3, [pc, #264]	; (800d4dc <mem_trim+0x1f8>)
 800d3d2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d3d6:	4946      	ldr	r1, [pc, #280]	; (800d4f0 <mem_trim+0x20c>)
 800d3d8:	4842      	ldr	r0, [pc, #264]	; (800d4e4 <mem_trim+0x200>)
 800d3da:	f00b ff65 	bl	80192a8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d3e4:	8afa      	ldrh	r2, [r7, #22]
 800d3e6:	8bfb      	ldrh	r3, [r7, #30]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d3f0:	4b40      	ldr	r3, [pc, #256]	; (800d4f4 <mem_trim+0x210>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d106      	bne.n	800d408 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d3fa:	89fb      	ldrh	r3, [r7, #14]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff fd8d 	bl	800cf1c <ptr_to_mem>
 800d402:	4603      	mov	r3, r0
 800d404:	4a3b      	ldr	r2, [pc, #236]	; (800d4f4 <mem_trim+0x210>)
 800d406:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d408:	89fb      	ldrh	r3, [r7, #14]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff fd86 	bl	800cf1c <ptr_to_mem>
 800d410:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2200      	movs	r2, #0
 800d416:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	89ba      	ldrh	r2, [r7, #12]
 800d41c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	8afa      	ldrh	r2, [r7, #22]
 800d422:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	89fa      	ldrh	r2, [r7, #14]
 800d428:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d432:	d047      	beq.n	800d4c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	881b      	ldrh	r3, [r3, #0]
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff fd6f 	bl	800cf1c <ptr_to_mem>
 800d43e:	4602      	mov	r2, r0
 800d440:	89fb      	ldrh	r3, [r7, #14]
 800d442:	8053      	strh	r3, [r2, #2]
 800d444:	e03e      	b.n	800d4c4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d446:	8bfb      	ldrh	r3, [r7, #30]
 800d448:	f103 0214 	add.w	r2, r3, #20
 800d44c:	8abb      	ldrh	r3, [r7, #20]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d838      	bhi.n	800d4c4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d452:	8afa      	ldrh	r2, [r7, #22]
 800d454:	8bfb      	ldrh	r3, [r7, #30]
 800d456:	4413      	add	r3, r2
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3308      	adds	r3, #8
 800d45c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d466:	d106      	bne.n	800d476 <mem_trim+0x192>
 800d468:	4b1c      	ldr	r3, [pc, #112]	; (800d4dc <mem_trim+0x1f8>)
 800d46a:	f240 3216 	movw	r2, #790	; 0x316
 800d46e:	4920      	ldr	r1, [pc, #128]	; (800d4f0 <mem_trim+0x20c>)
 800d470:	481c      	ldr	r0, [pc, #112]	; (800d4e4 <mem_trim+0x200>)
 800d472:	f00b ff19 	bl	80192a8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d476:	89fb      	ldrh	r3, [r7, #14]
 800d478:	4618      	mov	r0, r3
 800d47a:	f7ff fd4f 	bl	800cf1c <ptr_to_mem>
 800d47e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d480:	4b1c      	ldr	r3, [pc, #112]	; (800d4f4 <mem_trim+0x210>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	693a      	ldr	r2, [r7, #16]
 800d486:	429a      	cmp	r2, r3
 800d488:	d202      	bcs.n	800d490 <mem_trim+0x1ac>
      lfree = mem2;
 800d48a:	4a1a      	ldr	r2, [pc, #104]	; (800d4f4 <mem_trim+0x210>)
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	2200      	movs	r2, #0
 800d494:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	881a      	ldrh	r2, [r3, #0]
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	8afa      	ldrh	r2, [r7, #22]
 800d4a2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	89fa      	ldrh	r2, [r7, #14]
 800d4a8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4b2:	d007      	beq.n	800d4c4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff fd2f 	bl	800cf1c <ptr_to_mem>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	89fb      	ldrh	r3, [r7, #14]
 800d4c2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d4c4:	4809      	ldr	r0, [pc, #36]	; (800d4ec <mem_trim+0x208>)
 800d4c6:	f00b fcee 	bl	8018ea6 <sys_mutex_unlock>
  return rmem;
 800d4ca:	687b      	ldr	r3, [r7, #4]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3720      	adds	r7, #32
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20004ad4 	.word	0x20004ad4
 800d4d8:	20004ad8 	.word	0x20004ad8
 800d4dc:	0801a6f4 	.word	0x0801a6f4
 800d4e0:	0801a880 	.word	0x0801a880
 800d4e4:	0801a73c 	.word	0x0801a73c
 800d4e8:	0801a898 	.word	0x0801a898
 800d4ec:	20004adc 	.word	0x20004adc
 800d4f0:	0801a8b8 	.word	0x0801a8b8
 800d4f4:	20004ae0 	.word	0x20004ae0

0800d4f8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d502:	88fb      	ldrh	r3, [r7, #6]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <mem_malloc+0x14>
    return NULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	e0e2      	b.n	800d6d2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d50c:	88fb      	ldrh	r3, [r7, #6]
 800d50e:	3303      	adds	r3, #3
 800d510:	b29b      	uxth	r3, r3
 800d512:	f023 0303 	bic.w	r3, r3, #3
 800d516:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d518:	8bbb      	ldrh	r3, [r7, #28]
 800d51a:	2b0b      	cmp	r3, #11
 800d51c:	d801      	bhi.n	800d522 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d51e:	230c      	movs	r3, #12
 800d520:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d522:	8bbb      	ldrh	r3, [r7, #28]
 800d524:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d528:	d803      	bhi.n	800d532 <mem_malloc+0x3a>
 800d52a:	8bba      	ldrh	r2, [r7, #28]
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d201      	bcs.n	800d536 <mem_malloc+0x3e>
    return NULL;
 800d532:	2300      	movs	r3, #0
 800d534:	e0cd      	b.n	800d6d2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d536:	4869      	ldr	r0, [pc, #420]	; (800d6dc <mem_malloc+0x1e4>)
 800d538:	f00b fca6 	bl	8018e88 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d53c:	4b68      	ldr	r3, [pc, #416]	; (800d6e0 <mem_malloc+0x1e8>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fcfd 	bl	800cf40 <mem_to_ptr>
 800d546:	4603      	mov	r3, r0
 800d548:	83fb      	strh	r3, [r7, #30]
 800d54a:	e0b7      	b.n	800d6bc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d54c:	8bfb      	ldrh	r3, [r7, #30]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fce4 	bl	800cf1c <ptr_to_mem>
 800d554:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	791b      	ldrb	r3, [r3, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	f040 80a7 	bne.w	800d6ae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	461a      	mov	r2, r3
 800d566:	8bfb      	ldrh	r3, [r7, #30]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	f1a3 0208 	sub.w	r2, r3, #8
 800d56e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d570:	429a      	cmp	r2, r3
 800d572:	f0c0 809c 	bcc.w	800d6ae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	881b      	ldrh	r3, [r3, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	8bfb      	ldrh	r3, [r7, #30]
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	f1a3 0208 	sub.w	r2, r3, #8
 800d584:	8bbb      	ldrh	r3, [r7, #28]
 800d586:	3314      	adds	r3, #20
 800d588:	429a      	cmp	r2, r3
 800d58a:	d333      	bcc.n	800d5f4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d58c:	8bfa      	ldrh	r2, [r7, #30]
 800d58e:	8bbb      	ldrh	r3, [r7, #28]
 800d590:	4413      	add	r3, r2
 800d592:	b29b      	uxth	r3, r3
 800d594:	3308      	adds	r3, #8
 800d596:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d598:	8a7b      	ldrh	r3, [r7, #18]
 800d59a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d59e:	d106      	bne.n	800d5ae <mem_malloc+0xb6>
 800d5a0:	4b50      	ldr	r3, [pc, #320]	; (800d6e4 <mem_malloc+0x1ec>)
 800d5a2:	f240 3287 	movw	r2, #903	; 0x387
 800d5a6:	4950      	ldr	r1, [pc, #320]	; (800d6e8 <mem_malloc+0x1f0>)
 800d5a8:	4850      	ldr	r0, [pc, #320]	; (800d6ec <mem_malloc+0x1f4>)
 800d5aa:	f00b fe7d 	bl	80192a8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d5ae:	8a7b      	ldrh	r3, [r7, #18]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fcb3 	bl	800cf1c <ptr_to_mem>
 800d5b6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	881a      	ldrh	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	8bfa      	ldrh	r2, [r7, #30]
 800d5ca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	8a7a      	ldrh	r2, [r7, #18]
 800d5d0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d5e0:	d00b      	beq.n	800d5fa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7ff fc98 	bl	800cf1c <ptr_to_mem>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	8a7b      	ldrh	r3, [r7, #18]
 800d5f0:	8053      	strh	r3, [r2, #2]
 800d5f2:	e002      	b.n	800d5fa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d5fa:	4b39      	ldr	r3, [pc, #228]	; (800d6e0 <mem_malloc+0x1e8>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	697a      	ldr	r2, [r7, #20]
 800d600:	429a      	cmp	r2, r3
 800d602:	d127      	bne.n	800d654 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d604:	4b36      	ldr	r3, [pc, #216]	; (800d6e0 <mem_malloc+0x1e8>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d60a:	e005      	b.n	800d618 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	4618      	mov	r0, r3
 800d612:	f7ff fc83 	bl	800cf1c <ptr_to_mem>
 800d616:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	791b      	ldrb	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <mem_malloc+0x132>
 800d620:	4b33      	ldr	r3, [pc, #204]	; (800d6f0 <mem_malloc+0x1f8>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	69ba      	ldr	r2, [r7, #24]
 800d626:	429a      	cmp	r2, r3
 800d628:	d1f0      	bne.n	800d60c <mem_malloc+0x114>
          }
          lfree = cur;
 800d62a:	4a2d      	ldr	r2, [pc, #180]	; (800d6e0 <mem_malloc+0x1e8>)
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d630:	4b2b      	ldr	r3, [pc, #172]	; (800d6e0 <mem_malloc+0x1e8>)
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	4b2e      	ldr	r3, [pc, #184]	; (800d6f0 <mem_malloc+0x1f8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d00b      	beq.n	800d654 <mem_malloc+0x15c>
 800d63c:	4b28      	ldr	r3, [pc, #160]	; (800d6e0 <mem_malloc+0x1e8>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	791b      	ldrb	r3, [r3, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <mem_malloc+0x15c>
 800d646:	4b27      	ldr	r3, [pc, #156]	; (800d6e4 <mem_malloc+0x1ec>)
 800d648:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d64c:	4929      	ldr	r1, [pc, #164]	; (800d6f4 <mem_malloc+0x1fc>)
 800d64e:	4827      	ldr	r0, [pc, #156]	; (800d6ec <mem_malloc+0x1f4>)
 800d650:	f00b fe2a 	bl	80192a8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d654:	4821      	ldr	r0, [pc, #132]	; (800d6dc <mem_malloc+0x1e4>)
 800d656:	f00b fc26 	bl	8018ea6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d65a:	8bba      	ldrh	r2, [r7, #28]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	4413      	add	r3, r2
 800d660:	3308      	adds	r3, #8
 800d662:	4a23      	ldr	r2, [pc, #140]	; (800d6f0 <mem_malloc+0x1f8>)
 800d664:	6812      	ldr	r2, [r2, #0]
 800d666:	4293      	cmp	r3, r2
 800d668:	d906      	bls.n	800d678 <mem_malloc+0x180>
 800d66a:	4b1e      	ldr	r3, [pc, #120]	; (800d6e4 <mem_malloc+0x1ec>)
 800d66c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d670:	4921      	ldr	r1, [pc, #132]	; (800d6f8 <mem_malloc+0x200>)
 800d672:	481e      	ldr	r0, [pc, #120]	; (800d6ec <mem_malloc+0x1f4>)
 800d674:	f00b fe18 	bl	80192a8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	f003 0303 	and.w	r3, r3, #3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d006      	beq.n	800d690 <mem_malloc+0x198>
 800d682:	4b18      	ldr	r3, [pc, #96]	; (800d6e4 <mem_malloc+0x1ec>)
 800d684:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d688:	491c      	ldr	r1, [pc, #112]	; (800d6fc <mem_malloc+0x204>)
 800d68a:	4818      	ldr	r0, [pc, #96]	; (800d6ec <mem_malloc+0x1f4>)
 800d68c:	f00b fe0c 	bl	80192a8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f003 0303 	and.w	r3, r3, #3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d006      	beq.n	800d6a8 <mem_malloc+0x1b0>
 800d69a:	4b12      	ldr	r3, [pc, #72]	; (800d6e4 <mem_malloc+0x1ec>)
 800d69c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d6a0:	4917      	ldr	r1, [pc, #92]	; (800d700 <mem_malloc+0x208>)
 800d6a2:	4812      	ldr	r0, [pc, #72]	; (800d6ec <mem_malloc+0x1f4>)
 800d6a4:	f00b fe00 	bl	80192a8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	e011      	b.n	800d6d2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d6ae:	8bfb      	ldrh	r3, [r7, #30]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7ff fc33 	bl	800cf1c <ptr_to_mem>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	881b      	ldrh	r3, [r3, #0]
 800d6ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6bc:	8bfa      	ldrh	r2, [r7, #30]
 800d6be:	8bbb      	ldrh	r3, [r7, #28]
 800d6c0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	f4ff af41 	bcc.w	800d54c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d6ca:	4804      	ldr	r0, [pc, #16]	; (800d6dc <mem_malloc+0x1e4>)
 800d6cc:	f00b fbeb 	bl	8018ea6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d6d0:	2300      	movs	r3, #0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3720      	adds	r7, #32
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	20004adc 	.word	0x20004adc
 800d6e0:	20004ae0 	.word	0x20004ae0
 800d6e4:	0801a6f4 	.word	0x0801a6f4
 800d6e8:	0801a8b8 	.word	0x0801a8b8
 800d6ec:	0801a73c 	.word	0x0801a73c
 800d6f0:	20004ad8 	.word	0x20004ad8
 800d6f4:	0801a8cc 	.word	0x0801a8cc
 800d6f8:	0801a8e8 	.word	0x0801a8e8
 800d6fc:	0801a918 	.word	0x0801a918
 800d700:	0801a948 	.word	0x0801a948

0800d704 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	3303      	adds	r3, #3
 800d71a:	f023 0303 	bic.w	r3, r3, #3
 800d71e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d720:	2300      	movs	r3, #0
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	e011      	b.n	800d74a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	881b      	ldrh	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	4413      	add	r3, r2
 800d742:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	3301      	adds	r3, #1
 800d748:	60fb      	str	r3, [r7, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	885b      	ldrh	r3, [r3, #2]
 800d74e:	461a      	mov	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	4293      	cmp	r3, r2
 800d754:	dbe7      	blt.n	800d726 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d756:	bf00      	nop
 800d758:	bf00      	nop
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d76a:	2300      	movs	r3, #0
 800d76c:	80fb      	strh	r3, [r7, #6]
 800d76e:	e009      	b.n	800d784 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d770:	88fb      	ldrh	r3, [r7, #6]
 800d772:	4a08      	ldr	r2, [pc, #32]	; (800d794 <memp_init+0x30>)
 800d774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7ff ffc3 	bl	800d704 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d77e:	88fb      	ldrh	r3, [r7, #6]
 800d780:	3301      	adds	r3, #1
 800d782:	80fb      	strh	r3, [r7, #6]
 800d784:	88fb      	ldrh	r3, [r7, #6]
 800d786:	2b0c      	cmp	r3, #12
 800d788:	d9f2      	bls.n	800d770 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d78a:	bf00      	nop
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	0801d648 	.word	0x0801d648

0800d798 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d7a0:	f00b fbae 	bl	8018f00 <sys_arch_protect>
 800d7a4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d015      	beq.n	800d7e0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	6812      	ldr	r2, [r2, #0]
 800d7bc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	f003 0303 	and.w	r3, r3, #3
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d006      	beq.n	800d7d6 <do_memp_malloc_pool+0x3e>
 800d7c8:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <do_memp_malloc_pool+0x58>)
 800d7ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d7ce:	4909      	ldr	r1, [pc, #36]	; (800d7f4 <do_memp_malloc_pool+0x5c>)
 800d7d0:	4809      	ldr	r0, [pc, #36]	; (800d7f8 <do_memp_malloc_pool+0x60>)
 800d7d2:	f00b fd69 	bl	80192a8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f00b fba0 	bl	8018f1c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	e003      	b.n	800d7e8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f00b fb9b 	bl	8018f1c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3710      	adds	r7, #16
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	0801a96c 	.word	0x0801a96c
 800d7f4:	0801a99c 	.word	0x0801a99c
 800d7f8:	0801a9c0 	.word	0x0801a9c0

0800d7fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	2b0c      	cmp	r3, #12
 800d80a:	d908      	bls.n	800d81e <memp_malloc+0x22>
 800d80c:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <memp_malloc+0x3c>)
 800d80e:	f240 1257 	movw	r2, #343	; 0x157
 800d812:	490a      	ldr	r1, [pc, #40]	; (800d83c <memp_malloc+0x40>)
 800d814:	480a      	ldr	r0, [pc, #40]	; (800d840 <memp_malloc+0x44>)
 800d816:	f00b fd47 	bl	80192a8 <iprintf>
 800d81a:	2300      	movs	r3, #0
 800d81c:	e008      	b.n	800d830 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	4a08      	ldr	r2, [pc, #32]	; (800d844 <memp_malloc+0x48>)
 800d822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff ffb6 	bl	800d798 <do_memp_malloc_pool>
 800d82c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d82e:	68fb      	ldr	r3, [r7, #12]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	0801a96c 	.word	0x0801a96c
 800d83c:	0801a9fc 	.word	0x0801a9fc
 800d840:	0801a9c0 	.word	0x0801a9c0
 800d844:	0801d648 	.word	0x0801d648

0800d848 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	f003 0303 	and.w	r3, r3, #3
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d006      	beq.n	800d86a <do_memp_free_pool+0x22>
 800d85c:	4b0d      	ldr	r3, [pc, #52]	; (800d894 <do_memp_free_pool+0x4c>)
 800d85e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d862:	490d      	ldr	r1, [pc, #52]	; (800d898 <do_memp_free_pool+0x50>)
 800d864:	480d      	ldr	r0, [pc, #52]	; (800d89c <do_memp_free_pool+0x54>)
 800d866:	f00b fd1f 	bl	80192a8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d86e:	f00b fb47 	bl	8018f00 <sys_arch_protect>
 800d872:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d886:	68b8      	ldr	r0, [r7, #8]
 800d888:	f00b fb48 	bl	8018f1c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d88c:	bf00      	nop
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	0801a96c 	.word	0x0801a96c
 800d898:	0801aa1c 	.word	0x0801aa1c
 800d89c:	0801a9c0 	.word	0x0801a9c0

0800d8a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	6039      	str	r1, [r7, #0]
 800d8aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d8ac:	79fb      	ldrb	r3, [r7, #7]
 800d8ae:	2b0c      	cmp	r3, #12
 800d8b0:	d907      	bls.n	800d8c2 <memp_free+0x22>
 800d8b2:	4b0c      	ldr	r3, [pc, #48]	; (800d8e4 <memp_free+0x44>)
 800d8b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d8b8:	490b      	ldr	r1, [pc, #44]	; (800d8e8 <memp_free+0x48>)
 800d8ba:	480c      	ldr	r0, [pc, #48]	; (800d8ec <memp_free+0x4c>)
 800d8bc:	f00b fcf4 	bl	80192a8 <iprintf>
 800d8c0:	e00c      	b.n	800d8dc <memp_free+0x3c>

  if (mem == NULL) {
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d008      	beq.n	800d8da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	4a09      	ldr	r2, [pc, #36]	; (800d8f0 <memp_free+0x50>)
 800d8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff ffb8 	bl	800d848 <do_memp_free_pool>
 800d8d8:	e000      	b.n	800d8dc <memp_free+0x3c>
    return;
 800d8da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801a96c 	.word	0x0801a96c
 800d8e8:	0801aa3c 	.word	0x0801aa3c
 800d8ec:	0801a9c0 	.word	0x0801a9c0
 800d8f0:	0801d648 	.word	0x0801d648

0800d8f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d8f8:	bf00      	nop
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
	...

0800d904 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d108      	bne.n	800d92a <netif_add+0x26>
 800d918:	4b5b      	ldr	r3, [pc, #364]	; (800da88 <netif_add+0x184>)
 800d91a:	f240 1227 	movw	r2, #295	; 0x127
 800d91e:	495b      	ldr	r1, [pc, #364]	; (800da8c <netif_add+0x188>)
 800d920:	485b      	ldr	r0, [pc, #364]	; (800da90 <netif_add+0x18c>)
 800d922:	f00b fcc1 	bl	80192a8 <iprintf>
 800d926:	2300      	movs	r3, #0
 800d928:	e0a9      	b.n	800da7e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d108      	bne.n	800d942 <netif_add+0x3e>
 800d930:	4b55      	ldr	r3, [pc, #340]	; (800da88 <netif_add+0x184>)
 800d932:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d936:	4957      	ldr	r1, [pc, #348]	; (800da94 <netif_add+0x190>)
 800d938:	4855      	ldr	r0, [pc, #340]	; (800da90 <netif_add+0x18c>)
 800d93a:	f00b fcb5 	bl	80192a8 <iprintf>
 800d93e:	2300      	movs	r3, #0
 800d940:	e09d      	b.n	800da7e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d101      	bne.n	800d94c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d948:	4b53      	ldr	r3, [pc, #332]	; (800da98 <netif_add+0x194>)
 800d94a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d952:	4b51      	ldr	r3, [pc, #324]	; (800da98 <netif_add+0x194>)
 800d954:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d95c:	4b4e      	ldr	r3, [pc, #312]	; (800da98 <netif_add+0x194>)
 800d95e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2200      	movs	r2, #0
 800d964:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	4a49      	ldr	r2, [pc, #292]	; (800da9c <netif_add+0x198>)
 800d976:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2200      	movs	r2, #0
 800d97c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	3324      	adds	r3, #36	; 0x24
 800d98a:	2204      	movs	r2, #4
 800d98c:	2100      	movs	r1, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f00b fc27 	bl	80191e2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2200      	movs	r2, #0
 800d998:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6a3a      	ldr	r2, [r7, #32]
 800d99e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d9a0:	4b3f      	ldr	r3, [pc, #252]	; (800daa0 <netif_add+0x19c>)
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ae:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	68b9      	ldr	r1, [r7, #8]
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	f000 f914 	bl	800dbe4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	4798      	blx	r3
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <netif_add+0xc8>
    return NULL;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	e058      	b.n	800da7e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9d2:	2bff      	cmp	r3, #255	; 0xff
 800d9d4:	d103      	bne.n	800d9de <netif_add+0xda>
        netif->num = 0;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9e2:	4b30      	ldr	r3, [pc, #192]	; (800daa4 <netif_add+0x1a0>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	e02b      	b.n	800da42 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d106      	bne.n	800da00 <netif_add+0xfc>
 800d9f2:	4b25      	ldr	r3, [pc, #148]	; (800da88 <netif_add+0x184>)
 800d9f4:	f240 128b 	movw	r2, #395	; 0x18b
 800d9f8:	492b      	ldr	r1, [pc, #172]	; (800daa8 <netif_add+0x1a4>)
 800d9fa:	4825      	ldr	r0, [pc, #148]	; (800da90 <netif_add+0x18c>)
 800d9fc:	f00b fc54 	bl	80192a8 <iprintf>
        num_netifs++;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	3301      	adds	r3, #1
 800da04:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	2bff      	cmp	r3, #255	; 0xff
 800da0a:	dd06      	ble.n	800da1a <netif_add+0x116>
 800da0c:	4b1e      	ldr	r3, [pc, #120]	; (800da88 <netif_add+0x184>)
 800da0e:	f240 128d 	movw	r2, #397	; 0x18d
 800da12:	4926      	ldr	r1, [pc, #152]	; (800daac <netif_add+0x1a8>)
 800da14:	481e      	ldr	r0, [pc, #120]	; (800da90 <netif_add+0x18c>)
 800da16:	f00b fc47 	bl	80192a8 <iprintf>
        if (netif2->num == netif->num) {
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da26:	429a      	cmp	r2, r3
 800da28:	d108      	bne.n	800da3c <netif_add+0x138>
          netif->num++;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da30:	3301      	adds	r3, #1
 800da32:	b2da      	uxtb	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800da3a:	e005      	b.n	800da48 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	617b      	str	r3, [r7, #20]
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1d0      	bne.n	800d9ea <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1be      	bne.n	800d9cc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da54:	2bfe      	cmp	r3, #254	; 0xfe
 800da56:	d103      	bne.n	800da60 <netif_add+0x15c>
    netif_num = 0;
 800da58:	4b11      	ldr	r3, [pc, #68]	; (800daa0 <netif_add+0x19c>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	701a      	strb	r2, [r3, #0]
 800da5e:	e006      	b.n	800da6e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da66:	3301      	adds	r3, #1
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <netif_add+0x19c>)
 800da6c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800da6e:	4b0d      	ldr	r3, [pc, #52]	; (800daa4 <netif_add+0x1a0>)
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800da76:	4a0b      	ldr	r2, [pc, #44]	; (800daa4 <netif_add+0x1a0>)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800da7c:	68fb      	ldr	r3, [r7, #12]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3718      	adds	r7, #24
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0801aa58 	.word	0x0801aa58
 800da8c:	0801aaec 	.word	0x0801aaec
 800da90:	0801aaa8 	.word	0x0801aaa8
 800da94:	0801ab08 	.word	0x0801ab08
 800da98:	0801d6cc 	.word	0x0801d6cc
 800da9c:	0800dec7 	.word	0x0800dec7
 800daa0:	20004b18 	.word	0x20004b18
 800daa4:	2000d06c 	.word	0x2000d06c
 800daa8:	0801ab2c 	.word	0x0801ab2c
 800daac:	0801ab40 	.word	0x0801ab40

0800dab0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800daba:	6839      	ldr	r1, [r7, #0]
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f002 fb91 	bl	80101e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f006 ffa3 	bl	8014a10 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d106      	bne.n	800daf4 <netif_do_set_ipaddr+0x20>
 800dae6:	4b1d      	ldr	r3, [pc, #116]	; (800db5c <netif_do_set_ipaddr+0x88>)
 800dae8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800daec:	491c      	ldr	r1, [pc, #112]	; (800db60 <netif_do_set_ipaddr+0x8c>)
 800daee:	481d      	ldr	r0, [pc, #116]	; (800db64 <netif_do_set_ipaddr+0x90>)
 800daf0:	f00b fbda 	bl	80192a8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <netif_do_set_ipaddr+0x34>
 800dafa:	4b18      	ldr	r3, [pc, #96]	; (800db5c <netif_do_set_ipaddr+0x88>)
 800dafc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800db00:	4917      	ldr	r1, [pc, #92]	; (800db60 <netif_do_set_ipaddr+0x8c>)
 800db02:	4818      	ldr	r0, [pc, #96]	; (800db64 <netif_do_set_ipaddr+0x90>)
 800db04:	f00b fbd0 	bl	80192a8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	3304      	adds	r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	429a      	cmp	r2, r3
 800db14:	d01c      	beq.n	800db50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3304      	adds	r3, #4
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800db26:	f107 0314 	add.w	r3, r7, #20
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7ff ffbf 	bl	800dab0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <netif_do_set_ipaddr+0x6a>
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	e000      	b.n	800db40 <netif_do_set_ipaddr+0x6c>
 800db3e:	2300      	movs	r3, #0
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800db44:	2101      	movs	r1, #1
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f000 f8d2 	bl	800dcf0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800db4c:	2301      	movs	r3, #1
 800db4e:	e000      	b.n	800db52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3718      	adds	r7, #24
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	0801aa58 	.word	0x0801aa58
 800db60:	0801ab70 	.word	0x0801ab70
 800db64:	0801aaa8 	.word	0x0801aaa8

0800db68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3308      	adds	r3, #8
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d00a      	beq.n	800db98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <netif_do_set_netmask+0x26>
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	e000      	b.n	800db90 <netif_do_set_netmask+0x28>
 800db8e:	2300      	movs	r3, #0
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800db94:	2301      	movs	r3, #1
 800db96:	e000      	b.n	800db9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3714      	adds	r7, #20
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b085      	sub	sp, #20
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	60f8      	str	r0, [r7, #12]
 800dbae:	60b9      	str	r1, [r7, #8]
 800dbb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	330c      	adds	r3, #12
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d00a      	beq.n	800dbd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <netif_do_set_gw+0x26>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	e000      	b.n	800dbce <netif_do_set_gw+0x28>
 800dbcc:	2300      	movs	r3, #0
 800dbce:	68fa      	ldr	r2, [r7, #12]
 800dbd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e000      	b.n	800dbd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dc00:	4b1c      	ldr	r3, [pc, #112]	; (800dc74 <netif_set_addr+0x90>)
 800dc02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dc0a:	4b1a      	ldr	r3, [pc, #104]	; (800dc74 <netif_set_addr+0x90>)
 800dc0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dc14:	4b17      	ldr	r3, [pc, #92]	; (800dc74 <netif_set_addr+0x90>)
 800dc16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <netif_set_addr+0x42>
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <netif_set_addr+0x46>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <netif_set_addr+0x48>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d006      	beq.n	800dc42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc34:	f107 0310 	add.w	r3, r7, #16
 800dc38:	461a      	mov	r2, r3
 800dc3a:	68b9      	ldr	r1, [r7, #8]
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7ff ff49 	bl	800dad4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dc42:	69fa      	ldr	r2, [r7, #28]
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7ff ff8e 	bl	800db68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dc4c:	69ba      	ldr	r2, [r7, #24]
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff ffa8 	bl	800dba6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d106      	bne.n	800dc6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc5c:	f107 0310 	add.w	r3, r7, #16
 800dc60:	461a      	mov	r2, r3
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff ff35 	bl	800dad4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dc6a:	bf00      	nop
 800dc6c:	3720      	adds	r7, #32
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	0801d6cc 	.word	0x0801d6cc

0800dc78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dc80:	4a04      	ldr	r2, [pc, #16]	; (800dc94 <netif_set_default+0x1c>)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dc86:	bf00      	nop
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	2000d070 	.word	0x2000d070

0800dc98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d107      	bne.n	800dcb6 <netif_set_up+0x1e>
 800dca6:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <netif_set_up+0x4c>)
 800dca8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dcac:	490e      	ldr	r1, [pc, #56]	; (800dce8 <netif_set_up+0x50>)
 800dcae:	480f      	ldr	r0, [pc, #60]	; (800dcec <netif_set_up+0x54>)
 800dcb0:	f00b fafa 	bl	80192a8 <iprintf>
 800dcb4:	e013      	b.n	800dcde <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d10c      	bne.n	800dcde <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcca:	f043 0301 	orr.w	r3, r3, #1
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dcd6:	2103      	movs	r1, #3
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f809 	bl	800dcf0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	0801aa58 	.word	0x0801aa58
 800dce8:	0801abe0 	.word	0x0801abe0
 800dcec:	0801aaa8 	.word	0x0801aaa8

0800dcf0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <netif_issue_reports+0x20>
 800dd02:	4b18      	ldr	r3, [pc, #96]	; (800dd64 <netif_issue_reports+0x74>)
 800dd04:	f240 326d 	movw	r2, #877	; 0x36d
 800dd08:	4917      	ldr	r1, [pc, #92]	; (800dd68 <netif_issue_reports+0x78>)
 800dd0a:	4818      	ldr	r0, [pc, #96]	; (800dd6c <netif_issue_reports+0x7c>)
 800dd0c:	f00b facc 	bl	80192a8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d01e      	beq.n	800dd5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d017      	beq.n	800dd5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	f003 0301 	and.w	r3, r3, #1
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d013      	beq.n	800dd5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00e      	beq.n	800dd5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd46:	f003 0308 	and.w	r3, r3, #8
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d007      	beq.n	800dd5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3304      	adds	r3, #4
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f009 fc5b 	bl	8017610 <etharp_request>
 800dd5a:	e000      	b.n	800dd5e <netif_issue_reports+0x6e>
    return;
 800dd5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}
 800dd64:	0801aa58 	.word	0x0801aa58
 800dd68:	0801abfc 	.word	0x0801abfc
 800dd6c:	0801aaa8 	.word	0x0801aaa8

0800dd70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d107      	bne.n	800dd8e <netif_set_down+0x1e>
 800dd7e:	4b12      	ldr	r3, [pc, #72]	; (800ddc8 <netif_set_down+0x58>)
 800dd80:	f240 329b 	movw	r2, #923	; 0x39b
 800dd84:	4911      	ldr	r1, [pc, #68]	; (800ddcc <netif_set_down+0x5c>)
 800dd86:	4812      	ldr	r0, [pc, #72]	; (800ddd0 <netif_set_down+0x60>)
 800dd88:	f00b fa8e 	bl	80192a8 <iprintf>
 800dd8c:	e019      	b.n	800ddc2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd94:	f003 0301 	and.w	r3, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d012      	beq.n	800ddc2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dda2:	f023 0301 	bic.w	r3, r3, #1
 800dda6:	b2da      	uxtb	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddb4:	f003 0308 	and.w	r3, r3, #8
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f008 ffe1 	bl	8016d84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	0801aa58 	.word	0x0801aa58
 800ddcc:	0801ac20 	.word	0x0801ac20
 800ddd0:	0801aaa8 	.word	0x0801aaa8

0800ddd4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d107      	bne.n	800ddf2 <netif_set_link_up+0x1e>
 800dde2:	4b15      	ldr	r3, [pc, #84]	; (800de38 <netif_set_link_up+0x64>)
 800dde4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dde8:	4914      	ldr	r1, [pc, #80]	; (800de3c <netif_set_link_up+0x68>)
 800ddea:	4815      	ldr	r0, [pc, #84]	; (800de40 <netif_set_link_up+0x6c>)
 800ddec:	f00b fa5c 	bl	80192a8 <iprintf>
 800ddf0:	e01e      	b.n	800de30 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ddf8:	f003 0304 	and.w	r3, r3, #4
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d117      	bne.n	800de30 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de06:	f043 0304 	orr.w	r3, r3, #4
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f007 fa26 	bl	8015264 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de18:	2103      	movs	r1, #3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff ff68 	bl	800dcf0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d003      	beq.n	800de30 <netif_set_link_up+0x5c>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	69db      	ldr	r3, [r3, #28]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	0801aa58 	.word	0x0801aa58
 800de3c:	0801ac40 	.word	0x0801ac40
 800de40:	0801aaa8 	.word	0x0801aaa8

0800de44 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d107      	bne.n	800de62 <netif_set_link_down+0x1e>
 800de52:	4b11      	ldr	r3, [pc, #68]	; (800de98 <netif_set_link_down+0x54>)
 800de54:	f240 4206 	movw	r2, #1030	; 0x406
 800de58:	4910      	ldr	r1, [pc, #64]	; (800de9c <netif_set_link_down+0x58>)
 800de5a:	4811      	ldr	r0, [pc, #68]	; (800dea0 <netif_set_link_down+0x5c>)
 800de5c:	f00b fa24 	bl	80192a8 <iprintf>
 800de60:	e017      	b.n	800de92 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de68:	f003 0304 	and.w	r3, r3, #4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d010      	beq.n	800de92 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800de76:	f023 0304 	bic.w	r3, r3, #4
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d003      	beq.n	800de92 <netif_set_link_down+0x4e>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	0801aa58 	.word	0x0801aa58
 800de9c:	0801ac64 	.word	0x0801ac64
 800dea0:	0801aaa8 	.word	0x0801aaa8

0800dea4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	683a      	ldr	r2, [r7, #0]
 800deb8:	61da      	str	r2, [r3, #28]
  }
}
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dec6:	b480      	push	{r7}
 800dec8:	b085      	sub	sp, #20
 800deca:	af00      	add	r7, sp, #0
 800decc:	60f8      	str	r0, [r7, #12]
 800dece:	60b9      	str	r1, [r7, #8]
 800ded0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ded2:	f06f 030b 	mvn.w	r3, #11
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
	...

0800dee4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	4603      	mov	r3, r0
 800deec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800deee:	79fb      	ldrb	r3, [r7, #7]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d013      	beq.n	800df1c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800def4:	4b0d      	ldr	r3, [pc, #52]	; (800df2c <netif_get_by_index+0x48>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	e00c      	b.n	800df16 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df02:	3301      	adds	r3, #1
 800df04:	b2db      	uxtb	r3, r3
 800df06:	79fa      	ldrb	r2, [r7, #7]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d101      	bne.n	800df10 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	e006      	b.n	800df1e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d1ef      	bne.n	800defc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3714      	adds	r7, #20
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	2000d06c 	.word	0x2000d06c

0800df30 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800df36:	f00a ffe3 	bl	8018f00 <sys_arch_protect>
 800df3a:	6038      	str	r0, [r7, #0]
 800df3c:	4b0d      	ldr	r3, [pc, #52]	; (800df74 <pbuf_free_ooseq+0x44>)
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	6838      	ldr	r0, [r7, #0]
 800df44:	f00a ffea 	bl	8018f1c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df48:	4b0b      	ldr	r3, [pc, #44]	; (800df78 <pbuf_free_ooseq+0x48>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	607b      	str	r3, [r7, #4]
 800df4e:	e00a      	b.n	800df66 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f002 f981 	bl	8010260 <tcp_free_ooseq>
      return;
 800df5e:	e005      	b.n	800df6c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	607b      	str	r3, [r7, #4]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1f1      	bne.n	800df50 <pbuf_free_ooseq+0x20>
    }
  }
}
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	2000d074 	.word	0x2000d074
 800df78:	2000d07c 	.word	0x2000d07c

0800df7c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800df84:	f7ff ffd4 	bl	800df30 <pbuf_free_ooseq>
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800df96:	f00a ffb3 	bl	8018f00 <sys_arch_protect>
 800df9a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800df9c:	4b0f      	ldr	r3, [pc, #60]	; (800dfdc <pbuf_pool_is_empty+0x4c>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dfa2:	4b0e      	ldr	r3, [pc, #56]	; (800dfdc <pbuf_pool_is_empty+0x4c>)
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f00a ffb7 	bl	8018f1c <sys_arch_unprotect>

  if (!queued) {
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10f      	bne.n	800dfd4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	480a      	ldr	r0, [pc, #40]	; (800dfe0 <pbuf_pool_is_empty+0x50>)
 800dfb8:	f7fe fee0 	bl	800cd7c <tcpip_try_callback>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d008      	beq.n	800dfd4 <pbuf_pool_is_empty+0x44>
 800dfc2:	f00a ff9d 	bl	8018f00 <sys_arch_protect>
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	4b04      	ldr	r3, [pc, #16]	; (800dfdc <pbuf_pool_is_empty+0x4c>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	701a      	strb	r2, [r3, #0]
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f00a ffa4 	bl	8018f1c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	2000d074 	.word	0x2000d074
 800dfe0:	0800df7d 	.word	0x0800df7d

0800dfe4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	4611      	mov	r1, r2
 800dff0:	461a      	mov	r2, r3
 800dff2:	460b      	mov	r3, r1
 800dff4:	80fb      	strh	r3, [r7, #6]
 800dff6:	4613      	mov	r3, r2
 800dff8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	88fa      	ldrh	r2, [r7, #6]
 800e00a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	88ba      	ldrh	r2, [r7, #4]
 800e010:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e012:	8b3b      	ldrh	r3, [r7, #24]
 800e014:	b2da      	uxtb	r2, r3
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	7f3a      	ldrb	r2, [r7, #28]
 800e01e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2201      	movs	r2, #1
 800e024:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	73da      	strb	r2, [r3, #15]
}
 800e02c:	bf00      	nop
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b08c      	sub	sp, #48	; 0x30
 800e03c:	af02      	add	r7, sp, #8
 800e03e:	4603      	mov	r3, r0
 800e040:	71fb      	strb	r3, [r7, #7]
 800e042:	460b      	mov	r3, r1
 800e044:	80bb      	strh	r3, [r7, #4]
 800e046:	4613      	mov	r3, r2
 800e048:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e04e:	887b      	ldrh	r3, [r7, #2]
 800e050:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e054:	d07f      	beq.n	800e156 <pbuf_alloc+0x11e>
 800e056:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e05a:	f300 80c8 	bgt.w	800e1ee <pbuf_alloc+0x1b6>
 800e05e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e062:	d010      	beq.n	800e086 <pbuf_alloc+0x4e>
 800e064:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e068:	f300 80c1 	bgt.w	800e1ee <pbuf_alloc+0x1b6>
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d002      	beq.n	800e076 <pbuf_alloc+0x3e>
 800e070:	2b41      	cmp	r3, #65	; 0x41
 800e072:	f040 80bc 	bne.w	800e1ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e076:	887a      	ldrh	r2, [r7, #2]
 800e078:	88bb      	ldrh	r3, [r7, #4]
 800e07a:	4619      	mov	r1, r3
 800e07c:	2000      	movs	r0, #0
 800e07e:	f000 f8d1 	bl	800e224 <pbuf_alloc_reference>
 800e082:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e084:	e0bd      	b.n	800e202 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e086:	2300      	movs	r3, #0
 800e088:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e08e:	88bb      	ldrh	r3, [r7, #4]
 800e090:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e092:	200c      	movs	r0, #12
 800e094:	f7ff fbb2 	bl	800d7fc <memp_malloc>
 800e098:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e0a0:	f7ff ff76 	bl	800df90 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e0aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0ac:	f000 faa8 	bl	800e600 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e0a7      	b.n	800e204 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e0b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0b6:	3303      	adds	r3, #3
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	f023 0303 	bic.w	r3, r3, #3
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	8b7a      	ldrh	r2, [r7, #26]
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	bf28      	it	cs
 800e0cc:	4613      	movcs	r3, r2
 800e0ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e0d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0d2:	3310      	adds	r3, #16
 800e0d4:	693a      	ldr	r2, [r7, #16]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	3303      	adds	r3, #3
 800e0da:	f023 0303 	bic.w	r3, r3, #3
 800e0de:	4618      	mov	r0, r3
 800e0e0:	89f9      	ldrh	r1, [r7, #14]
 800e0e2:	8b7a      	ldrh	r2, [r7, #26]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	887b      	ldrh	r3, [r7, #2]
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	6938      	ldr	r0, [r7, #16]
 800e0f2:	f7ff ff77 	bl	800dfe4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	f003 0303 	and.w	r3, r3, #3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d006      	beq.n	800e110 <pbuf_alloc+0xd8>
 800e102:	4b42      	ldr	r3, [pc, #264]	; (800e20c <pbuf_alloc+0x1d4>)
 800e104:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e108:	4941      	ldr	r1, [pc, #260]	; (800e210 <pbuf_alloc+0x1d8>)
 800e10a:	4842      	ldr	r0, [pc, #264]	; (800e214 <pbuf_alloc+0x1dc>)
 800e10c:	f00b f8cc 	bl	80192a8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e112:	3303      	adds	r3, #3
 800e114:	f023 0303 	bic.w	r3, r3, #3
 800e118:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e11c:	d106      	bne.n	800e12c <pbuf_alloc+0xf4>
 800e11e:	4b3b      	ldr	r3, [pc, #236]	; (800e20c <pbuf_alloc+0x1d4>)
 800e120:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e124:	493c      	ldr	r1, [pc, #240]	; (800e218 <pbuf_alloc+0x1e0>)
 800e126:	483b      	ldr	r0, [pc, #236]	; (800e214 <pbuf_alloc+0x1dc>)
 800e128:	f00b f8be 	bl	80192a8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d102      	bne.n	800e138 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	627b      	str	r3, [r7, #36]	; 0x24
 800e136:	e002      	b.n	800e13e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	693a      	ldr	r2, [r7, #16]
 800e13c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e142:	8b7a      	ldrh	r2, [r7, #26]
 800e144:	89fb      	ldrh	r3, [r7, #14]
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e14e:	8b7b      	ldrh	r3, [r7, #26]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d19e      	bne.n	800e092 <pbuf_alloc+0x5a>
      break;
 800e154:	e055      	b.n	800e202 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e158:	3303      	adds	r3, #3
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	f023 0303 	bic.w	r3, r3, #3
 800e160:	b29a      	uxth	r2, r3
 800e162:	88bb      	ldrh	r3, [r7, #4]
 800e164:	3303      	adds	r3, #3
 800e166:	b29b      	uxth	r3, r3
 800e168:	f023 0303 	bic.w	r3, r3, #3
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	4413      	add	r3, r2
 800e170:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e172:	8b3b      	ldrh	r3, [r7, #24]
 800e174:	3310      	adds	r3, #16
 800e176:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e178:	8b3a      	ldrh	r2, [r7, #24]
 800e17a:	88bb      	ldrh	r3, [r7, #4]
 800e17c:	3303      	adds	r3, #3
 800e17e:	f023 0303 	bic.w	r3, r3, #3
 800e182:	429a      	cmp	r2, r3
 800e184:	d306      	bcc.n	800e194 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e186:	8afa      	ldrh	r2, [r7, #22]
 800e188:	88bb      	ldrh	r3, [r7, #4]
 800e18a:	3303      	adds	r3, #3
 800e18c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e190:	429a      	cmp	r2, r3
 800e192:	d201      	bcs.n	800e198 <pbuf_alloc+0x160>
        return NULL;
 800e194:	2300      	movs	r3, #0
 800e196:	e035      	b.n	800e204 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e198:	8afb      	ldrh	r3, [r7, #22]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff f9ac 	bl	800d4f8 <mem_malloc>
 800e1a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d101      	bne.n	800e1ac <pbuf_alloc+0x174>
        return NULL;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e02b      	b.n	800e204 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1ae:	3310      	adds	r3, #16
 800e1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b2:	4413      	add	r3, r2
 800e1b4:	3303      	adds	r3, #3
 800e1b6:	f023 0303 	bic.w	r3, r3, #3
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	88b9      	ldrh	r1, [r7, #4]
 800e1be:	88ba      	ldrh	r2, [r7, #4]
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9301      	str	r3, [sp, #4]
 800e1c4:	887b      	ldrh	r3, [r7, #2]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ce:	f7ff ff09 	bl	800dfe4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	f003 0303 	and.w	r3, r3, #3
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d010      	beq.n	800e200 <pbuf_alloc+0x1c8>
 800e1de:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <pbuf_alloc+0x1d4>)
 800e1e0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e1e4:	490d      	ldr	r1, [pc, #52]	; (800e21c <pbuf_alloc+0x1e4>)
 800e1e6:	480b      	ldr	r0, [pc, #44]	; (800e214 <pbuf_alloc+0x1dc>)
 800e1e8:	f00b f85e 	bl	80192a8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e1ec:	e008      	b.n	800e200 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e1ee:	4b07      	ldr	r3, [pc, #28]	; (800e20c <pbuf_alloc+0x1d4>)
 800e1f0:	f240 1227 	movw	r2, #295	; 0x127
 800e1f4:	490a      	ldr	r1, [pc, #40]	; (800e220 <pbuf_alloc+0x1e8>)
 800e1f6:	4807      	ldr	r0, [pc, #28]	; (800e214 <pbuf_alloc+0x1dc>)
 800e1f8:	f00b f856 	bl	80192a8 <iprintf>
      return NULL;
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	e001      	b.n	800e204 <pbuf_alloc+0x1cc>
      break;
 800e200:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e204:	4618      	mov	r0, r3
 800e206:	3728      	adds	r7, #40	; 0x28
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	0801ac88 	.word	0x0801ac88
 800e210:	0801acb8 	.word	0x0801acb8
 800e214:	0801ace8 	.word	0x0801ace8
 800e218:	0801ad10 	.word	0x0801ad10
 800e21c:	0801ad44 	.word	0x0801ad44
 800e220:	0801ad70 	.word	0x0801ad70

0800e224 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af02      	add	r7, sp, #8
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	807b      	strh	r3, [r7, #2]
 800e230:	4613      	mov	r3, r2
 800e232:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e234:	883b      	ldrh	r3, [r7, #0]
 800e236:	2b41      	cmp	r3, #65	; 0x41
 800e238:	d009      	beq.n	800e24e <pbuf_alloc_reference+0x2a>
 800e23a:	883b      	ldrh	r3, [r7, #0]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d006      	beq.n	800e24e <pbuf_alloc_reference+0x2a>
 800e240:	4b0f      	ldr	r3, [pc, #60]	; (800e280 <pbuf_alloc_reference+0x5c>)
 800e242:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e246:	490f      	ldr	r1, [pc, #60]	; (800e284 <pbuf_alloc_reference+0x60>)
 800e248:	480f      	ldr	r0, [pc, #60]	; (800e288 <pbuf_alloc_reference+0x64>)
 800e24a:	f00b f82d 	bl	80192a8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e24e:	200b      	movs	r0, #11
 800e250:	f7ff fad4 	bl	800d7fc <memp_malloc>
 800e254:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	e00b      	b.n	800e278 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e260:	8879      	ldrh	r1, [r7, #2]
 800e262:	887a      	ldrh	r2, [r7, #2]
 800e264:	2300      	movs	r3, #0
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	883b      	ldrh	r3, [r7, #0]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	460b      	mov	r3, r1
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7ff feb7 	bl	800dfe4 <pbuf_init_alloced_pbuf>
  return p;
 800e276:	68fb      	ldr	r3, [r7, #12]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	0801ac88 	.word	0x0801ac88
 800e284:	0801ad8c 	.word	0x0801ad8c
 800e288:	0801ace8 	.word	0x0801ace8

0800e28c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b088      	sub	sp, #32
 800e290:	af02      	add	r7, sp, #8
 800e292:	607b      	str	r3, [r7, #4]
 800e294:	4603      	mov	r3, r0
 800e296:	73fb      	strb	r3, [r7, #15]
 800e298:	460b      	mov	r3, r1
 800e29a:	81bb      	strh	r3, [r7, #12]
 800e29c:	4613      	mov	r3, r2
 800e29e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e2a4:	8a7b      	ldrh	r3, [r7, #18]
 800e2a6:	3303      	adds	r3, #3
 800e2a8:	f023 0203 	bic.w	r2, r3, #3
 800e2ac:	89bb      	ldrh	r3, [r7, #12]
 800e2ae:	441a      	add	r2, r3
 800e2b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d901      	bls.n	800e2ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e018      	b.n	800e2ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e2ba:	6a3b      	ldr	r3, [r7, #32]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d007      	beq.n	800e2d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e2c0:	8a7b      	ldrh	r3, [r7, #18]
 800e2c2:	3303      	adds	r3, #3
 800e2c4:	f023 0303 	bic.w	r3, r3, #3
 800e2c8:	6a3a      	ldr	r2, [r7, #32]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	617b      	str	r3, [r7, #20]
 800e2ce:	e001      	b.n	800e2d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	89b9      	ldrh	r1, [r7, #12]
 800e2d8:	89ba      	ldrh	r2, [r7, #12]
 800e2da:	2302      	movs	r3, #2
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	897b      	ldrh	r3, [r7, #10]
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	6979      	ldr	r1, [r7, #20]
 800e2e6:	f7ff fe7d 	bl	800dfe4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e2ea:	687b      	ldr	r3, [r7, #4]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <pbuf_realloc+0x20>
 800e306:	4b3a      	ldr	r3, [pc, #232]	; (800e3f0 <pbuf_realloc+0xfc>)
 800e308:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e30c:	4939      	ldr	r1, [pc, #228]	; (800e3f4 <pbuf_realloc+0x100>)
 800e30e:	483a      	ldr	r0, [pc, #232]	; (800e3f8 <pbuf_realloc+0x104>)
 800e310:	f00a ffca 	bl	80192a8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	891b      	ldrh	r3, [r3, #8]
 800e318:	887a      	ldrh	r2, [r7, #2]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d263      	bcs.n	800e3e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	891a      	ldrh	r2, [r3, #8]
 800e322:	887b      	ldrh	r3, [r7, #2]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e328:	887b      	ldrh	r3, [r7, #2]
 800e32a:	817b      	strh	r3, [r7, #10]
  q = p;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e330:	e018      	b.n	800e364 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	895b      	ldrh	r3, [r3, #10]
 800e336:	897a      	ldrh	r2, [r7, #10]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	891a      	ldrh	r2, [r3, #8]
 800e340:	893b      	ldrh	r3, [r7, #8]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	b29a      	uxth	r2, r3
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <pbuf_realloc+0x70>
 800e356:	4b26      	ldr	r3, [pc, #152]	; (800e3f0 <pbuf_realloc+0xfc>)
 800e358:	f240 12af 	movw	r2, #431	; 0x1af
 800e35c:	4927      	ldr	r1, [pc, #156]	; (800e3fc <pbuf_realloc+0x108>)
 800e35e:	4826      	ldr	r0, [pc, #152]	; (800e3f8 <pbuf_realloc+0x104>)
 800e360:	f00a ffa2 	bl	80192a8 <iprintf>
  while (rem_len > q->len) {
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	895b      	ldrh	r3, [r3, #10]
 800e368:	897a      	ldrh	r2, [r7, #10]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d8e1      	bhi.n	800e332 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	7b1b      	ldrb	r3, [r3, #12]
 800e372:	f003 030f 	and.w	r3, r3, #15
 800e376:	2b00      	cmp	r3, #0
 800e378:	d121      	bne.n	800e3be <pbuf_realloc+0xca>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	895b      	ldrh	r3, [r3, #10]
 800e37e:	897a      	ldrh	r2, [r7, #10]
 800e380:	429a      	cmp	r2, r3
 800e382:	d01c      	beq.n	800e3be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	7b5b      	ldrb	r3, [r3, #13]
 800e388:	f003 0302 	and.w	r3, r3, #2
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d116      	bne.n	800e3be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	685a      	ldr	r2, [r3, #4]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	b29a      	uxth	r2, r3
 800e39a:	897b      	ldrh	r3, [r7, #10]
 800e39c:	4413      	add	r3, r2
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7fe ff9e 	bl	800d2e4 <mem_trim>
 800e3a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d106      	bne.n	800e3be <pbuf_realloc+0xca>
 800e3b0:	4b0f      	ldr	r3, [pc, #60]	; (800e3f0 <pbuf_realloc+0xfc>)
 800e3b2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e3b6:	4912      	ldr	r1, [pc, #72]	; (800e400 <pbuf_realloc+0x10c>)
 800e3b8:	480f      	ldr	r0, [pc, #60]	; (800e3f8 <pbuf_realloc+0x104>)
 800e3ba:	f00a ff75 	bl	80192a8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	897a      	ldrh	r2, [r7, #10]
 800e3c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	895a      	ldrh	r2, [r3, #10]
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d004      	beq.n	800e3de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f911 	bl	800e600 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	e000      	b.n	800e3e8 <pbuf_realloc+0xf4>
    return;
 800e3e6:	bf00      	nop

}
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0801ac88 	.word	0x0801ac88
 800e3f4:	0801ada0 	.word	0x0801ada0
 800e3f8:	0801ace8 	.word	0x0801ace8
 800e3fc:	0801adb8 	.word	0x0801adb8
 800e400:	0801add0 	.word	0x0801add0

0800e404 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	4613      	mov	r3, r2
 800e410:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <pbuf_add_header_impl+0x22>
 800e418:	4b2b      	ldr	r3, [pc, #172]	; (800e4c8 <pbuf_add_header_impl+0xc4>)
 800e41a:	f240 12df 	movw	r2, #479	; 0x1df
 800e41e:	492b      	ldr	r1, [pc, #172]	; (800e4cc <pbuf_add_header_impl+0xc8>)
 800e420:	482b      	ldr	r0, [pc, #172]	; (800e4d0 <pbuf_add_header_impl+0xcc>)
 800e422:	f00a ff41 	bl	80192a8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d003      	beq.n	800e434 <pbuf_add_header_impl+0x30>
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e432:	d301      	bcc.n	800e438 <pbuf_add_header_impl+0x34>
    return 1;
 800e434:	2301      	movs	r3, #1
 800e436:	e043      	b.n	800e4c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d101      	bne.n	800e442 <pbuf_add_header_impl+0x3e>
    return 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	e03e      	b.n	800e4c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	891a      	ldrh	r2, [r3, #8]
 800e44a:	8a7b      	ldrh	r3, [r7, #18]
 800e44c:	4413      	add	r3, r2
 800e44e:	b29b      	uxth	r3, r3
 800e450:	8a7a      	ldrh	r2, [r7, #18]
 800e452:	429a      	cmp	r2, r3
 800e454:	d901      	bls.n	800e45a <pbuf_add_header_impl+0x56>
    return 1;
 800e456:	2301      	movs	r3, #1
 800e458:	e032      	b.n	800e4c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	7b1b      	ldrb	r3, [r3, #12]
 800e45e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e460:	8a3b      	ldrh	r3, [r7, #16]
 800e462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00c      	beq.n	800e484 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	685a      	ldr	r2, [r3, #4]
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	425b      	negs	r3, r3
 800e472:	4413      	add	r3, r2
 800e474:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	3310      	adds	r3, #16
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d20d      	bcs.n	800e49c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e480:	2301      	movs	r3, #1
 800e482:	e01d      	b.n	800e4c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e484:	79fb      	ldrb	r3, [r7, #7]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d006      	beq.n	800e498 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	685a      	ldr	r2, [r3, #4]
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	425b      	negs	r3, r3
 800e492:	4413      	add	r3, r2
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	e001      	b.n	800e49c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e498:	2301      	movs	r3, #1
 800e49a:	e011      	b.n	800e4c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	895a      	ldrh	r2, [r3, #10]
 800e4a6:	8a7b      	ldrh	r3, [r7, #18]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	891a      	ldrh	r2, [r3, #8]
 800e4b4:	8a7b      	ldrh	r3, [r7, #18]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	811a      	strh	r2, [r3, #8]


  return 0;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3718      	adds	r7, #24
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	0801ac88 	.word	0x0801ac88
 800e4cc:	0801adec 	.word	0x0801adec
 800e4d0:	0801ace8 	.word	0x0801ace8

0800e4d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e4de:	2200      	movs	r2, #0
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff ff8e 	bl	800e404 <pbuf_add_header_impl>
 800e4e8:	4603      	mov	r3, r0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
	...

0800e4f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d106      	bne.n	800e512 <pbuf_remove_header+0x1e>
 800e504:	4b20      	ldr	r3, [pc, #128]	; (800e588 <pbuf_remove_header+0x94>)
 800e506:	f240 224b 	movw	r2, #587	; 0x24b
 800e50a:	4920      	ldr	r1, [pc, #128]	; (800e58c <pbuf_remove_header+0x98>)
 800e50c:	4820      	ldr	r0, [pc, #128]	; (800e590 <pbuf_remove_header+0x9c>)
 800e50e:	f00a fecb 	bl	80192a8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <pbuf_remove_header+0x2c>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e51e:	d301      	bcc.n	800e524 <pbuf_remove_header+0x30>
    return 1;
 800e520:	2301      	movs	r3, #1
 800e522:	e02c      	b.n	800e57e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <pbuf_remove_header+0x3a>
    return 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	e027      	b.n	800e57e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	895b      	ldrh	r3, [r3, #10]
 800e536:	89fa      	ldrh	r2, [r7, #14]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d908      	bls.n	800e54e <pbuf_remove_header+0x5a>
 800e53c:	4b12      	ldr	r3, [pc, #72]	; (800e588 <pbuf_remove_header+0x94>)
 800e53e:	f240 2255 	movw	r2, #597	; 0x255
 800e542:	4914      	ldr	r1, [pc, #80]	; (800e594 <pbuf_remove_header+0xa0>)
 800e544:	4812      	ldr	r0, [pc, #72]	; (800e590 <pbuf_remove_header+0x9c>)
 800e546:	f00a feaf 	bl	80192a8 <iprintf>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e017      	b.n	800e57e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	441a      	add	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	895a      	ldrh	r2, [r3, #10]
 800e564:	89fb      	ldrh	r3, [r7, #14]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	891a      	ldrh	r2, [r3, #8]
 800e572:	89fb      	ldrh	r3, [r7, #14]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	b29a      	uxth	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	0801ac88 	.word	0x0801ac88
 800e58c:	0801adec 	.word	0x0801adec
 800e590:	0801ace8 	.word	0x0801ace8
 800e594:	0801adf8 	.word	0x0801adf8

0800e598 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	460b      	mov	r3, r1
 800e5a2:	807b      	strh	r3, [r7, #2]
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e5a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	da08      	bge.n	800e5c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e5b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5b4:	425b      	negs	r3, r3
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7ff ff9b 	bl	800e4f4 <pbuf_remove_header>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	e007      	b.n	800e5d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e5c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5c6:	787a      	ldrb	r2, [r7, #1]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7ff ff1a 	bl	800e404 <pbuf_add_header_impl>
 800e5d0:	4603      	mov	r3, r0
  }
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b082      	sub	sp, #8
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e5e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff ffd2 	bl	800e598 <pbuf_header_impl>
 800e5f4:	4603      	mov	r3, r0
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
	...

0800e600 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b088      	sub	sp, #32
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d10b      	bne.n	800e626 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d106      	bne.n	800e622 <pbuf_free+0x22>
 800e614:	4b3b      	ldr	r3, [pc, #236]	; (800e704 <pbuf_free+0x104>)
 800e616:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e61a:	493b      	ldr	r1, [pc, #236]	; (800e708 <pbuf_free+0x108>)
 800e61c:	483b      	ldr	r0, [pc, #236]	; (800e70c <pbuf_free+0x10c>)
 800e61e:	f00a fe43 	bl	80192a8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e622:	2300      	movs	r3, #0
 800e624:	e069      	b.n	800e6fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e62a:	e062      	b.n	800e6f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e62c:	f00a fc68 	bl	8018f00 <sys_arch_protect>
 800e630:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	7b9b      	ldrb	r3, [r3, #14]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d106      	bne.n	800e648 <pbuf_free+0x48>
 800e63a:	4b32      	ldr	r3, [pc, #200]	; (800e704 <pbuf_free+0x104>)
 800e63c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e640:	4933      	ldr	r1, [pc, #204]	; (800e710 <pbuf_free+0x110>)
 800e642:	4832      	ldr	r0, [pc, #200]	; (800e70c <pbuf_free+0x10c>)
 800e644:	f00a fe30 	bl	80192a8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7b9b      	ldrb	r3, [r3, #14]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	739a      	strb	r2, [r3, #14]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	7b9b      	ldrb	r3, [r3, #14]
 800e658:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e65a:	69b8      	ldr	r0, [r7, #24]
 800e65c:	f00a fc5e 	bl	8018f1c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e660:	7dfb      	ldrb	r3, [r7, #23]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d143      	bne.n	800e6ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	7b1b      	ldrb	r3, [r3, #12]
 800e670:	f003 030f 	and.w	r3, r3, #15
 800e674:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	7b5b      	ldrb	r3, [r3, #13]
 800e67a:	f003 0302 	and.w	r3, r3, #2
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d011      	beq.n	800e6a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <pbuf_free+0x9c>
 800e68e:	4b1d      	ldr	r3, [pc, #116]	; (800e704 <pbuf_free+0x104>)
 800e690:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e694:	491f      	ldr	r1, [pc, #124]	; (800e714 <pbuf_free+0x114>)
 800e696:	481d      	ldr	r0, [pc, #116]	; (800e70c <pbuf_free+0x10c>)
 800e698:	f00a fe06 	bl	80192a8 <iprintf>
        pc->custom_free_function(p);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	4798      	blx	r3
 800e6a4:	e01d      	b.n	800e6e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d104      	bne.n	800e6b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	200c      	movs	r0, #12
 800e6b0:	f7ff f8f6 	bl	800d8a0 <memp_free>
 800e6b4:	e015      	b.n	800e6e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d104      	bne.n	800e6c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e6bc:	6879      	ldr	r1, [r7, #4]
 800e6be:	200b      	movs	r0, #11
 800e6c0:	f7ff f8ee 	bl	800d8a0 <memp_free>
 800e6c4:	e00d      	b.n	800e6e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e6c6:	7bfb      	ldrb	r3, [r7, #15]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <pbuf_free+0xd4>
          mem_free(p);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7fe fd79 	bl	800d1c4 <mem_free>
 800e6d2:	e006      	b.n	800e6e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e6d4:	4b0b      	ldr	r3, [pc, #44]	; (800e704 <pbuf_free+0x104>)
 800e6d6:	f240 320f 	movw	r2, #783	; 0x30f
 800e6da:	490f      	ldr	r1, [pc, #60]	; (800e718 <pbuf_free+0x118>)
 800e6dc:	480b      	ldr	r0, [pc, #44]	; (800e70c <pbuf_free+0x10c>)
 800e6de:	f00a fde3 	bl	80192a8 <iprintf>
        }
      }
      count++;
 800e6e2:	7ffb      	ldrb	r3, [r7, #31]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	607b      	str	r3, [r7, #4]
 800e6ec:	e001      	b.n	800e6f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d199      	bne.n	800e62c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e6f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3720      	adds	r7, #32
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	0801ac88 	.word	0x0801ac88
 800e708:	0801adec 	.word	0x0801adec
 800e70c:	0801ace8 	.word	0x0801ace8
 800e710:	0801ae18 	.word	0x0801ae18
 800e714:	0801ae30 	.word	0x0801ae30
 800e718:	0801ae54 	.word	0x0801ae54

0800e71c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e728:	e005      	b.n	800e736 <pbuf_clen+0x1a>
    ++len;
 800e72a:	89fb      	ldrh	r3, [r7, #14]
 800e72c:	3301      	adds	r3, #1
 800e72e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1f6      	bne.n	800e72a <pbuf_clen+0xe>
  }
  return len;
 800e73c:	89fb      	ldrh	r3, [r7, #14]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3714      	adds	r7, #20
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
	...

0800e74c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d016      	beq.n	800e788 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e75a:	f00a fbd1 	bl	8018f00 <sys_arch_protect>
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7b9b      	ldrb	r3, [r3, #14]
 800e764:	3301      	adds	r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	739a      	strb	r2, [r3, #14]
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f00a fbd5 	bl	8018f1c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7b9b      	ldrb	r3, [r3, #14]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d106      	bne.n	800e788 <pbuf_ref+0x3c>
 800e77a:	4b05      	ldr	r3, [pc, #20]	; (800e790 <pbuf_ref+0x44>)
 800e77c:	f240 3242 	movw	r2, #834	; 0x342
 800e780:	4904      	ldr	r1, [pc, #16]	; (800e794 <pbuf_ref+0x48>)
 800e782:	4805      	ldr	r0, [pc, #20]	; (800e798 <pbuf_ref+0x4c>)
 800e784:	f00a fd90 	bl	80192a8 <iprintf>
  }
}
 800e788:	bf00      	nop
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	0801ac88 	.word	0x0801ac88
 800e794:	0801ae68 	.word	0x0801ae68
 800e798:	0801ace8 	.word	0x0801ace8

0800e79c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d002      	beq.n	800e7b2 <pbuf_cat+0x16>
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d107      	bne.n	800e7c2 <pbuf_cat+0x26>
 800e7b2:	4b20      	ldr	r3, [pc, #128]	; (800e834 <pbuf_cat+0x98>)
 800e7b4:	f240 3259 	movw	r2, #857	; 0x359
 800e7b8:	491f      	ldr	r1, [pc, #124]	; (800e838 <pbuf_cat+0x9c>)
 800e7ba:	4820      	ldr	r0, [pc, #128]	; (800e83c <pbuf_cat+0xa0>)
 800e7bc:	f00a fd74 	bl	80192a8 <iprintf>
 800e7c0:	e034      	b.n	800e82c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e00a      	b.n	800e7de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	891a      	ldrh	r2, [r3, #8]
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	891b      	ldrh	r3, [r3, #8]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	60fb      	str	r3, [r7, #12]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1f0      	bne.n	800e7c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	891a      	ldrh	r2, [r3, #8]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	895b      	ldrh	r3, [r3, #10]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d006      	beq.n	800e800 <pbuf_cat+0x64>
 800e7f2:	4b10      	ldr	r3, [pc, #64]	; (800e834 <pbuf_cat+0x98>)
 800e7f4:	f240 3262 	movw	r2, #866	; 0x362
 800e7f8:	4911      	ldr	r1, [pc, #68]	; (800e840 <pbuf_cat+0xa4>)
 800e7fa:	4810      	ldr	r0, [pc, #64]	; (800e83c <pbuf_cat+0xa0>)
 800e7fc:	f00a fd54 	bl	80192a8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d006      	beq.n	800e816 <pbuf_cat+0x7a>
 800e808:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <pbuf_cat+0x98>)
 800e80a:	f240 3263 	movw	r2, #867	; 0x363
 800e80e:	490d      	ldr	r1, [pc, #52]	; (800e844 <pbuf_cat+0xa8>)
 800e810:	480a      	ldr	r0, [pc, #40]	; (800e83c <pbuf_cat+0xa0>)
 800e812:	f00a fd49 	bl	80192a8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	891a      	ldrh	r2, [r3, #8]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	891b      	ldrh	r3, [r3, #8]
 800e81e:	4413      	add	r3, r2
 800e820:	b29a      	uxth	r2, r3
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e82c:	3710      	adds	r7, #16
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}
 800e832:	bf00      	nop
 800e834:	0801ac88 	.word	0x0801ac88
 800e838:	0801ae7c 	.word	0x0801ae7c
 800e83c:	0801ace8 	.word	0x0801ace8
 800e840:	0801aeb4 	.word	0x0801aeb4
 800e844:	0801aee4 	.word	0x0801aee4

0800e848 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7ff ffa1 	bl	800e79c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e85a:	6838      	ldr	r0, [r7, #0]
 800e85c:	f7ff ff76 	bl	800e74c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e860:	bf00      	nop
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e872:	2300      	movs	r3, #0
 800e874:	617b      	str	r3, [r7, #20]
 800e876:	2300      	movs	r3, #0
 800e878:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <pbuf_copy+0x2a>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <pbuf_copy+0x2a>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	891a      	ldrh	r2, [r3, #8]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	891b      	ldrh	r3, [r3, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d209      	bcs.n	800e8a6 <pbuf_copy+0x3e>
 800e892:	4b57      	ldr	r3, [pc, #348]	; (800e9f0 <pbuf_copy+0x188>)
 800e894:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e898:	4956      	ldr	r1, [pc, #344]	; (800e9f4 <pbuf_copy+0x18c>)
 800e89a:	4857      	ldr	r0, [pc, #348]	; (800e9f8 <pbuf_copy+0x190>)
 800e89c:	f00a fd04 	bl	80192a8 <iprintf>
 800e8a0:	f06f 030f 	mvn.w	r3, #15
 800e8a4:	e09f      	b.n	800e9e6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	895b      	ldrh	r3, [r3, #10]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	1ad2      	subs	r2, r2, r3
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	895b      	ldrh	r3, [r3, #10]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	1acb      	subs	r3, r1, r3
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d306      	bcc.n	800e8cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	895b      	ldrh	r3, [r3, #10]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	60fb      	str	r3, [r7, #12]
 800e8ca:	e005      	b.n	800e8d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	895b      	ldrh	r3, [r3, #10]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	1ad3      	subs	r3, r2, r3
 800e8d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	18d0      	adds	r0, r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	685a      	ldr	r2, [r3, #4]
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	f00a fc6b 	bl	80191c6 <memcpy>
    offset_to += len;
 800e8f0:	697a      	ldr	r2, [r7, #20]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	895b      	ldrh	r3, [r3, #10]
 800e904:	461a      	mov	r2, r3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	4293      	cmp	r3, r2
 800e90a:	d906      	bls.n	800e91a <pbuf_copy+0xb2>
 800e90c:	4b38      	ldr	r3, [pc, #224]	; (800e9f0 <pbuf_copy+0x188>)
 800e90e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e912:	493a      	ldr	r1, [pc, #232]	; (800e9fc <pbuf_copy+0x194>)
 800e914:	4838      	ldr	r0, [pc, #224]	; (800e9f8 <pbuf_copy+0x190>)
 800e916:	f00a fcc7 	bl	80192a8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	895b      	ldrh	r3, [r3, #10]
 800e91e:	461a      	mov	r2, r3
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	4293      	cmp	r3, r2
 800e924:	d906      	bls.n	800e934 <pbuf_copy+0xcc>
 800e926:	4b32      	ldr	r3, [pc, #200]	; (800e9f0 <pbuf_copy+0x188>)
 800e928:	f240 32da 	movw	r2, #986	; 0x3da
 800e92c:	4934      	ldr	r1, [pc, #208]	; (800ea00 <pbuf_copy+0x198>)
 800e92e:	4832      	ldr	r0, [pc, #200]	; (800e9f8 <pbuf_copy+0x190>)
 800e930:	f00a fcba 	bl	80192a8 <iprintf>
    if (offset_from >= p_from->len) {
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	895b      	ldrh	r3, [r3, #10]
 800e938:	461a      	mov	r2, r3
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d304      	bcc.n	800e94a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e940:	2300      	movs	r3, #0
 800e942:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	895b      	ldrh	r3, [r3, #10]
 800e94e:	461a      	mov	r2, r3
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	4293      	cmp	r3, r2
 800e954:	d114      	bne.n	800e980 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10c      	bne.n	800e980 <pbuf_copy+0x118>
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d009      	beq.n	800e980 <pbuf_copy+0x118>
 800e96c:	4b20      	ldr	r3, [pc, #128]	; (800e9f0 <pbuf_copy+0x188>)
 800e96e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e972:	4924      	ldr	r1, [pc, #144]	; (800ea04 <pbuf_copy+0x19c>)
 800e974:	4820      	ldr	r0, [pc, #128]	; (800e9f8 <pbuf_copy+0x190>)
 800e976:	f00a fc97 	bl	80192a8 <iprintf>
 800e97a:	f06f 030f 	mvn.w	r3, #15
 800e97e:	e032      	b.n	800e9e6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d013      	beq.n	800e9ae <pbuf_copy+0x146>
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	895a      	ldrh	r2, [r3, #10]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	891b      	ldrh	r3, [r3, #8]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d10d      	bne.n	800e9ae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d009      	beq.n	800e9ae <pbuf_copy+0x146>
 800e99a:	4b15      	ldr	r3, [pc, #84]	; (800e9f0 <pbuf_copy+0x188>)
 800e99c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e9a0:	4919      	ldr	r1, [pc, #100]	; (800ea08 <pbuf_copy+0x1a0>)
 800e9a2:	4815      	ldr	r0, [pc, #84]	; (800e9f8 <pbuf_copy+0x190>)
 800e9a4:	f00a fc80 	bl	80192a8 <iprintf>
 800e9a8:	f06f 0305 	mvn.w	r3, #5
 800e9ac:	e01b      	b.n	800e9e6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d013      	beq.n	800e9dc <pbuf_copy+0x174>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	895a      	ldrh	r2, [r3, #10]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	891b      	ldrh	r3, [r3, #8]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d10d      	bne.n	800e9dc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d009      	beq.n	800e9dc <pbuf_copy+0x174>
 800e9c8:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <pbuf_copy+0x188>)
 800e9ca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e9ce:	490e      	ldr	r1, [pc, #56]	; (800ea08 <pbuf_copy+0x1a0>)
 800e9d0:	4809      	ldr	r0, [pc, #36]	; (800e9f8 <pbuf_copy+0x190>)
 800e9d2:	f00a fc69 	bl	80192a8 <iprintf>
 800e9d6:	f06f 0305 	mvn.w	r3, #5
 800e9da:	e004      	b.n	800e9e6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f47f af61 	bne.w	800e8a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	0801ac88 	.word	0x0801ac88
 800e9f4:	0801af30 	.word	0x0801af30
 800e9f8:	0801ace8 	.word	0x0801ace8
 800e9fc:	0801af60 	.word	0x0801af60
 800ea00:	0801af78 	.word	0x0801af78
 800ea04:	0801af94 	.word	0x0801af94
 800ea08:	0801afa4 	.word	0x0801afa4

0800ea0c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b088      	sub	sp, #32
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	4611      	mov	r1, r2
 800ea18:	461a      	mov	r2, r3
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	80fb      	strh	r3, [r7, #6]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ea22:	2300      	movs	r3, #0
 800ea24:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d108      	bne.n	800ea42 <pbuf_copy_partial+0x36>
 800ea30:	4b2b      	ldr	r3, [pc, #172]	; (800eae0 <pbuf_copy_partial+0xd4>)
 800ea32:	f240 420a 	movw	r2, #1034	; 0x40a
 800ea36:	492b      	ldr	r1, [pc, #172]	; (800eae4 <pbuf_copy_partial+0xd8>)
 800ea38:	482b      	ldr	r0, [pc, #172]	; (800eae8 <pbuf_copy_partial+0xdc>)
 800ea3a:	f00a fc35 	bl	80192a8 <iprintf>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e04a      	b.n	800ead8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d108      	bne.n	800ea5a <pbuf_copy_partial+0x4e>
 800ea48:	4b25      	ldr	r3, [pc, #148]	; (800eae0 <pbuf_copy_partial+0xd4>)
 800ea4a:	f240 420b 	movw	r2, #1035	; 0x40b
 800ea4e:	4927      	ldr	r1, [pc, #156]	; (800eaec <pbuf_copy_partial+0xe0>)
 800ea50:	4825      	ldr	r0, [pc, #148]	; (800eae8 <pbuf_copy_partial+0xdc>)
 800ea52:	f00a fc29 	bl	80192a8 <iprintf>
 800ea56:	2300      	movs	r3, #0
 800ea58:	e03e      	b.n	800ead8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	61fb      	str	r3, [r7, #28]
 800ea5e:	e034      	b.n	800eaca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ea60:	88bb      	ldrh	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00a      	beq.n	800ea7c <pbuf_copy_partial+0x70>
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	895b      	ldrh	r3, [r3, #10]
 800ea6a:	88ba      	ldrh	r2, [r7, #4]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d305      	bcc.n	800ea7c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	895b      	ldrh	r3, [r3, #10]
 800ea74:	88ba      	ldrh	r2, [r7, #4]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	80bb      	strh	r3, [r7, #4]
 800ea7a:	e023      	b.n	800eac4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	895a      	ldrh	r2, [r3, #10]
 800ea80:	88bb      	ldrh	r3, [r7, #4]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea86:	8b3a      	ldrh	r2, [r7, #24]
 800ea88:	88fb      	ldrh	r3, [r7, #6]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d901      	bls.n	800ea92 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea8e:	88fb      	ldrh	r3, [r7, #6]
 800ea90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea92:	8b7b      	ldrh	r3, [r7, #26]
 800ea94:	68ba      	ldr	r2, [r7, #8]
 800ea96:	18d0      	adds	r0, r2, r3
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	88bb      	ldrh	r3, [r7, #4]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	8b3a      	ldrh	r2, [r7, #24]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	f00a fb8f 	bl	80191c6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800eaa8:	8afa      	ldrh	r2, [r7, #22]
 800eaaa:	8b3b      	ldrh	r3, [r7, #24]
 800eaac:	4413      	add	r3, r2
 800eaae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eab0:	8b7a      	ldrh	r2, [r7, #26]
 800eab2:	8b3b      	ldrh	r3, [r7, #24]
 800eab4:	4413      	add	r3, r2
 800eab6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eab8:	88fa      	ldrh	r2, [r7, #6]
 800eaba:	8b3b      	ldrh	r3, [r7, #24]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	61fb      	str	r3, [r7, #28]
 800eaca:	88fb      	ldrh	r3, [r7, #6]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d002      	beq.n	800ead6 <pbuf_copy_partial+0xca>
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1c4      	bne.n	800ea60 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ead6:	8afb      	ldrh	r3, [r7, #22]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3720      	adds	r7, #32
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	0801ac88 	.word	0x0801ac88
 800eae4:	0801afd0 	.word	0x0801afd0
 800eae8:	0801ace8 	.word	0x0801ace8
 800eaec:	0801aff0 	.word	0x0801aff0

0800eaf0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	603a      	str	r2, [r7, #0]
 800eafa:	71fb      	strb	r3, [r7, #7]
 800eafc:	460b      	mov	r3, r1
 800eafe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	8919      	ldrh	r1, [r3, #8]
 800eb04:	88ba      	ldrh	r2, [r7, #4]
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff fa95 	bl	800e038 <pbuf_alloc>
 800eb0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d101      	bne.n	800eb1a <pbuf_clone+0x2a>
    return NULL;
 800eb16:	2300      	movs	r3, #0
 800eb18:	e011      	b.n	800eb3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	68f8      	ldr	r0, [r7, #12]
 800eb1e:	f7ff fea3 	bl	800e868 <pbuf_copy>
 800eb22:	4603      	mov	r3, r0
 800eb24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eb26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d006      	beq.n	800eb3c <pbuf_clone+0x4c>
 800eb2e:	4b06      	ldr	r3, [pc, #24]	; (800eb48 <pbuf_clone+0x58>)
 800eb30:	f240 5224 	movw	r2, #1316	; 0x524
 800eb34:	4905      	ldr	r1, [pc, #20]	; (800eb4c <pbuf_clone+0x5c>)
 800eb36:	4806      	ldr	r0, [pc, #24]	; (800eb50 <pbuf_clone+0x60>)
 800eb38:	f00a fbb6 	bl	80192a8 <iprintf>
  return q;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	0801ac88 	.word	0x0801ac88
 800eb4c:	0801b0fc 	.word	0x0801b0fc
 800eb50:	0801ace8 	.word	0x0801ace8

0800eb54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb58:	f00a fbbe 	bl	80192d8 <rand>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	4b01      	ldr	r3, [pc, #4]	; (800eb74 <tcp_init+0x20>)
 800eb6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eb70:	bf00      	nop
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20000058 	.word	0x20000058

0800eb78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	7d1b      	ldrb	r3, [r3, #20]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d105      	bne.n	800eb94 <tcp_free+0x1c>
 800eb88:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <tcp_free+0x2c>)
 800eb8a:	22d4      	movs	r2, #212	; 0xd4
 800eb8c:	4906      	ldr	r1, [pc, #24]	; (800eba8 <tcp_free+0x30>)
 800eb8e:	4807      	ldr	r0, [pc, #28]	; (800ebac <tcp_free+0x34>)
 800eb90:	f00a fb8a 	bl	80192a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eb94:	6879      	ldr	r1, [r7, #4]
 800eb96:	2001      	movs	r0, #1
 800eb98:	f7fe fe82 	bl	800d8a0 <memp_free>
}
 800eb9c:	bf00      	nop
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	0801b188 	.word	0x0801b188
 800eba8:	0801b1b8 	.word	0x0801b1b8
 800ebac:	0801b1cc 	.word	0x0801b1cc

0800ebb0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	7d1b      	ldrb	r3, [r3, #20]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d105      	bne.n	800ebcc <tcp_free_listen+0x1c>
 800ebc0:	4b06      	ldr	r3, [pc, #24]	; (800ebdc <tcp_free_listen+0x2c>)
 800ebc2:	22df      	movs	r2, #223	; 0xdf
 800ebc4:	4906      	ldr	r1, [pc, #24]	; (800ebe0 <tcp_free_listen+0x30>)
 800ebc6:	4807      	ldr	r0, [pc, #28]	; (800ebe4 <tcp_free_listen+0x34>)
 800ebc8:	f00a fb6e 	bl	80192a8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ebcc:	6879      	ldr	r1, [r7, #4]
 800ebce:	2002      	movs	r0, #2
 800ebd0:	f7fe fe66 	bl	800d8a0 <memp_free>
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	0801b188 	.word	0x0801b188
 800ebe0:	0801b1f4 	.word	0x0801b1f4
 800ebe4:	0801b1cc 	.word	0x0801b1cc

0800ebe8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ebec:	f000 fea2 	bl	800f934 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ebf0:	4b07      	ldr	r3, [pc, #28]	; (800ec10 <tcp_tmr+0x28>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	b2da      	uxtb	r2, r3
 800ebf8:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <tcp_tmr+0x28>)
 800ebfa:	701a      	strb	r2, [r3, #0]
 800ebfc:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <tcp_tmr+0x28>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	f003 0301 	and.w	r3, r3, #1
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d001      	beq.n	800ec0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ec08:	f000 fb54 	bl	800f2b4 <tcp_slowtmr>
  }
}
 800ec0c:	bf00      	nop
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	20004b19 	.word	0x20004b19

0800ec14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d105      	bne.n	800ec30 <tcp_remove_listener+0x1c>
 800ec24:	4b0d      	ldr	r3, [pc, #52]	; (800ec5c <tcp_remove_listener+0x48>)
 800ec26:	22ff      	movs	r2, #255	; 0xff
 800ec28:	490d      	ldr	r1, [pc, #52]	; (800ec60 <tcp_remove_listener+0x4c>)
 800ec2a:	480e      	ldr	r0, [pc, #56]	; (800ec64 <tcp_remove_listener+0x50>)
 800ec2c:	f00a fb3c 	bl	80192a8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	e00a      	b.n	800ec4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d102      	bne.n	800ec46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2200      	movs	r2, #0
 800ec44:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f1      	bne.n	800ec36 <tcp_remove_listener+0x22>
    }
  }
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	0801b188 	.word	0x0801b188
 800ec60:	0801b210 	.word	0x0801b210
 800ec64:	0801b1cc 	.word	0x0801b1cc

0800ec68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d106      	bne.n	800ec84 <tcp_listen_closed+0x1c>
 800ec76:	4b14      	ldr	r3, [pc, #80]	; (800ecc8 <tcp_listen_closed+0x60>)
 800ec78:	f240 1211 	movw	r2, #273	; 0x111
 800ec7c:	4913      	ldr	r1, [pc, #76]	; (800eccc <tcp_listen_closed+0x64>)
 800ec7e:	4814      	ldr	r0, [pc, #80]	; (800ecd0 <tcp_listen_closed+0x68>)
 800ec80:	f00a fb12 	bl	80192a8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	7d1b      	ldrb	r3, [r3, #20]
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d006      	beq.n	800ec9a <tcp_listen_closed+0x32>
 800ec8c:	4b0e      	ldr	r3, [pc, #56]	; (800ecc8 <tcp_listen_closed+0x60>)
 800ec8e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ec92:	4910      	ldr	r1, [pc, #64]	; (800ecd4 <tcp_listen_closed+0x6c>)
 800ec94:	480e      	ldr	r0, [pc, #56]	; (800ecd0 <tcp_listen_closed+0x68>)
 800ec96:	f00a fb07 	bl	80192a8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	60fb      	str	r3, [r7, #12]
 800ec9e:	e00b      	b.n	800ecb8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eca0:	4a0d      	ldr	r2, [pc, #52]	; (800ecd8 <tcp_listen_closed+0x70>)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7ff ffb1 	bl	800ec14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	60fb      	str	r3, [r7, #12]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2b03      	cmp	r3, #3
 800ecbc:	d9f0      	bls.n	800eca0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ecbe:	bf00      	nop
 800ecc0:	bf00      	nop
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	0801b188 	.word	0x0801b188
 800eccc:	0801b238 	.word	0x0801b238
 800ecd0:	0801b1cc 	.word	0x0801b1cc
 800ecd4:	0801b244 	.word	0x0801b244
 800ecd8:	0801d694 	.word	0x0801d694

0800ecdc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ecdc:	b5b0      	push	{r4, r5, r7, lr}
 800ecde:	b088      	sub	sp, #32
 800ece0:	af04      	add	r7, sp, #16
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <tcp_close_shutdown+0x20>
 800ecee:	4b63      	ldr	r3, [pc, #396]	; (800ee7c <tcp_close_shutdown+0x1a0>)
 800ecf0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ecf4:	4962      	ldr	r1, [pc, #392]	; (800ee80 <tcp_close_shutdown+0x1a4>)
 800ecf6:	4863      	ldr	r0, [pc, #396]	; (800ee84 <tcp_close_shutdown+0x1a8>)
 800ecf8:	f00a fad6 	bl	80192a8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ecfc:	78fb      	ldrb	r3, [r7, #3]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d066      	beq.n	800edd0 <tcp_close_shutdown+0xf4>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7d1b      	ldrb	r3, [r3, #20]
 800ed06:	2b04      	cmp	r3, #4
 800ed08:	d003      	beq.n	800ed12 <tcp_close_shutdown+0x36>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	7d1b      	ldrb	r3, [r3, #20]
 800ed0e:	2b07      	cmp	r3, #7
 800ed10:	d15e      	bne.n	800edd0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d104      	bne.n	800ed24 <tcp_close_shutdown+0x48>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed22:	d055      	beq.n	800edd0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8b5b      	ldrh	r3, [r3, #26]
 800ed28:	f003 0310 	and.w	r3, r3, #16
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d106      	bne.n	800ed3e <tcp_close_shutdown+0x62>
 800ed30:	4b52      	ldr	r3, [pc, #328]	; (800ee7c <tcp_close_shutdown+0x1a0>)
 800ed32:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ed36:	4954      	ldr	r1, [pc, #336]	; (800ee88 <tcp_close_shutdown+0x1ac>)
 800ed38:	4852      	ldr	r0, [pc, #328]	; (800ee84 <tcp_close_shutdown+0x1a8>)
 800ed3a:	f00a fab5 	bl	80192a8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed46:	687d      	ldr	r5, [r7, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	8ad2      	ldrh	r2, [r2, #22]
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	8b09      	ldrh	r1, [r1, #24]
 800ed54:	9102      	str	r1, [sp, #8]
 800ed56:	9201      	str	r2, [sp, #4]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4601      	mov	r1, r0
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f004 fe8d 	bl	8013a80 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f001 f8c6 	bl	800fef8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ed6c:	4b47      	ldr	r3, [pc, #284]	; (800ee8c <tcp_close_shutdown+0x1b0>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d105      	bne.n	800ed82 <tcp_close_shutdown+0xa6>
 800ed76:	4b45      	ldr	r3, [pc, #276]	; (800ee8c <tcp_close_shutdown+0x1b0>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	4a43      	ldr	r2, [pc, #268]	; (800ee8c <tcp_close_shutdown+0x1b0>)
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	e013      	b.n	800edaa <tcp_close_shutdown+0xce>
 800ed82:	4b42      	ldr	r3, [pc, #264]	; (800ee8c <tcp_close_shutdown+0x1b0>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	e00c      	b.n	800eda4 <tcp_close_shutdown+0xc8>
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d104      	bne.n	800ed9e <tcp_close_shutdown+0xc2>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	68da      	ldr	r2, [r3, #12]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	60da      	str	r2, [r3, #12]
 800ed9c:	e005      	b.n	800edaa <tcp_close_shutdown+0xce>
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	60fb      	str	r3, [r7, #12]
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d1ef      	bne.n	800ed8a <tcp_close_shutdown+0xae>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	60da      	str	r2, [r3, #12]
 800edb0:	4b37      	ldr	r3, [pc, #220]	; (800ee90 <tcp_close_shutdown+0x1b4>)
 800edb2:	2201      	movs	r2, #1
 800edb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800edb6:	4b37      	ldr	r3, [pc, #220]	; (800ee94 <tcp_close_shutdown+0x1b8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d102      	bne.n	800edc6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800edc0:	f003 fd5a 	bl	8012878 <tcp_trigger_input_pcb_close>
 800edc4:	e002      	b.n	800edcc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff fed6 	bl	800eb78 <tcp_free>
      }
      return ERR_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	e050      	b.n	800ee72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	7d1b      	ldrb	r3, [r3, #20]
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d03b      	beq.n	800ee50 <tcp_close_shutdown+0x174>
 800edd8:	2b02      	cmp	r3, #2
 800edda:	dc44      	bgt.n	800ee66 <tcp_close_shutdown+0x18a>
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <tcp_close_shutdown+0x10a>
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d02a      	beq.n	800ee3a <tcp_close_shutdown+0x15e>
 800ede4:	e03f      	b.n	800ee66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8adb      	ldrh	r3, [r3, #22]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d021      	beq.n	800ee32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800edee:	4b2a      	ldr	r3, [pc, #168]	; (800ee98 <tcp_close_shutdown+0x1bc>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d105      	bne.n	800ee04 <tcp_close_shutdown+0x128>
 800edf8:	4b27      	ldr	r3, [pc, #156]	; (800ee98 <tcp_close_shutdown+0x1bc>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	4a26      	ldr	r2, [pc, #152]	; (800ee98 <tcp_close_shutdown+0x1bc>)
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	e013      	b.n	800ee2c <tcp_close_shutdown+0x150>
 800ee04:	4b24      	ldr	r3, [pc, #144]	; (800ee98 <tcp_close_shutdown+0x1bc>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	60bb      	str	r3, [r7, #8]
 800ee0a:	e00c      	b.n	800ee26 <tcp_close_shutdown+0x14a>
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d104      	bne.n	800ee20 <tcp_close_shutdown+0x144>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68da      	ldr	r2, [r3, #12]
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	60da      	str	r2, [r3, #12]
 800ee1e:	e005      	b.n	800ee2c <tcp_close_shutdown+0x150>
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	60bb      	str	r3, [r7, #8]
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1ef      	bne.n	800ee0c <tcp_close_shutdown+0x130>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff fea0 	bl	800eb78 <tcp_free>
      break;
 800ee38:	e01a      	b.n	800ee70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff ff14 	bl	800ec68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ee40:	6879      	ldr	r1, [r7, #4]
 800ee42:	4816      	ldr	r0, [pc, #88]	; (800ee9c <tcp_close_shutdown+0x1c0>)
 800ee44:	f001 f8a8 	bl	800ff98 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff feb1 	bl	800ebb0 <tcp_free_listen>
      break;
 800ee4e:	e00f      	b.n	800ee70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee50:	6879      	ldr	r1, [r7, #4]
 800ee52:	480e      	ldr	r0, [pc, #56]	; (800ee8c <tcp_close_shutdown+0x1b0>)
 800ee54:	f001 f8a0 	bl	800ff98 <tcp_pcb_remove>
 800ee58:	4b0d      	ldr	r3, [pc, #52]	; (800ee90 <tcp_close_shutdown+0x1b4>)
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f7ff fe8a 	bl	800eb78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ee64:	e004      	b.n	800ee70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f81a 	bl	800eea0 <tcp_close_shutdown_fin>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	e000      	b.n	800ee72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ee70:	2300      	movs	r3, #0
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bdb0      	pop	{r4, r5, r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	0801b188 	.word	0x0801b188
 800ee80:	0801b25c 	.word	0x0801b25c
 800ee84:	0801b1cc 	.word	0x0801b1cc
 800ee88:	0801b27c 	.word	0x0801b27c
 800ee8c:	2000d07c 	.word	0x2000d07c
 800ee90:	2000d078 	.word	0x2000d078
 800ee94:	2000d090 	.word	0x2000d090
 800ee98:	2000d088 	.word	0x2000d088
 800ee9c:	2000d084 	.word	0x2000d084

0800eea0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_close_shutdown_fin+0x1c>
 800eeae:	4b2e      	ldr	r3, [pc, #184]	; (800ef68 <tcp_close_shutdown_fin+0xc8>)
 800eeb0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eeb4:	492d      	ldr	r1, [pc, #180]	; (800ef6c <tcp_close_shutdown_fin+0xcc>)
 800eeb6:	482e      	ldr	r0, [pc, #184]	; (800ef70 <tcp_close_shutdown_fin+0xd0>)
 800eeb8:	f00a f9f6 	bl	80192a8 <iprintf>

  switch (pcb->state) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b07      	cmp	r3, #7
 800eec2:	d020      	beq.n	800ef06 <tcp_close_shutdown_fin+0x66>
 800eec4:	2b07      	cmp	r3, #7
 800eec6:	dc2b      	bgt.n	800ef20 <tcp_close_shutdown_fin+0x80>
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d002      	beq.n	800eed2 <tcp_close_shutdown_fin+0x32>
 800eecc:	2b04      	cmp	r3, #4
 800eece:	d00d      	beq.n	800eeec <tcp_close_shutdown_fin+0x4c>
 800eed0:	e026      	b.n	800ef20 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f003 fee2 	bl	8012c9c <tcp_send_fin>
 800eed8:	4603      	mov	r3, r0
 800eeda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d11f      	bne.n	800ef24 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2205      	movs	r2, #5
 800eee8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eeea:	e01b      	b.n	800ef24 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f003 fed5 	bl	8012c9c <tcp_send_fin>
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d114      	bne.n	800ef28 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2205      	movs	r2, #5
 800ef02:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef04:	e010      	b.n	800ef28 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f003 fec8 	bl	8012c9c <tcp_send_fin>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d109      	bne.n	800ef2c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2209      	movs	r2, #9
 800ef1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef1e:	e005      	b.n	800ef2c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e01c      	b.n	800ef5e <tcp_close_shutdown_fin+0xbe>
      break;
 800ef24:	bf00      	nop
 800ef26:	e002      	b.n	800ef2e <tcp_close_shutdown_fin+0x8e>
      break;
 800ef28:	bf00      	nop
 800ef2a:	e000      	b.n	800ef2e <tcp_close_shutdown_fin+0x8e>
      break;
 800ef2c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ef2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f003 ffee 	bl	8012f18 <tcp_output>
 800ef3c:	e00d      	b.n	800ef5a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ef3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef46:	d108      	bne.n	800ef5a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	8b5b      	ldrh	r3, [r3, #26]
 800ef4c:	f043 0308 	orr.w	r3, r3, #8
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ef56:	2300      	movs	r3, #0
 800ef58:	e001      	b.n	800ef5e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ef5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	0801b188 	.word	0x0801b188
 800ef6c:	0801b238 	.word	0x0801b238
 800ef70:	0801b1cc 	.word	0x0801b1cc

0800ef74 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b082      	sub	sp, #8
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d109      	bne.n	800ef96 <tcp_close+0x22>
 800ef82:	4b0f      	ldr	r3, [pc, #60]	; (800efc0 <tcp_close+0x4c>)
 800ef84:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ef88:	490e      	ldr	r1, [pc, #56]	; (800efc4 <tcp_close+0x50>)
 800ef8a:	480f      	ldr	r0, [pc, #60]	; (800efc8 <tcp_close+0x54>)
 800ef8c:	f00a f98c 	bl	80192a8 <iprintf>
 800ef90:	f06f 030f 	mvn.w	r3, #15
 800ef94:	e00f      	b.n	800efb6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7d1b      	ldrb	r3, [r3, #20]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d006      	beq.n	800efac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	8b5b      	ldrh	r3, [r3, #26]
 800efa2:	f043 0310 	orr.w	r3, r3, #16
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800efac:	2101      	movs	r1, #1
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff fe94 	bl	800ecdc <tcp_close_shutdown>
 800efb4:	4603      	mov	r3, r0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	0801b188 	.word	0x0801b188
 800efc4:	0801b298 	.word	0x0801b298
 800efc8:	0801b1cc 	.word	0x0801b1cc

0800efcc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b08e      	sub	sp, #56	; 0x38
 800efd0:	af04      	add	r7, sp, #16
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d107      	bne.n	800efec <tcp_abandon+0x20>
 800efdc:	4b52      	ldr	r3, [pc, #328]	; (800f128 <tcp_abandon+0x15c>)
 800efde:	f240 223d 	movw	r2, #573	; 0x23d
 800efe2:	4952      	ldr	r1, [pc, #328]	; (800f12c <tcp_abandon+0x160>)
 800efe4:	4852      	ldr	r0, [pc, #328]	; (800f130 <tcp_abandon+0x164>)
 800efe6:	f00a f95f 	bl	80192a8 <iprintf>
 800efea:	e099      	b.n	800f120 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d106      	bne.n	800f002 <tcp_abandon+0x36>
 800eff4:	4b4c      	ldr	r3, [pc, #304]	; (800f128 <tcp_abandon+0x15c>)
 800eff6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800effa:	494e      	ldr	r1, [pc, #312]	; (800f134 <tcp_abandon+0x168>)
 800effc:	484c      	ldr	r0, [pc, #304]	; (800f130 <tcp_abandon+0x164>)
 800effe:	f00a f953 	bl	80192a8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	7d1b      	ldrb	r3, [r3, #20]
 800f006:	2b0a      	cmp	r3, #10
 800f008:	d107      	bne.n	800f01a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f00a:	6879      	ldr	r1, [r7, #4]
 800f00c:	484a      	ldr	r0, [pc, #296]	; (800f138 <tcp_abandon+0x16c>)
 800f00e:	f000 ffc3 	bl	800ff98 <tcp_pcb_remove>
    tcp_free(pcb);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f7ff fdb0 	bl	800eb78 <tcp_free>
 800f018:	e082      	b.n	800f120 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f026:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f034:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	691b      	ldr	r3, [r3, #16]
 800f03a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d126      	bne.n	800f092 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	8adb      	ldrh	r3, [r3, #22]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d02e      	beq.n	800f0aa <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f04c:	4b3b      	ldr	r3, [pc, #236]	; (800f13c <tcp_abandon+0x170>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	429a      	cmp	r2, r3
 800f054:	d105      	bne.n	800f062 <tcp_abandon+0x96>
 800f056:	4b39      	ldr	r3, [pc, #228]	; (800f13c <tcp_abandon+0x170>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	4a37      	ldr	r2, [pc, #220]	; (800f13c <tcp_abandon+0x170>)
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	e013      	b.n	800f08a <tcp_abandon+0xbe>
 800f062:	4b36      	ldr	r3, [pc, #216]	; (800f13c <tcp_abandon+0x170>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	e00c      	b.n	800f084 <tcp_abandon+0xb8>
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	429a      	cmp	r2, r3
 800f072:	d104      	bne.n	800f07e <tcp_abandon+0xb2>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68da      	ldr	r2, [r3, #12]
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	60da      	str	r2, [r3, #12]
 800f07c:	e005      	b.n	800f08a <tcp_abandon+0xbe>
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	61fb      	str	r3, [r7, #28]
 800f084:	69fb      	ldr	r3, [r7, #28]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1ef      	bne.n	800f06a <tcp_abandon+0x9e>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	60da      	str	r2, [r3, #12]
 800f090:	e00b      	b.n	800f0aa <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	8adb      	ldrh	r3, [r3, #22]
 800f09a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	4828      	ldr	r0, [pc, #160]	; (800f140 <tcp_abandon+0x174>)
 800f0a0:	f000 ff7a 	bl	800ff98 <tcp_pcb_remove>
 800f0a4:	4b27      	ldr	r3, [pc, #156]	; (800f144 <tcp_abandon+0x178>)
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d004      	beq.n	800f0bc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 fd1c 	bl	800faf4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d004      	beq.n	800f0ce <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f000 fd13 	bl	800faf4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d004      	beq.n	800f0e0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 fd0a 	bl	800faf4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00e      	beq.n	800f104 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	8b12      	ldrh	r2, [r2, #24]
 800f0f0:	9202      	str	r2, [sp, #8]
 800f0f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f0f4:	9201      	str	r2, [sp, #4]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	697a      	ldr	r2, [r7, #20]
 800f0fc:	69b9      	ldr	r1, [r7, #24]
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f004 fcbe 	bl	8013a80 <tcp_rst>
    }
    last_state = pcb->state;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7d1b      	ldrb	r3, [r3, #20]
 800f108:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f7ff fd34 	bl	800eb78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <tcp_abandon+0x154>
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	f06f 010c 	mvn.w	r1, #12
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	4798      	blx	r3
  }
}
 800f120:	3728      	adds	r7, #40	; 0x28
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	0801b188 	.word	0x0801b188
 800f12c:	0801b2cc 	.word	0x0801b2cc
 800f130:	0801b1cc 	.word	0x0801b1cc
 800f134:	0801b2e8 	.word	0x0801b2e8
 800f138:	2000d08c 	.word	0x2000d08c
 800f13c:	2000d088 	.word	0x2000d088
 800f140:	2000d07c 	.word	0x2000d07c
 800f144:	2000d078 	.word	0x2000d078

0800f148 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f150:	2101      	movs	r1, #1
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7ff ff3a 	bl	800efcc <tcp_abandon>
}
 800f158:	bf00      	nop
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}

0800f160 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <tcp_update_rcv_ann_wnd+0x1c>
 800f16e:	4b25      	ldr	r3, [pc, #148]	; (800f204 <tcp_update_rcv_ann_wnd+0xa4>)
 800f170:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f174:	4924      	ldr	r1, [pc, #144]	; (800f208 <tcp_update_rcv_ann_wnd+0xa8>)
 800f176:	4825      	ldr	r0, [pc, #148]	; (800f20c <tcp_update_rcv_ann_wnd+0xac>)
 800f178:	f00a f896 	bl	80192a8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f184:	4413      	add	r3, r2
 800f186:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f190:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f194:	bf28      	it	cs
 800f196:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f19a:	b292      	uxth	r2, r2
 800f19c:	4413      	add	r3, r2
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	db08      	blt.n	800f1b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	e020      	b.n	800f1fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1c0:	1ad3      	subs	r3, r2, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dd03      	ble.n	800f1ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f1cc:	e014      	b.n	800f1f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1e0:	d306      	bcc.n	800f1f0 <tcp_update_rcv_ann_wnd+0x90>
 800f1e2:	4b08      	ldr	r3, [pc, #32]	; (800f204 <tcp_update_rcv_ann_wnd+0xa4>)
 800f1e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f1e8:	4909      	ldr	r1, [pc, #36]	; (800f210 <tcp_update_rcv_ann_wnd+0xb0>)
 800f1ea:	4808      	ldr	r0, [pc, #32]	; (800f20c <tcp_update_rcv_ann_wnd+0xac>)
 800f1ec:	f00a f85c 	bl	80192a8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f1f8:	2300      	movs	r3, #0
  }
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	0801b188 	.word	0x0801b188
 800f208:	0801b3e4 	.word	0x0801b3e4
 800f20c:	0801b1cc 	.word	0x0801b1cc
 800f210:	0801b408 	.word	0x0801b408

0800f214 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	460b      	mov	r3, r1
 800f21e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d107      	bne.n	800f236 <tcp_recved+0x22>
 800f226:	4b1f      	ldr	r3, [pc, #124]	; (800f2a4 <tcp_recved+0x90>)
 800f228:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f22c:	491e      	ldr	r1, [pc, #120]	; (800f2a8 <tcp_recved+0x94>)
 800f22e:	481f      	ldr	r0, [pc, #124]	; (800f2ac <tcp_recved+0x98>)
 800f230:	f00a f83a 	bl	80192a8 <iprintf>
 800f234:	e032      	b.n	800f29c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7d1b      	ldrb	r3, [r3, #20]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d106      	bne.n	800f24c <tcp_recved+0x38>
 800f23e:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <tcp_recved+0x90>)
 800f240:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f244:	491a      	ldr	r1, [pc, #104]	; (800f2b0 <tcp_recved+0x9c>)
 800f246:	4819      	ldr	r0, [pc, #100]	; (800f2ac <tcp_recved+0x98>)
 800f248:	f00a f82e 	bl	80192a8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f250:	887b      	ldrh	r3, [r7, #2]
 800f252:	4413      	add	r3, r2
 800f254:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f256:	89fb      	ldrh	r3, [r7, #14]
 800f258:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f25c:	d804      	bhi.n	800f268 <tcp_recved+0x54>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f262:	89fa      	ldrh	r2, [r7, #14]
 800f264:	429a      	cmp	r2, r3
 800f266:	d204      	bcs.n	800f272 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f26e:	851a      	strh	r2, [r3, #40]	; 0x28
 800f270:	e002      	b.n	800f278 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	89fa      	ldrh	r2, [r7, #14]
 800f276:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7ff ff71 	bl	800f160 <tcp_update_rcv_ann_wnd>
 800f27e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f286:	d309      	bcc.n	800f29c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	8b5b      	ldrh	r3, [r3, #26]
 800f28c:	f043 0302 	orr.w	r3, r3, #2
 800f290:	b29a      	uxth	r2, r3
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f003 fe3e 	bl	8012f18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f29c:	3710      	adds	r7, #16
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	0801b188 	.word	0x0801b188
 800f2a8:	0801b424 	.word	0x0801b424
 800f2ac:	0801b1cc 	.word	0x0801b1cc
 800f2b0:	0801b43c 	.word	0x0801b43c

0800f2b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b090      	sub	sp, #64	; 0x40
 800f2b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f2c0:	4b94      	ldr	r3, [pc, #592]	; (800f514 <tcp_slowtmr+0x260>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4a93      	ldr	r2, [pc, #588]	; (800f514 <tcp_slowtmr+0x260>)
 800f2c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f2ca:	4b93      	ldr	r3, [pc, #588]	; (800f518 <tcp_slowtmr+0x264>)
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	4b91      	ldr	r3, [pc, #580]	; (800f518 <tcp_slowtmr+0x264>)
 800f2d4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f2da:	4b90      	ldr	r3, [pc, #576]	; (800f51c <tcp_slowtmr+0x268>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f2e0:	e29f      	b.n	800f822 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e4:	7d1b      	ldrb	r3, [r3, #20]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d106      	bne.n	800f2f8 <tcp_slowtmr+0x44>
 800f2ea:	4b8d      	ldr	r3, [pc, #564]	; (800f520 <tcp_slowtmr+0x26c>)
 800f2ec:	f240 42be 	movw	r2, #1214	; 0x4be
 800f2f0:	498c      	ldr	r1, [pc, #560]	; (800f524 <tcp_slowtmr+0x270>)
 800f2f2:	488d      	ldr	r0, [pc, #564]	; (800f528 <tcp_slowtmr+0x274>)
 800f2f4:	f009 ffd8 	bl	80192a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2fa:	7d1b      	ldrb	r3, [r3, #20]
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d106      	bne.n	800f30e <tcp_slowtmr+0x5a>
 800f300:	4b87      	ldr	r3, [pc, #540]	; (800f520 <tcp_slowtmr+0x26c>)
 800f302:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f306:	4989      	ldr	r1, [pc, #548]	; (800f52c <tcp_slowtmr+0x278>)
 800f308:	4887      	ldr	r0, [pc, #540]	; (800f528 <tcp_slowtmr+0x274>)
 800f30a:	f009 ffcd 	bl	80192a8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	7d1b      	ldrb	r3, [r3, #20]
 800f312:	2b0a      	cmp	r3, #10
 800f314:	d106      	bne.n	800f324 <tcp_slowtmr+0x70>
 800f316:	4b82      	ldr	r3, [pc, #520]	; (800f520 <tcp_slowtmr+0x26c>)
 800f318:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f31c:	4984      	ldr	r1, [pc, #528]	; (800f530 <tcp_slowtmr+0x27c>)
 800f31e:	4882      	ldr	r0, [pc, #520]	; (800f528 <tcp_slowtmr+0x274>)
 800f320:	f009 ffc2 	bl	80192a8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	7f9a      	ldrb	r2, [r3, #30]
 800f328:	4b7b      	ldr	r3, [pc, #492]	; (800f518 <tcp_slowtmr+0x264>)
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d105      	bne.n	800f33c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f33a:	e272      	b.n	800f822 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f33c:	4b76      	ldr	r3, [pc, #472]	; (800f518 <tcp_slowtmr+0x264>)
 800f33e:	781a      	ldrb	r2, [r3, #0]
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f342:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f344:	2300      	movs	r3, #0
 800f346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f34a:	2300      	movs	r3, #0
 800f34c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	7d1b      	ldrb	r3, [r3, #20]
 800f354:	2b02      	cmp	r3, #2
 800f356:	d10a      	bne.n	800f36e <tcp_slowtmr+0xba>
 800f358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f35e:	2b05      	cmp	r3, #5
 800f360:	d905      	bls.n	800f36e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f366:	3301      	adds	r3, #1
 800f368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f36c:	e11e      	b.n	800f5ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f374:	2b0b      	cmp	r3, #11
 800f376:	d905      	bls.n	800f384 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f37c:	3301      	adds	r3, #1
 800f37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f382:	e113      	b.n	800f5ac <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d075      	beq.n	800f47a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f392:	2b00      	cmp	r3, #0
 800f394:	d006      	beq.n	800f3a4 <tcp_slowtmr+0xf0>
 800f396:	4b62      	ldr	r3, [pc, #392]	; (800f520 <tcp_slowtmr+0x26c>)
 800f398:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f39c:	4965      	ldr	r1, [pc, #404]	; (800f534 <tcp_slowtmr+0x280>)
 800f39e:	4862      	ldr	r0, [pc, #392]	; (800f528 <tcp_slowtmr+0x274>)
 800f3a0:	f009 ff82 	bl	80192a8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d106      	bne.n	800f3ba <tcp_slowtmr+0x106>
 800f3ac:	4b5c      	ldr	r3, [pc, #368]	; (800f520 <tcp_slowtmr+0x26c>)
 800f3ae:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f3b2:	4961      	ldr	r1, [pc, #388]	; (800f538 <tcp_slowtmr+0x284>)
 800f3b4:	485c      	ldr	r0, [pc, #368]	; (800f528 <tcp_slowtmr+0x274>)
 800f3b6:	f009 ff77 	bl	80192a8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f3c0:	2b0b      	cmp	r3, #11
 800f3c2:	d905      	bls.n	800f3d0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3ce:	e0ed      	b.n	800f5ac <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	4a58      	ldr	r2, [pc, #352]	; (800f53c <tcp_slowtmr+0x288>)
 800f3da:	5cd3      	ldrb	r3, [r2, r3]
 800f3dc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f3e4:	7c7a      	ldrb	r2, [r7, #17]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d907      	bls.n	800f3fa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f400:	7c7a      	ldrb	r2, [r7, #17]
 800f402:	429a      	cmp	r2, r3
 800f404:	f200 80d2 	bhi.w	800f5ac <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f408:	2301      	movs	r3, #1
 800f40a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f412:	2b00      	cmp	r3, #0
 800f414:	d108      	bne.n	800f428 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f418:	f004 fc26 	bl	8013c68 <tcp_zero_window_probe>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d014      	beq.n	800f44c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f422:	2300      	movs	r3, #0
 800f424:	623b      	str	r3, [r7, #32]
 800f426:	e011      	b.n	800f44c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f42e:	4619      	mov	r1, r3
 800f430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f432:	f003 faeb 	bl	8012a0c <tcp_split_unsent_seg>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d107      	bne.n	800f44c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f43c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f43e:	f003 fd6b 	bl	8012f18 <tcp_output>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d101      	bne.n	800f44c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f44c:	6a3b      	ldr	r3, [r7, #32]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 80ac 	beq.w	800f5ac <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f456:	2200      	movs	r2, #0
 800f458:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f462:	2b06      	cmp	r3, #6
 800f464:	f200 80a2 	bhi.w	800f5ac <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f46e:	3301      	adds	r3, #1
 800f470:	b2da      	uxtb	r2, r3
 800f472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f474:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f478:	e098      	b.n	800f5ac <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f480:	2b00      	cmp	r3, #0
 800f482:	db0f      	blt.n	800f4a4 <tcp_slowtmr+0x1f0>
 800f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f486:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f48a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f48e:	4293      	cmp	r3, r2
 800f490:	d008      	beq.n	800f4a4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f494:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f498:	b29b      	uxth	r3, r3
 800f49a:	3301      	adds	r3, #1
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	b21a      	sxth	r2, r3
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	db7b      	blt.n	800f5ac <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f4b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4b6:	f004 f821 	bl	80134fc <tcp_rexmit_rto_prepare>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d007      	beq.n	800f4d0 <tcp_slowtmr+0x21c>
 800f4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d171      	bne.n	800f5ac <tcp_slowtmr+0x2f8>
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d06d      	beq.n	800f5ac <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d2:	7d1b      	ldrb	r3, [r3, #20]
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d03a      	beq.n	800f54e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4de:	2b0c      	cmp	r3, #12
 800f4e0:	bf28      	it	cs
 800f4e2:	230c      	movcs	r3, #12
 800f4e4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4ec:	10db      	asrs	r3, r3, #3
 800f4ee:	b21b      	sxth	r3, r3
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4f8:	4413      	add	r3, r2
 800f4fa:	7efa      	ldrb	r2, [r7, #27]
 800f4fc:	4910      	ldr	r1, [pc, #64]	; (800f540 <tcp_slowtmr+0x28c>)
 800f4fe:	5c8a      	ldrb	r2, [r1, r2]
 800f500:	4093      	lsls	r3, r2
 800f502:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f50a:	4293      	cmp	r3, r2
 800f50c:	dc1a      	bgt.n	800f544 <tcp_slowtmr+0x290>
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	b21a      	sxth	r2, r3
 800f512:	e019      	b.n	800f548 <tcp_slowtmr+0x294>
 800f514:	2000d080 	.word	0x2000d080
 800f518:	20004b1a 	.word	0x20004b1a
 800f51c:	2000d07c 	.word	0x2000d07c
 800f520:	0801b188 	.word	0x0801b188
 800f524:	0801b4cc 	.word	0x0801b4cc
 800f528:	0801b1cc 	.word	0x0801b1cc
 800f52c:	0801b4f8 	.word	0x0801b4f8
 800f530:	0801b524 	.word	0x0801b524
 800f534:	0801b554 	.word	0x0801b554
 800f538:	0801b588 	.word	0x0801b588
 800f53c:	0801d68c 	.word	0x0801d68c
 800f540:	0801d67c 	.word	0x0801d67c
 800f544:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	2200      	movs	r2, #0
 800f552:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f556:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f560:	4293      	cmp	r3, r2
 800f562:	bf28      	it	cs
 800f564:	4613      	movcs	r3, r2
 800f566:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f568:	8a7b      	ldrh	r3, [r7, #18]
 800f56a:	085b      	lsrs	r3, r3, #1
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f570:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f576:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f57c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f57e:	005b      	lsls	r3, r3, #1
 800f580:	b29b      	uxth	r3, r3
 800f582:	429a      	cmp	r2, r3
 800f584:	d206      	bcs.n	800f594 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f58a:	005b      	lsls	r3, r3, #1
 800f58c:	b29a      	uxth	r2, r3
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f596:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f5a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5a8:	f004 f818 	bl	80135dc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ae:	7d1b      	ldrb	r3, [r3, #20]
 800f5b0:	2b06      	cmp	r3, #6
 800f5b2:	d111      	bne.n	800f5d8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	8b5b      	ldrh	r3, [r3, #26]
 800f5b8:	f003 0310 	and.w	r3, r3, #16
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5c0:	4b9d      	ldr	r3, [pc, #628]	; (800f838 <tcp_slowtmr+0x584>)
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	6a1b      	ldr	r3, [r3, #32]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	2b28      	cmp	r3, #40	; 0x28
 800f5cc:	d904      	bls.n	800f5d8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f5ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5da:	7a5b      	ldrb	r3, [r3, #9]
 800f5dc:	f003 0308 	and.w	r3, r3, #8
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d04c      	beq.n	800f67e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f5e8:	2b04      	cmp	r3, #4
 800f5ea:	d003      	beq.n	800f5f4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ee:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f5f0:	2b07      	cmp	r3, #7
 800f5f2:	d144      	bne.n	800f67e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f5f4:	4b90      	ldr	r3, [pc, #576]	; (800f838 <tcp_slowtmr+0x584>)
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	6a1b      	ldr	r3, [r3, #32]
 800f5fc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f604:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f608:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f60c:	498b      	ldr	r1, [pc, #556]	; (800f83c <tcp_slowtmr+0x588>)
 800f60e:	fba1 1303 	umull	r1, r3, r1, r3
 800f612:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f614:	429a      	cmp	r2, r3
 800f616:	d90a      	bls.n	800f62e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f61c:	3301      	adds	r3, #1
 800f61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f626:	3301      	adds	r3, #1
 800f628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f62c:	e027      	b.n	800f67e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f62e:	4b82      	ldr	r3, [pc, #520]	; (800f838 <tcp_slowtmr+0x584>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f640:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f644:	4618      	mov	r0, r3
 800f646:	4b7e      	ldr	r3, [pc, #504]	; (800f840 <tcp_slowtmr+0x58c>)
 800f648:	fb03 f300 	mul.w	r3, r3, r0
 800f64c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f64e:	497b      	ldr	r1, [pc, #492]	; (800f83c <tcp_slowtmr+0x588>)
 800f650:	fba1 1303 	umull	r1, r3, r1, r3
 800f654:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f656:	429a      	cmp	r2, r3
 800f658:	d911      	bls.n	800f67e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f65c:	f004 fac4 	bl	8013be8 <tcp_keepalive>
 800f660:	4603      	mov	r3, r0
 800f662:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f666:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d107      	bne.n	800f67e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f670:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f674:	3301      	adds	r3, #1
 800f676:	b2da      	uxtb	r2, r3
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f682:	2b00      	cmp	r3, #0
 800f684:	d011      	beq.n	800f6aa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f686:	4b6c      	ldr	r3, [pc, #432]	; (800f838 <tcp_slowtmr+0x584>)
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68c:	6a1b      	ldr	r3, [r3, #32]
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f692:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f696:	4619      	mov	r1, r3
 800f698:	460b      	mov	r3, r1
 800f69a:	005b      	lsls	r3, r3, #1
 800f69c:	440b      	add	r3, r1
 800f69e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d302      	bcc.n	800f6aa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f6a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6a6:	f000 fddb 	bl	8010260 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ac:	7d1b      	ldrb	r3, [r3, #20]
 800f6ae:	2b03      	cmp	r3, #3
 800f6b0:	d10b      	bne.n	800f6ca <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f6b2:	4b61      	ldr	r3, [pc, #388]	; (800f838 <tcp_slowtmr+0x584>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	1ad3      	subs	r3, r2, r3
 800f6bc:	2b28      	cmp	r3, #40	; 0x28
 800f6be:	d904      	bls.n	800f6ca <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6cc:	7d1b      	ldrb	r3, [r3, #20]
 800f6ce:	2b09      	cmp	r3, #9
 800f6d0:	d10b      	bne.n	800f6ea <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f6d2:	4b59      	ldr	r3, [pc, #356]	; (800f838 <tcp_slowtmr+0x584>)
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	2bf0      	cmp	r3, #240	; 0xf0
 800f6de:	d904      	bls.n	800f6ea <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f6ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d060      	beq.n	800f7b4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6f8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f6fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6fc:	f000 fbfc 	bl	800fef8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f702:	2b00      	cmp	r3, #0
 800f704:	d010      	beq.n	800f728 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f706:	4b4f      	ldr	r3, [pc, #316]	; (800f844 <tcp_slowtmr+0x590>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d106      	bne.n	800f71e <tcp_slowtmr+0x46a>
 800f710:	4b4d      	ldr	r3, [pc, #308]	; (800f848 <tcp_slowtmr+0x594>)
 800f712:	f240 526d 	movw	r2, #1389	; 0x56d
 800f716:	494d      	ldr	r1, [pc, #308]	; (800f84c <tcp_slowtmr+0x598>)
 800f718:	484d      	ldr	r0, [pc, #308]	; (800f850 <tcp_slowtmr+0x59c>)
 800f71a:	f009 fdc5 	bl	80192a8 <iprintf>
        prev->next = pcb->next;
 800f71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f720:	68da      	ldr	r2, [r3, #12]
 800f722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f724:	60da      	str	r2, [r3, #12]
 800f726:	e00f      	b.n	800f748 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f728:	4b46      	ldr	r3, [pc, #280]	; (800f844 <tcp_slowtmr+0x590>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f72e:	429a      	cmp	r2, r3
 800f730:	d006      	beq.n	800f740 <tcp_slowtmr+0x48c>
 800f732:	4b45      	ldr	r3, [pc, #276]	; (800f848 <tcp_slowtmr+0x594>)
 800f734:	f240 5271 	movw	r2, #1393	; 0x571
 800f738:	4946      	ldr	r1, [pc, #280]	; (800f854 <tcp_slowtmr+0x5a0>)
 800f73a:	4845      	ldr	r0, [pc, #276]	; (800f850 <tcp_slowtmr+0x59c>)
 800f73c:	f009 fdb4 	bl	80192a8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	4a3f      	ldr	r2, [pc, #252]	; (800f844 <tcp_slowtmr+0x590>)
 800f746:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f748:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d013      	beq.n	800f778 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f752:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f756:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f758:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75c:	3304      	adds	r3, #4
 800f75e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f760:	8ad2      	ldrh	r2, [r2, #22]
 800f762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f764:	8b09      	ldrh	r1, [r1, #24]
 800f766:	9102      	str	r1, [sp, #8]
 800f768:	9201      	str	r2, [sp, #4]
 800f76a:	9300      	str	r3, [sp, #0]
 800f76c:	462b      	mov	r3, r5
 800f76e:	4622      	mov	r2, r4
 800f770:	4601      	mov	r1, r0
 800f772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f774:	f004 f984 	bl	8013a80 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f786:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f78e:	6838      	ldr	r0, [r7, #0]
 800f790:	f7ff f9f2 	bl	800eb78 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f794:	4b30      	ldr	r3, [pc, #192]	; (800f858 <tcp_slowtmr+0x5a4>)
 800f796:	2200      	movs	r2, #0
 800f798:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d004      	beq.n	800f7aa <tcp_slowtmr+0x4f6>
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f06f 010c 	mvn.w	r1, #12
 800f7a6:	68b8      	ldr	r0, [r7, #8]
 800f7a8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f7aa:	4b2b      	ldr	r3, [pc, #172]	; (800f858 <tcp_slowtmr+0x5a4>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d037      	beq.n	800f822 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f7b2:	e590      	b.n	800f2d6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c0:	7f1b      	ldrb	r3, [r3, #28]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7cc:	7f1a      	ldrb	r2, [r3, #28]
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	7f5b      	ldrb	r3, [r3, #29]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d325      	bcc.n	800f822 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d8:	2200      	movs	r2, #0
 800f7da:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f7dc:	4b1e      	ldr	r3, [pc, #120]	; (800f858 <tcp_slowtmr+0x5a4>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00b      	beq.n	800f804 <tcp_slowtmr+0x550>
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7f4:	6912      	ldr	r2, [r2, #16]
 800f7f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f7f8:	4610      	mov	r0, r2
 800f7fa:	4798      	blx	r3
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f802:	e002      	b.n	800f80a <tcp_slowtmr+0x556>
 800f804:	2300      	movs	r3, #0
 800f806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f80a:	4b13      	ldr	r3, [pc, #76]	; (800f858 <tcp_slowtmr+0x5a4>)
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d000      	beq.n	800f814 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f812:	e560      	b.n	800f2d6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f814:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f81c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f81e:	f003 fb7b 	bl	8012f18 <tcp_output>
  while (pcb != NULL) {
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	2b00      	cmp	r3, #0
 800f826:	f47f ad5c 	bne.w	800f2e2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f82a:	2300      	movs	r3, #0
 800f82c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f82e:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <tcp_slowtmr+0x5a8>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f834:	e067      	b.n	800f906 <tcp_slowtmr+0x652>
 800f836:	bf00      	nop
 800f838:	2000d080 	.word	0x2000d080
 800f83c:	10624dd3 	.word	0x10624dd3
 800f840:	000124f8 	.word	0x000124f8
 800f844:	2000d07c 	.word	0x2000d07c
 800f848:	0801b188 	.word	0x0801b188
 800f84c:	0801b5c0 	.word	0x0801b5c0
 800f850:	0801b1cc 	.word	0x0801b1cc
 800f854:	0801b5ec 	.word	0x0801b5ec
 800f858:	2000d078 	.word	0x2000d078
 800f85c:	2000d08c 	.word	0x2000d08c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f862:	7d1b      	ldrb	r3, [r3, #20]
 800f864:	2b0a      	cmp	r3, #10
 800f866:	d006      	beq.n	800f876 <tcp_slowtmr+0x5c2>
 800f868:	4b2b      	ldr	r3, [pc, #172]	; (800f918 <tcp_slowtmr+0x664>)
 800f86a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f86e:	492b      	ldr	r1, [pc, #172]	; (800f91c <tcp_slowtmr+0x668>)
 800f870:	482b      	ldr	r0, [pc, #172]	; (800f920 <tcp_slowtmr+0x66c>)
 800f872:	f009 fd19 	bl	80192a8 <iprintf>
    pcb_remove = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f87c:	4b29      	ldr	r3, [pc, #164]	; (800f924 <tcp_slowtmr+0x670>)
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	2bf0      	cmp	r3, #240	; 0xf0
 800f888:	d904      	bls.n	800f894 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f88a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f88e:	3301      	adds	r3, #1
 800f890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d02f      	beq.n	800f8fc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f89e:	f000 fb2b 	bl	800fef8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d010      	beq.n	800f8ca <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f8a8:	4b1f      	ldr	r3, [pc, #124]	; (800f928 <tcp_slowtmr+0x674>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d106      	bne.n	800f8c0 <tcp_slowtmr+0x60c>
 800f8b2:	4b19      	ldr	r3, [pc, #100]	; (800f918 <tcp_slowtmr+0x664>)
 800f8b4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f8b8:	491c      	ldr	r1, [pc, #112]	; (800f92c <tcp_slowtmr+0x678>)
 800f8ba:	4819      	ldr	r0, [pc, #100]	; (800f920 <tcp_slowtmr+0x66c>)
 800f8bc:	f009 fcf4 	bl	80192a8 <iprintf>
        prev->next = pcb->next;
 800f8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c2:	68da      	ldr	r2, [r3, #12]
 800f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c6:	60da      	str	r2, [r3, #12]
 800f8c8:	e00f      	b.n	800f8ea <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f8ca:	4b17      	ldr	r3, [pc, #92]	; (800f928 <tcp_slowtmr+0x674>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d006      	beq.n	800f8e2 <tcp_slowtmr+0x62e>
 800f8d4:	4b10      	ldr	r3, [pc, #64]	; (800f918 <tcp_slowtmr+0x664>)
 800f8d6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f8da:	4915      	ldr	r1, [pc, #84]	; (800f930 <tcp_slowtmr+0x67c>)
 800f8dc:	4810      	ldr	r0, [pc, #64]	; (800f920 <tcp_slowtmr+0x66c>)
 800f8de:	f009 fce3 	bl	80192a8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	4a10      	ldr	r2, [pc, #64]	; (800f928 <tcp_slowtmr+0x674>)
 800f8e8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ec:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f8f4:	69f8      	ldr	r0, [r7, #28]
 800f8f6:	f7ff f93f 	bl	800eb78 <tcp_free>
 800f8fa:	e004      	b.n	800f906 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1a9      	bne.n	800f860 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f90c:	bf00      	nop
 800f90e:	bf00      	nop
 800f910:	3730      	adds	r7, #48	; 0x30
 800f912:	46bd      	mov	sp, r7
 800f914:	bdb0      	pop	{r4, r5, r7, pc}
 800f916:	bf00      	nop
 800f918:	0801b188 	.word	0x0801b188
 800f91c:	0801b618 	.word	0x0801b618
 800f920:	0801b1cc 	.word	0x0801b1cc
 800f924:	2000d080 	.word	0x2000d080
 800f928:	2000d08c 	.word	0x2000d08c
 800f92c:	0801b648 	.word	0x0801b648
 800f930:	0801b670 	.word	0x0801b670

0800f934 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f93a:	4b2d      	ldr	r3, [pc, #180]	; (800f9f0 <tcp_fasttmr+0xbc>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	3301      	adds	r3, #1
 800f940:	b2da      	uxtb	r2, r3
 800f942:	4b2b      	ldr	r3, [pc, #172]	; (800f9f0 <tcp_fasttmr+0xbc>)
 800f944:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f946:	4b2b      	ldr	r3, [pc, #172]	; (800f9f4 <tcp_fasttmr+0xc0>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f94c:	e048      	b.n	800f9e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	7f9a      	ldrb	r2, [r3, #30]
 800f952:	4b27      	ldr	r3, [pc, #156]	; (800f9f0 <tcp_fasttmr+0xbc>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	d03f      	beq.n	800f9da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f95a:	4b25      	ldr	r3, [pc, #148]	; (800f9f0 <tcp_fasttmr+0xbc>)
 800f95c:	781a      	ldrb	r2, [r3, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8b5b      	ldrh	r3, [r3, #26]
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d010      	beq.n	800f990 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	8b5b      	ldrh	r3, [r3, #26]
 800f972:	f043 0302 	orr.w	r3, r3, #2
 800f976:	b29a      	uxth	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f003 facb 	bl	8012f18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	8b5b      	ldrh	r3, [r3, #26]
 800f986:	f023 0303 	bic.w	r3, r3, #3
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8b5b      	ldrh	r3, [r3, #26]
 800f994:	f003 0308 	and.w	r3, r3, #8
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	8b5b      	ldrh	r3, [r3, #26]
 800f9a0:	f023 0308 	bic.w	r3, r3, #8
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff fa78 	bl	800eea0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00a      	beq.n	800f9d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f9be:	4b0e      	ldr	r3, [pc, #56]	; (800f9f8 <tcp_fasttmr+0xc4>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f819 	bl	800f9fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f9ca:	4b0b      	ldr	r3, [pc, #44]	; (800f9f8 <tcp_fasttmr+0xc4>)
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d000      	beq.n	800f9d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f9d2:	e7b8      	b.n	800f946 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	607b      	str	r3, [r7, #4]
 800f9d8:	e002      	b.n	800f9e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68db      	ldr	r3, [r3, #12]
 800f9de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1b3      	bne.n	800f94e <tcp_fasttmr+0x1a>
    }
  }
}
 800f9e6:	bf00      	nop
 800f9e8:	bf00      	nop
 800f9ea:	3708      	adds	r7, #8
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	20004b1a 	.word	0x20004b1a
 800f9f4:	2000d07c 	.word	0x2000d07c
 800f9f8:	2000d078 	.word	0x2000d078

0800f9fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f9fc:	b590      	push	{r4, r7, lr}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d109      	bne.n	800fa1e <tcp_process_refused_data+0x22>
 800fa0a:	4b37      	ldr	r3, [pc, #220]	; (800fae8 <tcp_process_refused_data+0xec>)
 800fa0c:	f240 6209 	movw	r2, #1545	; 0x609
 800fa10:	4936      	ldr	r1, [pc, #216]	; (800faec <tcp_process_refused_data+0xf0>)
 800fa12:	4837      	ldr	r0, [pc, #220]	; (800faf0 <tcp_process_refused_data+0xf4>)
 800fa14:	f009 fc48 	bl	80192a8 <iprintf>
 800fa18:	f06f 030f 	mvn.w	r3, #15
 800fa1c:	e060      	b.n	800fae0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa22:	7b5b      	ldrb	r3, [r3, #13]
 800fa24:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa2a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d00b      	beq.n	800fa54 <tcp_process_refused_data+0x58>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6918      	ldr	r0, [r3, #16]
 800fa46:	2300      	movs	r3, #0
 800fa48:	68ba      	ldr	r2, [r7, #8]
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	47a0      	blx	r4
 800fa4e:	4603      	mov	r3, r0
 800fa50:	73fb      	strb	r3, [r7, #15]
 800fa52:	e007      	b.n	800fa64 <tcp_process_refused_data+0x68>
 800fa54:	2300      	movs	r3, #0
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	6879      	ldr	r1, [r7, #4]
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f000 f8a4 	bl	800fba8 <tcp_recv_null>
 800fa60:	4603      	mov	r3, r0
 800fa62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fa64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d12a      	bne.n	800fac2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fa6c:	7bbb      	ldrb	r3, [r7, #14]
 800fa6e:	f003 0320 	and.w	r3, r3, #32
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d033      	beq.n	800fade <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa7e:	d005      	beq.n	800fa8c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa84:	3301      	adds	r3, #1
 800fa86:	b29a      	uxth	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00b      	beq.n	800faae <tcp_process_refused_data+0xb2>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6918      	ldr	r0, [r3, #16]
 800faa0:	2300      	movs	r3, #0
 800faa2:	2200      	movs	r2, #0
 800faa4:	6879      	ldr	r1, [r7, #4]
 800faa6:	47a0      	blx	r4
 800faa8:	4603      	mov	r3, r0
 800faaa:	73fb      	strb	r3, [r7, #15]
 800faac:	e001      	b.n	800fab2 <tcp_process_refused_data+0xb6>
 800faae:	2300      	movs	r3, #0
 800fab0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fab6:	f113 0f0d 	cmn.w	r3, #13
 800faba:	d110      	bne.n	800fade <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fabc:	f06f 030c 	mvn.w	r3, #12
 800fac0:	e00e      	b.n	800fae0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fac6:	f113 0f0d 	cmn.w	r3, #13
 800faca:	d102      	bne.n	800fad2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800facc:	f06f 030c 	mvn.w	r3, #12
 800fad0:	e006      	b.n	800fae0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fad8:	f06f 0304 	mvn.w	r3, #4
 800fadc:	e000      	b.n	800fae0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd90      	pop	{r4, r7, pc}
 800fae8:	0801b188 	.word	0x0801b188
 800faec:	0801b698 	.word	0x0801b698
 800faf0:	0801b1cc 	.word	0x0801b1cc

0800faf4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fafc:	e007      	b.n	800fb0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f80a 	bl	800fb1e <tcp_seg_free>
    seg = next;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1f4      	bne.n	800fafe <tcp_segs_free+0xa>
  }
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop
 800fb18:	3710      	adds	r7, #16
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b082      	sub	sp, #8
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00c      	beq.n	800fb46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d004      	beq.n	800fb3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fe fd61 	bl	800e600 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	2003      	movs	r0, #3
 800fb42:	f7fd fead 	bl	800d8a0 <memp_free>
  }
}
 800fb46:	bf00      	nop
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
	...

0800fb50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d106      	bne.n	800fb6c <tcp_seg_copy+0x1c>
 800fb5e:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <tcp_seg_copy+0x4c>)
 800fb60:	f240 6282 	movw	r2, #1666	; 0x682
 800fb64:	490e      	ldr	r1, [pc, #56]	; (800fba0 <tcp_seg_copy+0x50>)
 800fb66:	480f      	ldr	r0, [pc, #60]	; (800fba4 <tcp_seg_copy+0x54>)
 800fb68:	f009 fb9e 	bl	80192a8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fb6c:	2003      	movs	r0, #3
 800fb6e:	f7fd fe45 	bl	800d7fc <memp_malloc>
 800fb72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <tcp_seg_copy+0x2e>
    return NULL;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e00a      	b.n	800fb94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fb7e:	2210      	movs	r2, #16
 800fb80:	6879      	ldr	r1, [r7, #4]
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f009 fb1f 	bl	80191c6 <memcpy>
  pbuf_ref(cseg->p);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fe fddd 	bl	800e74c <pbuf_ref>
  return cseg;
 800fb92:	68fb      	ldr	r3, [r7, #12]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3710      	adds	r7, #16
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}
 800fb9c:	0801b188 	.word	0x0801b188
 800fba0:	0801b6dc 	.word	0x0801b6dc
 800fba4:	0801b1cc 	.word	0x0801b1cc

0800fba8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	60f8      	str	r0, [r7, #12]
 800fbb0:	60b9      	str	r1, [r7, #8]
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d109      	bne.n	800fbd0 <tcp_recv_null+0x28>
 800fbbc:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <tcp_recv_null+0x60>)
 800fbbe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fbc2:	4912      	ldr	r1, [pc, #72]	; (800fc0c <tcp_recv_null+0x64>)
 800fbc4:	4812      	ldr	r0, [pc, #72]	; (800fc10 <tcp_recv_null+0x68>)
 800fbc6:	f009 fb6f 	bl	80192a8 <iprintf>
 800fbca:	f06f 030f 	mvn.w	r3, #15
 800fbce:	e016      	b.n	800fbfe <tcp_recv_null+0x56>

  if (p != NULL) {
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d009      	beq.n	800fbea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	891b      	ldrh	r3, [r3, #8]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	68b8      	ldr	r0, [r7, #8]
 800fbde:	f7ff fb19 	bl	800f214 <tcp_recved>
    pbuf_free(p);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7fe fd0c 	bl	800e600 <pbuf_free>
 800fbe8:	e008      	b.n	800fbfc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fbea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d104      	bne.n	800fbfc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fbf2:	68b8      	ldr	r0, [r7, #8]
 800fbf4:	f7ff f9be 	bl	800ef74 <tcp_close>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	e000      	b.n	800fbfe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	0801b188 	.word	0x0801b188
 800fc0c:	0801b6f8 	.word	0x0801b6f8
 800fc10:	0801b1cc 	.word	0x0801b1cc

0800fc14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	db01      	blt.n	800fc2a <tcp_kill_prio+0x16>
 800fc26:	79fb      	ldrb	r3, [r7, #7]
 800fc28:	e000      	b.n	800fc2c <tcp_kill_prio+0x18>
 800fc2a:	237f      	movs	r3, #127	; 0x7f
 800fc2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800fc2e:	7afb      	ldrb	r3, [r7, #11]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d034      	beq.n	800fc9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800fc34:	7afb      	ldrb	r3, [r7, #11]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc42:	4b19      	ldr	r3, [pc, #100]	; (800fca8 <tcp_kill_prio+0x94>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	617b      	str	r3, [r7, #20]
 800fc48:	e01f      	b.n	800fc8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	7d5b      	ldrb	r3, [r3, #21]
 800fc4e:	7afa      	ldrb	r2, [r7, #11]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d80c      	bhi.n	800fc6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800fc58:	7afa      	ldrb	r2, [r7, #11]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d112      	bne.n	800fc84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fc5e:	4b13      	ldr	r3, [pc, #76]	; (800fcac <tcp_kill_prio+0x98>)
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	6a1b      	ldr	r3, [r3, #32]
 800fc66:	1ad3      	subs	r3, r2, r3
 800fc68:	68fa      	ldr	r2, [r7, #12]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d80a      	bhi.n	800fc84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fc6e:	4b0f      	ldr	r3, [pc, #60]	; (800fcac <tcp_kill_prio+0x98>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	1ad3      	subs	r3, r2, r3
 800fc78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	7d5b      	ldrb	r3, [r3, #21]
 800fc82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	617b      	str	r3, [r7, #20]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1dc      	bne.n	800fc4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d004      	beq.n	800fca0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc96:	6938      	ldr	r0, [r7, #16]
 800fc98:	f7ff fa56 	bl	800f148 <tcp_abort>
 800fc9c:	e000      	b.n	800fca0 <tcp_kill_prio+0x8c>
    return;
 800fc9e:	bf00      	nop
  }
}
 800fca0:	3718      	adds	r7, #24
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	2000d07c 	.word	0x2000d07c
 800fcac:	2000d080 	.word	0x2000d080

0800fcb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fcba:	79fb      	ldrb	r3, [r7, #7]
 800fcbc:	2b08      	cmp	r3, #8
 800fcbe:	d009      	beq.n	800fcd4 <tcp_kill_state+0x24>
 800fcc0:	79fb      	ldrb	r3, [r7, #7]
 800fcc2:	2b09      	cmp	r3, #9
 800fcc4:	d006      	beq.n	800fcd4 <tcp_kill_state+0x24>
 800fcc6:	4b1a      	ldr	r3, [pc, #104]	; (800fd30 <tcp_kill_state+0x80>)
 800fcc8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800fccc:	4919      	ldr	r1, [pc, #100]	; (800fd34 <tcp_kill_state+0x84>)
 800fcce:	481a      	ldr	r0, [pc, #104]	; (800fd38 <tcp_kill_state+0x88>)
 800fcd0:	f009 faea 	bl	80192a8 <iprintf>

  inactivity = 0;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcdc:	4b17      	ldr	r3, [pc, #92]	; (800fd3c <tcp_kill_state+0x8c>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	617b      	str	r3, [r7, #20]
 800fce2:	e017      	b.n	800fd14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	79fa      	ldrb	r2, [r7, #7]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d10f      	bne.n	800fd0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fcee:	4b14      	ldr	r3, [pc, #80]	; (800fd40 <tcp_kill_state+0x90>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d807      	bhi.n	800fd0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fcfe:	4b10      	ldr	r3, [pc, #64]	; (800fd40 <tcp_kill_state+0x90>)
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd0e:	697b      	ldr	r3, [r7, #20]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	617b      	str	r3, [r7, #20]
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d1e4      	bne.n	800fce4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d003      	beq.n	800fd28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fd20:	2100      	movs	r1, #0
 800fd22:	6938      	ldr	r0, [r7, #16]
 800fd24:	f7ff f952 	bl	800efcc <tcp_abandon>
  }
}
 800fd28:	bf00      	nop
 800fd2a:	3718      	adds	r7, #24
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	0801b188 	.word	0x0801b188
 800fd34:	0801b714 	.word	0x0801b714
 800fd38:	0801b1cc 	.word	0x0801b1cc
 800fd3c:	2000d07c 	.word	0x2000d07c
 800fd40:	2000d080 	.word	0x2000d080

0800fd44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd52:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <tcp_kill_timewait+0x58>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	60fb      	str	r3, [r7, #12]
 800fd58:	e012      	b.n	800fd80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fd5a:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <tcp_kill_timewait+0x5c>)
 800fd5c:	681a      	ldr	r2, [r3, #0]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6a1b      	ldr	r3, [r3, #32]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d807      	bhi.n	800fd7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fd6a:	4b0d      	ldr	r3, [pc, #52]	; (800fda0 <tcp_kill_timewait+0x5c>)
 800fd6c:	681a      	ldr	r2, [r3, #0]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6a1b      	ldr	r3, [r3, #32]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	60fb      	str	r3, [r7, #12]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d1e9      	bne.n	800fd5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d002      	beq.n	800fd92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fd8c:	68b8      	ldr	r0, [r7, #8]
 800fd8e:	f7ff f9db 	bl	800f148 <tcp_abort>
  }
}
 800fd92:	bf00      	nop
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	2000d08c 	.word	0x2000d08c
 800fda0:	2000d080 	.word	0x2000d080

0800fda4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fdaa:	4b10      	ldr	r3, [pc, #64]	; (800fdec <tcp_handle_closepend+0x48>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fdb0:	e014      	b.n	800fddc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	8b5b      	ldrh	r3, [r3, #26]
 800fdbc:	f003 0308 	and.w	r3, r3, #8
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d009      	beq.n	800fdd8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8b5b      	ldrh	r3, [r3, #26]
 800fdc8:	f023 0308 	bic.w	r3, r3, #8
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff f864 	bl	800eea0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d1e7      	bne.n	800fdb2 <tcp_handle_closepend+0xe>
  }
}
 800fde2:	bf00      	nop
 800fde4:	bf00      	nop
 800fde6:	3708      	adds	r7, #8
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}
 800fdec:	2000d07c 	.word	0x2000d07c

0800fdf0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b084      	sub	sp, #16
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fdfa:	2001      	movs	r0, #1
 800fdfc:	f7fd fcfe 	bl	800d7fc <memp_malloc>
 800fe00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d126      	bne.n	800fe56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fe08:	f7ff ffcc 	bl	800fda4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fe0c:	f7ff ff9a 	bl	800fd44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe10:	2001      	movs	r0, #1
 800fe12:	f7fd fcf3 	bl	800d7fc <memp_malloc>
 800fe16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d11b      	bne.n	800fe56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fe1e:	2009      	movs	r0, #9
 800fe20:	f7ff ff46 	bl	800fcb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe24:	2001      	movs	r0, #1
 800fe26:	f7fd fce9 	bl	800d7fc <memp_malloc>
 800fe2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d111      	bne.n	800fe56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fe32:	2008      	movs	r0, #8
 800fe34:	f7ff ff3c 	bl	800fcb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe38:	2001      	movs	r0, #1
 800fe3a:	f7fd fcdf 	bl	800d7fc <memp_malloc>
 800fe3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d107      	bne.n	800fe56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fe46:	79fb      	ldrb	r3, [r7, #7]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff fee3 	bl	800fc14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fe4e:	2001      	movs	r0, #1
 800fe50:	f7fd fcd4 	bl	800d7fc <memp_malloc>
 800fe54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d03f      	beq.n	800fedc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fe5c:	229c      	movs	r2, #156	; 0x9c
 800fe5e:	2100      	movs	r1, #0
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f009 f9be 	bl	80191e2 <memset>
    pcb->prio = prio;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	79fa      	ldrb	r2, [r7, #7]
 800fe6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fe72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fe7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	22ff      	movs	r2, #255	; 0xff
 800fe8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe92:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2206      	movs	r2, #6
 800fe98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2206      	movs	r2, #6
 800fea0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fea8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2201      	movs	r2, #1
 800feae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800feb2:	4b0d      	ldr	r3, [pc, #52]	; (800fee8 <tcp_alloc+0xf8>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800feba:	4b0c      	ldr	r3, [pc, #48]	; (800feec <tcp_alloc+0xfc>)
 800febc:	781a      	ldrb	r2, [r3, #0]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fec8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4a08      	ldr	r2, [pc, #32]	; (800fef0 <tcp_alloc+0x100>)
 800fed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4a07      	ldr	r2, [pc, #28]	; (800fef4 <tcp_alloc+0x104>)
 800fed8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fedc:	68fb      	ldr	r3, [r7, #12]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	2000d080 	.word	0x2000d080
 800feec:	20004b1a 	.word	0x20004b1a
 800fef0:	0800fba9 	.word	0x0800fba9
 800fef4:	006ddd00 	.word	0x006ddd00

0800fef8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d107      	bne.n	800ff16 <tcp_pcb_purge+0x1e>
 800ff06:	4b21      	ldr	r3, [pc, #132]	; (800ff8c <tcp_pcb_purge+0x94>)
 800ff08:	f640 0251 	movw	r2, #2129	; 0x851
 800ff0c:	4920      	ldr	r1, [pc, #128]	; (800ff90 <tcp_pcb_purge+0x98>)
 800ff0e:	4821      	ldr	r0, [pc, #132]	; (800ff94 <tcp_pcb_purge+0x9c>)
 800ff10:	f009 f9ca 	bl	80192a8 <iprintf>
 800ff14:	e037      	b.n	800ff86 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	7d1b      	ldrb	r3, [r3, #20]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d033      	beq.n	800ff86 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ff22:	2b0a      	cmp	r3, #10
 800ff24:	d02f      	beq.n	800ff86 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d02b      	beq.n	800ff86 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d007      	beq.n	800ff46 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fe fb60 	bl	800e600 <pbuf_free>
      pcb->refused_data = NULL;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d002      	beq.n	800ff54 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f986 	bl	8010260 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff5a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fdc7 	bl	800faf4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7ff fdc2 	bl	800faf4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	66da      	str	r2, [r3, #108]	; 0x6c
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ff86:	3708      	adds	r7, #8
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	0801b188 	.word	0x0801b188
 800ff90:	0801b7d4 	.word	0x0801b7d4
 800ff94:	0801b1cc 	.word	0x0801b1cc

0800ff98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <tcp_pcb_remove+0x1e>
 800ffa8:	4b3e      	ldr	r3, [pc, #248]	; (80100a4 <tcp_pcb_remove+0x10c>)
 800ffaa:	f640 0283 	movw	r2, #2179	; 0x883
 800ffae:	493e      	ldr	r1, [pc, #248]	; (80100a8 <tcp_pcb_remove+0x110>)
 800ffb0:	483e      	ldr	r0, [pc, #248]	; (80100ac <tcp_pcb_remove+0x114>)
 800ffb2:	f009 f979 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d106      	bne.n	800ffca <tcp_pcb_remove+0x32>
 800ffbc:	4b39      	ldr	r3, [pc, #228]	; (80100a4 <tcp_pcb_remove+0x10c>)
 800ffbe:	f640 0284 	movw	r2, #2180	; 0x884
 800ffc2:	493b      	ldr	r1, [pc, #236]	; (80100b0 <tcp_pcb_remove+0x118>)
 800ffc4:	4839      	ldr	r0, [pc, #228]	; (80100ac <tcp_pcb_remove+0x114>)
 800ffc6:	f009 f96f 	bl	80192a8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	683a      	ldr	r2, [r7, #0]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d105      	bne.n	800ffe0 <tcp_pcb_remove+0x48>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68da      	ldr	r2, [r3, #12]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	e013      	b.n	8010008 <tcp_pcb_remove+0x70>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	60fb      	str	r3, [r7, #12]
 800ffe6:	e00c      	b.n	8010002 <tcp_pcb_remove+0x6a>
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d104      	bne.n	800fffc <tcp_pcb_remove+0x64>
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	68da      	ldr	r2, [r3, #12]
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	60da      	str	r2, [r3, #12]
 800fffa:	e005      	b.n	8010008 <tcp_pcb_remove+0x70>
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	60fb      	str	r3, [r7, #12]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1ef      	bne.n	800ffe8 <tcp_pcb_remove+0x50>
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2200      	movs	r2, #0
 801000c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801000e:	6838      	ldr	r0, [r7, #0]
 8010010:	f7ff ff72 	bl	800fef8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	7d1b      	ldrb	r3, [r3, #20]
 8010018:	2b0a      	cmp	r3, #10
 801001a:	d013      	beq.n	8010044 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010020:	2b01      	cmp	r3, #1
 8010022:	d00f      	beq.n	8010044 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	8b5b      	ldrh	r3, [r3, #26]
 8010028:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801002c:	2b00      	cmp	r3, #0
 801002e:	d009      	beq.n	8010044 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	8b5b      	ldrh	r3, [r3, #26]
 8010034:	f043 0302 	orr.w	r3, r3, #2
 8010038:	b29a      	uxth	r2, r3
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801003e:	6838      	ldr	r0, [r7, #0]
 8010040:	f002 ff6a 	bl	8012f18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	7d1b      	ldrb	r3, [r3, #20]
 8010048:	2b01      	cmp	r3, #1
 801004a:	d020      	beq.n	801008e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d006      	beq.n	8010062 <tcp_pcb_remove+0xca>
 8010054:	4b13      	ldr	r3, [pc, #76]	; (80100a4 <tcp_pcb_remove+0x10c>)
 8010056:	f640 0293 	movw	r2, #2195	; 0x893
 801005a:	4916      	ldr	r1, [pc, #88]	; (80100b4 <tcp_pcb_remove+0x11c>)
 801005c:	4813      	ldr	r0, [pc, #76]	; (80100ac <tcp_pcb_remove+0x114>)
 801005e:	f009 f923 	bl	80192a8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010066:	2b00      	cmp	r3, #0
 8010068:	d006      	beq.n	8010078 <tcp_pcb_remove+0xe0>
 801006a:	4b0e      	ldr	r3, [pc, #56]	; (80100a4 <tcp_pcb_remove+0x10c>)
 801006c:	f640 0294 	movw	r2, #2196	; 0x894
 8010070:	4911      	ldr	r1, [pc, #68]	; (80100b8 <tcp_pcb_remove+0x120>)
 8010072:	480e      	ldr	r0, [pc, #56]	; (80100ac <tcp_pcb_remove+0x114>)
 8010074:	f009 f918 	bl	80192a8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801007c:	2b00      	cmp	r3, #0
 801007e:	d006      	beq.n	801008e <tcp_pcb_remove+0xf6>
 8010080:	4b08      	ldr	r3, [pc, #32]	; (80100a4 <tcp_pcb_remove+0x10c>)
 8010082:	f640 0296 	movw	r2, #2198	; 0x896
 8010086:	490d      	ldr	r1, [pc, #52]	; (80100bc <tcp_pcb_remove+0x124>)
 8010088:	4808      	ldr	r0, [pc, #32]	; (80100ac <tcp_pcb_remove+0x114>)
 801008a:	f009 f90d 	bl	80192a8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2200      	movs	r2, #0
 8010092:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2200      	movs	r2, #0
 8010098:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801009a:	bf00      	nop
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	0801b188 	.word	0x0801b188
 80100a8:	0801b7f0 	.word	0x0801b7f0
 80100ac:	0801b1cc 	.word	0x0801b1cc
 80100b0:	0801b80c 	.word	0x0801b80c
 80100b4:	0801b82c 	.word	0x0801b82c
 80100b8:	0801b844 	.word	0x0801b844
 80100bc:	0801b860 	.word	0x0801b860

080100c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d106      	bne.n	80100dc <tcp_next_iss+0x1c>
 80100ce:	4b0a      	ldr	r3, [pc, #40]	; (80100f8 <tcp_next_iss+0x38>)
 80100d0:	f640 02af 	movw	r2, #2223	; 0x8af
 80100d4:	4909      	ldr	r1, [pc, #36]	; (80100fc <tcp_next_iss+0x3c>)
 80100d6:	480a      	ldr	r0, [pc, #40]	; (8010100 <tcp_next_iss+0x40>)
 80100d8:	f009 f8e6 	bl	80192a8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80100dc:	4b09      	ldr	r3, [pc, #36]	; (8010104 <tcp_next_iss+0x44>)
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	4b09      	ldr	r3, [pc, #36]	; (8010108 <tcp_next_iss+0x48>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4413      	add	r3, r2
 80100e6:	4a07      	ldr	r2, [pc, #28]	; (8010104 <tcp_next_iss+0x44>)
 80100e8:	6013      	str	r3, [r2, #0]
  return iss;
 80100ea:	4b06      	ldr	r3, [pc, #24]	; (8010104 <tcp_next_iss+0x44>)
 80100ec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	0801b188 	.word	0x0801b188
 80100fc:	0801b878 	.word	0x0801b878
 8010100:	0801b1cc 	.word	0x0801b1cc
 8010104:	2000005c 	.word	0x2000005c
 8010108:	2000d080 	.word	0x2000d080

0801010c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	607a      	str	r2, [r7, #4]
 8010118:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d106      	bne.n	801012e <tcp_eff_send_mss_netif+0x22>
 8010120:	4b14      	ldr	r3, [pc, #80]	; (8010174 <tcp_eff_send_mss_netif+0x68>)
 8010122:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010126:	4914      	ldr	r1, [pc, #80]	; (8010178 <tcp_eff_send_mss_netif+0x6c>)
 8010128:	4814      	ldr	r0, [pc, #80]	; (801017c <tcp_eff_send_mss_netif+0x70>)
 801012a:	f009 f8bd 	bl	80192a8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010134:	89fb      	ldrh	r3, [r7, #14]
 8010136:	e019      	b.n	801016c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801013c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801013e:	8afb      	ldrh	r3, [r7, #22]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d012      	beq.n	801016a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010144:	2328      	movs	r3, #40	; 0x28
 8010146:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010148:	8afa      	ldrh	r2, [r7, #22]
 801014a:	8abb      	ldrh	r3, [r7, #20]
 801014c:	429a      	cmp	r2, r3
 801014e:	d904      	bls.n	801015a <tcp_eff_send_mss_netif+0x4e>
 8010150:	8afa      	ldrh	r2, [r7, #22]
 8010152:	8abb      	ldrh	r3, [r7, #20]
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	b29b      	uxth	r3, r3
 8010158:	e000      	b.n	801015c <tcp_eff_send_mss_netif+0x50>
 801015a:	2300      	movs	r3, #0
 801015c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801015e:	8a7a      	ldrh	r2, [r7, #18]
 8010160:	89fb      	ldrh	r3, [r7, #14]
 8010162:	4293      	cmp	r3, r2
 8010164:	bf28      	it	cs
 8010166:	4613      	movcs	r3, r2
 8010168:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801016a:	89fb      	ldrh	r3, [r7, #14]
}
 801016c:	4618      	mov	r0, r3
 801016e:	3718      	adds	r7, #24
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}
 8010174:	0801b188 	.word	0x0801b188
 8010178:	0801b894 	.word	0x0801b894
 801017c:	0801b1cc 	.word	0x0801b1cc

08010180 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
 8010188:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d119      	bne.n	80101c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010194:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010196:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801019a:	4910      	ldr	r1, [pc, #64]	; (80101dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801019c:	4810      	ldr	r0, [pc, #64]	; (80101e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801019e:	f009 f883 	bl	80192a8 <iprintf>

  while (pcb != NULL) {
 80101a2:	e011      	b.n	80101c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d108      	bne.n	80101c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7fe ffc6 	bl	800f148 <tcp_abort>
      pcb = next;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	60fb      	str	r3, [r7, #12]
 80101c0:	e002      	b.n	80101c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d1ea      	bne.n	80101a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80101ce:	bf00      	nop
 80101d0:	bf00      	nop
 80101d2:	3710      	adds	r7, #16
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	0801b188 	.word	0x0801b188
 80101dc:	0801b8bc 	.word	0x0801b8bc
 80101e0:	0801b1cc 	.word	0x0801b1cc

080101e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d02a      	beq.n	801024a <tcp_netif_ip_addr_changed+0x66>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d026      	beq.n	801024a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80101fc:	4b15      	ldr	r3, [pc, #84]	; (8010254 <tcp_netif_ip_addr_changed+0x70>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff ffbc 	bl	8010180 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010208:	4b13      	ldr	r3, [pc, #76]	; (8010258 <tcp_netif_ip_addr_changed+0x74>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4619      	mov	r1, r3
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f7ff ffb6 	bl	8010180 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d017      	beq.n	801024a <tcp_netif_ip_addr_changed+0x66>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d013      	beq.n	801024a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010222:	4b0e      	ldr	r3, [pc, #56]	; (801025c <tcp_netif_ip_addr_changed+0x78>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	e00c      	b.n	8010244 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	429a      	cmp	r2, r3
 8010234:	d103      	bne.n	801023e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1ef      	bne.n	801022a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801024a:	bf00      	nop
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	2000d07c 	.word	0x2000d07c
 8010258:	2000d088 	.word	0x2000d088
 801025c:	2000d084 	.word	0x2000d084

08010260 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b082      	sub	sp, #8
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801026c:	2b00      	cmp	r3, #0
 801026e:	d007      	beq.n	8010280 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010274:	4618      	mov	r0, r3
 8010276:	f7ff fc3d 	bl	800faf4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010288:	b590      	push	{r4, r7, lr}
 801028a:	b08d      	sub	sp, #52	; 0x34
 801028c:	af04      	add	r7, sp, #16
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d105      	bne.n	80102a4 <tcp_input+0x1c>
 8010298:	4b9b      	ldr	r3, [pc, #620]	; (8010508 <tcp_input+0x280>)
 801029a:	2283      	movs	r2, #131	; 0x83
 801029c:	499b      	ldr	r1, [pc, #620]	; (801050c <tcp_input+0x284>)
 801029e:	489c      	ldr	r0, [pc, #624]	; (8010510 <tcp_input+0x288>)
 80102a0:	f009 f802 	bl	80192a8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	4a9a      	ldr	r2, [pc, #616]	; (8010514 <tcp_input+0x28c>)
 80102aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	895b      	ldrh	r3, [r3, #10]
 80102b0:	2b13      	cmp	r3, #19
 80102b2:	f240 83c4 	bls.w	8010a3e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102b6:	4b98      	ldr	r3, [pc, #608]	; (8010518 <tcp_input+0x290>)
 80102b8:	695b      	ldr	r3, [r3, #20]
 80102ba:	4a97      	ldr	r2, [pc, #604]	; (8010518 <tcp_input+0x290>)
 80102bc:	6812      	ldr	r2, [r2, #0]
 80102be:	4611      	mov	r1, r2
 80102c0:	4618      	mov	r0, r3
 80102c2:	f007 fdf9 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f040 83ba 	bne.w	8010a42 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80102ce:	4b92      	ldr	r3, [pc, #584]	; (8010518 <tcp_input+0x290>)
 80102d0:	695b      	ldr	r3, [r3, #20]
 80102d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80102d6:	2be0      	cmp	r3, #224	; 0xe0
 80102d8:	f000 83b3 	beq.w	8010a42 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80102dc:	4b8d      	ldr	r3, [pc, #564]	; (8010514 <tcp_input+0x28c>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	899b      	ldrh	r3, [r3, #12]
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fc fdd3 	bl	800ce90 <lwip_htons>
 80102ea:	4603      	mov	r3, r0
 80102ec:	0b1b      	lsrs	r3, r3, #12
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80102f6:	7cbb      	ldrb	r3, [r7, #18]
 80102f8:	2b13      	cmp	r3, #19
 80102fa:	f240 83a4 	bls.w	8010a46 <tcp_input+0x7be>
 80102fe:	7cbb      	ldrb	r3, [r7, #18]
 8010300:	b29a      	uxth	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	891b      	ldrh	r3, [r3, #8]
 8010306:	429a      	cmp	r2, r3
 8010308:	f200 839d 	bhi.w	8010a46 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801030c:	7cbb      	ldrb	r3, [r7, #18]
 801030e:	b29b      	uxth	r3, r3
 8010310:	3b14      	subs	r3, #20
 8010312:	b29a      	uxth	r2, r3
 8010314:	4b81      	ldr	r3, [pc, #516]	; (801051c <tcp_input+0x294>)
 8010316:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010318:	4b81      	ldr	r3, [pc, #516]	; (8010520 <tcp_input+0x298>)
 801031a:	2200      	movs	r2, #0
 801031c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	895a      	ldrh	r2, [r3, #10]
 8010322:	7cbb      	ldrb	r3, [r7, #18]
 8010324:	b29b      	uxth	r3, r3
 8010326:	429a      	cmp	r2, r3
 8010328:	d309      	bcc.n	801033e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801032a:	4b7c      	ldr	r3, [pc, #496]	; (801051c <tcp_input+0x294>)
 801032c:	881a      	ldrh	r2, [r3, #0]
 801032e:	4b7d      	ldr	r3, [pc, #500]	; (8010524 <tcp_input+0x29c>)
 8010330:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010332:	7cbb      	ldrb	r3, [r7, #18]
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7fe f8dc 	bl	800e4f4 <pbuf_remove_header>
 801033c:	e04e      	b.n	80103dc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d105      	bne.n	8010352 <tcp_input+0xca>
 8010346:	4b70      	ldr	r3, [pc, #448]	; (8010508 <tcp_input+0x280>)
 8010348:	22c2      	movs	r2, #194	; 0xc2
 801034a:	4977      	ldr	r1, [pc, #476]	; (8010528 <tcp_input+0x2a0>)
 801034c:	4870      	ldr	r0, [pc, #448]	; (8010510 <tcp_input+0x288>)
 801034e:	f008 ffab 	bl	80192a8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010352:	2114      	movs	r1, #20
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7fe f8cd 	bl	800e4f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	895a      	ldrh	r2, [r3, #10]
 801035e:	4b71      	ldr	r3, [pc, #452]	; (8010524 <tcp_input+0x29c>)
 8010360:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010362:	4b6e      	ldr	r3, [pc, #440]	; (801051c <tcp_input+0x294>)
 8010364:	881a      	ldrh	r2, [r3, #0]
 8010366:	4b6f      	ldr	r3, [pc, #444]	; (8010524 <tcp_input+0x29c>)
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801036e:	4b6d      	ldr	r3, [pc, #436]	; (8010524 <tcp_input+0x29c>)
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	4619      	mov	r1, r3
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7fe f8bd 	bl	800e4f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	895b      	ldrh	r3, [r3, #10]
 8010380:	8a3a      	ldrh	r2, [r7, #16]
 8010382:	429a      	cmp	r2, r3
 8010384:	f200 8361 	bhi.w	8010a4a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	4a64      	ldr	r2, [pc, #400]	; (8010520 <tcp_input+0x298>)
 8010390:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	8a3a      	ldrh	r2, [r7, #16]
 8010398:	4611      	mov	r1, r2
 801039a:	4618      	mov	r0, r3
 801039c:	f7fe f8aa 	bl	800e4f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	891a      	ldrh	r2, [r3, #8]
 80103a4:	8a3b      	ldrh	r3, [r7, #16]
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	895b      	ldrh	r3, [r3, #10]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d005      	beq.n	80103c2 <tcp_input+0x13a>
 80103b6:	4b54      	ldr	r3, [pc, #336]	; (8010508 <tcp_input+0x280>)
 80103b8:	22df      	movs	r2, #223	; 0xdf
 80103ba:	495c      	ldr	r1, [pc, #368]	; (801052c <tcp_input+0x2a4>)
 80103bc:	4854      	ldr	r0, [pc, #336]	; (8010510 <tcp_input+0x288>)
 80103be:	f008 ff73 	bl	80192a8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	891a      	ldrh	r2, [r3, #8]
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	891b      	ldrh	r3, [r3, #8]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d005      	beq.n	80103dc <tcp_input+0x154>
 80103d0:	4b4d      	ldr	r3, [pc, #308]	; (8010508 <tcp_input+0x280>)
 80103d2:	22e0      	movs	r2, #224	; 0xe0
 80103d4:	4956      	ldr	r1, [pc, #344]	; (8010530 <tcp_input+0x2a8>)
 80103d6:	484e      	ldr	r0, [pc, #312]	; (8010510 <tcp_input+0x288>)
 80103d8:	f008 ff66 	bl	80192a8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80103dc:	4b4d      	ldr	r3, [pc, #308]	; (8010514 <tcp_input+0x28c>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	4a4b      	ldr	r2, [pc, #300]	; (8010514 <tcp_input+0x28c>)
 80103e6:	6814      	ldr	r4, [r2, #0]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fc fd51 	bl	800ce90 <lwip_htons>
 80103ee:	4603      	mov	r3, r0
 80103f0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80103f2:	4b48      	ldr	r3, [pc, #288]	; (8010514 <tcp_input+0x28c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	885b      	ldrh	r3, [r3, #2]
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	4a46      	ldr	r2, [pc, #280]	; (8010514 <tcp_input+0x28c>)
 80103fc:	6814      	ldr	r4, [r2, #0]
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fc fd46 	bl	800ce90 <lwip_htons>
 8010404:	4603      	mov	r3, r0
 8010406:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010408:	4b42      	ldr	r3, [pc, #264]	; (8010514 <tcp_input+0x28c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4a41      	ldr	r2, [pc, #260]	; (8010514 <tcp_input+0x28c>)
 8010410:	6814      	ldr	r4, [r2, #0]
 8010412:	4618      	mov	r0, r3
 8010414:	f7fc fd51 	bl	800ceba <lwip_htonl>
 8010418:	4603      	mov	r3, r0
 801041a:	6063      	str	r3, [r4, #4]
 801041c:	6863      	ldr	r3, [r4, #4]
 801041e:	4a45      	ldr	r2, [pc, #276]	; (8010534 <tcp_input+0x2ac>)
 8010420:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010422:	4b3c      	ldr	r3, [pc, #240]	; (8010514 <tcp_input+0x28c>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	4a3a      	ldr	r2, [pc, #232]	; (8010514 <tcp_input+0x28c>)
 801042a:	6814      	ldr	r4, [r2, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	f7fc fd44 	bl	800ceba <lwip_htonl>
 8010432:	4603      	mov	r3, r0
 8010434:	60a3      	str	r3, [r4, #8]
 8010436:	68a3      	ldr	r3, [r4, #8]
 8010438:	4a3f      	ldr	r2, [pc, #252]	; (8010538 <tcp_input+0x2b0>)
 801043a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801043c:	4b35      	ldr	r3, [pc, #212]	; (8010514 <tcp_input+0x28c>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	89db      	ldrh	r3, [r3, #14]
 8010442:	b29b      	uxth	r3, r3
 8010444:	4a33      	ldr	r2, [pc, #204]	; (8010514 <tcp_input+0x28c>)
 8010446:	6814      	ldr	r4, [r2, #0]
 8010448:	4618      	mov	r0, r3
 801044a:	f7fc fd21 	bl	800ce90 <lwip_htons>
 801044e:	4603      	mov	r3, r0
 8010450:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010452:	4b30      	ldr	r3, [pc, #192]	; (8010514 <tcp_input+0x28c>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	899b      	ldrh	r3, [r3, #12]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7fc fd18 	bl	800ce90 <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	b2db      	uxtb	r3, r3
 8010464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010468:	b2da      	uxtb	r2, r3
 801046a:	4b34      	ldr	r3, [pc, #208]	; (801053c <tcp_input+0x2b4>)
 801046c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	891a      	ldrh	r2, [r3, #8]
 8010472:	4b33      	ldr	r3, [pc, #204]	; (8010540 <tcp_input+0x2b8>)
 8010474:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010476:	4b31      	ldr	r3, [pc, #196]	; (801053c <tcp_input+0x2b4>)
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	f003 0303 	and.w	r3, r3, #3
 801047e:	2b00      	cmp	r3, #0
 8010480:	d00c      	beq.n	801049c <tcp_input+0x214>
    tcplen++;
 8010482:	4b2f      	ldr	r3, [pc, #188]	; (8010540 <tcp_input+0x2b8>)
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	3301      	adds	r3, #1
 8010488:	b29a      	uxth	r2, r3
 801048a:	4b2d      	ldr	r3, [pc, #180]	; (8010540 <tcp_input+0x2b8>)
 801048c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	891a      	ldrh	r2, [r3, #8]
 8010492:	4b2b      	ldr	r3, [pc, #172]	; (8010540 <tcp_input+0x2b8>)
 8010494:	881b      	ldrh	r3, [r3, #0]
 8010496:	429a      	cmp	r2, r3
 8010498:	f200 82d9 	bhi.w	8010a4e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801049c:	2300      	movs	r3, #0
 801049e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104a0:	4b28      	ldr	r3, [pc, #160]	; (8010544 <tcp_input+0x2bc>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	61fb      	str	r3, [r7, #28]
 80104a6:	e09d      	b.n	80105e4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	7d1b      	ldrb	r3, [r3, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <tcp_input+0x234>
 80104b0:	4b15      	ldr	r3, [pc, #84]	; (8010508 <tcp_input+0x280>)
 80104b2:	22fb      	movs	r2, #251	; 0xfb
 80104b4:	4924      	ldr	r1, [pc, #144]	; (8010548 <tcp_input+0x2c0>)
 80104b6:	4816      	ldr	r0, [pc, #88]	; (8010510 <tcp_input+0x288>)
 80104b8:	f008 fef6 	bl	80192a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	7d1b      	ldrb	r3, [r3, #20]
 80104c0:	2b0a      	cmp	r3, #10
 80104c2:	d105      	bne.n	80104d0 <tcp_input+0x248>
 80104c4:	4b10      	ldr	r3, [pc, #64]	; (8010508 <tcp_input+0x280>)
 80104c6:	22fc      	movs	r2, #252	; 0xfc
 80104c8:	4920      	ldr	r1, [pc, #128]	; (801054c <tcp_input+0x2c4>)
 80104ca:	4811      	ldr	r0, [pc, #68]	; (8010510 <tcp_input+0x288>)
 80104cc:	f008 feec 	bl	80192a8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d105      	bne.n	80104e4 <tcp_input+0x25c>
 80104d8:	4b0b      	ldr	r3, [pc, #44]	; (8010508 <tcp_input+0x280>)
 80104da:	22fd      	movs	r2, #253	; 0xfd
 80104dc:	491c      	ldr	r1, [pc, #112]	; (8010550 <tcp_input+0x2c8>)
 80104de:	480c      	ldr	r0, [pc, #48]	; (8010510 <tcp_input+0x288>)
 80104e0:	f008 fee2 	bl	80192a8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	7a1b      	ldrb	r3, [r3, #8]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d033      	beq.n	8010554 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	7a1a      	ldrb	r2, [r3, #8]
 80104f0:	4b09      	ldr	r3, [pc, #36]	; (8010518 <tcp_input+0x290>)
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80104f8:	3301      	adds	r3, #1
 80104fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d029      	beq.n	8010554 <tcp_input+0x2cc>
      prev = pcb;
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	61bb      	str	r3, [r7, #24]
      continue;
 8010504:	e06b      	b.n	80105de <tcp_input+0x356>
 8010506:	bf00      	nop
 8010508:	0801b8f0 	.word	0x0801b8f0
 801050c:	0801b924 	.word	0x0801b924
 8010510:	0801b93c 	.word	0x0801b93c
 8010514:	20004b2c 	.word	0x20004b2c
 8010518:	20009948 	.word	0x20009948
 801051c:	20004b30 	.word	0x20004b30
 8010520:	20004b34 	.word	0x20004b34
 8010524:	20004b32 	.word	0x20004b32
 8010528:	0801b964 	.word	0x0801b964
 801052c:	0801b974 	.word	0x0801b974
 8010530:	0801b980 	.word	0x0801b980
 8010534:	20004b3c 	.word	0x20004b3c
 8010538:	20004b40 	.word	0x20004b40
 801053c:	20004b48 	.word	0x20004b48
 8010540:	20004b46 	.word	0x20004b46
 8010544:	2000d07c 	.word	0x2000d07c
 8010548:	0801b9a0 	.word	0x0801b9a0
 801054c:	0801b9c8 	.word	0x0801b9c8
 8010550:	0801b9f4 	.word	0x0801b9f4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	8b1a      	ldrh	r2, [r3, #24]
 8010558:	4b94      	ldr	r3, [pc, #592]	; (80107ac <tcp_input+0x524>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	b29b      	uxth	r3, r3
 8010560:	429a      	cmp	r2, r3
 8010562:	d13a      	bne.n	80105da <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	8ada      	ldrh	r2, [r3, #22]
 8010568:	4b90      	ldr	r3, [pc, #576]	; (80107ac <tcp_input+0x524>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	885b      	ldrh	r3, [r3, #2]
 801056e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010570:	429a      	cmp	r2, r3
 8010572:	d132      	bne.n	80105da <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010574:	69fb      	ldr	r3, [r7, #28]
 8010576:	685a      	ldr	r2, [r3, #4]
 8010578:	4b8d      	ldr	r3, [pc, #564]	; (80107b0 <tcp_input+0x528>)
 801057a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801057c:	429a      	cmp	r2, r3
 801057e:	d12c      	bne.n	80105da <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	4b8a      	ldr	r3, [pc, #552]	; (80107b0 <tcp_input+0x528>)
 8010586:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010588:	429a      	cmp	r2, r3
 801058a:	d126      	bne.n	80105da <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	69fa      	ldr	r2, [r7, #28]
 8010592:	429a      	cmp	r2, r3
 8010594:	d106      	bne.n	80105a4 <tcp_input+0x31c>
 8010596:	4b87      	ldr	r3, [pc, #540]	; (80107b4 <tcp_input+0x52c>)
 8010598:	f240 120d 	movw	r2, #269	; 0x10d
 801059c:	4986      	ldr	r1, [pc, #536]	; (80107b8 <tcp_input+0x530>)
 801059e:	4887      	ldr	r0, [pc, #540]	; (80107bc <tcp_input+0x534>)
 80105a0:	f008 fe82 	bl	80192a8 <iprintf>
      if (prev != NULL) {
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <tcp_input+0x338>
        prev->next = pcb->next;
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	68da      	ldr	r2, [r3, #12]
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80105b2:	4b83      	ldr	r3, [pc, #524]	; (80107c0 <tcp_input+0x538>)
 80105b4:	681a      	ldr	r2, [r3, #0]
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80105ba:	4a81      	ldr	r2, [pc, #516]	; (80107c0 <tcp_input+0x538>)
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	69fa      	ldr	r2, [r7, #28]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d111      	bne.n	80105ee <tcp_input+0x366>
 80105ca:	4b7a      	ldr	r3, [pc, #488]	; (80107b4 <tcp_input+0x52c>)
 80105cc:	f240 1215 	movw	r2, #277	; 0x115
 80105d0:	497c      	ldr	r1, [pc, #496]	; (80107c4 <tcp_input+0x53c>)
 80105d2:	487a      	ldr	r0, [pc, #488]	; (80107bc <tcp_input+0x534>)
 80105d4:	f008 fe68 	bl	80192a8 <iprintf>
      break;
 80105d8:	e009      	b.n	80105ee <tcp_input+0x366>
    }
    prev = pcb;
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	68db      	ldr	r3, [r3, #12]
 80105e2:	61fb      	str	r3, [r7, #28]
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f47f af5e 	bne.w	80104a8 <tcp_input+0x220>
 80105ec:	e000      	b.n	80105f0 <tcp_input+0x368>
      break;
 80105ee:	bf00      	nop
  }

  if (pcb == NULL) {
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f040 8095 	bne.w	8010722 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105f8:	4b73      	ldr	r3, [pc, #460]	; (80107c8 <tcp_input+0x540>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	61fb      	str	r3, [r7, #28]
 80105fe:	e03f      	b.n	8010680 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	7d1b      	ldrb	r3, [r3, #20]
 8010604:	2b0a      	cmp	r3, #10
 8010606:	d006      	beq.n	8010616 <tcp_input+0x38e>
 8010608:	4b6a      	ldr	r3, [pc, #424]	; (80107b4 <tcp_input+0x52c>)
 801060a:	f240 121f 	movw	r2, #287	; 0x11f
 801060e:	496f      	ldr	r1, [pc, #444]	; (80107cc <tcp_input+0x544>)
 8010610:	486a      	ldr	r0, [pc, #424]	; (80107bc <tcp_input+0x534>)
 8010612:	f008 fe49 	bl	80192a8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	7a1b      	ldrb	r3, [r3, #8]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d009      	beq.n	8010632 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	7a1a      	ldrb	r2, [r3, #8]
 8010622:	4b63      	ldr	r3, [pc, #396]	; (80107b0 <tcp_input+0x528>)
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801062a:	3301      	adds	r3, #1
 801062c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801062e:	429a      	cmp	r2, r3
 8010630:	d122      	bne.n	8010678 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	8b1a      	ldrh	r2, [r3, #24]
 8010636:	4b5d      	ldr	r3, [pc, #372]	; (80107ac <tcp_input+0x524>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	881b      	ldrh	r3, [r3, #0]
 801063c:	b29b      	uxth	r3, r3
 801063e:	429a      	cmp	r2, r3
 8010640:	d11b      	bne.n	801067a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	8ada      	ldrh	r2, [r3, #22]
 8010646:	4b59      	ldr	r3, [pc, #356]	; (80107ac <tcp_input+0x524>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	885b      	ldrh	r3, [r3, #2]
 801064c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801064e:	429a      	cmp	r2, r3
 8010650:	d113      	bne.n	801067a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	685a      	ldr	r2, [r3, #4]
 8010656:	4b56      	ldr	r3, [pc, #344]	; (80107b0 <tcp_input+0x528>)
 8010658:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801065a:	429a      	cmp	r2, r3
 801065c:	d10d      	bne.n	801067a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	4b53      	ldr	r3, [pc, #332]	; (80107b0 <tcp_input+0x528>)
 8010664:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010666:	429a      	cmp	r2, r3
 8010668:	d107      	bne.n	801067a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801066a:	69f8      	ldr	r0, [r7, #28]
 801066c:	f000 fb54 	bl	8010d18 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7fd ffc5 	bl	800e600 <pbuf_free>
        return;
 8010676:	e1f0      	b.n	8010a5a <tcp_input+0x7d2>
        continue;
 8010678:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801067a:	69fb      	ldr	r3, [r7, #28]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	61fb      	str	r3, [r7, #28]
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d1bc      	bne.n	8010600 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010686:	2300      	movs	r3, #0
 8010688:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801068a:	4b51      	ldr	r3, [pc, #324]	; (80107d0 <tcp_input+0x548>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	617b      	str	r3, [r7, #20]
 8010690:	e02a      	b.n	80106e8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	7a1b      	ldrb	r3, [r3, #8]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00c      	beq.n	80106b4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	7a1a      	ldrb	r2, [r3, #8]
 801069e:	4b44      	ldr	r3, [pc, #272]	; (80107b0 <tcp_input+0x528>)
 80106a0:	685b      	ldr	r3, [r3, #4]
 80106a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80106a6:	3301      	adds	r3, #1
 80106a8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d002      	beq.n	80106b4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	61bb      	str	r3, [r7, #24]
        continue;
 80106b2:	e016      	b.n	80106e2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	8ada      	ldrh	r2, [r3, #22]
 80106b8:	4b3c      	ldr	r3, [pc, #240]	; (80107ac <tcp_input+0x524>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	885b      	ldrh	r3, [r3, #2]
 80106be:	b29b      	uxth	r3, r3
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d10c      	bne.n	80106de <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	4b39      	ldr	r3, [pc, #228]	; (80107b0 <tcp_input+0x528>)
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d00f      	beq.n	80106f0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00d      	beq.n	80106f2 <tcp_input+0x46a>
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d009      	beq.n	80106f2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	617b      	str	r3, [r7, #20]
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1d1      	bne.n	8010692 <tcp_input+0x40a>
 80106ee:	e000      	b.n	80106f2 <tcp_input+0x46a>
            break;
 80106f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d014      	beq.n	8010722 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d00a      	beq.n	8010714 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	68da      	ldr	r2, [r3, #12]
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010706:	4b32      	ldr	r3, [pc, #200]	; (80107d0 <tcp_input+0x548>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	697b      	ldr	r3, [r7, #20]
 801070c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801070e:	4a30      	ldr	r2, [pc, #192]	; (80107d0 <tcp_input+0x548>)
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010714:	6978      	ldr	r0, [r7, #20]
 8010716:	f000 fa01 	bl	8010b1c <tcp_listen_input>
      }
      pbuf_free(p);
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7fd ff70 	bl	800e600 <pbuf_free>
      return;
 8010720:	e19b      	b.n	8010a5a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010722:	69fb      	ldr	r3, [r7, #28]
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 8160 	beq.w	80109ea <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801072a:	4b2a      	ldr	r3, [pc, #168]	; (80107d4 <tcp_input+0x54c>)
 801072c:	2200      	movs	r2, #0
 801072e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	891a      	ldrh	r2, [r3, #8]
 8010734:	4b27      	ldr	r3, [pc, #156]	; (80107d4 <tcp_input+0x54c>)
 8010736:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010738:	4a26      	ldr	r2, [pc, #152]	; (80107d4 <tcp_input+0x54c>)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801073e:	4b1b      	ldr	r3, [pc, #108]	; (80107ac <tcp_input+0x524>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a24      	ldr	r2, [pc, #144]	; (80107d4 <tcp_input+0x54c>)
 8010744:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010746:	4b24      	ldr	r3, [pc, #144]	; (80107d8 <tcp_input+0x550>)
 8010748:	2200      	movs	r2, #0
 801074a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801074c:	4b23      	ldr	r3, [pc, #140]	; (80107dc <tcp_input+0x554>)
 801074e:	2200      	movs	r2, #0
 8010750:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010752:	4b23      	ldr	r3, [pc, #140]	; (80107e0 <tcp_input+0x558>)
 8010754:	2200      	movs	r2, #0
 8010756:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010758:	4b22      	ldr	r3, [pc, #136]	; (80107e4 <tcp_input+0x55c>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f003 0308 	and.w	r3, r3, #8
 8010760:	2b00      	cmp	r3, #0
 8010762:	d006      	beq.n	8010772 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	7b5b      	ldrb	r3, [r3, #13]
 8010768:	f043 0301 	orr.w	r3, r3, #1
 801076c:	b2da      	uxtb	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010772:	69fb      	ldr	r3, [r7, #28]
 8010774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010776:	2b00      	cmp	r3, #0
 8010778:	d038      	beq.n	80107ec <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801077a:	69f8      	ldr	r0, [r7, #28]
 801077c:	f7ff f93e 	bl	800f9fc <tcp_process_refused_data>
 8010780:	4603      	mov	r3, r0
 8010782:	f113 0f0d 	cmn.w	r3, #13
 8010786:	d007      	beq.n	8010798 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801078c:	2b00      	cmp	r3, #0
 801078e:	d02d      	beq.n	80107ec <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010790:	4b15      	ldr	r3, [pc, #84]	; (80107e8 <tcp_input+0x560>)
 8010792:	881b      	ldrh	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d029      	beq.n	80107ec <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801079c:	2b00      	cmp	r3, #0
 801079e:	f040 8104 	bne.w	80109aa <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80107a2:	69f8      	ldr	r0, [r7, #28]
 80107a4:	f003 f9be 	bl	8013b24 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80107a8:	e0ff      	b.n	80109aa <tcp_input+0x722>
 80107aa:	bf00      	nop
 80107ac:	20004b2c 	.word	0x20004b2c
 80107b0:	20009948 	.word	0x20009948
 80107b4:	0801b8f0 	.word	0x0801b8f0
 80107b8:	0801ba1c 	.word	0x0801ba1c
 80107bc:	0801b93c 	.word	0x0801b93c
 80107c0:	2000d07c 	.word	0x2000d07c
 80107c4:	0801ba48 	.word	0x0801ba48
 80107c8:	2000d08c 	.word	0x2000d08c
 80107cc:	0801ba74 	.word	0x0801ba74
 80107d0:	2000d084 	.word	0x2000d084
 80107d4:	20004b1c 	.word	0x20004b1c
 80107d8:	20004b4c 	.word	0x20004b4c
 80107dc:	20004b49 	.word	0x20004b49
 80107e0:	20004b44 	.word	0x20004b44
 80107e4:	20004b48 	.word	0x20004b48
 80107e8:	20004b46 	.word	0x20004b46
      }
    }
    tcp_input_pcb = pcb;
 80107ec:	4a9c      	ldr	r2, [pc, #624]	; (8010a60 <tcp_input+0x7d8>)
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80107f2:	69f8      	ldr	r0, [r7, #28]
 80107f4:	f000 fb0a 	bl	8010e0c <tcp_process>
 80107f8:	4603      	mov	r3, r0
 80107fa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80107fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010800:	f113 0f0d 	cmn.w	r3, #13
 8010804:	f000 80d3 	beq.w	80109ae <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010808:	4b96      	ldr	r3, [pc, #600]	; (8010a64 <tcp_input+0x7dc>)
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	f003 0308 	and.w	r3, r3, #8
 8010810:	2b00      	cmp	r3, #0
 8010812:	d015      	beq.n	8010840 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801081a:	2b00      	cmp	r3, #0
 801081c:	d008      	beq.n	8010830 <tcp_input+0x5a8>
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010824:	69fa      	ldr	r2, [r7, #28]
 8010826:	6912      	ldr	r2, [r2, #16]
 8010828:	f06f 010d 	mvn.w	r1, #13
 801082c:	4610      	mov	r0, r2
 801082e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010830:	69f9      	ldr	r1, [r7, #28]
 8010832:	488d      	ldr	r0, [pc, #564]	; (8010a68 <tcp_input+0x7e0>)
 8010834:	f7ff fbb0 	bl	800ff98 <tcp_pcb_remove>
        tcp_free(pcb);
 8010838:	69f8      	ldr	r0, [r7, #28]
 801083a:	f7fe f99d 	bl	800eb78 <tcp_free>
 801083e:	e0c1      	b.n	80109c4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010840:	2300      	movs	r3, #0
 8010842:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010844:	4b89      	ldr	r3, [pc, #548]	; (8010a6c <tcp_input+0x7e4>)
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d01d      	beq.n	8010888 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801084c:	4b87      	ldr	r3, [pc, #540]	; (8010a6c <tcp_input+0x7e4>)
 801084e:	881b      	ldrh	r3, [r3, #0]
 8010850:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <tcp_input+0x5ea>
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010862:	69fa      	ldr	r2, [r7, #28]
 8010864:	6910      	ldr	r0, [r2, #16]
 8010866:	89fa      	ldrh	r2, [r7, #14]
 8010868:	69f9      	ldr	r1, [r7, #28]
 801086a:	4798      	blx	r3
 801086c:	4603      	mov	r3, r0
 801086e:	74fb      	strb	r3, [r7, #19]
 8010870:	e001      	b.n	8010876 <tcp_input+0x5ee>
 8010872:	2300      	movs	r3, #0
 8010874:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801087a:	f113 0f0d 	cmn.w	r3, #13
 801087e:	f000 8098 	beq.w	80109b2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010882:	4b7a      	ldr	r3, [pc, #488]	; (8010a6c <tcp_input+0x7e4>)
 8010884:	2200      	movs	r2, #0
 8010886:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010888:	69f8      	ldr	r0, [r7, #28]
 801088a:	f000 f907 	bl	8010a9c <tcp_input_delayed_close>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	f040 8090 	bne.w	80109b6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010896:	4b76      	ldr	r3, [pc, #472]	; (8010a70 <tcp_input+0x7e8>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d041      	beq.n	8010922 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d006      	beq.n	80108b4 <tcp_input+0x62c>
 80108a6:	4b73      	ldr	r3, [pc, #460]	; (8010a74 <tcp_input+0x7ec>)
 80108a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80108ac:	4972      	ldr	r1, [pc, #456]	; (8010a78 <tcp_input+0x7f0>)
 80108ae:	4873      	ldr	r0, [pc, #460]	; (8010a7c <tcp_input+0x7f4>)
 80108b0:	f008 fcfa 	bl	80192a8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	8b5b      	ldrh	r3, [r3, #26]
 80108b8:	f003 0310 	and.w	r3, r3, #16
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d008      	beq.n	80108d2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80108c0:	4b6b      	ldr	r3, [pc, #428]	; (8010a70 <tcp_input+0x7e8>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fd fe9b 	bl	800e600 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80108ca:	69f8      	ldr	r0, [r7, #28]
 80108cc:	f7fe fc3c 	bl	800f148 <tcp_abort>
            goto aborted;
 80108d0:	e078      	b.n	80109c4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d00c      	beq.n	80108f6 <tcp_input+0x66e>
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	6918      	ldr	r0, [r3, #16]
 80108e6:	4b62      	ldr	r3, [pc, #392]	; (8010a70 <tcp_input+0x7e8>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	2300      	movs	r3, #0
 80108ec:	69f9      	ldr	r1, [r7, #28]
 80108ee:	47a0      	blx	r4
 80108f0:	4603      	mov	r3, r0
 80108f2:	74fb      	strb	r3, [r7, #19]
 80108f4:	e008      	b.n	8010908 <tcp_input+0x680>
 80108f6:	4b5e      	ldr	r3, [pc, #376]	; (8010a70 <tcp_input+0x7e8>)
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	2300      	movs	r3, #0
 80108fc:	69f9      	ldr	r1, [r7, #28]
 80108fe:	2000      	movs	r0, #0
 8010900:	f7ff f952 	bl	800fba8 <tcp_recv_null>
 8010904:	4603      	mov	r3, r0
 8010906:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010908:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801090c:	f113 0f0d 	cmn.w	r3, #13
 8010910:	d053      	beq.n	80109ba <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010912:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d003      	beq.n	8010922 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801091a:	4b55      	ldr	r3, [pc, #340]	; (8010a70 <tcp_input+0x7e8>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	69fb      	ldr	r3, [r7, #28]
 8010920:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010922:	4b50      	ldr	r3, [pc, #320]	; (8010a64 <tcp_input+0x7dc>)
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	f003 0320 	and.w	r3, r3, #32
 801092a:	2b00      	cmp	r3, #0
 801092c:	d030      	beq.n	8010990 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010932:	2b00      	cmp	r3, #0
 8010934:	d009      	beq.n	801094a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010936:	69fb      	ldr	r3, [r7, #28]
 8010938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801093a:	7b5a      	ldrb	r2, [r3, #13]
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010940:	f042 0220 	orr.w	r2, r2, #32
 8010944:	b2d2      	uxtb	r2, r2
 8010946:	735a      	strb	r2, [r3, #13]
 8010948:	e022      	b.n	8010990 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801094e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010952:	d005      	beq.n	8010960 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010958:	3301      	adds	r3, #1
 801095a:	b29a      	uxth	r2, r3
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010966:	2b00      	cmp	r3, #0
 8010968:	d00b      	beq.n	8010982 <tcp_input+0x6fa>
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	6918      	ldr	r0, [r3, #16]
 8010974:	2300      	movs	r3, #0
 8010976:	2200      	movs	r2, #0
 8010978:	69f9      	ldr	r1, [r7, #28]
 801097a:	47a0      	blx	r4
 801097c:	4603      	mov	r3, r0
 801097e:	74fb      	strb	r3, [r7, #19]
 8010980:	e001      	b.n	8010986 <tcp_input+0x6fe>
 8010982:	2300      	movs	r3, #0
 8010984:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010986:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801098a:	f113 0f0d 	cmn.w	r3, #13
 801098e:	d016      	beq.n	80109be <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010990:	4b33      	ldr	r3, [pc, #204]	; (8010a60 <tcp_input+0x7d8>)
 8010992:	2200      	movs	r2, #0
 8010994:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010996:	69f8      	ldr	r0, [r7, #28]
 8010998:	f000 f880 	bl	8010a9c <tcp_input_delayed_close>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d10f      	bne.n	80109c2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80109a2:	69f8      	ldr	r0, [r7, #28]
 80109a4:	f002 fab8 	bl	8012f18 <tcp_output>
 80109a8:	e00c      	b.n	80109c4 <tcp_input+0x73c>
        goto aborted;
 80109aa:	bf00      	nop
 80109ac:	e00a      	b.n	80109c4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80109ae:	bf00      	nop
 80109b0:	e008      	b.n	80109c4 <tcp_input+0x73c>
              goto aborted;
 80109b2:	bf00      	nop
 80109b4:	e006      	b.n	80109c4 <tcp_input+0x73c>
          goto aborted;
 80109b6:	bf00      	nop
 80109b8:	e004      	b.n	80109c4 <tcp_input+0x73c>
            goto aborted;
 80109ba:	bf00      	nop
 80109bc:	e002      	b.n	80109c4 <tcp_input+0x73c>
              goto aborted;
 80109be:	bf00      	nop
 80109c0:	e000      	b.n	80109c4 <tcp_input+0x73c>
          goto aborted;
 80109c2:	bf00      	nop
    tcp_input_pcb = NULL;
 80109c4:	4b26      	ldr	r3, [pc, #152]	; (8010a60 <tcp_input+0x7d8>)
 80109c6:	2200      	movs	r2, #0
 80109c8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80109ca:	4b29      	ldr	r3, [pc, #164]	; (8010a70 <tcp_input+0x7e8>)
 80109cc:	2200      	movs	r2, #0
 80109ce:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80109d0:	4b2b      	ldr	r3, [pc, #172]	; (8010a80 <tcp_input+0x7f8>)
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d03f      	beq.n	8010a58 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80109d8:	4b29      	ldr	r3, [pc, #164]	; (8010a80 <tcp_input+0x7f8>)
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fd fe0f 	bl	800e600 <pbuf_free>
      inseg.p = NULL;
 80109e2:	4b27      	ldr	r3, [pc, #156]	; (8010a80 <tcp_input+0x7f8>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80109e8:	e036      	b.n	8010a58 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80109ea:	4b26      	ldr	r3, [pc, #152]	; (8010a84 <tcp_input+0x7fc>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	899b      	ldrh	r3, [r3, #12]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fc fa4c 	bl	800ce90 <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	f003 0304 	and.w	r3, r3, #4
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d118      	bne.n	8010a36 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a04:	4b20      	ldr	r3, [pc, #128]	; (8010a88 <tcp_input+0x800>)
 8010a06:	6819      	ldr	r1, [r3, #0]
 8010a08:	4b20      	ldr	r3, [pc, #128]	; (8010a8c <tcp_input+0x804>)
 8010a0a:	881b      	ldrh	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	4b20      	ldr	r3, [pc, #128]	; (8010a90 <tcp_input+0x808>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a14:	4b1b      	ldr	r3, [pc, #108]	; (8010a84 <tcp_input+0x7fc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a18:	885b      	ldrh	r3, [r3, #2]
 8010a1a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a1c:	4a19      	ldr	r2, [pc, #100]	; (8010a84 <tcp_input+0x7fc>)
 8010a1e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a20:	8812      	ldrh	r2, [r2, #0]
 8010a22:	b292      	uxth	r2, r2
 8010a24:	9202      	str	r2, [sp, #8]
 8010a26:	9301      	str	r3, [sp, #4]
 8010a28:	4b1a      	ldr	r3, [pc, #104]	; (8010a94 <tcp_input+0x80c>)
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	4b1a      	ldr	r3, [pc, #104]	; (8010a98 <tcp_input+0x810>)
 8010a2e:	4602      	mov	r2, r0
 8010a30:	2000      	movs	r0, #0
 8010a32:	f003 f825 	bl	8013a80 <tcp_rst>
    pbuf_free(p);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7fd fde2 	bl	800e600 <pbuf_free>
  return;
 8010a3c:	e00c      	b.n	8010a58 <tcp_input+0x7d0>
    goto dropped;
 8010a3e:	bf00      	nop
 8010a40:	e006      	b.n	8010a50 <tcp_input+0x7c8>
    goto dropped;
 8010a42:	bf00      	nop
 8010a44:	e004      	b.n	8010a50 <tcp_input+0x7c8>
    goto dropped;
 8010a46:	bf00      	nop
 8010a48:	e002      	b.n	8010a50 <tcp_input+0x7c8>
      goto dropped;
 8010a4a:	bf00      	nop
 8010a4c:	e000      	b.n	8010a50 <tcp_input+0x7c8>
      goto dropped;
 8010a4e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7fd fdd5 	bl	800e600 <pbuf_free>
 8010a56:	e000      	b.n	8010a5a <tcp_input+0x7d2>
  return;
 8010a58:	bf00      	nop
}
 8010a5a:	3724      	adds	r7, #36	; 0x24
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd90      	pop	{r4, r7, pc}
 8010a60:	2000d090 	.word	0x2000d090
 8010a64:	20004b49 	.word	0x20004b49
 8010a68:	2000d07c 	.word	0x2000d07c
 8010a6c:	20004b44 	.word	0x20004b44
 8010a70:	20004b4c 	.word	0x20004b4c
 8010a74:	0801b8f0 	.word	0x0801b8f0
 8010a78:	0801baa4 	.word	0x0801baa4
 8010a7c:	0801b93c 	.word	0x0801b93c
 8010a80:	20004b1c 	.word	0x20004b1c
 8010a84:	20004b2c 	.word	0x20004b2c
 8010a88:	20004b40 	.word	0x20004b40
 8010a8c:	20004b46 	.word	0x20004b46
 8010a90:	20004b3c 	.word	0x20004b3c
 8010a94:	20009958 	.word	0x20009958
 8010a98:	2000995c 	.word	0x2000995c

08010a9c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d106      	bne.n	8010ab8 <tcp_input_delayed_close+0x1c>
 8010aaa:	4b17      	ldr	r3, [pc, #92]	; (8010b08 <tcp_input_delayed_close+0x6c>)
 8010aac:	f240 225a 	movw	r2, #602	; 0x25a
 8010ab0:	4916      	ldr	r1, [pc, #88]	; (8010b0c <tcp_input_delayed_close+0x70>)
 8010ab2:	4817      	ldr	r0, [pc, #92]	; (8010b10 <tcp_input_delayed_close+0x74>)
 8010ab4:	f008 fbf8 	bl	80192a8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010ab8:	4b16      	ldr	r3, [pc, #88]	; (8010b14 <tcp_input_delayed_close+0x78>)
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	f003 0310 	and.w	r3, r3, #16
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d01c      	beq.n	8010afe <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8b5b      	ldrh	r3, [r3, #26]
 8010ac8:	f003 0310 	and.w	r3, r3, #16
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d10d      	bne.n	8010aec <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d008      	beq.n	8010aec <tcp_input_delayed_close+0x50>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	6912      	ldr	r2, [r2, #16]
 8010ae4:	f06f 010e 	mvn.w	r1, #14
 8010ae8:	4610      	mov	r0, r2
 8010aea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010aec:	6879      	ldr	r1, [r7, #4]
 8010aee:	480a      	ldr	r0, [pc, #40]	; (8010b18 <tcp_input_delayed_close+0x7c>)
 8010af0:	f7ff fa52 	bl	800ff98 <tcp_pcb_remove>
    tcp_free(pcb);
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7fe f83f 	bl	800eb78 <tcp_free>
    return 1;
 8010afa:	2301      	movs	r3, #1
 8010afc:	e000      	b.n	8010b00 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	0801b8f0 	.word	0x0801b8f0
 8010b0c:	0801bac0 	.word	0x0801bac0
 8010b10:	0801b93c 	.word	0x0801b93c
 8010b14:	20004b49 	.word	0x20004b49
 8010b18:	2000d07c 	.word	0x2000d07c

08010b1c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010b1c:	b590      	push	{r4, r7, lr}
 8010b1e:	b08b      	sub	sp, #44	; 0x2c
 8010b20:	af04      	add	r7, sp, #16
 8010b22:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010b24:	4b6f      	ldr	r3, [pc, #444]	; (8010ce4 <tcp_listen_input+0x1c8>)
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	f003 0304 	and.w	r3, r3, #4
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f040 80d2 	bne.w	8010cd6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d106      	bne.n	8010b46 <tcp_listen_input+0x2a>
 8010b38:	4b6b      	ldr	r3, [pc, #428]	; (8010ce8 <tcp_listen_input+0x1cc>)
 8010b3a:	f240 2281 	movw	r2, #641	; 0x281
 8010b3e:	496b      	ldr	r1, [pc, #428]	; (8010cec <tcp_listen_input+0x1d0>)
 8010b40:	486b      	ldr	r0, [pc, #428]	; (8010cf0 <tcp_listen_input+0x1d4>)
 8010b42:	f008 fbb1 	bl	80192a8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010b46:	4b67      	ldr	r3, [pc, #412]	; (8010ce4 <tcp_listen_input+0x1c8>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	f003 0310 	and.w	r3, r3, #16
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d019      	beq.n	8010b86 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b52:	4b68      	ldr	r3, [pc, #416]	; (8010cf4 <tcp_listen_input+0x1d8>)
 8010b54:	6819      	ldr	r1, [r3, #0]
 8010b56:	4b68      	ldr	r3, [pc, #416]	; (8010cf8 <tcp_listen_input+0x1dc>)
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	4b67      	ldr	r3, [pc, #412]	; (8010cfc <tcp_listen_input+0x1e0>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b62:	4b67      	ldr	r3, [pc, #412]	; (8010d00 <tcp_listen_input+0x1e4>)
 8010b64:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b66:	885b      	ldrh	r3, [r3, #2]
 8010b68:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b6a:	4a65      	ldr	r2, [pc, #404]	; (8010d00 <tcp_listen_input+0x1e4>)
 8010b6c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b6e:	8812      	ldrh	r2, [r2, #0]
 8010b70:	b292      	uxth	r2, r2
 8010b72:	9202      	str	r2, [sp, #8]
 8010b74:	9301      	str	r3, [sp, #4]
 8010b76:	4b63      	ldr	r3, [pc, #396]	; (8010d04 <tcp_listen_input+0x1e8>)
 8010b78:	9300      	str	r3, [sp, #0]
 8010b7a:	4b63      	ldr	r3, [pc, #396]	; (8010d08 <tcp_listen_input+0x1ec>)
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f002 ff7e 	bl	8013a80 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010b84:	e0a9      	b.n	8010cda <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010b86:	4b57      	ldr	r3, [pc, #348]	; (8010ce4 <tcp_listen_input+0x1c8>)
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	f003 0302 	and.w	r3, r3, #2
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 80a3 	beq.w	8010cda <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	7d5b      	ldrb	r3, [r3, #21]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff f929 	bl	800fdf0 <tcp_alloc>
 8010b9e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d111      	bne.n	8010bca <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d00a      	beq.n	8010bc4 <tcp_listen_input+0xa8>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	699b      	ldr	r3, [r3, #24]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	6910      	ldr	r0, [r2, #16]
 8010bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bba:	2100      	movs	r1, #0
 8010bbc:	4798      	blx	r3
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73bb      	strb	r3, [r7, #14]
      return;
 8010bc2:	e08b      	b.n	8010cdc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010bc4:	23f0      	movs	r3, #240	; 0xf0
 8010bc6:	73bb      	strb	r3, [r7, #14]
      return;
 8010bc8:	e088      	b.n	8010cdc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010bca:	4b50      	ldr	r3, [pc, #320]	; (8010d0c <tcp_listen_input+0x1f0>)
 8010bcc:	695a      	ldr	r2, [r3, #20]
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010bd2:	4b4e      	ldr	r3, [pc, #312]	; (8010d0c <tcp_listen_input+0x1f0>)
 8010bd4:	691a      	ldr	r2, [r3, #16]
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	8ada      	ldrh	r2, [r3, #22]
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010be2:	4b47      	ldr	r3, [pc, #284]	; (8010d00 <tcp_listen_input+0x1e4>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	881b      	ldrh	r3, [r3, #0]
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	2203      	movs	r2, #3
 8010bf2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010bf4:	4b41      	ldr	r3, [pc, #260]	; (8010cfc <tcp_listen_input+0x1e0>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	1c5a      	adds	r2, r3, #1
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010c06:	6978      	ldr	r0, [r7, #20]
 8010c08:	f7ff fa5a 	bl	80100c0 <tcp_next_iss>
 8010c0c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	693a      	ldr	r2, [r7, #16]
 8010c12:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010c20:	697b      	ldr	r3, [r7, #20]
 8010c22:	693a      	ldr	r2, [r7, #16]
 8010c24:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010c26:	4b35      	ldr	r3, [pc, #212]	; (8010cfc <tcp_listen_input+0x1e0>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	1e5a      	subs	r2, r3, #1
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	691a      	ldr	r2, [r3, #16]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	7a5b      	ldrb	r3, [r3, #9]
 8010c42:	f003 030c 	and.w	r3, r3, #12
 8010c46:	b2da      	uxtb	r2, r3
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	7a1a      	ldrb	r2, [r3, #8]
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010c54:	4b2e      	ldr	r3, [pc, #184]	; (8010d10 <tcp_listen_input+0x1f4>)
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	60da      	str	r2, [r3, #12]
 8010c5c:	4a2c      	ldr	r2, [pc, #176]	; (8010d10 <tcp_listen_input+0x1f4>)
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	6013      	str	r3, [r2, #0]
 8010c62:	f003 f8cf 	bl	8013e04 <tcp_timer_needed>
 8010c66:	4b2b      	ldr	r3, [pc, #172]	; (8010d14 <tcp_listen_input+0x1f8>)
 8010c68:	2201      	movs	r2, #1
 8010c6a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010c6c:	6978      	ldr	r0, [r7, #20]
 8010c6e:	f001 fd8d 	bl	801278c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010c72:	4b23      	ldr	r3, [pc, #140]	; (8010d00 <tcp_listen_input+0x1e4>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	89db      	ldrh	r3, [r3, #14]
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	3304      	adds	r3, #4
 8010c94:	4618      	mov	r0, r3
 8010c96:	f006 fe5b 	bl	8017950 <ip4_route>
 8010c9a:	4601      	mov	r1, r0
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	3304      	adds	r3, #4
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f7ff fa32 	bl	801010c <tcp_eff_send_mss_netif>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461a      	mov	r2, r3
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010cb0:	2112      	movs	r1, #18
 8010cb2:	6978      	ldr	r0, [r7, #20]
 8010cb4:	f002 f842 	bl	8012d3c <tcp_enqueue_flags>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d004      	beq.n	8010cce <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	6978      	ldr	r0, [r7, #20]
 8010cc8:	f7fe f980 	bl	800efcc <tcp_abandon>
      return;
 8010ccc:	e006      	b.n	8010cdc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010cce:	6978      	ldr	r0, [r7, #20]
 8010cd0:	f002 f922 	bl	8012f18 <tcp_output>
  return;
 8010cd4:	e001      	b.n	8010cda <tcp_listen_input+0x1be>
    return;
 8010cd6:	bf00      	nop
 8010cd8:	e000      	b.n	8010cdc <tcp_listen_input+0x1c0>
  return;
 8010cda:	bf00      	nop
}
 8010cdc:	371c      	adds	r7, #28
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd90      	pop	{r4, r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20004b48 	.word	0x20004b48
 8010ce8:	0801b8f0 	.word	0x0801b8f0
 8010cec:	0801bae8 	.word	0x0801bae8
 8010cf0:	0801b93c 	.word	0x0801b93c
 8010cf4:	20004b40 	.word	0x20004b40
 8010cf8:	20004b46 	.word	0x20004b46
 8010cfc:	20004b3c 	.word	0x20004b3c
 8010d00:	20004b2c 	.word	0x20004b2c
 8010d04:	20009958 	.word	0x20009958
 8010d08:	2000995c 	.word	0x2000995c
 8010d0c:	20009948 	.word	0x20009948
 8010d10:	2000d07c 	.word	0x2000d07c
 8010d14:	2000d078 	.word	0x2000d078

08010d18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b086      	sub	sp, #24
 8010d1c:	af04      	add	r7, sp, #16
 8010d1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010d20:	4b2f      	ldr	r3, [pc, #188]	; (8010de0 <tcp_timewait_input+0xc8>)
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	f003 0304 	and.w	r3, r3, #4
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d153      	bne.n	8010dd4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d106      	bne.n	8010d40 <tcp_timewait_input+0x28>
 8010d32:	4b2c      	ldr	r3, [pc, #176]	; (8010de4 <tcp_timewait_input+0xcc>)
 8010d34:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010d38:	492b      	ldr	r1, [pc, #172]	; (8010de8 <tcp_timewait_input+0xd0>)
 8010d3a:	482c      	ldr	r0, [pc, #176]	; (8010dec <tcp_timewait_input+0xd4>)
 8010d3c:	f008 fab4 	bl	80192a8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010d40:	4b27      	ldr	r3, [pc, #156]	; (8010de0 <tcp_timewait_input+0xc8>)
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	f003 0302 	and.w	r3, r3, #2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d02a      	beq.n	8010da2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010d4c:	4b28      	ldr	r3, [pc, #160]	; (8010df0 <tcp_timewait_input+0xd8>)
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	db2d      	blt.n	8010db6 <tcp_timewait_input+0x9e>
 8010d5a:	4b25      	ldr	r3, [pc, #148]	; (8010df0 <tcp_timewait_input+0xd8>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d62:	6879      	ldr	r1, [r7, #4]
 8010d64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d66:	440b      	add	r3, r1
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	dc23      	bgt.n	8010db6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d6e:	4b21      	ldr	r3, [pc, #132]	; (8010df4 <tcp_timewait_input+0xdc>)
 8010d70:	6819      	ldr	r1, [r3, #0]
 8010d72:	4b21      	ldr	r3, [pc, #132]	; (8010df8 <tcp_timewait_input+0xe0>)
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	461a      	mov	r2, r3
 8010d78:	4b1d      	ldr	r3, [pc, #116]	; (8010df0 <tcp_timewait_input+0xd8>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d7e:	4b1f      	ldr	r3, [pc, #124]	; (8010dfc <tcp_timewait_input+0xe4>)
 8010d80:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d82:	885b      	ldrh	r3, [r3, #2]
 8010d84:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d86:	4a1d      	ldr	r2, [pc, #116]	; (8010dfc <tcp_timewait_input+0xe4>)
 8010d88:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d8a:	8812      	ldrh	r2, [r2, #0]
 8010d8c:	b292      	uxth	r2, r2
 8010d8e:	9202      	str	r2, [sp, #8]
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	4b1b      	ldr	r3, [pc, #108]	; (8010e00 <tcp_timewait_input+0xe8>)
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	4b1b      	ldr	r3, [pc, #108]	; (8010e04 <tcp_timewait_input+0xec>)
 8010d98:	4602      	mov	r2, r0
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f002 fe70 	bl	8013a80 <tcp_rst>
      return;
 8010da0:	e01b      	b.n	8010dda <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010da2:	4b0f      	ldr	r3, [pc, #60]	; (8010de0 <tcp_timewait_input+0xc8>)
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f003 0301 	and.w	r3, r3, #1
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d003      	beq.n	8010db6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010dae:	4b16      	ldr	r3, [pc, #88]	; (8010e08 <tcp_timewait_input+0xf0>)
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010db6:	4b10      	ldr	r3, [pc, #64]	; (8010df8 <tcp_timewait_input+0xe0>)
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d00c      	beq.n	8010dd8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f043 0302 	orr.w	r3, r3, #2
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f002 f8a3 	bl	8012f18 <tcp_output>
  }
  return;
 8010dd2:	e001      	b.n	8010dd8 <tcp_timewait_input+0xc0>
    return;
 8010dd4:	bf00      	nop
 8010dd6:	e000      	b.n	8010dda <tcp_timewait_input+0xc2>
  return;
 8010dd8:	bf00      	nop
}
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}
 8010de0:	20004b48 	.word	0x20004b48
 8010de4:	0801b8f0 	.word	0x0801b8f0
 8010de8:	0801bb08 	.word	0x0801bb08
 8010dec:	0801b93c 	.word	0x0801b93c
 8010df0:	20004b3c 	.word	0x20004b3c
 8010df4:	20004b40 	.word	0x20004b40
 8010df8:	20004b46 	.word	0x20004b46
 8010dfc:	20004b2c 	.word	0x20004b2c
 8010e00:	20009958 	.word	0x20009958
 8010e04:	2000995c 	.word	0x2000995c
 8010e08:	2000d080 	.word	0x2000d080

08010e0c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010e0c:	b590      	push	{r4, r7, lr}
 8010e0e:	b08d      	sub	sp, #52	; 0x34
 8010e10:	af04      	add	r7, sp, #16
 8010e12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010e14:	2300      	movs	r3, #0
 8010e16:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <tcp_process+0x24>
 8010e22:	4ba5      	ldr	r3, [pc, #660]	; (80110b8 <tcp_process+0x2ac>)
 8010e24:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010e28:	49a4      	ldr	r1, [pc, #656]	; (80110bc <tcp_process+0x2b0>)
 8010e2a:	48a5      	ldr	r0, [pc, #660]	; (80110c0 <tcp_process+0x2b4>)
 8010e2c:	f008 fa3c 	bl	80192a8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010e30:	4ba4      	ldr	r3, [pc, #656]	; (80110c4 <tcp_process+0x2b8>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	f003 0304 	and.w	r3, r3, #4
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d04e      	beq.n	8010eda <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	2b02      	cmp	r3, #2
 8010e42:	d108      	bne.n	8010e56 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e48:	4b9f      	ldr	r3, [pc, #636]	; (80110c8 <tcp_process+0x2bc>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	d123      	bne.n	8010e98 <tcp_process+0x8c>
        acceptable = 1;
 8010e50:	2301      	movs	r3, #1
 8010e52:	76fb      	strb	r3, [r7, #27]
 8010e54:	e020      	b.n	8010e98 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e5a:	4b9c      	ldr	r3, [pc, #624]	; (80110cc <tcp_process+0x2c0>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d102      	bne.n	8010e68 <tcp_process+0x5c>
        acceptable = 1;
 8010e62:	2301      	movs	r3, #1
 8010e64:	76fb      	strb	r3, [r7, #27]
 8010e66:	e017      	b.n	8010e98 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e68:	4b98      	ldr	r3, [pc, #608]	; (80110cc <tcp_process+0x2c0>)
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	db10      	blt.n	8010e98 <tcp_process+0x8c>
 8010e76:	4b95      	ldr	r3, [pc, #596]	; (80110cc <tcp_process+0x2c0>)
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e7e:	6879      	ldr	r1, [r7, #4]
 8010e80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010e82:	440b      	add	r3, r1
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	dc06      	bgt.n	8010e98 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	8b5b      	ldrh	r3, [r3, #26]
 8010e8e:	f043 0302 	orr.w	r3, r3, #2
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010e98:	7efb      	ldrb	r3, [r7, #27]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d01b      	beq.n	8010ed6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	7d1b      	ldrb	r3, [r3, #20]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <tcp_process+0xa8>
 8010ea6:	4b84      	ldr	r3, [pc, #528]	; (80110b8 <tcp_process+0x2ac>)
 8010ea8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010eac:	4988      	ldr	r1, [pc, #544]	; (80110d0 <tcp_process+0x2c4>)
 8010eae:	4884      	ldr	r0, [pc, #528]	; (80110c0 <tcp_process+0x2b4>)
 8010eb0:	f008 f9fa 	bl	80192a8 <iprintf>
      recv_flags |= TF_RESET;
 8010eb4:	4b87      	ldr	r3, [pc, #540]	; (80110d4 <tcp_process+0x2c8>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	f043 0308 	orr.w	r3, r3, #8
 8010ebc:	b2da      	uxtb	r2, r3
 8010ebe:	4b85      	ldr	r3, [pc, #532]	; (80110d4 <tcp_process+0x2c8>)
 8010ec0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8b5b      	ldrh	r3, [r3, #26]
 8010ec6:	f023 0301 	bic.w	r3, r3, #1
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010ed0:	f06f 030d 	mvn.w	r3, #13
 8010ed4:	e37a      	b.n	80115cc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	e378      	b.n	80115cc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010eda:	4b7a      	ldr	r3, [pc, #488]	; (80110c4 <tcp_process+0x2b8>)
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	f003 0302 	and.w	r3, r3, #2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d010      	beq.n	8010f08 <tcp_process+0xfc>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	7d1b      	ldrb	r3, [r3, #20]
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d00c      	beq.n	8010f08 <tcp_process+0xfc>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7d1b      	ldrb	r3, [r3, #20]
 8010ef2:	2b03      	cmp	r3, #3
 8010ef4:	d008      	beq.n	8010f08 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	8b5b      	ldrh	r3, [r3, #26]
 8010efa:	f043 0302 	orr.w	r3, r3, #2
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010f04:	2300      	movs	r3, #0
 8010f06:	e361      	b.n	80115cc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	8b5b      	ldrh	r3, [r3, #26]
 8010f0c:	f003 0310 	and.w	r3, r3, #16
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d103      	bne.n	8010f1c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010f14:	4b70      	ldr	r3, [pc, #448]	; (80110d8 <tcp_process+0x2cc>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f001 fc2d 	bl	801278c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	7d1b      	ldrb	r3, [r3, #20]
 8010f36:	3b02      	subs	r3, #2
 8010f38:	2b07      	cmp	r3, #7
 8010f3a:	f200 8337 	bhi.w	80115ac <tcp_process+0x7a0>
 8010f3e:	a201      	add	r2, pc, #4	; (adr r2, 8010f44 <tcp_process+0x138>)
 8010f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f44:	08010f65 	.word	0x08010f65
 8010f48:	08011195 	.word	0x08011195
 8010f4c:	0801130d 	.word	0x0801130d
 8010f50:	08011337 	.word	0x08011337
 8010f54:	0801145b 	.word	0x0801145b
 8010f58:	0801130d 	.word	0x0801130d
 8010f5c:	080114e7 	.word	0x080114e7
 8010f60:	08011577 	.word	0x08011577
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010f64:	4b57      	ldr	r3, [pc, #348]	; (80110c4 <tcp_process+0x2b8>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	f003 0310 	and.w	r3, r3, #16
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 80e4 	beq.w	801113a <tcp_process+0x32e>
 8010f72:	4b54      	ldr	r3, [pc, #336]	; (80110c4 <tcp_process+0x2b8>)
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	f003 0302 	and.w	r3, r3, #2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	f000 80dd 	beq.w	801113a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f84:	1c5a      	adds	r2, r3, #1
 8010f86:	4b50      	ldr	r3, [pc, #320]	; (80110c8 <tcp_process+0x2bc>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	f040 80d5 	bne.w	801113a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010f90:	4b4e      	ldr	r3, [pc, #312]	; (80110cc <tcp_process+0x2c0>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	1c5a      	adds	r2, r3, #1
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010fa2:	4b49      	ldr	r3, [pc, #292]	; (80110c8 <tcp_process+0x2bc>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010faa:	4b4c      	ldr	r3, [pc, #304]	; (80110dc <tcp_process+0x2d0>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	89db      	ldrh	r3, [r3, #14]
 8010fb0:	b29a      	uxth	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010fc4:	4b41      	ldr	r3, [pc, #260]	; (80110cc <tcp_process+0x2c0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	1e5a      	subs	r2, r3, #1
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2204      	movs	r2, #4
 8010fd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	3304      	adds	r3, #4
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f006 fcb7 	bl	8017950 <ip4_route>
 8010fe2:	4601      	mov	r1, r0
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3304      	adds	r3, #4
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4620      	mov	r0, r4
 8010fec:	f7ff f88e 	bl	801010c <tcp_eff_send_mss_netif>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	461a      	mov	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ffc:	009a      	lsls	r2, r3, #2
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	f241 111c 	movw	r1, #4380	; 0x111c
 8011008:	428b      	cmp	r3, r1
 801100a:	bf38      	it	cc
 801100c:	460b      	movcc	r3, r1
 801100e:	429a      	cmp	r2, r3
 8011010:	d204      	bcs.n	801101c <tcp_process+0x210>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	b29b      	uxth	r3, r3
 801101a:	e00d      	b.n	8011038 <tcp_process+0x22c>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011020:	005b      	lsls	r3, r3, #1
 8011022:	f241 121c 	movw	r2, #4380	; 0x111c
 8011026:	4293      	cmp	r3, r2
 8011028:	d904      	bls.n	8011034 <tcp_process+0x228>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801102e:	005b      	lsls	r3, r3, #1
 8011030:	b29b      	uxth	r3, r3
 8011032:	e001      	b.n	8011038 <tcp_process+0x22c>
 8011034:	f241 131c 	movw	r3, #4380	; 0x111c
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011044:	2b00      	cmp	r3, #0
 8011046:	d106      	bne.n	8011056 <tcp_process+0x24a>
 8011048:	4b1b      	ldr	r3, [pc, #108]	; (80110b8 <tcp_process+0x2ac>)
 801104a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801104e:	4924      	ldr	r1, [pc, #144]	; (80110e0 <tcp_process+0x2d4>)
 8011050:	481b      	ldr	r0, [pc, #108]	; (80110c0 <tcp_process+0x2b4>)
 8011052:	f008 f929 	bl	80192a8 <iprintf>
        --pcb->snd_queuelen;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801105c:	3b01      	subs	r3, #1
 801105e:	b29a      	uxth	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801106a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801106c:	69fb      	ldr	r3, [r7, #28]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d111      	bne.n	8011096 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011076:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d106      	bne.n	801108c <tcp_process+0x280>
 801107e:	4b0e      	ldr	r3, [pc, #56]	; (80110b8 <tcp_process+0x2ac>)
 8011080:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011084:	4917      	ldr	r1, [pc, #92]	; (80110e4 <tcp_process+0x2d8>)
 8011086:	480e      	ldr	r0, [pc, #56]	; (80110c0 <tcp_process+0x2b4>)
 8011088:	f008 f90e 	bl	80192a8 <iprintf>
          pcb->unsent = rseg->next;
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	66da      	str	r2, [r3, #108]	; 0x6c
 8011094:	e003      	b.n	801109e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801109e:	69f8      	ldr	r0, [r7, #28]
 80110a0:	f7fe fd3d 	bl	800fb1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d11d      	bne.n	80110e8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110b2:	861a      	strh	r2, [r3, #48]	; 0x30
 80110b4:	e01f      	b.n	80110f6 <tcp_process+0x2ea>
 80110b6:	bf00      	nop
 80110b8:	0801b8f0 	.word	0x0801b8f0
 80110bc:	0801bb28 	.word	0x0801bb28
 80110c0:	0801b93c 	.word	0x0801b93c
 80110c4:	20004b48 	.word	0x20004b48
 80110c8:	20004b40 	.word	0x20004b40
 80110cc:	20004b3c 	.word	0x20004b3c
 80110d0:	0801bb44 	.word	0x0801bb44
 80110d4:	20004b49 	.word	0x20004b49
 80110d8:	2000d080 	.word	0x2000d080
 80110dc:	20004b2c 	.word	0x20004b2c
 80110e0:	0801bb64 	.word	0x0801bb64
 80110e4:	0801bb7c 	.word	0x0801bb7c
        } else {
          pcb->rtime = 0;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2200      	movs	r2, #0
 80110ec:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00a      	beq.n	8011116 <tcp_process+0x30a>
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011106:	687a      	ldr	r2, [r7, #4]
 8011108:	6910      	ldr	r0, [r2, #16]
 801110a:	2200      	movs	r2, #0
 801110c:	6879      	ldr	r1, [r7, #4]
 801110e:	4798      	blx	r3
 8011110:	4603      	mov	r3, r0
 8011112:	76bb      	strb	r3, [r7, #26]
 8011114:	e001      	b.n	801111a <tcp_process+0x30e>
 8011116:	2300      	movs	r3, #0
 8011118:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801111a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801111e:	f113 0f0d 	cmn.w	r3, #13
 8011122:	d102      	bne.n	801112a <tcp_process+0x31e>
          return ERR_ABRT;
 8011124:	f06f 030c 	mvn.w	r3, #12
 8011128:	e250      	b.n	80115cc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8b5b      	ldrh	r3, [r3, #26]
 801112e:	f043 0302 	orr.w	r3, r3, #2
 8011132:	b29a      	uxth	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011138:	e23a      	b.n	80115b0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801113a:	4b9d      	ldr	r3, [pc, #628]	; (80113b0 <tcp_process+0x5a4>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	f003 0310 	and.w	r3, r3, #16
 8011142:	2b00      	cmp	r3, #0
 8011144:	f000 8234 	beq.w	80115b0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011148:	4b9a      	ldr	r3, [pc, #616]	; (80113b4 <tcp_process+0x5a8>)
 801114a:	6819      	ldr	r1, [r3, #0]
 801114c:	4b9a      	ldr	r3, [pc, #616]	; (80113b8 <tcp_process+0x5ac>)
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	461a      	mov	r2, r3
 8011152:	4b9a      	ldr	r3, [pc, #616]	; (80113bc <tcp_process+0x5b0>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011158:	4b99      	ldr	r3, [pc, #612]	; (80113c0 <tcp_process+0x5b4>)
 801115a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801115c:	885b      	ldrh	r3, [r3, #2]
 801115e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011160:	4a97      	ldr	r2, [pc, #604]	; (80113c0 <tcp_process+0x5b4>)
 8011162:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011164:	8812      	ldrh	r2, [r2, #0]
 8011166:	b292      	uxth	r2, r2
 8011168:	9202      	str	r2, [sp, #8]
 801116a:	9301      	str	r3, [sp, #4]
 801116c:	4b95      	ldr	r3, [pc, #596]	; (80113c4 <tcp_process+0x5b8>)
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	4b95      	ldr	r3, [pc, #596]	; (80113c8 <tcp_process+0x5bc>)
 8011172:	4602      	mov	r2, r0
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f002 fc83 	bl	8013a80 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011180:	2b05      	cmp	r3, #5
 8011182:	f200 8215 	bhi.w	80115b0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2200      	movs	r2, #0
 801118a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f002 fa4d 	bl	801362c <tcp_rexmit_rto>
      break;
 8011192:	e20d      	b.n	80115b0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011194:	4b86      	ldr	r3, [pc, #536]	; (80113b0 <tcp_process+0x5a4>)
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 0310 	and.w	r3, r3, #16
 801119c:	2b00      	cmp	r3, #0
 801119e:	f000 80a1 	beq.w	80112e4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111a2:	4b84      	ldr	r3, [pc, #528]	; (80113b4 <tcp_process+0x5a8>)
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	3b01      	subs	r3, #1
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	db7e      	blt.n	80112b0 <tcp_process+0x4a4>
 80111b2:	4b80      	ldr	r3, [pc, #512]	; (80113b4 <tcp_process+0x5a8>)
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	2b00      	cmp	r3, #0
 80111be:	dc77      	bgt.n	80112b0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2204      	movs	r2, #4
 80111c4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d102      	bne.n	80111d4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80111ce:	23fa      	movs	r3, #250	; 0xfa
 80111d0:	76bb      	strb	r3, [r7, #26]
 80111d2:	e01d      	b.n	8011210 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111d8:	699b      	ldr	r3, [r3, #24]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d106      	bne.n	80111ec <tcp_process+0x3e0>
 80111de:	4b7b      	ldr	r3, [pc, #492]	; (80113cc <tcp_process+0x5c0>)
 80111e0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80111e4:	497a      	ldr	r1, [pc, #488]	; (80113d0 <tcp_process+0x5c4>)
 80111e6:	487b      	ldr	r0, [pc, #492]	; (80113d4 <tcp_process+0x5c8>)
 80111e8:	f008 f85e 	bl	80192a8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d00a      	beq.n	801120c <tcp_process+0x400>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80111fa:	699b      	ldr	r3, [r3, #24]
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	6910      	ldr	r0, [r2, #16]
 8011200:	2200      	movs	r2, #0
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	4798      	blx	r3
 8011206:	4603      	mov	r3, r0
 8011208:	76bb      	strb	r3, [r7, #26]
 801120a:	e001      	b.n	8011210 <tcp_process+0x404>
 801120c:	23f0      	movs	r3, #240	; 0xf0
 801120e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011210:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d00a      	beq.n	801122e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011218:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801121c:	f113 0f0d 	cmn.w	r3, #13
 8011220:	d002      	beq.n	8011228 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7fd ff90 	bl	800f148 <tcp_abort>
            }
            return ERR_ABRT;
 8011228:	f06f 030c 	mvn.w	r3, #12
 801122c:	e1ce      	b.n	80115cc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 fae0 	bl	80117f4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011234:	4b68      	ldr	r3, [pc, #416]	; (80113d8 <tcp_process+0x5cc>)
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d005      	beq.n	8011248 <tcp_process+0x43c>
            recv_acked--;
 801123c:	4b66      	ldr	r3, [pc, #408]	; (80113d8 <tcp_process+0x5cc>)
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	3b01      	subs	r3, #1
 8011242:	b29a      	uxth	r2, r3
 8011244:	4b64      	ldr	r3, [pc, #400]	; (80113d8 <tcp_process+0x5cc>)
 8011246:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801124c:	009a      	lsls	r2, r3, #2
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011252:	005b      	lsls	r3, r3, #1
 8011254:	f241 111c 	movw	r1, #4380	; 0x111c
 8011258:	428b      	cmp	r3, r1
 801125a:	bf38      	it	cc
 801125c:	460b      	movcc	r3, r1
 801125e:	429a      	cmp	r2, r3
 8011260:	d204      	bcs.n	801126c <tcp_process+0x460>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	b29b      	uxth	r3, r3
 801126a:	e00d      	b.n	8011288 <tcp_process+0x47c>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011270:	005b      	lsls	r3, r3, #1
 8011272:	f241 121c 	movw	r2, #4380	; 0x111c
 8011276:	4293      	cmp	r3, r2
 8011278:	d904      	bls.n	8011284 <tcp_process+0x478>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801127e:	005b      	lsls	r3, r3, #1
 8011280:	b29b      	uxth	r3, r3
 8011282:	e001      	b.n	8011288 <tcp_process+0x47c>
 8011284:	f241 131c 	movw	r3, #4380	; 0x111c
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801128e:	4b53      	ldr	r3, [pc, #332]	; (80113dc <tcp_process+0x5d0>)
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	f003 0320 	and.w	r3, r3, #32
 8011296:	2b00      	cmp	r3, #0
 8011298:	d037      	beq.n	801130a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8b5b      	ldrh	r3, [r3, #26]
 801129e:	f043 0302 	orr.w	r3, r3, #2
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2207      	movs	r2, #7
 80112ac:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80112ae:	e02c      	b.n	801130a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112b0:	4b40      	ldr	r3, [pc, #256]	; (80113b4 <tcp_process+0x5a8>)
 80112b2:	6819      	ldr	r1, [r3, #0]
 80112b4:	4b40      	ldr	r3, [pc, #256]	; (80113b8 <tcp_process+0x5ac>)
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	461a      	mov	r2, r3
 80112ba:	4b40      	ldr	r3, [pc, #256]	; (80113bc <tcp_process+0x5b0>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112c0:	4b3f      	ldr	r3, [pc, #252]	; (80113c0 <tcp_process+0x5b4>)
 80112c2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112c4:	885b      	ldrh	r3, [r3, #2]
 80112c6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112c8:	4a3d      	ldr	r2, [pc, #244]	; (80113c0 <tcp_process+0x5b4>)
 80112ca:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112cc:	8812      	ldrh	r2, [r2, #0]
 80112ce:	b292      	uxth	r2, r2
 80112d0:	9202      	str	r2, [sp, #8]
 80112d2:	9301      	str	r3, [sp, #4]
 80112d4:	4b3b      	ldr	r3, [pc, #236]	; (80113c4 <tcp_process+0x5b8>)
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	4b3b      	ldr	r3, [pc, #236]	; (80113c8 <tcp_process+0x5bc>)
 80112da:	4602      	mov	r2, r0
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f002 fbcf 	bl	8013a80 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80112e2:	e167      	b.n	80115b4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80112e4:	4b32      	ldr	r3, [pc, #200]	; (80113b0 <tcp_process+0x5a4>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f003 0302 	and.w	r3, r3, #2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f000 8161 	beq.w	80115b4 <tcp_process+0x7a8>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f6:	1e5a      	subs	r2, r3, #1
 80112f8:	4b30      	ldr	r3, [pc, #192]	; (80113bc <tcp_process+0x5b0>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	f040 8159 	bne.w	80115b4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f002 f9b4 	bl	8013670 <tcp_rexmit>
      break;
 8011308:	e154      	b.n	80115b4 <tcp_process+0x7a8>
 801130a:	e153      	b.n	80115b4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f000 fa71 	bl	80117f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011312:	4b32      	ldr	r3, [pc, #200]	; (80113dc <tcp_process+0x5d0>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	f003 0320 	and.w	r3, r3, #32
 801131a:	2b00      	cmp	r3, #0
 801131c:	f000 814c 	beq.w	80115b8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	8b5b      	ldrh	r3, [r3, #26]
 8011324:	f043 0302 	orr.w	r3, r3, #2
 8011328:	b29a      	uxth	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2207      	movs	r2, #7
 8011332:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011334:	e140      	b.n	80115b8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011336:	6878      	ldr	r0, [r7, #4]
 8011338:	f000 fa5c 	bl	80117f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801133c:	4b27      	ldr	r3, [pc, #156]	; (80113dc <tcp_process+0x5d0>)
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	f003 0320 	and.w	r3, r3, #32
 8011344:	2b00      	cmp	r3, #0
 8011346:	d071      	beq.n	801142c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011348:	4b19      	ldr	r3, [pc, #100]	; (80113b0 <tcp_process+0x5a4>)
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	f003 0310 	and.w	r3, r3, #16
 8011350:	2b00      	cmp	r3, #0
 8011352:	d060      	beq.n	8011416 <tcp_process+0x60a>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011358:	4b16      	ldr	r3, [pc, #88]	; (80113b4 <tcp_process+0x5a8>)
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	429a      	cmp	r2, r3
 801135e:	d15a      	bne.n	8011416 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011364:	2b00      	cmp	r3, #0
 8011366:	d156      	bne.n	8011416 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	8b5b      	ldrh	r3, [r3, #26]
 801136c:	f043 0302 	orr.w	r3, r3, #2
 8011370:	b29a      	uxth	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f7fe fdbe 	bl	800fef8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801137c:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <tcp_process+0x5d4>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	429a      	cmp	r2, r3
 8011384:	d105      	bne.n	8011392 <tcp_process+0x586>
 8011386:	4b16      	ldr	r3, [pc, #88]	; (80113e0 <tcp_process+0x5d4>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	4a14      	ldr	r2, [pc, #80]	; (80113e0 <tcp_process+0x5d4>)
 801138e:	6013      	str	r3, [r2, #0]
 8011390:	e02e      	b.n	80113f0 <tcp_process+0x5e4>
 8011392:	4b13      	ldr	r3, [pc, #76]	; (80113e0 <tcp_process+0x5d4>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	617b      	str	r3, [r7, #20]
 8011398:	e027      	b.n	80113ea <tcp_process+0x5de>
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d11f      	bne.n	80113e4 <tcp_process+0x5d8>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68da      	ldr	r2, [r3, #12]
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	60da      	str	r2, [r3, #12]
 80113ac:	e020      	b.n	80113f0 <tcp_process+0x5e4>
 80113ae:	bf00      	nop
 80113b0:	20004b48 	.word	0x20004b48
 80113b4:	20004b40 	.word	0x20004b40
 80113b8:	20004b46 	.word	0x20004b46
 80113bc:	20004b3c 	.word	0x20004b3c
 80113c0:	20004b2c 	.word	0x20004b2c
 80113c4:	20009958 	.word	0x20009958
 80113c8:	2000995c 	.word	0x2000995c
 80113cc:	0801b8f0 	.word	0x0801b8f0
 80113d0:	0801bb90 	.word	0x0801bb90
 80113d4:	0801b93c 	.word	0x0801b93c
 80113d8:	20004b44 	.word	0x20004b44
 80113dc:	20004b49 	.word	0x20004b49
 80113e0:	2000d07c 	.word	0x2000d07c
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	617b      	str	r3, [r7, #20]
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d1d4      	bne.n	801139a <tcp_process+0x58e>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	60da      	str	r2, [r3, #12]
 80113f6:	4b77      	ldr	r3, [pc, #476]	; (80115d4 <tcp_process+0x7c8>)
 80113f8:	2201      	movs	r2, #1
 80113fa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	220a      	movs	r2, #10
 8011400:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011402:	4b75      	ldr	r3, [pc, #468]	; (80115d8 <tcp_process+0x7cc>)
 8011404:	681a      	ldr	r2, [r3, #0]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	60da      	str	r2, [r3, #12]
 801140a:	4a73      	ldr	r2, [pc, #460]	; (80115d8 <tcp_process+0x7cc>)
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6013      	str	r3, [r2, #0]
 8011410:	f002 fcf8 	bl	8013e04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011414:	e0d2      	b.n	80115bc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	8b5b      	ldrh	r3, [r3, #26]
 801141a:	f043 0302 	orr.w	r3, r3, #2
 801141e:	b29a      	uxth	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2208      	movs	r2, #8
 8011428:	751a      	strb	r2, [r3, #20]
      break;
 801142a:	e0c7      	b.n	80115bc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801142c:	4b6b      	ldr	r3, [pc, #428]	; (80115dc <tcp_process+0x7d0>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f003 0310 	and.w	r3, r3, #16
 8011434:	2b00      	cmp	r3, #0
 8011436:	f000 80c1 	beq.w	80115bc <tcp_process+0x7b0>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801143e:	4b68      	ldr	r3, [pc, #416]	; (80115e0 <tcp_process+0x7d4>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	429a      	cmp	r2, r3
 8011444:	f040 80ba 	bne.w	80115bc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801144c:	2b00      	cmp	r3, #0
 801144e:	f040 80b5 	bne.w	80115bc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2206      	movs	r2, #6
 8011456:	751a      	strb	r2, [r3, #20]
      break;
 8011458:	e0b0      	b.n	80115bc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 f9ca 	bl	80117f4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011460:	4b60      	ldr	r3, [pc, #384]	; (80115e4 <tcp_process+0x7d8>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 0320 	and.w	r3, r3, #32
 8011468:	2b00      	cmp	r3, #0
 801146a:	f000 80a9 	beq.w	80115c0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	8b5b      	ldrh	r3, [r3, #26]
 8011472:	f043 0302 	orr.w	r3, r3, #2
 8011476:	b29a      	uxth	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fe fd3b 	bl	800fef8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011482:	4b59      	ldr	r3, [pc, #356]	; (80115e8 <tcp_process+0x7dc>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	429a      	cmp	r2, r3
 801148a:	d105      	bne.n	8011498 <tcp_process+0x68c>
 801148c:	4b56      	ldr	r3, [pc, #344]	; (80115e8 <tcp_process+0x7dc>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	4a55      	ldr	r2, [pc, #340]	; (80115e8 <tcp_process+0x7dc>)
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	e013      	b.n	80114c0 <tcp_process+0x6b4>
 8011498:	4b53      	ldr	r3, [pc, #332]	; (80115e8 <tcp_process+0x7dc>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	613b      	str	r3, [r7, #16]
 801149e:	e00c      	b.n	80114ba <tcp_process+0x6ae>
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	687a      	ldr	r2, [r7, #4]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d104      	bne.n	80114b4 <tcp_process+0x6a8>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	68da      	ldr	r2, [r3, #12]
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	60da      	str	r2, [r3, #12]
 80114b2:	e005      	b.n	80114c0 <tcp_process+0x6b4>
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	613b      	str	r3, [r7, #16]
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1ef      	bne.n	80114a0 <tcp_process+0x694>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	60da      	str	r2, [r3, #12]
 80114c6:	4b43      	ldr	r3, [pc, #268]	; (80115d4 <tcp_process+0x7c8>)
 80114c8:	2201      	movs	r2, #1
 80114ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	220a      	movs	r2, #10
 80114d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80114d2:	4b41      	ldr	r3, [pc, #260]	; (80115d8 <tcp_process+0x7cc>)
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	60da      	str	r2, [r3, #12]
 80114da:	4a3f      	ldr	r2, [pc, #252]	; (80115d8 <tcp_process+0x7cc>)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6013      	str	r3, [r2, #0]
 80114e0:	f002 fc90 	bl	8013e04 <tcp_timer_needed>
      }
      break;
 80114e4:	e06c      	b.n	80115c0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 f984 	bl	80117f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80114ec:	4b3b      	ldr	r3, [pc, #236]	; (80115dc <tcp_process+0x7d0>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f003 0310 	and.w	r3, r3, #16
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d065      	beq.n	80115c4 <tcp_process+0x7b8>
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114fc:	4b38      	ldr	r3, [pc, #224]	; (80115e0 <tcp_process+0x7d4>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	429a      	cmp	r2, r3
 8011502:	d15f      	bne.n	80115c4 <tcp_process+0x7b8>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011508:	2b00      	cmp	r3, #0
 801150a:	d15b      	bne.n	80115c4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7fe fcf3 	bl	800fef8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011512:	4b35      	ldr	r3, [pc, #212]	; (80115e8 <tcp_process+0x7dc>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	687a      	ldr	r2, [r7, #4]
 8011518:	429a      	cmp	r2, r3
 801151a:	d105      	bne.n	8011528 <tcp_process+0x71c>
 801151c:	4b32      	ldr	r3, [pc, #200]	; (80115e8 <tcp_process+0x7dc>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	4a31      	ldr	r2, [pc, #196]	; (80115e8 <tcp_process+0x7dc>)
 8011524:	6013      	str	r3, [r2, #0]
 8011526:	e013      	b.n	8011550 <tcp_process+0x744>
 8011528:	4b2f      	ldr	r3, [pc, #188]	; (80115e8 <tcp_process+0x7dc>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	60fb      	str	r3, [r7, #12]
 801152e:	e00c      	b.n	801154a <tcp_process+0x73e>
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	429a      	cmp	r2, r3
 8011538:	d104      	bne.n	8011544 <tcp_process+0x738>
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	68da      	ldr	r2, [r3, #12]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	60da      	str	r2, [r3, #12]
 8011542:	e005      	b.n	8011550 <tcp_process+0x744>
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d1ef      	bne.n	8011530 <tcp_process+0x724>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	60da      	str	r2, [r3, #12]
 8011556:	4b1f      	ldr	r3, [pc, #124]	; (80115d4 <tcp_process+0x7c8>)
 8011558:	2201      	movs	r2, #1
 801155a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	220a      	movs	r2, #10
 8011560:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011562:	4b1d      	ldr	r3, [pc, #116]	; (80115d8 <tcp_process+0x7cc>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	60da      	str	r2, [r3, #12]
 801156a:	4a1b      	ldr	r2, [pc, #108]	; (80115d8 <tcp_process+0x7cc>)
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6013      	str	r3, [r2, #0]
 8011570:	f002 fc48 	bl	8013e04 <tcp_timer_needed>
      }
      break;
 8011574:	e026      	b.n	80115c4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f93c 	bl	80117f4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801157c:	4b17      	ldr	r3, [pc, #92]	; (80115dc <tcp_process+0x7d0>)
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	f003 0310 	and.w	r3, r3, #16
 8011584:	2b00      	cmp	r3, #0
 8011586:	d01f      	beq.n	80115c8 <tcp_process+0x7bc>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801158c:	4b14      	ldr	r3, [pc, #80]	; (80115e0 <tcp_process+0x7d4>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	429a      	cmp	r2, r3
 8011592:	d119      	bne.n	80115c8 <tcp_process+0x7bc>
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011598:	2b00      	cmp	r3, #0
 801159a:	d115      	bne.n	80115c8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801159c:	4b11      	ldr	r3, [pc, #68]	; (80115e4 <tcp_process+0x7d8>)
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	f043 0310 	orr.w	r3, r3, #16
 80115a4:	b2da      	uxtb	r2, r3
 80115a6:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <tcp_process+0x7d8>)
 80115a8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80115aa:	e00d      	b.n	80115c8 <tcp_process+0x7bc>
    default:
      break;
 80115ac:	bf00      	nop
 80115ae:	e00c      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115b0:	bf00      	nop
 80115b2:	e00a      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115b4:	bf00      	nop
 80115b6:	e008      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115b8:	bf00      	nop
 80115ba:	e006      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115bc:	bf00      	nop
 80115be:	e004      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115c0:	bf00      	nop
 80115c2:	e002      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115c4:	bf00      	nop
 80115c6:	e000      	b.n	80115ca <tcp_process+0x7be>
      break;
 80115c8:	bf00      	nop
  }
  return ERR_OK;
 80115ca:	2300      	movs	r3, #0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3724      	adds	r7, #36	; 0x24
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd90      	pop	{r4, r7, pc}
 80115d4:	2000d078 	.word	0x2000d078
 80115d8:	2000d08c 	.word	0x2000d08c
 80115dc:	20004b48 	.word	0x20004b48
 80115e0:	20004b40 	.word	0x20004b40
 80115e4:	20004b49 	.word	0x20004b49
 80115e8:	2000d07c 	.word	0x2000d07c

080115ec <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80115ec:	b590      	push	{r4, r7, lr}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d106      	bne.n	801160a <tcp_oos_insert_segment+0x1e>
 80115fc:	4b3b      	ldr	r3, [pc, #236]	; (80116ec <tcp_oos_insert_segment+0x100>)
 80115fe:	f240 421f 	movw	r2, #1055	; 0x41f
 8011602:	493b      	ldr	r1, [pc, #236]	; (80116f0 <tcp_oos_insert_segment+0x104>)
 8011604:	483b      	ldr	r0, [pc, #236]	; (80116f4 <tcp_oos_insert_segment+0x108>)
 8011606:	f007 fe4f 	bl	80192a8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	68db      	ldr	r3, [r3, #12]
 801160e:	899b      	ldrh	r3, [r3, #12]
 8011610:	b29b      	uxth	r3, r3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fb fc3c 	bl	800ce90 <lwip_htons>
 8011618:	4603      	mov	r3, r0
 801161a:	b2db      	uxtb	r3, r3
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d028      	beq.n	8011676 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011624:	6838      	ldr	r0, [r7, #0]
 8011626:	f7fe fa65 	bl	800faf4 <tcp_segs_free>
    next = NULL;
 801162a:	2300      	movs	r3, #0
 801162c:	603b      	str	r3, [r7, #0]
 801162e:	e056      	b.n	80116de <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	68db      	ldr	r3, [r3, #12]
 8011634:	899b      	ldrh	r3, [r3, #12]
 8011636:	b29b      	uxth	r3, r3
 8011638:	4618      	mov	r0, r3
 801163a:	f7fb fc29 	bl	800ce90 <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	b2db      	uxtb	r3, r3
 8011642:	f003 0301 	and.w	r3, r3, #1
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00d      	beq.n	8011666 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	899b      	ldrh	r3, [r3, #12]
 8011650:	b29c      	uxth	r4, r3
 8011652:	2001      	movs	r0, #1
 8011654:	f7fb fc1c 	bl	800ce90 <lwip_htons>
 8011658:	4603      	mov	r3, r0
 801165a:	461a      	mov	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	4322      	orrs	r2, r4
 8011662:	b292      	uxth	r2, r2
 8011664:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f7fe fa54 	bl	800fb1e <tcp_seg_free>
    while (next &&
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00e      	beq.n	801169a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	891b      	ldrh	r3, [r3, #8]
 8011680:	461a      	mov	r2, r3
 8011682:	4b1d      	ldr	r3, [pc, #116]	; (80116f8 <tcp_oos_insert_segment+0x10c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	441a      	add	r2, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	685b      	ldr	r3, [r3, #4]
 801168e:	6839      	ldr	r1, [r7, #0]
 8011690:	8909      	ldrh	r1, [r1, #8]
 8011692:	440b      	add	r3, r1
 8011694:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011696:	2b00      	cmp	r3, #0
 8011698:	daca      	bge.n	8011630 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01e      	beq.n	80116de <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	891b      	ldrh	r3, [r3, #8]
 80116a4:	461a      	mov	r2, r3
 80116a6:	4b14      	ldr	r3, [pc, #80]	; (80116f8 <tcp_oos_insert_segment+0x10c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	441a      	add	r2, r3
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	685b      	ldr	r3, [r3, #4]
 80116b2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	dd12      	ble.n	80116de <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	b29a      	uxth	r2, r3
 80116c0:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <tcp_oos_insert_segment+0x10c>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	891b      	ldrh	r3, [r3, #8]
 80116d6:	4619      	mov	r1, r3
 80116d8:	4610      	mov	r0, r2
 80116da:	f7fc fe0b 	bl	800e2f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	683a      	ldr	r2, [r7, #0]
 80116e2:	601a      	str	r2, [r3, #0]
}
 80116e4:	bf00      	nop
 80116e6:	3714      	adds	r7, #20
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd90      	pop	{r4, r7, pc}
 80116ec:	0801b8f0 	.word	0x0801b8f0
 80116f0:	0801bbb0 	.word	0x0801bbb0
 80116f4:	0801b93c 	.word	0x0801b93c
 80116f8:	20004b3c 	.word	0x20004b3c

080116fc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80116fc:	b5b0      	push	{r4, r5, r7, lr}
 80116fe:	b086      	sub	sp, #24
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
 8011708:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801170a:	e03e      	b.n	801178a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801170c:	68bb      	ldr	r3, [r7, #8]
 801170e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	685b      	ldr	r3, [r3, #4]
 801171a:	4618      	mov	r0, r3
 801171c:	f7fc fffe 	bl	800e71c <pbuf_clen>
 8011720:	4603      	mov	r3, r0
 8011722:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801172a:	8a7a      	ldrh	r2, [r7, #18]
 801172c:	429a      	cmp	r2, r3
 801172e:	d906      	bls.n	801173e <tcp_free_acked_segments+0x42>
 8011730:	4b2a      	ldr	r3, [pc, #168]	; (80117dc <tcp_free_acked_segments+0xe0>)
 8011732:	f240 4257 	movw	r2, #1111	; 0x457
 8011736:	492a      	ldr	r1, [pc, #168]	; (80117e0 <tcp_free_acked_segments+0xe4>)
 8011738:	482a      	ldr	r0, [pc, #168]	; (80117e4 <tcp_free_acked_segments+0xe8>)
 801173a:	f007 fdb5 	bl	80192a8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011744:	8a7b      	ldrh	r3, [r7, #18]
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	b29a      	uxth	r2, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	891a      	ldrh	r2, [r3, #8]
 8011754:	4b24      	ldr	r3, [pc, #144]	; (80117e8 <tcp_free_acked_segments+0xec>)
 8011756:	881b      	ldrh	r3, [r3, #0]
 8011758:	4413      	add	r3, r2
 801175a:	b29a      	uxth	r2, r3
 801175c:	4b22      	ldr	r3, [pc, #136]	; (80117e8 <tcp_free_acked_segments+0xec>)
 801175e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011760:	6978      	ldr	r0, [r7, #20]
 8011762:	f7fe f9dc 	bl	800fb1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00c      	beq.n	801178a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d109      	bne.n	801178a <tcp_free_acked_segments+0x8e>
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d106      	bne.n	801178a <tcp_free_acked_segments+0x8e>
 801177c:	4b17      	ldr	r3, [pc, #92]	; (80117dc <tcp_free_acked_segments+0xe0>)
 801177e:	f240 4261 	movw	r2, #1121	; 0x461
 8011782:	491a      	ldr	r1, [pc, #104]	; (80117ec <tcp_free_acked_segments+0xf0>)
 8011784:	4817      	ldr	r0, [pc, #92]	; (80117e4 <tcp_free_acked_segments+0xe8>)
 8011786:	f007 fd8f 	bl	80192a8 <iprintf>
  while (seg_list != NULL &&
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d020      	beq.n	80117d2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	4618      	mov	r0, r3
 8011798:	f7fb fb8f 	bl	800ceba <lwip_htonl>
 801179c:	4604      	mov	r4, r0
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	891b      	ldrh	r3, [r3, #8]
 80117a2:	461d      	mov	r5, r3
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	899b      	ldrh	r3, [r3, #12]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fb fb6f 	bl	800ce90 <lwip_htons>
 80117b2:	4603      	mov	r3, r0
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	f003 0303 	and.w	r3, r3, #3
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <tcp_free_acked_segments+0xc6>
 80117be:	2301      	movs	r3, #1
 80117c0:	e000      	b.n	80117c4 <tcp_free_acked_segments+0xc8>
 80117c2:	2300      	movs	r3, #0
 80117c4:	442b      	add	r3, r5
 80117c6:	18e2      	adds	r2, r4, r3
 80117c8:	4b09      	ldr	r3, [pc, #36]	; (80117f0 <tcp_free_acked_segments+0xf4>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dd9c      	ble.n	801170c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80117d2:	68bb      	ldr	r3, [r7, #8]
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	3718      	adds	r7, #24
 80117d8:	46bd      	mov	sp, r7
 80117da:	bdb0      	pop	{r4, r5, r7, pc}
 80117dc:	0801b8f0 	.word	0x0801b8f0
 80117e0:	0801bbd8 	.word	0x0801bbd8
 80117e4:	0801b93c 	.word	0x0801b93c
 80117e8:	20004b44 	.word	0x20004b44
 80117ec:	0801bc00 	.word	0x0801bc00
 80117f0:	20004b40 	.word	0x20004b40

080117f4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b094      	sub	sp, #80	; 0x50
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d106      	bne.n	8011814 <tcp_receive+0x20>
 8011806:	4ba6      	ldr	r3, [pc, #664]	; (8011aa0 <tcp_receive+0x2ac>)
 8011808:	f240 427b 	movw	r2, #1147	; 0x47b
 801180c:	49a5      	ldr	r1, [pc, #660]	; (8011aa4 <tcp_receive+0x2b0>)
 801180e:	48a6      	ldr	r0, [pc, #664]	; (8011aa8 <tcp_receive+0x2b4>)
 8011810:	f007 fd4a 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	7d1b      	ldrb	r3, [r3, #20]
 8011818:	2b03      	cmp	r3, #3
 801181a:	d806      	bhi.n	801182a <tcp_receive+0x36>
 801181c:	4ba0      	ldr	r3, [pc, #640]	; (8011aa0 <tcp_receive+0x2ac>)
 801181e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011822:	49a2      	ldr	r1, [pc, #648]	; (8011aac <tcp_receive+0x2b8>)
 8011824:	48a0      	ldr	r0, [pc, #640]	; (8011aa8 <tcp_receive+0x2b4>)
 8011826:	f007 fd3f 	bl	80192a8 <iprintf>

  if (flags & TCP_ACK) {
 801182a:	4ba1      	ldr	r3, [pc, #644]	; (8011ab0 <tcp_receive+0x2bc>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f003 0310 	and.w	r3, r3, #16
 8011832:	2b00      	cmp	r3, #0
 8011834:	f000 8263 	beq.w	8011cfe <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801183e:	461a      	mov	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011844:	4413      	add	r3, r2
 8011846:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801184c:	4b99      	ldr	r3, [pc, #612]	; (8011ab4 <tcp_receive+0x2c0>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	1ad3      	subs	r3, r2, r3
 8011852:	2b00      	cmp	r3, #0
 8011854:	db1b      	blt.n	801188e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801185a:	4b96      	ldr	r3, [pc, #600]	; (8011ab4 <tcp_receive+0x2c0>)
 801185c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801185e:	429a      	cmp	r2, r3
 8011860:	d106      	bne.n	8011870 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011866:	4b94      	ldr	r3, [pc, #592]	; (8011ab8 <tcp_receive+0x2c4>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	1ad3      	subs	r3, r2, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	db0e      	blt.n	801188e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011874:	4b90      	ldr	r3, [pc, #576]	; (8011ab8 <tcp_receive+0x2c4>)
 8011876:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011878:	429a      	cmp	r2, r3
 801187a:	d125      	bne.n	80118c8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801187c:	4b8f      	ldr	r3, [pc, #572]	; (8011abc <tcp_receive+0x2c8>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	89db      	ldrh	r3, [r3, #14]
 8011882:	b29a      	uxth	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801188a:	429a      	cmp	r2, r3
 801188c:	d91c      	bls.n	80118c8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801188e:	4b8b      	ldr	r3, [pc, #556]	; (8011abc <tcp_receive+0x2c8>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	89db      	ldrh	r3, [r3, #14]
 8011894:	b29a      	uxth	r2, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d205      	bcs.n	80118b8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80118b8:	4b7e      	ldr	r3, [pc, #504]	; (8011ab4 <tcp_receive+0x2c0>)
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80118c0:	4b7d      	ldr	r3, [pc, #500]	; (8011ab8 <tcp_receive+0x2c4>)
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80118c8:	4b7b      	ldr	r3, [pc, #492]	; (8011ab8 <tcp_receive+0x2c4>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	dc58      	bgt.n	8011988 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80118d6:	4b7a      	ldr	r3, [pc, #488]	; (8011ac0 <tcp_receive+0x2cc>)
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d14b      	bne.n	8011976 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80118e8:	4413      	add	r3, r2
 80118ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d142      	bne.n	8011976 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	db3d      	blt.n	8011976 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118fe:	4b6e      	ldr	r3, [pc, #440]	; (8011ab8 <tcp_receive+0x2c4>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	429a      	cmp	r2, r3
 8011904:	d137      	bne.n	8011976 <tcp_receive+0x182>
              found_dupack = 1;
 8011906:	2301      	movs	r3, #1
 8011908:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011910:	2bff      	cmp	r3, #255	; 0xff
 8011912:	d007      	beq.n	8011924 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801191a:	3301      	adds	r3, #1
 801191c:	b2da      	uxtb	r2, r3
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801192a:	2b03      	cmp	r3, #3
 801192c:	d91b      	bls.n	8011966 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011938:	4413      	add	r3, r2
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011942:	429a      	cmp	r2, r3
 8011944:	d30a      	bcc.n	801195c <tcp_receive+0x168>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011950:	4413      	add	r3, r2
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801195a:	e004      	b.n	8011966 <tcp_receive+0x172>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011962:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801196c:	2b02      	cmp	r3, #2
 801196e:	d902      	bls.n	8011976 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f001 fee9 	bl	8013748 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011978:	2b00      	cmp	r3, #0
 801197a:	f040 8160 	bne.w	8011c3e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2200      	movs	r2, #0
 8011982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011986:	e15a      	b.n	8011c3e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011988:	4b4b      	ldr	r3, [pc, #300]	; (8011ab8 <tcp_receive+0x2c4>)
 801198a:	681a      	ldr	r2, [r3, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	3b01      	subs	r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	f2c0 814d 	blt.w	8011c34 <tcp_receive+0x440>
 801199a:	4b47      	ldr	r3, [pc, #284]	; (8011ab8 <tcp_receive+0x2c4>)
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f300 8145 	bgt.w	8011c34 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	8b5b      	ldrh	r3, [r3, #26]
 80119ae:	f003 0304 	and.w	r3, r3, #4
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d010      	beq.n	80119d8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	8b5b      	ldrh	r3, [r3, #26]
 80119ba:	f023 0304 	bic.w	r3, r3, #4
 80119be:	b29a      	uxth	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119e6:	10db      	asrs	r3, r3, #3
 80119e8:	b21b      	sxth	r3, r3
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4413      	add	r3, r2
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	b21a      	sxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011a00:	4b2d      	ldr	r3, [pc, #180]	; (8011ab8 <tcp_receive+0x2c4>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011a18:	4b27      	ldr	r3, [pc, #156]	; (8011ab8 <tcp_receive+0x2c4>)
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	2b03      	cmp	r3, #3
 8011a26:	f240 8096 	bls.w	8011b56 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d244      	bcs.n	8011ac4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	8b5b      	ldrh	r3, [r3, #26]
 8011a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d001      	beq.n	8011a4a <tcp_receive+0x256>
 8011a46:	2301      	movs	r3, #1
 8011a48:	e000      	b.n	8011a4c <tcp_receive+0x258>
 8011a4a:	2302      	movs	r3, #2
 8011a4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011a50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5a:	fb12 f303 	smulbb	r3, r2, r3
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a62:	4293      	cmp	r3, r2
 8011a64:	bf28      	it	cs
 8011a66:	4613      	movcs	r3, r2
 8011a68:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a72:	4413      	add	r3, r2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d309      	bcc.n	8011a94 <tcp_receive+0x2a0>
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011a88:	4413      	add	r3, r2
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a92:	e060      	b.n	8011b56 <tcp_receive+0x362>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011a9e:	e05a      	b.n	8011b56 <tcp_receive+0x362>
 8011aa0:	0801b8f0 	.word	0x0801b8f0
 8011aa4:	0801bc20 	.word	0x0801bc20
 8011aa8:	0801b93c 	.word	0x0801b93c
 8011aac:	0801bc3c 	.word	0x0801bc3c
 8011ab0:	20004b48 	.word	0x20004b48
 8011ab4:	20004b3c 	.word	0x20004b3c
 8011ab8:	20004b40 	.word	0x20004b40
 8011abc:	20004b2c 	.word	0x20004b2c
 8011ac0:	20004b46 	.word	0x20004b46
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011aca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011acc:	4413      	add	r3, r2
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d309      	bcc.n	8011aee <tcp_receive+0x2fa>
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011ae0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011ae2:	4413      	add	r3, r2
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011aec:	e004      	b.n	8011af8 <tcp_receive+0x304>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d326      	bcc.n	8011b56 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b28:	4413      	add	r3, r2
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d30a      	bcc.n	8011b4c <tcp_receive+0x358>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b40:	4413      	add	r3, r2
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011b4a:	e004      	b.n	8011b56 <tcp_receive+0x362>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b5e:	4a98      	ldr	r2, [pc, #608]	; (8011dc0 <tcp_receive+0x5cc>)
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7ff fdcb 	bl	80116fc <tcp_free_acked_segments>
 8011b66:	4602      	mov	r2, r0
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b74:	4a93      	ldr	r2, [pc, #588]	; (8011dc4 <tcp_receive+0x5d0>)
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7ff fdc0 	bl	80116fc <tcp_free_acked_segments>
 8011b7c:	4602      	mov	r2, r0
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d104      	bne.n	8011b94 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b90:	861a      	strh	r2, [r3, #48]	; 0x30
 8011b92:	e002      	b.n	8011b9a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d103      	bne.n	8011bb0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2200      	movs	r2, #0
 8011bac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011bb6:	4b84      	ldr	r3, [pc, #528]	; (8011dc8 <tcp_receive+0x5d4>)
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	4413      	add	r3, r2
 8011bbc:	b29a      	uxth	r2, r3
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	8b5b      	ldrh	r3, [r3, #26]
 8011bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d035      	beq.n	8011c3c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d118      	bne.n	8011c0a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00c      	beq.n	8011bfa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be8:	68db      	ldr	r3, [r3, #12]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fb f964 	bl	800ceba <lwip_htonl>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	dc20      	bgt.n	8011c3c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	8b5b      	ldrh	r3, [r3, #26]
 8011bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c08:	e018      	b.n	8011c3c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fb f94f 	bl	800ceba <lwip_htonl>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	1ae3      	subs	r3, r4, r3
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	dc0b      	bgt.n	8011c3c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	8b5b      	ldrh	r3, [r3, #26]
 8011c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c32:	e003      	b.n	8011c3c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f001 ff75 	bl	8013b24 <tcp_send_empty_ack>
 8011c3a:	e000      	b.n	8011c3e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011c3c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d05b      	beq.n	8011cfe <tcp_receive+0x50a>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c4a:	4b60      	ldr	r3, [pc, #384]	; (8011dcc <tcp_receive+0x5d8>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	1ad3      	subs	r3, r2, r3
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	da54      	bge.n	8011cfe <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011c54:	4b5e      	ldr	r3, [pc, #376]	; (8011dd0 <tcp_receive+0x5dc>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011c68:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c72:	10db      	asrs	r3, r3, #3
 8011c74:	b21b      	sxth	r3, r3
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011c8c:	4413      	add	r3, r2
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	b21a      	sxth	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011c96:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	da05      	bge.n	8011caa <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011ca2:	425b      	negs	r3, r3
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011caa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cb4:	109b      	asrs	r3, r3, #2
 8011cb6:	b21b      	sxth	r3, r3
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cc8:	b29a      	uxth	r2, r3
 8011cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011cce:	4413      	add	r3, r2
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	b21a      	sxth	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011cde:	10db      	asrs	r3, r3, #3
 8011ce0:	b21b      	sxth	r3, r3
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	4413      	add	r3, r2
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	b21a      	sxth	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011cfe:	4b35      	ldr	r3, [pc, #212]	; (8011dd4 <tcp_receive+0x5e0>)
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	f000 84e1 	beq.w	80126ca <tcp_receive+0xed6>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	7d1b      	ldrb	r3, [r3, #20]
 8011d0c:	2b06      	cmp	r3, #6
 8011d0e:	f200 84dc 	bhi.w	80126ca <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d16:	4b30      	ldr	r3, [pc, #192]	; (8011dd8 <tcp_receive+0x5e4>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	1ad3      	subs	r3, r2, r3
 8011d1c:	3b01      	subs	r3, #1
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f2c0 808e 	blt.w	8011e40 <tcp_receive+0x64c>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d28:	4b2a      	ldr	r3, [pc, #168]	; (8011dd4 <tcp_receive+0x5e0>)
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	4619      	mov	r1, r3
 8011d2e:	4b2a      	ldr	r3, [pc, #168]	; (8011dd8 <tcp_receive+0x5e4>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	440b      	add	r3, r1
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	3301      	adds	r3, #1
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f300 8081 	bgt.w	8011e40 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011d3e:	4b27      	ldr	r3, [pc, #156]	; (8011ddc <tcp_receive+0x5e8>)
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d48:	4b23      	ldr	r3, [pc, #140]	; (8011dd8 <tcp_receive+0x5e4>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011d50:	4b22      	ldr	r3, [pc, #136]	; (8011ddc <tcp_receive+0x5e8>)
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d106      	bne.n	8011d66 <tcp_receive+0x572>
 8011d58:	4b21      	ldr	r3, [pc, #132]	; (8011de0 <tcp_receive+0x5ec>)
 8011d5a:	f240 5294 	movw	r2, #1428	; 0x594
 8011d5e:	4921      	ldr	r1, [pc, #132]	; (8011de4 <tcp_receive+0x5f0>)
 8011d60:	4821      	ldr	r0, [pc, #132]	; (8011de8 <tcp_receive+0x5f4>)
 8011d62:	f007 faa1 	bl	80192a8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d906      	bls.n	8011d7e <tcp_receive+0x58a>
 8011d70:	4b1b      	ldr	r3, [pc, #108]	; (8011de0 <tcp_receive+0x5ec>)
 8011d72:	f240 5295 	movw	r2, #1429	; 0x595
 8011d76:	491d      	ldr	r1, [pc, #116]	; (8011dec <tcp_receive+0x5f8>)
 8011d78:	481b      	ldr	r0, [pc, #108]	; (8011de8 <tcp_receive+0x5f4>)
 8011d7a:	f007 fa95 	bl	80192a8 <iprintf>
      off = (u16_t)off32;
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011d84:	4b15      	ldr	r3, [pc, #84]	; (8011ddc <tcp_receive+0x5e8>)
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	891b      	ldrh	r3, [r3, #8]
 8011d8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d906      	bls.n	8011da0 <tcp_receive+0x5ac>
 8011d92:	4b13      	ldr	r3, [pc, #76]	; (8011de0 <tcp_receive+0x5ec>)
 8011d94:	f240 5297 	movw	r2, #1431	; 0x597
 8011d98:	4915      	ldr	r1, [pc, #84]	; (8011df0 <tcp_receive+0x5fc>)
 8011d9a:	4813      	ldr	r0, [pc, #76]	; (8011de8 <tcp_receive+0x5f4>)
 8011d9c:	f007 fa84 	bl	80192a8 <iprintf>
      inseg.len -= off;
 8011da0:	4b0e      	ldr	r3, [pc, #56]	; (8011ddc <tcp_receive+0x5e8>)
 8011da2:	891a      	ldrh	r2, [r3, #8]
 8011da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011da8:	1ad3      	subs	r3, r2, r3
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	4b0b      	ldr	r3, [pc, #44]	; (8011ddc <tcp_receive+0x5e8>)
 8011dae:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011db0:	4b0a      	ldr	r3, [pc, #40]	; (8011ddc <tcp_receive+0x5e8>)
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	891a      	ldrh	r2, [r3, #8]
 8011db6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011dbe:	e029      	b.n	8011e14 <tcp_receive+0x620>
 8011dc0:	0801bc58 	.word	0x0801bc58
 8011dc4:	0801bc60 	.word	0x0801bc60
 8011dc8:	20004b44 	.word	0x20004b44
 8011dcc:	20004b40 	.word	0x20004b40
 8011dd0:	2000d080 	.word	0x2000d080
 8011dd4:	20004b46 	.word	0x20004b46
 8011dd8:	20004b3c 	.word	0x20004b3c
 8011ddc:	20004b1c 	.word	0x20004b1c
 8011de0:	0801b8f0 	.word	0x0801b8f0
 8011de4:	0801bc68 	.word	0x0801bc68
 8011de8:	0801b93c 	.word	0x0801b93c
 8011dec:	0801bc78 	.word	0x0801bc78
 8011df0:	0801bc88 	.word	0x0801bc88
        off -= p->len;
 8011df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011df6:	895b      	ldrh	r3, [r3, #10]
 8011df8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dfc:	1ad3      	subs	r3, r2, r3
 8011dfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e06:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e16:	895b      	ldrh	r3, [r3, #10]
 8011e18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d8e9      	bhi.n	8011df4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e24:	4619      	mov	r1, r3
 8011e26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011e28:	f7fc fb64 	bl	800e4f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e30:	4a91      	ldr	r2, [pc, #580]	; (8012078 <tcp_receive+0x884>)
 8011e32:	6013      	str	r3, [r2, #0]
 8011e34:	4b91      	ldr	r3, [pc, #580]	; (801207c <tcp_receive+0x888>)
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	4a8f      	ldr	r2, [pc, #572]	; (8012078 <tcp_receive+0x884>)
 8011e3a:	6812      	ldr	r2, [r2, #0]
 8011e3c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011e3e:	e00d      	b.n	8011e5c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011e40:	4b8d      	ldr	r3, [pc, #564]	; (8012078 <tcp_receive+0x884>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	da06      	bge.n	8011e5c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	8b5b      	ldrh	r3, [r3, #26]
 8011e52:	f043 0302 	orr.w	r3, r3, #2
 8011e56:	b29a      	uxth	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e5c:	4b86      	ldr	r3, [pc, #536]	; (8012078 <tcp_receive+0x884>)
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	f2c0 842a 	blt.w	80126c0 <tcp_receive+0xecc>
 8011e6c:	4b82      	ldr	r3, [pc, #520]	; (8012078 <tcp_receive+0x884>)
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e74:	6879      	ldr	r1, [r7, #4]
 8011e76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e78:	440b      	add	r3, r1
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	3301      	adds	r3, #1
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	f300 841e 	bgt.w	80126c0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e88:	4b7b      	ldr	r3, [pc, #492]	; (8012078 <tcp_receive+0x884>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	f040 829a 	bne.w	80123c6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011e92:	4b7a      	ldr	r3, [pc, #488]	; (801207c <tcp_receive+0x888>)
 8011e94:	891c      	ldrh	r4, [r3, #8]
 8011e96:	4b79      	ldr	r3, [pc, #484]	; (801207c <tcp_receive+0x888>)
 8011e98:	68db      	ldr	r3, [r3, #12]
 8011e9a:	899b      	ldrh	r3, [r3, #12]
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fa fff6 	bl	800ce90 <lwip_htons>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	f003 0303 	and.w	r3, r3, #3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <tcp_receive+0x6c0>
 8011eb0:	2301      	movs	r3, #1
 8011eb2:	e000      	b.n	8011eb6 <tcp_receive+0x6c2>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	4423      	add	r3, r4
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	4b71      	ldr	r3, [pc, #452]	; (8012080 <tcp_receive+0x88c>)
 8011ebc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ec2:	4b6f      	ldr	r3, [pc, #444]	; (8012080 <tcp_receive+0x88c>)
 8011ec4:	881b      	ldrh	r3, [r3, #0]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d275      	bcs.n	8011fb6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011eca:	4b6c      	ldr	r3, [pc, #432]	; (801207c <tcp_receive+0x888>)
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	899b      	ldrh	r3, [r3, #12]
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fa ffdc 	bl	800ce90 <lwip_htons>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d01f      	beq.n	8011f24 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ee4:	4b65      	ldr	r3, [pc, #404]	; (801207c <tcp_receive+0x888>)
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	899b      	ldrh	r3, [r3, #12]
 8011eea:	b29b      	uxth	r3, r3
 8011eec:	b21b      	sxth	r3, r3
 8011eee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ef2:	b21c      	sxth	r4, r3
 8011ef4:	4b61      	ldr	r3, [pc, #388]	; (801207c <tcp_receive+0x888>)
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	899b      	ldrh	r3, [r3, #12]
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	4618      	mov	r0, r3
 8011efe:	f7fa ffc7 	bl	800ce90 <lwip_htons>
 8011f02:	4603      	mov	r3, r0
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7fa ffbe 	bl	800ce90 <lwip_htons>
 8011f14:	4603      	mov	r3, r0
 8011f16:	b21b      	sxth	r3, r3
 8011f18:	4323      	orrs	r3, r4
 8011f1a:	b21a      	sxth	r2, r3
 8011f1c:	4b57      	ldr	r3, [pc, #348]	; (801207c <tcp_receive+0x888>)
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	b292      	uxth	r2, r2
 8011f22:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f28:	4b54      	ldr	r3, [pc, #336]	; (801207c <tcp_receive+0x888>)
 8011f2a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f2c:	4b53      	ldr	r3, [pc, #332]	; (801207c <tcp_receive+0x888>)
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	899b      	ldrh	r3, [r3, #12]
 8011f32:	b29b      	uxth	r3, r3
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7fa ffab 	bl	800ce90 <lwip_htons>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	f003 0302 	and.w	r3, r3, #2
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d005      	beq.n	8011f52 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011f46:	4b4d      	ldr	r3, [pc, #308]	; (801207c <tcp_receive+0x888>)
 8011f48:	891b      	ldrh	r3, [r3, #8]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	4b4b      	ldr	r3, [pc, #300]	; (801207c <tcp_receive+0x888>)
 8011f50:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011f52:	4b4a      	ldr	r3, [pc, #296]	; (801207c <tcp_receive+0x888>)
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	4a49      	ldr	r2, [pc, #292]	; (801207c <tcp_receive+0x888>)
 8011f58:	8912      	ldrh	r2, [r2, #8]
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fc f9c9 	bl	800e2f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011f62:	4b46      	ldr	r3, [pc, #280]	; (801207c <tcp_receive+0x888>)
 8011f64:	891c      	ldrh	r4, [r3, #8]
 8011f66:	4b45      	ldr	r3, [pc, #276]	; (801207c <tcp_receive+0x888>)
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	899b      	ldrh	r3, [r3, #12]
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fa ff8e 	bl	800ce90 <lwip_htons>
 8011f74:	4603      	mov	r3, r0
 8011f76:	b2db      	uxtb	r3, r3
 8011f78:	f003 0303 	and.w	r3, r3, #3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <tcp_receive+0x790>
 8011f80:	2301      	movs	r3, #1
 8011f82:	e000      	b.n	8011f86 <tcp_receive+0x792>
 8011f84:	2300      	movs	r3, #0
 8011f86:	4423      	add	r3, r4
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	4b3d      	ldr	r3, [pc, #244]	; (8012080 <tcp_receive+0x88c>)
 8011f8c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011f8e:	4b3c      	ldr	r3, [pc, #240]	; (8012080 <tcp_receive+0x88c>)
 8011f90:	881b      	ldrh	r3, [r3, #0]
 8011f92:	461a      	mov	r2, r3
 8011f94:	4b38      	ldr	r3, [pc, #224]	; (8012078 <tcp_receive+0x884>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	441a      	add	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011fa2:	440b      	add	r3, r1
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d006      	beq.n	8011fb6 <tcp_receive+0x7c2>
 8011fa8:	4b36      	ldr	r3, [pc, #216]	; (8012084 <tcp_receive+0x890>)
 8011faa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011fae:	4936      	ldr	r1, [pc, #216]	; (8012088 <tcp_receive+0x894>)
 8011fb0:	4836      	ldr	r0, [pc, #216]	; (801208c <tcp_receive+0x898>)
 8011fb2:	f007 f979 	bl	80192a8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f000 80e7 	beq.w	801218e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011fc0:	4b2e      	ldr	r3, [pc, #184]	; (801207c <tcp_receive+0x888>)
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	899b      	ldrh	r3, [r3, #12]
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fa ff61 	bl	800ce90 <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	f003 0301 	and.w	r3, r3, #1
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d010      	beq.n	8011ffc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011fda:	e00a      	b.n	8011ff2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fe0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011fec:	68f8      	ldr	r0, [r7, #12]
 8011fee:	f7fd fd96 	bl	800fb1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d1f0      	bne.n	8011fdc <tcp_receive+0x7e8>
 8011ffa:	e0c8      	b.n	801218e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012000:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012002:	e052      	b.n	80120aa <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	899b      	ldrh	r3, [r3, #12]
 801200a:	b29b      	uxth	r3, r3
 801200c:	4618      	mov	r0, r3
 801200e:	f7fa ff3f 	bl	800ce90 <lwip_htons>
 8012012:	4603      	mov	r3, r0
 8012014:	b2db      	uxtb	r3, r3
 8012016:	f003 0301 	and.w	r3, r3, #1
 801201a:	2b00      	cmp	r3, #0
 801201c:	d03d      	beq.n	801209a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801201e:	4b17      	ldr	r3, [pc, #92]	; (801207c <tcp_receive+0x888>)
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	899b      	ldrh	r3, [r3, #12]
 8012024:	b29b      	uxth	r3, r3
 8012026:	4618      	mov	r0, r3
 8012028:	f7fa ff32 	bl	800ce90 <lwip_htons>
 801202c:	4603      	mov	r3, r0
 801202e:	b2db      	uxtb	r3, r3
 8012030:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012034:	2b00      	cmp	r3, #0
 8012036:	d130      	bne.n	801209a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012038:	4b10      	ldr	r3, [pc, #64]	; (801207c <tcp_receive+0x888>)
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	899b      	ldrh	r3, [r3, #12]
 801203e:	b29c      	uxth	r4, r3
 8012040:	2001      	movs	r0, #1
 8012042:	f7fa ff25 	bl	800ce90 <lwip_htons>
 8012046:	4603      	mov	r3, r0
 8012048:	461a      	mov	r2, r3
 801204a:	4b0c      	ldr	r3, [pc, #48]	; (801207c <tcp_receive+0x888>)
 801204c:	68db      	ldr	r3, [r3, #12]
 801204e:	4322      	orrs	r2, r4
 8012050:	b292      	uxth	r2, r2
 8012052:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012054:	4b09      	ldr	r3, [pc, #36]	; (801207c <tcp_receive+0x888>)
 8012056:	891c      	ldrh	r4, [r3, #8]
 8012058:	4b08      	ldr	r3, [pc, #32]	; (801207c <tcp_receive+0x888>)
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	899b      	ldrh	r3, [r3, #12]
 801205e:	b29b      	uxth	r3, r3
 8012060:	4618      	mov	r0, r3
 8012062:	f7fa ff15 	bl	800ce90 <lwip_htons>
 8012066:	4603      	mov	r3, r0
 8012068:	b2db      	uxtb	r3, r3
 801206a:	f003 0303 	and.w	r3, r3, #3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00e      	beq.n	8012090 <tcp_receive+0x89c>
 8012072:	2301      	movs	r3, #1
 8012074:	e00d      	b.n	8012092 <tcp_receive+0x89e>
 8012076:	bf00      	nop
 8012078:	20004b3c 	.word	0x20004b3c
 801207c:	20004b1c 	.word	0x20004b1c
 8012080:	20004b46 	.word	0x20004b46
 8012084:	0801b8f0 	.word	0x0801b8f0
 8012088:	0801bc98 	.word	0x0801bc98
 801208c:	0801b93c 	.word	0x0801b93c
 8012090:	2300      	movs	r3, #0
 8012092:	4423      	add	r3, r4
 8012094:	b29a      	uxth	r2, r3
 8012096:	4b98      	ldr	r3, [pc, #608]	; (80122f8 <tcp_receive+0xb04>)
 8012098:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801209a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801209c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80120a4:	6938      	ldr	r0, [r7, #16]
 80120a6:	f7fd fd3a 	bl	800fb1e <tcp_seg_free>
            while (next &&
 80120aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00e      	beq.n	80120ce <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80120b0:	4b91      	ldr	r3, [pc, #580]	; (80122f8 <tcp_receive+0xb04>)
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	461a      	mov	r2, r3
 80120b6:	4b91      	ldr	r3, [pc, #580]	; (80122fc <tcp_receive+0xb08>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	441a      	add	r2, r3
 80120bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120c4:	8909      	ldrh	r1, [r1, #8]
 80120c6:	440b      	add	r3, r1
 80120c8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	da9a      	bge.n	8012004 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80120ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d059      	beq.n	8012188 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80120d4:	4b88      	ldr	r3, [pc, #544]	; (80122f8 <tcp_receive+0xb04>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	461a      	mov	r2, r3
 80120da:	4b88      	ldr	r3, [pc, #544]	; (80122fc <tcp_receive+0xb08>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	441a      	add	r2, r3
 80120e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e2:	68db      	ldr	r3, [r3, #12]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	dd4d      	ble.n	8012188 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80120ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	4b81      	ldr	r3, [pc, #516]	; (80122fc <tcp_receive+0xb08>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	1ad3      	subs	r3, r2, r3
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	4b80      	ldr	r3, [pc, #512]	; (8012300 <tcp_receive+0xb0c>)
 8012100:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012102:	4b7f      	ldr	r3, [pc, #508]	; (8012300 <tcp_receive+0xb0c>)
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	899b      	ldrh	r3, [r3, #12]
 8012108:	b29b      	uxth	r3, r3
 801210a:	4618      	mov	r0, r3
 801210c:	f7fa fec0 	bl	800ce90 <lwip_htons>
 8012110:	4603      	mov	r3, r0
 8012112:	b2db      	uxtb	r3, r3
 8012114:	f003 0302 	and.w	r3, r3, #2
 8012118:	2b00      	cmp	r3, #0
 801211a:	d005      	beq.n	8012128 <tcp_receive+0x934>
                inseg.len -= 1;
 801211c:	4b78      	ldr	r3, [pc, #480]	; (8012300 <tcp_receive+0xb0c>)
 801211e:	891b      	ldrh	r3, [r3, #8]
 8012120:	3b01      	subs	r3, #1
 8012122:	b29a      	uxth	r2, r3
 8012124:	4b76      	ldr	r3, [pc, #472]	; (8012300 <tcp_receive+0xb0c>)
 8012126:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012128:	4b75      	ldr	r3, [pc, #468]	; (8012300 <tcp_receive+0xb0c>)
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	4a74      	ldr	r2, [pc, #464]	; (8012300 <tcp_receive+0xb0c>)
 801212e:	8912      	ldrh	r2, [r2, #8]
 8012130:	4611      	mov	r1, r2
 8012132:	4618      	mov	r0, r3
 8012134:	f7fc f8de 	bl	800e2f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012138:	4b71      	ldr	r3, [pc, #452]	; (8012300 <tcp_receive+0xb0c>)
 801213a:	891c      	ldrh	r4, [r3, #8]
 801213c:	4b70      	ldr	r3, [pc, #448]	; (8012300 <tcp_receive+0xb0c>)
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	899b      	ldrh	r3, [r3, #12]
 8012142:	b29b      	uxth	r3, r3
 8012144:	4618      	mov	r0, r3
 8012146:	f7fa fea3 	bl	800ce90 <lwip_htons>
 801214a:	4603      	mov	r3, r0
 801214c:	b2db      	uxtb	r3, r3
 801214e:	f003 0303 	and.w	r3, r3, #3
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <tcp_receive+0x966>
 8012156:	2301      	movs	r3, #1
 8012158:	e000      	b.n	801215c <tcp_receive+0x968>
 801215a:	2300      	movs	r3, #0
 801215c:	4423      	add	r3, r4
 801215e:	b29a      	uxth	r2, r3
 8012160:	4b65      	ldr	r3, [pc, #404]	; (80122f8 <tcp_receive+0xb04>)
 8012162:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012164:	4b64      	ldr	r3, [pc, #400]	; (80122f8 <tcp_receive+0xb04>)
 8012166:	881b      	ldrh	r3, [r3, #0]
 8012168:	461a      	mov	r2, r3
 801216a:	4b64      	ldr	r3, [pc, #400]	; (80122fc <tcp_receive+0xb08>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	441a      	add	r2, r3
 8012170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012172:	68db      	ldr	r3, [r3, #12]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	429a      	cmp	r2, r3
 8012178:	d006      	beq.n	8012188 <tcp_receive+0x994>
 801217a:	4b62      	ldr	r3, [pc, #392]	; (8012304 <tcp_receive+0xb10>)
 801217c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012180:	4961      	ldr	r1, [pc, #388]	; (8012308 <tcp_receive+0xb14>)
 8012182:	4862      	ldr	r0, [pc, #392]	; (801230c <tcp_receive+0xb18>)
 8012184:	f007 f890 	bl	80192a8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801218c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801218e:	4b5a      	ldr	r3, [pc, #360]	; (80122f8 <tcp_receive+0xb04>)
 8012190:	881b      	ldrh	r3, [r3, #0]
 8012192:	461a      	mov	r2, r3
 8012194:	4b59      	ldr	r3, [pc, #356]	; (80122fc <tcp_receive+0xb08>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	441a      	add	r2, r3
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121a2:	4b55      	ldr	r3, [pc, #340]	; (80122f8 <tcp_receive+0xb04>)
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d206      	bcs.n	80121b8 <tcp_receive+0x9c4>
 80121aa:	4b56      	ldr	r3, [pc, #344]	; (8012304 <tcp_receive+0xb10>)
 80121ac:	f240 6207 	movw	r2, #1543	; 0x607
 80121b0:	4957      	ldr	r1, [pc, #348]	; (8012310 <tcp_receive+0xb1c>)
 80121b2:	4856      	ldr	r0, [pc, #344]	; (801230c <tcp_receive+0xb18>)
 80121b4:	f007 f878 	bl	80192a8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80121bc:	4b4e      	ldr	r3, [pc, #312]	; (80122f8 <tcp_receive+0xb04>)
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	b29a      	uxth	r2, r3
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7fc ffc9 	bl	800f160 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80121ce:	4b4c      	ldr	r3, [pc, #304]	; (8012300 <tcp_receive+0xb0c>)
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	891b      	ldrh	r3, [r3, #8]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d006      	beq.n	80121e6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80121d8:	4b49      	ldr	r3, [pc, #292]	; (8012300 <tcp_receive+0xb0c>)
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	4a4d      	ldr	r2, [pc, #308]	; (8012314 <tcp_receive+0xb20>)
 80121de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80121e0:	4b47      	ldr	r3, [pc, #284]	; (8012300 <tcp_receive+0xb0c>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80121e6:	4b46      	ldr	r3, [pc, #280]	; (8012300 <tcp_receive+0xb0c>)
 80121e8:	68db      	ldr	r3, [r3, #12]
 80121ea:	899b      	ldrh	r3, [r3, #12]
 80121ec:	b29b      	uxth	r3, r3
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fa fe4e 	bl	800ce90 <lwip_htons>
 80121f4:	4603      	mov	r3, r0
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	f003 0301 	and.w	r3, r3, #1
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	f000 80b8 	beq.w	8012372 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012202:	4b45      	ldr	r3, [pc, #276]	; (8012318 <tcp_receive+0xb24>)
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	f043 0320 	orr.w	r3, r3, #32
 801220a:	b2da      	uxtb	r2, r3
 801220c:	4b42      	ldr	r3, [pc, #264]	; (8012318 <tcp_receive+0xb24>)
 801220e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012210:	e0af      	b.n	8012372 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012216:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	4a36      	ldr	r2, [pc, #216]	; (80122fc <tcp_receive+0xb08>)
 8012222:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	891b      	ldrh	r3, [r3, #8]
 8012228:	461c      	mov	r4, r3
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	899b      	ldrh	r3, [r3, #12]
 8012230:	b29b      	uxth	r3, r3
 8012232:	4618      	mov	r0, r3
 8012234:	f7fa fe2c 	bl	800ce90 <lwip_htons>
 8012238:	4603      	mov	r3, r0
 801223a:	b2db      	uxtb	r3, r3
 801223c:	f003 0303 	and.w	r3, r3, #3
 8012240:	2b00      	cmp	r3, #0
 8012242:	d001      	beq.n	8012248 <tcp_receive+0xa54>
 8012244:	2301      	movs	r3, #1
 8012246:	e000      	b.n	801224a <tcp_receive+0xa56>
 8012248:	2300      	movs	r3, #0
 801224a:	191a      	adds	r2, r3, r4
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012250:	441a      	add	r2, r3
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801225a:	461c      	mov	r4, r3
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	891b      	ldrh	r3, [r3, #8]
 8012260:	461d      	mov	r5, r3
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	899b      	ldrh	r3, [r3, #12]
 8012268:	b29b      	uxth	r3, r3
 801226a:	4618      	mov	r0, r3
 801226c:	f7fa fe10 	bl	800ce90 <lwip_htons>
 8012270:	4603      	mov	r3, r0
 8012272:	b2db      	uxtb	r3, r3
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <tcp_receive+0xa8c>
 801227c:	2301      	movs	r3, #1
 801227e:	e000      	b.n	8012282 <tcp_receive+0xa8e>
 8012280:	2300      	movs	r3, #0
 8012282:	442b      	add	r3, r5
 8012284:	429c      	cmp	r4, r3
 8012286:	d206      	bcs.n	8012296 <tcp_receive+0xaa2>
 8012288:	4b1e      	ldr	r3, [pc, #120]	; (8012304 <tcp_receive+0xb10>)
 801228a:	f240 622b 	movw	r2, #1579	; 0x62b
 801228e:	4923      	ldr	r1, [pc, #140]	; (801231c <tcp_receive+0xb28>)
 8012290:	481e      	ldr	r0, [pc, #120]	; (801230c <tcp_receive+0xb18>)
 8012292:	f007 f809 	bl	80192a8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	891b      	ldrh	r3, [r3, #8]
 801229a:	461c      	mov	r4, r3
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	899b      	ldrh	r3, [r3, #12]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7fa fdf3 	bl	800ce90 <lwip_htons>
 80122aa:	4603      	mov	r3, r0
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	f003 0303 	and.w	r3, r3, #3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d001      	beq.n	80122ba <tcp_receive+0xac6>
 80122b6:	2301      	movs	r3, #1
 80122b8:	e000      	b.n	80122bc <tcp_receive+0xac8>
 80122ba:	2300      	movs	r3, #0
 80122bc:	1919      	adds	r1, r3, r4
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122c2:	b28b      	uxth	r3, r1
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f7fc ff47 	bl	800f160 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	891b      	ldrh	r3, [r3, #8]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d028      	beq.n	801232e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80122dc:	4b0d      	ldr	r3, [pc, #52]	; (8012314 <tcp_receive+0xb20>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d01d      	beq.n	8012320 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80122e4:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <tcp_receive+0xb20>)
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	4619      	mov	r1, r3
 80122ee:	4610      	mov	r0, r2
 80122f0:	f7fc fa54 	bl	800e79c <pbuf_cat>
 80122f4:	e018      	b.n	8012328 <tcp_receive+0xb34>
 80122f6:	bf00      	nop
 80122f8:	20004b46 	.word	0x20004b46
 80122fc:	20004b3c 	.word	0x20004b3c
 8012300:	20004b1c 	.word	0x20004b1c
 8012304:	0801b8f0 	.word	0x0801b8f0
 8012308:	0801bcd0 	.word	0x0801bcd0
 801230c:	0801b93c 	.word	0x0801b93c
 8012310:	0801bd0c 	.word	0x0801bd0c
 8012314:	20004b4c 	.word	0x20004b4c
 8012318:	20004b49 	.word	0x20004b49
 801231c:	0801bd2c 	.word	0x0801bd2c
            } else {
              recv_data = cseg->p;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	4a70      	ldr	r2, [pc, #448]	; (80124e8 <tcp_receive+0xcf4>)
 8012326:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2200      	movs	r2, #0
 801232c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	899b      	ldrh	r3, [r3, #12]
 8012334:	b29b      	uxth	r3, r3
 8012336:	4618      	mov	r0, r3
 8012338:	f7fa fdaa 	bl	800ce90 <lwip_htons>
 801233c:	4603      	mov	r3, r0
 801233e:	b2db      	uxtb	r3, r3
 8012340:	f003 0301 	and.w	r3, r3, #1
 8012344:	2b00      	cmp	r3, #0
 8012346:	d00d      	beq.n	8012364 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012348:	4b68      	ldr	r3, [pc, #416]	; (80124ec <tcp_receive+0xcf8>)
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	f043 0320 	orr.w	r3, r3, #32
 8012350:	b2da      	uxtb	r2, r3
 8012352:	4b66      	ldr	r3, [pc, #408]	; (80124ec <tcp_receive+0xcf8>)
 8012354:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	7d1b      	ldrb	r3, [r3, #20]
 801235a:	2b04      	cmp	r3, #4
 801235c:	d102      	bne.n	8012364 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2207      	movs	r2, #7
 8012362:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	681a      	ldr	r2, [r3, #0]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801236c:	68b8      	ldr	r0, [r7, #8]
 801236e:	f7fd fbd6 	bl	800fb1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012376:	2b00      	cmp	r3, #0
 8012378:	d008      	beq.n	801238c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012386:	429a      	cmp	r2, r3
 8012388:	f43f af43 	beq.w	8012212 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	8b5b      	ldrh	r3, [r3, #26]
 8012390:	f003 0301 	and.w	r3, r3, #1
 8012394:	2b00      	cmp	r3, #0
 8012396:	d00e      	beq.n	80123b6 <tcp_receive+0xbc2>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	8b5b      	ldrh	r3, [r3, #26]
 801239c:	f023 0301 	bic.w	r3, r3, #1
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	835a      	strh	r2, [r3, #26]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	8b5b      	ldrh	r3, [r3, #26]
 80123aa:	f043 0302 	orr.w	r3, r3, #2
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123b4:	e188      	b.n	80126c8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	8b5b      	ldrh	r3, [r3, #26]
 80123ba:	f043 0301 	orr.w	r3, r3, #1
 80123be:	b29a      	uxth	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80123c4:	e180      	b.n	80126c8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d106      	bne.n	80123dc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80123ce:	4848      	ldr	r0, [pc, #288]	; (80124f0 <tcp_receive+0xcfc>)
 80123d0:	f7fd fbbe 	bl	800fb50 <tcp_seg_copy>
 80123d4:	4602      	mov	r2, r0
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	675a      	str	r2, [r3, #116]	; 0x74
 80123da:	e16d      	b.n	80126b8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80123dc:	2300      	movs	r3, #0
 80123de:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80123e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80123e6:	e157      	b.n	8012698 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	68db      	ldr	r3, [r3, #12]
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	4b41      	ldr	r3, [pc, #260]	; (80124f4 <tcp_receive+0xd00>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d11d      	bne.n	8012432 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80123f6:	4b3e      	ldr	r3, [pc, #248]	; (80124f0 <tcp_receive+0xcfc>)
 80123f8:	891a      	ldrh	r2, [r3, #8]
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	891b      	ldrh	r3, [r3, #8]
 80123fe:	429a      	cmp	r2, r3
 8012400:	f240 814f 	bls.w	80126a2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012404:	483a      	ldr	r0, [pc, #232]	; (80124f0 <tcp_receive+0xcfc>)
 8012406:	f7fd fba3 	bl	800fb50 <tcp_seg_copy>
 801240a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	2b00      	cmp	r3, #0
 8012410:	f000 8149 	beq.w	80126a6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012416:	2b00      	cmp	r3, #0
 8012418:	d003      	beq.n	8012422 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801241a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801241c:	697a      	ldr	r2, [r7, #20]
 801241e:	601a      	str	r2, [r3, #0]
 8012420:	e002      	b.n	8012428 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	697a      	ldr	r2, [r7, #20]
 8012426:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012428:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801242a:	6978      	ldr	r0, [r7, #20]
 801242c:	f7ff f8de 	bl	80115ec <tcp_oos_insert_segment>
                }
                break;
 8012430:	e139      	b.n	80126a6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012434:	2b00      	cmp	r3, #0
 8012436:	d117      	bne.n	8012468 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012438:	4b2e      	ldr	r3, [pc, #184]	; (80124f4 <tcp_receive+0xd00>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	da57      	bge.n	80124f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012448:	4829      	ldr	r0, [pc, #164]	; (80124f0 <tcp_receive+0xcfc>)
 801244a:	f7fd fb81 	bl	800fb50 <tcp_seg_copy>
 801244e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 8129 	beq.w	80126aa <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	69ba      	ldr	r2, [r7, #24]
 801245c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801245e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012460:	69b8      	ldr	r0, [r7, #24]
 8012462:	f7ff f8c3 	bl	80115ec <tcp_oos_insert_segment>
                  }
                  break;
 8012466:	e120      	b.n	80126aa <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012468:	4b22      	ldr	r3, [pc, #136]	; (80124f4 <tcp_receive+0xd00>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	685b      	ldr	r3, [r3, #4]
 8012472:	1ad3      	subs	r3, r2, r3
 8012474:	3b01      	subs	r3, #1
 8012476:	2b00      	cmp	r3, #0
 8012478:	db3e      	blt.n	80124f8 <tcp_receive+0xd04>
 801247a:	4b1e      	ldr	r3, [pc, #120]	; (80124f4 <tcp_receive+0xd00>)
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	3301      	adds	r3, #1
 8012488:	2b00      	cmp	r3, #0
 801248a:	dc35      	bgt.n	80124f8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801248c:	4818      	ldr	r0, [pc, #96]	; (80124f0 <tcp_receive+0xcfc>)
 801248e:	f7fd fb5f 	bl	800fb50 <tcp_seg_copy>
 8012492:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	2b00      	cmp	r3, #0
 8012498:	f000 8109 	beq.w	80126ae <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	685b      	ldr	r3, [r3, #4]
 80124a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124a4:	8912      	ldrh	r2, [r2, #8]
 80124a6:	441a      	add	r2, r3
 80124a8:	4b12      	ldr	r3, [pc, #72]	; (80124f4 <tcp_receive+0xd00>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	1ad3      	subs	r3, r2, r3
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	dd12      	ble.n	80124d8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80124b2:	4b10      	ldr	r3, [pc, #64]	; (80124f4 <tcp_receive+0xd00>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	b29b      	uxth	r3, r3
 80124c0:	1ad3      	subs	r3, r2, r3
 80124c2:	b29a      	uxth	r2, r3
 80124c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124c6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80124c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ca:	685a      	ldr	r2, [r3, #4]
 80124cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ce:	891b      	ldrh	r3, [r3, #8]
 80124d0:	4619      	mov	r1, r3
 80124d2:	4610      	mov	r0, r2
 80124d4:	f7fb ff0e 	bl	800e2f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80124d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124da:	69fa      	ldr	r2, [r7, #28]
 80124dc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80124de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80124e0:	69f8      	ldr	r0, [r7, #28]
 80124e2:	f7ff f883 	bl	80115ec <tcp_oos_insert_segment>
                  }
                  break;
 80124e6:	e0e2      	b.n	80126ae <tcp_receive+0xeba>
 80124e8:	20004b4c 	.word	0x20004b4c
 80124ec:	20004b49 	.word	0x20004b49
 80124f0:	20004b1c 	.word	0x20004b1c
 80124f4:	20004b3c 	.word	0x20004b3c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	f040 80c6 	bne.w	8012692 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012506:	4b80      	ldr	r3, [pc, #512]	; (8012708 <tcp_receive+0xf14>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012512:	2b00      	cmp	r3, #0
 8012514:	f340 80bd 	ble.w	8012692 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	899b      	ldrh	r3, [r3, #12]
 801251e:	b29b      	uxth	r3, r3
 8012520:	4618      	mov	r0, r3
 8012522:	f7fa fcb5 	bl	800ce90 <lwip_htons>
 8012526:	4603      	mov	r3, r0
 8012528:	b2db      	uxtb	r3, r3
 801252a:	f003 0301 	and.w	r3, r3, #1
 801252e:	2b00      	cmp	r3, #0
 8012530:	f040 80bf 	bne.w	80126b2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012534:	4875      	ldr	r0, [pc, #468]	; (801270c <tcp_receive+0xf18>)
 8012536:	f7fd fb0b 	bl	800fb50 <tcp_seg_copy>
 801253a:	4602      	mov	r2, r0
 801253c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801253e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	f000 80b6 	beq.w	80126b6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	685b      	ldr	r3, [r3, #4]
 8012550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012552:	8912      	ldrh	r2, [r2, #8]
 8012554:	441a      	add	r2, r3
 8012556:	4b6c      	ldr	r3, [pc, #432]	; (8012708 <tcp_receive+0xf14>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	1ad3      	subs	r3, r2, r3
 801255c:	2b00      	cmp	r3, #0
 801255e:	dd12      	ble.n	8012586 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012560:	4b69      	ldr	r3, [pc, #420]	; (8012708 <tcp_receive+0xf14>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	b29a      	uxth	r2, r3
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	b29b      	uxth	r3, r3
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	b29a      	uxth	r2, r3
 8012572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012574:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257c:	891b      	ldrh	r3, [r3, #8]
 801257e:	4619      	mov	r1, r3
 8012580:	4610      	mov	r0, r2
 8012582:	f7fb feb7 	bl	800e2f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012586:	4b62      	ldr	r3, [pc, #392]	; (8012710 <tcp_receive+0xf1c>)
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	461a      	mov	r2, r3
 801258c:	4b5e      	ldr	r3, [pc, #376]	; (8012708 <tcp_receive+0xf14>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	441a      	add	r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012596:	6879      	ldr	r1, [r7, #4]
 8012598:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801259a:	440b      	add	r3, r1
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f340 8089 	ble.w	80126b6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fa fc6e 	bl	800ce90 <lwip_htons>
 80125b4:	4603      	mov	r3, r0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0301 	and.w	r3, r3, #1
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d022      	beq.n	8012606 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80125c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	899b      	ldrh	r3, [r3, #12]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	b21b      	sxth	r3, r3
 80125cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80125d0:	b21c      	sxth	r4, r3
 80125d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	899b      	ldrh	r3, [r3, #12]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	4618      	mov	r0, r3
 80125de:	f7fa fc57 	bl	800ce90 <lwip_htons>
 80125e2:	4603      	mov	r3, r0
 80125e4:	b2db      	uxtb	r3, r3
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7fa fc4e 	bl	800ce90 <lwip_htons>
 80125f4:	4603      	mov	r3, r0
 80125f6:	b21b      	sxth	r3, r3
 80125f8:	4323      	orrs	r3, r4
 80125fa:	b21a      	sxth	r2, r3
 80125fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	b292      	uxth	r2, r2
 8012604:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801260a:	b29a      	uxth	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012610:	4413      	add	r3, r2
 8012612:	b299      	uxth	r1, r3
 8012614:	4b3c      	ldr	r3, [pc, #240]	; (8012708 <tcp_receive+0xf14>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	b29a      	uxth	r2, r3
 801261a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	1a8a      	subs	r2, r1, r2
 8012620:	b292      	uxth	r2, r2
 8012622:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	685a      	ldr	r2, [r3, #4]
 801262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	891b      	ldrh	r3, [r3, #8]
 8012630:	4619      	mov	r1, r3
 8012632:	4610      	mov	r0, r2
 8012634:	f7fb fe5e 	bl	800e2f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	891c      	ldrh	r4, [r3, #8]
 801263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	68db      	ldr	r3, [r3, #12]
 8012644:	899b      	ldrh	r3, [r3, #12]
 8012646:	b29b      	uxth	r3, r3
 8012648:	4618      	mov	r0, r3
 801264a:	f7fa fc21 	bl	800ce90 <lwip_htons>
 801264e:	4603      	mov	r3, r0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	f003 0303 	and.w	r3, r3, #3
 8012656:	2b00      	cmp	r3, #0
 8012658:	d001      	beq.n	801265e <tcp_receive+0xe6a>
 801265a:	2301      	movs	r3, #1
 801265c:	e000      	b.n	8012660 <tcp_receive+0xe6c>
 801265e:	2300      	movs	r3, #0
 8012660:	4423      	add	r3, r4
 8012662:	b29a      	uxth	r2, r3
 8012664:	4b2a      	ldr	r3, [pc, #168]	; (8012710 <tcp_receive+0xf1c>)
 8012666:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012668:	4b29      	ldr	r3, [pc, #164]	; (8012710 <tcp_receive+0xf1c>)
 801266a:	881b      	ldrh	r3, [r3, #0]
 801266c:	461a      	mov	r2, r3
 801266e:	4b26      	ldr	r3, [pc, #152]	; (8012708 <tcp_receive+0xf14>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	441a      	add	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012678:	6879      	ldr	r1, [r7, #4]
 801267a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801267c:	440b      	add	r3, r1
 801267e:	429a      	cmp	r2, r3
 8012680:	d019      	beq.n	80126b6 <tcp_receive+0xec2>
 8012682:	4b24      	ldr	r3, [pc, #144]	; (8012714 <tcp_receive+0xf20>)
 8012684:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012688:	4923      	ldr	r1, [pc, #140]	; (8012718 <tcp_receive+0xf24>)
 801268a:	4824      	ldr	r0, [pc, #144]	; (801271c <tcp_receive+0xf28>)
 801268c:	f006 fe0c 	bl	80192a8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012690:	e011      	b.n	80126b6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	63bb      	str	r3, [r7, #56]	; 0x38
 8012698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801269a:	2b00      	cmp	r3, #0
 801269c:	f47f aea4 	bne.w	80123e8 <tcp_receive+0xbf4>
 80126a0:	e00a      	b.n	80126b8 <tcp_receive+0xec4>
                break;
 80126a2:	bf00      	nop
 80126a4:	e008      	b.n	80126b8 <tcp_receive+0xec4>
                break;
 80126a6:	bf00      	nop
 80126a8:	e006      	b.n	80126b8 <tcp_receive+0xec4>
                  break;
 80126aa:	bf00      	nop
 80126ac:	e004      	b.n	80126b8 <tcp_receive+0xec4>
                  break;
 80126ae:	bf00      	nop
 80126b0:	e002      	b.n	80126b8 <tcp_receive+0xec4>
                  break;
 80126b2:	bf00      	nop
 80126b4:	e000      	b.n	80126b8 <tcp_receive+0xec4>
                break;
 80126b6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f001 fa33 	bl	8013b24 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80126be:	e003      	b.n	80126c8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f001 fa2f 	bl	8013b24 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126c6:	e01a      	b.n	80126fe <tcp_receive+0xf0a>
 80126c8:	e019      	b.n	80126fe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80126ca:	4b0f      	ldr	r3, [pc, #60]	; (8012708 <tcp_receive+0xf14>)
 80126cc:	681a      	ldr	r2, [r3, #0]
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126d2:	1ad3      	subs	r3, r2, r3
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	db0a      	blt.n	80126ee <tcp_receive+0xefa>
 80126d8:	4b0b      	ldr	r3, [pc, #44]	; (8012708 <tcp_receive+0xf14>)
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e0:	6879      	ldr	r1, [r7, #4]
 80126e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126e4:	440b      	add	r3, r1
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	3301      	adds	r3, #1
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	dd07      	ble.n	80126fe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8b5b      	ldrh	r3, [r3, #26]
 80126f2:	f043 0302 	orr.w	r3, r3, #2
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80126fc:	e7ff      	b.n	80126fe <tcp_receive+0xf0a>
 80126fe:	bf00      	nop
 8012700:	3750      	adds	r7, #80	; 0x50
 8012702:	46bd      	mov	sp, r7
 8012704:	bdb0      	pop	{r4, r5, r7, pc}
 8012706:	bf00      	nop
 8012708:	20004b3c 	.word	0x20004b3c
 801270c:	20004b1c 	.word	0x20004b1c
 8012710:	20004b46 	.word	0x20004b46
 8012714:	0801b8f0 	.word	0x0801b8f0
 8012718:	0801bc98 	.word	0x0801bc98
 801271c:	0801b93c 	.word	0x0801b93c

08012720 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012726:	4b15      	ldr	r3, [pc, #84]	; (801277c <tcp_get_next_optbyte+0x5c>)
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	1c5a      	adds	r2, r3, #1
 801272c:	b291      	uxth	r1, r2
 801272e:	4a13      	ldr	r2, [pc, #76]	; (801277c <tcp_get_next_optbyte+0x5c>)
 8012730:	8011      	strh	r1, [r2, #0]
 8012732:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012734:	4b12      	ldr	r3, [pc, #72]	; (8012780 <tcp_get_next_optbyte+0x60>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d004      	beq.n	8012746 <tcp_get_next_optbyte+0x26>
 801273c:	4b11      	ldr	r3, [pc, #68]	; (8012784 <tcp_get_next_optbyte+0x64>)
 801273e:	881b      	ldrh	r3, [r3, #0]
 8012740:	88fa      	ldrh	r2, [r7, #6]
 8012742:	429a      	cmp	r2, r3
 8012744:	d208      	bcs.n	8012758 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012746:	4b10      	ldr	r3, [pc, #64]	; (8012788 <tcp_get_next_optbyte+0x68>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	3314      	adds	r3, #20
 801274c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801274e:	88fb      	ldrh	r3, [r7, #6]
 8012750:	683a      	ldr	r2, [r7, #0]
 8012752:	4413      	add	r3, r2
 8012754:	781b      	ldrb	r3, [r3, #0]
 8012756:	e00b      	b.n	8012770 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012758:	88fb      	ldrh	r3, [r7, #6]
 801275a:	b2da      	uxtb	r2, r3
 801275c:	4b09      	ldr	r3, [pc, #36]	; (8012784 <tcp_get_next_optbyte+0x64>)
 801275e:	881b      	ldrh	r3, [r3, #0]
 8012760:	b2db      	uxtb	r3, r3
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012766:	4b06      	ldr	r3, [pc, #24]	; (8012780 <tcp_get_next_optbyte+0x60>)
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	797b      	ldrb	r3, [r7, #5]
 801276c:	4413      	add	r3, r2
 801276e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr
 801277c:	20004b38 	.word	0x20004b38
 8012780:	20004b34 	.word	0x20004b34
 8012784:	20004b32 	.word	0x20004b32
 8012788:	20004b2c 	.word	0x20004b2c

0801278c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d106      	bne.n	80127a8 <tcp_parseopt+0x1c>
 801279a:	4b32      	ldr	r3, [pc, #200]	; (8012864 <tcp_parseopt+0xd8>)
 801279c:	f240 727d 	movw	r2, #1917	; 0x77d
 80127a0:	4931      	ldr	r1, [pc, #196]	; (8012868 <tcp_parseopt+0xdc>)
 80127a2:	4832      	ldr	r0, [pc, #200]	; (801286c <tcp_parseopt+0xe0>)
 80127a4:	f006 fd80 	bl	80192a8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80127a8:	4b31      	ldr	r3, [pc, #196]	; (8012870 <tcp_parseopt+0xe4>)
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d055      	beq.n	801285c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80127b0:	4b30      	ldr	r3, [pc, #192]	; (8012874 <tcp_parseopt+0xe8>)
 80127b2:	2200      	movs	r2, #0
 80127b4:	801a      	strh	r2, [r3, #0]
 80127b6:	e045      	b.n	8012844 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80127b8:	f7ff ffb2 	bl	8012720 <tcp_get_next_optbyte>
 80127bc:	4603      	mov	r3, r0
 80127be:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80127c0:	7bfb      	ldrb	r3, [r7, #15]
 80127c2:	2b02      	cmp	r3, #2
 80127c4:	d006      	beq.n	80127d4 <tcp_parseopt+0x48>
 80127c6:	2b02      	cmp	r3, #2
 80127c8:	dc2b      	bgt.n	8012822 <tcp_parseopt+0x96>
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d041      	beq.n	8012852 <tcp_parseopt+0xc6>
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d127      	bne.n	8012822 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80127d2:	e037      	b.n	8012844 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80127d4:	f7ff ffa4 	bl	8012720 <tcp_get_next_optbyte>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b04      	cmp	r3, #4
 80127dc:	d13b      	bne.n	8012856 <tcp_parseopt+0xca>
 80127de:	4b25      	ldr	r3, [pc, #148]	; (8012874 <tcp_parseopt+0xe8>)
 80127e0:	881b      	ldrh	r3, [r3, #0]
 80127e2:	3301      	adds	r3, #1
 80127e4:	4a22      	ldr	r2, [pc, #136]	; (8012870 <tcp_parseopt+0xe4>)
 80127e6:	8812      	ldrh	r2, [r2, #0]
 80127e8:	4293      	cmp	r3, r2
 80127ea:	da34      	bge.n	8012856 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80127ec:	f7ff ff98 	bl	8012720 <tcp_get_next_optbyte>
 80127f0:	4603      	mov	r3, r0
 80127f2:	b29b      	uxth	r3, r3
 80127f4:	021b      	lsls	r3, r3, #8
 80127f6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80127f8:	f7ff ff92 	bl	8012720 <tcp_get_next_optbyte>
 80127fc:	4603      	mov	r3, r0
 80127fe:	b29a      	uxth	r2, r3
 8012800:	89bb      	ldrh	r3, [r7, #12]
 8012802:	4313      	orrs	r3, r2
 8012804:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012806:	89bb      	ldrh	r3, [r7, #12]
 8012808:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801280c:	d804      	bhi.n	8012818 <tcp_parseopt+0x8c>
 801280e:	89bb      	ldrh	r3, [r7, #12]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d001      	beq.n	8012818 <tcp_parseopt+0x8c>
 8012814:	89ba      	ldrh	r2, [r7, #12]
 8012816:	e001      	b.n	801281c <tcp_parseopt+0x90>
 8012818:	f44f 7206 	mov.w	r2, #536	; 0x218
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012820:	e010      	b.n	8012844 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012822:	f7ff ff7d 	bl	8012720 <tcp_get_next_optbyte>
 8012826:	4603      	mov	r3, r0
 8012828:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801282a:	7afb      	ldrb	r3, [r7, #11]
 801282c:	2b01      	cmp	r3, #1
 801282e:	d914      	bls.n	801285a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012830:	7afb      	ldrb	r3, [r7, #11]
 8012832:	b29a      	uxth	r2, r3
 8012834:	4b0f      	ldr	r3, [pc, #60]	; (8012874 <tcp_parseopt+0xe8>)
 8012836:	881b      	ldrh	r3, [r3, #0]
 8012838:	4413      	add	r3, r2
 801283a:	b29b      	uxth	r3, r3
 801283c:	3b02      	subs	r3, #2
 801283e:	b29a      	uxth	r2, r3
 8012840:	4b0c      	ldr	r3, [pc, #48]	; (8012874 <tcp_parseopt+0xe8>)
 8012842:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012844:	4b0b      	ldr	r3, [pc, #44]	; (8012874 <tcp_parseopt+0xe8>)
 8012846:	881a      	ldrh	r2, [r3, #0]
 8012848:	4b09      	ldr	r3, [pc, #36]	; (8012870 <tcp_parseopt+0xe4>)
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	429a      	cmp	r2, r3
 801284e:	d3b3      	bcc.n	80127b8 <tcp_parseopt+0x2c>
 8012850:	e004      	b.n	801285c <tcp_parseopt+0xd0>
          return;
 8012852:	bf00      	nop
 8012854:	e002      	b.n	801285c <tcp_parseopt+0xd0>
            return;
 8012856:	bf00      	nop
 8012858:	e000      	b.n	801285c <tcp_parseopt+0xd0>
            return;
 801285a:	bf00      	nop
      }
    }
  }
}
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	0801b8f0 	.word	0x0801b8f0
 8012868:	0801bd54 	.word	0x0801bd54
 801286c:	0801b93c 	.word	0x0801b93c
 8012870:	20004b30 	.word	0x20004b30
 8012874:	20004b38 	.word	0x20004b38

08012878 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012878:	b480      	push	{r7}
 801287a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801287c:	4b05      	ldr	r3, [pc, #20]	; (8012894 <tcp_trigger_input_pcb_close+0x1c>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	f043 0310 	orr.w	r3, r3, #16
 8012884:	b2da      	uxtb	r2, r3
 8012886:	4b03      	ldr	r3, [pc, #12]	; (8012894 <tcp_trigger_input_pcb_close+0x1c>)
 8012888:	701a      	strb	r2, [r3, #0]
}
 801288a:	bf00      	nop
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	20004b49 	.word	0x20004b49

08012898 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00a      	beq.n	80128c0 <tcp_route+0x28>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	7a1b      	ldrb	r3, [r3, #8]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d006      	beq.n	80128c0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	7a1b      	ldrb	r3, [r3, #8]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fb fb14 	bl	800dee4 <netif_get_by_index>
 80128bc:	4603      	mov	r3, r0
 80128be:	e003      	b.n	80128c8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f005 f845 	bl	8017950 <ip4_route>
 80128c6:	4603      	mov	r3, r0
  }
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80128d0:	b590      	push	{r4, r7, lr}
 80128d2:	b087      	sub	sp, #28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	603b      	str	r3, [r7, #0]
 80128dc:	4613      	mov	r3, r2
 80128de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d105      	bne.n	80128f2 <tcp_create_segment+0x22>
 80128e6:	4b44      	ldr	r3, [pc, #272]	; (80129f8 <tcp_create_segment+0x128>)
 80128e8:	22a3      	movs	r2, #163	; 0xa3
 80128ea:	4944      	ldr	r1, [pc, #272]	; (80129fc <tcp_create_segment+0x12c>)
 80128ec:	4844      	ldr	r0, [pc, #272]	; (8012a00 <tcp_create_segment+0x130>)
 80128ee:	f006 fcdb 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d105      	bne.n	8012904 <tcp_create_segment+0x34>
 80128f8:	4b3f      	ldr	r3, [pc, #252]	; (80129f8 <tcp_create_segment+0x128>)
 80128fa:	22a4      	movs	r2, #164	; 0xa4
 80128fc:	4941      	ldr	r1, [pc, #260]	; (8012a04 <tcp_create_segment+0x134>)
 80128fe:	4840      	ldr	r0, [pc, #256]	; (8012a00 <tcp_create_segment+0x130>)
 8012900:	f006 fcd2 	bl	80192a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012908:	009b      	lsls	r3, r3, #2
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0304 	and.w	r3, r3, #4
 8012910:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012912:	2003      	movs	r0, #3
 8012914:	f7fa ff72 	bl	800d7fc <memp_malloc>
 8012918:	6138      	str	r0, [r7, #16]
 801291a:	693b      	ldr	r3, [r7, #16]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d104      	bne.n	801292a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012920:	68b8      	ldr	r0, [r7, #8]
 8012922:	f7fb fe6d 	bl	800e600 <pbuf_free>
    return NULL;
 8012926:	2300      	movs	r3, #0
 8012928:	e061      	b.n	80129ee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012930:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	2200      	movs	r2, #0
 8012936:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	68ba      	ldr	r2, [r7, #8]
 801293c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	891a      	ldrh	r2, [r3, #8]
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	b29b      	uxth	r3, r3
 8012946:	429a      	cmp	r2, r3
 8012948:	d205      	bcs.n	8012956 <tcp_create_segment+0x86>
 801294a:	4b2b      	ldr	r3, [pc, #172]	; (80129f8 <tcp_create_segment+0x128>)
 801294c:	22b0      	movs	r2, #176	; 0xb0
 801294e:	492e      	ldr	r1, [pc, #184]	; (8012a08 <tcp_create_segment+0x138>)
 8012950:	482b      	ldr	r0, [pc, #172]	; (8012a00 <tcp_create_segment+0x130>)
 8012952:	f006 fca9 	bl	80192a8 <iprintf>
  seg->len = p->tot_len - optlen;
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	891a      	ldrh	r2, [r3, #8]
 801295a:	7dfb      	ldrb	r3, [r7, #23]
 801295c:	b29b      	uxth	r3, r3
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	b29a      	uxth	r2, r3
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012966:	2114      	movs	r1, #20
 8012968:	68b8      	ldr	r0, [r7, #8]
 801296a:	f7fb fdb3 	bl	800e4d4 <pbuf_add_header>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d004      	beq.n	801297e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012974:	6938      	ldr	r0, [r7, #16]
 8012976:	f7fd f8d2 	bl	800fb1e <tcp_seg_free>
    return NULL;
 801297a:	2300      	movs	r3, #0
 801297c:	e037      	b.n	80129ee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	685a      	ldr	r2, [r3, #4]
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	8ada      	ldrh	r2, [r3, #22]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	68dc      	ldr	r4, [r3, #12]
 8012990:	4610      	mov	r0, r2
 8012992:	f7fa fa7d 	bl	800ce90 <lwip_htons>
 8012996:	4603      	mov	r3, r0
 8012998:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	8b1a      	ldrh	r2, [r3, #24]
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	68dc      	ldr	r4, [r3, #12]
 80129a2:	4610      	mov	r0, r2
 80129a4:	f7fa fa74 	bl	800ce90 <lwip_htons>
 80129a8:	4603      	mov	r3, r0
 80129aa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	68dc      	ldr	r4, [r3, #12]
 80129b0:	6838      	ldr	r0, [r7, #0]
 80129b2:	f7fa fa82 	bl	800ceba <lwip_htonl>
 80129b6:	4603      	mov	r3, r0
 80129b8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
 80129bc:	089b      	lsrs	r3, r3, #2
 80129be:	b2db      	uxtb	r3, r3
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	3305      	adds	r3, #5
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	031b      	lsls	r3, r3, #12
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	79fb      	ldrb	r3, [r7, #7]
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	4313      	orrs	r3, r2
 80129d0:	b29a      	uxth	r2, r3
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	68dc      	ldr	r4, [r3, #12]
 80129d6:	4610      	mov	r0, r2
 80129d8:	f7fa fa5a 	bl	800ce90 <lwip_htons>
 80129dc:	4603      	mov	r3, r0
 80129de:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	2200      	movs	r2, #0
 80129e6:	749a      	strb	r2, [r3, #18]
 80129e8:	2200      	movs	r2, #0
 80129ea:	74da      	strb	r2, [r3, #19]
  return seg;
 80129ec:	693b      	ldr	r3, [r7, #16]
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	371c      	adds	r7, #28
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd90      	pop	{r4, r7, pc}
 80129f6:	bf00      	nop
 80129f8:	0801bd70 	.word	0x0801bd70
 80129fc:	0801bda4 	.word	0x0801bda4
 8012a00:	0801bdc4 	.word	0x0801bdc4
 8012a04:	0801bdec 	.word	0x0801bdec
 8012a08:	0801be10 	.word	0x0801be10

08012a0c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012a0c:	b590      	push	{r4, r7, lr}
 8012a0e:	b08b      	sub	sp, #44	; 0x2c
 8012a10:	af02      	add	r7, sp, #8
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	460b      	mov	r3, r1
 8012a16:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	61fb      	str	r3, [r7, #28]
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012a20:	2300      	movs	r3, #0
 8012a22:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_split_unsent_seg+0x2c>
 8012a2a:	4b95      	ldr	r3, [pc, #596]	; (8012c80 <tcp_split_unsent_seg+0x274>)
 8012a2c:	f240 324b 	movw	r2, #843	; 0x34b
 8012a30:	4994      	ldr	r1, [pc, #592]	; (8012c84 <tcp_split_unsent_seg+0x278>)
 8012a32:	4895      	ldr	r0, [pc, #596]	; (8012c88 <tcp_split_unsent_seg+0x27c>)
 8012a34:	f006 fc38 	bl	80192a8 <iprintf>

  useg = pcb->unsent;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d102      	bne.n	8012a4a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012a44:	f04f 33ff 	mov.w	r3, #4294967295
 8012a48:	e116      	b.n	8012c78 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012a4a:	887b      	ldrh	r3, [r7, #2]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d109      	bne.n	8012a64 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012a50:	4b8b      	ldr	r3, [pc, #556]	; (8012c80 <tcp_split_unsent_seg+0x274>)
 8012a52:	f240 3253 	movw	r2, #851	; 0x353
 8012a56:	498d      	ldr	r1, [pc, #564]	; (8012c8c <tcp_split_unsent_seg+0x280>)
 8012a58:	488b      	ldr	r0, [pc, #556]	; (8012c88 <tcp_split_unsent_seg+0x27c>)
 8012a5a:	f006 fc25 	bl	80192a8 <iprintf>
    return ERR_VAL;
 8012a5e:	f06f 0305 	mvn.w	r3, #5
 8012a62:	e109      	b.n	8012c78 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	891b      	ldrh	r3, [r3, #8]
 8012a68:	887a      	ldrh	r2, [r7, #2]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d301      	bcc.n	8012a72 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e102      	b.n	8012c78 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a76:	887a      	ldrh	r2, [r7, #2]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d906      	bls.n	8012a8a <tcp_split_unsent_seg+0x7e>
 8012a7c:	4b80      	ldr	r3, [pc, #512]	; (8012c80 <tcp_split_unsent_seg+0x274>)
 8012a7e:	f240 325b 	movw	r2, #859	; 0x35b
 8012a82:	4983      	ldr	r1, [pc, #524]	; (8012c90 <tcp_split_unsent_seg+0x284>)
 8012a84:	4880      	ldr	r0, [pc, #512]	; (8012c88 <tcp_split_unsent_seg+0x27c>)
 8012a86:	f006 fc0f 	bl	80192a8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	891b      	ldrh	r3, [r3, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d106      	bne.n	8012aa0 <tcp_split_unsent_seg+0x94>
 8012a92:	4b7b      	ldr	r3, [pc, #492]	; (8012c80 <tcp_split_unsent_seg+0x274>)
 8012a94:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a98:	497e      	ldr	r1, [pc, #504]	; (8012c94 <tcp_split_unsent_seg+0x288>)
 8012a9a:	487b      	ldr	r0, [pc, #492]	; (8012c88 <tcp_split_unsent_seg+0x27c>)
 8012a9c:	f006 fc04 	bl	80192a8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	7a9b      	ldrb	r3, [r3, #10]
 8012aa4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012aa6:	7bfb      	ldrb	r3, [r7, #15]
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	891a      	ldrh	r2, [r3, #8]
 8012ab6:	887b      	ldrh	r3, [r7, #2]
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012abc:	7bbb      	ldrb	r3, [r7, #14]
 8012abe:	b29a      	uxth	r2, r3
 8012ac0:	89bb      	ldrh	r3, [r7, #12]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aca:	4619      	mov	r1, r3
 8012acc:	2036      	movs	r0, #54	; 0x36
 8012ace:	f7fb fab3 	bl	800e038 <pbuf_alloc>
 8012ad2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 80b7 	beq.w	8012c4a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	891a      	ldrh	r2, [r3, #8]
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	891b      	ldrh	r3, [r3, #8]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	b29a      	uxth	r2, r3
 8012aea:	887b      	ldrh	r3, [r7, #2]
 8012aec:	4413      	add	r3, r2
 8012aee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	6858      	ldr	r0, [r3, #4]
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	685a      	ldr	r2, [r3, #4]
 8012af8:	7bbb      	ldrb	r3, [r7, #14]
 8012afa:	18d1      	adds	r1, r2, r3
 8012afc:	897b      	ldrh	r3, [r7, #10]
 8012afe:	89ba      	ldrh	r2, [r7, #12]
 8012b00:	f7fb ff84 	bl	800ea0c <pbuf_copy_partial>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	89bb      	ldrh	r3, [r7, #12]
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	f040 809f 	bne.w	8012c4e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	899b      	ldrh	r3, [r3, #12]
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fa f9b9 	bl	800ce90 <lwip_htons>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	b2db      	uxtb	r3, r3
 8012b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b26:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012b28:	2300      	movs	r3, #0
 8012b2a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012b2c:	7efb      	ldrb	r3, [r7, #27]
 8012b2e:	f003 0308 	and.w	r3, r3, #8
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d007      	beq.n	8012b46 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012b36:	7efb      	ldrb	r3, [r7, #27]
 8012b38:	f023 0308 	bic.w	r3, r3, #8
 8012b3c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012b3e:	7ebb      	ldrb	r3, [r7, #26]
 8012b40:	f043 0308 	orr.w	r3, r3, #8
 8012b44:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012b46:	7efb      	ldrb	r3, [r7, #27]
 8012b48:	f003 0301 	and.w	r3, r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d007      	beq.n	8012b60 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012b50:	7efb      	ldrb	r3, [r7, #27]
 8012b52:	f023 0301 	bic.w	r3, r3, #1
 8012b56:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012b58:	7ebb      	ldrb	r3, [r7, #26]
 8012b5a:	f043 0301 	orr.w	r3, r3, #1
 8012b5e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	68db      	ldr	r3, [r3, #12]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fa f9a7 	bl	800ceba <lwip_htonl>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	887b      	ldrh	r3, [r7, #2]
 8012b70:	18d1      	adds	r1, r2, r3
 8012b72:	7eba      	ldrb	r2, [r7, #26]
 8012b74:	7bfb      	ldrb	r3, [r7, #15]
 8012b76:	9300      	str	r3, [sp, #0]
 8012b78:	460b      	mov	r3, r1
 8012b7a:	6939      	ldr	r1, [r7, #16]
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7ff fea7 	bl	80128d0 <tcp_create_segment>
 8012b82:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d063      	beq.n	8012c52 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fb fdc4 	bl	800e71c <pbuf_clen>
 8012b94:	4603      	mov	r3, r0
 8012b96:	461a      	mov	r2, r3
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b9e:	1a9b      	subs	r3, r3, r2
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	6858      	ldr	r0, [r3, #4]
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	891a      	ldrh	r2, [r3, #8]
 8012bb2:	89bb      	ldrh	r3, [r7, #12]
 8012bb4:	1ad3      	subs	r3, r2, r3
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4619      	mov	r1, r3
 8012bba:	f7fb fb9b 	bl	800e2f4 <pbuf_realloc>
  useg->len -= remainder;
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	891a      	ldrh	r2, [r3, #8]
 8012bc2:	89bb      	ldrh	r3, [r7, #12]
 8012bc4:	1ad3      	subs	r3, r2, r3
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	68db      	ldr	r3, [r3, #12]
 8012bd0:	899b      	ldrh	r3, [r3, #12]
 8012bd2:	b29c      	uxth	r4, r3
 8012bd4:	7efb      	ldrb	r3, [r7, #27]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fa f959 	bl	800ce90 <lwip_htons>
 8012bde:	4603      	mov	r3, r0
 8012be0:	461a      	mov	r2, r3
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	4322      	orrs	r2, r4
 8012be8:	b292      	uxth	r2, r2
 8012bea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7fb fd93 	bl	800e71c <pbuf_clen>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c00:	4413      	add	r3, r2
 8012c02:	b29a      	uxth	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fb fd84 	bl	800e71c <pbuf_clen>
 8012c14:	4603      	mov	r3, r0
 8012c16:	461a      	mov	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c1e:	4413      	add	r3, r2
 8012c20:	b29a      	uxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	69fa      	ldr	r2, [r7, #28]
 8012c34:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d103      	bne.n	8012c46 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2200      	movs	r2, #0
 8012c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012c46:	2300      	movs	r3, #0
 8012c48:	e016      	b.n	8012c78 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012c4a:	bf00      	nop
 8012c4c:	e002      	b.n	8012c54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c4e:	bf00      	nop
 8012c50:	e000      	b.n	8012c54 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012c52:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d006      	beq.n	8012c68 <tcp_split_unsent_seg+0x25c>
 8012c5a:	4b09      	ldr	r3, [pc, #36]	; (8012c80 <tcp_split_unsent_seg+0x274>)
 8012c5c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012c60:	490d      	ldr	r1, [pc, #52]	; (8012c98 <tcp_split_unsent_seg+0x28c>)
 8012c62:	4809      	ldr	r0, [pc, #36]	; (8012c88 <tcp_split_unsent_seg+0x27c>)
 8012c64:	f006 fb20 	bl	80192a8 <iprintf>
  if (p != NULL) {
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d002      	beq.n	8012c74 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012c6e:	6938      	ldr	r0, [r7, #16]
 8012c70:	f7fb fcc6 	bl	800e600 <pbuf_free>
  }

  return ERR_MEM;
 8012c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3724      	adds	r7, #36	; 0x24
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd90      	pop	{r4, r7, pc}
 8012c80:	0801bd70 	.word	0x0801bd70
 8012c84:	0801c104 	.word	0x0801c104
 8012c88:	0801bdc4 	.word	0x0801bdc4
 8012c8c:	0801c128 	.word	0x0801c128
 8012c90:	0801c14c 	.word	0x0801c14c
 8012c94:	0801c15c 	.word	0x0801c15c
 8012c98:	0801c16c 	.word	0x0801c16c

08012c9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c9c:	b590      	push	{r4, r7, lr}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d106      	bne.n	8012cb8 <tcp_send_fin+0x1c>
 8012caa:	4b21      	ldr	r3, [pc, #132]	; (8012d30 <tcp_send_fin+0x94>)
 8012cac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012cb0:	4920      	ldr	r1, [pc, #128]	; (8012d34 <tcp_send_fin+0x98>)
 8012cb2:	4821      	ldr	r0, [pc, #132]	; (8012d38 <tcp_send_fin+0x9c>)
 8012cb4:	f006 faf8 	bl	80192a8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d02e      	beq.n	8012d1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cc4:	60fb      	str	r3, [r7, #12]
 8012cc6:	e002      	b.n	8012cce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d1f8      	bne.n	8012cc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	899b      	ldrh	r3, [r3, #12]
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7fa f8d6 	bl	800ce90 <lwip_htons>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	f003 0307 	and.w	r3, r3, #7
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d116      	bne.n	8012d1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	899b      	ldrh	r3, [r3, #12]
 8012cf6:	b29c      	uxth	r4, r3
 8012cf8:	2001      	movs	r0, #1
 8012cfa:	f7fa f8c9 	bl	800ce90 <lwip_htons>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	461a      	mov	r2, r3
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	68db      	ldr	r3, [r3, #12]
 8012d06:	4322      	orrs	r2, r4
 8012d08:	b292      	uxth	r2, r2
 8012d0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	8b5b      	ldrh	r3, [r3, #26]
 8012d10:	f043 0320 	orr.w	r3, r3, #32
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	e004      	b.n	8012d28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012d1e:	2101      	movs	r1, #1
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f000 f80b 	bl	8012d3c <tcp_enqueue_flags>
 8012d26:	4603      	mov	r3, r0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3714      	adds	r7, #20
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd90      	pop	{r4, r7, pc}
 8012d30:	0801bd70 	.word	0x0801bd70
 8012d34:	0801c178 	.word	0x0801c178
 8012d38:	0801bdc4 	.word	0x0801bdc4

08012d3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b08a      	sub	sp, #40	; 0x28
 8012d40:	af02      	add	r7, sp, #8
 8012d42:	6078      	str	r0, [r7, #4]
 8012d44:	460b      	mov	r3, r1
 8012d46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012d50:	78fb      	ldrb	r3, [r7, #3]
 8012d52:	f003 0303 	and.w	r3, r3, #3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d106      	bne.n	8012d68 <tcp_enqueue_flags+0x2c>
 8012d5a:	4b67      	ldr	r3, [pc, #412]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012d5c:	f240 4211 	movw	r2, #1041	; 0x411
 8012d60:	4966      	ldr	r1, [pc, #408]	; (8012efc <tcp_enqueue_flags+0x1c0>)
 8012d62:	4867      	ldr	r0, [pc, #412]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012d64:	f006 faa0 	bl	80192a8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d106      	bne.n	8012d7c <tcp_enqueue_flags+0x40>
 8012d6e:	4b62      	ldr	r3, [pc, #392]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012d70:	f240 4213 	movw	r2, #1043	; 0x413
 8012d74:	4963      	ldr	r1, [pc, #396]	; (8012f04 <tcp_enqueue_flags+0x1c8>)
 8012d76:	4862      	ldr	r0, [pc, #392]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012d78:	f006 fa96 	bl	80192a8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012d7c:	78fb      	ldrb	r3, [r7, #3]
 8012d7e:	f003 0302 	and.w	r3, r3, #2
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012d86:	2301      	movs	r3, #1
 8012d88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d8a:	7ffb      	ldrb	r3, [r7, #31]
 8012d8c:	009b      	lsls	r3, r3, #2
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	f003 0304 	and.w	r3, r3, #4
 8012d94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d9e:	4619      	mov	r1, r3
 8012da0:	2036      	movs	r0, #54	; 0x36
 8012da2:	f7fb f949 	bl	800e038 <pbuf_alloc>
 8012da6:	6138      	str	r0, [r7, #16]
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d109      	bne.n	8012dc2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	8b5b      	ldrh	r3, [r3, #26]
 8012db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8012dc0:	e095      	b.n	8012eee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	895a      	ldrh	r2, [r3, #10]
 8012dc6:	7dfb      	ldrb	r3, [r7, #23]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d206      	bcs.n	8012ddc <tcp_enqueue_flags+0xa0>
 8012dce:	4b4a      	ldr	r3, [pc, #296]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012dd0:	f240 4239 	movw	r2, #1081	; 0x439
 8012dd4:	494c      	ldr	r1, [pc, #304]	; (8012f08 <tcp_enqueue_flags+0x1cc>)
 8012dd6:	484a      	ldr	r0, [pc, #296]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012dd8:	f006 fa66 	bl	80192a8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012de0:	78fa      	ldrb	r2, [r7, #3]
 8012de2:	7ffb      	ldrb	r3, [r7, #31]
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	460b      	mov	r3, r1
 8012de8:	6939      	ldr	r1, [r7, #16]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff fd70 	bl	80128d0 <tcp_create_segment>
 8012df0:	60f8      	str	r0, [r7, #12]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d109      	bne.n	8012e0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	8b5b      	ldrh	r3, [r3, #26]
 8012dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012e06:	f04f 33ff 	mov.w	r3, #4294967295
 8012e0a:	e070      	b.n	8012eee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	68db      	ldr	r3, [r3, #12]
 8012e10:	f003 0303 	and.w	r3, r3, #3
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d006      	beq.n	8012e26 <tcp_enqueue_flags+0xea>
 8012e18:	4b37      	ldr	r3, [pc, #220]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012e1a:	f240 4242 	movw	r2, #1090	; 0x442
 8012e1e:	493b      	ldr	r1, [pc, #236]	; (8012f0c <tcp_enqueue_flags+0x1d0>)
 8012e20:	4837      	ldr	r0, [pc, #220]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012e22:	f006 fa41 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	891b      	ldrh	r3, [r3, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d006      	beq.n	8012e3c <tcp_enqueue_flags+0x100>
 8012e2e:	4b32      	ldr	r3, [pc, #200]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012e30:	f240 4243 	movw	r2, #1091	; 0x443
 8012e34:	4936      	ldr	r1, [pc, #216]	; (8012f10 <tcp_enqueue_flags+0x1d4>)
 8012e36:	4832      	ldr	r0, [pc, #200]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012e38:	f006 fa36 	bl	80192a8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d103      	bne.n	8012e4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	68fa      	ldr	r2, [r7, #12]
 8012e48:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e4a:	e00d      	b.n	8012e68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e50:	61bb      	str	r3, [r7, #24]
 8012e52:	e002      	b.n	8012e5a <tcp_enqueue_flags+0x11e>
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	61bb      	str	r3, [r7, #24]
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d1f8      	bne.n	8012e54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	68fa      	ldr	r2, [r7, #12]
 8012e66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012e70:	78fb      	ldrb	r3, [r7, #3]
 8012e72:	f003 0302 	and.w	r3, r3, #2
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d104      	bne.n	8012e84 <tcp_enqueue_flags+0x148>
 8012e7a:	78fb      	ldrb	r3, [r7, #3]
 8012e7c:	f003 0301 	and.w	r3, r3, #1
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d004      	beq.n	8012e8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e88:	1c5a      	adds	r2, r3, #1
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012e8e:	78fb      	ldrb	r3, [r7, #3]
 8012e90:	f003 0301 	and.w	r3, r3, #1
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d006      	beq.n	8012ea6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	8b5b      	ldrh	r3, [r3, #26]
 8012e9c:	f043 0320 	orr.w	r3, r3, #32
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fb fc36 	bl	800e71c <pbuf_clen>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012eba:	4413      	add	r3, r2
 8012ebc:	b29a      	uxth	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d00e      	beq.n	8012eec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d10a      	bne.n	8012eec <tcp_enqueue_flags+0x1b0>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d106      	bne.n	8012eec <tcp_enqueue_flags+0x1b0>
 8012ede:	4b06      	ldr	r3, [pc, #24]	; (8012ef8 <tcp_enqueue_flags+0x1bc>)
 8012ee0:	f240 4265 	movw	r2, #1125	; 0x465
 8012ee4:	490b      	ldr	r1, [pc, #44]	; (8012f14 <tcp_enqueue_flags+0x1d8>)
 8012ee6:	4806      	ldr	r0, [pc, #24]	; (8012f00 <tcp_enqueue_flags+0x1c4>)
 8012ee8:	f006 f9de 	bl	80192a8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012eec:	2300      	movs	r3, #0
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3720      	adds	r7, #32
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}
 8012ef6:	bf00      	nop
 8012ef8:	0801bd70 	.word	0x0801bd70
 8012efc:	0801c194 	.word	0x0801c194
 8012f00:	0801bdc4 	.word	0x0801bdc4
 8012f04:	0801c1ec 	.word	0x0801c1ec
 8012f08:	0801c20c 	.word	0x0801c20c
 8012f0c:	0801c248 	.word	0x0801c248
 8012f10:	0801c260 	.word	0x0801c260
 8012f14:	0801c28c 	.word	0x0801c28c

08012f18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012f18:	b5b0      	push	{r4, r5, r7, lr}
 8012f1a:	b08a      	sub	sp, #40	; 0x28
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d106      	bne.n	8012f34 <tcp_output+0x1c>
 8012f26:	4b9e      	ldr	r3, [pc, #632]	; (80131a0 <tcp_output+0x288>)
 8012f28:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012f2c:	499d      	ldr	r1, [pc, #628]	; (80131a4 <tcp_output+0x28c>)
 8012f2e:	489e      	ldr	r0, [pc, #632]	; (80131a8 <tcp_output+0x290>)
 8012f30:	f006 f9ba 	bl	80192a8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	7d1b      	ldrb	r3, [r3, #20]
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d106      	bne.n	8012f4a <tcp_output+0x32>
 8012f3c:	4b98      	ldr	r3, [pc, #608]	; (80131a0 <tcp_output+0x288>)
 8012f3e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012f42:	499a      	ldr	r1, [pc, #616]	; (80131ac <tcp_output+0x294>)
 8012f44:	4898      	ldr	r0, [pc, #608]	; (80131a8 <tcp_output+0x290>)
 8012f46:	f006 f9af 	bl	80192a8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012f4a:	4b99      	ldr	r3, [pc, #612]	; (80131b0 <tcp_output+0x298>)
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	687a      	ldr	r2, [r7, #4]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d101      	bne.n	8012f58 <tcp_output+0x40>
    return ERR_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	e1ce      	b.n	80132f6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f64:	4293      	cmp	r3, r2
 8012f66:	bf28      	it	cs
 8012f68:	4613      	movcs	r3, r2
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f72:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d10b      	bne.n	8012f92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	8b5b      	ldrh	r3, [r3, #26]
 8012f7e:	f003 0302 	and.w	r3, r3, #2
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f000 81aa 	beq.w	80132dc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 fdcb 	bl	8013b24 <tcp_send_empty_ack>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	e1b1      	b.n	80132f6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f92:	6879      	ldr	r1, [r7, #4]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3304      	adds	r3, #4
 8012f98:	461a      	mov	r2, r3
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f7ff fc7c 	bl	8012898 <tcp_route>
 8012fa0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d102      	bne.n	8012fae <tcp_output+0x96>
    return ERR_RTE;
 8012fa8:	f06f 0303 	mvn.w	r3, #3
 8012fac:	e1a3      	b.n	80132f6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d003      	beq.n	8012fbc <tcp_output+0xa4>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d111      	bne.n	8012fe0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d002      	beq.n	8012fc8 <tcp_output+0xb0>
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	3304      	adds	r3, #4
 8012fc6:	e000      	b.n	8012fca <tcp_output+0xb2>
 8012fc8:	2300      	movs	r3, #0
 8012fca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d102      	bne.n	8012fd8 <tcp_output+0xc0>
      return ERR_RTE;
 8012fd2:	f06f 0303 	mvn.w	r3, #3
 8012fd6:	e18e      	b.n	80132f6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7f9 ff67 	bl	800ceba <lwip_htonl>
 8012fec:	4602      	mov	r2, r0
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ff6:	8912      	ldrh	r2, [r2, #8]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	69ba      	ldr	r2, [r7, #24]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d227      	bcs.n	8013050 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013006:	461a      	mov	r2, r3
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	4293      	cmp	r3, r2
 801300c:	d114      	bne.n	8013038 <tcp_output+0x120>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013012:	2b00      	cmp	r3, #0
 8013014:	d110      	bne.n	8013038 <tcp_output+0x120>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10b      	bne.n	8013038 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2200      	movs	r2, #0
 8013024:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2201      	movs	r2, #1
 801302c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2200      	movs	r2, #0
 8013034:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	8b5b      	ldrh	r3, [r3, #26]
 801303c:	f003 0302 	and.w	r3, r3, #2
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 814d 	beq.w	80132e0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f000 fd6c 	bl	8013b24 <tcp_send_empty_ack>
 801304c:	4603      	mov	r3, r0
 801304e:	e152      	b.n	80132f6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801305c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 811c 	beq.w	801329e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013066:	e002      	b.n	801306e <tcp_output+0x156>
 8013068:	6a3b      	ldr	r3, [r7, #32]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	623b      	str	r3, [r7, #32]
 801306e:	6a3b      	ldr	r3, [r7, #32]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1f8      	bne.n	8013068 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013076:	e112      	b.n	801329e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	899b      	ldrh	r3, [r3, #12]
 801307e:	b29b      	uxth	r3, r3
 8013080:	4618      	mov	r0, r3
 8013082:	f7f9 ff05 	bl	800ce90 <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	b2db      	uxtb	r3, r3
 801308a:	f003 0304 	and.w	r3, r3, #4
 801308e:	2b00      	cmp	r3, #0
 8013090:	d006      	beq.n	80130a0 <tcp_output+0x188>
 8013092:	4b43      	ldr	r3, [pc, #268]	; (80131a0 <tcp_output+0x288>)
 8013094:	f240 5236 	movw	r2, #1334	; 0x536
 8013098:	4946      	ldr	r1, [pc, #280]	; (80131b4 <tcp_output+0x29c>)
 801309a:	4843      	ldr	r0, [pc, #268]	; (80131a8 <tcp_output+0x290>)
 801309c:	f006 f904 	bl	80192a8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d01f      	beq.n	80130e8 <tcp_output+0x1d0>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	8b5b      	ldrh	r3, [r3, #26]
 80130ac:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d119      	bne.n	80130e8 <tcp_output+0x1d0>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d00b      	beq.n	80130d4 <tcp_output+0x1bc>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d110      	bne.n	80130e8 <tcp_output+0x1d0>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ca:	891a      	ldrh	r2, [r3, #8]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d209      	bcs.n	80130e8 <tcp_output+0x1d0>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d004      	beq.n	80130e8 <tcp_output+0x1d0>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130e4:	2b08      	cmp	r3, #8
 80130e6:	d901      	bls.n	80130ec <tcp_output+0x1d4>
 80130e8:	2301      	movs	r3, #1
 80130ea:	e000      	b.n	80130ee <tcp_output+0x1d6>
 80130ec:	2300      	movs	r3, #0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	8b5b      	ldrh	r3, [r3, #26]
 80130f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	f000 80e4 	beq.w	80132c8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	7d1b      	ldrb	r3, [r3, #20]
 8013104:	2b02      	cmp	r3, #2
 8013106:	d00d      	beq.n	8013124 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	899b      	ldrh	r3, [r3, #12]
 801310e:	b29c      	uxth	r4, r3
 8013110:	2010      	movs	r0, #16
 8013112:	f7f9 febd 	bl	800ce90 <lwip_htons>
 8013116:	4603      	mov	r3, r0
 8013118:	461a      	mov	r2, r3
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	68db      	ldr	r3, [r3, #12]
 801311e:	4322      	orrs	r2, r4
 8013120:	b292      	uxth	r2, r2
 8013122:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013124:	697a      	ldr	r2, [r7, #20]
 8013126:	6879      	ldr	r1, [r7, #4]
 8013128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801312a:	f000 f909 	bl	8013340 <tcp_output_segment>
 801312e:	4603      	mov	r3, r0
 8013130:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d009      	beq.n	801314e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	8b5b      	ldrh	r3, [r3, #26]
 801313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013142:	b29a      	uxth	r2, r3
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	835a      	strh	r2, [r3, #26]
      return err;
 8013148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801314c:	e0d3      	b.n	80132f6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	7d1b      	ldrb	r3, [r3, #20]
 801315a:	2b02      	cmp	r3, #2
 801315c:	d006      	beq.n	801316c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	8b5b      	ldrh	r3, [r3, #26]
 8013162:	f023 0303 	bic.w	r3, r3, #3
 8013166:	b29a      	uxth	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316e:	68db      	ldr	r3, [r3, #12]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	4618      	mov	r0, r3
 8013174:	f7f9 fea1 	bl	800ceba <lwip_htonl>
 8013178:	4604      	mov	r4, r0
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	891b      	ldrh	r3, [r3, #8]
 801317e:	461d      	mov	r5, r3
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	899b      	ldrh	r3, [r3, #12]
 8013186:	b29b      	uxth	r3, r3
 8013188:	4618      	mov	r0, r3
 801318a:	f7f9 fe81 	bl	800ce90 <lwip_htons>
 801318e:	4603      	mov	r3, r0
 8013190:	b2db      	uxtb	r3, r3
 8013192:	f003 0303 	and.w	r3, r3, #3
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00e      	beq.n	80131b8 <tcp_output+0x2a0>
 801319a:	2301      	movs	r3, #1
 801319c:	e00d      	b.n	80131ba <tcp_output+0x2a2>
 801319e:	bf00      	nop
 80131a0:	0801bd70 	.word	0x0801bd70
 80131a4:	0801c2b4 	.word	0x0801c2b4
 80131a8:	0801bdc4 	.word	0x0801bdc4
 80131ac:	0801c2cc 	.word	0x0801c2cc
 80131b0:	2000d090 	.word	0x2000d090
 80131b4:	0801c2f4 	.word	0x0801c2f4
 80131b8:	2300      	movs	r3, #0
 80131ba:	442b      	add	r3, r5
 80131bc:	4423      	add	r3, r4
 80131be:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	da02      	bge.n	80131d2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80131d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d4:	891b      	ldrh	r3, [r3, #8]
 80131d6:	461c      	mov	r4, r3
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	899b      	ldrh	r3, [r3, #12]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f9 fe55 	bl	800ce90 <lwip_htons>
 80131e6:	4603      	mov	r3, r0
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	f003 0303 	and.w	r3, r3, #3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d001      	beq.n	80131f6 <tcp_output+0x2de>
 80131f2:	2301      	movs	r3, #1
 80131f4:	e000      	b.n	80131f8 <tcp_output+0x2e0>
 80131f6:	2300      	movs	r3, #0
 80131f8:	4423      	add	r3, r4
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d049      	beq.n	8013292 <tcp_output+0x37a>
      seg->next = NULL;
 80131fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013200:	2200      	movs	r2, #0
 8013202:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013208:	2b00      	cmp	r3, #0
 801320a:	d105      	bne.n	8013218 <tcp_output+0x300>
        pcb->unacked = seg;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013210:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013214:	623b      	str	r3, [r7, #32]
 8013216:	e03f      	b.n	8013298 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321a:	68db      	ldr	r3, [r3, #12]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	4618      	mov	r0, r3
 8013220:	f7f9 fe4b 	bl	800ceba <lwip_htonl>
 8013224:	4604      	mov	r4, r0
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	4618      	mov	r0, r3
 801322e:	f7f9 fe44 	bl	800ceba <lwip_htonl>
 8013232:	4603      	mov	r3, r0
 8013234:	1ae3      	subs	r3, r4, r3
 8013236:	2b00      	cmp	r3, #0
 8013238:	da24      	bge.n	8013284 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	3370      	adds	r3, #112	; 0x70
 801323e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013240:	e002      	b.n	8013248 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013242:	69fb      	ldr	r3, [r7, #28]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d011      	beq.n	8013274 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68db      	ldr	r3, [r3, #12]
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	f7f9 fe2e 	bl	800ceba <lwip_htonl>
 801325e:	4604      	mov	r4, r0
 8013260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013262:	68db      	ldr	r3, [r3, #12]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	4618      	mov	r0, r3
 8013268:	f7f9 fe27 	bl	800ceba <lwip_htonl>
 801326c:	4603      	mov	r3, r0
 801326e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013270:	2b00      	cmp	r3, #0
 8013272:	dbe6      	blt.n	8013242 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801327c:	69fb      	ldr	r3, [r7, #28]
 801327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013280:	601a      	str	r2, [r3, #0]
 8013282:	e009      	b.n	8013298 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013284:	6a3b      	ldr	r3, [r7, #32]
 8013286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013288:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801328a:	6a3b      	ldr	r3, [r7, #32]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	623b      	str	r3, [r7, #32]
 8013290:	e002      	b.n	8013298 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013294:	f7fc fc43 	bl	800fb1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801329c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d012      	beq.n	80132ca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80132a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7f9 fe05 	bl	800ceba <lwip_htonl>
 80132b0:	4602      	mov	r2, r0
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ba:	8912      	ldrh	r2, [r2, #8]
 80132bc:	4413      	add	r3, r2
  while (seg != NULL &&
 80132be:	69ba      	ldr	r2, [r7, #24]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	f4bf aed9 	bcs.w	8013078 <tcp_output+0x160>
 80132c6:	e000      	b.n	80132ca <tcp_output+0x3b2>
      break;
 80132c8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d108      	bne.n	80132e4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2200      	movs	r2, #0
 80132d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80132da:	e004      	b.n	80132e6 <tcp_output+0x3ce>
    goto output_done;
 80132dc:	bf00      	nop
 80132de:	e002      	b.n	80132e6 <tcp_output+0x3ce>
    goto output_done;
 80132e0:	bf00      	nop
 80132e2:	e000      	b.n	80132e6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80132e4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	8b5b      	ldrh	r3, [r3, #26]
 80132ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80132f4:	2300      	movs	r3, #0
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3728      	adds	r7, #40	; 0x28
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bdb0      	pop	{r4, r5, r7, pc}
 80132fe:	bf00      	nop

08013300 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d106      	bne.n	801331c <tcp_output_segment_busy+0x1c>
 801330e:	4b09      	ldr	r3, [pc, #36]	; (8013334 <tcp_output_segment_busy+0x34>)
 8013310:	f240 529a 	movw	r2, #1434	; 0x59a
 8013314:	4908      	ldr	r1, [pc, #32]	; (8013338 <tcp_output_segment_busy+0x38>)
 8013316:	4809      	ldr	r0, [pc, #36]	; (801333c <tcp_output_segment_busy+0x3c>)
 8013318:	f005 ffc6 	bl	80192a8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	7b9b      	ldrb	r3, [r3, #14]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d001      	beq.n	801332a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013326:	2301      	movs	r3, #1
 8013328:	e000      	b.n	801332c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	0801bd70 	.word	0x0801bd70
 8013338:	0801c30c 	.word	0x0801c30c
 801333c:	0801bdc4 	.word	0x0801bdc4

08013340 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013340:	b5b0      	push	{r4, r5, r7, lr}
 8013342:	b08c      	sub	sp, #48	; 0x30
 8013344:	af04      	add	r7, sp, #16
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <tcp_output_segment+0x20>
 8013352:	4b63      	ldr	r3, [pc, #396]	; (80134e0 <tcp_output_segment+0x1a0>)
 8013354:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013358:	4962      	ldr	r1, [pc, #392]	; (80134e4 <tcp_output_segment+0x1a4>)
 801335a:	4863      	ldr	r0, [pc, #396]	; (80134e8 <tcp_output_segment+0x1a8>)
 801335c:	f005 ffa4 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d106      	bne.n	8013374 <tcp_output_segment+0x34>
 8013366:	4b5e      	ldr	r3, [pc, #376]	; (80134e0 <tcp_output_segment+0x1a0>)
 8013368:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801336c:	495f      	ldr	r1, [pc, #380]	; (80134ec <tcp_output_segment+0x1ac>)
 801336e:	485e      	ldr	r0, [pc, #376]	; (80134e8 <tcp_output_segment+0x1a8>)
 8013370:	f005 ff9a 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <tcp_output_segment+0x48>
 801337a:	4b59      	ldr	r3, [pc, #356]	; (80134e0 <tcp_output_segment+0x1a0>)
 801337c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013380:	495b      	ldr	r1, [pc, #364]	; (80134f0 <tcp_output_segment+0x1b0>)
 8013382:	4859      	ldr	r0, [pc, #356]	; (80134e8 <tcp_output_segment+0x1a8>)
 8013384:	f005 ff90 	bl	80192a8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013388:	68f8      	ldr	r0, [r7, #12]
 801338a:	f7ff ffb9 	bl	8013300 <tcp_output_segment_busy>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d001      	beq.n	8013398 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013394:	2300      	movs	r3, #0
 8013396:	e09f      	b.n	80134d8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	68dc      	ldr	r4, [r3, #12]
 80133a0:	4610      	mov	r0, r2
 80133a2:	f7f9 fd8a 	bl	800ceba <lwip_htonl>
 80133a6:	4603      	mov	r3, r0
 80133a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	68dc      	ldr	r4, [r3, #12]
 80133b2:	4610      	mov	r0, r2
 80133b4:	f7f9 fd6c 	bl	800ce90 <lwip_htons>
 80133b8:	4603      	mov	r3, r0
 80133ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80133c4:	441a      	add	r2, r3
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	3314      	adds	r3, #20
 80133d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	7a9b      	ldrb	r3, [r3, #10]
 80133d6:	f003 0301 	and.w	r3, r3, #1
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d015      	beq.n	801340a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	3304      	adds	r3, #4
 80133e2:	461a      	mov	r2, r3
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80133ea:	f7fc fe8f 	bl	801010c <tcp_eff_send_mss_netif>
 80133ee:	4603      	mov	r3, r0
 80133f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80133f2:	8b7b      	ldrh	r3, [r7, #26]
 80133f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7f9 fd5e 	bl	800ceba <lwip_htonl>
 80133fe:	4602      	mov	r2, r0
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	3304      	adds	r3, #4
 8013408:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801340a:	68bb      	ldr	r3, [r7, #8]
 801340c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013410:	2b00      	cmp	r3, #0
 8013412:	da02      	bge.n	801341a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	2200      	movs	r2, #0
 8013418:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801341e:	2b00      	cmp	r3, #0
 8013420:	d10c      	bne.n	801343c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013422:	4b34      	ldr	r3, [pc, #208]	; (80134f4 <tcp_output_segment+0x1b4>)
 8013424:	681a      	ldr	r2, [r3, #0]
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	68db      	ldr	r3, [r3, #12]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	4618      	mov	r0, r3
 8013432:	f7f9 fd42 	bl	800ceba <lwip_htonl>
 8013436:	4602      	mov	r2, r0
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	68da      	ldr	r2, [r3, #12]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	1ad3      	subs	r3, r2, r3
 8013448:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	8959      	ldrh	r1, [r3, #10]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	8b3a      	ldrh	r2, [r7, #24]
 8013456:	1a8a      	subs	r2, r1, r2
 8013458:	b292      	uxth	r2, r2
 801345a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	8919      	ldrh	r1, [r3, #8]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	8b3a      	ldrh	r2, [r7, #24]
 8013468:	1a8a      	subs	r2, r1, r2
 801346a:	b292      	uxth	r2, r2
 801346c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	68fa      	ldr	r2, [r7, #12]
 8013474:	68d2      	ldr	r2, [r2, #12]
 8013476:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	2200      	movs	r2, #0
 801347e:	741a      	strb	r2, [r3, #16]
 8013480:	2200      	movs	r2, #0
 8013482:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	f103 0214 	add.w	r2, r3, #20
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	7a9b      	ldrb	r3, [r3, #10]
 8013490:	009b      	lsls	r3, r3, #2
 8013492:	f003 0304 	and.w	r3, r3, #4
 8013496:	4413      	add	r3, r2
 8013498:	69fa      	ldr	r2, [r7, #28]
 801349a:	429a      	cmp	r2, r3
 801349c:	d006      	beq.n	80134ac <tcp_output_segment+0x16c>
 801349e:	4b10      	ldr	r3, [pc, #64]	; (80134e0 <tcp_output_segment+0x1a0>)
 80134a0:	f240 621c 	movw	r2, #1564	; 0x61c
 80134a4:	4914      	ldr	r1, [pc, #80]	; (80134f8 <tcp_output_segment+0x1b8>)
 80134a6:	4810      	ldr	r0, [pc, #64]	; (80134e8 <tcp_output_segment+0x1a8>)
 80134a8:	f005 fefe 	bl	80192a8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	6858      	ldr	r0, [r3, #4]
 80134b0:	68b9      	ldr	r1, [r7, #8]
 80134b2:	68bb      	ldr	r3, [r7, #8]
 80134b4:	1d1c      	adds	r4, r3, #4
 80134b6:	68bb      	ldr	r3, [r7, #8]
 80134b8:	7add      	ldrb	r5, [r3, #11]
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	7a9b      	ldrb	r3, [r3, #10]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	9202      	str	r2, [sp, #8]
 80134c2:	2206      	movs	r2, #6
 80134c4:	9201      	str	r2, [sp, #4]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	462b      	mov	r3, r5
 80134ca:	4622      	mov	r2, r4
 80134cc:	f004 fc1c 	bl	8017d08 <ip4_output_if>
 80134d0:	4603      	mov	r3, r0
 80134d2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80134d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3720      	adds	r7, #32
 80134dc:	46bd      	mov	sp, r7
 80134de:	bdb0      	pop	{r4, r5, r7, pc}
 80134e0:	0801bd70 	.word	0x0801bd70
 80134e4:	0801c334 	.word	0x0801c334
 80134e8:	0801bdc4 	.word	0x0801bdc4
 80134ec:	0801c354 	.word	0x0801c354
 80134f0:	0801c374 	.word	0x0801c374
 80134f4:	2000d080 	.word	0x2000d080
 80134f8:	0801c398 	.word	0x0801c398

080134fc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80134fc:	b5b0      	push	{r4, r5, r7, lr}
 80134fe:	b084      	sub	sp, #16
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d106      	bne.n	8013518 <tcp_rexmit_rto_prepare+0x1c>
 801350a:	4b31      	ldr	r3, [pc, #196]	; (80135d0 <tcp_rexmit_rto_prepare+0xd4>)
 801350c:	f240 6263 	movw	r2, #1635	; 0x663
 8013510:	4930      	ldr	r1, [pc, #192]	; (80135d4 <tcp_rexmit_rto_prepare+0xd8>)
 8013512:	4831      	ldr	r0, [pc, #196]	; (80135d8 <tcp_rexmit_rto_prepare+0xdc>)
 8013514:	f005 fec8 	bl	80192a8 <iprintf>

  if (pcb->unacked == NULL) {
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801351c:	2b00      	cmp	r3, #0
 801351e:	d102      	bne.n	8013526 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013520:	f06f 0305 	mvn.w	r3, #5
 8013524:	e050      	b.n	80135c8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801352a:	60fb      	str	r3, [r7, #12]
 801352c:	e00b      	b.n	8013546 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7ff fee6 	bl	8013300 <tcp_output_segment_busy>
 8013534:	4603      	mov	r3, r0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d002      	beq.n	8013540 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801353a:	f06f 0305 	mvn.w	r3, #5
 801353e:	e043      	b.n	80135c8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	60fb      	str	r3, [r7, #12]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1ef      	bne.n	801352e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801354e:	68f8      	ldr	r0, [r7, #12]
 8013550:	f7ff fed6 	bl	8013300 <tcp_output_segment_busy>
 8013554:	4603      	mov	r3, r0
 8013556:	2b00      	cmp	r3, #0
 8013558:	d002      	beq.n	8013560 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801355a:	f06f 0305 	mvn.w	r3, #5
 801355e:	e033      	b.n	80135c8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	8b5b      	ldrh	r3, [r3, #26]
 801357a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801357e:	b29a      	uxth	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	4618      	mov	r0, r3
 801358c:	f7f9 fc95 	bl	800ceba <lwip_htonl>
 8013590:	4604      	mov	r4, r0
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	891b      	ldrh	r3, [r3, #8]
 8013596:	461d      	mov	r5, r3
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	899b      	ldrh	r3, [r3, #12]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f9 fc75 	bl	800ce90 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	b2db      	uxtb	r3, r3
 80135aa:	f003 0303 	and.w	r3, r3, #3
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d001      	beq.n	80135b6 <tcp_rexmit_rto_prepare+0xba>
 80135b2:	2301      	movs	r3, #1
 80135b4:	e000      	b.n	80135b8 <tcp_rexmit_rto_prepare+0xbc>
 80135b6:	2300      	movs	r3, #0
 80135b8:	442b      	add	r3, r5
 80135ba:	18e2      	adds	r2, r4, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2200      	movs	r2, #0
 80135c4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80135c6:	2300      	movs	r3, #0
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bdb0      	pop	{r4, r5, r7, pc}
 80135d0:	0801bd70 	.word	0x0801bd70
 80135d4:	0801c3ac 	.word	0x0801c3ac
 80135d8:	0801bdc4 	.word	0x0801bdc4

080135dc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d106      	bne.n	80135f8 <tcp_rexmit_rto_commit+0x1c>
 80135ea:	4b0d      	ldr	r3, [pc, #52]	; (8013620 <tcp_rexmit_rto_commit+0x44>)
 80135ec:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80135f0:	490c      	ldr	r1, [pc, #48]	; (8013624 <tcp_rexmit_rto_commit+0x48>)
 80135f2:	480d      	ldr	r0, [pc, #52]	; (8013628 <tcp_rexmit_rto_commit+0x4c>)
 80135f4:	f005 fe58 	bl	80192a8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80135fe:	2bff      	cmp	r3, #255	; 0xff
 8013600:	d007      	beq.n	8013612 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013608:	3301      	adds	r3, #1
 801360a:	b2da      	uxtb	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f7ff fc80 	bl	8012f18 <tcp_output>
}
 8013618:	bf00      	nop
 801361a:	3708      	adds	r7, #8
 801361c:	46bd      	mov	sp, r7
 801361e:	bd80      	pop	{r7, pc}
 8013620:	0801bd70 	.word	0x0801bd70
 8013624:	0801c3d0 	.word	0x0801c3d0
 8013628:	0801bdc4 	.word	0x0801bdc4

0801362c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d106      	bne.n	8013648 <tcp_rexmit_rto+0x1c>
 801363a:	4b0a      	ldr	r3, [pc, #40]	; (8013664 <tcp_rexmit_rto+0x38>)
 801363c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013640:	4909      	ldr	r1, [pc, #36]	; (8013668 <tcp_rexmit_rto+0x3c>)
 8013642:	480a      	ldr	r0, [pc, #40]	; (801366c <tcp_rexmit_rto+0x40>)
 8013644:	f005 fe30 	bl	80192a8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f7ff ff57 	bl	80134fc <tcp_rexmit_rto_prepare>
 801364e:	4603      	mov	r3, r0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d102      	bne.n	801365a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7ff ffc1 	bl	80135dc <tcp_rexmit_rto_commit>
  }
}
 801365a:	bf00      	nop
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	0801bd70 	.word	0x0801bd70
 8013668:	0801c3f4 	.word	0x0801c3f4
 801366c:	0801bdc4 	.word	0x0801bdc4

08013670 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013670:	b590      	push	{r4, r7, lr}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d106      	bne.n	801368c <tcp_rexmit+0x1c>
 801367e:	4b2f      	ldr	r3, [pc, #188]	; (801373c <tcp_rexmit+0xcc>)
 8013680:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013684:	492e      	ldr	r1, [pc, #184]	; (8013740 <tcp_rexmit+0xd0>)
 8013686:	482f      	ldr	r0, [pc, #188]	; (8013744 <tcp_rexmit+0xd4>)
 8013688:	f005 fe0e 	bl	80192a8 <iprintf>

  if (pcb->unacked == NULL) {
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013690:	2b00      	cmp	r3, #0
 8013692:	d102      	bne.n	801369a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013694:	f06f 0305 	mvn.w	r3, #5
 8013698:	e04c      	b.n	8013734 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801369e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80136a0:	68b8      	ldr	r0, [r7, #8]
 80136a2:	f7ff fe2d 	bl	8013300 <tcp_output_segment_busy>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d002      	beq.n	80136b2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80136ac:	f06f 0305 	mvn.w	r3, #5
 80136b0:	e040      	b.n	8013734 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	681a      	ldr	r2, [r3, #0]
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	336c      	adds	r3, #108	; 0x6c
 80136be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136c0:	e002      	b.n	80136c8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d011      	beq.n	80136f4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	4618      	mov	r0, r3
 80136da:	f7f9 fbee 	bl	800ceba <lwip_htonl>
 80136de:	4604      	mov	r4, r0
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7f9 fbe7 	bl	800ceba <lwip_htonl>
 80136ec:	4603      	mov	r3, r0
 80136ee:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	dbe6      	blt.n	80136c2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681a      	ldr	r2, [r3, #0]
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d103      	bne.n	8013712 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2200      	movs	r2, #0
 801370e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013718:	2bff      	cmp	r3, #255	; 0xff
 801371a:	d007      	beq.n	801372c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013722:	3301      	adds	r3, #1
 8013724:	b2da      	uxtb	r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	2200      	movs	r2, #0
 8013730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3714      	adds	r7, #20
 8013738:	46bd      	mov	sp, r7
 801373a:	bd90      	pop	{r4, r7, pc}
 801373c:	0801bd70 	.word	0x0801bd70
 8013740:	0801c410 	.word	0x0801c410
 8013744:	0801bdc4 	.word	0x0801bdc4

08013748 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d106      	bne.n	8013764 <tcp_rexmit_fast+0x1c>
 8013756:	4b2a      	ldr	r3, [pc, #168]	; (8013800 <tcp_rexmit_fast+0xb8>)
 8013758:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801375c:	4929      	ldr	r1, [pc, #164]	; (8013804 <tcp_rexmit_fast+0xbc>)
 801375e:	482a      	ldr	r0, [pc, #168]	; (8013808 <tcp_rexmit_fast+0xc0>)
 8013760:	f005 fda2 	bl	80192a8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013768:	2b00      	cmp	r3, #0
 801376a:	d044      	beq.n	80137f6 <tcp_rexmit_fast+0xae>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	8b5b      	ldrh	r3, [r3, #26]
 8013770:	f003 0304 	and.w	r3, r3, #4
 8013774:	2b00      	cmp	r3, #0
 8013776:	d13e      	bne.n	80137f6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff ff79 	bl	8013670 <tcp_rexmit>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d138      	bne.n	80137f6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013790:	4293      	cmp	r3, r2
 8013792:	bf28      	it	cs
 8013794:	4613      	movcs	r3, r2
 8013796:	b29b      	uxth	r3, r3
 8013798:	0fda      	lsrs	r2, r3, #31
 801379a:	4413      	add	r3, r2
 801379c:	105b      	asrs	r3, r3, #1
 801379e:	b29a      	uxth	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80137ac:	461a      	mov	r2, r3
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137b2:	005b      	lsls	r3, r3, #1
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d206      	bcs.n	80137c6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137bc:	005b      	lsls	r3, r3, #1
 80137be:	b29a      	uxth	r2, r3
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137d0:	4619      	mov	r1, r3
 80137d2:	0049      	lsls	r1, r1, #1
 80137d4:	440b      	add	r3, r1
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	4413      	add	r3, r2
 80137da:	b29a      	uxth	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	8b5b      	ldrh	r3, [r3, #26]
 80137e6:	f043 0304 	orr.w	r3, r3, #4
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80137f6:	bf00      	nop
 80137f8:	3708      	adds	r7, #8
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	0801bd70 	.word	0x0801bd70
 8013804:	0801c428 	.word	0x0801c428
 8013808:	0801bdc4 	.word	0x0801bdc4

0801380c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	607b      	str	r3, [r7, #4]
 8013816:	460b      	mov	r3, r1
 8013818:	817b      	strh	r3, [r7, #10]
 801381a:	4613      	mov	r3, r2
 801381c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801381e:	897a      	ldrh	r2, [r7, #10]
 8013820:	893b      	ldrh	r3, [r7, #8]
 8013822:	4413      	add	r3, r2
 8013824:	b29b      	uxth	r3, r3
 8013826:	3314      	adds	r3, #20
 8013828:	b29b      	uxth	r3, r3
 801382a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801382e:	4619      	mov	r1, r3
 8013830:	2022      	movs	r0, #34	; 0x22
 8013832:	f7fa fc01 	bl	800e038 <pbuf_alloc>
 8013836:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d04d      	beq.n	80138da <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801383e:	897b      	ldrh	r3, [r7, #10]
 8013840:	3313      	adds	r3, #19
 8013842:	697a      	ldr	r2, [r7, #20]
 8013844:	8952      	ldrh	r2, [r2, #10]
 8013846:	4293      	cmp	r3, r2
 8013848:	db06      	blt.n	8013858 <tcp_output_alloc_header_common+0x4c>
 801384a:	4b26      	ldr	r3, [pc, #152]	; (80138e4 <tcp_output_alloc_header_common+0xd8>)
 801384c:	f240 7223 	movw	r2, #1827	; 0x723
 8013850:	4925      	ldr	r1, [pc, #148]	; (80138e8 <tcp_output_alloc_header_common+0xdc>)
 8013852:	4826      	ldr	r0, [pc, #152]	; (80138ec <tcp_output_alloc_header_common+0xe0>)
 8013854:	f005 fd28 	bl	80192a8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801385e:	8c3b      	ldrh	r3, [r7, #32]
 8013860:	4618      	mov	r0, r3
 8013862:	f7f9 fb15 	bl	800ce90 <lwip_htons>
 8013866:	4603      	mov	r3, r0
 8013868:	461a      	mov	r2, r3
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801386e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013870:	4618      	mov	r0, r3
 8013872:	f7f9 fb0d 	bl	800ce90 <lwip_htons>
 8013876:	4603      	mov	r3, r0
 8013878:	461a      	mov	r2, r3
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f7f9 fb18 	bl	800ceba <lwip_htonl>
 801388a:	4602      	mov	r2, r0
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013890:	897b      	ldrh	r3, [r7, #10]
 8013892:	089b      	lsrs	r3, r3, #2
 8013894:	b29b      	uxth	r3, r3
 8013896:	3305      	adds	r3, #5
 8013898:	b29b      	uxth	r3, r3
 801389a:	031b      	lsls	r3, r3, #12
 801389c:	b29a      	uxth	r2, r3
 801389e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	4313      	orrs	r3, r2
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7f9 faf1 	bl	800ce90 <lwip_htons>
 80138ae:	4603      	mov	r3, r0
 80138b0:	461a      	mov	r2, r3
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80138b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7f9 fae9 	bl	800ce90 <lwip_htons>
 80138be:	4603      	mov	r3, r0
 80138c0:	461a      	mov	r2, r3
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	2200      	movs	r2, #0
 80138ca:	741a      	strb	r2, [r3, #16]
 80138cc:	2200      	movs	r2, #0
 80138ce:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	2200      	movs	r2, #0
 80138d4:	749a      	strb	r2, [r3, #18]
 80138d6:	2200      	movs	r2, #0
 80138d8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80138da:	697b      	ldr	r3, [r7, #20]
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3718      	adds	r7, #24
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	0801bd70 	.word	0x0801bd70
 80138e8:	0801c448 	.word	0x0801c448
 80138ec:	0801bdc4 	.word	0x0801bdc4

080138f0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80138f0:	b5b0      	push	{r4, r5, r7, lr}
 80138f2:	b08a      	sub	sp, #40	; 0x28
 80138f4:	af04      	add	r7, sp, #16
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	607b      	str	r3, [r7, #4]
 80138fa:	460b      	mov	r3, r1
 80138fc:	817b      	strh	r3, [r7, #10]
 80138fe:	4613      	mov	r3, r2
 8013900:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d106      	bne.n	8013916 <tcp_output_alloc_header+0x26>
 8013908:	4b15      	ldr	r3, [pc, #84]	; (8013960 <tcp_output_alloc_header+0x70>)
 801390a:	f240 7242 	movw	r2, #1858	; 0x742
 801390e:	4915      	ldr	r1, [pc, #84]	; (8013964 <tcp_output_alloc_header+0x74>)
 8013910:	4815      	ldr	r0, [pc, #84]	; (8013968 <tcp_output_alloc_header+0x78>)
 8013912:	f005 fcc9 	bl	80192a8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	8adb      	ldrh	r3, [r3, #22]
 801391e:	68fa      	ldr	r2, [r7, #12]
 8013920:	8b12      	ldrh	r2, [r2, #24]
 8013922:	68f9      	ldr	r1, [r7, #12]
 8013924:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013926:	893d      	ldrh	r5, [r7, #8]
 8013928:	897c      	ldrh	r4, [r7, #10]
 801392a:	9103      	str	r1, [sp, #12]
 801392c:	2110      	movs	r1, #16
 801392e:	9102      	str	r1, [sp, #8]
 8013930:	9201      	str	r2, [sp, #4]
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	462a      	mov	r2, r5
 8013938:	4621      	mov	r1, r4
 801393a:	f7ff ff67 	bl	801380c <tcp_output_alloc_header_common>
 801393e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d006      	beq.n	8013954 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394a:	68fa      	ldr	r2, [r7, #12]
 801394c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801394e:	441a      	add	r2, r3
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013954:	697b      	ldr	r3, [r7, #20]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3718      	adds	r7, #24
 801395a:	46bd      	mov	sp, r7
 801395c:	bdb0      	pop	{r4, r5, r7, pc}
 801395e:	bf00      	nop
 8013960:	0801bd70 	.word	0x0801bd70
 8013964:	0801c478 	.word	0x0801c478
 8013968:	0801bdc4 	.word	0x0801bdc4

0801396c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b088      	sub	sp, #32
 8013970:	af00      	add	r7, sp, #0
 8013972:	60f8      	str	r0, [r7, #12]
 8013974:	60b9      	str	r1, [r7, #8]
 8013976:	4611      	mov	r1, r2
 8013978:	461a      	mov	r2, r3
 801397a:	460b      	mov	r3, r1
 801397c:	71fb      	strb	r3, [r7, #7]
 801397e:	4613      	mov	r3, r2
 8013980:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013982:	2300      	movs	r3, #0
 8013984:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d106      	bne.n	801399a <tcp_output_fill_options+0x2e>
 801398c:	4b13      	ldr	r3, [pc, #76]	; (80139dc <tcp_output_fill_options+0x70>)
 801398e:	f240 7256 	movw	r2, #1878	; 0x756
 8013992:	4913      	ldr	r1, [pc, #76]	; (80139e0 <tcp_output_fill_options+0x74>)
 8013994:	4813      	ldr	r0, [pc, #76]	; (80139e4 <tcp_output_fill_options+0x78>)
 8013996:	f005 fc87 	bl	80192a8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801399a:	68bb      	ldr	r3, [r7, #8]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80139a0:	69bb      	ldr	r3, [r7, #24]
 80139a2:	3314      	adds	r3, #20
 80139a4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80139a6:	69bb      	ldr	r3, [r7, #24]
 80139a8:	f103 0214 	add.w	r2, r3, #20
 80139ac:	8bfb      	ldrh	r3, [r7, #30]
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4619      	mov	r1, r3
 80139b2:	79fb      	ldrb	r3, [r7, #7]
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	f003 0304 	and.w	r3, r3, #4
 80139ba:	440b      	add	r3, r1
 80139bc:	4413      	add	r3, r2
 80139be:	697a      	ldr	r2, [r7, #20]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d006      	beq.n	80139d2 <tcp_output_fill_options+0x66>
 80139c4:	4b05      	ldr	r3, [pc, #20]	; (80139dc <tcp_output_fill_options+0x70>)
 80139c6:	f240 7275 	movw	r2, #1909	; 0x775
 80139ca:	4907      	ldr	r1, [pc, #28]	; (80139e8 <tcp_output_fill_options+0x7c>)
 80139cc:	4805      	ldr	r0, [pc, #20]	; (80139e4 <tcp_output_fill_options+0x78>)
 80139ce:	f005 fc6b 	bl	80192a8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80139d2:	bf00      	nop
 80139d4:	3720      	adds	r7, #32
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
 80139da:	bf00      	nop
 80139dc:	0801bd70 	.word	0x0801bd70
 80139e0:	0801c4a0 	.word	0x0801c4a0
 80139e4:	0801bdc4 	.word	0x0801bdc4
 80139e8:	0801c398 	.word	0x0801c398

080139ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b08a      	sub	sp, #40	; 0x28
 80139f0:	af04      	add	r7, sp, #16
 80139f2:	60f8      	str	r0, [r7, #12]
 80139f4:	60b9      	str	r1, [r7, #8]
 80139f6:	607a      	str	r2, [r7, #4]
 80139f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d106      	bne.n	8013a0e <tcp_output_control_segment+0x22>
 8013a00:	4b1c      	ldr	r3, [pc, #112]	; (8013a74 <tcp_output_control_segment+0x88>)
 8013a02:	f240 7287 	movw	r2, #1927	; 0x787
 8013a06:	491c      	ldr	r1, [pc, #112]	; (8013a78 <tcp_output_control_segment+0x8c>)
 8013a08:	481c      	ldr	r0, [pc, #112]	; (8013a7c <tcp_output_control_segment+0x90>)
 8013a0a:	f005 fc4d 	bl	80192a8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	6879      	ldr	r1, [r7, #4]
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	f7fe ff40 	bl	8012898 <tcp_route>
 8013a18:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d102      	bne.n	8013a26 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013a20:	23fc      	movs	r3, #252	; 0xfc
 8013a22:	75fb      	strb	r3, [r7, #23]
 8013a24:	e01c      	b.n	8013a60 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d006      	beq.n	8013a3a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	7adb      	ldrb	r3, [r3, #11]
 8013a30:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	7a9b      	ldrb	r3, [r3, #10]
 8013a36:	757b      	strb	r3, [r7, #21]
 8013a38:	e003      	b.n	8013a42 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013a3a:	23ff      	movs	r3, #255	; 0xff
 8013a3c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013a42:	7dba      	ldrb	r2, [r7, #22]
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	9302      	str	r3, [sp, #8]
 8013a48:	2306      	movs	r3, #6
 8013a4a:	9301      	str	r3, [sp, #4]
 8013a4c:	7d7b      	ldrb	r3, [r7, #21]
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	4613      	mov	r3, r2
 8013a52:	683a      	ldr	r2, [r7, #0]
 8013a54:	6879      	ldr	r1, [r7, #4]
 8013a56:	68b8      	ldr	r0, [r7, #8]
 8013a58:	f004 f956 	bl	8017d08 <ip4_output_if>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013a60:	68b8      	ldr	r0, [r7, #8]
 8013a62:	f7fa fdcd 	bl	800e600 <pbuf_free>
  return err;
 8013a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3718      	adds	r7, #24
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	0801bd70 	.word	0x0801bd70
 8013a78:	0801c4c8 	.word	0x0801c4c8
 8013a7c:	0801bdc4 	.word	0x0801bdc4

08013a80 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013a80:	b590      	push	{r4, r7, lr}
 8013a82:	b08b      	sub	sp, #44	; 0x2c
 8013a84:	af04      	add	r7, sp, #16
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d106      	bne.n	8013aa2 <tcp_rst+0x22>
 8013a94:	4b1f      	ldr	r3, [pc, #124]	; (8013b14 <tcp_rst+0x94>)
 8013a96:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a9a:	491f      	ldr	r1, [pc, #124]	; (8013b18 <tcp_rst+0x98>)
 8013a9c:	481f      	ldr	r0, [pc, #124]	; (8013b1c <tcp_rst+0x9c>)
 8013a9e:	f005 fc03 	bl	80192a8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d106      	bne.n	8013ab6 <tcp_rst+0x36>
 8013aa8:	4b1a      	ldr	r3, [pc, #104]	; (8013b14 <tcp_rst+0x94>)
 8013aaa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013aae:	491c      	ldr	r1, [pc, #112]	; (8013b20 <tcp_rst+0xa0>)
 8013ab0:	481a      	ldr	r0, [pc, #104]	; (8013b1c <tcp_rst+0x9c>)
 8013ab2:	f005 fbf9 	bl	80192a8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013aba:	f246 0308 	movw	r3, #24584	; 0x6008
 8013abe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013ac0:	7dfb      	ldrb	r3, [r7, #23]
 8013ac2:	b29c      	uxth	r4, r3
 8013ac4:	68b8      	ldr	r0, [r7, #8]
 8013ac6:	f7f9 f9f8 	bl	800ceba <lwip_htonl>
 8013aca:	4602      	mov	r2, r0
 8013acc:	8abb      	ldrh	r3, [r7, #20]
 8013ace:	9303      	str	r3, [sp, #12]
 8013ad0:	2314      	movs	r3, #20
 8013ad2:	9302      	str	r3, [sp, #8]
 8013ad4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013ad6:	9301      	str	r3, [sp, #4]
 8013ad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ada:	9300      	str	r3, [sp, #0]
 8013adc:	4613      	mov	r3, r2
 8013ade:	2200      	movs	r2, #0
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7ff fe92 	bl	801380c <tcp_output_alloc_header_common>
 8013ae8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00c      	beq.n	8013b0a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013af0:	7dfb      	ldrb	r3, [r7, #23]
 8013af2:	2200      	movs	r2, #0
 8013af4:	6939      	ldr	r1, [r7, #16]
 8013af6:	68f8      	ldr	r0, [r7, #12]
 8013af8:	f7ff ff38 	bl	801396c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013afe:	683a      	ldr	r2, [r7, #0]
 8013b00:	6939      	ldr	r1, [r7, #16]
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff ff72 	bl	80139ec <tcp_output_control_segment>
 8013b08:	e000      	b.n	8013b0c <tcp_rst+0x8c>
    return;
 8013b0a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013b0c:	371c      	adds	r7, #28
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd90      	pop	{r4, r7, pc}
 8013b12:	bf00      	nop
 8013b14:	0801bd70 	.word	0x0801bd70
 8013b18:	0801c4f4 	.word	0x0801c4f4
 8013b1c:	0801bdc4 	.word	0x0801bdc4
 8013b20:	0801c510 	.word	0x0801c510

08013b24 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013b24:	b590      	push	{r4, r7, lr}
 8013b26:	b087      	sub	sp, #28
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <tcp_send_empty_ack+0x24>
 8013b3a:	4b28      	ldr	r3, [pc, #160]	; (8013bdc <tcp_send_empty_ack+0xb8>)
 8013b3c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013b40:	4927      	ldr	r1, [pc, #156]	; (8013be0 <tcp_send_empty_ack+0xbc>)
 8013b42:	4828      	ldr	r0, [pc, #160]	; (8013be4 <tcp_send_empty_ack+0xc0>)
 8013b44:	f005 fbb0 	bl	80192a8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b48:	7dfb      	ldrb	r3, [r7, #23]
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	f003 0304 	and.w	r3, r3, #4
 8013b52:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013b54:	7d7b      	ldrb	r3, [r7, #21]
 8013b56:	b29c      	uxth	r4, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f9 f9ac 	bl	800ceba <lwip_htonl>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2200      	movs	r2, #0
 8013b66:	4621      	mov	r1, r4
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7ff fec1 	bl	80138f0 <tcp_output_alloc_header>
 8013b6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d109      	bne.n	8013b8a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	8b5b      	ldrh	r3, [r3, #26]
 8013b7a:	f043 0303 	orr.w	r3, r3, #3
 8013b7e:	b29a      	uxth	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013b84:	f06f 0301 	mvn.w	r3, #1
 8013b88:	e023      	b.n	8013bd2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013b8a:	7dbb      	ldrb	r3, [r7, #22]
 8013b8c:	7dfa      	ldrb	r2, [r7, #23]
 8013b8e:	6939      	ldr	r1, [r7, #16]
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7ff feeb 	bl	801396c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	3304      	adds	r3, #4
 8013b9c:	6939      	ldr	r1, [r7, #16]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7ff ff24 	bl	80139ec <tcp_output_control_segment>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d007      	beq.n	8013bc0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	8b5b      	ldrh	r3, [r3, #26]
 8013bb4:	f043 0303 	orr.w	r3, r3, #3
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	835a      	strh	r2, [r3, #26]
 8013bbe:	e006      	b.n	8013bce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8b5b      	ldrh	r3, [r3, #26]
 8013bc4:	f023 0303 	bic.w	r3, r3, #3
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	371c      	adds	r7, #28
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd90      	pop	{r4, r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	0801bd70 	.word	0x0801bd70
 8013be0:	0801c52c 	.word	0x0801c52c
 8013be4:	0801bdc4 	.word	0x0801bdc4

08013be8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013be8:	b590      	push	{r4, r7, lr}
 8013bea:	b087      	sub	sp, #28
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d106      	bne.n	8013c08 <tcp_keepalive+0x20>
 8013bfa:	4b18      	ldr	r3, [pc, #96]	; (8013c5c <tcp_keepalive+0x74>)
 8013bfc:	f640 0224 	movw	r2, #2084	; 0x824
 8013c00:	4917      	ldr	r1, [pc, #92]	; (8013c60 <tcp_keepalive+0x78>)
 8013c02:	4818      	ldr	r0, [pc, #96]	; (8013c64 <tcp_keepalive+0x7c>)
 8013c04:	f005 fb50 	bl	80192a8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013c08:	7dfb      	ldrb	r3, [r7, #23]
 8013c0a:	b29c      	uxth	r4, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c10:	3b01      	subs	r3, #1
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7f9 f951 	bl	800ceba <lwip_htonl>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	4621      	mov	r1, r4
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7ff fe66 	bl	80138f0 <tcp_output_alloc_header>
 8013c24:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d102      	bne.n	8013c32 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c30:	e010      	b.n	8013c54 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c32:	7dfb      	ldrb	r3, [r7, #23]
 8013c34:	2200      	movs	r2, #0
 8013c36:	6939      	ldr	r1, [r7, #16]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff fe97 	bl	801396c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c3e:	687a      	ldr	r2, [r7, #4]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3304      	adds	r3, #4
 8013c44:	6939      	ldr	r1, [r7, #16]
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7ff fed0 	bl	80139ec <tcp_output_control_segment>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	371c      	adds	r7, #28
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd90      	pop	{r4, r7, pc}
 8013c5c:	0801bd70 	.word	0x0801bd70
 8013c60:	0801c54c 	.word	0x0801c54c
 8013c64:	0801bdc4 	.word	0x0801bdc4

08013c68 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013c68:	b590      	push	{r4, r7, lr}
 8013c6a:	b08b      	sub	sp, #44	; 0x2c
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c70:	2300      	movs	r3, #0
 8013c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d106      	bne.n	8013c8a <tcp_zero_window_probe+0x22>
 8013c7c:	4b4c      	ldr	r3, [pc, #304]	; (8013db0 <tcp_zero_window_probe+0x148>)
 8013c7e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013c82:	494c      	ldr	r1, [pc, #304]	; (8013db4 <tcp_zero_window_probe+0x14c>)
 8013c84:	484c      	ldr	r0, [pc, #304]	; (8013db8 <tcp_zero_window_probe+0x150>)
 8013c86:	f005 fb0f 	bl	80192a8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c8e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c90:	6a3b      	ldr	r3, [r7, #32]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d101      	bne.n	8013c9a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	e086      	b.n	8013da8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013ca0:	2bff      	cmp	r3, #255	; 0xff
 8013ca2:	d007      	beq.n	8013cb4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013caa:	3301      	adds	r3, #1
 8013cac:	b2da      	uxtb	r2, r3
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013cb4:	6a3b      	ldr	r3, [r7, #32]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	899b      	ldrh	r3, [r3, #12]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f9 f8e7 	bl	800ce90 <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	f003 0301 	and.w	r3, r3, #1
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d005      	beq.n	8013cda <tcp_zero_window_probe+0x72>
 8013cce:	6a3b      	ldr	r3, [r7, #32]
 8013cd0:	891b      	ldrh	r3, [r3, #8]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d101      	bne.n	8013cda <tcp_zero_window_probe+0x72>
 8013cd6:	2301      	movs	r3, #1
 8013cd8:	e000      	b.n	8013cdc <tcp_zero_window_probe+0x74>
 8013cda:	2300      	movs	r3, #0
 8013cdc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013cde:	7ffb      	ldrb	r3, [r7, #31]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	bf0c      	ite	eq
 8013ce4:	2301      	moveq	r3, #1
 8013ce6:	2300      	movne	r3, #0
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf0:	b299      	uxth	r1, r3
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	8bba      	ldrh	r2, [r7, #28]
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7ff fdf8 	bl	80138f0 <tcp_output_alloc_header>
 8013d00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d102      	bne.n	8013d0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013d08:	f04f 33ff 	mov.w	r3, #4294967295
 8013d0c:	e04c      	b.n	8013da8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013d0e:	69bb      	ldr	r3, [r7, #24]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013d14:	7ffb      	ldrb	r3, [r7, #31]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d011      	beq.n	8013d3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	899b      	ldrh	r3, [r3, #12]
 8013d1e:	b29b      	uxth	r3, r3
 8013d20:	b21b      	sxth	r3, r3
 8013d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013d26:	b21c      	sxth	r4, r3
 8013d28:	2011      	movs	r0, #17
 8013d2a:	f7f9 f8b1 	bl	800ce90 <lwip_htons>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	b21b      	sxth	r3, r3
 8013d32:	4323      	orrs	r3, r4
 8013d34:	b21b      	sxth	r3, r3
 8013d36:	b29a      	uxth	r2, r3
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	819a      	strh	r2, [r3, #12]
 8013d3c:	e010      	b.n	8013d60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	3314      	adds	r3, #20
 8013d44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013d46:	6a3b      	ldr	r3, [r7, #32]
 8013d48:	6858      	ldr	r0, [r3, #4]
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	891a      	ldrh	r2, [r3, #8]
 8013d50:	6a3b      	ldr	r3, [r7, #32]
 8013d52:	891b      	ldrh	r3, [r3, #8]
 8013d54:	1ad3      	subs	r3, r2, r3
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	2201      	movs	r2, #1
 8013d5a:	6939      	ldr	r1, [r7, #16]
 8013d5c:	f7fa fe56 	bl	800ea0c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013d60:	6a3b      	ldr	r3, [r7, #32]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7f9 f8a7 	bl	800ceba <lwip_htonl>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	3301      	adds	r3, #1
 8013d70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	1ad3      	subs	r3, r2, r3
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	da02      	bge.n	8013d84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	68fa      	ldr	r2, [r7, #12]
 8013d82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d88:	2200      	movs	r2, #0
 8013d8a:	69b9      	ldr	r1, [r7, #24]
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7ff fded 	bl	801396c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d92:	687a      	ldr	r2, [r7, #4]
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	3304      	adds	r3, #4
 8013d98:	69b9      	ldr	r1, [r7, #24]
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff fe26 	bl	80139ec <tcp_output_control_segment>
 8013da0:	4603      	mov	r3, r0
 8013da2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013da4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	372c      	adds	r7, #44	; 0x2c
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd90      	pop	{r4, r7, pc}
 8013db0:	0801bd70 	.word	0x0801bd70
 8013db4:	0801c568 	.word	0x0801c568
 8013db8:	0801bdc4 	.word	0x0801bdc4

08013dbc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013dc4:	f7fa ff10 	bl	800ebe8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013dc8:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <tcpip_tcp_timer+0x38>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d103      	bne.n	8013dd8 <tcpip_tcp_timer+0x1c>
 8013dd0:	4b09      	ldr	r3, [pc, #36]	; (8013df8 <tcpip_tcp_timer+0x3c>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d005      	beq.n	8013de4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013dd8:	2200      	movs	r2, #0
 8013dda:	4908      	ldr	r1, [pc, #32]	; (8013dfc <tcpip_tcp_timer+0x40>)
 8013ddc:	20fa      	movs	r0, #250	; 0xfa
 8013dde:	f000 f8f3 	bl	8013fc8 <sys_timeout>
 8013de2:	e003      	b.n	8013dec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013de4:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <tcpip_tcp_timer+0x44>)
 8013de6:	2200      	movs	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]
  }
}
 8013dea:	bf00      	nop
 8013dec:	bf00      	nop
 8013dee:	3708      	adds	r7, #8
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}
 8013df4:	2000d07c 	.word	0x2000d07c
 8013df8:	2000d08c 	.word	0x2000d08c
 8013dfc:	08013dbd 	.word	0x08013dbd
 8013e00:	20004b58 	.word	0x20004b58

08013e04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013e08:	4b0a      	ldr	r3, [pc, #40]	; (8013e34 <tcp_timer_needed+0x30>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10f      	bne.n	8013e30 <tcp_timer_needed+0x2c>
 8013e10:	4b09      	ldr	r3, [pc, #36]	; (8013e38 <tcp_timer_needed+0x34>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d103      	bne.n	8013e20 <tcp_timer_needed+0x1c>
 8013e18:	4b08      	ldr	r3, [pc, #32]	; (8013e3c <tcp_timer_needed+0x38>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d007      	beq.n	8013e30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013e20:	4b04      	ldr	r3, [pc, #16]	; (8013e34 <tcp_timer_needed+0x30>)
 8013e22:	2201      	movs	r2, #1
 8013e24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013e26:	2200      	movs	r2, #0
 8013e28:	4905      	ldr	r1, [pc, #20]	; (8013e40 <tcp_timer_needed+0x3c>)
 8013e2a:	20fa      	movs	r0, #250	; 0xfa
 8013e2c:	f000 f8cc 	bl	8013fc8 <sys_timeout>
  }
}
 8013e30:	bf00      	nop
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	20004b58 	.word	0x20004b58
 8013e38:	2000d07c 	.word	0x2000d07c
 8013e3c:	2000d08c 	.word	0x2000d08c
 8013e40:	08013dbd 	.word	0x08013dbd

08013e44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b086      	sub	sp, #24
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	60b9      	str	r1, [r7, #8]
 8013e4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013e50:	200a      	movs	r0, #10
 8013e52:	f7f9 fcd3 	bl	800d7fc <memp_malloc>
 8013e56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d109      	bne.n	8013e72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d151      	bne.n	8013f08 <sys_timeout_abs+0xc4>
 8013e64:	4b2a      	ldr	r3, [pc, #168]	; (8013f10 <sys_timeout_abs+0xcc>)
 8013e66:	22be      	movs	r2, #190	; 0xbe
 8013e68:	492a      	ldr	r1, [pc, #168]	; (8013f14 <sys_timeout_abs+0xd0>)
 8013e6a:	482b      	ldr	r0, [pc, #172]	; (8013f18 <sys_timeout_abs+0xd4>)
 8013e6c:	f005 fa1c 	bl	80192a8 <iprintf>
    return;
 8013e70:	e04a      	b.n	8013f08 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	2200      	movs	r2, #0
 8013e76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	68ba      	ldr	r2, [r7, #8]
 8013e7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013e8a:	4b24      	ldr	r3, [pc, #144]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d103      	bne.n	8013e9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e92:	4a22      	ldr	r2, [pc, #136]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	6013      	str	r3, [r2, #0]
    return;
 8013e98:	e037      	b.n	8013f0a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	685a      	ldr	r2, [r3, #4]
 8013e9e:	4b1f      	ldr	r3, [pc, #124]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	1ad3      	subs	r3, r2, r3
 8013ea6:	0fdb      	lsrs	r3, r3, #31
 8013ea8:	f003 0301 	and.w	r3, r3, #1
 8013eac:	b2db      	uxtb	r3, r3
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d007      	beq.n	8013ec2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013eb2:	4b1a      	ldr	r3, [pc, #104]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013eba:	4a18      	ldr	r2, [pc, #96]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	6013      	str	r3, [r2, #0]
 8013ec0:	e023      	b.n	8013f0a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ec2:	4b16      	ldr	r3, [pc, #88]	; (8013f1c <sys_timeout_abs+0xd8>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	617b      	str	r3, [r7, #20]
 8013ec8:	e01a      	b.n	8013f00 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00b      	beq.n	8013eea <sys_timeout_abs+0xa6>
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	685a      	ldr	r2, [r3, #4]
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	0fdb      	lsrs	r3, r3, #31
 8013ee0:	f003 0301 	and.w	r3, r3, #1
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d007      	beq.n	8013efa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	681a      	ldr	r2, [r3, #0]
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	693a      	ldr	r2, [r7, #16]
 8013ef6:	601a      	str	r2, [r3, #0]
        break;
 8013ef8:	e007      	b.n	8013f0a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	617b      	str	r3, [r7, #20]
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d1e1      	bne.n	8013eca <sys_timeout_abs+0x86>
 8013f06:	e000      	b.n	8013f0a <sys_timeout_abs+0xc6>
    return;
 8013f08:	bf00      	nop
      }
    }
  }
}
 8013f0a:	3718      	adds	r7, #24
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}
 8013f10:	0801c58c 	.word	0x0801c58c
 8013f14:	0801c5c0 	.word	0x0801c5c0
 8013f18:	0801c600 	.word	0x0801c600
 8013f1c:	20004b50 	.word	0x20004b50

08013f20 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b086      	sub	sp, #24
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	685b      	ldr	r3, [r3, #4]
 8013f30:	4798      	blx	r3

  now = sys_now();
 8013f32:	f7f4 ff13 	bl	8008d5c <sys_now>
 8013f36:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	681a      	ldr	r2, [r3, #0]
 8013f3c:	4b0f      	ldr	r3, [pc, #60]	; (8013f7c <lwip_cyclic_timer+0x5c>)
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4413      	add	r3, r2
 8013f42:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	0fdb      	lsrs	r3, r3, #31
 8013f4c:	f003 0301 	and.w	r3, r3, #1
 8013f50:	b2db      	uxtb	r3, r3
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d009      	beq.n	8013f6a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	4907      	ldr	r1, [pc, #28]	; (8013f80 <lwip_cyclic_timer+0x60>)
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7ff ff6e 	bl	8013e44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013f68:	e004      	b.n	8013f74 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	4904      	ldr	r1, [pc, #16]	; (8013f80 <lwip_cyclic_timer+0x60>)
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f7ff ff68 	bl	8013e44 <sys_timeout_abs>
}
 8013f74:	bf00      	nop
 8013f76:	3718      	adds	r7, #24
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	20004b54 	.word	0x20004b54
 8013f80:	08013f21 	.word	0x08013f21

08013f84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	607b      	str	r3, [r7, #4]
 8013f8e:	e00e      	b.n	8013fae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f90:	4a0b      	ldr	r2, [pc, #44]	; (8013fc0 <sys_timeouts_init+0x3c>)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	4a08      	ldr	r2, [pc, #32]	; (8013fc0 <sys_timeouts_init+0x3c>)
 8013f9e:	4413      	add	r3, r2
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	4908      	ldr	r1, [pc, #32]	; (8013fc4 <sys_timeouts_init+0x40>)
 8013fa4:	f000 f810 	bl	8013fc8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3301      	adds	r3, #1
 8013fac:	607b      	str	r3, [r7, #4]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	2b04      	cmp	r3, #4
 8013fb2:	d9ed      	bls.n	8013f90 <sys_timeouts_init+0xc>
  }
}
 8013fb4:	bf00      	nop
 8013fb6:	bf00      	nop
 8013fb8:	3708      	adds	r7, #8
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	0801d6a4 	.word	0x0801d6a4
 8013fc4:	08013f21 	.word	0x08013f21

08013fc8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fda:	d306      	bcc.n	8013fea <sys_timeout+0x22>
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <sys_timeout+0x40>)
 8013fde:	f240 1229 	movw	r2, #297	; 0x129
 8013fe2:	490a      	ldr	r1, [pc, #40]	; (801400c <sys_timeout+0x44>)
 8013fe4:	480a      	ldr	r0, [pc, #40]	; (8014010 <sys_timeout+0x48>)
 8013fe6:	f005 f95f 	bl	80192a8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013fea:	f7f4 feb7 	bl	8008d5c <sys_now>
 8013fee:	4602      	mov	r2, r0
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	4413      	add	r3, r2
 8013ff4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013ff6:	687a      	ldr	r2, [r7, #4]
 8013ff8:	68b9      	ldr	r1, [r7, #8]
 8013ffa:	6978      	ldr	r0, [r7, #20]
 8013ffc:	f7ff ff22 	bl	8013e44 <sys_timeout_abs>
#endif
}
 8014000:	bf00      	nop
 8014002:	3718      	adds	r7, #24
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	0801c58c 	.word	0x0801c58c
 801400c:	0801c628 	.word	0x0801c628
 8014010:	0801c600 	.word	0x0801c600

08014014 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b084      	sub	sp, #16
 8014018:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801401a:	f7f4 fe9f 	bl	8008d5c <sys_now>
 801401e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014020:	4b17      	ldr	r3, [pc, #92]	; (8014080 <sys_check_timeouts+0x6c>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d022      	beq.n	8014072 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	68fa      	ldr	r2, [r7, #12]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	0fdb      	lsrs	r3, r3, #31
 8014036:	f003 0301 	and.w	r3, r3, #1
 801403a:	b2db      	uxtb	r3, r3
 801403c:	2b00      	cmp	r3, #0
 801403e:	d11a      	bne.n	8014076 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4a0e      	ldr	r2, [pc, #56]	; (8014080 <sys_check_timeouts+0x6c>)
 8014046:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	689b      	ldr	r3, [r3, #8]
 801404c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	4a0a      	ldr	r2, [pc, #40]	; (8014084 <sys_check_timeouts+0x70>)
 801405a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801405c:	68b9      	ldr	r1, [r7, #8]
 801405e:	200a      	movs	r0, #10
 8014060:	f7f9 fc1e 	bl	800d8a0 <memp_free>
    if (handler != NULL) {
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d0da      	beq.n	8014020 <sys_check_timeouts+0xc>
      handler(arg);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6838      	ldr	r0, [r7, #0]
 801406e:	4798      	blx	r3
  do {
 8014070:	e7d6      	b.n	8014020 <sys_check_timeouts+0xc>
      return;
 8014072:	bf00      	nop
 8014074:	e000      	b.n	8014078 <sys_check_timeouts+0x64>
      return;
 8014076:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014078:	3710      	adds	r7, #16
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	20004b50 	.word	0x20004b50
 8014084:	20004b54 	.word	0x20004b54

08014088 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801408e:	4b16      	ldr	r3, [pc, #88]	; (80140e8 <sys_timeouts_sleeptime+0x60>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d102      	bne.n	801409c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014096:	f04f 33ff 	mov.w	r3, #4294967295
 801409a:	e020      	b.n	80140de <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801409c:	f7f4 fe5e 	bl	8008d5c <sys_now>
 80140a0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80140a2:	4b11      	ldr	r3, [pc, #68]	; (80140e8 <sys_timeouts_sleeptime+0x60>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	685a      	ldr	r2, [r3, #4]
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	1ad3      	subs	r3, r2, r3
 80140ac:	0fdb      	lsrs	r3, r3, #31
 80140ae:	f003 0301 	and.w	r3, r3, #1
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d001      	beq.n	80140bc <sys_timeouts_sleeptime+0x34>
    return 0;
 80140b8:	2300      	movs	r3, #0
 80140ba:	e010      	b.n	80140de <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80140bc:	4b0a      	ldr	r3, [pc, #40]	; (80140e8 <sys_timeouts_sleeptime+0x60>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	685a      	ldr	r2, [r3, #4]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	1ad3      	subs	r3, r2, r3
 80140c6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	da06      	bge.n	80140dc <sys_timeouts_sleeptime+0x54>
 80140ce:	4b07      	ldr	r3, [pc, #28]	; (80140ec <sys_timeouts_sleeptime+0x64>)
 80140d0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80140d4:	4906      	ldr	r1, [pc, #24]	; (80140f0 <sys_timeouts_sleeptime+0x68>)
 80140d6:	4807      	ldr	r0, [pc, #28]	; (80140f4 <sys_timeouts_sleeptime+0x6c>)
 80140d8:	f005 f8e6 	bl	80192a8 <iprintf>
    return ret;
 80140dc:	683b      	ldr	r3, [r7, #0]
  }
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3708      	adds	r7, #8
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
 80140e6:	bf00      	nop
 80140e8:	20004b50 	.word	0x20004b50
 80140ec:	0801c58c 	.word	0x0801c58c
 80140f0:	0801c660 	.word	0x0801c660
 80140f4:	0801c600 	.word	0x0801c600

080140f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80140fc:	f005 f8ec 	bl	80192d8 <rand>
 8014100:	4603      	mov	r3, r0
 8014102:	b29b      	uxth	r3, r3
 8014104:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014108:	b29b      	uxth	r3, r3
 801410a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801410e:	b29a      	uxth	r2, r3
 8014110:	4b01      	ldr	r3, [pc, #4]	; (8014118 <udp_init+0x20>)
 8014112:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014114:	bf00      	nop
 8014116:	bd80      	pop	{r7, pc}
 8014118:	20000060 	.word	0x20000060

0801411c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801411c:	b480      	push	{r7}
 801411e:	b083      	sub	sp, #12
 8014120:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014122:	2300      	movs	r3, #0
 8014124:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014126:	4b17      	ldr	r3, [pc, #92]	; (8014184 <udp_new_port+0x68>)
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	1c5a      	adds	r2, r3, #1
 801412c:	b291      	uxth	r1, r2
 801412e:	4a15      	ldr	r2, [pc, #84]	; (8014184 <udp_new_port+0x68>)
 8014130:	8011      	strh	r1, [r2, #0]
 8014132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014136:	4293      	cmp	r3, r2
 8014138:	d103      	bne.n	8014142 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801413a:	4b12      	ldr	r3, [pc, #72]	; (8014184 <udp_new_port+0x68>)
 801413c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014140:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014142:	4b11      	ldr	r3, [pc, #68]	; (8014188 <udp_new_port+0x6c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	603b      	str	r3, [r7, #0]
 8014148:	e011      	b.n	801416e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	8a5a      	ldrh	r2, [r3, #18]
 801414e:	4b0d      	ldr	r3, [pc, #52]	; (8014184 <udp_new_port+0x68>)
 8014150:	881b      	ldrh	r3, [r3, #0]
 8014152:	429a      	cmp	r2, r3
 8014154:	d108      	bne.n	8014168 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014156:	88fb      	ldrh	r3, [r7, #6]
 8014158:	3301      	adds	r3, #1
 801415a:	80fb      	strh	r3, [r7, #6]
 801415c:	88fb      	ldrh	r3, [r7, #6]
 801415e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014162:	d3e0      	bcc.n	8014126 <udp_new_port+0xa>
        return 0;
 8014164:	2300      	movs	r3, #0
 8014166:	e007      	b.n	8014178 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	68db      	ldr	r3, [r3, #12]
 801416c:	603b      	str	r3, [r7, #0]
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1ea      	bne.n	801414a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014174:	4b03      	ldr	r3, [pc, #12]	; (8014184 <udp_new_port+0x68>)
 8014176:	881b      	ldrh	r3, [r3, #0]
}
 8014178:	4618      	mov	r0, r3
 801417a:	370c      	adds	r7, #12
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr
 8014184:	20000060 	.word	0x20000060
 8014188:	2000d094 	.word	0x2000d094

0801418c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	60f8      	str	r0, [r7, #12]
 8014194:	60b9      	str	r1, [r7, #8]
 8014196:	4613      	mov	r3, r2
 8014198:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d105      	bne.n	80141ac <udp_input_local_match+0x20>
 80141a0:	4b27      	ldr	r3, [pc, #156]	; (8014240 <udp_input_local_match+0xb4>)
 80141a2:	2287      	movs	r2, #135	; 0x87
 80141a4:	4927      	ldr	r1, [pc, #156]	; (8014244 <udp_input_local_match+0xb8>)
 80141a6:	4828      	ldr	r0, [pc, #160]	; (8014248 <udp_input_local_match+0xbc>)
 80141a8:	f005 f87e 	bl	80192a8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d105      	bne.n	80141be <udp_input_local_match+0x32>
 80141b2:	4b23      	ldr	r3, [pc, #140]	; (8014240 <udp_input_local_match+0xb4>)
 80141b4:	2288      	movs	r2, #136	; 0x88
 80141b6:	4925      	ldr	r1, [pc, #148]	; (801424c <udp_input_local_match+0xc0>)
 80141b8:	4823      	ldr	r0, [pc, #140]	; (8014248 <udp_input_local_match+0xbc>)
 80141ba:	f005 f875 	bl	80192a8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	7a1b      	ldrb	r3, [r3, #8]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d00b      	beq.n	80141de <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	7a1a      	ldrb	r2, [r3, #8]
 80141ca:	4b21      	ldr	r3, [pc, #132]	; (8014250 <udp_input_local_match+0xc4>)
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141d2:	3301      	adds	r3, #1
 80141d4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d001      	beq.n	80141de <udp_input_local_match+0x52>
    return 0;
 80141da:	2300      	movs	r3, #0
 80141dc:	e02b      	b.n	8014236 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80141de:	79fb      	ldrb	r3, [r7, #7]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d018      	beq.n	8014216 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d013      	beq.n	8014212 <udp_input_local_match+0x86>
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d00f      	beq.n	8014212 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80141f2:	4b17      	ldr	r3, [pc, #92]	; (8014250 <udp_input_local_match+0xc4>)
 80141f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80141f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141fa:	d00a      	beq.n	8014212 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	4b13      	ldr	r3, [pc, #76]	; (8014250 <udp_input_local_match+0xc4>)
 8014202:	695b      	ldr	r3, [r3, #20]
 8014204:	405a      	eors	r2, r3
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	3308      	adds	r3, #8
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801420e:	2b00      	cmp	r3, #0
 8014210:	d110      	bne.n	8014234 <udp_input_local_match+0xa8>
          return 1;
 8014212:	2301      	movs	r3, #1
 8014214:	e00f      	b.n	8014236 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d009      	beq.n	8014230 <udp_input_local_match+0xa4>
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d005      	beq.n	8014230 <udp_input_local_match+0xa4>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	4b09      	ldr	r3, [pc, #36]	; (8014250 <udp_input_local_match+0xc4>)
 801422a:	695b      	ldr	r3, [r3, #20]
 801422c:	429a      	cmp	r2, r3
 801422e:	d101      	bne.n	8014234 <udp_input_local_match+0xa8>
        return 1;
 8014230:	2301      	movs	r3, #1
 8014232:	e000      	b.n	8014236 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014234:	2300      	movs	r3, #0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	0801c674 	.word	0x0801c674
 8014244:	0801c6a4 	.word	0x0801c6a4
 8014248:	0801c6c8 	.word	0x0801c6c8
 801424c:	0801c6f0 	.word	0x0801c6f0
 8014250:	20009948 	.word	0x20009948

08014254 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014254:	b590      	push	{r4, r7, lr}
 8014256:	b08d      	sub	sp, #52	; 0x34
 8014258:	af02      	add	r7, sp, #8
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801425e:	2300      	movs	r3, #0
 8014260:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d105      	bne.n	8014274 <udp_input+0x20>
 8014268:	4b7c      	ldr	r3, [pc, #496]	; (801445c <udp_input+0x208>)
 801426a:	22cf      	movs	r2, #207	; 0xcf
 801426c:	497c      	ldr	r1, [pc, #496]	; (8014460 <udp_input+0x20c>)
 801426e:	487d      	ldr	r0, [pc, #500]	; (8014464 <udp_input+0x210>)
 8014270:	f005 f81a 	bl	80192a8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d105      	bne.n	8014286 <udp_input+0x32>
 801427a:	4b78      	ldr	r3, [pc, #480]	; (801445c <udp_input+0x208>)
 801427c:	22d0      	movs	r2, #208	; 0xd0
 801427e:	497a      	ldr	r1, [pc, #488]	; (8014468 <udp_input+0x214>)
 8014280:	4878      	ldr	r0, [pc, #480]	; (8014464 <udp_input+0x210>)
 8014282:	f005 f811 	bl	80192a8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	895b      	ldrh	r3, [r3, #10]
 801428a:	2b07      	cmp	r3, #7
 801428c:	d803      	bhi.n	8014296 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7fa f9b6 	bl	800e600 <pbuf_free>
    goto end;
 8014294:	e0de      	b.n	8014454 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801429c:	4b73      	ldr	r3, [pc, #460]	; (801446c <udp_input+0x218>)
 801429e:	695b      	ldr	r3, [r3, #20]
 80142a0:	4a72      	ldr	r2, [pc, #456]	; (801446c <udp_input+0x218>)
 80142a2:	6812      	ldr	r2, [r2, #0]
 80142a4:	4611      	mov	r1, r2
 80142a6:	4618      	mov	r0, r3
 80142a8:	f003 fe06 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 80142ac:	4603      	mov	r3, r0
 80142ae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	881b      	ldrh	r3, [r3, #0]
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7f8 fdea 	bl	800ce90 <lwip_htons>
 80142bc:	4603      	mov	r3, r0
 80142be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	885b      	ldrh	r3, [r3, #2]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7f8 fde2 	bl	800ce90 <lwip_htons>
 80142cc:	4603      	mov	r3, r0
 80142ce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80142d0:	2300      	movs	r3, #0
 80142d2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80142d4:	2300      	movs	r3, #0
 80142d6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80142d8:	2300      	movs	r3, #0
 80142da:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142dc:	4b64      	ldr	r3, [pc, #400]	; (8014470 <udp_input+0x21c>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	627b      	str	r3, [r7, #36]	; 0x24
 80142e2:	e054      	b.n	801438e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80142e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e6:	8a5b      	ldrh	r3, [r3, #18]
 80142e8:	89fa      	ldrh	r2, [r7, #14]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d14a      	bne.n	8014384 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80142ee:	7cfb      	ldrb	r3, [r7, #19]
 80142f0:	461a      	mov	r2, r3
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142f6:	f7ff ff49 	bl	801418c <udp_input_local_match>
 80142fa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d041      	beq.n	8014384 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014302:	7c1b      	ldrb	r3, [r3, #16]
 8014304:	f003 0304 	and.w	r3, r3, #4
 8014308:	2b00      	cmp	r3, #0
 801430a:	d11d      	bne.n	8014348 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d102      	bne.n	8014318 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014314:	61fb      	str	r3, [r7, #28]
 8014316:	e017      	b.n	8014348 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014318:	7cfb      	ldrb	r3, [r7, #19]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d014      	beq.n	8014348 <udp_input+0xf4>
 801431e:	4b53      	ldr	r3, [pc, #332]	; (801446c <udp_input+0x218>)
 8014320:	695b      	ldr	r3, [r3, #20]
 8014322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014326:	d10f      	bne.n	8014348 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	681a      	ldr	r2, [r3, #0]
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	3304      	adds	r3, #4
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	429a      	cmp	r2, r3
 8014334:	d008      	beq.n	8014348 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	681a      	ldr	r2, [r3, #0]
 801433a:	683b      	ldr	r3, [r7, #0]
 801433c:	3304      	adds	r3, #4
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	429a      	cmp	r2, r3
 8014342:	d101      	bne.n	8014348 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014346:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434a:	8a9b      	ldrh	r3, [r3, #20]
 801434c:	8a3a      	ldrh	r2, [r7, #16]
 801434e:	429a      	cmp	r2, r3
 8014350:	d118      	bne.n	8014384 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014356:	2b00      	cmp	r3, #0
 8014358:	d005      	beq.n	8014366 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	685a      	ldr	r2, [r3, #4]
 801435e:	4b43      	ldr	r3, [pc, #268]	; (801446c <udp_input+0x218>)
 8014360:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014362:	429a      	cmp	r2, r3
 8014364:	d10e      	bne.n	8014384 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014366:	6a3b      	ldr	r3, [r7, #32]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d014      	beq.n	8014396 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	68da      	ldr	r2, [r3, #12]
 8014370:	6a3b      	ldr	r3, [r7, #32]
 8014372:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014374:	4b3e      	ldr	r3, [pc, #248]	; (8014470 <udp_input+0x21c>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801437c:	4a3c      	ldr	r2, [pc, #240]	; (8014470 <udp_input+0x21c>)
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014382:	e008      	b.n	8014396 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	627b      	str	r3, [r7, #36]	; 0x24
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	2b00      	cmp	r3, #0
 8014392:	d1a7      	bne.n	80142e4 <udp_input+0x90>
 8014394:	e000      	b.n	8014398 <udp_input+0x144>
        break;
 8014396:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	2b00      	cmp	r3, #0
 801439c:	d101      	bne.n	80143a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d002      	beq.n	80143ae <udp_input+0x15a>
    for_us = 1;
 80143a8:	2301      	movs	r3, #1
 80143aa:	76fb      	strb	r3, [r7, #27]
 80143ac:	e00a      	b.n	80143c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	3304      	adds	r3, #4
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	4b2d      	ldr	r3, [pc, #180]	; (801446c <udp_input+0x218>)
 80143b6:	695b      	ldr	r3, [r3, #20]
 80143b8:	429a      	cmp	r2, r3
 80143ba:	bf0c      	ite	eq
 80143bc:	2301      	moveq	r3, #1
 80143be:	2300      	movne	r3, #0
 80143c0:	b2db      	uxtb	r3, r3
 80143c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80143c4:	7efb      	ldrb	r3, [r7, #27]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d041      	beq.n	801444e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80143ca:	2108      	movs	r1, #8
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7fa f891 	bl	800e4f4 <pbuf_remove_header>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d00a      	beq.n	80143ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80143d8:	4b20      	ldr	r3, [pc, #128]	; (801445c <udp_input+0x208>)
 80143da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80143de:	4925      	ldr	r1, [pc, #148]	; (8014474 <udp_input+0x220>)
 80143e0:	4820      	ldr	r0, [pc, #128]	; (8014464 <udp_input+0x210>)
 80143e2:	f004 ff61 	bl	80192a8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f7fa f90a 	bl	800e600 <pbuf_free>
      goto end;
 80143ec:	e032      	b.n	8014454 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80143ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d012      	beq.n	801441a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	699b      	ldr	r3, [r3, #24]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d00a      	beq.n	8014412 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80143fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fe:	699c      	ldr	r4, [r3, #24]
 8014400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014402:	69d8      	ldr	r0, [r3, #28]
 8014404:	8a3b      	ldrh	r3, [r7, #16]
 8014406:	9300      	str	r3, [sp, #0]
 8014408:	4b1b      	ldr	r3, [pc, #108]	; (8014478 <udp_input+0x224>)
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801440e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014410:	e021      	b.n	8014456 <udp_input+0x202>
        pbuf_free(p);
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f7fa f8f4 	bl	800e600 <pbuf_free>
        goto end;
 8014418:	e01c      	b.n	8014454 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801441a:	7cfb      	ldrb	r3, [r7, #19]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d112      	bne.n	8014446 <udp_input+0x1f2>
 8014420:	4b12      	ldr	r3, [pc, #72]	; (801446c <udp_input+0x218>)
 8014422:	695b      	ldr	r3, [r3, #20]
 8014424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014428:	2be0      	cmp	r3, #224	; 0xe0
 801442a:	d00c      	beq.n	8014446 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801442c:	4b0f      	ldr	r3, [pc, #60]	; (801446c <udp_input+0x218>)
 801442e:	899b      	ldrh	r3, [r3, #12]
 8014430:	3308      	adds	r3, #8
 8014432:	b29b      	uxth	r3, r3
 8014434:	b21b      	sxth	r3, r3
 8014436:	4619      	mov	r1, r3
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7fa f8ce 	bl	800e5da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801443e:	2103      	movs	r1, #3
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f003 f9fb 	bl	801783c <icmp_dest_unreach>
      pbuf_free(p);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f7fa f8da 	bl	800e600 <pbuf_free>
  return;
 801444c:	e003      	b.n	8014456 <udp_input+0x202>
    pbuf_free(p);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7fa f8d6 	bl	800e600 <pbuf_free>
  return;
 8014454:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014456:	372c      	adds	r7, #44	; 0x2c
 8014458:	46bd      	mov	sp, r7
 801445a:	bd90      	pop	{r4, r7, pc}
 801445c:	0801c674 	.word	0x0801c674
 8014460:	0801c718 	.word	0x0801c718
 8014464:	0801c6c8 	.word	0x0801c6c8
 8014468:	0801c730 	.word	0x0801c730
 801446c:	20009948 	.word	0x20009948
 8014470:	2000d094 	.word	0x2000d094
 8014474:	0801c74c 	.word	0x0801c74c
 8014478:	20009958 	.word	0x20009958

0801447c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b088      	sub	sp, #32
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
 8014488:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d109      	bne.n	80144a4 <udp_sendto_if+0x28>
 8014490:	4b2e      	ldr	r3, [pc, #184]	; (801454c <udp_sendto_if+0xd0>)
 8014492:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014496:	492e      	ldr	r1, [pc, #184]	; (8014550 <udp_sendto_if+0xd4>)
 8014498:	482e      	ldr	r0, [pc, #184]	; (8014554 <udp_sendto_if+0xd8>)
 801449a:	f004 ff05 	bl	80192a8 <iprintf>
 801449e:	f06f 030f 	mvn.w	r3, #15
 80144a2:	e04f      	b.n	8014544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d109      	bne.n	80144be <udp_sendto_if+0x42>
 80144aa:	4b28      	ldr	r3, [pc, #160]	; (801454c <udp_sendto_if+0xd0>)
 80144ac:	f240 2281 	movw	r2, #641	; 0x281
 80144b0:	4929      	ldr	r1, [pc, #164]	; (8014558 <udp_sendto_if+0xdc>)
 80144b2:	4828      	ldr	r0, [pc, #160]	; (8014554 <udp_sendto_if+0xd8>)
 80144b4:	f004 fef8 	bl	80192a8 <iprintf>
 80144b8:	f06f 030f 	mvn.w	r3, #15
 80144bc:	e042      	b.n	8014544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d109      	bne.n	80144d8 <udp_sendto_if+0x5c>
 80144c4:	4b21      	ldr	r3, [pc, #132]	; (801454c <udp_sendto_if+0xd0>)
 80144c6:	f240 2282 	movw	r2, #642	; 0x282
 80144ca:	4924      	ldr	r1, [pc, #144]	; (801455c <udp_sendto_if+0xe0>)
 80144cc:	4821      	ldr	r0, [pc, #132]	; (8014554 <udp_sendto_if+0xd8>)
 80144ce:	f004 feeb 	bl	80192a8 <iprintf>
 80144d2:	f06f 030f 	mvn.w	r3, #15
 80144d6:	e035      	b.n	8014544 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d109      	bne.n	80144f2 <udp_sendto_if+0x76>
 80144de:	4b1b      	ldr	r3, [pc, #108]	; (801454c <udp_sendto_if+0xd0>)
 80144e0:	f240 2283 	movw	r2, #643	; 0x283
 80144e4:	491e      	ldr	r1, [pc, #120]	; (8014560 <udp_sendto_if+0xe4>)
 80144e6:	481b      	ldr	r0, [pc, #108]	; (8014554 <udp_sendto_if+0xd8>)
 80144e8:	f004 fede 	bl	80192a8 <iprintf>
 80144ec:	f06f 030f 	mvn.w	r3, #15
 80144f0:	e028      	b.n	8014544 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d009      	beq.n	801450c <udp_sendto_if+0x90>
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d005      	beq.n	801450c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014508:	2be0      	cmp	r3, #224	; 0xe0
 801450a:	d103      	bne.n	8014514 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801450c:	6a3b      	ldr	r3, [r7, #32]
 801450e:	3304      	adds	r3, #4
 8014510:	617b      	str	r3, [r7, #20]
 8014512:	e00b      	b.n	801452c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	3304      	adds	r3, #4
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	429a      	cmp	r2, r3
 8014520:	d002      	beq.n	8014528 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014522:	f06f 0303 	mvn.w	r3, #3
 8014526:	e00d      	b.n	8014544 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801452c:	887a      	ldrh	r2, [r7, #2]
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	9301      	str	r3, [sp, #4]
 8014532:	6a3b      	ldr	r3, [r7, #32]
 8014534:	9300      	str	r3, [sp, #0]
 8014536:	4613      	mov	r3, r2
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	68b9      	ldr	r1, [r7, #8]
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f000 f811 	bl	8014564 <udp_sendto_if_src>
 8014542:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014544:	4618      	mov	r0, r3
 8014546:	3718      	adds	r7, #24
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	0801c674 	.word	0x0801c674
 8014550:	0801c7e8 	.word	0x0801c7e8
 8014554:	0801c6c8 	.word	0x0801c6c8
 8014558:	0801c804 	.word	0x0801c804
 801455c:	0801c820 	.word	0x0801c820
 8014560:	0801c840 	.word	0x0801c840

08014564 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b08c      	sub	sp, #48	; 0x30
 8014568:	af04      	add	r7, sp, #16
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d109      	bne.n	801458c <udp_sendto_if_src+0x28>
 8014578:	4b65      	ldr	r3, [pc, #404]	; (8014710 <udp_sendto_if_src+0x1ac>)
 801457a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801457e:	4965      	ldr	r1, [pc, #404]	; (8014714 <udp_sendto_if_src+0x1b0>)
 8014580:	4865      	ldr	r0, [pc, #404]	; (8014718 <udp_sendto_if_src+0x1b4>)
 8014582:	f004 fe91 	bl	80192a8 <iprintf>
 8014586:	f06f 030f 	mvn.w	r3, #15
 801458a:	e0bc      	b.n	8014706 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d109      	bne.n	80145a6 <udp_sendto_if_src+0x42>
 8014592:	4b5f      	ldr	r3, [pc, #380]	; (8014710 <udp_sendto_if_src+0x1ac>)
 8014594:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014598:	4960      	ldr	r1, [pc, #384]	; (801471c <udp_sendto_if_src+0x1b8>)
 801459a:	485f      	ldr	r0, [pc, #380]	; (8014718 <udp_sendto_if_src+0x1b4>)
 801459c:	f004 fe84 	bl	80192a8 <iprintf>
 80145a0:	f06f 030f 	mvn.w	r3, #15
 80145a4:	e0af      	b.n	8014706 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d109      	bne.n	80145c0 <udp_sendto_if_src+0x5c>
 80145ac:	4b58      	ldr	r3, [pc, #352]	; (8014710 <udp_sendto_if_src+0x1ac>)
 80145ae:	f240 22d3 	movw	r2, #723	; 0x2d3
 80145b2:	495b      	ldr	r1, [pc, #364]	; (8014720 <udp_sendto_if_src+0x1bc>)
 80145b4:	4858      	ldr	r0, [pc, #352]	; (8014718 <udp_sendto_if_src+0x1b4>)
 80145b6:	f004 fe77 	bl	80192a8 <iprintf>
 80145ba:	f06f 030f 	mvn.w	r3, #15
 80145be:	e0a2      	b.n	8014706 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80145c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d109      	bne.n	80145da <udp_sendto_if_src+0x76>
 80145c6:	4b52      	ldr	r3, [pc, #328]	; (8014710 <udp_sendto_if_src+0x1ac>)
 80145c8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80145cc:	4955      	ldr	r1, [pc, #340]	; (8014724 <udp_sendto_if_src+0x1c0>)
 80145ce:	4852      	ldr	r0, [pc, #328]	; (8014718 <udp_sendto_if_src+0x1b4>)
 80145d0:	f004 fe6a 	bl	80192a8 <iprintf>
 80145d4:	f06f 030f 	mvn.w	r3, #15
 80145d8:	e095      	b.n	8014706 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80145da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d109      	bne.n	80145f4 <udp_sendto_if_src+0x90>
 80145e0:	4b4b      	ldr	r3, [pc, #300]	; (8014710 <udp_sendto_if_src+0x1ac>)
 80145e2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80145e6:	4950      	ldr	r1, [pc, #320]	; (8014728 <udp_sendto_if_src+0x1c4>)
 80145e8:	484b      	ldr	r0, [pc, #300]	; (8014718 <udp_sendto_if_src+0x1b4>)
 80145ea:	f004 fe5d 	bl	80192a8 <iprintf>
 80145ee:	f06f 030f 	mvn.w	r3, #15
 80145f2:	e088      	b.n	8014706 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	8a5b      	ldrh	r3, [r3, #18]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10f      	bne.n	801461c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80145fc:	68f9      	ldr	r1, [r7, #12]
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	8a5b      	ldrh	r3, [r3, #18]
 8014602:	461a      	mov	r2, r3
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f000 f893 	bl	8014730 <udp_bind>
 801460a:	4603      	mov	r3, r0
 801460c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801460e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d002      	beq.n	801461c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801461a:	e074      	b.n	8014706 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	891b      	ldrh	r3, [r3, #8]
 8014620:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014624:	4293      	cmp	r3, r2
 8014626:	d902      	bls.n	801462e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014628:	f04f 33ff 	mov.w	r3, #4294967295
 801462c:	e06b      	b.n	8014706 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801462e:	2108      	movs	r1, #8
 8014630:	68b8      	ldr	r0, [r7, #8]
 8014632:	f7f9 ff4f 	bl	800e4d4 <pbuf_add_header>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	d015      	beq.n	8014668 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801463c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014640:	2108      	movs	r1, #8
 8014642:	2022      	movs	r0, #34	; 0x22
 8014644:	f7f9 fcf8 	bl	800e038 <pbuf_alloc>
 8014648:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801464a:	69fb      	ldr	r3, [r7, #28]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d102      	bne.n	8014656 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014650:	f04f 33ff 	mov.w	r3, #4294967295
 8014654:	e057      	b.n	8014706 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	891b      	ldrh	r3, [r3, #8]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d006      	beq.n	801466c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801465e:	68b9      	ldr	r1, [r7, #8]
 8014660:	69f8      	ldr	r0, [r7, #28]
 8014662:	f7fa f8f1 	bl	800e848 <pbuf_chain>
 8014666:	e001      	b.n	801466c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801466c:	69fb      	ldr	r3, [r7, #28]
 801466e:	895b      	ldrh	r3, [r3, #10]
 8014670:	2b07      	cmp	r3, #7
 8014672:	d806      	bhi.n	8014682 <udp_sendto_if_src+0x11e>
 8014674:	4b26      	ldr	r3, [pc, #152]	; (8014710 <udp_sendto_if_src+0x1ac>)
 8014676:	f240 320d 	movw	r2, #781	; 0x30d
 801467a:	492c      	ldr	r1, [pc, #176]	; (801472c <udp_sendto_if_src+0x1c8>)
 801467c:	4826      	ldr	r0, [pc, #152]	; (8014718 <udp_sendto_if_src+0x1b4>)
 801467e:	f004 fe13 	bl	80192a8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	8a5b      	ldrh	r3, [r3, #18]
 801468c:	4618      	mov	r0, r3
 801468e:	f7f8 fbff 	bl	800ce90 <lwip_htons>
 8014692:	4603      	mov	r3, r0
 8014694:	461a      	mov	r2, r3
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801469a:	887b      	ldrh	r3, [r7, #2]
 801469c:	4618      	mov	r0, r3
 801469e:	f7f8 fbf7 	bl	800ce90 <lwip_htons>
 80146a2:	4603      	mov	r3, r0
 80146a4:	461a      	mov	r2, r3
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80146aa:	697b      	ldr	r3, [r7, #20]
 80146ac:	2200      	movs	r2, #0
 80146ae:	719a      	strb	r2, [r3, #6]
 80146b0:	2200      	movs	r2, #0
 80146b2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	891b      	ldrh	r3, [r3, #8]
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7f8 fbe9 	bl	800ce90 <lwip_htons>
 80146be:	4603      	mov	r3, r0
 80146c0:	461a      	mov	r2, r3
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80146c6:	2311      	movs	r3, #17
 80146c8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	7adb      	ldrb	r3, [r3, #11]
 80146ce:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	7a9b      	ldrb	r3, [r3, #10]
 80146d4:	7cb9      	ldrb	r1, [r7, #18]
 80146d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146d8:	9202      	str	r2, [sp, #8]
 80146da:	7cfa      	ldrb	r2, [r7, #19]
 80146dc:	9201      	str	r2, [sp, #4]
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	460b      	mov	r3, r1
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80146e6:	69f8      	ldr	r0, [r7, #28]
 80146e8:	f003 fb38 	bl	8017d5c <ip4_output_if_src>
 80146ec:	4603      	mov	r3, r0
 80146ee:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80146f0:	69fa      	ldr	r2, [r7, #28]
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d004      	beq.n	8014702 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80146f8:	69f8      	ldr	r0, [r7, #28]
 80146fa:	f7f9 ff81 	bl	800e600 <pbuf_free>
    q = NULL;
 80146fe:	2300      	movs	r3, #0
 8014700:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014702:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014706:	4618      	mov	r0, r3
 8014708:	3720      	adds	r7, #32
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	0801c674 	.word	0x0801c674
 8014714:	0801c860 	.word	0x0801c860
 8014718:	0801c6c8 	.word	0x0801c6c8
 801471c:	0801c880 	.word	0x0801c880
 8014720:	0801c8a0 	.word	0x0801c8a0
 8014724:	0801c8c4 	.word	0x0801c8c4
 8014728:	0801c8e8 	.word	0x0801c8e8
 801472c:	0801c90c 	.word	0x0801c90c

08014730 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b086      	sub	sp, #24
 8014734:	af00      	add	r7, sp, #0
 8014736:	60f8      	str	r0, [r7, #12]
 8014738:	60b9      	str	r1, [r7, #8]
 801473a:	4613      	mov	r3, r2
 801473c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d101      	bne.n	8014748 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014744:	4b39      	ldr	r3, [pc, #228]	; (801482c <udp_bind+0xfc>)
 8014746:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d109      	bne.n	8014762 <udp_bind+0x32>
 801474e:	4b38      	ldr	r3, [pc, #224]	; (8014830 <udp_bind+0x100>)
 8014750:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014754:	4937      	ldr	r1, [pc, #220]	; (8014834 <udp_bind+0x104>)
 8014756:	4838      	ldr	r0, [pc, #224]	; (8014838 <udp_bind+0x108>)
 8014758:	f004 fda6 	bl	80192a8 <iprintf>
 801475c:	f06f 030f 	mvn.w	r3, #15
 8014760:	e060      	b.n	8014824 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014762:	2300      	movs	r3, #0
 8014764:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014766:	4b35      	ldr	r3, [pc, #212]	; (801483c <udp_bind+0x10c>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	617b      	str	r3, [r7, #20]
 801476c:	e009      	b.n	8014782 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	429a      	cmp	r2, r3
 8014774:	d102      	bne.n	801477c <udp_bind+0x4c>
      rebind = 1;
 8014776:	2301      	movs	r3, #1
 8014778:	74fb      	strb	r3, [r7, #19]
      break;
 801477a:	e005      	b.n	8014788 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	617b      	str	r3, [r7, #20]
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d1f2      	bne.n	801476e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014788:	88fb      	ldrh	r3, [r7, #6]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d109      	bne.n	80147a2 <udp_bind+0x72>
    port = udp_new_port();
 801478e:	f7ff fcc5 	bl	801411c <udp_new_port>
 8014792:	4603      	mov	r3, r0
 8014794:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014796:	88fb      	ldrh	r3, [r7, #6]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d12c      	bne.n	80147f6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801479c:	f06f 0307 	mvn.w	r3, #7
 80147a0:	e040      	b.n	8014824 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147a2:	4b26      	ldr	r3, [pc, #152]	; (801483c <udp_bind+0x10c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	617b      	str	r3, [r7, #20]
 80147a8:	e022      	b.n	80147f0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	697b      	ldr	r3, [r7, #20]
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d01b      	beq.n	80147ea <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	8a5b      	ldrh	r3, [r3, #18]
 80147b6:	88fa      	ldrh	r2, [r7, #6]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	d116      	bne.n	80147ea <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	681a      	ldr	r2, [r3, #0]
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d00d      	beq.n	80147e4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147c8:	68bb      	ldr	r3, [r7, #8]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d00a      	beq.n	80147e4 <udp_bind+0xb4>
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d006      	beq.n	80147e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147d6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d003      	beq.n	80147e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147dc:	697b      	ldr	r3, [r7, #20]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d102      	bne.n	80147ea <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80147e4:	f06f 0307 	mvn.w	r3, #7
 80147e8:	e01c      	b.n	8014824 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	617b      	str	r3, [r7, #20]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d1d9      	bne.n	80147aa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d002      	beq.n	8014802 <udp_bind+0xd2>
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	e000      	b.n	8014804 <udp_bind+0xd4>
 8014802:	2300      	movs	r3, #0
 8014804:	68fa      	ldr	r2, [r7, #12]
 8014806:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	88fa      	ldrh	r2, [r7, #6]
 801480c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801480e:	7cfb      	ldrb	r3, [r7, #19]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d106      	bne.n	8014822 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014814:	4b09      	ldr	r3, [pc, #36]	; (801483c <udp_bind+0x10c>)
 8014816:	681a      	ldr	r2, [r3, #0]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801481c:	4a07      	ldr	r2, [pc, #28]	; (801483c <udp_bind+0x10c>)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014822:	2300      	movs	r3, #0
}
 8014824:	4618      	mov	r0, r3
 8014826:	3718      	adds	r7, #24
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}
 801482c:	0801d6cc 	.word	0x0801d6cc
 8014830:	0801c674 	.word	0x0801c674
 8014834:	0801c93c 	.word	0x0801c93c
 8014838:	0801c6c8 	.word	0x0801c6c8
 801483c:	2000d094 	.word	0x2000d094

08014840 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b086      	sub	sp, #24
 8014844:	af00      	add	r7, sp, #0
 8014846:	60f8      	str	r0, [r7, #12]
 8014848:	60b9      	str	r1, [r7, #8]
 801484a:	4613      	mov	r3, r2
 801484c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d109      	bne.n	8014868 <udp_connect+0x28>
 8014854:	4b2c      	ldr	r3, [pc, #176]	; (8014908 <udp_connect+0xc8>)
 8014856:	f240 4235 	movw	r2, #1077	; 0x435
 801485a:	492c      	ldr	r1, [pc, #176]	; (801490c <udp_connect+0xcc>)
 801485c:	482c      	ldr	r0, [pc, #176]	; (8014910 <udp_connect+0xd0>)
 801485e:	f004 fd23 	bl	80192a8 <iprintf>
 8014862:	f06f 030f 	mvn.w	r3, #15
 8014866:	e04b      	b.n	8014900 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d109      	bne.n	8014882 <udp_connect+0x42>
 801486e:	4b26      	ldr	r3, [pc, #152]	; (8014908 <udp_connect+0xc8>)
 8014870:	f240 4236 	movw	r2, #1078	; 0x436
 8014874:	4927      	ldr	r1, [pc, #156]	; (8014914 <udp_connect+0xd4>)
 8014876:	4826      	ldr	r0, [pc, #152]	; (8014910 <udp_connect+0xd0>)
 8014878:	f004 fd16 	bl	80192a8 <iprintf>
 801487c:	f06f 030f 	mvn.w	r3, #15
 8014880:	e03e      	b.n	8014900 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	8a5b      	ldrh	r3, [r3, #18]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d10f      	bne.n	80148aa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801488a:	68f9      	ldr	r1, [r7, #12]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	8a5b      	ldrh	r3, [r3, #18]
 8014890:	461a      	mov	r2, r3
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f7ff ff4c 	bl	8014730 <udp_bind>
 8014898:	4603      	mov	r3, r0
 801489a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801489c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d002      	beq.n	80148aa <udp_connect+0x6a>
      return err;
 80148a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148a8:	e02a      	b.n	8014900 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <udp_connect+0x76>
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	e000      	b.n	80148b8 <udp_connect+0x78>
 80148b6:	2300      	movs	r3, #0
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	88fa      	ldrh	r2, [r7, #6]
 80148c0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	7c1b      	ldrb	r3, [r3, #16]
 80148c6:	f043 0304 	orr.w	r3, r3, #4
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148d0:	4b11      	ldr	r3, [pc, #68]	; (8014918 <udp_connect+0xd8>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	617b      	str	r3, [r7, #20]
 80148d6:	e008      	b.n	80148ea <udp_connect+0xaa>
    if (pcb == ipcb) {
 80148d8:	68fa      	ldr	r2, [r7, #12]
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d101      	bne.n	80148e4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80148e0:	2300      	movs	r3, #0
 80148e2:	e00d      	b.n	8014900 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	617b      	str	r3, [r7, #20]
 80148ea:	697b      	ldr	r3, [r7, #20]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d1f3      	bne.n	80148d8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80148f0:	4b09      	ldr	r3, [pc, #36]	; (8014918 <udp_connect+0xd8>)
 80148f2:	681a      	ldr	r2, [r3, #0]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80148f8:	4a07      	ldr	r2, [pc, #28]	; (8014918 <udp_connect+0xd8>)
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80148fe:	2300      	movs	r3, #0
}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	0801c674 	.word	0x0801c674
 801490c:	0801c954 	.word	0x0801c954
 8014910:	0801c6c8 	.word	0x0801c6c8
 8014914:	0801c970 	.word	0x0801c970
 8014918:	2000d094 	.word	0x2000d094

0801491c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d107      	bne.n	801493e <udp_recv+0x22>
 801492e:	4b08      	ldr	r3, [pc, #32]	; (8014950 <udp_recv+0x34>)
 8014930:	f240 428a 	movw	r2, #1162	; 0x48a
 8014934:	4907      	ldr	r1, [pc, #28]	; (8014954 <udp_recv+0x38>)
 8014936:	4808      	ldr	r0, [pc, #32]	; (8014958 <udp_recv+0x3c>)
 8014938:	f004 fcb6 	bl	80192a8 <iprintf>
 801493c:	e005      	b.n	801494a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	68ba      	ldr	r2, [r7, #8]
 8014942:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	61da      	str	r2, [r3, #28]
}
 801494a:	3710      	adds	r7, #16
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	0801c674 	.word	0x0801c674
 8014954:	0801c9a8 	.word	0x0801c9a8
 8014958:	0801c6c8 	.word	0x0801c6c8

0801495c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d107      	bne.n	801497a <udp_remove+0x1e>
 801496a:	4b19      	ldr	r3, [pc, #100]	; (80149d0 <udp_remove+0x74>)
 801496c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014970:	4918      	ldr	r1, [pc, #96]	; (80149d4 <udp_remove+0x78>)
 8014972:	4819      	ldr	r0, [pc, #100]	; (80149d8 <udp_remove+0x7c>)
 8014974:	f004 fc98 	bl	80192a8 <iprintf>
 8014978:	e026      	b.n	80149c8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801497a:	4b18      	ldr	r3, [pc, #96]	; (80149dc <udp_remove+0x80>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	429a      	cmp	r2, r3
 8014982:	d105      	bne.n	8014990 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014984:	4b15      	ldr	r3, [pc, #84]	; (80149dc <udp_remove+0x80>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	68db      	ldr	r3, [r3, #12]
 801498a:	4a14      	ldr	r2, [pc, #80]	; (80149dc <udp_remove+0x80>)
 801498c:	6013      	str	r3, [r2, #0]
 801498e:	e017      	b.n	80149c0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014990:	4b12      	ldr	r3, [pc, #72]	; (80149dc <udp_remove+0x80>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	60fb      	str	r3, [r7, #12]
 8014996:	e010      	b.n	80149ba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d009      	beq.n	80149b4 <udp_remove+0x58>
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d104      	bne.n	80149b4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	68da      	ldr	r2, [r3, #12]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	60da      	str	r2, [r3, #12]
        break;
 80149b2:	e005      	b.n	80149c0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	60fb      	str	r3, [r7, #12]
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1eb      	bne.n	8014998 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149c0:	6879      	ldr	r1, [r7, #4]
 80149c2:	2000      	movs	r0, #0
 80149c4:	f7f8 ff6c 	bl	800d8a0 <memp_free>
}
 80149c8:	3710      	adds	r7, #16
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	0801c674 	.word	0x0801c674
 80149d4:	0801c9c0 	.word	0x0801c9c0
 80149d8:	0801c6c8 	.word	0x0801c6c8
 80149dc:	2000d094 	.word	0x2000d094

080149e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80149e6:	2000      	movs	r0, #0
 80149e8:	f7f8 ff08 	bl	800d7fc <memp_malloc>
 80149ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d007      	beq.n	8014a04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80149f4:	2220      	movs	r2, #32
 80149f6:	2100      	movs	r1, #0
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f004 fbf2 	bl	80191e2 <memset>
    pcb->ttl = UDP_TTL;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	22ff      	movs	r2, #255	; 0xff
 8014a02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014a04:	687b      	ldr	r3, [r7, #4]
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3708      	adds	r7, #8
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	bd80      	pop	{r7, pc}
	...

08014a10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a10:	b480      	push	{r7}
 8014a12:	b085      	sub	sp, #20
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d01e      	beq.n	8014a5e <udp_netif_ip_addr_changed+0x4e>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d01a      	beq.n	8014a5e <udp_netif_ip_addr_changed+0x4e>
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d017      	beq.n	8014a5e <udp_netif_ip_addr_changed+0x4e>
 8014a2e:	683b      	ldr	r3, [r7, #0]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d013      	beq.n	8014a5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a36:	4b0d      	ldr	r3, [pc, #52]	; (8014a6c <udp_netif_ip_addr_changed+0x5c>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	60fb      	str	r3, [r7, #12]
 8014a3c:	e00c      	b.n	8014a58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681a      	ldr	r2, [r3, #0]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d103      	bne.n	8014a52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	681a      	ldr	r2, [r3, #0]
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	68db      	ldr	r3, [r3, #12]
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d1ef      	bne.n	8014a3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a5e:	bf00      	nop
 8014a60:	3714      	adds	r7, #20
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr
 8014a6a:	bf00      	nop
 8014a6c:	2000d094 	.word	0x2000d094

08014a70 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014a74:	4b20      	ldr	r3, [pc, #128]	; (8014af8 <dhcp_inc_pcb_refcount+0x88>)
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d133      	bne.n	8014ae4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014a7c:	4b1f      	ldr	r3, [pc, #124]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d005      	beq.n	8014a90 <dhcp_inc_pcb_refcount+0x20>
 8014a84:	4b1e      	ldr	r3, [pc, #120]	; (8014b00 <dhcp_inc_pcb_refcount+0x90>)
 8014a86:	22e5      	movs	r2, #229	; 0xe5
 8014a88:	491e      	ldr	r1, [pc, #120]	; (8014b04 <dhcp_inc_pcb_refcount+0x94>)
 8014a8a:	481f      	ldr	r0, [pc, #124]	; (8014b08 <dhcp_inc_pcb_refcount+0x98>)
 8014a8c:	f004 fc0c 	bl	80192a8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014a90:	f7ff ffa6 	bl	80149e0 <udp_new>
 8014a94:	4603      	mov	r3, r0
 8014a96:	4a19      	ldr	r2, [pc, #100]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014a98:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014a9a:	4b18      	ldr	r3, [pc, #96]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d102      	bne.n	8014aa8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	e024      	b.n	8014af2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014aa8:	4b14      	ldr	r3, [pc, #80]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	7a5a      	ldrb	r2, [r3, #9]
 8014aae:	4b13      	ldr	r3, [pc, #76]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	f042 0220 	orr.w	r2, r2, #32
 8014ab6:	b2d2      	uxtb	r2, r2
 8014ab8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014aba:	4b10      	ldr	r3, [pc, #64]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2244      	movs	r2, #68	; 0x44
 8014ac0:	4912      	ldr	r1, [pc, #72]	; (8014b0c <dhcp_inc_pcb_refcount+0x9c>)
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7ff fe34 	bl	8014730 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014ac8:	4b0c      	ldr	r3, [pc, #48]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2243      	movs	r2, #67	; 0x43
 8014ace:	490f      	ldr	r1, [pc, #60]	; (8014b0c <dhcp_inc_pcb_refcount+0x9c>)
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f7ff feb5 	bl	8014840 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014ad6:	4b09      	ldr	r3, [pc, #36]	; (8014afc <dhcp_inc_pcb_refcount+0x8c>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2200      	movs	r2, #0
 8014adc:	490c      	ldr	r1, [pc, #48]	; (8014b10 <dhcp_inc_pcb_refcount+0xa0>)
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7ff ff1c 	bl	801491c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014ae4:	4b04      	ldr	r3, [pc, #16]	; (8014af8 <dhcp_inc_pcb_refcount+0x88>)
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	b2da      	uxtb	r2, r3
 8014aec:	4b02      	ldr	r3, [pc, #8]	; (8014af8 <dhcp_inc_pcb_refcount+0x88>)
 8014aee:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014af0:	2300      	movs	r3, #0
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	20004b60 	.word	0x20004b60
 8014afc:	20004b5c 	.word	0x20004b5c
 8014b00:	0801c9d8 	.word	0x0801c9d8
 8014b04:	0801ca10 	.word	0x0801ca10
 8014b08:	0801ca38 	.word	0x0801ca38
 8014b0c:	0801d6cc 	.word	0x0801d6cc
 8014b10:	080163a5 	.word	0x080163a5

08014b14 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014b18:	4b0e      	ldr	r3, [pc, #56]	; (8014b54 <dhcp_dec_pcb_refcount+0x40>)
 8014b1a:	781b      	ldrb	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d105      	bne.n	8014b2c <dhcp_dec_pcb_refcount+0x18>
 8014b20:	4b0d      	ldr	r3, [pc, #52]	; (8014b58 <dhcp_dec_pcb_refcount+0x44>)
 8014b22:	22ff      	movs	r2, #255	; 0xff
 8014b24:	490d      	ldr	r1, [pc, #52]	; (8014b5c <dhcp_dec_pcb_refcount+0x48>)
 8014b26:	480e      	ldr	r0, [pc, #56]	; (8014b60 <dhcp_dec_pcb_refcount+0x4c>)
 8014b28:	f004 fbbe 	bl	80192a8 <iprintf>
  dhcp_pcb_refcount--;
 8014b2c:	4b09      	ldr	r3, [pc, #36]	; (8014b54 <dhcp_dec_pcb_refcount+0x40>)
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	3b01      	subs	r3, #1
 8014b32:	b2da      	uxtb	r2, r3
 8014b34:	4b07      	ldr	r3, [pc, #28]	; (8014b54 <dhcp_dec_pcb_refcount+0x40>)
 8014b36:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014b38:	4b06      	ldr	r3, [pc, #24]	; (8014b54 <dhcp_dec_pcb_refcount+0x40>)
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d107      	bne.n	8014b50 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014b40:	4b08      	ldr	r3, [pc, #32]	; (8014b64 <dhcp_dec_pcb_refcount+0x50>)
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7ff ff09 	bl	801495c <udp_remove>
    dhcp_pcb = NULL;
 8014b4a:	4b06      	ldr	r3, [pc, #24]	; (8014b64 <dhcp_dec_pcb_refcount+0x50>)
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	601a      	str	r2, [r3, #0]
  }
}
 8014b50:	bf00      	nop
 8014b52:	bd80      	pop	{r7, pc}
 8014b54:	20004b60 	.word	0x20004b60
 8014b58:	0801c9d8 	.word	0x0801c9d8
 8014b5c:	0801ca60 	.word	0x0801ca60
 8014b60:	0801ca38 	.word	0x0801ca38
 8014b64:	20004b5c 	.word	0x20004b5c

08014b68 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b084      	sub	sp, #16
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b74:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014b76:	210c      	movs	r1, #12
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f001 f855 	bl	8015c28 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b7e:	4b06      	ldr	r3, [pc, #24]	; (8014b98 <dhcp_handle_nak+0x30>)
 8014b80:	4a05      	ldr	r2, [pc, #20]	; (8014b98 <dhcp_handle_nak+0x30>)
 8014b82:	4905      	ldr	r1, [pc, #20]	; (8014b98 <dhcp_handle_nak+0x30>)
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f7f9 f82d 	bl	800dbe4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f000 fc48 	bl	8015420 <dhcp_discover>
}
 8014b90:	bf00      	nop
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}
 8014b98:	0801d6cc 	.word	0x0801d6cc

08014b9c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b084      	sub	sp, #16
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014baa:	2108      	movs	r1, #8
 8014bac:	68f8      	ldr	r0, [r7, #12]
 8014bae:	f001 f83b 	bl	8015c28 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	331c      	adds	r3, #28
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	4619      	mov	r1, r3
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f002 fb3c 	bl	8017238 <etharp_query>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	799b      	ldrb	r3, [r3, #6]
 8014bc8:	2bff      	cmp	r3, #255	; 0xff
 8014bca:	d005      	beq.n	8014bd8 <dhcp_check+0x3c>
    dhcp->tries++;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	799b      	ldrb	r3, [r3, #6]
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	b2da      	uxtb	r2, r3
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014bd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014bdc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014bde:	893b      	ldrh	r3, [r7, #8]
 8014be0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014be4:	4a06      	ldr	r2, [pc, #24]	; (8014c00 <dhcp_check+0x64>)
 8014be6:	fb82 1203 	smull	r1, r2, r2, r3
 8014bea:	1152      	asrs	r2, r2, #5
 8014bec:	17db      	asrs	r3, r3, #31
 8014bee:	1ad3      	subs	r3, r2, r3
 8014bf0:	b29a      	uxth	r2, r3
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014bf6:	bf00      	nop
 8014bf8:	3710      	adds	r7, #16
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	10624dd3 	.word	0x10624dd3

08014c04 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b084      	sub	sp, #16
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
 8014c0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c12:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014c14:	4b0c      	ldr	r3, [pc, #48]	; (8014c48 <dhcp_handle_offer+0x44>)
 8014c16:	789b      	ldrb	r3, [r3, #2]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d011      	beq.n	8014c40 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014c22:	4b0a      	ldr	r3, [pc, #40]	; (8014c4c <dhcp_handle_offer+0x48>)
 8014c24:	689b      	ldr	r3, [r3, #8]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7f8 f947 	bl	800ceba <lwip_htonl>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	691a      	ldr	r2, [r3, #16]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f000 f808 	bl	8014c50 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014c40:	bf00      	nop
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	2000d098 	.word	0x2000d098
 8014c4c:	2000d0a0 	.word	0x2000d0a0

08014c50 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014c50:	b5b0      	push	{r4, r5, r7, lr}
 8014c52:	b08a      	sub	sp, #40	; 0x28
 8014c54:	af02      	add	r7, sp, #8
 8014c56:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d109      	bne.n	8014c72 <dhcp_select+0x22>
 8014c5e:	4b71      	ldr	r3, [pc, #452]	; (8014e24 <dhcp_select+0x1d4>)
 8014c60:	f240 1277 	movw	r2, #375	; 0x177
 8014c64:	4970      	ldr	r1, [pc, #448]	; (8014e28 <dhcp_select+0x1d8>)
 8014c66:	4871      	ldr	r0, [pc, #452]	; (8014e2c <dhcp_select+0x1dc>)
 8014c68:	f004 fb1e 	bl	80192a8 <iprintf>
 8014c6c:	f06f 030f 	mvn.w	r3, #15
 8014c70:	e0d3      	b.n	8014e1a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c76:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d109      	bne.n	8014c92 <dhcp_select+0x42>
 8014c7e:	4b69      	ldr	r3, [pc, #420]	; (8014e24 <dhcp_select+0x1d4>)
 8014c80:	f240 1279 	movw	r2, #377	; 0x179
 8014c84:	496a      	ldr	r1, [pc, #424]	; (8014e30 <dhcp_select+0x1e0>)
 8014c86:	4869      	ldr	r0, [pc, #420]	; (8014e2c <dhcp_select+0x1dc>)
 8014c88:	f004 fb0e 	bl	80192a8 <iprintf>
 8014c8c:	f06f 0305 	mvn.w	r3, #5
 8014c90:	e0c3      	b.n	8014e1a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014c92:	2101      	movs	r1, #1
 8014c94:	69b8      	ldr	r0, [r7, #24]
 8014c96:	f000 ffc7 	bl	8015c28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014c9a:	f107 030c 	add.w	r3, r7, #12
 8014c9e:	2203      	movs	r2, #3
 8014ca0:	69b9      	ldr	r1, [r7, #24]
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f001 fc4c 	bl	8016540 <dhcp_create_msg>
 8014ca8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 8085 	beq.w	8014dbc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014cb8:	89b8      	ldrh	r0, [r7, #12]
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	2239      	movs	r2, #57	; 0x39
 8014cc4:	f000 ffca 	bl	8015c5c <dhcp_option>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014ccc:	89b8      	ldrh	r0, [r7, #12]
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014cd8:	461a      	mov	r2, r3
 8014cda:	f001 f819 	bl	8015d10 <dhcp_option_short>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ce2:	89b8      	ldrh	r0, [r7, #12]
 8014ce4:	693b      	ldr	r3, [r7, #16]
 8014ce6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cea:	2304      	movs	r3, #4
 8014cec:	2232      	movs	r2, #50	; 0x32
 8014cee:	f000 ffb5 	bl	8015c5c <dhcp_option>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cf6:	89bc      	ldrh	r4, [r7, #12]
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	69db      	ldr	r3, [r3, #28]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7f8 f8d9 	bl	800ceba <lwip_htonl>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	4629      	mov	r1, r5
 8014d0e:	4620      	mov	r0, r4
 8014d10:	f001 f830 	bl	8015d74 <dhcp_option_long>
 8014d14:	4603      	mov	r3, r0
 8014d16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014d18:	89b8      	ldrh	r0, [r7, #12]
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d20:	2304      	movs	r3, #4
 8014d22:	2236      	movs	r2, #54	; 0x36
 8014d24:	f000 ff9a 	bl	8015c5c <dhcp_option>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014d2c:	89bc      	ldrh	r4, [r7, #12]
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	699b      	ldr	r3, [r3, #24]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7f8 f8be 	bl	800ceba <lwip_htonl>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	461a      	mov	r2, r3
 8014d42:	4629      	mov	r1, r5
 8014d44:	4620      	mov	r0, r4
 8014d46:	f001 f815 	bl	8015d74 <dhcp_option_long>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d4e:	89b8      	ldrh	r0, [r7, #12]
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d56:	2303      	movs	r3, #3
 8014d58:	2237      	movs	r2, #55	; 0x37
 8014d5a:	f000 ff7f 	bl	8015c5c <dhcp_option>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d62:	2300      	movs	r3, #0
 8014d64:	77bb      	strb	r3, [r7, #30]
 8014d66:	e00e      	b.n	8014d86 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d68:	89b8      	ldrh	r0, [r7, #12]
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d70:	7fbb      	ldrb	r3, [r7, #30]
 8014d72:	4a30      	ldr	r2, [pc, #192]	; (8014e34 <dhcp_select+0x1e4>)
 8014d74:	5cd3      	ldrb	r3, [r2, r3]
 8014d76:	461a      	mov	r2, r3
 8014d78:	f000 ffa4 	bl	8015cc4 <dhcp_option_byte>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d80:	7fbb      	ldrb	r3, [r7, #30]
 8014d82:	3301      	adds	r3, #1
 8014d84:	77bb      	strb	r3, [r7, #30]
 8014d86:	7fbb      	ldrb	r3, [r7, #30]
 8014d88:	2b02      	cmp	r3, #2
 8014d8a:	d9ed      	bls.n	8014d68 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d8c:	89b8      	ldrh	r0, [r7, #12]
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	33f0      	adds	r3, #240	; 0xf0
 8014d92:	697a      	ldr	r2, [r7, #20]
 8014d94:	4619      	mov	r1, r3
 8014d96:	f001 fca9 	bl	80166ec <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d9a:	4b27      	ldr	r3, [pc, #156]	; (8014e38 <dhcp_select+0x1e8>)
 8014d9c:	6818      	ldr	r0, [r3, #0]
 8014d9e:	4b27      	ldr	r3, [pc, #156]	; (8014e3c <dhcp_select+0x1ec>)
 8014da0:	9301      	str	r3, [sp, #4]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	9300      	str	r3, [sp, #0]
 8014da6:	2343      	movs	r3, #67	; 0x43
 8014da8:	4a25      	ldr	r2, [pc, #148]	; (8014e40 <dhcp_select+0x1f0>)
 8014daa:	6979      	ldr	r1, [r7, #20]
 8014dac:	f7ff fbda 	bl	8014564 <udp_sendto_if_src>
 8014db0:	4603      	mov	r3, r0
 8014db2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014db4:	6978      	ldr	r0, [r7, #20]
 8014db6:	f7f9 fc23 	bl	800e600 <pbuf_free>
 8014dba:	e001      	b.n	8014dc0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014dbc:	23ff      	movs	r3, #255	; 0xff
 8014dbe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014dc0:	69bb      	ldr	r3, [r7, #24]
 8014dc2:	799b      	ldrb	r3, [r3, #6]
 8014dc4:	2bff      	cmp	r3, #255	; 0xff
 8014dc6:	d005      	beq.n	8014dd4 <dhcp_select+0x184>
    dhcp->tries++;
 8014dc8:	69bb      	ldr	r3, [r7, #24]
 8014dca:	799b      	ldrb	r3, [r3, #6]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	b2da      	uxtb	r2, r3
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014dd4:	69bb      	ldr	r3, [r7, #24]
 8014dd6:	799b      	ldrb	r3, [r3, #6]
 8014dd8:	2b05      	cmp	r3, #5
 8014dda:	d80d      	bhi.n	8014df8 <dhcp_select+0x1a8>
 8014ddc:	69bb      	ldr	r3, [r7, #24]
 8014dde:	799b      	ldrb	r3, [r3, #6]
 8014de0:	461a      	mov	r2, r3
 8014de2:	2301      	movs	r3, #1
 8014de4:	4093      	lsls	r3, r2
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	461a      	mov	r2, r3
 8014dea:	0152      	lsls	r2, r2, #5
 8014dec:	1ad2      	subs	r2, r2, r3
 8014dee:	0092      	lsls	r2, r2, #2
 8014df0:	4413      	add	r3, r2
 8014df2:	00db      	lsls	r3, r3, #3
 8014df4:	b29b      	uxth	r3, r3
 8014df6:	e001      	b.n	8014dfc <dhcp_select+0x1ac>
 8014df8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014dfc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014dfe:	89fb      	ldrh	r3, [r7, #14]
 8014e00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e04:	4a0f      	ldr	r2, [pc, #60]	; (8014e44 <dhcp_select+0x1f4>)
 8014e06:	fb82 1203 	smull	r1, r2, r2, r3
 8014e0a:	1152      	asrs	r2, r2, #5
 8014e0c:	17db      	asrs	r3, r3, #31
 8014e0e:	1ad3      	subs	r3, r2, r3
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3720      	adds	r7, #32
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bdb0      	pop	{r4, r5, r7, pc}
 8014e22:	bf00      	nop
 8014e24:	0801c9d8 	.word	0x0801c9d8
 8014e28:	0801ca84 	.word	0x0801ca84
 8014e2c:	0801ca38 	.word	0x0801ca38
 8014e30:	0801caa0 	.word	0x0801caa0
 8014e34:	20000064 	.word	0x20000064
 8014e38:	20004b5c 	.word	0x20004b5c
 8014e3c:	0801d6cc 	.word	0x0801d6cc
 8014e40:	0801d6d0 	.word	0x0801d6d0
 8014e44:	10624dd3 	.word	0x10624dd3

08014e48 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014e4e:	4b27      	ldr	r3, [pc, #156]	; (8014eec <dhcp_coarse_tmr+0xa4>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	607b      	str	r3, [r7, #4]
 8014e54:	e042      	b.n	8014edc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e5a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d039      	beq.n	8014ed6 <dhcp_coarse_tmr+0x8e>
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	795b      	ldrb	r3, [r3, #5]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d035      	beq.n	8014ed6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	8a9b      	ldrh	r3, [r3, #20]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d012      	beq.n	8014e98 <dhcp_coarse_tmr+0x50>
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	8a5b      	ldrh	r3, [r3, #18]
 8014e76:	3301      	adds	r3, #1
 8014e78:	b29a      	uxth	r2, r3
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	825a      	strh	r2, [r3, #18]
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	8a5a      	ldrh	r2, [r3, #18]
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	8a9b      	ldrh	r3, [r3, #20]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d106      	bne.n	8014e98 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 fe32 	bl	8015af4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f000 f969 	bl	8015168 <dhcp_start>
 8014e96:	e01e      	b.n	8014ed6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	8a1b      	ldrh	r3, [r3, #16]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d00b      	beq.n	8014eb8 <dhcp_coarse_tmr+0x70>
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	8a1b      	ldrh	r3, [r3, #16]
 8014ea4:	1e5a      	subs	r2, r3, #1
 8014ea6:	b291      	uxth	r1, r2
 8014ea8:	683a      	ldr	r2, [r7, #0]
 8014eaa:	8211      	strh	r1, [r2, #16]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d103      	bne.n	8014eb8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f000 f8c6 	bl	8015042 <dhcp_t2_timeout>
 8014eb6:	e00e      	b.n	8014ed6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	89db      	ldrh	r3, [r3, #14]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00a      	beq.n	8014ed6 <dhcp_coarse_tmr+0x8e>
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	89db      	ldrh	r3, [r3, #14]
 8014ec4:	1e5a      	subs	r2, r3, #1
 8014ec6:	b291      	uxth	r1, r2
 8014ec8:	683a      	ldr	r2, [r7, #0]
 8014eca:	81d1      	strh	r1, [r2, #14]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d102      	bne.n	8014ed6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f000 f888 	bl	8014fe6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	607b      	str	r3, [r7, #4]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1b9      	bne.n	8014e56 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014ee2:	bf00      	nop
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	2000d06c 	.word	0x2000d06c

08014ef0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014ef6:	4b16      	ldr	r3, [pc, #88]	; (8014f50 <dhcp_fine_tmr+0x60>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	607b      	str	r3, [r7, #4]
 8014efc:	e020      	b.n	8014f40 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f02:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d017      	beq.n	8014f3a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	891b      	ldrh	r3, [r3, #8]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d906      	bls.n	8014f20 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	891b      	ldrh	r3, [r3, #8]
 8014f16:	3b01      	subs	r3, #1
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	811a      	strh	r2, [r3, #8]
 8014f1e:	e00c      	b.n	8014f3a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	891b      	ldrh	r3, [r3, #8]
 8014f24:	2b01      	cmp	r3, #1
 8014f26:	d108      	bne.n	8014f3a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	891b      	ldrh	r3, [r3, #8]
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	b29a      	uxth	r2, r3
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 f80d 	bl	8014f54 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	607b      	str	r3, [r7, #4]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d1db      	bne.n	8014efe <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014f46:	bf00      	nop
 8014f48:	bf00      	nop
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	2000d06c 	.word	0x2000d06c

08014f54 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b084      	sub	sp, #16
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	795b      	ldrb	r3, [r3, #5]
 8014f66:	2b0c      	cmp	r3, #12
 8014f68:	d003      	beq.n	8014f72 <dhcp_timeout+0x1e>
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	795b      	ldrb	r3, [r3, #5]
 8014f6e:	2b06      	cmp	r3, #6
 8014f70:	d103      	bne.n	8014f7a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014f72:	6878      	ldr	r0, [r7, #4]
 8014f74:	f000 fa54 	bl	8015420 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014f78:	e031      	b.n	8014fde <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	795b      	ldrb	r3, [r3, #5]
 8014f7e:	2b01      	cmp	r3, #1
 8014f80:	d10e      	bne.n	8014fa0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	799b      	ldrb	r3, [r3, #6]
 8014f86:	2b05      	cmp	r3, #5
 8014f88:	d803      	bhi.n	8014f92 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f7ff fe60 	bl	8014c50 <dhcp_select>
}
 8014f90:	e025      	b.n	8014fde <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f000 fdae 	bl	8015af4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f000 f8e5 	bl	8015168 <dhcp_start>
}
 8014f9e:	e01e      	b.n	8014fde <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	795b      	ldrb	r3, [r3, #5]
 8014fa4:	2b08      	cmp	r3, #8
 8014fa6:	d10b      	bne.n	8014fc0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	799b      	ldrb	r3, [r3, #6]
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d803      	bhi.n	8014fb8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7ff fdf3 	bl	8014b9c <dhcp_check>
}
 8014fb6:	e012      	b.n	8014fde <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f000 fad3 	bl	8015564 <dhcp_bind>
}
 8014fbe:	e00e      	b.n	8014fde <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	795b      	ldrb	r3, [r3, #5]
 8014fc4:	2b03      	cmp	r3, #3
 8014fc6:	d10a      	bne.n	8014fde <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	799b      	ldrb	r3, [r3, #6]
 8014fcc:	2b01      	cmp	r3, #1
 8014fce:	d803      	bhi.n	8014fd8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f000 fcd9 	bl	8015988 <dhcp_reboot>
}
 8014fd6:	e002      	b.n	8014fde <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f000 fa21 	bl	8015420 <dhcp_discover>
}
 8014fde:	bf00      	nop
 8014fe0:	3710      	adds	r7, #16
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}

08014fe6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014fe6:	b580      	push	{r7, lr}
 8014fe8:	b084      	sub	sp, #16
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	795b      	ldrb	r3, [r3, #5]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d007      	beq.n	801500c <dhcp_t1_timeout+0x26>
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	795b      	ldrb	r3, [r3, #5]
 8015000:	2b0a      	cmp	r3, #10
 8015002:	d003      	beq.n	801500c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015008:	2b05      	cmp	r3, #5
 801500a:	d116      	bne.n	801503a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f000 fb83 	bl	8015718 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	899b      	ldrh	r3, [r3, #12]
 8015016:	461a      	mov	r2, r3
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	8a5b      	ldrh	r3, [r3, #18]
 801501c:	1ad3      	subs	r3, r2, r3
 801501e:	2b01      	cmp	r3, #1
 8015020:	dd0b      	ble.n	801503a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	899b      	ldrh	r3, [r3, #12]
 8015026:	461a      	mov	r2, r3
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	8a5b      	ldrh	r3, [r3, #18]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	0fda      	lsrs	r2, r3, #31
 8015030:	4413      	add	r3, r2
 8015032:	105b      	asrs	r3, r3, #1
 8015034:	b29a      	uxth	r2, r3
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801503a:	bf00      	nop
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b084      	sub	sp, #16
 8015046:	af00      	add	r7, sp, #0
 8015048:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801504e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	795b      	ldrb	r3, [r3, #5]
 8015054:	2b01      	cmp	r3, #1
 8015056:	d00b      	beq.n	8015070 <dhcp_t2_timeout+0x2e>
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	795b      	ldrb	r3, [r3, #5]
 801505c:	2b0a      	cmp	r3, #10
 801505e:	d007      	beq.n	8015070 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015064:	2b05      	cmp	r3, #5
 8015066:	d003      	beq.n	8015070 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	795b      	ldrb	r3, [r3, #5]
 801506c:	2b04      	cmp	r3, #4
 801506e:	d116      	bne.n	801509e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 fbed 	bl	8015850 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	8a9b      	ldrh	r3, [r3, #20]
 801507a:	461a      	mov	r2, r3
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	8a5b      	ldrh	r3, [r3, #18]
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	2b01      	cmp	r3, #1
 8015084:	dd0b      	ble.n	801509e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	8a9b      	ldrh	r3, [r3, #20]
 801508a:	461a      	mov	r2, r3
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	8a5b      	ldrh	r3, [r3, #18]
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	0fda      	lsrs	r2, r3, #31
 8015094:	4413      	add	r3, r2
 8015096:	105b      	asrs	r3, r3, #1
 8015098:	b29a      	uxth	r2, r3
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801509e:	bf00      	nop
 80150a0:	3710      	adds	r7, #16
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
	...

080150a8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b084      	sub	sp, #16
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2200      	movs	r2, #0
 80150bc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	2200      	movs	r2, #0
 80150c2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80150c4:	4b26      	ldr	r3, [pc, #152]	; (8015160 <dhcp_handle_ack+0xb8>)
 80150c6:	78db      	ldrb	r3, [r3, #3]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d003      	beq.n	80150d4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80150cc:	4b25      	ldr	r3, [pc, #148]	; (8015164 <dhcp_handle_ack+0xbc>)
 80150ce:	68da      	ldr	r2, [r3, #12]
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80150d4:	4b22      	ldr	r3, [pc, #136]	; (8015160 <dhcp_handle_ack+0xb8>)
 80150d6:	791b      	ldrb	r3, [r3, #4]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d004      	beq.n	80150e6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80150dc:	4b21      	ldr	r3, [pc, #132]	; (8015164 <dhcp_handle_ack+0xbc>)
 80150de:	691a      	ldr	r2, [r3, #16]
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80150e4:	e004      	b.n	80150f0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80150ea:	085a      	lsrs	r2, r3, #1
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80150f0:	4b1b      	ldr	r3, [pc, #108]	; (8015160 <dhcp_handle_ack+0xb8>)
 80150f2:	795b      	ldrb	r3, [r3, #5]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d004      	beq.n	8015102 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80150f8:	4b1a      	ldr	r3, [pc, #104]	; (8015164 <dhcp_handle_ack+0xbc>)
 80150fa:	695a      	ldr	r2, [r3, #20]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	631a      	str	r2, [r3, #48]	; 0x30
 8015100:	e007      	b.n	8015112 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015106:	4613      	mov	r3, r2
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	1a9b      	subs	r3, r3, r2
 801510c:	08da      	lsrs	r2, r3, #3
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	691a      	ldr	r2, [r3, #16]
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801511a:	4b11      	ldr	r3, [pc, #68]	; (8015160 <dhcp_handle_ack+0xb8>)
 801511c:	799b      	ldrb	r3, [r3, #6]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d00b      	beq.n	801513a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015122:	4b10      	ldr	r3, [pc, #64]	; (8015164 <dhcp_handle_ack+0xbc>)
 8015124:	699b      	ldr	r3, [r3, #24]
 8015126:	4618      	mov	r0, r3
 8015128:	f7f7 fec7 	bl	800ceba <lwip_htonl>
 801512c:	4602      	mov	r2, r0
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	2201      	movs	r2, #1
 8015136:	71da      	strb	r2, [r3, #7]
 8015138:	e002      	b.n	8015140 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	2200      	movs	r2, #0
 801513e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015140:	4b07      	ldr	r3, [pc, #28]	; (8015160 <dhcp_handle_ack+0xb8>)
 8015142:	79db      	ldrb	r3, [r3, #7]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d007      	beq.n	8015158 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015148:	4b06      	ldr	r3, [pc, #24]	; (8015164 <dhcp_handle_ack+0xbc>)
 801514a:	69db      	ldr	r3, [r3, #28]
 801514c:	4618      	mov	r0, r3
 801514e:	f7f7 feb4 	bl	800ceba <lwip_htonl>
 8015152:	4602      	mov	r2, r0
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015158:	bf00      	nop
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	2000d098 	.word	0x2000d098
 8015164:	2000d0a0 	.word	0x2000d0a0

08015168 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b084      	sub	sp, #16
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d109      	bne.n	801518a <dhcp_start+0x22>
 8015176:	4b37      	ldr	r3, [pc, #220]	; (8015254 <dhcp_start+0xec>)
 8015178:	f240 22e7 	movw	r2, #743	; 0x2e7
 801517c:	4936      	ldr	r1, [pc, #216]	; (8015258 <dhcp_start+0xf0>)
 801517e:	4837      	ldr	r0, [pc, #220]	; (801525c <dhcp_start+0xf4>)
 8015180:	f004 f892 	bl	80192a8 <iprintf>
 8015184:	f06f 030f 	mvn.w	r3, #15
 8015188:	e060      	b.n	801524c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015190:	f003 0301 	and.w	r3, r3, #1
 8015194:	2b00      	cmp	r3, #0
 8015196:	d109      	bne.n	80151ac <dhcp_start+0x44>
 8015198:	4b2e      	ldr	r3, [pc, #184]	; (8015254 <dhcp_start+0xec>)
 801519a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801519e:	4930      	ldr	r1, [pc, #192]	; (8015260 <dhcp_start+0xf8>)
 80151a0:	482e      	ldr	r0, [pc, #184]	; (801525c <dhcp_start+0xf4>)
 80151a2:	f004 f881 	bl	80192a8 <iprintf>
 80151a6:	f06f 030f 	mvn.w	r3, #15
 80151aa:	e04f      	b.n	801524c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151b6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80151ba:	d202      	bcs.n	80151c2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80151bc:	f04f 33ff 	mov.w	r3, #4294967295
 80151c0:	e044      	b.n	801524c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d10d      	bne.n	80151e4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80151c8:	2034      	movs	r0, #52	; 0x34
 80151ca:	f7f8 f995 	bl	800d4f8 <mem_malloc>
 80151ce:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d102      	bne.n	80151dc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80151d6:	f04f 33ff 	mov.w	r3, #4294967295
 80151da:	e037      	b.n	801524c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	625a      	str	r2, [r3, #36]	; 0x24
 80151e2:	e005      	b.n	80151f0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	791b      	ldrb	r3, [r3, #4]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d001      	beq.n	80151f0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80151ec:	f7ff fc92 	bl	8014b14 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80151f0:	2234      	movs	r2, #52	; 0x34
 80151f2:	2100      	movs	r1, #0
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f003 fff4 	bl	80191e2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80151fa:	f7ff fc39 	bl	8014a70 <dhcp_inc_pcb_refcount>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <dhcp_start+0xa2>
    return ERR_MEM;
 8015204:	f04f 33ff 	mov.w	r3, #4294967295
 8015208:	e020      	b.n	801524c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2201      	movs	r2, #1
 801520e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015216:	f003 0304 	and.w	r3, r3, #4
 801521a:	2b00      	cmp	r3, #0
 801521c:	d105      	bne.n	801522a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801521e:	2102      	movs	r1, #2
 8015220:	68f8      	ldr	r0, [r7, #12]
 8015222:	f000 fd01 	bl	8015c28 <dhcp_set_state>
    return ERR_OK;
 8015226:	2300      	movs	r3, #0
 8015228:	e010      	b.n	801524c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801522a:	6878      	ldr	r0, [r7, #4]
 801522c:	f000 f8f8 	bl	8015420 <dhcp_discover>
 8015230:	4603      	mov	r3, r0
 8015232:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015234:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d005      	beq.n	8015248 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f000 fc59 	bl	8015af4 <dhcp_release_and_stop>
    return ERR_MEM;
 8015242:	f04f 33ff 	mov.w	r3, #4294967295
 8015246:	e001      	b.n	801524c <dhcp_start+0xe4>
  }
  return result;
 8015248:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801524c:	4618      	mov	r0, r3
 801524e:	3710      	adds	r7, #16
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	0801c9d8 	.word	0x0801c9d8
 8015258:	0801cabc 	.word	0x0801cabc
 801525c:	0801ca38 	.word	0x0801ca38
 8015260:	0801cb00 	.word	0x0801cb00

08015264 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b084      	sub	sp, #16
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d025      	beq.n	80152c4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	795b      	ldrb	r3, [r3, #5]
 801527c:	2b0a      	cmp	r3, #10
 801527e:	d008      	beq.n	8015292 <dhcp_network_changed+0x2e>
 8015280:	2b0a      	cmp	r3, #10
 8015282:	dc0d      	bgt.n	80152a0 <dhcp_network_changed+0x3c>
 8015284:	2b00      	cmp	r3, #0
 8015286:	d01f      	beq.n	80152c8 <dhcp_network_changed+0x64>
 8015288:	2b00      	cmp	r3, #0
 801528a:	db09      	blt.n	80152a0 <dhcp_network_changed+0x3c>
 801528c:	3b03      	subs	r3, #3
 801528e:	2b02      	cmp	r3, #2
 8015290:	d806      	bhi.n	80152a0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2200      	movs	r2, #0
 8015296:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f000 fb75 	bl	8015988 <dhcp_reboot>
      break;
 801529e:	e014      	b.n	80152ca <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	795b      	ldrb	r3, [r3, #5]
 80152a4:	2b0c      	cmp	r3, #12
 80152a6:	d906      	bls.n	80152b6 <dhcp_network_changed+0x52>
 80152a8:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <dhcp_network_changed+0x6c>)
 80152aa:	f240 326d 	movw	r2, #877	; 0x36d
 80152ae:	4909      	ldr	r1, [pc, #36]	; (80152d4 <dhcp_network_changed+0x70>)
 80152b0:	4809      	ldr	r0, [pc, #36]	; (80152d8 <dhcp_network_changed+0x74>)
 80152b2:	f003 fff9 	bl	80192a8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2200      	movs	r2, #0
 80152ba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f000 f8af 	bl	8015420 <dhcp_discover>
      break;
 80152c2:	e002      	b.n	80152ca <dhcp_network_changed+0x66>
    return;
 80152c4:	bf00      	nop
 80152c6:	e000      	b.n	80152ca <dhcp_network_changed+0x66>
      break;
 80152c8:	bf00      	nop
  }
}
 80152ca:	3710      	adds	r7, #16
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	0801c9d8 	.word	0x0801c9d8
 80152d4:	0801cb24 	.word	0x0801cb24
 80152d8:	0801ca38 	.word	0x0801ca38

080152dc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b084      	sub	sp, #16
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d107      	bne.n	80152fc <dhcp_arp_reply+0x20>
 80152ec:	4b0e      	ldr	r3, [pc, #56]	; (8015328 <dhcp_arp_reply+0x4c>)
 80152ee:	f240 328b 	movw	r2, #907	; 0x38b
 80152f2:	490e      	ldr	r1, [pc, #56]	; (801532c <dhcp_arp_reply+0x50>)
 80152f4:	480e      	ldr	r0, [pc, #56]	; (8015330 <dhcp_arp_reply+0x54>)
 80152f6:	f003 ffd7 	bl	80192a8 <iprintf>
 80152fa:	e012      	b.n	8015322 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015300:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d00c      	beq.n	8015322 <dhcp_arp_reply+0x46>
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	795b      	ldrb	r3, [r3, #5]
 801530c:	2b08      	cmp	r3, #8
 801530e:	d108      	bne.n	8015322 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	69db      	ldr	r3, [r3, #28]
 8015318:	429a      	cmp	r2, r3
 801531a:	d102      	bne.n	8015322 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f000 f809 	bl	8015334 <dhcp_decline>
    }
  }
}
 8015322:	3710      	adds	r7, #16
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	0801c9d8 	.word	0x0801c9d8
 801532c:	0801cabc 	.word	0x0801cabc
 8015330:	0801ca38 	.word	0x0801ca38

08015334 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015334:	b5b0      	push	{r4, r5, r7, lr}
 8015336:	b08a      	sub	sp, #40	; 0x28
 8015338:	af02      	add	r7, sp, #8
 801533a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015340:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015342:	210c      	movs	r1, #12
 8015344:	69b8      	ldr	r0, [r7, #24]
 8015346:	f000 fc6f 	bl	8015c28 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801534a:	f107 030c 	add.w	r3, r7, #12
 801534e:	2204      	movs	r2, #4
 8015350:	69b9      	ldr	r1, [r7, #24]
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f001 f8f4 	bl	8016540 <dhcp_create_msg>
 8015358:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d035      	beq.n	80153cc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015366:	89b8      	ldrh	r0, [r7, #12]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801536e:	2304      	movs	r3, #4
 8015370:	2232      	movs	r2, #50	; 0x32
 8015372:	f000 fc73 	bl	8015c5c <dhcp_option>
 8015376:	4603      	mov	r3, r0
 8015378:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801537a:	89bc      	ldrh	r4, [r7, #12]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	69db      	ldr	r3, [r3, #28]
 8015386:	4618      	mov	r0, r3
 8015388:	f7f7 fd97 	bl	800ceba <lwip_htonl>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	4629      	mov	r1, r5
 8015392:	4620      	mov	r0, r4
 8015394:	f000 fcee 	bl	8015d74 <dhcp_option_long>
 8015398:	4603      	mov	r3, r0
 801539a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801539c:	89b8      	ldrh	r0, [r7, #12]
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	33f0      	adds	r3, #240	; 0xf0
 80153a2:	697a      	ldr	r2, [r7, #20]
 80153a4:	4619      	mov	r1, r3
 80153a6:	f001 f9a1 	bl	80166ec <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80153aa:	4b19      	ldr	r3, [pc, #100]	; (8015410 <dhcp_decline+0xdc>)
 80153ac:	6818      	ldr	r0, [r3, #0]
 80153ae:	4b19      	ldr	r3, [pc, #100]	; (8015414 <dhcp_decline+0xe0>)
 80153b0:	9301      	str	r3, [sp, #4]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	2343      	movs	r3, #67	; 0x43
 80153b8:	4a17      	ldr	r2, [pc, #92]	; (8015418 <dhcp_decline+0xe4>)
 80153ba:	6979      	ldr	r1, [r7, #20]
 80153bc:	f7ff f8d2 	bl	8014564 <udp_sendto_if_src>
 80153c0:	4603      	mov	r3, r0
 80153c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80153c4:	6978      	ldr	r0, [r7, #20]
 80153c6:	f7f9 f91b 	bl	800e600 <pbuf_free>
 80153ca:	e001      	b.n	80153d0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80153cc:	23ff      	movs	r3, #255	; 0xff
 80153ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80153d0:	69bb      	ldr	r3, [r7, #24]
 80153d2:	799b      	ldrb	r3, [r3, #6]
 80153d4:	2bff      	cmp	r3, #255	; 0xff
 80153d6:	d005      	beq.n	80153e4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	799b      	ldrb	r3, [r3, #6]
 80153dc:	3301      	adds	r3, #1
 80153de:	b2da      	uxtb	r2, r3
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80153e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80153e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153ea:	89fb      	ldrh	r3, [r7, #14]
 80153ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80153f0:	4a0a      	ldr	r2, [pc, #40]	; (801541c <dhcp_decline+0xe8>)
 80153f2:	fb82 1203 	smull	r1, r2, r2, r3
 80153f6:	1152      	asrs	r2, r2, #5
 80153f8:	17db      	asrs	r3, r3, #31
 80153fa:	1ad3      	subs	r3, r2, r3
 80153fc:	b29a      	uxth	r2, r3
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015402:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015406:	4618      	mov	r0, r3
 8015408:	3720      	adds	r7, #32
 801540a:	46bd      	mov	sp, r7
 801540c:	bdb0      	pop	{r4, r5, r7, pc}
 801540e:	bf00      	nop
 8015410:	20004b5c 	.word	0x20004b5c
 8015414:	0801d6cc 	.word	0x0801d6cc
 8015418:	0801d6d0 	.word	0x0801d6d0
 801541c:	10624dd3 	.word	0x10624dd3

08015420 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b08a      	sub	sp, #40	; 0x28
 8015424:	af02      	add	r7, sp, #8
 8015426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801542e:	2300      	movs	r3, #0
 8015430:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015432:	69bb      	ldr	r3, [r7, #24]
 8015434:	2200      	movs	r2, #0
 8015436:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015438:	2106      	movs	r1, #6
 801543a:	69b8      	ldr	r0, [r7, #24]
 801543c:	f000 fbf4 	bl	8015c28 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015440:	f107 0308 	add.w	r3, r7, #8
 8015444:	2201      	movs	r2, #1
 8015446:	69b9      	ldr	r1, [r7, #24]
 8015448:	6878      	ldr	r0, [r7, #4]
 801544a:	f001 f879 	bl	8016540 <dhcp_create_msg>
 801544e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d04b      	beq.n	80154ee <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801545c:	8938      	ldrh	r0, [r7, #8]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015464:	2302      	movs	r3, #2
 8015466:	2239      	movs	r2, #57	; 0x39
 8015468:	f000 fbf8 	bl	8015c5c <dhcp_option>
 801546c:	4603      	mov	r3, r0
 801546e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015470:	8938      	ldrh	r0, [r7, #8]
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801547c:	461a      	mov	r2, r3
 801547e:	f000 fc47 	bl	8015d10 <dhcp_option_short>
 8015482:	4603      	mov	r3, r0
 8015484:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015486:	8938      	ldrh	r0, [r7, #8]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801548e:	2303      	movs	r3, #3
 8015490:	2237      	movs	r2, #55	; 0x37
 8015492:	f000 fbe3 	bl	8015c5c <dhcp_option>
 8015496:	4603      	mov	r3, r0
 8015498:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801549a:	2300      	movs	r3, #0
 801549c:	77fb      	strb	r3, [r7, #31]
 801549e:	e00e      	b.n	80154be <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80154a0:	8938      	ldrh	r0, [r7, #8]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154a8:	7ffb      	ldrb	r3, [r7, #31]
 80154aa:	4a29      	ldr	r2, [pc, #164]	; (8015550 <dhcp_discover+0x130>)
 80154ac:	5cd3      	ldrb	r3, [r2, r3]
 80154ae:	461a      	mov	r2, r3
 80154b0:	f000 fc08 	bl	8015cc4 <dhcp_option_byte>
 80154b4:	4603      	mov	r3, r0
 80154b6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154b8:	7ffb      	ldrb	r3, [r7, #31]
 80154ba:	3301      	adds	r3, #1
 80154bc:	77fb      	strb	r3, [r7, #31]
 80154be:	7ffb      	ldrb	r3, [r7, #31]
 80154c0:	2b02      	cmp	r3, #2
 80154c2:	d9ed      	bls.n	80154a0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154c4:	8938      	ldrh	r0, [r7, #8]
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	33f0      	adds	r3, #240	; 0xf0
 80154ca:	693a      	ldr	r2, [r7, #16]
 80154cc:	4619      	mov	r1, r3
 80154ce:	f001 f90d 	bl	80166ec <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80154d2:	4b20      	ldr	r3, [pc, #128]	; (8015554 <dhcp_discover+0x134>)
 80154d4:	6818      	ldr	r0, [r3, #0]
 80154d6:	4b20      	ldr	r3, [pc, #128]	; (8015558 <dhcp_discover+0x138>)
 80154d8:	9301      	str	r3, [sp, #4]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	9300      	str	r3, [sp, #0]
 80154de:	2343      	movs	r3, #67	; 0x43
 80154e0:	4a1e      	ldr	r2, [pc, #120]	; (801555c <dhcp_discover+0x13c>)
 80154e2:	6939      	ldr	r1, [r7, #16]
 80154e4:	f7ff f83e 	bl	8014564 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80154e8:	6938      	ldr	r0, [r7, #16]
 80154ea:	f7f9 f889 	bl	800e600 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80154ee:	69bb      	ldr	r3, [r7, #24]
 80154f0:	799b      	ldrb	r3, [r3, #6]
 80154f2:	2bff      	cmp	r3, #255	; 0xff
 80154f4:	d005      	beq.n	8015502 <dhcp_discover+0xe2>
    dhcp->tries++;
 80154f6:	69bb      	ldr	r3, [r7, #24]
 80154f8:	799b      	ldrb	r3, [r3, #6]
 80154fa:	3301      	adds	r3, #1
 80154fc:	b2da      	uxtb	r2, r3
 80154fe:	69bb      	ldr	r3, [r7, #24]
 8015500:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015502:	69bb      	ldr	r3, [r7, #24]
 8015504:	799b      	ldrb	r3, [r3, #6]
 8015506:	2b05      	cmp	r3, #5
 8015508:	d80d      	bhi.n	8015526 <dhcp_discover+0x106>
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	799b      	ldrb	r3, [r3, #6]
 801550e:	461a      	mov	r2, r3
 8015510:	2301      	movs	r3, #1
 8015512:	4093      	lsls	r3, r2
 8015514:	b29b      	uxth	r3, r3
 8015516:	461a      	mov	r2, r3
 8015518:	0152      	lsls	r2, r2, #5
 801551a:	1ad2      	subs	r2, r2, r3
 801551c:	0092      	lsls	r2, r2, #2
 801551e:	4413      	add	r3, r2
 8015520:	00db      	lsls	r3, r3, #3
 8015522:	b29b      	uxth	r3, r3
 8015524:	e001      	b.n	801552a <dhcp_discover+0x10a>
 8015526:	f64e 2360 	movw	r3, #60000	; 0xea60
 801552a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801552c:	897b      	ldrh	r3, [r7, #10]
 801552e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015532:	4a0b      	ldr	r2, [pc, #44]	; (8015560 <dhcp_discover+0x140>)
 8015534:	fb82 1203 	smull	r1, r2, r2, r3
 8015538:	1152      	asrs	r2, r2, #5
 801553a:	17db      	asrs	r3, r3, #31
 801553c:	1ad3      	subs	r3, r2, r3
 801553e:	b29a      	uxth	r2, r3
 8015540:	69bb      	ldr	r3, [r7, #24]
 8015542:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015548:	4618      	mov	r0, r3
 801554a:	3720      	adds	r7, #32
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	20000064 	.word	0x20000064
 8015554:	20004b5c 	.word	0x20004b5c
 8015558:	0801d6cc 	.word	0x0801d6cc
 801555c:	0801d6d0 	.word	0x0801d6d0
 8015560:	10624dd3 	.word	0x10624dd3

08015564 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b088      	sub	sp, #32
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d107      	bne.n	8015582 <dhcp_bind+0x1e>
 8015572:	4b64      	ldr	r3, [pc, #400]	; (8015704 <dhcp_bind+0x1a0>)
 8015574:	f240 4215 	movw	r2, #1045	; 0x415
 8015578:	4963      	ldr	r1, [pc, #396]	; (8015708 <dhcp_bind+0x1a4>)
 801557a:	4864      	ldr	r0, [pc, #400]	; (801570c <dhcp_bind+0x1a8>)
 801557c:	f003 fe94 	bl	80192a8 <iprintf>
 8015580:	e0bc      	b.n	80156fc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015586:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015588:	69bb      	ldr	r3, [r7, #24]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d107      	bne.n	801559e <dhcp_bind+0x3a>
 801558e:	4b5d      	ldr	r3, [pc, #372]	; (8015704 <dhcp_bind+0x1a0>)
 8015590:	f240 4217 	movw	r2, #1047	; 0x417
 8015594:	495e      	ldr	r1, [pc, #376]	; (8015710 <dhcp_bind+0x1ac>)
 8015596:	485d      	ldr	r0, [pc, #372]	; (801570c <dhcp_bind+0x1a8>)
 8015598:	f003 fe86 	bl	80192a8 <iprintf>
 801559c:	e0ae      	b.n	80156fc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	2200      	movs	r2, #0
 80155a2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80155a4:	69bb      	ldr	r3, [r7, #24]
 80155a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ac:	d019      	beq.n	80155e2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155ae:	69bb      	ldr	r3, [r7, #24]
 80155b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155b2:	331e      	adds	r3, #30
 80155b4:	4a57      	ldr	r2, [pc, #348]	; (8015714 <dhcp_bind+0x1b0>)
 80155b6:	fba2 2303 	umull	r2, r3, r2, r3
 80155ba:	095b      	lsrs	r3, r3, #5
 80155bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155be:	69fb      	ldr	r3, [r7, #28]
 80155c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155c4:	d302      	bcc.n	80155cc <dhcp_bind+0x68>
      timeout = 0xffff;
 80155c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	b29a      	uxth	r2, r3
 80155d0:	69bb      	ldr	r3, [r7, #24]
 80155d2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80155d4:	69bb      	ldr	r3, [r7, #24]
 80155d6:	8a9b      	ldrh	r3, [r3, #20]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d102      	bne.n	80155e2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80155dc:	69bb      	ldr	r3, [r7, #24]
 80155de:	2201      	movs	r2, #1
 80155e0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80155e2:	69bb      	ldr	r3, [r7, #24]
 80155e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ea:	d01d      	beq.n	8015628 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f0:	331e      	adds	r3, #30
 80155f2:	4a48      	ldr	r2, [pc, #288]	; (8015714 <dhcp_bind+0x1b0>)
 80155f4:	fba2 2303 	umull	r2, r3, r2, r3
 80155f8:	095b      	lsrs	r3, r3, #5
 80155fa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015602:	d302      	bcc.n	801560a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015608:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801560a:	69fb      	ldr	r3, [r7, #28]
 801560c:	b29a      	uxth	r2, r3
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	895b      	ldrh	r3, [r3, #10]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d102      	bne.n	8015620 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	2201      	movs	r2, #1
 801561e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015620:	69bb      	ldr	r3, [r7, #24]
 8015622:	895a      	ldrh	r2, [r3, #10]
 8015624:	69bb      	ldr	r3, [r7, #24]
 8015626:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015630:	d01d      	beq.n	801566e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015636:	331e      	adds	r3, #30
 8015638:	4a36      	ldr	r2, [pc, #216]	; (8015714 <dhcp_bind+0x1b0>)
 801563a:	fba2 2303 	umull	r2, r3, r2, r3
 801563e:	095b      	lsrs	r3, r3, #5
 8015640:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015648:	d302      	bcc.n	8015650 <dhcp_bind+0xec>
      timeout = 0xffff;
 801564a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	b29a      	uxth	r2, r3
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	899b      	ldrh	r3, [r3, #12]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d102      	bne.n	8015666 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	2201      	movs	r2, #1
 8015664:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	899a      	ldrh	r2, [r3, #12]
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801566e:	69bb      	ldr	r3, [r7, #24]
 8015670:	895a      	ldrh	r2, [r3, #10]
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	899b      	ldrh	r3, [r3, #12]
 8015676:	429a      	cmp	r2, r3
 8015678:	d306      	bcc.n	8015688 <dhcp_bind+0x124>
 801567a:	69bb      	ldr	r3, [r7, #24]
 801567c:	899b      	ldrh	r3, [r3, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d002      	beq.n	8015688 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015682:	69bb      	ldr	r3, [r7, #24]
 8015684:	2200      	movs	r2, #0
 8015686:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015688:	69bb      	ldr	r3, [r7, #24]
 801568a:	79db      	ldrb	r3, [r3, #7]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d003      	beq.n	8015698 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015690:	69bb      	ldr	r3, [r7, #24]
 8015692:	6a1b      	ldr	r3, [r3, #32]
 8015694:	613b      	str	r3, [r7, #16]
 8015696:	e014      	b.n	80156c2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015698:	69bb      	ldr	r3, [r7, #24]
 801569a:	331c      	adds	r3, #28
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80156a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	db02      	blt.n	80156ae <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80156a8:	23ff      	movs	r3, #255	; 0xff
 80156aa:	613b      	str	r3, [r7, #16]
 80156ac:	e009      	b.n	80156c2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80156ae:	7dfb      	ldrb	r3, [r7, #23]
 80156b0:	2bbf      	cmp	r3, #191	; 0xbf
 80156b2:	d903      	bls.n	80156bc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80156b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80156b8:	613b      	str	r3, [r7, #16]
 80156ba:	e002      	b.n	80156c2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80156bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156c0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d108      	bne.n	80156e0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80156ce:	69bb      	ldr	r3, [r7, #24]
 80156d0:	69da      	ldr	r2, [r3, #28]
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	4013      	ands	r3, r2
 80156d6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80156de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80156e0:	210a      	movs	r1, #10
 80156e2:	69b8      	ldr	r0, [r7, #24]
 80156e4:	f000 faa0 	bl	8015c28 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	f103 011c 	add.w	r1, r3, #28
 80156ee:	f107 030c 	add.w	r3, r7, #12
 80156f2:	f107 0210 	add.w	r2, r7, #16
 80156f6:	6878      	ldr	r0, [r7, #4]
 80156f8:	f7f8 fa74 	bl	800dbe4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80156fc:	3720      	adds	r7, #32
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	0801c9d8 	.word	0x0801c9d8
 8015708:	0801cb38 	.word	0x0801cb38
 801570c:	0801ca38 	.word	0x0801ca38
 8015710:	0801cb54 	.word	0x0801cb54
 8015714:	88888889 	.word	0x88888889

08015718 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b08a      	sub	sp, #40	; 0x28
 801571c:	af02      	add	r7, sp, #8
 801571e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015724:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015726:	2105      	movs	r1, #5
 8015728:	69b8      	ldr	r0, [r7, #24]
 801572a:	f000 fa7d 	bl	8015c28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801572e:	f107 030c 	add.w	r3, r7, #12
 8015732:	2203      	movs	r2, #3
 8015734:	69b9      	ldr	r1, [r7, #24]
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f000 ff02 	bl	8016540 <dhcp_create_msg>
 801573c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d04e      	beq.n	80157e2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801574a:	89b8      	ldrh	r0, [r7, #12]
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015752:	2302      	movs	r3, #2
 8015754:	2239      	movs	r2, #57	; 0x39
 8015756:	f000 fa81 	bl	8015c5c <dhcp_option>
 801575a:	4603      	mov	r3, r0
 801575c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801575e:	89b8      	ldrh	r0, [r7, #12]
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801576a:	461a      	mov	r2, r3
 801576c:	f000 fad0 	bl	8015d10 <dhcp_option_short>
 8015770:	4603      	mov	r3, r0
 8015772:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015774:	89b8      	ldrh	r0, [r7, #12]
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801577c:	2303      	movs	r3, #3
 801577e:	2237      	movs	r2, #55	; 0x37
 8015780:	f000 fa6c 	bl	8015c5c <dhcp_option>
 8015784:	4603      	mov	r3, r0
 8015786:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015788:	2300      	movs	r3, #0
 801578a:	77bb      	strb	r3, [r7, #30]
 801578c:	e00e      	b.n	80157ac <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801578e:	89b8      	ldrh	r0, [r7, #12]
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015796:	7fbb      	ldrb	r3, [r7, #30]
 8015798:	4a2a      	ldr	r2, [pc, #168]	; (8015844 <dhcp_renew+0x12c>)
 801579a:	5cd3      	ldrb	r3, [r2, r3]
 801579c:	461a      	mov	r2, r3
 801579e:	f000 fa91 	bl	8015cc4 <dhcp_option_byte>
 80157a2:	4603      	mov	r3, r0
 80157a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157a6:	7fbb      	ldrb	r3, [r7, #30]
 80157a8:	3301      	adds	r3, #1
 80157aa:	77bb      	strb	r3, [r7, #30]
 80157ac:	7fbb      	ldrb	r3, [r7, #30]
 80157ae:	2b02      	cmp	r3, #2
 80157b0:	d9ed      	bls.n	801578e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80157b2:	89b8      	ldrh	r0, [r7, #12]
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	33f0      	adds	r3, #240	; 0xf0
 80157b8:	697a      	ldr	r2, [r7, #20]
 80157ba:	4619      	mov	r1, r3
 80157bc:	f000 ff96 	bl	80166ec <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80157c0:	4b21      	ldr	r3, [pc, #132]	; (8015848 <dhcp_renew+0x130>)
 80157c2:	6818      	ldr	r0, [r3, #0]
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	f103 0218 	add.w	r2, r3, #24
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	2343      	movs	r3, #67	; 0x43
 80157d0:	6979      	ldr	r1, [r7, #20]
 80157d2:	f7fe fe53 	bl	801447c <udp_sendto_if>
 80157d6:	4603      	mov	r3, r0
 80157d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80157da:	6978      	ldr	r0, [r7, #20]
 80157dc:	f7f8 ff10 	bl	800e600 <pbuf_free>
 80157e0:	e001      	b.n	80157e6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80157e2:	23ff      	movs	r3, #255	; 0xff
 80157e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80157e6:	69bb      	ldr	r3, [r7, #24]
 80157e8:	799b      	ldrb	r3, [r3, #6]
 80157ea:	2bff      	cmp	r3, #255	; 0xff
 80157ec:	d005      	beq.n	80157fa <dhcp_renew+0xe2>
    dhcp->tries++;
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	799b      	ldrb	r3, [r3, #6]
 80157f2:	3301      	adds	r3, #1
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	799b      	ldrb	r3, [r3, #6]
 80157fe:	2b09      	cmp	r3, #9
 8015800:	d80a      	bhi.n	8015818 <dhcp_renew+0x100>
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	799b      	ldrb	r3, [r3, #6]
 8015806:	b29b      	uxth	r3, r3
 8015808:	461a      	mov	r2, r3
 801580a:	0152      	lsls	r2, r2, #5
 801580c:	1ad2      	subs	r2, r2, r3
 801580e:	0092      	lsls	r2, r2, #2
 8015810:	4413      	add	r3, r2
 8015812:	011b      	lsls	r3, r3, #4
 8015814:	b29b      	uxth	r3, r3
 8015816:	e001      	b.n	801581c <dhcp_renew+0x104>
 8015818:	f644 6320 	movw	r3, #20000	; 0x4e20
 801581c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801581e:	89fb      	ldrh	r3, [r7, #14]
 8015820:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015824:	4a09      	ldr	r2, [pc, #36]	; (801584c <dhcp_renew+0x134>)
 8015826:	fb82 1203 	smull	r1, r2, r2, r3
 801582a:	1152      	asrs	r2, r2, #5
 801582c:	17db      	asrs	r3, r3, #31
 801582e:	1ad3      	subs	r3, r2, r3
 8015830:	b29a      	uxth	r2, r3
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801583a:	4618      	mov	r0, r3
 801583c:	3720      	adds	r7, #32
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	20000064 	.word	0x20000064
 8015848:	20004b5c 	.word	0x20004b5c
 801584c:	10624dd3 	.word	0x10624dd3

08015850 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b08a      	sub	sp, #40	; 0x28
 8015854:	af02      	add	r7, sp, #8
 8015856:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801585c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801585e:	2104      	movs	r1, #4
 8015860:	69b8      	ldr	r0, [r7, #24]
 8015862:	f000 f9e1 	bl	8015c28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015866:	f107 030c 	add.w	r3, r7, #12
 801586a:	2203      	movs	r2, #3
 801586c:	69b9      	ldr	r1, [r7, #24]
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f000 fe66 	bl	8016540 <dhcp_create_msg>
 8015874:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d04c      	beq.n	8015916 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015882:	89b8      	ldrh	r0, [r7, #12]
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801588a:	2302      	movs	r3, #2
 801588c:	2239      	movs	r2, #57	; 0x39
 801588e:	f000 f9e5 	bl	8015c5c <dhcp_option>
 8015892:	4603      	mov	r3, r0
 8015894:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015896:	89b8      	ldrh	r0, [r7, #12]
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80158a2:	461a      	mov	r2, r3
 80158a4:	f000 fa34 	bl	8015d10 <dhcp_option_short>
 80158a8:	4603      	mov	r3, r0
 80158aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80158ac:	89b8      	ldrh	r0, [r7, #12]
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158b4:	2303      	movs	r3, #3
 80158b6:	2237      	movs	r2, #55	; 0x37
 80158b8:	f000 f9d0 	bl	8015c5c <dhcp_option>
 80158bc:	4603      	mov	r3, r0
 80158be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158c0:	2300      	movs	r3, #0
 80158c2:	77bb      	strb	r3, [r7, #30]
 80158c4:	e00e      	b.n	80158e4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80158c6:	89b8      	ldrh	r0, [r7, #12]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158ce:	7fbb      	ldrb	r3, [r7, #30]
 80158d0:	4a29      	ldr	r2, [pc, #164]	; (8015978 <dhcp_rebind+0x128>)
 80158d2:	5cd3      	ldrb	r3, [r2, r3]
 80158d4:	461a      	mov	r2, r3
 80158d6:	f000 f9f5 	bl	8015cc4 <dhcp_option_byte>
 80158da:	4603      	mov	r3, r0
 80158dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80158de:	7fbb      	ldrb	r3, [r7, #30]
 80158e0:	3301      	adds	r3, #1
 80158e2:	77bb      	strb	r3, [r7, #30]
 80158e4:	7fbb      	ldrb	r3, [r7, #30]
 80158e6:	2b02      	cmp	r3, #2
 80158e8:	d9ed      	bls.n	80158c6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80158ea:	89b8      	ldrh	r0, [r7, #12]
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	33f0      	adds	r3, #240	; 0xf0
 80158f0:	697a      	ldr	r2, [r7, #20]
 80158f2:	4619      	mov	r1, r3
 80158f4:	f000 fefa 	bl	80166ec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80158f8:	4b20      	ldr	r3, [pc, #128]	; (801597c <dhcp_rebind+0x12c>)
 80158fa:	6818      	ldr	r0, [r3, #0]
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	9300      	str	r3, [sp, #0]
 8015900:	2343      	movs	r3, #67	; 0x43
 8015902:	4a1f      	ldr	r2, [pc, #124]	; (8015980 <dhcp_rebind+0x130>)
 8015904:	6979      	ldr	r1, [r7, #20]
 8015906:	f7fe fdb9 	bl	801447c <udp_sendto_if>
 801590a:	4603      	mov	r3, r0
 801590c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801590e:	6978      	ldr	r0, [r7, #20]
 8015910:	f7f8 fe76 	bl	800e600 <pbuf_free>
 8015914:	e001      	b.n	801591a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015916:	23ff      	movs	r3, #255	; 0xff
 8015918:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801591a:	69bb      	ldr	r3, [r7, #24]
 801591c:	799b      	ldrb	r3, [r3, #6]
 801591e:	2bff      	cmp	r3, #255	; 0xff
 8015920:	d005      	beq.n	801592e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	799b      	ldrb	r3, [r3, #6]
 8015926:	3301      	adds	r3, #1
 8015928:	b2da      	uxtb	r2, r3
 801592a:	69bb      	ldr	r3, [r7, #24]
 801592c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	799b      	ldrb	r3, [r3, #6]
 8015932:	2b09      	cmp	r3, #9
 8015934:	d80a      	bhi.n	801594c <dhcp_rebind+0xfc>
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	799b      	ldrb	r3, [r3, #6]
 801593a:	b29b      	uxth	r3, r3
 801593c:	461a      	mov	r2, r3
 801593e:	0152      	lsls	r2, r2, #5
 8015940:	1ad2      	subs	r2, r2, r3
 8015942:	0092      	lsls	r2, r2, #2
 8015944:	4413      	add	r3, r2
 8015946:	00db      	lsls	r3, r3, #3
 8015948:	b29b      	uxth	r3, r3
 801594a:	e001      	b.n	8015950 <dhcp_rebind+0x100>
 801594c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015950:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015952:	89fb      	ldrh	r3, [r7, #14]
 8015954:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015958:	4a0a      	ldr	r2, [pc, #40]	; (8015984 <dhcp_rebind+0x134>)
 801595a:	fb82 1203 	smull	r1, r2, r2, r3
 801595e:	1152      	asrs	r2, r2, #5
 8015960:	17db      	asrs	r3, r3, #31
 8015962:	1ad3      	subs	r3, r2, r3
 8015964:	b29a      	uxth	r2, r3
 8015966:	69bb      	ldr	r3, [r7, #24]
 8015968:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801596a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801596e:	4618      	mov	r0, r3
 8015970:	3720      	adds	r7, #32
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	20000064 	.word	0x20000064
 801597c:	20004b5c 	.word	0x20004b5c
 8015980:	0801d6d0 	.word	0x0801d6d0
 8015984:	10624dd3 	.word	0x10624dd3

08015988 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015988:	b5b0      	push	{r4, r5, r7, lr}
 801598a:	b08a      	sub	sp, #40	; 0x28
 801598c:	af02      	add	r7, sp, #8
 801598e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015994:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015996:	2103      	movs	r1, #3
 8015998:	69b8      	ldr	r0, [r7, #24]
 801599a:	f000 f945 	bl	8015c28 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801599e:	f107 030c 	add.w	r3, r7, #12
 80159a2:	2203      	movs	r2, #3
 80159a4:	69b9      	ldr	r1, [r7, #24]
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f000 fdca 	bl	8016540 <dhcp_create_msg>
 80159ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80159ae:	697b      	ldr	r3, [r7, #20]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d066      	beq.n	8015a82 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80159ba:	89b8      	ldrh	r0, [r7, #12]
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159c2:	2302      	movs	r3, #2
 80159c4:	2239      	movs	r2, #57	; 0x39
 80159c6:	f000 f949 	bl	8015c5c <dhcp_option>
 80159ca:	4603      	mov	r3, r0
 80159cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80159ce:	89b8      	ldrh	r0, [r7, #12]
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	33f0      	adds	r3, #240	; 0xf0
 80159d4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80159d8:	4619      	mov	r1, r3
 80159da:	f000 f999 	bl	8015d10 <dhcp_option_short>
 80159de:	4603      	mov	r3, r0
 80159e0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80159e2:	89b8      	ldrh	r0, [r7, #12]
 80159e4:	693b      	ldr	r3, [r7, #16]
 80159e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159ea:	2304      	movs	r3, #4
 80159ec:	2232      	movs	r2, #50	; 0x32
 80159ee:	f000 f935 	bl	8015c5c <dhcp_option>
 80159f2:	4603      	mov	r3, r0
 80159f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80159f6:	89bc      	ldrh	r4, [r7, #12]
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80159fe:	69bb      	ldr	r3, [r7, #24]
 8015a00:	69db      	ldr	r3, [r3, #28]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7f7 fa59 	bl	800ceba <lwip_htonl>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	4629      	mov	r1, r5
 8015a0e:	4620      	mov	r0, r4
 8015a10:	f000 f9b0 	bl	8015d74 <dhcp_option_long>
 8015a14:	4603      	mov	r3, r0
 8015a16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015a18:	89b8      	ldrh	r0, [r7, #12]
 8015a1a:	693b      	ldr	r3, [r7, #16]
 8015a1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a20:	2303      	movs	r3, #3
 8015a22:	2237      	movs	r2, #55	; 0x37
 8015a24:	f000 f91a 	bl	8015c5c <dhcp_option>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	77bb      	strb	r3, [r7, #30]
 8015a30:	e00e      	b.n	8015a50 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015a32:	89b8      	ldrh	r0, [r7, #12]
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a3a:	7fbb      	ldrb	r3, [r7, #30]
 8015a3c:	4a29      	ldr	r2, [pc, #164]	; (8015ae4 <dhcp_reboot+0x15c>)
 8015a3e:	5cd3      	ldrb	r3, [r2, r3]
 8015a40:	461a      	mov	r2, r3
 8015a42:	f000 f93f 	bl	8015cc4 <dhcp_option_byte>
 8015a46:	4603      	mov	r3, r0
 8015a48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015a4a:	7fbb      	ldrb	r3, [r7, #30]
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	77bb      	strb	r3, [r7, #30]
 8015a50:	7fbb      	ldrb	r3, [r7, #30]
 8015a52:	2b02      	cmp	r3, #2
 8015a54:	d9ed      	bls.n	8015a32 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015a56:	89b8      	ldrh	r0, [r7, #12]
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	33f0      	adds	r3, #240	; 0xf0
 8015a5c:	697a      	ldr	r2, [r7, #20]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	f000 fe44 	bl	80166ec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015a64:	4b20      	ldr	r3, [pc, #128]	; (8015ae8 <dhcp_reboot+0x160>)
 8015a66:	6818      	ldr	r0, [r3, #0]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	9300      	str	r3, [sp, #0]
 8015a6c:	2343      	movs	r3, #67	; 0x43
 8015a6e:	4a1f      	ldr	r2, [pc, #124]	; (8015aec <dhcp_reboot+0x164>)
 8015a70:	6979      	ldr	r1, [r7, #20]
 8015a72:	f7fe fd03 	bl	801447c <udp_sendto_if>
 8015a76:	4603      	mov	r3, r0
 8015a78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a7a:	6978      	ldr	r0, [r7, #20]
 8015a7c:	f7f8 fdc0 	bl	800e600 <pbuf_free>
 8015a80:	e001      	b.n	8015a86 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a82:	23ff      	movs	r3, #255	; 0xff
 8015a84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a86:	69bb      	ldr	r3, [r7, #24]
 8015a88:	799b      	ldrb	r3, [r3, #6]
 8015a8a:	2bff      	cmp	r3, #255	; 0xff
 8015a8c:	d005      	beq.n	8015a9a <dhcp_reboot+0x112>
    dhcp->tries++;
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	799b      	ldrb	r3, [r3, #6]
 8015a92:	3301      	adds	r3, #1
 8015a94:	b2da      	uxtb	r2, r3
 8015a96:	69bb      	ldr	r3, [r7, #24]
 8015a98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015a9a:	69bb      	ldr	r3, [r7, #24]
 8015a9c:	799b      	ldrb	r3, [r3, #6]
 8015a9e:	2b09      	cmp	r3, #9
 8015aa0:	d80a      	bhi.n	8015ab8 <dhcp_reboot+0x130>
 8015aa2:	69bb      	ldr	r3, [r7, #24]
 8015aa4:	799b      	ldrb	r3, [r3, #6]
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	0152      	lsls	r2, r2, #5
 8015aac:	1ad2      	subs	r2, r2, r3
 8015aae:	0092      	lsls	r2, r2, #2
 8015ab0:	4413      	add	r3, r2
 8015ab2:	00db      	lsls	r3, r3, #3
 8015ab4:	b29b      	uxth	r3, r3
 8015ab6:	e001      	b.n	8015abc <dhcp_reboot+0x134>
 8015ab8:	f242 7310 	movw	r3, #10000	; 0x2710
 8015abc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015abe:	89fb      	ldrh	r3, [r7, #14]
 8015ac0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ac4:	4a0a      	ldr	r2, [pc, #40]	; (8015af0 <dhcp_reboot+0x168>)
 8015ac6:	fb82 1203 	smull	r1, r2, r2, r3
 8015aca:	1152      	asrs	r2, r2, #5
 8015acc:	17db      	asrs	r3, r3, #31
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	b29a      	uxth	r2, r3
 8015ad2:	69bb      	ldr	r3, [r7, #24]
 8015ad4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015ad6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3720      	adds	r7, #32
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	20000064 	.word	0x20000064
 8015ae8:	20004b5c 	.word	0x20004b5c
 8015aec:	0801d6d0 	.word	0x0801d6d0
 8015af0:	10624dd3 	.word	0x10624dd3

08015af4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015af4:	b5b0      	push	{r4, r5, r7, lr}
 8015af6:	b08a      	sub	sp, #40	; 0x28
 8015af8:	af02      	add	r7, sp, #8
 8015afa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b00:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	f000 8084 	beq.w	8015c12 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	795b      	ldrb	r3, [r3, #5]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	f000 8081 	beq.w	8015c16 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015b14:	69fb      	ldr	r3, [r7, #28]
 8015b16:	699b      	ldr	r3, [r3, #24]
 8015b18:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015b20:	69fb      	ldr	r3, [r7, #28]
 8015b22:	2200      	movs	r2, #0
 8015b24:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015b26:	69fb      	ldr	r3, [r7, #28]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015b2c:	69fb      	ldr	r3, [r7, #28]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	2200      	movs	r2, #0
 8015b36:	631a      	str	r2, [r3, #48]	; 0x30
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015b40:	69fb      	ldr	r3, [r7, #28]
 8015b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b44:	69fb      	ldr	r3, [r7, #28]
 8015b46:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	829a      	strh	r2, [r3, #20]
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	8a9a      	ldrh	r2, [r3, #20]
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	825a      	strh	r2, [r3, #18]
 8015b56:	69fb      	ldr	r3, [r7, #28]
 8015b58:	8a5a      	ldrh	r2, [r3, #18]
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	821a      	strh	r2, [r3, #16]
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	8a1a      	ldrh	r2, [r3, #16]
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f000 fdee 	bl	8016748 <dhcp_supplied_address>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d03b      	beq.n	8015bea <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015b72:	f107 030e 	add.w	r3, r7, #14
 8015b76:	2207      	movs	r2, #7
 8015b78:	69f9      	ldr	r1, [r7, #28]
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f000 fce0 	bl	8016540 <dhcp_create_msg>
 8015b80:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015b82:	69bb      	ldr	r3, [r7, #24]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d030      	beq.n	8015bea <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b88:	69bb      	ldr	r3, [r7, #24]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015b8e:	89f8      	ldrh	r0, [r7, #14]
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b96:	2304      	movs	r3, #4
 8015b98:	2236      	movs	r2, #54	; 0x36
 8015b9a:	f000 f85f 	bl	8015c5c <dhcp_option>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015ba2:	89fc      	ldrh	r4, [r7, #14]
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015baa:	693b      	ldr	r3, [r7, #16]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7f7 f984 	bl	800ceba <lwip_htonl>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	4629      	mov	r1, r5
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f000 f8db 	bl	8015d74 <dhcp_option_long>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015bc2:	89f8      	ldrh	r0, [r7, #14]
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	33f0      	adds	r3, #240	; 0xf0
 8015bc8:	69ba      	ldr	r2, [r7, #24]
 8015bca:	4619      	mov	r1, r3
 8015bcc:	f000 fd8e 	bl	80166ec <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015bd0:	4b13      	ldr	r3, [pc, #76]	; (8015c20 <dhcp_release_and_stop+0x12c>)
 8015bd2:	6818      	ldr	r0, [r3, #0]
 8015bd4:	f107 0210 	add.w	r2, r7, #16
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	9300      	str	r3, [sp, #0]
 8015bdc:	2343      	movs	r3, #67	; 0x43
 8015bde:	69b9      	ldr	r1, [r7, #24]
 8015be0:	f7fe fc4c 	bl	801447c <udp_sendto_if>
      pbuf_free(p_out);
 8015be4:	69b8      	ldr	r0, [r7, #24]
 8015be6:	f7f8 fd0b 	bl	800e600 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015bea:	4b0e      	ldr	r3, [pc, #56]	; (8015c24 <dhcp_release_and_stop+0x130>)
 8015bec:	4a0d      	ldr	r2, [pc, #52]	; (8015c24 <dhcp_release_and_stop+0x130>)
 8015bee:	490d      	ldr	r1, [pc, #52]	; (8015c24 <dhcp_release_and_stop+0x130>)
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f7f7 fff7 	bl	800dbe4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	69f8      	ldr	r0, [r7, #28]
 8015bfa:	f000 f815 	bl	8015c28 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	791b      	ldrb	r3, [r3, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d008      	beq.n	8015c18 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015c06:	f7fe ff85 	bl	8014b14 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	711a      	strb	r2, [r3, #4]
 8015c10:	e002      	b.n	8015c18 <dhcp_release_and_stop+0x124>
    return;
 8015c12:	bf00      	nop
 8015c14:	e000      	b.n	8015c18 <dhcp_release_and_stop+0x124>
    return;
 8015c16:	bf00      	nop
  }
}
 8015c18:	3720      	adds	r7, #32
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	20004b5c 	.word	0x20004b5c
 8015c24:	0801d6cc 	.word	0x0801d6cc

08015c28 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015c28:	b480      	push	{r7}
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
 8015c30:	460b      	mov	r3, r1
 8015c32:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	795b      	ldrb	r3, [r3, #5]
 8015c38:	78fa      	ldrb	r2, [r7, #3]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d008      	beq.n	8015c50 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	78fa      	ldrb	r2, [r7, #3]
 8015c42:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2200      	movs	r2, #0
 8015c48:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	811a      	strh	r2, [r3, #8]
  }
}
 8015c50:	bf00      	nop
 8015c52:	370c      	adds	r7, #12
 8015c54:	46bd      	mov	sp, r7
 8015c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c5a:	4770      	bx	lr

08015c5c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b082      	sub	sp, #8
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6039      	str	r1, [r7, #0]
 8015c64:	4611      	mov	r1, r2
 8015c66:	461a      	mov	r2, r3
 8015c68:	4603      	mov	r3, r0
 8015c6a:	80fb      	strh	r3, [r7, #6]
 8015c6c:	460b      	mov	r3, r1
 8015c6e:	717b      	strb	r3, [r7, #5]
 8015c70:	4613      	mov	r3, r2
 8015c72:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015c74:	88fa      	ldrh	r2, [r7, #6]
 8015c76:	793b      	ldrb	r3, [r7, #4]
 8015c78:	4413      	add	r3, r2
 8015c7a:	3302      	adds	r3, #2
 8015c7c:	2b44      	cmp	r3, #68	; 0x44
 8015c7e:	d906      	bls.n	8015c8e <dhcp_option+0x32>
 8015c80:	4b0d      	ldr	r3, [pc, #52]	; (8015cb8 <dhcp_option+0x5c>)
 8015c82:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c86:	490d      	ldr	r1, [pc, #52]	; (8015cbc <dhcp_option+0x60>)
 8015c88:	480d      	ldr	r0, [pc, #52]	; (8015cc0 <dhcp_option+0x64>)
 8015c8a:	f003 fb0d 	bl	80192a8 <iprintf>
  options[options_out_len++] = option_type;
 8015c8e:	88fb      	ldrh	r3, [r7, #6]
 8015c90:	1c5a      	adds	r2, r3, #1
 8015c92:	80fa      	strh	r2, [r7, #6]
 8015c94:	461a      	mov	r2, r3
 8015c96:	683b      	ldr	r3, [r7, #0]
 8015c98:	4413      	add	r3, r2
 8015c9a:	797a      	ldrb	r2, [r7, #5]
 8015c9c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015c9e:	88fb      	ldrh	r3, [r7, #6]
 8015ca0:	1c5a      	adds	r2, r3, #1
 8015ca2:	80fa      	strh	r2, [r7, #6]
 8015ca4:	461a      	mov	r2, r3
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	4413      	add	r3, r2
 8015caa:	793a      	ldrb	r2, [r7, #4]
 8015cac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015cae:	88fb      	ldrh	r3, [r7, #6]
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	0801c9d8 	.word	0x0801c9d8
 8015cbc:	0801cb6c 	.word	0x0801cb6c
 8015cc0:	0801ca38 	.word	0x0801ca38

08015cc4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	4603      	mov	r3, r0
 8015ccc:	6039      	str	r1, [r7, #0]
 8015cce:	80fb      	strh	r3, [r7, #6]
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	2b43      	cmp	r3, #67	; 0x43
 8015cd8:	d906      	bls.n	8015ce8 <dhcp_option_byte+0x24>
 8015cda:	4b0a      	ldr	r3, [pc, #40]	; (8015d04 <dhcp_option_byte+0x40>)
 8015cdc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015ce0:	4909      	ldr	r1, [pc, #36]	; (8015d08 <dhcp_option_byte+0x44>)
 8015ce2:	480a      	ldr	r0, [pc, #40]	; (8015d0c <dhcp_option_byte+0x48>)
 8015ce4:	f003 fae0 	bl	80192a8 <iprintf>
  options[options_out_len++] = value;
 8015ce8:	88fb      	ldrh	r3, [r7, #6]
 8015cea:	1c5a      	adds	r2, r3, #1
 8015cec:	80fa      	strh	r2, [r7, #6]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	4413      	add	r3, r2
 8015cf4:	797a      	ldrb	r2, [r7, #5]
 8015cf6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015cf8:	88fb      	ldrh	r3, [r7, #6]
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	0801c9d8 	.word	0x0801c9d8
 8015d08:	0801cbb0 	.word	0x0801cbb0
 8015d0c:	0801ca38 	.word	0x0801ca38

08015d10 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	4603      	mov	r3, r0
 8015d18:	6039      	str	r1, [r7, #0]
 8015d1a:	80fb      	strh	r3, [r7, #6]
 8015d1c:	4613      	mov	r3, r2
 8015d1e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015d20:	88fb      	ldrh	r3, [r7, #6]
 8015d22:	3302      	adds	r3, #2
 8015d24:	2b44      	cmp	r3, #68	; 0x44
 8015d26:	d906      	bls.n	8015d36 <dhcp_option_short+0x26>
 8015d28:	4b0f      	ldr	r3, [pc, #60]	; (8015d68 <dhcp_option_short+0x58>)
 8015d2a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015d2e:	490f      	ldr	r1, [pc, #60]	; (8015d6c <dhcp_option_short+0x5c>)
 8015d30:	480f      	ldr	r0, [pc, #60]	; (8015d70 <dhcp_option_short+0x60>)
 8015d32:	f003 fab9 	bl	80192a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015d36:	88bb      	ldrh	r3, [r7, #4]
 8015d38:	0a1b      	lsrs	r3, r3, #8
 8015d3a:	b29a      	uxth	r2, r3
 8015d3c:	88fb      	ldrh	r3, [r7, #6]
 8015d3e:	1c59      	adds	r1, r3, #1
 8015d40:	80f9      	strh	r1, [r7, #6]
 8015d42:	4619      	mov	r1, r3
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	440b      	add	r3, r1
 8015d48:	b2d2      	uxtb	r2, r2
 8015d4a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015d4c:	88fb      	ldrh	r3, [r7, #6]
 8015d4e:	1c5a      	adds	r2, r3, #1
 8015d50:	80fa      	strh	r2, [r7, #6]
 8015d52:	461a      	mov	r2, r3
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	4413      	add	r3, r2
 8015d58:	88ba      	ldrh	r2, [r7, #4]
 8015d5a:	b2d2      	uxtb	r2, r2
 8015d5c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d5e:	88fb      	ldrh	r3, [r7, #6]
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	0801c9d8 	.word	0x0801c9d8
 8015d6c:	0801cbe8 	.word	0x0801cbe8
 8015d70:	0801ca38 	.word	0x0801ca38

08015d74 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b084      	sub	sp, #16
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	607a      	str	r2, [r7, #4]
 8015d80:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015d82:	89fb      	ldrh	r3, [r7, #14]
 8015d84:	3304      	adds	r3, #4
 8015d86:	2b44      	cmp	r3, #68	; 0x44
 8015d88:	d906      	bls.n	8015d98 <dhcp_option_long+0x24>
 8015d8a:	4b19      	ldr	r3, [pc, #100]	; (8015df0 <dhcp_option_long+0x7c>)
 8015d8c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015d90:	4918      	ldr	r1, [pc, #96]	; (8015df4 <dhcp_option_long+0x80>)
 8015d92:	4819      	ldr	r0, [pc, #100]	; (8015df8 <dhcp_option_long+0x84>)
 8015d94:	f003 fa88 	bl	80192a8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	0e1a      	lsrs	r2, r3, #24
 8015d9c:	89fb      	ldrh	r3, [r7, #14]
 8015d9e:	1c59      	adds	r1, r3, #1
 8015da0:	81f9      	strh	r1, [r7, #14]
 8015da2:	4619      	mov	r1, r3
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	440b      	add	r3, r1
 8015da8:	b2d2      	uxtb	r2, r2
 8015daa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	0c1a      	lsrs	r2, r3, #16
 8015db0:	89fb      	ldrh	r3, [r7, #14]
 8015db2:	1c59      	adds	r1, r3, #1
 8015db4:	81f9      	strh	r1, [r7, #14]
 8015db6:	4619      	mov	r1, r3
 8015db8:	68bb      	ldr	r3, [r7, #8]
 8015dba:	440b      	add	r3, r1
 8015dbc:	b2d2      	uxtb	r2, r2
 8015dbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	0a1a      	lsrs	r2, r3, #8
 8015dc4:	89fb      	ldrh	r3, [r7, #14]
 8015dc6:	1c59      	adds	r1, r3, #1
 8015dc8:	81f9      	strh	r1, [r7, #14]
 8015dca:	4619      	mov	r1, r3
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	440b      	add	r3, r1
 8015dd0:	b2d2      	uxtb	r2, r2
 8015dd2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015dd4:	89fb      	ldrh	r3, [r7, #14]
 8015dd6:	1c5a      	adds	r2, r3, #1
 8015dd8:	81fa      	strh	r2, [r7, #14]
 8015dda:	461a      	mov	r2, r3
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	4413      	add	r3, r2
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	b2d2      	uxtb	r2, r2
 8015de4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015de6:	89fb      	ldrh	r3, [r7, #14]
}
 8015de8:	4618      	mov	r0, r3
 8015dea:	3710      	adds	r7, #16
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}
 8015df0:	0801c9d8 	.word	0x0801c9d8
 8015df4:	0801cc24 	.word	0x0801cc24
 8015df8:	0801ca38 	.word	0x0801ca38

08015dfc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b090      	sub	sp, #64	; 0x40
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015e06:	2300      	movs	r3, #0
 8015e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015e0e:	2208      	movs	r2, #8
 8015e10:	2100      	movs	r1, #0
 8015e12:	48be      	ldr	r0, [pc, #760]	; (801610c <dhcp_parse_reply+0x310>)
 8015e14:	f003 f9e5 	bl	80191e2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	895b      	ldrh	r3, [r3, #10]
 8015e1c:	2b2b      	cmp	r3, #43	; 0x2b
 8015e1e:	d802      	bhi.n	8015e26 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015e20:	f06f 0301 	mvn.w	r3, #1
 8015e24:	e2a8      	b.n	8016378 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015e2c:	23f0      	movs	r3, #240	; 0xf0
 8015e2e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	891b      	ldrh	r3, [r3, #8]
 8015e34:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015e3a:	e00c      	b.n	8015e56 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3e:	895b      	ldrh	r3, [r3, #10]
 8015e40:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e42:	1ad3      	subs	r3, r2, r3
 8015e44:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e48:	895b      	ldrh	r3, [r3, #10]
 8015e4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015e4c:	1ad3      	subs	r3, r2, r3
 8015e4e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d004      	beq.n	8015e66 <dhcp_parse_reply+0x6a>
 8015e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5e:	895b      	ldrh	r3, [r3, #10]
 8015e60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d2ea      	bcs.n	8015e3c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d102      	bne.n	8015e72 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015e6c:	f06f 0301 	mvn.w	r3, #1
 8015e70:	e282      	b.n	8016378 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015e72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e74:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015e76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e78:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e80:	e23a      	b.n	80162f8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015e82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e86:	4413      	add	r3, r2
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015e92:	f04f 33ff 	mov.w	r3, #4294967295
 8015e96:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015e98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e9a:	3302      	adds	r3, #2
 8015e9c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015e9e:	8bfa      	ldrh	r2, [r7, #30]
 8015ea0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d202      	bcs.n	8015eac <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015ea6:	f06f 0301 	mvn.w	r3, #1
 8015eaa:	e265      	b.n	8016378 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015eac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eae:	3301      	adds	r3, #1
 8015eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015eb2:	8952      	ldrh	r2, [r2, #10]
 8015eb4:	4293      	cmp	r3, r2
 8015eb6:	da07      	bge.n	8015ec8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015eb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eba:	3301      	adds	r3, #1
 8015ebc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015ebe:	4413      	add	r3, r2
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ec6:	e00b      	b.n	8015ee0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d004      	beq.n	8015eda <dhcp_parse_reply+0xde>
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	781b      	ldrb	r3, [r3, #0]
 8015ed8:	e000      	b.n	8015edc <dhcp_parse_reply+0xe0>
 8015eda:	2300      	movs	r3, #0
 8015edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ee4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015ee8:	7dfb      	ldrb	r3, [r7, #23]
 8015eea:	2b3b      	cmp	r3, #59	; 0x3b
 8015eec:	f200 812d 	bhi.w	801614a <dhcp_parse_reply+0x34e>
 8015ef0:	a201      	add	r2, pc, #4	; (adr r2, 8015ef8 <dhcp_parse_reply+0xfc>)
 8015ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ef6:	bf00      	nop
 8015ef8:	08015fe9 	.word	0x08015fe9
 8015efc:	08015ff9 	.word	0x08015ff9
 8015f00:	0801614b 	.word	0x0801614b
 8015f04:	0801601b 	.word	0x0801601b
 8015f08:	0801614b 	.word	0x0801614b
 8015f0c:	0801614b 	.word	0x0801614b
 8015f10:	0801614b 	.word	0x0801614b
 8015f14:	0801614b 	.word	0x0801614b
 8015f18:	0801614b 	.word	0x0801614b
 8015f1c:	0801614b 	.word	0x0801614b
 8015f20:	0801614b 	.word	0x0801614b
 8015f24:	0801614b 	.word	0x0801614b
 8015f28:	0801614b 	.word	0x0801614b
 8015f2c:	0801614b 	.word	0x0801614b
 8015f30:	0801614b 	.word	0x0801614b
 8015f34:	0801614b 	.word	0x0801614b
 8015f38:	0801614b 	.word	0x0801614b
 8015f3c:	0801614b 	.word	0x0801614b
 8015f40:	0801614b 	.word	0x0801614b
 8015f44:	0801614b 	.word	0x0801614b
 8015f48:	0801614b 	.word	0x0801614b
 8015f4c:	0801614b 	.word	0x0801614b
 8015f50:	0801614b 	.word	0x0801614b
 8015f54:	0801614b 	.word	0x0801614b
 8015f58:	0801614b 	.word	0x0801614b
 8015f5c:	0801614b 	.word	0x0801614b
 8015f60:	0801614b 	.word	0x0801614b
 8015f64:	0801614b 	.word	0x0801614b
 8015f68:	0801614b 	.word	0x0801614b
 8015f6c:	0801614b 	.word	0x0801614b
 8015f70:	0801614b 	.word	0x0801614b
 8015f74:	0801614b 	.word	0x0801614b
 8015f78:	0801614b 	.word	0x0801614b
 8015f7c:	0801614b 	.word	0x0801614b
 8015f80:	0801614b 	.word	0x0801614b
 8015f84:	0801614b 	.word	0x0801614b
 8015f88:	0801614b 	.word	0x0801614b
 8015f8c:	0801614b 	.word	0x0801614b
 8015f90:	0801614b 	.word	0x0801614b
 8015f94:	0801614b 	.word	0x0801614b
 8015f98:	0801614b 	.word	0x0801614b
 8015f9c:	0801614b 	.word	0x0801614b
 8015fa0:	0801614b 	.word	0x0801614b
 8015fa4:	0801614b 	.word	0x0801614b
 8015fa8:	0801614b 	.word	0x0801614b
 8015fac:	0801614b 	.word	0x0801614b
 8015fb0:	0801614b 	.word	0x0801614b
 8015fb4:	0801614b 	.word	0x0801614b
 8015fb8:	0801614b 	.word	0x0801614b
 8015fbc:	0801614b 	.word	0x0801614b
 8015fc0:	0801614b 	.word	0x0801614b
 8015fc4:	08016047 	.word	0x08016047
 8015fc8:	08016069 	.word	0x08016069
 8015fcc:	080160a5 	.word	0x080160a5
 8015fd0:	080160c7 	.word	0x080160c7
 8015fd4:	0801614b 	.word	0x0801614b
 8015fd8:	0801614b 	.word	0x0801614b
 8015fdc:	0801614b 	.word	0x0801614b
 8015fe0:	080160e9 	.word	0x080160e9
 8015fe4:	08016129 	.word	0x08016129
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ff2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015ff6:	e0ac      	b.n	8016152 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ffc:	2b04      	cmp	r3, #4
 8015ffe:	d009      	beq.n	8016014 <dhcp_parse_reply+0x218>
 8016000:	4b43      	ldr	r3, [pc, #268]	; (8016110 <dhcp_parse_reply+0x314>)
 8016002:	f240 622e 	movw	r2, #1582	; 0x62e
 8016006:	4943      	ldr	r1, [pc, #268]	; (8016114 <dhcp_parse_reply+0x318>)
 8016008:	4843      	ldr	r0, [pc, #268]	; (8016118 <dhcp_parse_reply+0x31c>)
 801600a:	f003 f94d 	bl	80192a8 <iprintf>
 801600e:	f06f 0305 	mvn.w	r3, #5
 8016012:	e1b1      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016014:	2306      	movs	r3, #6
 8016016:	623b      	str	r3, [r7, #32]
        break;
 8016018:	e09b      	b.n	8016152 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801601a:	2304      	movs	r3, #4
 801601c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016020:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016024:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016028:	429a      	cmp	r2, r3
 801602a:	d209      	bcs.n	8016040 <dhcp_parse_reply+0x244>
 801602c:	4b38      	ldr	r3, [pc, #224]	; (8016110 <dhcp_parse_reply+0x314>)
 801602e:	f240 6233 	movw	r2, #1587	; 0x633
 8016032:	493a      	ldr	r1, [pc, #232]	; (801611c <dhcp_parse_reply+0x320>)
 8016034:	4838      	ldr	r0, [pc, #224]	; (8016118 <dhcp_parse_reply+0x31c>)
 8016036:	f003 f937 	bl	80192a8 <iprintf>
 801603a:	f06f 0305 	mvn.w	r3, #5
 801603e:	e19b      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016040:	2307      	movs	r3, #7
 8016042:	623b      	str	r3, [r7, #32]
        break;
 8016044:	e085      	b.n	8016152 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801604a:	2b04      	cmp	r3, #4
 801604c:	d009      	beq.n	8016062 <dhcp_parse_reply+0x266>
 801604e:	4b30      	ldr	r3, [pc, #192]	; (8016110 <dhcp_parse_reply+0x314>)
 8016050:	f240 6241 	movw	r2, #1601	; 0x641
 8016054:	492f      	ldr	r1, [pc, #188]	; (8016114 <dhcp_parse_reply+0x318>)
 8016056:	4830      	ldr	r0, [pc, #192]	; (8016118 <dhcp_parse_reply+0x31c>)
 8016058:	f003 f926 	bl	80192a8 <iprintf>
 801605c:	f06f 0305 	mvn.w	r3, #5
 8016060:	e18a      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016062:	2303      	movs	r3, #3
 8016064:	623b      	str	r3, [r7, #32]
        break;
 8016066:	e074      	b.n	8016152 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801606c:	2b01      	cmp	r3, #1
 801606e:	d009      	beq.n	8016084 <dhcp_parse_reply+0x288>
 8016070:	4b27      	ldr	r3, [pc, #156]	; (8016110 <dhcp_parse_reply+0x314>)
 8016072:	f240 624f 	movw	r2, #1615	; 0x64f
 8016076:	492a      	ldr	r1, [pc, #168]	; (8016120 <dhcp_parse_reply+0x324>)
 8016078:	4827      	ldr	r0, [pc, #156]	; (8016118 <dhcp_parse_reply+0x31c>)
 801607a:	f003 f915 	bl	80192a8 <iprintf>
 801607e:	f06f 0305 	mvn.w	r3, #5
 8016082:	e179      	b.n	8016378 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016084:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016086:	2bf0      	cmp	r3, #240	; 0xf0
 8016088:	d009      	beq.n	801609e <dhcp_parse_reply+0x2a2>
 801608a:	4b21      	ldr	r3, [pc, #132]	; (8016110 <dhcp_parse_reply+0x314>)
 801608c:	f240 6251 	movw	r2, #1617	; 0x651
 8016090:	4924      	ldr	r1, [pc, #144]	; (8016124 <dhcp_parse_reply+0x328>)
 8016092:	4821      	ldr	r0, [pc, #132]	; (8016118 <dhcp_parse_reply+0x31c>)
 8016094:	f003 f908 	bl	80192a8 <iprintf>
 8016098:	f06f 0305 	mvn.w	r3, #5
 801609c:	e16c      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801609e:	2300      	movs	r3, #0
 80160a0:	623b      	str	r3, [r7, #32]
        break;
 80160a2:	e056      	b.n	8016152 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80160a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160a8:	2b01      	cmp	r3, #1
 80160aa:	d009      	beq.n	80160c0 <dhcp_parse_reply+0x2c4>
 80160ac:	4b18      	ldr	r3, [pc, #96]	; (8016110 <dhcp_parse_reply+0x314>)
 80160ae:	f240 6255 	movw	r2, #1621	; 0x655
 80160b2:	491b      	ldr	r1, [pc, #108]	; (8016120 <dhcp_parse_reply+0x324>)
 80160b4:	4818      	ldr	r0, [pc, #96]	; (8016118 <dhcp_parse_reply+0x31c>)
 80160b6:	f003 f8f7 	bl	80192a8 <iprintf>
 80160ba:	f06f 0305 	mvn.w	r3, #5
 80160be:	e15b      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80160c0:	2301      	movs	r3, #1
 80160c2:	623b      	str	r3, [r7, #32]
        break;
 80160c4:	e045      	b.n	8016152 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160ca:	2b04      	cmp	r3, #4
 80160cc:	d009      	beq.n	80160e2 <dhcp_parse_reply+0x2e6>
 80160ce:	4b10      	ldr	r3, [pc, #64]	; (8016110 <dhcp_parse_reply+0x314>)
 80160d0:	f240 6259 	movw	r2, #1625	; 0x659
 80160d4:	490f      	ldr	r1, [pc, #60]	; (8016114 <dhcp_parse_reply+0x318>)
 80160d6:	4810      	ldr	r0, [pc, #64]	; (8016118 <dhcp_parse_reply+0x31c>)
 80160d8:	f003 f8e6 	bl	80192a8 <iprintf>
 80160dc:	f06f 0305 	mvn.w	r3, #5
 80160e0:	e14a      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80160e2:	2302      	movs	r3, #2
 80160e4:	623b      	str	r3, [r7, #32]
        break;
 80160e6:	e034      	b.n	8016152 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160ec:	2b04      	cmp	r3, #4
 80160ee:	d009      	beq.n	8016104 <dhcp_parse_reply+0x308>
 80160f0:	4b07      	ldr	r3, [pc, #28]	; (8016110 <dhcp_parse_reply+0x314>)
 80160f2:	f240 625d 	movw	r2, #1629	; 0x65d
 80160f6:	4907      	ldr	r1, [pc, #28]	; (8016114 <dhcp_parse_reply+0x318>)
 80160f8:	4807      	ldr	r0, [pc, #28]	; (8016118 <dhcp_parse_reply+0x31c>)
 80160fa:	f003 f8d5 	bl	80192a8 <iprintf>
 80160fe:	f06f 0305 	mvn.w	r3, #5
 8016102:	e139      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016104:	2304      	movs	r3, #4
 8016106:	623b      	str	r3, [r7, #32]
        break;
 8016108:	e023      	b.n	8016152 <dhcp_parse_reply+0x356>
 801610a:	bf00      	nop
 801610c:	2000d098 	.word	0x2000d098
 8016110:	0801c9d8 	.word	0x0801c9d8
 8016114:	0801cc60 	.word	0x0801cc60
 8016118:	0801ca38 	.word	0x0801ca38
 801611c:	0801cc6c 	.word	0x0801cc6c
 8016120:	0801cc80 	.word	0x0801cc80
 8016124:	0801cc8c 	.word	0x0801cc8c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801612c:	2b04      	cmp	r3, #4
 801612e:	d009      	beq.n	8016144 <dhcp_parse_reply+0x348>
 8016130:	4b93      	ldr	r3, [pc, #588]	; (8016380 <dhcp_parse_reply+0x584>)
 8016132:	f240 6261 	movw	r2, #1633	; 0x661
 8016136:	4993      	ldr	r1, [pc, #588]	; (8016384 <dhcp_parse_reply+0x588>)
 8016138:	4893      	ldr	r0, [pc, #588]	; (8016388 <dhcp_parse_reply+0x58c>)
 801613a:	f003 f8b5 	bl	80192a8 <iprintf>
 801613e:	f06f 0305 	mvn.w	r3, #5
 8016142:	e119      	b.n	8016378 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016144:	2305      	movs	r3, #5
 8016146:	623b      	str	r3, [r7, #32]
        break;
 8016148:	e003      	b.n	8016152 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801614a:	2300      	movs	r3, #0
 801614c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016150:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016152:	7dfb      	ldrb	r3, [r7, #23]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d103      	bne.n	8016160 <dhcp_parse_reply+0x364>
      offset++;
 8016158:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801615a:	3301      	adds	r3, #1
 801615c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801615e:	e0a1      	b.n	80162a4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016160:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016166:	4413      	add	r3, r2
 8016168:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801616c:	4293      	cmp	r3, r2
 801616e:	dd02      	ble.n	8016176 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016170:	f06f 0301 	mvn.w	r3, #1
 8016174:	e100      	b.n	8016378 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8016176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801617a:	b29a      	uxth	r2, r3
 801617c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801617e:	4413      	add	r3, r2
 8016180:	b29b      	uxth	r3, r3
 8016182:	3302      	adds	r3, #2
 8016184:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016186:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801618a:	2b00      	cmp	r3, #0
 801618c:	f000 808a 	beq.w	80162a4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016190:	2300      	movs	r3, #0
 8016192:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016194:	6a3b      	ldr	r3, [r7, #32]
 8016196:	2b00      	cmp	r3, #0
 8016198:	db02      	blt.n	80161a0 <dhcp_parse_reply+0x3a4>
 801619a:	6a3b      	ldr	r3, [r7, #32]
 801619c:	2b07      	cmp	r3, #7
 801619e:	dd06      	ble.n	80161ae <dhcp_parse_reply+0x3b2>
 80161a0:	4b77      	ldr	r3, [pc, #476]	; (8016380 <dhcp_parse_reply+0x584>)
 80161a2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80161a6:	4979      	ldr	r1, [pc, #484]	; (801638c <dhcp_parse_reply+0x590>)
 80161a8:	4877      	ldr	r0, [pc, #476]	; (8016388 <dhcp_parse_reply+0x58c>)
 80161aa:	f003 f87d 	bl	80192a8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80161ae:	4a78      	ldr	r2, [pc, #480]	; (8016390 <dhcp_parse_reply+0x594>)
 80161b0:	6a3b      	ldr	r3, [r7, #32]
 80161b2:	4413      	add	r3, r2
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d174      	bne.n	80162a4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80161ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161be:	2b04      	cmp	r3, #4
 80161c0:	bf28      	it	cs
 80161c2:	2304      	movcs	r3, #4
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80161c8:	8bfb      	ldrh	r3, [r7, #30]
 80161ca:	8aba      	ldrh	r2, [r7, #20]
 80161cc:	f107 0108 	add.w	r1, r7, #8
 80161d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161d2:	f7f8 fc1b 	bl	800ea0c <pbuf_copy_partial>
 80161d6:	4603      	mov	r3, r0
 80161d8:	461a      	mov	r2, r3
 80161da:	8abb      	ldrh	r3, [r7, #20]
 80161dc:	4293      	cmp	r3, r2
 80161de:	d002      	beq.n	80161e6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80161e0:	f06f 0301 	mvn.w	r3, #1
 80161e4:	e0c8      	b.n	8016378 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80161e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161ea:	2b04      	cmp	r3, #4
 80161ec:	d933      	bls.n	8016256 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80161ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161f2:	f003 0303 	and.w	r3, r3, #3
 80161f6:	b2db      	uxtb	r3, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d009      	beq.n	8016210 <dhcp_parse_reply+0x414>
 80161fc:	4b60      	ldr	r3, [pc, #384]	; (8016380 <dhcp_parse_reply+0x584>)
 80161fe:	f240 6281 	movw	r2, #1665	; 0x681
 8016202:	4964      	ldr	r1, [pc, #400]	; (8016394 <dhcp_parse_reply+0x598>)
 8016204:	4860      	ldr	r0, [pc, #384]	; (8016388 <dhcp_parse_reply+0x58c>)
 8016206:	f003 f84f 	bl	80192a8 <iprintf>
 801620a:	f06f 0305 	mvn.w	r3, #5
 801620e:	e0b3      	b.n	8016378 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016210:	4a5f      	ldr	r2, [pc, #380]	; (8016390 <dhcp_parse_reply+0x594>)
 8016212:	6a3b      	ldr	r3, [r7, #32]
 8016214:	4413      	add	r3, r2
 8016216:	2201      	movs	r2, #1
 8016218:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	4618      	mov	r0, r3
 801621e:	f7f6 fe4c 	bl	800ceba <lwip_htonl>
 8016222:	4602      	mov	r2, r0
 8016224:	495c      	ldr	r1, [pc, #368]	; (8016398 <dhcp_parse_reply+0x59c>)
 8016226:	6a3b      	ldr	r3, [r7, #32]
 8016228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801622c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016230:	3b04      	subs	r3, #4
 8016232:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016236:	8bfb      	ldrh	r3, [r7, #30]
 8016238:	3304      	adds	r3, #4
 801623a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801623c:	8a7a      	ldrh	r2, [r7, #18]
 801623e:	8bfb      	ldrh	r3, [r7, #30]
 8016240:	429a      	cmp	r2, r3
 8016242:	d202      	bcs.n	801624a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8016244:	f06f 0301 	mvn.w	r3, #1
 8016248:	e096      	b.n	8016378 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801624a:	8a7b      	ldrh	r3, [r7, #18]
 801624c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801624e:	6a3b      	ldr	r3, [r7, #32]
 8016250:	3301      	adds	r3, #1
 8016252:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016254:	e79e      	b.n	8016194 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8016256:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801625a:	2b04      	cmp	r3, #4
 801625c:	d106      	bne.n	801626c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	4618      	mov	r0, r3
 8016262:	f7f6 fe2a 	bl	800ceba <lwip_htonl>
 8016266:	4603      	mov	r3, r0
 8016268:	60bb      	str	r3, [r7, #8]
 801626a:	e011      	b.n	8016290 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801626c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016270:	2b01      	cmp	r3, #1
 8016272:	d009      	beq.n	8016288 <dhcp_parse_reply+0x48c>
 8016274:	4b42      	ldr	r3, [pc, #264]	; (8016380 <dhcp_parse_reply+0x584>)
 8016276:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801627a:	4948      	ldr	r1, [pc, #288]	; (801639c <dhcp_parse_reply+0x5a0>)
 801627c:	4842      	ldr	r0, [pc, #264]	; (8016388 <dhcp_parse_reply+0x58c>)
 801627e:	f003 f813 	bl	80192a8 <iprintf>
 8016282:	f06f 0305 	mvn.w	r3, #5
 8016286:	e077      	b.n	8016378 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016288:	f107 0308 	add.w	r3, r7, #8
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016290:	4a3f      	ldr	r2, [pc, #252]	; (8016390 <dhcp_parse_reply+0x594>)
 8016292:	6a3b      	ldr	r3, [r7, #32]
 8016294:	4413      	add	r3, r2
 8016296:	2201      	movs	r2, #1
 8016298:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801629a:	68ba      	ldr	r2, [r7, #8]
 801629c:	493e      	ldr	r1, [pc, #248]	; (8016398 <dhcp_parse_reply+0x59c>)
 801629e:	6a3b      	ldr	r3, [r7, #32]
 80162a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80162a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a6:	895b      	ldrh	r3, [r3, #10]
 80162a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d324      	bcc.n	80162f8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80162ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b0:	895b      	ldrh	r3, [r3, #10]
 80162b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162b4:	1ad3      	subs	r3, r2, r3
 80162b6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80162b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ba:	895b      	ldrh	r3, [r3, #10]
 80162bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80162be:	1ad3      	subs	r3, r2, r3
 80162c0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80162c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80162c6:	429a      	cmp	r2, r3
 80162c8:	d213      	bcs.n	80162f2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80162ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80162d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d109      	bne.n	80162ea <dhcp_parse_reply+0x4ee>
 80162d6:	4b2a      	ldr	r3, [pc, #168]	; (8016380 <dhcp_parse_reply+0x584>)
 80162d8:	f240 629d 	movw	r2, #1693	; 0x69d
 80162dc:	4930      	ldr	r1, [pc, #192]	; (80163a0 <dhcp_parse_reply+0x5a4>)
 80162de:	482a      	ldr	r0, [pc, #168]	; (8016388 <dhcp_parse_reply+0x58c>)
 80162e0:	f002 ffe2 	bl	80192a8 <iprintf>
 80162e4:	f06f 0305 	mvn.w	r3, #5
 80162e8:	e046      	b.n	8016378 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80162ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80162f0:	e002      	b.n	80162f8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80162f2:	f06f 0301 	mvn.w	r3, #1
 80162f6:	e03f      	b.n	8016378 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00a      	beq.n	8016314 <dhcp_parse_reply+0x518>
 80162fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016300:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016302:	429a      	cmp	r2, r3
 8016304:	d206      	bcs.n	8016314 <dhcp_parse_reply+0x518>
 8016306:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801630a:	4413      	add	r3, r2
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	2bff      	cmp	r3, #255	; 0xff
 8016310:	f47f adb7 	bne.w	8015e82 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016314:	4b1e      	ldr	r3, [pc, #120]	; (8016390 <dhcp_parse_reply+0x594>)
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d018      	beq.n	801634e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801631c:	4b1e      	ldr	r3, [pc, #120]	; (8016398 <dhcp_parse_reply+0x59c>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016322:	4b1b      	ldr	r3, [pc, #108]	; (8016390 <dhcp_parse_reply+0x594>)
 8016324:	2200      	movs	r2, #0
 8016326:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2b01      	cmp	r3, #1
 801632c:	d102      	bne.n	8016334 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801632e:	2301      	movs	r3, #1
 8016330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016332:	e00c      	b.n	801634e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	2b02      	cmp	r3, #2
 8016338:	d102      	bne.n	8016340 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801633a:	2301      	movs	r3, #1
 801633c:	62bb      	str	r3, [r7, #40]	; 0x28
 801633e:	e006      	b.n	801634e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2b03      	cmp	r3, #3
 8016344:	d103      	bne.n	801634e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8016346:	2301      	movs	r3, #1
 8016348:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801634a:	2301      	movs	r3, #1
 801634c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	2b00      	cmp	r3, #0
 8016352:	d006      	beq.n	8016362 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016354:	2300      	movs	r3, #0
 8016356:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016358:	236c      	movs	r3, #108	; 0x6c
 801635a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801635c:	23ec      	movs	r3, #236	; 0xec
 801635e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016360:	e569      	b.n	8015e36 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016364:	2b00      	cmp	r3, #0
 8016366:	d006      	beq.n	8016376 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016368:	2300      	movs	r3, #0
 801636a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801636c:	232c      	movs	r3, #44	; 0x2c
 801636e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016370:	236c      	movs	r3, #108	; 0x6c
 8016372:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016374:	e55f      	b.n	8015e36 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8016376:	2300      	movs	r3, #0
}
 8016378:	4618      	mov	r0, r3
 801637a:	3740      	adds	r7, #64	; 0x40
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}
 8016380:	0801c9d8 	.word	0x0801c9d8
 8016384:	0801cc60 	.word	0x0801cc60
 8016388:	0801ca38 	.word	0x0801ca38
 801638c:	0801cca4 	.word	0x0801cca4
 8016390:	2000d098 	.word	0x2000d098
 8016394:	0801ccb8 	.word	0x0801ccb8
 8016398:	2000d0a0 	.word	0x2000d0a0
 801639c:	0801ccd0 	.word	0x0801ccd0
 80163a0:	0801cce4 	.word	0x0801cce4

080163a4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b08a      	sub	sp, #40	; 0x28
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	607a      	str	r2, [r7, #4]
 80163b0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80163b2:	4b60      	ldr	r3, [pc, #384]	; (8016534 <dhcp_recv+0x190>)
 80163b4:	685b      	ldr	r3, [r3, #4]
 80163b6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80163b8:	6a3b      	ldr	r3, [r7, #32]
 80163ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163bc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	685b      	ldr	r3, [r3, #4]
 80163c2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80163c4:	69fb      	ldr	r3, [r7, #28]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f000 809d 	beq.w	8016506 <dhcp_recv+0x162>
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	791b      	ldrb	r3, [r3, #4]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 8098 	beq.w	8016506 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	895b      	ldrh	r3, [r3, #10]
 80163da:	2b2b      	cmp	r3, #43	; 0x2b
 80163dc:	f240 8095 	bls.w	801650a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b02      	cmp	r3, #2
 80163e6:	f040 8092 	bne.w	801650e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80163ea:	2300      	movs	r3, #0
 80163ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163f0:	e012      	b.n	8016418 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80163f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163f6:	6a3a      	ldr	r2, [r7, #32]
 80163f8:	4413      	add	r3, r2
 80163fa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80163fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016402:	69b9      	ldr	r1, [r7, #24]
 8016404:	440b      	add	r3, r1
 8016406:	7f1b      	ldrb	r3, [r3, #28]
 8016408:	429a      	cmp	r2, r3
 801640a:	f040 8082 	bne.w	8016512 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801640e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016412:	3301      	adds	r3, #1
 8016414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016418:	6a3b      	ldr	r3, [r7, #32]
 801641a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801641e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016422:	429a      	cmp	r2, r3
 8016424:	d203      	bcs.n	801642e <dhcp_recv+0x8a>
 8016426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801642a:	2b05      	cmp	r3, #5
 801642c:	d9e1      	bls.n	80163f2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	4618      	mov	r0, r3
 8016434:	f7f6 fd41 	bl	800ceba <lwip_htonl>
 8016438:	4602      	mov	r2, r0
 801643a:	69fb      	ldr	r3, [r7, #28]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	429a      	cmp	r2, r3
 8016440:	d169      	bne.n	8016516 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016442:	69f9      	ldr	r1, [r7, #28]
 8016444:	6878      	ldr	r0, [r7, #4]
 8016446:	f7ff fcd9 	bl	8015dfc <dhcp_parse_reply>
 801644a:	4603      	mov	r3, r0
 801644c:	2b00      	cmp	r3, #0
 801644e:	d164      	bne.n	801651a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016450:	4b39      	ldr	r3, [pc, #228]	; (8016538 <dhcp_recv+0x194>)
 8016452:	785b      	ldrb	r3, [r3, #1]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d062      	beq.n	801651e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801645e:	4b37      	ldr	r3, [pc, #220]	; (801653c <dhcp_recv+0x198>)
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016464:	7cfb      	ldrb	r3, [r7, #19]
 8016466:	2b05      	cmp	r3, #5
 8016468:	d12a      	bne.n	80164c0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	795b      	ldrb	r3, [r3, #5]
 801646e:	2b01      	cmp	r3, #1
 8016470:	d112      	bne.n	8016498 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016472:	6979      	ldr	r1, [r7, #20]
 8016474:	6a38      	ldr	r0, [r7, #32]
 8016476:	f7fe fe17 	bl	80150a8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801647a:	6a3b      	ldr	r3, [r7, #32]
 801647c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016480:	f003 0308 	and.w	r3, r3, #8
 8016484:	2b00      	cmp	r3, #0
 8016486:	d003      	beq.n	8016490 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016488:	6a38      	ldr	r0, [r7, #32]
 801648a:	f7fe fb87 	bl	8014b9c <dhcp_check>
 801648e:	e049      	b.n	8016524 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016490:	6a38      	ldr	r0, [r7, #32]
 8016492:	f7ff f867 	bl	8015564 <dhcp_bind>
 8016496:	e045      	b.n	8016524 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016498:	69fb      	ldr	r3, [r7, #28]
 801649a:	795b      	ldrb	r3, [r3, #5]
 801649c:	2b03      	cmp	r3, #3
 801649e:	d007      	beq.n	80164b0 <dhcp_recv+0x10c>
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	795b      	ldrb	r3, [r3, #5]
 80164a4:	2b04      	cmp	r3, #4
 80164a6:	d003      	beq.n	80164b0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80164ac:	2b05      	cmp	r3, #5
 80164ae:	d139      	bne.n	8016524 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80164b0:	6979      	ldr	r1, [r7, #20]
 80164b2:	6a38      	ldr	r0, [r7, #32]
 80164b4:	f7fe fdf8 	bl	80150a8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80164b8:	6a38      	ldr	r0, [r7, #32]
 80164ba:	f7ff f853 	bl	8015564 <dhcp_bind>
 80164be:	e031      	b.n	8016524 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80164c0:	7cfb      	ldrb	r3, [r7, #19]
 80164c2:	2b06      	cmp	r3, #6
 80164c4:	d113      	bne.n	80164ee <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80164c6:	69fb      	ldr	r3, [r7, #28]
 80164c8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80164ca:	2b03      	cmp	r3, #3
 80164cc:	d00b      	beq.n	80164e6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80164ce:	69fb      	ldr	r3, [r7, #28]
 80164d0:	795b      	ldrb	r3, [r3, #5]
 80164d2:	2b01      	cmp	r3, #1
 80164d4:	d007      	beq.n	80164e6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80164d6:	69fb      	ldr	r3, [r7, #28]
 80164d8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80164da:	2b04      	cmp	r3, #4
 80164dc:	d003      	beq.n	80164e6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80164de:	69fb      	ldr	r3, [r7, #28]
 80164e0:	795b      	ldrb	r3, [r3, #5]
 80164e2:	2b05      	cmp	r3, #5
 80164e4:	d103      	bne.n	80164ee <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80164e6:	6a38      	ldr	r0, [r7, #32]
 80164e8:	f7fe fb3e 	bl	8014b68 <dhcp_handle_nak>
 80164ec:	e01a      	b.n	8016524 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80164ee:	7cfb      	ldrb	r3, [r7, #19]
 80164f0:	2b02      	cmp	r3, #2
 80164f2:	d116      	bne.n	8016522 <dhcp_recv+0x17e>
 80164f4:	69fb      	ldr	r3, [r7, #28]
 80164f6:	795b      	ldrb	r3, [r3, #5]
 80164f8:	2b06      	cmp	r3, #6
 80164fa:	d112      	bne.n	8016522 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80164fc:	6979      	ldr	r1, [r7, #20]
 80164fe:	6a38      	ldr	r0, [r7, #32]
 8016500:	f7fe fb80 	bl	8014c04 <dhcp_handle_offer>
 8016504:	e00e      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016506:	bf00      	nop
 8016508:	e00c      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801650a:	bf00      	nop
 801650c:	e00a      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801650e:	bf00      	nop
 8016510:	e008      	b.n	8016524 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016512:	bf00      	nop
 8016514:	e006      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016516:	bf00      	nop
 8016518:	e004      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801651a:	bf00      	nop
 801651c:	e002      	b.n	8016524 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801651e:	bf00      	nop
 8016520:	e000      	b.n	8016524 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016522:	bf00      	nop
  pbuf_free(p);
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f7f8 f86b 	bl	800e600 <pbuf_free>
}
 801652a:	bf00      	nop
 801652c:	3728      	adds	r7, #40	; 0x28
 801652e:	46bd      	mov	sp, r7
 8016530:	bd80      	pop	{r7, pc}
 8016532:	bf00      	nop
 8016534:	20009948 	.word	0x20009948
 8016538:	2000d098 	.word	0x2000d098
 801653c:	2000d0a0 	.word	0x2000d0a0

08016540 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b088      	sub	sp, #32
 8016544:	af00      	add	r7, sp, #0
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	603b      	str	r3, [r7, #0]
 801654c:	4613      	mov	r3, r2
 801654e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d108      	bne.n	8016568 <dhcp_create_msg+0x28>
 8016556:	4b5f      	ldr	r3, [pc, #380]	; (80166d4 <dhcp_create_msg+0x194>)
 8016558:	f240 7269 	movw	r2, #1897	; 0x769
 801655c:	495e      	ldr	r1, [pc, #376]	; (80166d8 <dhcp_create_msg+0x198>)
 801655e:	485f      	ldr	r0, [pc, #380]	; (80166dc <dhcp_create_msg+0x19c>)
 8016560:	f002 fea2 	bl	80192a8 <iprintf>
 8016564:	2300      	movs	r3, #0
 8016566:	e0b1      	b.n	80166cc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d108      	bne.n	8016580 <dhcp_create_msg+0x40>
 801656e:	4b59      	ldr	r3, [pc, #356]	; (80166d4 <dhcp_create_msg+0x194>)
 8016570:	f240 726a 	movw	r2, #1898	; 0x76a
 8016574:	495a      	ldr	r1, [pc, #360]	; (80166e0 <dhcp_create_msg+0x1a0>)
 8016576:	4859      	ldr	r0, [pc, #356]	; (80166dc <dhcp_create_msg+0x19c>)
 8016578:	f002 fe96 	bl	80192a8 <iprintf>
 801657c:	2300      	movs	r3, #0
 801657e:	e0a5      	b.n	80166cc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016580:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016584:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016588:	2036      	movs	r0, #54	; 0x36
 801658a:	f7f7 fd55 	bl	800e038 <pbuf_alloc>
 801658e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d101      	bne.n	801659a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016596:	2300      	movs	r3, #0
 8016598:	e098      	b.n	80166cc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801659a:	69bb      	ldr	r3, [r7, #24]
 801659c:	895b      	ldrh	r3, [r3, #10]
 801659e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80165a2:	d206      	bcs.n	80165b2 <dhcp_create_msg+0x72>
 80165a4:	4b4b      	ldr	r3, [pc, #300]	; (80166d4 <dhcp_create_msg+0x194>)
 80165a6:	f240 7271 	movw	r2, #1905	; 0x771
 80165aa:	494e      	ldr	r1, [pc, #312]	; (80166e4 <dhcp_create_msg+0x1a4>)
 80165ac:	484b      	ldr	r0, [pc, #300]	; (80166dc <dhcp_create_msg+0x19c>)
 80165ae:	f002 fe7b 	bl	80192a8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80165b2:	79fb      	ldrb	r3, [r7, #7]
 80165b4:	2b03      	cmp	r3, #3
 80165b6:	d103      	bne.n	80165c0 <dhcp_create_msg+0x80>
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	795b      	ldrb	r3, [r3, #5]
 80165bc:	2b03      	cmp	r3, #3
 80165be:	d10d      	bne.n	80165dc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	799b      	ldrb	r3, [r3, #6]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d105      	bne.n	80165d4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80165c8:	f002 fe86 	bl	80192d8 <rand>
 80165cc:	4603      	mov	r3, r0
 80165ce:	461a      	mov	r2, r3
 80165d0:	4b45      	ldr	r3, [pc, #276]	; (80166e8 <dhcp_create_msg+0x1a8>)
 80165d2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80165d4:	4b44      	ldr	r3, [pc, #272]	; (80166e8 <dhcp_create_msg+0x1a8>)
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80165dc:	69bb      	ldr	r3, [r7, #24]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80165e2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80165e6:	2100      	movs	r1, #0
 80165e8:	6978      	ldr	r0, [r7, #20]
 80165ea:	f002 fdfa 	bl	80191e2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	2201      	movs	r2, #1
 80165f2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	2201      	movs	r2, #1
 80165f8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016600:	697b      	ldr	r3, [r7, #20]
 8016602:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016604:	68bb      	ldr	r3, [r7, #8]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	4618      	mov	r0, r3
 801660a:	f7f6 fc56 	bl	800ceba <lwip_htonl>
 801660e:	4602      	mov	r2, r0
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016614:	79fb      	ldrb	r3, [r7, #7]
 8016616:	2b08      	cmp	r3, #8
 8016618:	d010      	beq.n	801663c <dhcp_create_msg+0xfc>
 801661a:	79fb      	ldrb	r3, [r7, #7]
 801661c:	2b04      	cmp	r3, #4
 801661e:	d00d      	beq.n	801663c <dhcp_create_msg+0xfc>
 8016620:	79fb      	ldrb	r3, [r7, #7]
 8016622:	2b07      	cmp	r3, #7
 8016624:	d00a      	beq.n	801663c <dhcp_create_msg+0xfc>
 8016626:	79fb      	ldrb	r3, [r7, #7]
 8016628:	2b03      	cmp	r3, #3
 801662a:	d10c      	bne.n	8016646 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016630:	2b05      	cmp	r3, #5
 8016632:	d003      	beq.n	801663c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016634:	68bb      	ldr	r3, [r7, #8]
 8016636:	795b      	ldrb	r3, [r3, #5]
 8016638:	2b04      	cmp	r3, #4
 801663a:	d104      	bne.n	8016646 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	3304      	adds	r3, #4
 8016640:	681a      	ldr	r2, [r3, #0]
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016646:	2300      	movs	r3, #0
 8016648:	83fb      	strh	r3, [r7, #30]
 801664a:	e00c      	b.n	8016666 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801664c:	8bfa      	ldrh	r2, [r7, #30]
 801664e:	8bfb      	ldrh	r3, [r7, #30]
 8016650:	68f9      	ldr	r1, [r7, #12]
 8016652:	440a      	add	r2, r1
 8016654:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016658:	697a      	ldr	r2, [r7, #20]
 801665a:	4413      	add	r3, r2
 801665c:	460a      	mov	r2, r1
 801665e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016660:	8bfb      	ldrh	r3, [r7, #30]
 8016662:	3301      	adds	r3, #1
 8016664:	83fb      	strh	r3, [r7, #30]
 8016666:	8bfb      	ldrh	r3, [r7, #30]
 8016668:	2b05      	cmp	r3, #5
 801666a:	d9ef      	bls.n	801664c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	2200      	movs	r2, #0
 8016670:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016674:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016678:	2200      	movs	r2, #0
 801667a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801667e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016682:	2200      	movs	r2, #0
 8016684:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016688:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801668c:	2200      	movs	r2, #0
 801668e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016692:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801669c:	2301      	movs	r3, #1
 801669e:	2235      	movs	r2, #53	; 0x35
 80166a0:	2000      	movs	r0, #0
 80166a2:	f7ff fadb 	bl	8015c5c <dhcp_option>
 80166a6:	4603      	mov	r3, r0
 80166a8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80166b0:	79fa      	ldrb	r2, [r7, #7]
 80166b2:	8a7b      	ldrh	r3, [r7, #18]
 80166b4:	4618      	mov	r0, r3
 80166b6:	f7ff fb05 	bl	8015cc4 <dhcp_option_byte>
 80166ba:	4603      	mov	r3, r0
 80166bc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80166be:	683b      	ldr	r3, [r7, #0]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d002      	beq.n	80166ca <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	8a7a      	ldrh	r2, [r7, #18]
 80166c8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80166ca:	69bb      	ldr	r3, [r7, #24]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3720      	adds	r7, #32
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bd80      	pop	{r7, pc}
 80166d4:	0801c9d8 	.word	0x0801c9d8
 80166d8:	0801ccf8 	.word	0x0801ccf8
 80166dc:	0801ca38 	.word	0x0801ca38
 80166e0:	0801cd18 	.word	0x0801cd18
 80166e4:	0801cd38 	.word	0x0801cd38
 80166e8:	20004b64 	.word	0x20004b64

080166ec <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b084      	sub	sp, #16
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	60b9      	str	r1, [r7, #8]
 80166f6:	607a      	str	r2, [r7, #4]
 80166f8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80166fa:	89fb      	ldrh	r3, [r7, #14]
 80166fc:	1c5a      	adds	r2, r3, #1
 80166fe:	81fa      	strh	r2, [r7, #14]
 8016700:	461a      	mov	r2, r3
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	4413      	add	r3, r2
 8016706:	22ff      	movs	r2, #255	; 0xff
 8016708:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801670a:	e007      	b.n	801671c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801670c:	89fb      	ldrh	r3, [r7, #14]
 801670e:	1c5a      	adds	r2, r3, #1
 8016710:	81fa      	strh	r2, [r7, #14]
 8016712:	461a      	mov	r2, r3
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	4413      	add	r3, r2
 8016718:	2200      	movs	r2, #0
 801671a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801671c:	89fb      	ldrh	r3, [r7, #14]
 801671e:	2b43      	cmp	r3, #67	; 0x43
 8016720:	d904      	bls.n	801672c <dhcp_option_trailer+0x40>
 8016722:	89fb      	ldrh	r3, [r7, #14]
 8016724:	f003 0303 	and.w	r3, r3, #3
 8016728:	2b00      	cmp	r3, #0
 801672a:	d002      	beq.n	8016732 <dhcp_option_trailer+0x46>
 801672c:	89fb      	ldrh	r3, [r7, #14]
 801672e:	2b43      	cmp	r3, #67	; 0x43
 8016730:	d9ec      	bls.n	801670c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016732:	89fb      	ldrh	r3, [r7, #14]
 8016734:	33f0      	adds	r3, #240	; 0xf0
 8016736:	b29b      	uxth	r3, r3
 8016738:	4619      	mov	r1, r3
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f7f7 fdda 	bl	800e2f4 <pbuf_realloc>
}
 8016740:	bf00      	nop
 8016742:	3710      	adds	r7, #16
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016748:	b480      	push	{r7}
 801674a:	b085      	sub	sp, #20
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d017      	beq.n	8016786 <dhcp_supplied_address+0x3e>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801675a:	2b00      	cmp	r3, #0
 801675c:	d013      	beq.n	8016786 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016762:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	795b      	ldrb	r3, [r3, #5]
 8016768:	2b0a      	cmp	r3, #10
 801676a:	d007      	beq.n	801677c <dhcp_supplied_address+0x34>
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	795b      	ldrb	r3, [r3, #5]
 8016770:	2b05      	cmp	r3, #5
 8016772:	d003      	beq.n	801677c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016778:	2b04      	cmp	r3, #4
 801677a:	d101      	bne.n	8016780 <dhcp_supplied_address+0x38>
 801677c:	2301      	movs	r3, #1
 801677e:	e000      	b.n	8016782 <dhcp_supplied_address+0x3a>
 8016780:	2300      	movs	r3, #0
 8016782:	b2db      	uxtb	r3, r3
 8016784:	e000      	b.n	8016788 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016786:	2300      	movs	r3, #0
}
 8016788:	4618      	mov	r0, r3
 801678a:	3714      	adds	r7, #20
 801678c:	46bd      	mov	sp, r7
 801678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016792:	4770      	bx	lr

08016794 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801679c:	4915      	ldr	r1, [pc, #84]	; (80167f4 <etharp_free_entry+0x60>)
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	4613      	mov	r3, r2
 80167a2:	005b      	lsls	r3, r3, #1
 80167a4:	4413      	add	r3, r2
 80167a6:	00db      	lsls	r3, r3, #3
 80167a8:	440b      	add	r3, r1
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d013      	beq.n	80167d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80167b0:	4910      	ldr	r1, [pc, #64]	; (80167f4 <etharp_free_entry+0x60>)
 80167b2:	687a      	ldr	r2, [r7, #4]
 80167b4:	4613      	mov	r3, r2
 80167b6:	005b      	lsls	r3, r3, #1
 80167b8:	4413      	add	r3, r2
 80167ba:	00db      	lsls	r3, r3, #3
 80167bc:	440b      	add	r3, r1
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7f7 ff1d 	bl	800e600 <pbuf_free>
    arp_table[i].q = NULL;
 80167c6:	490b      	ldr	r1, [pc, #44]	; (80167f4 <etharp_free_entry+0x60>)
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	440b      	add	r3, r1
 80167d4:	2200      	movs	r2, #0
 80167d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80167d8:	4906      	ldr	r1, [pc, #24]	; (80167f4 <etharp_free_entry+0x60>)
 80167da:	687a      	ldr	r2, [r7, #4]
 80167dc:	4613      	mov	r3, r2
 80167de:	005b      	lsls	r3, r3, #1
 80167e0:	4413      	add	r3, r2
 80167e2:	00db      	lsls	r3, r3, #3
 80167e4:	440b      	add	r3, r1
 80167e6:	3314      	adds	r3, #20
 80167e8:	2200      	movs	r2, #0
 80167ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	20004b68 	.word	0x20004b68

080167f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167fe:	2300      	movs	r3, #0
 8016800:	607b      	str	r3, [r7, #4]
 8016802:	e096      	b.n	8016932 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016804:	494f      	ldr	r1, [pc, #316]	; (8016944 <etharp_tmr+0x14c>)
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	4613      	mov	r3, r2
 801680a:	005b      	lsls	r3, r3, #1
 801680c:	4413      	add	r3, r2
 801680e:	00db      	lsls	r3, r3, #3
 8016810:	440b      	add	r3, r1
 8016812:	3314      	adds	r3, #20
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016818:	78fb      	ldrb	r3, [r7, #3]
 801681a:	2b00      	cmp	r3, #0
 801681c:	f000 8086 	beq.w	801692c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016820:	4948      	ldr	r1, [pc, #288]	; (8016944 <etharp_tmr+0x14c>)
 8016822:	687a      	ldr	r2, [r7, #4]
 8016824:	4613      	mov	r3, r2
 8016826:	005b      	lsls	r3, r3, #1
 8016828:	4413      	add	r3, r2
 801682a:	00db      	lsls	r3, r3, #3
 801682c:	440b      	add	r3, r1
 801682e:	3312      	adds	r3, #18
 8016830:	881b      	ldrh	r3, [r3, #0]
 8016832:	3301      	adds	r3, #1
 8016834:	b298      	uxth	r0, r3
 8016836:	4943      	ldr	r1, [pc, #268]	; (8016944 <etharp_tmr+0x14c>)
 8016838:	687a      	ldr	r2, [r7, #4]
 801683a:	4613      	mov	r3, r2
 801683c:	005b      	lsls	r3, r3, #1
 801683e:	4413      	add	r3, r2
 8016840:	00db      	lsls	r3, r3, #3
 8016842:	440b      	add	r3, r1
 8016844:	3312      	adds	r3, #18
 8016846:	4602      	mov	r2, r0
 8016848:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801684a:	493e      	ldr	r1, [pc, #248]	; (8016944 <etharp_tmr+0x14c>)
 801684c:	687a      	ldr	r2, [r7, #4]
 801684e:	4613      	mov	r3, r2
 8016850:	005b      	lsls	r3, r3, #1
 8016852:	4413      	add	r3, r2
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	440b      	add	r3, r1
 8016858:	3312      	adds	r3, #18
 801685a:	881b      	ldrh	r3, [r3, #0]
 801685c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016860:	d215      	bcs.n	801688e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016862:	4938      	ldr	r1, [pc, #224]	; (8016944 <etharp_tmr+0x14c>)
 8016864:	687a      	ldr	r2, [r7, #4]
 8016866:	4613      	mov	r3, r2
 8016868:	005b      	lsls	r3, r3, #1
 801686a:	4413      	add	r3, r2
 801686c:	00db      	lsls	r3, r3, #3
 801686e:	440b      	add	r3, r1
 8016870:	3314      	adds	r3, #20
 8016872:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016874:	2b01      	cmp	r3, #1
 8016876:	d10e      	bne.n	8016896 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016878:	4932      	ldr	r1, [pc, #200]	; (8016944 <etharp_tmr+0x14c>)
 801687a:	687a      	ldr	r2, [r7, #4]
 801687c:	4613      	mov	r3, r2
 801687e:	005b      	lsls	r3, r3, #1
 8016880:	4413      	add	r3, r2
 8016882:	00db      	lsls	r3, r3, #3
 8016884:	440b      	add	r3, r1
 8016886:	3312      	adds	r3, #18
 8016888:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801688a:	2b04      	cmp	r3, #4
 801688c:	d903      	bls.n	8016896 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f7ff ff80 	bl	8016794 <etharp_free_entry>
 8016894:	e04a      	b.n	801692c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016896:	492b      	ldr	r1, [pc, #172]	; (8016944 <etharp_tmr+0x14c>)
 8016898:	687a      	ldr	r2, [r7, #4]
 801689a:	4613      	mov	r3, r2
 801689c:	005b      	lsls	r3, r3, #1
 801689e:	4413      	add	r3, r2
 80168a0:	00db      	lsls	r3, r3, #3
 80168a2:	440b      	add	r3, r1
 80168a4:	3314      	adds	r3, #20
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	2b03      	cmp	r3, #3
 80168aa:	d10a      	bne.n	80168c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80168ac:	4925      	ldr	r1, [pc, #148]	; (8016944 <etharp_tmr+0x14c>)
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	4613      	mov	r3, r2
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	440b      	add	r3, r1
 80168ba:	3314      	adds	r3, #20
 80168bc:	2204      	movs	r2, #4
 80168be:	701a      	strb	r2, [r3, #0]
 80168c0:	e034      	b.n	801692c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80168c2:	4920      	ldr	r1, [pc, #128]	; (8016944 <etharp_tmr+0x14c>)
 80168c4:	687a      	ldr	r2, [r7, #4]
 80168c6:	4613      	mov	r3, r2
 80168c8:	005b      	lsls	r3, r3, #1
 80168ca:	4413      	add	r3, r2
 80168cc:	00db      	lsls	r3, r3, #3
 80168ce:	440b      	add	r3, r1
 80168d0:	3314      	adds	r3, #20
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	2b04      	cmp	r3, #4
 80168d6:	d10a      	bne.n	80168ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80168d8:	491a      	ldr	r1, [pc, #104]	; (8016944 <etharp_tmr+0x14c>)
 80168da:	687a      	ldr	r2, [r7, #4]
 80168dc:	4613      	mov	r3, r2
 80168de:	005b      	lsls	r3, r3, #1
 80168e0:	4413      	add	r3, r2
 80168e2:	00db      	lsls	r3, r3, #3
 80168e4:	440b      	add	r3, r1
 80168e6:	3314      	adds	r3, #20
 80168e8:	2202      	movs	r2, #2
 80168ea:	701a      	strb	r2, [r3, #0]
 80168ec:	e01e      	b.n	801692c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80168ee:	4915      	ldr	r1, [pc, #84]	; (8016944 <etharp_tmr+0x14c>)
 80168f0:	687a      	ldr	r2, [r7, #4]
 80168f2:	4613      	mov	r3, r2
 80168f4:	005b      	lsls	r3, r3, #1
 80168f6:	4413      	add	r3, r2
 80168f8:	00db      	lsls	r3, r3, #3
 80168fa:	440b      	add	r3, r1
 80168fc:	3314      	adds	r3, #20
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b01      	cmp	r3, #1
 8016902:	d113      	bne.n	801692c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016904:	490f      	ldr	r1, [pc, #60]	; (8016944 <etharp_tmr+0x14c>)
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	4613      	mov	r3, r2
 801690a:	005b      	lsls	r3, r3, #1
 801690c:	4413      	add	r3, r2
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	440b      	add	r3, r1
 8016912:	3308      	adds	r3, #8
 8016914:	6818      	ldr	r0, [r3, #0]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	4613      	mov	r3, r2
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	4413      	add	r3, r2
 801691e:	00db      	lsls	r3, r3, #3
 8016920:	4a08      	ldr	r2, [pc, #32]	; (8016944 <etharp_tmr+0x14c>)
 8016922:	4413      	add	r3, r2
 8016924:	3304      	adds	r3, #4
 8016926:	4619      	mov	r1, r3
 8016928:	f000 fe72 	bl	8017610 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	3301      	adds	r3, #1
 8016930:	607b      	str	r3, [r7, #4]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	2b09      	cmp	r3, #9
 8016936:	f77f af65 	ble.w	8016804 <etharp_tmr+0xc>
      }
    }
  }
}
 801693a:	bf00      	nop
 801693c:	bf00      	nop
 801693e:	3708      	adds	r7, #8
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	20004b68 	.word	0x20004b68

08016948 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08a      	sub	sp, #40	; 0x28
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	460b      	mov	r3, r1
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016956:	230a      	movs	r3, #10
 8016958:	84fb      	strh	r3, [r7, #38]	; 0x26
 801695a:	230a      	movs	r3, #10
 801695c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801695e:	230a      	movs	r3, #10
 8016960:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016962:	2300      	movs	r3, #0
 8016964:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016966:	230a      	movs	r3, #10
 8016968:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801696a:	2300      	movs	r3, #0
 801696c:	83bb      	strh	r3, [r7, #28]
 801696e:	2300      	movs	r3, #0
 8016970:	837b      	strh	r3, [r7, #26]
 8016972:	2300      	movs	r3, #0
 8016974:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016976:	2300      	movs	r3, #0
 8016978:	843b      	strh	r3, [r7, #32]
 801697a:	e0ae      	b.n	8016ada <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801697c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016980:	49a6      	ldr	r1, [pc, #664]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016982:	4613      	mov	r3, r2
 8016984:	005b      	lsls	r3, r3, #1
 8016986:	4413      	add	r3, r2
 8016988:	00db      	lsls	r3, r3, #3
 801698a:	440b      	add	r3, r1
 801698c:	3314      	adds	r3, #20
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016996:	2b0a      	cmp	r3, #10
 8016998:	d105      	bne.n	80169a6 <etharp_find_entry+0x5e>
 801699a:	7dfb      	ldrb	r3, [r7, #23]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d102      	bne.n	80169a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80169a0:	8c3b      	ldrh	r3, [r7, #32]
 80169a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80169a4:	e095      	b.n	8016ad2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80169a6:	7dfb      	ldrb	r3, [r7, #23]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	f000 8092 	beq.w	8016ad2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80169ae:	7dfb      	ldrb	r3, [r7, #23]
 80169b0:	2b01      	cmp	r3, #1
 80169b2:	d009      	beq.n	80169c8 <etharp_find_entry+0x80>
 80169b4:	7dfb      	ldrb	r3, [r7, #23]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d806      	bhi.n	80169c8 <etharp_find_entry+0x80>
 80169ba:	4b99      	ldr	r3, [pc, #612]	; (8016c20 <etharp_find_entry+0x2d8>)
 80169bc:	f240 1223 	movw	r2, #291	; 0x123
 80169c0:	4998      	ldr	r1, [pc, #608]	; (8016c24 <etharp_find_entry+0x2dc>)
 80169c2:	4899      	ldr	r0, [pc, #612]	; (8016c28 <etharp_find_entry+0x2e0>)
 80169c4:	f002 fc70 	bl	80192a8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d020      	beq.n	8016a10 <etharp_find_entry+0xc8>
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	6819      	ldr	r1, [r3, #0]
 80169d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169d6:	4891      	ldr	r0, [pc, #580]	; (8016c1c <etharp_find_entry+0x2d4>)
 80169d8:	4613      	mov	r3, r2
 80169da:	005b      	lsls	r3, r3, #1
 80169dc:	4413      	add	r3, r2
 80169de:	00db      	lsls	r3, r3, #3
 80169e0:	4403      	add	r3, r0
 80169e2:	3304      	adds	r3, #4
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	4299      	cmp	r1, r3
 80169e8:	d112      	bne.n	8016a10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d00c      	beq.n	8016a0a <etharp_find_entry+0xc2>
 80169f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169f4:	4989      	ldr	r1, [pc, #548]	; (8016c1c <etharp_find_entry+0x2d4>)
 80169f6:	4613      	mov	r3, r2
 80169f8:	005b      	lsls	r3, r3, #1
 80169fa:	4413      	add	r3, r2
 80169fc:	00db      	lsls	r3, r3, #3
 80169fe:	440b      	add	r3, r1
 8016a00:	3308      	adds	r3, #8
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	687a      	ldr	r2, [r7, #4]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d102      	bne.n	8016a10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a0e:	e100      	b.n	8016c12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016a10:	7dfb      	ldrb	r3, [r7, #23]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d140      	bne.n	8016a98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a1a:	4980      	ldr	r1, [pc, #512]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	4413      	add	r3, r2
 8016a22:	00db      	lsls	r3, r3, #3
 8016a24:	440b      	add	r3, r1
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d01a      	beq.n	8016a62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a30:	497a      	ldr	r1, [pc, #488]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016a32:	4613      	mov	r3, r2
 8016a34:	005b      	lsls	r3, r3, #1
 8016a36:	4413      	add	r3, r2
 8016a38:	00db      	lsls	r3, r3, #3
 8016a3a:	440b      	add	r3, r1
 8016a3c:	3312      	adds	r3, #18
 8016a3e:	881b      	ldrh	r3, [r3, #0]
 8016a40:	8bba      	ldrh	r2, [r7, #28]
 8016a42:	429a      	cmp	r2, r3
 8016a44:	d845      	bhi.n	8016ad2 <etharp_find_entry+0x18a>
            old_queue = i;
 8016a46:	8c3b      	ldrh	r3, [r7, #32]
 8016a48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016a4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a4e:	4973      	ldr	r1, [pc, #460]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016a50:	4613      	mov	r3, r2
 8016a52:	005b      	lsls	r3, r3, #1
 8016a54:	4413      	add	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	440b      	add	r3, r1
 8016a5a:	3312      	adds	r3, #18
 8016a5c:	881b      	ldrh	r3, [r3, #0]
 8016a5e:	83bb      	strh	r3, [r7, #28]
 8016a60:	e037      	b.n	8016ad2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016a62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a66:	496d      	ldr	r1, [pc, #436]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016a68:	4613      	mov	r3, r2
 8016a6a:	005b      	lsls	r3, r3, #1
 8016a6c:	4413      	add	r3, r2
 8016a6e:	00db      	lsls	r3, r3, #3
 8016a70:	440b      	add	r3, r1
 8016a72:	3312      	adds	r3, #18
 8016a74:	881b      	ldrh	r3, [r3, #0]
 8016a76:	8b7a      	ldrh	r2, [r7, #26]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	d82a      	bhi.n	8016ad2 <etharp_find_entry+0x18a>
            old_pending = i;
 8016a7c:	8c3b      	ldrh	r3, [r7, #32]
 8016a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016a80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a84:	4965      	ldr	r1, [pc, #404]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016a86:	4613      	mov	r3, r2
 8016a88:	005b      	lsls	r3, r3, #1
 8016a8a:	4413      	add	r3, r2
 8016a8c:	00db      	lsls	r3, r3, #3
 8016a8e:	440b      	add	r3, r1
 8016a90:	3312      	adds	r3, #18
 8016a92:	881b      	ldrh	r3, [r3, #0]
 8016a94:	837b      	strh	r3, [r7, #26]
 8016a96:	e01c      	b.n	8016ad2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016a98:	7dfb      	ldrb	r3, [r7, #23]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d919      	bls.n	8016ad2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aa2:	495e      	ldr	r1, [pc, #376]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016aa4:	4613      	mov	r3, r2
 8016aa6:	005b      	lsls	r3, r3, #1
 8016aa8:	4413      	add	r3, r2
 8016aaa:	00db      	lsls	r3, r3, #3
 8016aac:	440b      	add	r3, r1
 8016aae:	3312      	adds	r3, #18
 8016ab0:	881b      	ldrh	r3, [r3, #0]
 8016ab2:	8b3a      	ldrh	r2, [r7, #24]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d80c      	bhi.n	8016ad2 <etharp_find_entry+0x18a>
            old_stable = i;
 8016ab8:	8c3b      	ldrh	r3, [r7, #32]
 8016aba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ac0:	4956      	ldr	r1, [pc, #344]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	4413      	add	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	440b      	add	r3, r1
 8016acc:	3312      	adds	r3, #18
 8016ace:	881b      	ldrh	r3, [r3, #0]
 8016ad0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ad2:	8c3b      	ldrh	r3, [r7, #32]
 8016ad4:	3301      	adds	r3, #1
 8016ad6:	b29b      	uxth	r3, r3
 8016ad8:	843b      	strh	r3, [r7, #32]
 8016ada:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ade:	2b09      	cmp	r3, #9
 8016ae0:	f77f af4c 	ble.w	801697c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016ae4:	7afb      	ldrb	r3, [r7, #11]
 8016ae6:	f003 0302 	and.w	r3, r3, #2
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d108      	bne.n	8016b00 <etharp_find_entry+0x1b8>
 8016aee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016af2:	2b0a      	cmp	r3, #10
 8016af4:	d107      	bne.n	8016b06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016af6:	7afb      	ldrb	r3, [r7, #11]
 8016af8:	f003 0301 	and.w	r3, r3, #1
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d102      	bne.n	8016b06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016b00:	f04f 33ff 	mov.w	r3, #4294967295
 8016b04:	e085      	b.n	8016c12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016b06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016b0a:	2b09      	cmp	r3, #9
 8016b0c:	dc02      	bgt.n	8016b14 <etharp_find_entry+0x1cc>
    i = empty;
 8016b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b10:	843b      	strh	r3, [r7, #32]
 8016b12:	e039      	b.n	8016b88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016b14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016b18:	2b09      	cmp	r3, #9
 8016b1a:	dc14      	bgt.n	8016b46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b24:	493d      	ldr	r1, [pc, #244]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016b26:	4613      	mov	r3, r2
 8016b28:	005b      	lsls	r3, r3, #1
 8016b2a:	4413      	add	r3, r2
 8016b2c:	00db      	lsls	r3, r3, #3
 8016b2e:	440b      	add	r3, r1
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d018      	beq.n	8016b68 <etharp_find_entry+0x220>
 8016b36:	4b3a      	ldr	r3, [pc, #232]	; (8016c20 <etharp_find_entry+0x2d8>)
 8016b38:	f240 126d 	movw	r2, #365	; 0x16d
 8016b3c:	493b      	ldr	r1, [pc, #236]	; (8016c2c <etharp_find_entry+0x2e4>)
 8016b3e:	483a      	ldr	r0, [pc, #232]	; (8016c28 <etharp_find_entry+0x2e0>)
 8016b40:	f002 fbb2 	bl	80192a8 <iprintf>
 8016b44:	e010      	b.n	8016b68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016b46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016b4a:	2b09      	cmp	r3, #9
 8016b4c:	dc02      	bgt.n	8016b54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016b50:	843b      	strh	r3, [r7, #32]
 8016b52:	e009      	b.n	8016b68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016b54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016b58:	2b09      	cmp	r3, #9
 8016b5a:	dc02      	bgt.n	8016b62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016b5c:	8bfb      	ldrh	r3, [r7, #30]
 8016b5e:	843b      	strh	r3, [r7, #32]
 8016b60:	e002      	b.n	8016b68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016b62:	f04f 33ff 	mov.w	r3, #4294967295
 8016b66:	e054      	b.n	8016c12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b6c:	2b09      	cmp	r3, #9
 8016b6e:	dd06      	ble.n	8016b7e <etharp_find_entry+0x236>
 8016b70:	4b2b      	ldr	r3, [pc, #172]	; (8016c20 <etharp_find_entry+0x2d8>)
 8016b72:	f240 127f 	movw	r2, #383	; 0x17f
 8016b76:	492e      	ldr	r1, [pc, #184]	; (8016c30 <etharp_find_entry+0x2e8>)
 8016b78:	482b      	ldr	r0, [pc, #172]	; (8016c28 <etharp_find_entry+0x2e0>)
 8016b7a:	f002 fb95 	bl	80192a8 <iprintf>
    etharp_free_entry(i);
 8016b7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7ff fe06 	bl	8016794 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b8c:	2b09      	cmp	r3, #9
 8016b8e:	dd06      	ble.n	8016b9e <etharp_find_entry+0x256>
 8016b90:	4b23      	ldr	r3, [pc, #140]	; (8016c20 <etharp_find_entry+0x2d8>)
 8016b92:	f240 1283 	movw	r2, #387	; 0x183
 8016b96:	4926      	ldr	r1, [pc, #152]	; (8016c30 <etharp_find_entry+0x2e8>)
 8016b98:	4823      	ldr	r0, [pc, #140]	; (8016c28 <etharp_find_entry+0x2e0>)
 8016b9a:	f002 fb85 	bl	80192a8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ba2:	491e      	ldr	r1, [pc, #120]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	005b      	lsls	r3, r3, #1
 8016ba8:	4413      	add	r3, r2
 8016baa:	00db      	lsls	r3, r3, #3
 8016bac:	440b      	add	r3, r1
 8016bae:	3314      	adds	r3, #20
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d006      	beq.n	8016bc4 <etharp_find_entry+0x27c>
 8016bb6:	4b1a      	ldr	r3, [pc, #104]	; (8016c20 <etharp_find_entry+0x2d8>)
 8016bb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016bbc:	491d      	ldr	r1, [pc, #116]	; (8016c34 <etharp_find_entry+0x2ec>)
 8016bbe:	481a      	ldr	r0, [pc, #104]	; (8016c28 <etharp_find_entry+0x2e0>)
 8016bc0:	f002 fb72 	bl	80192a8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d00b      	beq.n	8016be2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016bca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	6819      	ldr	r1, [r3, #0]
 8016bd2:	4812      	ldr	r0, [pc, #72]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016bd4:	4613      	mov	r3, r2
 8016bd6:	005b      	lsls	r3, r3, #1
 8016bd8:	4413      	add	r3, r2
 8016bda:	00db      	lsls	r3, r3, #3
 8016bdc:	4403      	add	r3, r0
 8016bde:	3304      	adds	r3, #4
 8016be0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016be2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016be6:	490d      	ldr	r1, [pc, #52]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016be8:	4613      	mov	r3, r2
 8016bea:	005b      	lsls	r3, r3, #1
 8016bec:	4413      	add	r3, r2
 8016bee:	00db      	lsls	r3, r3, #3
 8016bf0:	440b      	add	r3, r1
 8016bf2:	3312      	adds	r3, #18
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016bfc:	4907      	ldr	r1, [pc, #28]	; (8016c1c <etharp_find_entry+0x2d4>)
 8016bfe:	4613      	mov	r3, r2
 8016c00:	005b      	lsls	r3, r3, #1
 8016c02:	4413      	add	r3, r2
 8016c04:	00db      	lsls	r3, r3, #3
 8016c06:	440b      	add	r3, r1
 8016c08:	3308      	adds	r3, #8
 8016c0a:	687a      	ldr	r2, [r7, #4]
 8016c0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016c0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016c12:	4618      	mov	r0, r3
 8016c14:	3728      	adds	r7, #40	; 0x28
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20004b68 	.word	0x20004b68
 8016c20:	0801cd78 	.word	0x0801cd78
 8016c24:	0801cdb0 	.word	0x0801cdb0
 8016c28:	0801cdf0 	.word	0x0801cdf0
 8016c2c:	0801ce18 	.word	0x0801ce18
 8016c30:	0801ce30 	.word	0x0801ce30
 8016c34:	0801ce44 	.word	0x0801ce44

08016c38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b088      	sub	sp, #32
 8016c3c:	af02      	add	r7, sp, #8
 8016c3e:	60f8      	str	r0, [r7, #12]
 8016c40:	60b9      	str	r1, [r7, #8]
 8016c42:	607a      	str	r2, [r7, #4]
 8016c44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c4c:	2b06      	cmp	r3, #6
 8016c4e:	d006      	beq.n	8016c5e <etharp_update_arp_entry+0x26>
 8016c50:	4b48      	ldr	r3, [pc, #288]	; (8016d74 <etharp_update_arp_entry+0x13c>)
 8016c52:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016c56:	4948      	ldr	r1, [pc, #288]	; (8016d78 <etharp_update_arp_entry+0x140>)
 8016c58:	4848      	ldr	r0, [pc, #288]	; (8016d7c <etharp_update_arp_entry+0x144>)
 8016c5a:	f002 fb25 	bl	80192a8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d012      	beq.n	8016c8a <etharp_update_arp_entry+0x52>
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d00e      	beq.n	8016c8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	68f9      	ldr	r1, [r7, #12]
 8016c72:	4618      	mov	r0, r3
 8016c74:	f001 f920 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 8016c78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d105      	bne.n	8016c8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c86:	2be0      	cmp	r3, #224	; 0xe0
 8016c88:	d102      	bne.n	8016c90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c8a:	f06f 030f 	mvn.w	r3, #15
 8016c8e:	e06c      	b.n	8016d6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016c90:	78fb      	ldrb	r3, [r7, #3]
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	4619      	mov	r1, r3
 8016c96:	68b8      	ldr	r0, [r7, #8]
 8016c98:	f7ff fe56 	bl	8016948 <etharp_find_entry>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016ca0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	da02      	bge.n	8016cae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016ca8:	8afb      	ldrh	r3, [r7, #22]
 8016caa:	b25b      	sxtb	r3, r3
 8016cac:	e05d      	b.n	8016d6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016cae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cb2:	4933      	ldr	r1, [pc, #204]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016cb4:	4613      	mov	r3, r2
 8016cb6:	005b      	lsls	r3, r3, #1
 8016cb8:	4413      	add	r3, r2
 8016cba:	00db      	lsls	r3, r3, #3
 8016cbc:	440b      	add	r3, r1
 8016cbe:	3314      	adds	r3, #20
 8016cc0:	2202      	movs	r2, #2
 8016cc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016cc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cc8:	492d      	ldr	r1, [pc, #180]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016cca:	4613      	mov	r3, r2
 8016ccc:	005b      	lsls	r3, r3, #1
 8016cce:	4413      	add	r3, r2
 8016cd0:	00db      	lsls	r3, r3, #3
 8016cd2:	440b      	add	r3, r1
 8016cd4:	3308      	adds	r3, #8
 8016cd6:	68fa      	ldr	r2, [r7, #12]
 8016cd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016cda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cde:	4613      	mov	r3, r2
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4413      	add	r3, r2
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	3308      	adds	r3, #8
 8016ce8:	4a25      	ldr	r2, [pc, #148]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016cea:	4413      	add	r3, r2
 8016cec:	3304      	adds	r3, #4
 8016cee:	2206      	movs	r2, #6
 8016cf0:	6879      	ldr	r1, [r7, #4]
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f002 fa67 	bl	80191c6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cfc:	4920      	ldr	r1, [pc, #128]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016cfe:	4613      	mov	r3, r2
 8016d00:	005b      	lsls	r3, r3, #1
 8016d02:	4413      	add	r3, r2
 8016d04:	00db      	lsls	r3, r3, #3
 8016d06:	440b      	add	r3, r1
 8016d08:	3312      	adds	r3, #18
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016d0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d12:	491b      	ldr	r1, [pc, #108]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016d14:	4613      	mov	r3, r2
 8016d16:	005b      	lsls	r3, r3, #1
 8016d18:	4413      	add	r3, r2
 8016d1a:	00db      	lsls	r3, r3, #3
 8016d1c:	440b      	add	r3, r1
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d021      	beq.n	8016d68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d28:	4915      	ldr	r1, [pc, #84]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	005b      	lsls	r3, r3, #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	00db      	lsls	r3, r3, #3
 8016d32:	440b      	add	r3, r1
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016d38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d3c:	4910      	ldr	r1, [pc, #64]	; (8016d80 <etharp_update_arp_entry+0x148>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	440b      	add	r3, r1
 8016d48:	2200      	movs	r2, #0
 8016d4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d56:	9300      	str	r3, [sp, #0]
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6939      	ldr	r1, [r7, #16]
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f001 ffb3 	bl	8018cc8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016d62:	6938      	ldr	r0, [r7, #16]
 8016d64:	f7f7 fc4c 	bl	800e600 <pbuf_free>
  }
  return ERR_OK;
 8016d68:	2300      	movs	r3, #0
}
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	3718      	adds	r7, #24
 8016d6e:	46bd      	mov	sp, r7
 8016d70:	bd80      	pop	{r7, pc}
 8016d72:	bf00      	nop
 8016d74:	0801cd78 	.word	0x0801cd78
 8016d78:	0801ce70 	.word	0x0801ce70
 8016d7c:	0801cdf0 	.word	0x0801cdf0
 8016d80:	20004b68 	.word	0x20004b68

08016d84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016d84:	b580      	push	{r7, lr}
 8016d86:	b084      	sub	sp, #16
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	60fb      	str	r3, [r7, #12]
 8016d90:	e01e      	b.n	8016dd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016d92:	4913      	ldr	r1, [pc, #76]	; (8016de0 <etharp_cleanup_netif+0x5c>)
 8016d94:	68fa      	ldr	r2, [r7, #12]
 8016d96:	4613      	mov	r3, r2
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	4413      	add	r3, r2
 8016d9c:	00db      	lsls	r3, r3, #3
 8016d9e:	440b      	add	r3, r1
 8016da0:	3314      	adds	r3, #20
 8016da2:	781b      	ldrb	r3, [r3, #0]
 8016da4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016da6:	7afb      	ldrb	r3, [r7, #11]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d00e      	beq.n	8016dca <etharp_cleanup_netif+0x46>
 8016dac:	490c      	ldr	r1, [pc, #48]	; (8016de0 <etharp_cleanup_netif+0x5c>)
 8016dae:	68fa      	ldr	r2, [r7, #12]
 8016db0:	4613      	mov	r3, r2
 8016db2:	005b      	lsls	r3, r3, #1
 8016db4:	4413      	add	r3, r2
 8016db6:	00db      	lsls	r3, r3, #3
 8016db8:	440b      	add	r3, r1
 8016dba:	3308      	adds	r3, #8
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	687a      	ldr	r2, [r7, #4]
 8016dc0:	429a      	cmp	r2, r3
 8016dc2:	d102      	bne.n	8016dca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016dc4:	68f8      	ldr	r0, [r7, #12]
 8016dc6:	f7ff fce5 	bl	8016794 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	3301      	adds	r3, #1
 8016dce:	60fb      	str	r3, [r7, #12]
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	2b09      	cmp	r3, #9
 8016dd4:	dddd      	ble.n	8016d92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016dd6:	bf00      	nop
 8016dd8:	bf00      	nop
 8016dda:	3710      	adds	r7, #16
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd80      	pop	{r7, pc}
 8016de0:	20004b68 	.word	0x20004b68

08016de4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016de4:	b5b0      	push	{r4, r5, r7, lr}
 8016de6:	b08a      	sub	sp, #40	; 0x28
 8016de8:	af04      	add	r7, sp, #16
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d107      	bne.n	8016e04 <etharp_input+0x20>
 8016df4:	4b3f      	ldr	r3, [pc, #252]	; (8016ef4 <etharp_input+0x110>)
 8016df6:	f240 228a 	movw	r2, #650	; 0x28a
 8016dfa:	493f      	ldr	r1, [pc, #252]	; (8016ef8 <etharp_input+0x114>)
 8016dfc:	483f      	ldr	r0, [pc, #252]	; (8016efc <etharp_input+0x118>)
 8016dfe:	f002 fa53 	bl	80192a8 <iprintf>
 8016e02:	e074      	b.n	8016eee <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016e0a:	693b      	ldr	r3, [r7, #16]
 8016e0c:	881b      	ldrh	r3, [r3, #0]
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e14:	d10c      	bne.n	8016e30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016e1a:	2b06      	cmp	r3, #6
 8016e1c:	d108      	bne.n	8016e30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016e1e:	693b      	ldr	r3, [r7, #16]
 8016e20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016e22:	2b04      	cmp	r3, #4
 8016e24:	d104      	bne.n	8016e30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	885b      	ldrh	r3, [r3, #2]
 8016e2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016e2c:	2b08      	cmp	r3, #8
 8016e2e:	d003      	beq.n	8016e38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7f7 fbe5 	bl	800e600 <pbuf_free>
    return;
 8016e36:	e05a      	b.n	8016eee <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016e38:	693b      	ldr	r3, [r7, #16]
 8016e3a:	330e      	adds	r3, #14
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	3318      	adds	r3, #24
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	3304      	adds	r3, #4
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d102      	bne.n	8016e58 <etharp_input+0x74>
    for_us = 0;
 8016e52:	2300      	movs	r3, #0
 8016e54:	75fb      	strb	r3, [r7, #23]
 8016e56:	e009      	b.n	8016e6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016e58:	68ba      	ldr	r2, [r7, #8]
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	3304      	adds	r3, #4
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	bf0c      	ite	eq
 8016e64:	2301      	moveq	r3, #1
 8016e66:	2300      	movne	r3, #0
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016e6c:	693b      	ldr	r3, [r7, #16]
 8016e6e:	f103 0208 	add.w	r2, r3, #8
 8016e72:	7dfb      	ldrb	r3, [r7, #23]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <etharp_input+0x98>
 8016e78:	2301      	movs	r3, #1
 8016e7a:	e000      	b.n	8016e7e <etharp_input+0x9a>
 8016e7c:	2302      	movs	r3, #2
 8016e7e:	f107 010c 	add.w	r1, r7, #12
 8016e82:	6838      	ldr	r0, [r7, #0]
 8016e84:	f7ff fed8 	bl	8016c38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	88db      	ldrh	r3, [r3, #6]
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e92:	d003      	beq.n	8016e9c <etharp_input+0xb8>
 8016e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e98:	d01e      	beq.n	8016ed8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016e9a:	e025      	b.n	8016ee8 <etharp_input+0x104>
      if (for_us) {
 8016e9c:	7dfb      	ldrb	r3, [r7, #23]
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d021      	beq.n	8016ee6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016eb8:	693a      	ldr	r2, [r7, #16]
 8016eba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016ebc:	2102      	movs	r1, #2
 8016ebe:	9103      	str	r1, [sp, #12]
 8016ec0:	f107 010c 	add.w	r1, r7, #12
 8016ec4:	9102      	str	r1, [sp, #8]
 8016ec6:	9201      	str	r2, [sp, #4]
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	462b      	mov	r3, r5
 8016ecc:	4622      	mov	r2, r4
 8016ece:	4601      	mov	r1, r0
 8016ed0:	6838      	ldr	r0, [r7, #0]
 8016ed2:	f000 faef 	bl	80174b4 <etharp_raw>
      break;
 8016ed6:	e006      	b.n	8016ee6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016ed8:	f107 030c 	add.w	r3, r7, #12
 8016edc:	4619      	mov	r1, r3
 8016ede:	6838      	ldr	r0, [r7, #0]
 8016ee0:	f7fe f9fc 	bl	80152dc <dhcp_arp_reply>
      break;
 8016ee4:	e000      	b.n	8016ee8 <etharp_input+0x104>
      break;
 8016ee6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7f7 fb89 	bl	800e600 <pbuf_free>
}
 8016eee:	3718      	adds	r7, #24
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8016ef4:	0801cd78 	.word	0x0801cd78
 8016ef8:	0801cec8 	.word	0x0801cec8
 8016efc:	0801cdf0 	.word	0x0801cdf0

08016f00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af02      	add	r7, sp, #8
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016f0e:	79fa      	ldrb	r2, [r7, #7]
 8016f10:	4944      	ldr	r1, [pc, #272]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f12:	4613      	mov	r3, r2
 8016f14:	005b      	lsls	r3, r3, #1
 8016f16:	4413      	add	r3, r2
 8016f18:	00db      	lsls	r3, r3, #3
 8016f1a:	440b      	add	r3, r1
 8016f1c:	3314      	adds	r3, #20
 8016f1e:	781b      	ldrb	r3, [r3, #0]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	d806      	bhi.n	8016f32 <etharp_output_to_arp_index+0x32>
 8016f24:	4b40      	ldr	r3, [pc, #256]	; (8017028 <etharp_output_to_arp_index+0x128>)
 8016f26:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016f2a:	4940      	ldr	r1, [pc, #256]	; (801702c <etharp_output_to_arp_index+0x12c>)
 8016f2c:	4840      	ldr	r0, [pc, #256]	; (8017030 <etharp_output_to_arp_index+0x130>)
 8016f2e:	f002 f9bb 	bl	80192a8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016f32:	79fa      	ldrb	r2, [r7, #7]
 8016f34:	493b      	ldr	r1, [pc, #236]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	440b      	add	r3, r1
 8016f40:	3314      	adds	r3, #20
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d153      	bne.n	8016ff0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016f48:	79fa      	ldrb	r2, [r7, #7]
 8016f4a:	4936      	ldr	r1, [pc, #216]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	005b      	lsls	r3, r3, #1
 8016f50:	4413      	add	r3, r2
 8016f52:	00db      	lsls	r3, r3, #3
 8016f54:	440b      	add	r3, r1
 8016f56:	3312      	adds	r3, #18
 8016f58:	881b      	ldrh	r3, [r3, #0]
 8016f5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016f5e:	d919      	bls.n	8016f94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016f60:	79fa      	ldrb	r2, [r7, #7]
 8016f62:	4613      	mov	r3, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	4413      	add	r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	4a2e      	ldr	r2, [pc, #184]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f6c:	4413      	add	r3, r2
 8016f6e:	3304      	adds	r3, #4
 8016f70:	4619      	mov	r1, r3
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f000 fb4c 	bl	8017610 <etharp_request>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d138      	bne.n	8016ff0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f7e:	79fa      	ldrb	r2, [r7, #7]
 8016f80:	4928      	ldr	r1, [pc, #160]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f82:	4613      	mov	r3, r2
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	4413      	add	r3, r2
 8016f88:	00db      	lsls	r3, r3, #3
 8016f8a:	440b      	add	r3, r1
 8016f8c:	3314      	adds	r3, #20
 8016f8e:	2203      	movs	r2, #3
 8016f90:	701a      	strb	r2, [r3, #0]
 8016f92:	e02d      	b.n	8016ff0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016f94:	79fa      	ldrb	r2, [r7, #7]
 8016f96:	4923      	ldr	r1, [pc, #140]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016f98:	4613      	mov	r3, r2
 8016f9a:	005b      	lsls	r3, r3, #1
 8016f9c:	4413      	add	r3, r2
 8016f9e:	00db      	lsls	r3, r3, #3
 8016fa0:	440b      	add	r3, r1
 8016fa2:	3312      	adds	r3, #18
 8016fa4:	881b      	ldrh	r3, [r3, #0]
 8016fa6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016faa:	d321      	bcc.n	8016ff0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016fac:	79fa      	ldrb	r2, [r7, #7]
 8016fae:	4613      	mov	r3, r2
 8016fb0:	005b      	lsls	r3, r3, #1
 8016fb2:	4413      	add	r3, r2
 8016fb4:	00db      	lsls	r3, r3, #3
 8016fb6:	4a1b      	ldr	r2, [pc, #108]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016fb8:	4413      	add	r3, r2
 8016fba:	1d19      	adds	r1, r3, #4
 8016fbc:	79fa      	ldrb	r2, [r7, #7]
 8016fbe:	4613      	mov	r3, r2
 8016fc0:	005b      	lsls	r3, r3, #1
 8016fc2:	4413      	add	r3, r2
 8016fc4:	00db      	lsls	r3, r3, #3
 8016fc6:	3308      	adds	r3, #8
 8016fc8:	4a16      	ldr	r2, [pc, #88]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016fca:	4413      	add	r3, r2
 8016fcc:	3304      	adds	r3, #4
 8016fce:	461a      	mov	r2, r3
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f000 fafb 	bl	80175cc <etharp_request_dst>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d109      	bne.n	8016ff0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016fdc:	79fa      	ldrb	r2, [r7, #7]
 8016fde:	4911      	ldr	r1, [pc, #68]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8016fe0:	4613      	mov	r3, r2
 8016fe2:	005b      	lsls	r3, r3, #1
 8016fe4:	4413      	add	r3, r2
 8016fe6:	00db      	lsls	r3, r3, #3
 8016fe8:	440b      	add	r3, r1
 8016fea:	3314      	adds	r3, #20
 8016fec:	2203      	movs	r2, #3
 8016fee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016ff6:	79fa      	ldrb	r2, [r7, #7]
 8016ff8:	4613      	mov	r3, r2
 8016ffa:	005b      	lsls	r3, r3, #1
 8016ffc:	4413      	add	r3, r2
 8016ffe:	00db      	lsls	r3, r3, #3
 8017000:	3308      	adds	r3, #8
 8017002:	4a08      	ldr	r2, [pc, #32]	; (8017024 <etharp_output_to_arp_index+0x124>)
 8017004:	4413      	add	r3, r2
 8017006:	3304      	adds	r3, #4
 8017008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801700c:	9200      	str	r2, [sp, #0]
 801700e:	460a      	mov	r2, r1
 8017010:	68b9      	ldr	r1, [r7, #8]
 8017012:	68f8      	ldr	r0, [r7, #12]
 8017014:	f001 fe58 	bl	8018cc8 <ethernet_output>
 8017018:	4603      	mov	r3, r0
}
 801701a:	4618      	mov	r0, r3
 801701c:	3710      	adds	r7, #16
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	20004b68 	.word	0x20004b68
 8017028:	0801cd78 	.word	0x0801cd78
 801702c:	0801cee8 	.word	0x0801cee8
 8017030:	0801cdf0 	.word	0x0801cdf0

08017034 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b08a      	sub	sp, #40	; 0x28
 8017038:	af02      	add	r7, sp, #8
 801703a:	60f8      	str	r0, [r7, #12]
 801703c:	60b9      	str	r1, [r7, #8]
 801703e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d106      	bne.n	8017058 <etharp_output+0x24>
 801704a:	4b73      	ldr	r3, [pc, #460]	; (8017218 <etharp_output+0x1e4>)
 801704c:	f240 321e 	movw	r2, #798	; 0x31e
 8017050:	4972      	ldr	r1, [pc, #456]	; (801721c <etharp_output+0x1e8>)
 8017052:	4873      	ldr	r0, [pc, #460]	; (8017220 <etharp_output+0x1ec>)
 8017054:	f002 f928 	bl	80192a8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d106      	bne.n	801706c <etharp_output+0x38>
 801705e:	4b6e      	ldr	r3, [pc, #440]	; (8017218 <etharp_output+0x1e4>)
 8017060:	f240 321f 	movw	r2, #799	; 0x31f
 8017064:	496f      	ldr	r1, [pc, #444]	; (8017224 <etharp_output+0x1f0>)
 8017066:	486e      	ldr	r0, [pc, #440]	; (8017220 <etharp_output+0x1ec>)
 8017068:	f002 f91e 	bl	80192a8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d106      	bne.n	8017080 <etharp_output+0x4c>
 8017072:	4b69      	ldr	r3, [pc, #420]	; (8017218 <etharp_output+0x1e4>)
 8017074:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017078:	496b      	ldr	r1, [pc, #428]	; (8017228 <etharp_output+0x1f4>)
 801707a:	4869      	ldr	r0, [pc, #420]	; (8017220 <etharp_output+0x1ec>)
 801707c:	f002 f914 	bl	80192a8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	68f9      	ldr	r1, [r7, #12]
 8017086:	4618      	mov	r0, r3
 8017088:	f000 ff16 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 801708c:	4603      	mov	r3, r0
 801708e:	2b00      	cmp	r3, #0
 8017090:	d002      	beq.n	8017098 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017092:	4b66      	ldr	r3, [pc, #408]	; (801722c <etharp_output+0x1f8>)
 8017094:	61fb      	str	r3, [r7, #28]
 8017096:	e0af      	b.n	80171f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80170a0:	2be0      	cmp	r3, #224	; 0xe0
 80170a2:	d118      	bne.n	80170d6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80170a4:	2301      	movs	r3, #1
 80170a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80170a8:	2300      	movs	r3, #0
 80170aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80170ac:	235e      	movs	r3, #94	; 0x5e
 80170ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	3301      	adds	r3, #1
 80170b4:	781b      	ldrb	r3, [r3, #0]
 80170b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	3302      	adds	r3, #2
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	3303      	adds	r3, #3
 80170ca:	781b      	ldrb	r3, [r3, #0]
 80170cc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80170ce:	f107 0310 	add.w	r3, r7, #16
 80170d2:	61fb      	str	r3, [r7, #28]
 80170d4:	e090      	b.n	80171f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681a      	ldr	r2, [r3, #0]
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	3304      	adds	r3, #4
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	405a      	eors	r2, r3
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	3308      	adds	r3, #8
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	4013      	ands	r3, r2
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d012      	beq.n	8017114 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80170f4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80170f8:	4293      	cmp	r3, r2
 80170fa:	d00b      	beq.n	8017114 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	330c      	adds	r3, #12
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d003      	beq.n	801710e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	330c      	adds	r3, #12
 801710a:	61bb      	str	r3, [r7, #24]
 801710c:	e002      	b.n	8017114 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801710e:	f06f 0303 	mvn.w	r3, #3
 8017112:	e07d      	b.n	8017210 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017114:	4b46      	ldr	r3, [pc, #280]	; (8017230 <etharp_output+0x1fc>)
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	4619      	mov	r1, r3
 801711a:	4a46      	ldr	r2, [pc, #280]	; (8017234 <etharp_output+0x200>)
 801711c:	460b      	mov	r3, r1
 801711e:	005b      	lsls	r3, r3, #1
 8017120:	440b      	add	r3, r1
 8017122:	00db      	lsls	r3, r3, #3
 8017124:	4413      	add	r3, r2
 8017126:	3314      	adds	r3, #20
 8017128:	781b      	ldrb	r3, [r3, #0]
 801712a:	2b01      	cmp	r3, #1
 801712c:	d925      	bls.n	801717a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801712e:	4b40      	ldr	r3, [pc, #256]	; (8017230 <etharp_output+0x1fc>)
 8017130:	781b      	ldrb	r3, [r3, #0]
 8017132:	4619      	mov	r1, r3
 8017134:	4a3f      	ldr	r2, [pc, #252]	; (8017234 <etharp_output+0x200>)
 8017136:	460b      	mov	r3, r1
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	440b      	add	r3, r1
 801713c:	00db      	lsls	r3, r3, #3
 801713e:	4413      	add	r3, r2
 8017140:	3308      	adds	r3, #8
 8017142:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	429a      	cmp	r2, r3
 8017148:	d117      	bne.n	801717a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801714a:	69bb      	ldr	r3, [r7, #24]
 801714c:	681a      	ldr	r2, [r3, #0]
 801714e:	4b38      	ldr	r3, [pc, #224]	; (8017230 <etharp_output+0x1fc>)
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	4618      	mov	r0, r3
 8017154:	4937      	ldr	r1, [pc, #220]	; (8017234 <etharp_output+0x200>)
 8017156:	4603      	mov	r3, r0
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	4403      	add	r3, r0
 801715c:	00db      	lsls	r3, r3, #3
 801715e:	440b      	add	r3, r1
 8017160:	3304      	adds	r3, #4
 8017162:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017164:	429a      	cmp	r2, r3
 8017166:	d108      	bne.n	801717a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017168:	4b31      	ldr	r3, [pc, #196]	; (8017230 <etharp_output+0x1fc>)
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	461a      	mov	r2, r3
 801716e:	68b9      	ldr	r1, [r7, #8]
 8017170:	68f8      	ldr	r0, [r7, #12]
 8017172:	f7ff fec5 	bl	8016f00 <etharp_output_to_arp_index>
 8017176:	4603      	mov	r3, r0
 8017178:	e04a      	b.n	8017210 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801717a:	2300      	movs	r3, #0
 801717c:	75fb      	strb	r3, [r7, #23]
 801717e:	e031      	b.n	80171e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017180:	7dfa      	ldrb	r2, [r7, #23]
 8017182:	492c      	ldr	r1, [pc, #176]	; (8017234 <etharp_output+0x200>)
 8017184:	4613      	mov	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	4413      	add	r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	3314      	adds	r3, #20
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2b01      	cmp	r3, #1
 8017194:	d923      	bls.n	80171de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017196:	7dfa      	ldrb	r2, [r7, #23]
 8017198:	4926      	ldr	r1, [pc, #152]	; (8017234 <etharp_output+0x200>)
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	440b      	add	r3, r1
 80171a4:	3308      	adds	r3, #8
 80171a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80171a8:	68fa      	ldr	r2, [r7, #12]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d117      	bne.n	80171de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80171ae:	69bb      	ldr	r3, [r7, #24]
 80171b0:	6819      	ldr	r1, [r3, #0]
 80171b2:	7dfa      	ldrb	r2, [r7, #23]
 80171b4:	481f      	ldr	r0, [pc, #124]	; (8017234 <etharp_output+0x200>)
 80171b6:	4613      	mov	r3, r2
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	4413      	add	r3, r2
 80171bc:	00db      	lsls	r3, r3, #3
 80171be:	4403      	add	r3, r0
 80171c0:	3304      	adds	r3, #4
 80171c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80171c4:	4299      	cmp	r1, r3
 80171c6:	d10a      	bne.n	80171de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80171c8:	4a19      	ldr	r2, [pc, #100]	; (8017230 <etharp_output+0x1fc>)
 80171ca:	7dfb      	ldrb	r3, [r7, #23]
 80171cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80171ce:	7dfb      	ldrb	r3, [r7, #23]
 80171d0:	461a      	mov	r2, r3
 80171d2:	68b9      	ldr	r1, [r7, #8]
 80171d4:	68f8      	ldr	r0, [r7, #12]
 80171d6:	f7ff fe93 	bl	8016f00 <etharp_output_to_arp_index>
 80171da:	4603      	mov	r3, r0
 80171dc:	e018      	b.n	8017210 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80171de:	7dfb      	ldrb	r3, [r7, #23]
 80171e0:	3301      	adds	r3, #1
 80171e2:	75fb      	strb	r3, [r7, #23]
 80171e4:	7dfb      	ldrb	r3, [r7, #23]
 80171e6:	2b09      	cmp	r3, #9
 80171e8:	d9ca      	bls.n	8017180 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80171ea:	68ba      	ldr	r2, [r7, #8]
 80171ec:	69b9      	ldr	r1, [r7, #24]
 80171ee:	68f8      	ldr	r0, [r7, #12]
 80171f0:	f000 f822 	bl	8017238 <etharp_query>
 80171f4:	4603      	mov	r3, r0
 80171f6:	e00b      	b.n	8017210 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80171fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	69fb      	ldr	r3, [r7, #28]
 8017206:	68b9      	ldr	r1, [r7, #8]
 8017208:	68f8      	ldr	r0, [r7, #12]
 801720a:	f001 fd5d 	bl	8018cc8 <ethernet_output>
 801720e:	4603      	mov	r3, r0
}
 8017210:	4618      	mov	r0, r3
 8017212:	3720      	adds	r7, #32
 8017214:	46bd      	mov	sp, r7
 8017216:	bd80      	pop	{r7, pc}
 8017218:	0801cd78 	.word	0x0801cd78
 801721c:	0801cec8 	.word	0x0801cec8
 8017220:	0801cdf0 	.word	0x0801cdf0
 8017224:	0801cf18 	.word	0x0801cf18
 8017228:	0801ceb8 	.word	0x0801ceb8
 801722c:	0801d6d4 	.word	0x0801d6d4
 8017230:	20004c58 	.word	0x20004c58
 8017234:	20004b68 	.word	0x20004b68

08017238 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b08c      	sub	sp, #48	; 0x30
 801723c:	af02      	add	r7, sp, #8
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	60b9      	str	r1, [r7, #8]
 8017242:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	332a      	adds	r3, #42	; 0x2a
 8017248:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801724a:	23ff      	movs	r3, #255	; 0xff
 801724c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017250:	2300      	movs	r3, #0
 8017252:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	68f9      	ldr	r1, [r7, #12]
 801725a:	4618      	mov	r0, r3
 801725c:	f000 fe2c 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 8017260:	4603      	mov	r3, r0
 8017262:	2b00      	cmp	r3, #0
 8017264:	d10c      	bne.n	8017280 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801726e:	2be0      	cmp	r3, #224	; 0xe0
 8017270:	d006      	beq.n	8017280 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d003      	beq.n	8017280 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d102      	bne.n	8017286 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017280:	f06f 030f 	mvn.w	r3, #15
 8017284:	e101      	b.n	801748a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017286:	68fa      	ldr	r2, [r7, #12]
 8017288:	2101      	movs	r1, #1
 801728a:	68b8      	ldr	r0, [r7, #8]
 801728c:	f7ff fb5c 	bl	8016948 <etharp_find_entry>
 8017290:	4603      	mov	r3, r0
 8017292:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017294:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017298:	2b00      	cmp	r3, #0
 801729a:	da02      	bge.n	80172a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801729c:	8a7b      	ldrh	r3, [r7, #18]
 801729e:	b25b      	sxtb	r3, r3
 80172a0:	e0f3      	b.n	801748a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80172a2:	8a7b      	ldrh	r3, [r7, #18]
 80172a4:	2b7e      	cmp	r3, #126	; 0x7e
 80172a6:	d906      	bls.n	80172b6 <etharp_query+0x7e>
 80172a8:	4b7a      	ldr	r3, [pc, #488]	; (8017494 <etharp_query+0x25c>)
 80172aa:	f240 32c1 	movw	r2, #961	; 0x3c1
 80172ae:	497a      	ldr	r1, [pc, #488]	; (8017498 <etharp_query+0x260>)
 80172b0:	487a      	ldr	r0, [pc, #488]	; (801749c <etharp_query+0x264>)
 80172b2:	f001 fff9 	bl	80192a8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80172b6:	8a7b      	ldrh	r3, [r7, #18]
 80172b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80172ba:	7c7a      	ldrb	r2, [r7, #17]
 80172bc:	4978      	ldr	r1, [pc, #480]	; (80174a0 <etharp_query+0x268>)
 80172be:	4613      	mov	r3, r2
 80172c0:	005b      	lsls	r3, r3, #1
 80172c2:	4413      	add	r3, r2
 80172c4:	00db      	lsls	r3, r3, #3
 80172c6:	440b      	add	r3, r1
 80172c8:	3314      	adds	r3, #20
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d115      	bne.n	80172fc <etharp_query+0xc4>
    is_new_entry = 1;
 80172d0:	2301      	movs	r3, #1
 80172d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80172d4:	7c7a      	ldrb	r2, [r7, #17]
 80172d6:	4972      	ldr	r1, [pc, #456]	; (80174a0 <etharp_query+0x268>)
 80172d8:	4613      	mov	r3, r2
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	4413      	add	r3, r2
 80172de:	00db      	lsls	r3, r3, #3
 80172e0:	440b      	add	r3, r1
 80172e2:	3314      	adds	r3, #20
 80172e4:	2201      	movs	r2, #1
 80172e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80172e8:	7c7a      	ldrb	r2, [r7, #17]
 80172ea:	496d      	ldr	r1, [pc, #436]	; (80174a0 <etharp_query+0x268>)
 80172ec:	4613      	mov	r3, r2
 80172ee:	005b      	lsls	r3, r3, #1
 80172f0:	4413      	add	r3, r2
 80172f2:	00db      	lsls	r3, r3, #3
 80172f4:	440b      	add	r3, r1
 80172f6:	3308      	adds	r3, #8
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80172fc:	7c7a      	ldrb	r2, [r7, #17]
 80172fe:	4968      	ldr	r1, [pc, #416]	; (80174a0 <etharp_query+0x268>)
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	440b      	add	r3, r1
 801730a:	3314      	adds	r3, #20
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	2b01      	cmp	r3, #1
 8017310:	d011      	beq.n	8017336 <etharp_query+0xfe>
 8017312:	7c7a      	ldrb	r2, [r7, #17]
 8017314:	4962      	ldr	r1, [pc, #392]	; (80174a0 <etharp_query+0x268>)
 8017316:	4613      	mov	r3, r2
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4413      	add	r3, r2
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	440b      	add	r3, r1
 8017320:	3314      	adds	r3, #20
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	2b01      	cmp	r3, #1
 8017326:	d806      	bhi.n	8017336 <etharp_query+0xfe>
 8017328:	4b5a      	ldr	r3, [pc, #360]	; (8017494 <etharp_query+0x25c>)
 801732a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801732e:	495d      	ldr	r1, [pc, #372]	; (80174a4 <etharp_query+0x26c>)
 8017330:	485a      	ldr	r0, [pc, #360]	; (801749c <etharp_query+0x264>)
 8017332:	f001 ffb9 	bl	80192a8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017336:	6a3b      	ldr	r3, [r7, #32]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d102      	bne.n	8017342 <etharp_query+0x10a>
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d10c      	bne.n	801735c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017342:	68b9      	ldr	r1, [r7, #8]
 8017344:	68f8      	ldr	r0, [r7, #12]
 8017346:	f000 f963 	bl	8017610 <etharp_request>
 801734a:	4603      	mov	r3, r0
 801734c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d102      	bne.n	801735c <etharp_query+0x124>
      return result;
 8017356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801735a:	e096      	b.n	801748a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d106      	bne.n	8017370 <etharp_query+0x138>
 8017362:	4b4c      	ldr	r3, [pc, #304]	; (8017494 <etharp_query+0x25c>)
 8017364:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017368:	494f      	ldr	r1, [pc, #316]	; (80174a8 <etharp_query+0x270>)
 801736a:	484c      	ldr	r0, [pc, #304]	; (801749c <etharp_query+0x264>)
 801736c:	f001 ff9c 	bl	80192a8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017370:	7c7a      	ldrb	r2, [r7, #17]
 8017372:	494b      	ldr	r1, [pc, #300]	; (80174a0 <etharp_query+0x268>)
 8017374:	4613      	mov	r3, r2
 8017376:	005b      	lsls	r3, r3, #1
 8017378:	4413      	add	r3, r2
 801737a:	00db      	lsls	r3, r3, #3
 801737c:	440b      	add	r3, r1
 801737e:	3314      	adds	r3, #20
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	2b01      	cmp	r3, #1
 8017384:	d917      	bls.n	80173b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017386:	4a49      	ldr	r2, [pc, #292]	; (80174ac <etharp_query+0x274>)
 8017388:	7c7b      	ldrb	r3, [r7, #17]
 801738a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801738c:	7c7a      	ldrb	r2, [r7, #17]
 801738e:	4613      	mov	r3, r2
 8017390:	005b      	lsls	r3, r3, #1
 8017392:	4413      	add	r3, r2
 8017394:	00db      	lsls	r3, r3, #3
 8017396:	3308      	adds	r3, #8
 8017398:	4a41      	ldr	r2, [pc, #260]	; (80174a0 <etharp_query+0x268>)
 801739a:	4413      	add	r3, r2
 801739c:	3304      	adds	r3, #4
 801739e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80173a2:	9200      	str	r2, [sp, #0]
 80173a4:	697a      	ldr	r2, [r7, #20]
 80173a6:	6879      	ldr	r1, [r7, #4]
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f001 fc8d 	bl	8018cc8 <ethernet_output>
 80173ae:	4603      	mov	r3, r0
 80173b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80173b4:	e067      	b.n	8017486 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80173b6:	7c7a      	ldrb	r2, [r7, #17]
 80173b8:	4939      	ldr	r1, [pc, #228]	; (80174a0 <etharp_query+0x268>)
 80173ba:	4613      	mov	r3, r2
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	4413      	add	r3, r2
 80173c0:	00db      	lsls	r3, r3, #3
 80173c2:	440b      	add	r3, r1
 80173c4:	3314      	adds	r3, #20
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	d15c      	bne.n	8017486 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80173cc:	2300      	movs	r3, #0
 80173ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80173d4:	e01c      	b.n	8017410 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	895a      	ldrh	r2, [r3, #10]
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	891b      	ldrh	r3, [r3, #8]
 80173de:	429a      	cmp	r2, r3
 80173e0:	d10a      	bne.n	80173f8 <etharp_query+0x1c0>
 80173e2:	69fb      	ldr	r3, [r7, #28]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d006      	beq.n	80173f8 <etharp_query+0x1c0>
 80173ea:	4b2a      	ldr	r3, [pc, #168]	; (8017494 <etharp_query+0x25c>)
 80173ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80173f0:	492f      	ldr	r1, [pc, #188]	; (80174b0 <etharp_query+0x278>)
 80173f2:	482a      	ldr	r0, [pc, #168]	; (801749c <etharp_query+0x264>)
 80173f4:	f001 ff58 	bl	80192a8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	7b1b      	ldrb	r3, [r3, #12]
 80173fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017400:	2b00      	cmp	r3, #0
 8017402:	d002      	beq.n	801740a <etharp_query+0x1d2>
        copy_needed = 1;
 8017404:	2301      	movs	r3, #1
 8017406:	61bb      	str	r3, [r7, #24]
        break;
 8017408:	e005      	b.n	8017416 <etharp_query+0x1de>
      }
      p = p->next;
 801740a:	69fb      	ldr	r3, [r7, #28]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017410:	69fb      	ldr	r3, [r7, #28]
 8017412:	2b00      	cmp	r3, #0
 8017414:	d1df      	bne.n	80173d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d007      	beq.n	801742c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017422:	200e      	movs	r0, #14
 8017424:	f7f7 fb64 	bl	800eaf0 <pbuf_clone>
 8017428:	61f8      	str	r0, [r7, #28]
 801742a:	e004      	b.n	8017436 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017430:	69f8      	ldr	r0, [r7, #28]
 8017432:	f7f7 f98b 	bl	800e74c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017436:	69fb      	ldr	r3, [r7, #28]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d021      	beq.n	8017480 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801743c:	7c7a      	ldrb	r2, [r7, #17]
 801743e:	4918      	ldr	r1, [pc, #96]	; (80174a0 <etharp_query+0x268>)
 8017440:	4613      	mov	r3, r2
 8017442:	005b      	lsls	r3, r3, #1
 8017444:	4413      	add	r3, r2
 8017446:	00db      	lsls	r3, r3, #3
 8017448:	440b      	add	r3, r1
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d00a      	beq.n	8017466 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017450:	7c7a      	ldrb	r2, [r7, #17]
 8017452:	4913      	ldr	r1, [pc, #76]	; (80174a0 <etharp_query+0x268>)
 8017454:	4613      	mov	r3, r2
 8017456:	005b      	lsls	r3, r3, #1
 8017458:	4413      	add	r3, r2
 801745a:	00db      	lsls	r3, r3, #3
 801745c:	440b      	add	r3, r1
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	4618      	mov	r0, r3
 8017462:	f7f7 f8cd 	bl	800e600 <pbuf_free>
      }
      arp_table[i].q = p;
 8017466:	7c7a      	ldrb	r2, [r7, #17]
 8017468:	490d      	ldr	r1, [pc, #52]	; (80174a0 <etharp_query+0x268>)
 801746a:	4613      	mov	r3, r2
 801746c:	005b      	lsls	r3, r3, #1
 801746e:	4413      	add	r3, r2
 8017470:	00db      	lsls	r3, r3, #3
 8017472:	440b      	add	r3, r1
 8017474:	69fa      	ldr	r2, [r7, #28]
 8017476:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017478:	2300      	movs	r3, #0
 801747a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801747e:	e002      	b.n	8017486 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017480:	23ff      	movs	r3, #255	; 0xff
 8017482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017486:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801748a:	4618      	mov	r0, r3
 801748c:	3728      	adds	r7, #40	; 0x28
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	0801cd78 	.word	0x0801cd78
 8017498:	0801cf24 	.word	0x0801cf24
 801749c:	0801cdf0 	.word	0x0801cdf0
 80174a0:	20004b68 	.word	0x20004b68
 80174a4:	0801cf34 	.word	0x0801cf34
 80174a8:	0801cf18 	.word	0x0801cf18
 80174ac:	20004c58 	.word	0x20004c58
 80174b0:	0801cf5c 	.word	0x0801cf5c

080174b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b08a      	sub	sp, #40	; 0x28
 80174b8:	af02      	add	r7, sp, #8
 80174ba:	60f8      	str	r0, [r7, #12]
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	607a      	str	r2, [r7, #4]
 80174c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80174c2:	2300      	movs	r3, #0
 80174c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d106      	bne.n	80174da <etharp_raw+0x26>
 80174cc:	4b3a      	ldr	r3, [pc, #232]	; (80175b8 <etharp_raw+0x104>)
 80174ce:	f240 4257 	movw	r2, #1111	; 0x457
 80174d2:	493a      	ldr	r1, [pc, #232]	; (80175bc <etharp_raw+0x108>)
 80174d4:	483a      	ldr	r0, [pc, #232]	; (80175c0 <etharp_raw+0x10c>)
 80174d6:	f001 fee7 	bl	80192a8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80174da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174de:	211c      	movs	r1, #28
 80174e0:	200e      	movs	r0, #14
 80174e2:	f7f6 fda9 	bl	800e038 <pbuf_alloc>
 80174e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80174e8:	69bb      	ldr	r3, [r7, #24]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d102      	bne.n	80174f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80174ee:	f04f 33ff 	mov.w	r3, #4294967295
 80174f2:	e05d      	b.n	80175b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80174f4:	69bb      	ldr	r3, [r7, #24]
 80174f6:	895b      	ldrh	r3, [r3, #10]
 80174f8:	2b1b      	cmp	r3, #27
 80174fa:	d806      	bhi.n	801750a <etharp_raw+0x56>
 80174fc:	4b2e      	ldr	r3, [pc, #184]	; (80175b8 <etharp_raw+0x104>)
 80174fe:	f240 4262 	movw	r2, #1122	; 0x462
 8017502:	4930      	ldr	r1, [pc, #192]	; (80175c4 <etharp_raw+0x110>)
 8017504:	482e      	ldr	r0, [pc, #184]	; (80175c0 <etharp_raw+0x10c>)
 8017506:	f001 fecf 	bl	80192a8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801750a:	69bb      	ldr	r3, [r7, #24]
 801750c:	685b      	ldr	r3, [r3, #4]
 801750e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017510:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017512:	4618      	mov	r0, r3
 8017514:	f7f5 fcbc 	bl	800ce90 <lwip_htons>
 8017518:	4603      	mov	r3, r0
 801751a:	461a      	mov	r2, r3
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017526:	2b06      	cmp	r3, #6
 8017528:	d006      	beq.n	8017538 <etharp_raw+0x84>
 801752a:	4b23      	ldr	r3, [pc, #140]	; (80175b8 <etharp_raw+0x104>)
 801752c:	f240 4269 	movw	r2, #1129	; 0x469
 8017530:	4925      	ldr	r1, [pc, #148]	; (80175c8 <etharp_raw+0x114>)
 8017532:	4823      	ldr	r0, [pc, #140]	; (80175c0 <etharp_raw+0x10c>)
 8017534:	f001 feb8 	bl	80192a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	3308      	adds	r3, #8
 801753c:	2206      	movs	r2, #6
 801753e:	6839      	ldr	r1, [r7, #0]
 8017540:	4618      	mov	r0, r3
 8017542:	f001 fe40 	bl	80191c6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017546:	697b      	ldr	r3, [r7, #20]
 8017548:	3312      	adds	r3, #18
 801754a:	2206      	movs	r2, #6
 801754c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801754e:	4618      	mov	r0, r3
 8017550:	f001 fe39 	bl	80191c6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	330e      	adds	r3, #14
 8017558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801755a:	6812      	ldr	r2, [r2, #0]
 801755c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	3318      	adds	r3, #24
 8017562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017564:	6812      	ldr	r2, [r2, #0]
 8017566:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017568:	697b      	ldr	r3, [r7, #20]
 801756a:	2200      	movs	r2, #0
 801756c:	701a      	strb	r2, [r3, #0]
 801756e:	2200      	movs	r2, #0
 8017570:	f042 0201 	orr.w	r2, r2, #1
 8017574:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017576:	697b      	ldr	r3, [r7, #20]
 8017578:	2200      	movs	r2, #0
 801757a:	f042 0208 	orr.w	r2, r2, #8
 801757e:	709a      	strb	r2, [r3, #2]
 8017580:	2200      	movs	r2, #0
 8017582:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	2206      	movs	r2, #6
 8017588:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	2204      	movs	r2, #4
 801758e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017590:	f640 0306 	movw	r3, #2054	; 0x806
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	68ba      	ldr	r2, [r7, #8]
 801759a:	69b9      	ldr	r1, [r7, #24]
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f001 fb93 	bl	8018cc8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80175a2:	69b8      	ldr	r0, [r7, #24]
 80175a4:	f7f7 f82c 	bl	800e600 <pbuf_free>
  p = NULL;
 80175a8:	2300      	movs	r3, #0
 80175aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80175ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175b0:	4618      	mov	r0, r3
 80175b2:	3720      	adds	r7, #32
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}
 80175b8:	0801cd78 	.word	0x0801cd78
 80175bc:	0801cec8 	.word	0x0801cec8
 80175c0:	0801cdf0 	.word	0x0801cdf0
 80175c4:	0801cf78 	.word	0x0801cf78
 80175c8:	0801cfac 	.word	0x0801cfac

080175cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b088      	sub	sp, #32
 80175d0:	af04      	add	r7, sp, #16
 80175d2:	60f8      	str	r0, [r7, #12]
 80175d4:	60b9      	str	r1, [r7, #8]
 80175d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80175e8:	2201      	movs	r2, #1
 80175ea:	9203      	str	r2, [sp, #12]
 80175ec:	68ba      	ldr	r2, [r7, #8]
 80175ee:	9202      	str	r2, [sp, #8]
 80175f0:	4a06      	ldr	r2, [pc, #24]	; (801760c <etharp_request_dst+0x40>)
 80175f2:	9201      	str	r2, [sp, #4]
 80175f4:	9300      	str	r3, [sp, #0]
 80175f6:	4603      	mov	r3, r0
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	68f8      	ldr	r0, [r7, #12]
 80175fc:	f7ff ff5a 	bl	80174b4 <etharp_raw>
 8017600:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017602:	4618      	mov	r0, r3
 8017604:	3710      	adds	r7, #16
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	0801d6dc 	.word	0x0801d6dc

08017610 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801761a:	4a05      	ldr	r2, [pc, #20]	; (8017630 <etharp_request+0x20>)
 801761c:	6839      	ldr	r1, [r7, #0]
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f7ff ffd4 	bl	80175cc <etharp_request_dst>
 8017624:	4603      	mov	r3, r0
}
 8017626:	4618      	mov	r0, r3
 8017628:	3708      	adds	r7, #8
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}
 801762e:	bf00      	nop
 8017630:	0801d6d4 	.word	0x0801d6d4

08017634 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b08e      	sub	sp, #56	; 0x38
 8017638:	af04      	add	r7, sp, #16
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801763e:	4b79      	ldr	r3, [pc, #484]	; (8017824 <icmp_input+0x1f0>)
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	f003 030f 	and.w	r3, r3, #15
 801764c:	b2db      	uxtb	r3, r3
 801764e:	009b      	lsls	r3, r3, #2
 8017650:	b2db      	uxtb	r3, r3
 8017652:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017656:	2b13      	cmp	r3, #19
 8017658:	f240 80cd 	bls.w	80177f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	895b      	ldrh	r3, [r3, #10]
 8017660:	2b03      	cmp	r3, #3
 8017662:	f240 80ca 	bls.w	80177fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	685b      	ldr	r3, [r3, #4]
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017670:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017674:	2b00      	cmp	r3, #0
 8017676:	f000 80b7 	beq.w	80177e8 <icmp_input+0x1b4>
 801767a:	2b08      	cmp	r3, #8
 801767c:	f040 80b7 	bne.w	80177ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017680:	4b69      	ldr	r3, [pc, #420]	; (8017828 <icmp_input+0x1f4>)
 8017682:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017684:	4b67      	ldr	r3, [pc, #412]	; (8017824 <icmp_input+0x1f0>)
 8017686:	695b      	ldr	r3, [r3, #20]
 8017688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801768c:	2be0      	cmp	r3, #224	; 0xe0
 801768e:	f000 80bb 	beq.w	8017808 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017692:	4b64      	ldr	r3, [pc, #400]	; (8017824 <icmp_input+0x1f0>)
 8017694:	695b      	ldr	r3, [r3, #20]
 8017696:	4a63      	ldr	r2, [pc, #396]	; (8017824 <icmp_input+0x1f0>)
 8017698:	6812      	ldr	r2, [r2, #0]
 801769a:	4611      	mov	r1, r2
 801769c:	4618      	mov	r0, r3
 801769e:	f000 fc0b 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f040 80b1 	bne.w	801780c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	891b      	ldrh	r3, [r3, #8]
 80176ae:	2b07      	cmp	r3, #7
 80176b0:	f240 80a5 	bls.w	80177fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80176b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176b6:	330e      	adds	r3, #14
 80176b8:	4619      	mov	r1, r3
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f7f6 ff0a 	bl	800e4d4 <pbuf_add_header>
 80176c0:	4603      	mov	r3, r0
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d04b      	beq.n	801775e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	891a      	ldrh	r2, [r3, #8]
 80176ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176cc:	4413      	add	r3, r2
 80176ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	891b      	ldrh	r3, [r3, #8]
 80176d4:	8b7a      	ldrh	r2, [r7, #26]
 80176d6:	429a      	cmp	r2, r3
 80176d8:	f0c0 809a 	bcc.w	8017810 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80176dc:	8b7b      	ldrh	r3, [r7, #26]
 80176de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176e2:	4619      	mov	r1, r3
 80176e4:	200e      	movs	r0, #14
 80176e6:	f7f6 fca7 	bl	800e038 <pbuf_alloc>
 80176ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	f000 8090 	beq.w	8017814 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	895b      	ldrh	r3, [r3, #10]
 80176f8:	461a      	mov	r2, r3
 80176fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176fc:	3308      	adds	r3, #8
 80176fe:	429a      	cmp	r2, r3
 8017700:	d203      	bcs.n	801770a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017702:	6978      	ldr	r0, [r7, #20]
 8017704:	f7f6 ff7c 	bl	800e600 <pbuf_free>
          goto icmperr;
 8017708:	e085      	b.n	8017816 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	685b      	ldr	r3, [r3, #4]
 801770e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017710:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017712:	4618      	mov	r0, r3
 8017714:	f001 fd57 	bl	80191c6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801771a:	4619      	mov	r1, r3
 801771c:	6978      	ldr	r0, [r7, #20]
 801771e:	f7f6 fee9 	bl	800e4f4 <pbuf_remove_header>
 8017722:	4603      	mov	r3, r0
 8017724:	2b00      	cmp	r3, #0
 8017726:	d009      	beq.n	801773c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017728:	4b40      	ldr	r3, [pc, #256]	; (801782c <icmp_input+0x1f8>)
 801772a:	22b6      	movs	r2, #182	; 0xb6
 801772c:	4940      	ldr	r1, [pc, #256]	; (8017830 <icmp_input+0x1fc>)
 801772e:	4841      	ldr	r0, [pc, #260]	; (8017834 <icmp_input+0x200>)
 8017730:	f001 fdba 	bl	80192a8 <iprintf>
          pbuf_free(r);
 8017734:	6978      	ldr	r0, [r7, #20]
 8017736:	f7f6 ff63 	bl	800e600 <pbuf_free>
          goto icmperr;
 801773a:	e06c      	b.n	8017816 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801773c:	6879      	ldr	r1, [r7, #4]
 801773e:	6978      	ldr	r0, [r7, #20]
 8017740:	f7f7 f892 	bl	800e868 <pbuf_copy>
 8017744:	4603      	mov	r3, r0
 8017746:	2b00      	cmp	r3, #0
 8017748:	d003      	beq.n	8017752 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801774a:	6978      	ldr	r0, [r7, #20]
 801774c:	f7f6 ff58 	bl	800e600 <pbuf_free>
          goto icmperr;
 8017750:	e061      	b.n	8017816 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f7f6 ff54 	bl	800e600 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	607b      	str	r3, [r7, #4]
 801775c:	e00f      	b.n	801777e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801775e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017760:	330e      	adds	r3, #14
 8017762:	4619      	mov	r1, r3
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f7f6 fec5 	bl	800e4f4 <pbuf_remove_header>
 801776a:	4603      	mov	r3, r0
 801776c:	2b00      	cmp	r3, #0
 801776e:	d006      	beq.n	801777e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017770:	4b2e      	ldr	r3, [pc, #184]	; (801782c <icmp_input+0x1f8>)
 8017772:	22c7      	movs	r2, #199	; 0xc7
 8017774:	4930      	ldr	r1, [pc, #192]	; (8017838 <icmp_input+0x204>)
 8017776:	482f      	ldr	r0, [pc, #188]	; (8017834 <icmp_input+0x200>)
 8017778:	f001 fd96 	bl	80192a8 <iprintf>
          goto icmperr;
 801777c:	e04b      	b.n	8017816 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017786:	4619      	mov	r1, r3
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f7f6 fea3 	bl	800e4d4 <pbuf_add_header>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d12b      	bne.n	80177ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801779a:	69fb      	ldr	r3, [r7, #28]
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80177a2:	4b20      	ldr	r3, [pc, #128]	; (8017824 <icmp_input+0x1f0>)
 80177a4:	691a      	ldr	r2, [r3, #16]
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80177aa:	693b      	ldr	r3, [r7, #16]
 80177ac:	2200      	movs	r2, #0
 80177ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	2200      	movs	r2, #0
 80177b4:	709a      	strb	r2, [r3, #2]
 80177b6:	2200      	movs	r2, #0
 80177b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	22ff      	movs	r2, #255	; 0xff
 80177be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	2200      	movs	r2, #0
 80177c4:	729a      	strb	r2, [r3, #10]
 80177c6:	2200      	movs	r2, #0
 80177c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	9302      	str	r3, [sp, #8]
 80177ce:	2301      	movs	r3, #1
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	2300      	movs	r3, #0
 80177d4:	9300      	str	r3, [sp, #0]
 80177d6:	23ff      	movs	r3, #255	; 0xff
 80177d8:	2200      	movs	r2, #0
 80177da:	69f9      	ldr	r1, [r7, #28]
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f000 fa93 	bl	8017d08 <ip4_output_if>
 80177e2:	4603      	mov	r3, r0
 80177e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80177e6:	e001      	b.n	80177ec <icmp_input+0x1b8>
      break;
 80177e8:	bf00      	nop
 80177ea:	e000      	b.n	80177ee <icmp_input+0x1ba>
      break;
 80177ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f7f6 ff06 	bl	800e600 <pbuf_free>
  return;
 80177f4:	e013      	b.n	801781e <icmp_input+0x1ea>
    goto lenerr;
 80177f6:	bf00      	nop
 80177f8:	e002      	b.n	8017800 <icmp_input+0x1cc>
    goto lenerr;
 80177fa:	bf00      	nop
 80177fc:	e000      	b.n	8017800 <icmp_input+0x1cc>
        goto lenerr;
 80177fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	f7f6 fefd 	bl	800e600 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017806:	e00a      	b.n	801781e <icmp_input+0x1ea>
        goto icmperr;
 8017808:	bf00      	nop
 801780a:	e004      	b.n	8017816 <icmp_input+0x1e2>
        goto icmperr;
 801780c:	bf00      	nop
 801780e:	e002      	b.n	8017816 <icmp_input+0x1e2>
          goto icmperr;
 8017810:	bf00      	nop
 8017812:	e000      	b.n	8017816 <icmp_input+0x1e2>
          goto icmperr;
 8017814:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7f6 fef2 	bl	800e600 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801781c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801781e:	3728      	adds	r7, #40	; 0x28
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}
 8017824:	20009948 	.word	0x20009948
 8017828:	2000995c 	.word	0x2000995c
 801782c:	0801cff0 	.word	0x0801cff0
 8017830:	0801d028 	.word	0x0801d028
 8017834:	0801d060 	.word	0x0801d060
 8017838:	0801d088 	.word	0x0801d088

0801783c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
 8017844:	460b      	mov	r3, r1
 8017846:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017848:	78fb      	ldrb	r3, [r7, #3]
 801784a:	461a      	mov	r2, r3
 801784c:	2103      	movs	r1, #3
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f000 f814 	bl	801787c <icmp_send_response>
}
 8017854:	bf00      	nop
 8017856:	3708      	adds	r7, #8
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}

0801785c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	460b      	mov	r3, r1
 8017866:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017868:	78fb      	ldrb	r3, [r7, #3]
 801786a:	461a      	mov	r2, r3
 801786c:	210b      	movs	r1, #11
 801786e:	6878      	ldr	r0, [r7, #4]
 8017870:	f000 f804 	bl	801787c <icmp_send_response>
}
 8017874:	bf00      	nop
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b08c      	sub	sp, #48	; 0x30
 8017880:	af04      	add	r7, sp, #16
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	460b      	mov	r3, r1
 8017886:	70fb      	strb	r3, [r7, #3]
 8017888:	4613      	mov	r3, r2
 801788a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801788c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017890:	2124      	movs	r1, #36	; 0x24
 8017892:	2022      	movs	r0, #34	; 0x22
 8017894:	f7f6 fbd0 	bl	800e038 <pbuf_alloc>
 8017898:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801789a:	69fb      	ldr	r3, [r7, #28]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d04c      	beq.n	801793a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	895b      	ldrh	r3, [r3, #10]
 80178a4:	2b23      	cmp	r3, #35	; 0x23
 80178a6:	d806      	bhi.n	80178b6 <icmp_send_response+0x3a>
 80178a8:	4b26      	ldr	r3, [pc, #152]	; (8017944 <icmp_send_response+0xc8>)
 80178aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80178ae:	4926      	ldr	r1, [pc, #152]	; (8017948 <icmp_send_response+0xcc>)
 80178b0:	4826      	ldr	r0, [pc, #152]	; (801794c <icmp_send_response+0xd0>)
 80178b2:	f001 fcf9 	bl	80192a8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80178bc:	69fb      	ldr	r3, [r7, #28]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	78fa      	ldrb	r2, [r7, #3]
 80178c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	78ba      	ldrb	r2, [r7, #2]
 80178cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	2200      	movs	r2, #0
 80178d2:	711a      	strb	r2, [r3, #4]
 80178d4:	2200      	movs	r2, #0
 80178d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	2200      	movs	r2, #0
 80178dc:	719a      	strb	r2, [r3, #6]
 80178de:	2200      	movs	r2, #0
 80178e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80178e2:	69fb      	ldr	r3, [r7, #28]
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	f103 0008 	add.w	r0, r3, #8
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	221c      	movs	r2, #28
 80178f0:	4619      	mov	r1, r3
 80178f2:	f001 fc68 	bl	80191c6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	68db      	ldr	r3, [r3, #12]
 80178fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80178fc:	f107 030c 	add.w	r3, r7, #12
 8017900:	4618      	mov	r0, r3
 8017902:	f000 f825 	bl	8017950 <ip4_route>
 8017906:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d011      	beq.n	8017932 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	2200      	movs	r2, #0
 8017912:	709a      	strb	r2, [r3, #2]
 8017914:	2200      	movs	r2, #0
 8017916:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017918:	f107 020c 	add.w	r2, r7, #12
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	9302      	str	r3, [sp, #8]
 8017920:	2301      	movs	r3, #1
 8017922:	9301      	str	r3, [sp, #4]
 8017924:	2300      	movs	r3, #0
 8017926:	9300      	str	r3, [sp, #0]
 8017928:	23ff      	movs	r3, #255	; 0xff
 801792a:	2100      	movs	r1, #0
 801792c:	69f8      	ldr	r0, [r7, #28]
 801792e:	f000 f9eb 	bl	8017d08 <ip4_output_if>
  }
  pbuf_free(q);
 8017932:	69f8      	ldr	r0, [r7, #28]
 8017934:	f7f6 fe64 	bl	800e600 <pbuf_free>
 8017938:	e000      	b.n	801793c <icmp_send_response+0xc0>
    return;
 801793a:	bf00      	nop
}
 801793c:	3720      	adds	r7, #32
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}
 8017942:	bf00      	nop
 8017944:	0801cff0 	.word	0x0801cff0
 8017948:	0801d0bc 	.word	0x0801d0bc
 801794c:	0801d060 	.word	0x0801d060

08017950 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017950:	b480      	push	{r7}
 8017952:	b085      	sub	sp, #20
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017958:	4b33      	ldr	r3, [pc, #204]	; (8017a28 <ip4_route+0xd8>)
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	60fb      	str	r3, [r7, #12]
 801795e:	e036      	b.n	80179ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017966:	f003 0301 	and.w	r3, r3, #1
 801796a:	b2db      	uxtb	r3, r3
 801796c:	2b00      	cmp	r3, #0
 801796e:	d02b      	beq.n	80179c8 <ip4_route+0x78>
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017976:	089b      	lsrs	r3, r3, #2
 8017978:	f003 0301 	and.w	r3, r3, #1
 801797c:	b2db      	uxtb	r3, r3
 801797e:	2b00      	cmp	r3, #0
 8017980:	d022      	beq.n	80179c8 <ip4_route+0x78>
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	3304      	adds	r3, #4
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d01d      	beq.n	80179c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	681a      	ldr	r2, [r3, #0]
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3304      	adds	r3, #4
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	405a      	eors	r2, r3
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	3308      	adds	r3, #8
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	4013      	ands	r3, r2
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d101      	bne.n	80179a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	e038      	b.n	8017a1a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179ae:	f003 0302 	and.w	r3, r3, #2
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d108      	bne.n	80179c8 <ip4_route+0x78>
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681a      	ldr	r2, [r3, #0]
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	330c      	adds	r3, #12
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d101      	bne.n	80179c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	e028      	b.n	8017a1a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	60fb      	str	r3, [r7, #12]
 80179ce:	68fb      	ldr	r3, [r7, #12]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d1c5      	bne.n	8017960 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80179d4:	4b15      	ldr	r3, [pc, #84]	; (8017a2c <ip4_route+0xdc>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d01a      	beq.n	8017a12 <ip4_route+0xc2>
 80179dc:	4b13      	ldr	r3, [pc, #76]	; (8017a2c <ip4_route+0xdc>)
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179e4:	f003 0301 	and.w	r3, r3, #1
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d012      	beq.n	8017a12 <ip4_route+0xc2>
 80179ec:	4b0f      	ldr	r3, [pc, #60]	; (8017a2c <ip4_route+0xdc>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179f4:	f003 0304 	and.w	r3, r3, #4
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d00a      	beq.n	8017a12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80179fc:	4b0b      	ldr	r3, [pc, #44]	; (8017a2c <ip4_route+0xdc>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	3304      	adds	r3, #4
 8017a02:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d004      	beq.n	8017a12 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	681b      	ldr	r3, [r3, #0]
 8017a0c:	b2db      	uxtb	r3, r3
 8017a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8017a10:	d101      	bne.n	8017a16 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	e001      	b.n	8017a1a <ip4_route+0xca>
  }

  return netif_default;
 8017a16:	4b05      	ldr	r3, [pc, #20]	; (8017a2c <ip4_route+0xdc>)
 8017a18:	681b      	ldr	r3, [r3, #0]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3714      	adds	r7, #20
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a24:	4770      	bx	lr
 8017a26:	bf00      	nop
 8017a28:	2000d06c 	.word	0x2000d06c
 8017a2c:	2000d070 	.word	0x2000d070

08017a30 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a3e:	f003 0301 	and.w	r3, r3, #1
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d016      	beq.n	8017a76 <ip4_input_accept+0x46>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	3304      	adds	r3, #4
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d011      	beq.n	8017a76 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017a52:	4b0b      	ldr	r3, [pc, #44]	; (8017a80 <ip4_input_accept+0x50>)
 8017a54:	695a      	ldr	r2, [r3, #20]
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	3304      	adds	r3, #4
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d008      	beq.n	8017a72 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017a60:	4b07      	ldr	r3, [pc, #28]	; (8017a80 <ip4_input_accept+0x50>)
 8017a62:	695b      	ldr	r3, [r3, #20]
 8017a64:	6879      	ldr	r1, [r7, #4]
 8017a66:	4618      	mov	r0, r3
 8017a68:	f000 fa26 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 8017a6c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d001      	beq.n	8017a76 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017a72:	2301      	movs	r3, #1
 8017a74:	e000      	b.n	8017a78 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017a76:	2300      	movs	r3, #0
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3708      	adds	r7, #8
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	20009948 	.word	0x20009948

08017a84 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b088      	sub	sp, #32
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
 8017a8c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017a8e:	2301      	movs	r3, #1
 8017a90:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017a98:	69fb      	ldr	r3, [r7, #28]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	091b      	lsrs	r3, r3, #4
 8017a9e:	b2db      	uxtb	r3, r3
 8017aa0:	2b04      	cmp	r3, #4
 8017aa2:	d004      	beq.n	8017aae <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7f6 fdab 	bl	800e600 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	e123      	b.n	8017cf6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017aae:	69fb      	ldr	r3, [r7, #28]
 8017ab0:	781b      	ldrb	r3, [r3, #0]
 8017ab2:	f003 030f 	and.w	r3, r3, #15
 8017ab6:	b2db      	uxtb	r3, r3
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	885b      	ldrh	r3, [r3, #2]
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f5 f9e3 	bl	800ce90 <lwip_htons>
 8017aca:	4603      	mov	r3, r0
 8017acc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	891b      	ldrh	r3, [r3, #8]
 8017ad2:	8a3a      	ldrh	r2, [r7, #16]
 8017ad4:	429a      	cmp	r2, r3
 8017ad6:	d204      	bcs.n	8017ae2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017ad8:	8a3b      	ldrh	r3, [r7, #16]
 8017ada:	4619      	mov	r1, r3
 8017adc:	6878      	ldr	r0, [r7, #4]
 8017ade:	f7f6 fc09 	bl	800e2f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	895b      	ldrh	r3, [r3, #10]
 8017ae6:	8a7a      	ldrh	r2, [r7, #18]
 8017ae8:	429a      	cmp	r2, r3
 8017aea:	d807      	bhi.n	8017afc <ip4_input+0x78>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	891b      	ldrh	r3, [r3, #8]
 8017af0:	8a3a      	ldrh	r2, [r7, #16]
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d802      	bhi.n	8017afc <ip4_input+0x78>
 8017af6:	8a7b      	ldrh	r3, [r7, #18]
 8017af8:	2b13      	cmp	r3, #19
 8017afa:	d804      	bhi.n	8017b06 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f7f6 fd7f 	bl	800e600 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017b02:	2300      	movs	r3, #0
 8017b04:	e0f7      	b.n	8017cf6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	691b      	ldr	r3, [r3, #16]
 8017b0a:	4a7d      	ldr	r2, [pc, #500]	; (8017d00 <ip4_input+0x27c>)
 8017b0c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	68db      	ldr	r3, [r3, #12]
 8017b12:	4a7b      	ldr	r2, [pc, #492]	; (8017d00 <ip4_input+0x27c>)
 8017b14:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017b16:	4b7a      	ldr	r3, [pc, #488]	; (8017d00 <ip4_input+0x27c>)
 8017b18:	695b      	ldr	r3, [r3, #20]
 8017b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017b1e:	2be0      	cmp	r3, #224	; 0xe0
 8017b20:	d112      	bne.n	8017b48 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b28:	f003 0301 	and.w	r3, r3, #1
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d007      	beq.n	8017b42 <ip4_input+0xbe>
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	3304      	adds	r3, #4
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d002      	beq.n	8017b42 <ip4_input+0xbe>
      netif = inp;
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	61bb      	str	r3, [r7, #24]
 8017b40:	e02a      	b.n	8017b98 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017b42:	2300      	movs	r3, #0
 8017b44:	61bb      	str	r3, [r7, #24]
 8017b46:	e027      	b.n	8017b98 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017b48:	6838      	ldr	r0, [r7, #0]
 8017b4a:	f7ff ff71 	bl	8017a30 <ip4_input_accept>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d002      	beq.n	8017b5a <ip4_input+0xd6>
      netif = inp;
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	61bb      	str	r3, [r7, #24]
 8017b58:	e01e      	b.n	8017b98 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017b5e:	4b68      	ldr	r3, [pc, #416]	; (8017d00 <ip4_input+0x27c>)
 8017b60:	695b      	ldr	r3, [r3, #20]
 8017b62:	b2db      	uxtb	r3, r3
 8017b64:	2b7f      	cmp	r3, #127	; 0x7f
 8017b66:	d017      	beq.n	8017b98 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017b68:	4b66      	ldr	r3, [pc, #408]	; (8017d04 <ip4_input+0x280>)
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	61bb      	str	r3, [r7, #24]
 8017b6e:	e00e      	b.n	8017b8e <ip4_input+0x10a>
          if (netif == inp) {
 8017b70:	69ba      	ldr	r2, [r7, #24]
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d006      	beq.n	8017b86 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017b78:	69b8      	ldr	r0, [r7, #24]
 8017b7a:	f7ff ff59 	bl	8017a30 <ip4_input_accept>
 8017b7e:	4603      	mov	r3, r0
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d108      	bne.n	8017b96 <ip4_input+0x112>
 8017b84:	e000      	b.n	8017b88 <ip4_input+0x104>
            continue;
 8017b86:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017b88:	69bb      	ldr	r3, [r7, #24]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	61bb      	str	r3, [r7, #24]
 8017b8e:	69bb      	ldr	r3, [r7, #24]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d1ed      	bne.n	8017b70 <ip4_input+0xec>
 8017b94:	e000      	b.n	8017b98 <ip4_input+0x114>
            break;
 8017b96:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017b98:	69bb      	ldr	r3, [r7, #24]
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d111      	bne.n	8017bc2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017b9e:	69fb      	ldr	r3, [r7, #28]
 8017ba0:	7a5b      	ldrb	r3, [r3, #9]
 8017ba2:	2b11      	cmp	r3, #17
 8017ba4:	d10d      	bne.n	8017bc2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017ba6:	8a7b      	ldrh	r3, [r7, #18]
 8017ba8:	69fa      	ldr	r2, [r7, #28]
 8017baa:	4413      	add	r3, r2
 8017bac:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	885b      	ldrh	r3, [r3, #2]
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017bb8:	d103      	bne.n	8017bc2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d017      	beq.n	8017bf8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017bc8:	4b4d      	ldr	r3, [pc, #308]	; (8017d00 <ip4_input+0x27c>)
 8017bca:	691b      	ldr	r3, [r3, #16]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d013      	beq.n	8017bf8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017bd0:	4b4b      	ldr	r3, [pc, #300]	; (8017d00 <ip4_input+0x27c>)
 8017bd2:	691b      	ldr	r3, [r3, #16]
 8017bd4:	6839      	ldr	r1, [r7, #0]
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f000 f96e 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d105      	bne.n	8017bee <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017be2:	4b47      	ldr	r3, [pc, #284]	; (8017d00 <ip4_input+0x27c>)
 8017be4:	691b      	ldr	r3, [r3, #16]
 8017be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017bea:	2be0      	cmp	r3, #224	; 0xe0
 8017bec:	d104      	bne.n	8017bf8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f7f6 fd06 	bl	800e600 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	e07e      	b.n	8017cf6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d104      	bne.n	8017c08 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f7f6 fcfe 	bl	800e600 <pbuf_free>
    return ERR_OK;
 8017c04:	2300      	movs	r3, #0
 8017c06:	e076      	b.n	8017cf6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017c08:	69fb      	ldr	r3, [r7, #28]
 8017c0a:	88db      	ldrh	r3, [r3, #6]
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	461a      	mov	r2, r3
 8017c10:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017c14:	4013      	ands	r3, r2
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d00b      	beq.n	8017c32 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017c1a:	6878      	ldr	r0, [r7, #4]
 8017c1c:	f000 fc92 	bl	8018544 <ip4_reass>
 8017c20:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d101      	bne.n	8017c2c <ip4_input+0x1a8>
      return ERR_OK;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	e064      	b.n	8017cf6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017c32:	4a33      	ldr	r2, [pc, #204]	; (8017d00 <ip4_input+0x27c>)
 8017c34:	69bb      	ldr	r3, [r7, #24]
 8017c36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017c38:	4a31      	ldr	r2, [pc, #196]	; (8017d00 <ip4_input+0x27c>)
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017c3e:	4a30      	ldr	r2, [pc, #192]	; (8017d00 <ip4_input+0x27c>)
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017c44:	69fb      	ldr	r3, [r7, #28]
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	f003 030f 	and.w	r3, r3, #15
 8017c4c:	b2db      	uxtb	r3, r3
 8017c4e:	009b      	lsls	r3, r3, #2
 8017c50:	b2db      	uxtb	r3, r3
 8017c52:	b29a      	uxth	r2, r3
 8017c54:	4b2a      	ldr	r3, [pc, #168]	; (8017d00 <ip4_input+0x27c>)
 8017c56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017c58:	8a7b      	ldrh	r3, [r7, #18]
 8017c5a:	4619      	mov	r1, r3
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f7f6 fc49 	bl	800e4f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	7a5b      	ldrb	r3, [r3, #9]
 8017c66:	2b11      	cmp	r3, #17
 8017c68:	d006      	beq.n	8017c78 <ip4_input+0x1f4>
 8017c6a:	2b11      	cmp	r3, #17
 8017c6c:	dc13      	bgt.n	8017c96 <ip4_input+0x212>
 8017c6e:	2b01      	cmp	r3, #1
 8017c70:	d00c      	beq.n	8017c8c <ip4_input+0x208>
 8017c72:	2b06      	cmp	r3, #6
 8017c74:	d005      	beq.n	8017c82 <ip4_input+0x1fe>
 8017c76:	e00e      	b.n	8017c96 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017c78:	6839      	ldr	r1, [r7, #0]
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f7fc faea 	bl	8014254 <udp_input>
        break;
 8017c80:	e026      	b.n	8017cd0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017c82:	6839      	ldr	r1, [r7, #0]
 8017c84:	6878      	ldr	r0, [r7, #4]
 8017c86:	f7f8 faff 	bl	8010288 <tcp_input>
        break;
 8017c8a:	e021      	b.n	8017cd0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017c8c:	6839      	ldr	r1, [r7, #0]
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f7ff fcd0 	bl	8017634 <icmp_input>
        break;
 8017c94:	e01c      	b.n	8017cd0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c96:	4b1a      	ldr	r3, [pc, #104]	; (8017d00 <ip4_input+0x27c>)
 8017c98:	695b      	ldr	r3, [r3, #20]
 8017c9a:	69b9      	ldr	r1, [r7, #24]
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	f000 f90b 	bl	8017eb8 <ip4_addr_isbroadcast_u32>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d10f      	bne.n	8017cc8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017ca8:	4b15      	ldr	r3, [pc, #84]	; (8017d00 <ip4_input+0x27c>)
 8017caa:	695b      	ldr	r3, [r3, #20]
 8017cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017cb0:	2be0      	cmp	r3, #224	; 0xe0
 8017cb2:	d009      	beq.n	8017cc8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017cb8:	4619      	mov	r1, r3
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f7f6 fc8d 	bl	800e5da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017cc0:	2102      	movs	r1, #2
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f7ff fdba 	bl	801783c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017cc8:	6878      	ldr	r0, [r7, #4]
 8017cca:	f7f6 fc99 	bl	800e600 <pbuf_free>
        break;
 8017cce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017cd0:	4b0b      	ldr	r3, [pc, #44]	; (8017d00 <ip4_input+0x27c>)
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017cd6:	4b0a      	ldr	r3, [pc, #40]	; (8017d00 <ip4_input+0x27c>)
 8017cd8:	2200      	movs	r2, #0
 8017cda:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017cdc:	4b08      	ldr	r3, [pc, #32]	; (8017d00 <ip4_input+0x27c>)
 8017cde:	2200      	movs	r2, #0
 8017ce0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017ce2:	4b07      	ldr	r3, [pc, #28]	; (8017d00 <ip4_input+0x27c>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017ce8:	4b05      	ldr	r3, [pc, #20]	; (8017d00 <ip4_input+0x27c>)
 8017cea:	2200      	movs	r2, #0
 8017cec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017cee:	4b04      	ldr	r3, [pc, #16]	; (8017d00 <ip4_input+0x27c>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017cf4:	2300      	movs	r3, #0
}
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	3720      	adds	r7, #32
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	bf00      	nop
 8017d00:	20009948 	.word	0x20009948
 8017d04:	2000d06c 	.word	0x2000d06c

08017d08 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b08a      	sub	sp, #40	; 0x28
 8017d0c:	af04      	add	r7, sp, #16
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
 8017d14:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017d16:	68bb      	ldr	r3, [r7, #8]
 8017d18:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d009      	beq.n	8017d34 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d003      	beq.n	8017d2e <ip4_output_if+0x26>
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d102      	bne.n	8017d34 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d30:	3304      	adds	r3, #4
 8017d32:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017d34:	78fa      	ldrb	r2, [r7, #3]
 8017d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d38:	9302      	str	r3, [sp, #8]
 8017d3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017d3e:	9301      	str	r3, [sp, #4]
 8017d40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	4613      	mov	r3, r2
 8017d48:	687a      	ldr	r2, [r7, #4]
 8017d4a:	6979      	ldr	r1, [r7, #20]
 8017d4c:	68f8      	ldr	r0, [r7, #12]
 8017d4e:	f000 f805 	bl	8017d5c <ip4_output_if_src>
 8017d52:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	3718      	adds	r7, #24
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b088      	sub	sp, #32
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	60f8      	str	r0, [r7, #12]
 8017d64:	60b9      	str	r1, [r7, #8]
 8017d66:	607a      	str	r2, [r7, #4]
 8017d68:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	7b9b      	ldrb	r3, [r3, #14]
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d006      	beq.n	8017d80 <ip4_output_if_src+0x24>
 8017d72:	4b4b      	ldr	r3, [pc, #300]	; (8017ea0 <ip4_output_if_src+0x144>)
 8017d74:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017d78:	494a      	ldr	r1, [pc, #296]	; (8017ea4 <ip4_output_if_src+0x148>)
 8017d7a:	484b      	ldr	r0, [pc, #300]	; (8017ea8 <ip4_output_if_src+0x14c>)
 8017d7c:	f001 fa94 	bl	80192a8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d060      	beq.n	8017e48 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017d86:	2314      	movs	r3, #20
 8017d88:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017d8a:	2114      	movs	r1, #20
 8017d8c:	68f8      	ldr	r0, [r7, #12]
 8017d8e:	f7f6 fba1 	bl	800e4d4 <pbuf_add_header>
 8017d92:	4603      	mov	r3, r0
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d002      	beq.n	8017d9e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d98:	f06f 0301 	mvn.w	r3, #1
 8017d9c:	e07c      	b.n	8017e98 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	895b      	ldrh	r3, [r3, #10]
 8017da8:	2b13      	cmp	r3, #19
 8017daa:	d806      	bhi.n	8017dba <ip4_output_if_src+0x5e>
 8017dac:	4b3c      	ldr	r3, [pc, #240]	; (8017ea0 <ip4_output_if_src+0x144>)
 8017dae:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017db2:	493e      	ldr	r1, [pc, #248]	; (8017eac <ip4_output_if_src+0x150>)
 8017db4:	483c      	ldr	r0, [pc, #240]	; (8017ea8 <ip4_output_if_src+0x14c>)
 8017db6:	f001 fa77 	bl	80192a8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017dba:	69fb      	ldr	r3, [r7, #28]
 8017dbc:	78fa      	ldrb	r2, [r7, #3]
 8017dbe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017dc0:	69fb      	ldr	r3, [r7, #28]
 8017dc2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017dc6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	681a      	ldr	r2, [r3, #0]
 8017dcc:	69fb      	ldr	r3, [r7, #28]
 8017dce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017dd0:	8b7b      	ldrh	r3, [r7, #26]
 8017dd2:	089b      	lsrs	r3, r3, #2
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	b2db      	uxtb	r3, r3
 8017dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ddc:	b2da      	uxtb	r2, r3
 8017dde:	69fb      	ldr	r3, [r7, #28]
 8017de0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017de8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	891b      	ldrh	r3, [r3, #8]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7f5 f84e 	bl	800ce90 <lwip_htons>
 8017df4:	4603      	mov	r3, r0
 8017df6:	461a      	mov	r2, r3
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017dfc:	69fb      	ldr	r3, [r7, #28]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	719a      	strb	r2, [r3, #6]
 8017e02:	2200      	movs	r2, #0
 8017e04:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017e06:	4b2a      	ldr	r3, [pc, #168]	; (8017eb0 <ip4_output_if_src+0x154>)
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7f5 f840 	bl	800ce90 <lwip_htons>
 8017e10:	4603      	mov	r3, r0
 8017e12:	461a      	mov	r2, r3
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017e18:	4b25      	ldr	r3, [pc, #148]	; (8017eb0 <ip4_output_if_src+0x154>)
 8017e1a:	881b      	ldrh	r3, [r3, #0]
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	4b23      	ldr	r3, [pc, #140]	; (8017eb0 <ip4_output_if_src+0x154>)
 8017e22:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d104      	bne.n	8017e34 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017e2a:	4b22      	ldr	r3, [pc, #136]	; (8017eb4 <ip4_output_if_src+0x158>)
 8017e2c:	681a      	ldr	r2, [r3, #0]
 8017e2e:	69fb      	ldr	r3, [r7, #28]
 8017e30:	60da      	str	r2, [r3, #12]
 8017e32:	e003      	b.n	8017e3c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017e34:	68bb      	ldr	r3, [r7, #8]
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	69fb      	ldr	r3, [r7, #28]
 8017e3a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017e3c:	69fb      	ldr	r3, [r7, #28]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	729a      	strb	r2, [r3, #10]
 8017e42:	2200      	movs	r2, #0
 8017e44:	72da      	strb	r2, [r3, #11]
 8017e46:	e00f      	b.n	8017e68 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	895b      	ldrh	r3, [r3, #10]
 8017e4c:	2b13      	cmp	r3, #19
 8017e4e:	d802      	bhi.n	8017e56 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e50:	f06f 0301 	mvn.w	r3, #1
 8017e54:	e020      	b.n	8017e98 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	685b      	ldr	r3, [r3, #4]
 8017e5a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017e5c:	69fb      	ldr	r3, [r7, #28]
 8017e5e:	691b      	ldr	r3, [r3, #16]
 8017e60:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017e62:	f107 0314 	add.w	r3, r7, #20
 8017e66:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d00c      	beq.n	8017e8a <ip4_output_if_src+0x12e>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	891a      	ldrh	r2, [r3, #8]
 8017e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d906      	bls.n	8017e8a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017e7c:	687a      	ldr	r2, [r7, #4]
 8017e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e80:	68f8      	ldr	r0, [r7, #12]
 8017e82:	f000 fd4d 	bl	8018920 <ip4_frag>
 8017e86:	4603      	mov	r3, r0
 8017e88:	e006      	b.n	8017e98 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8c:	695b      	ldr	r3, [r3, #20]
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	68f9      	ldr	r1, [r7, #12]
 8017e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e94:	4798      	blx	r3
 8017e96:	4603      	mov	r3, r0
}
 8017e98:	4618      	mov	r0, r3
 8017e9a:	3720      	adds	r7, #32
 8017e9c:	46bd      	mov	sp, r7
 8017e9e:	bd80      	pop	{r7, pc}
 8017ea0:	0801d0e8 	.word	0x0801d0e8
 8017ea4:	0801d11c 	.word	0x0801d11c
 8017ea8:	0801d128 	.word	0x0801d128
 8017eac:	0801d150 	.word	0x0801d150
 8017eb0:	20004c5a 	.word	0x20004c5a
 8017eb4:	0801d6cc 	.word	0x0801d6cc

08017eb8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017eb8:	b480      	push	{r7}
 8017eba:	b085      	sub	sp, #20
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ecc:	d002      	beq.n	8017ed4 <ip4_addr_isbroadcast_u32+0x1c>
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d101      	bne.n	8017ed8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	e02a      	b.n	8017f2e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ede:	f003 0302 	and.w	r3, r3, #2
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d101      	bne.n	8017eea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	e021      	b.n	8017f2e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017eea:	683b      	ldr	r3, [r7, #0]
 8017eec:	3304      	adds	r3, #4
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d101      	bne.n	8017efa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	e019      	b.n	8017f2e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017efa:	68fa      	ldr	r2, [r7, #12]
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	3304      	adds	r3, #4
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	405a      	eors	r2, r3
 8017f04:	683b      	ldr	r3, [r7, #0]
 8017f06:	3308      	adds	r3, #8
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	4013      	ands	r3, r2
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d10d      	bne.n	8017f2c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	3308      	adds	r3, #8
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	43da      	mvns	r2, r3
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	3308      	adds	r3, #8
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017f24:	429a      	cmp	r2, r3
 8017f26:	d101      	bne.n	8017f2c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017f28:	2301      	movs	r3, #1
 8017f2a:	e000      	b.n	8017f2e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017f2c:	2300      	movs	r3, #0
  }
}
 8017f2e:	4618      	mov	r0, r3
 8017f30:	3714      	adds	r7, #20
 8017f32:	46bd      	mov	sp, r7
 8017f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f38:	4770      	bx	lr
	...

08017f3c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017f42:	2300      	movs	r3, #0
 8017f44:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017f46:	4b12      	ldr	r3, [pc, #72]	; (8017f90 <ip_reass_tmr+0x54>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017f4c:	e018      	b.n	8017f80 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	7fdb      	ldrb	r3, [r3, #31]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d00b      	beq.n	8017f6e <ip_reass_tmr+0x32>
      r->timer--;
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	7fdb      	ldrb	r3, [r3, #31]
 8017f5a:	3b01      	subs	r3, #1
 8017f5c:	b2da      	uxtb	r2, r3
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	60fb      	str	r3, [r7, #12]
 8017f6c:	e008      	b.n	8017f80 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017f78:	68b9      	ldr	r1, [r7, #8]
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f000 f80a 	bl	8017f94 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d1e3      	bne.n	8017f4e <ip_reass_tmr+0x12>
    }
  }
}
 8017f86:	bf00      	nop
 8017f88:	bf00      	nop
 8017f8a:	3710      	adds	r7, #16
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}
 8017f90:	20004c5c 	.word	0x20004c5c

08017f94 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b088      	sub	sp, #32
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
 8017f9c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017fa2:	683a      	ldr	r2, [r7, #0]
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d105      	bne.n	8017fb6 <ip_reass_free_complete_datagram+0x22>
 8017faa:	4b45      	ldr	r3, [pc, #276]	; (80180c0 <ip_reass_free_complete_datagram+0x12c>)
 8017fac:	22ab      	movs	r2, #171	; 0xab
 8017fae:	4945      	ldr	r1, [pc, #276]	; (80180c4 <ip_reass_free_complete_datagram+0x130>)
 8017fb0:	4845      	ldr	r0, [pc, #276]	; (80180c8 <ip_reass_free_complete_datagram+0x134>)
 8017fb2:	f001 f979 	bl	80192a8 <iprintf>
  if (prev != NULL) {
 8017fb6:	683b      	ldr	r3, [r7, #0]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00a      	beq.n	8017fd2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	687a      	ldr	r2, [r7, #4]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d005      	beq.n	8017fd2 <ip_reass_free_complete_datagram+0x3e>
 8017fc6:	4b3e      	ldr	r3, [pc, #248]	; (80180c0 <ip_reass_free_complete_datagram+0x12c>)
 8017fc8:	22ad      	movs	r2, #173	; 0xad
 8017fca:	4940      	ldr	r1, [pc, #256]	; (80180cc <ip_reass_free_complete_datagram+0x138>)
 8017fcc:	483e      	ldr	r0, [pc, #248]	; (80180c8 <ip_reass_free_complete_datagram+0x134>)
 8017fce:	f001 f96b 	bl	80192a8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	685b      	ldr	r3, [r3, #4]
 8017fd8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017fda:	697b      	ldr	r3, [r7, #20]
 8017fdc:	889b      	ldrh	r3, [r3, #4]
 8017fde:	b29b      	uxth	r3, r3
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d12a      	bne.n	801803a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017fea:	697b      	ldr	r3, [r7, #20]
 8017fec:	681a      	ldr	r2, [r3, #0]
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017ff2:	69bb      	ldr	r3, [r7, #24]
 8017ff4:	6858      	ldr	r0, [r3, #4]
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	3308      	adds	r3, #8
 8017ffa:	2214      	movs	r2, #20
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	f001 f8e2 	bl	80191c6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018002:	2101      	movs	r1, #1
 8018004:	69b8      	ldr	r0, [r7, #24]
 8018006:	f7ff fc29 	bl	801785c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801800a:	69b8      	ldr	r0, [r7, #24]
 801800c:	f7f6 fb86 	bl	800e71c <pbuf_clen>
 8018010:	4603      	mov	r3, r0
 8018012:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018014:	8bfa      	ldrh	r2, [r7, #30]
 8018016:	8a7b      	ldrh	r3, [r7, #18]
 8018018:	4413      	add	r3, r2
 801801a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801801e:	db05      	blt.n	801802c <ip_reass_free_complete_datagram+0x98>
 8018020:	4b27      	ldr	r3, [pc, #156]	; (80180c0 <ip_reass_free_complete_datagram+0x12c>)
 8018022:	22bc      	movs	r2, #188	; 0xbc
 8018024:	492a      	ldr	r1, [pc, #168]	; (80180d0 <ip_reass_free_complete_datagram+0x13c>)
 8018026:	4828      	ldr	r0, [pc, #160]	; (80180c8 <ip_reass_free_complete_datagram+0x134>)
 8018028:	f001 f93e 	bl	80192a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801802c:	8bfa      	ldrh	r2, [r7, #30]
 801802e:	8a7b      	ldrh	r3, [r7, #18]
 8018030:	4413      	add	r3, r2
 8018032:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018034:	69b8      	ldr	r0, [r7, #24]
 8018036:	f7f6 fae3 	bl	800e600 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	685b      	ldr	r3, [r3, #4]
 801803e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018040:	e01f      	b.n	8018082 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018042:	69bb      	ldr	r3, [r7, #24]
 8018044:	685b      	ldr	r3, [r3, #4]
 8018046:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018048:	69bb      	ldr	r3, [r7, #24]
 801804a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801804c:	697b      	ldr	r3, [r7, #20]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018052:	68f8      	ldr	r0, [r7, #12]
 8018054:	f7f6 fb62 	bl	800e71c <pbuf_clen>
 8018058:	4603      	mov	r3, r0
 801805a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801805c:	8bfa      	ldrh	r2, [r7, #30]
 801805e:	8a7b      	ldrh	r3, [r7, #18]
 8018060:	4413      	add	r3, r2
 8018062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018066:	db05      	blt.n	8018074 <ip_reass_free_complete_datagram+0xe0>
 8018068:	4b15      	ldr	r3, [pc, #84]	; (80180c0 <ip_reass_free_complete_datagram+0x12c>)
 801806a:	22cc      	movs	r2, #204	; 0xcc
 801806c:	4918      	ldr	r1, [pc, #96]	; (80180d0 <ip_reass_free_complete_datagram+0x13c>)
 801806e:	4816      	ldr	r0, [pc, #88]	; (80180c8 <ip_reass_free_complete_datagram+0x134>)
 8018070:	f001 f91a 	bl	80192a8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018074:	8bfa      	ldrh	r2, [r7, #30]
 8018076:	8a7b      	ldrh	r3, [r7, #18]
 8018078:	4413      	add	r3, r2
 801807a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801807c:	68f8      	ldr	r0, [r7, #12]
 801807e:	f7f6 fabf 	bl	800e600 <pbuf_free>
  while (p != NULL) {
 8018082:	69bb      	ldr	r3, [r7, #24]
 8018084:	2b00      	cmp	r3, #0
 8018086:	d1dc      	bne.n	8018042 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018088:	6839      	ldr	r1, [r7, #0]
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f000 f8c2 	bl	8018214 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018090:	4b10      	ldr	r3, [pc, #64]	; (80180d4 <ip_reass_free_complete_datagram+0x140>)
 8018092:	881b      	ldrh	r3, [r3, #0]
 8018094:	8bfa      	ldrh	r2, [r7, #30]
 8018096:	429a      	cmp	r2, r3
 8018098:	d905      	bls.n	80180a6 <ip_reass_free_complete_datagram+0x112>
 801809a:	4b09      	ldr	r3, [pc, #36]	; (80180c0 <ip_reass_free_complete_datagram+0x12c>)
 801809c:	22d2      	movs	r2, #210	; 0xd2
 801809e:	490e      	ldr	r1, [pc, #56]	; (80180d8 <ip_reass_free_complete_datagram+0x144>)
 80180a0:	4809      	ldr	r0, [pc, #36]	; (80180c8 <ip_reass_free_complete_datagram+0x134>)
 80180a2:	f001 f901 	bl	80192a8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80180a6:	4b0b      	ldr	r3, [pc, #44]	; (80180d4 <ip_reass_free_complete_datagram+0x140>)
 80180a8:	881a      	ldrh	r2, [r3, #0]
 80180aa:	8bfb      	ldrh	r3, [r7, #30]
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	b29a      	uxth	r2, r3
 80180b0:	4b08      	ldr	r3, [pc, #32]	; (80180d4 <ip_reass_free_complete_datagram+0x140>)
 80180b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80180b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80180b6:	4618      	mov	r0, r3
 80180b8:	3720      	adds	r7, #32
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}
 80180be:	bf00      	nop
 80180c0:	0801d180 	.word	0x0801d180
 80180c4:	0801d1bc 	.word	0x0801d1bc
 80180c8:	0801d1c8 	.word	0x0801d1c8
 80180cc:	0801d1f0 	.word	0x0801d1f0
 80180d0:	0801d204 	.word	0x0801d204
 80180d4:	20004c60 	.word	0x20004c60
 80180d8:	0801d224 	.word	0x0801d224

080180dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b08a      	sub	sp, #40	; 0x28
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
 80180e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80180e6:	2300      	movs	r3, #0
 80180e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80180ea:	2300      	movs	r3, #0
 80180ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80180ee:	2300      	movs	r3, #0
 80180f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80180f2:	2300      	movs	r3, #0
 80180f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80180f6:	2300      	movs	r3, #0
 80180f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80180fa:	4b28      	ldr	r3, [pc, #160]	; (801819c <ip_reass_remove_oldest_datagram+0xc0>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018100:	e030      	b.n	8018164 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018104:	695a      	ldr	r2, [r3, #20]
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	68db      	ldr	r3, [r3, #12]
 801810a:	429a      	cmp	r2, r3
 801810c:	d10c      	bne.n	8018128 <ip_reass_remove_oldest_datagram+0x4c>
 801810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018110:	699a      	ldr	r2, [r3, #24]
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	691b      	ldr	r3, [r3, #16]
 8018116:	429a      	cmp	r2, r3
 8018118:	d106      	bne.n	8018128 <ip_reass_remove_oldest_datagram+0x4c>
 801811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811c:	899a      	ldrh	r2, [r3, #12]
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	889b      	ldrh	r3, [r3, #4]
 8018122:	b29b      	uxth	r3, r3
 8018124:	429a      	cmp	r2, r3
 8018126:	d014      	beq.n	8018152 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	3301      	adds	r3, #1
 801812c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801812e:	6a3b      	ldr	r3, [r7, #32]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d104      	bne.n	801813e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018136:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	61bb      	str	r3, [r7, #24]
 801813c:	e009      	b.n	8018152 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018140:	7fda      	ldrb	r2, [r3, #31]
 8018142:	6a3b      	ldr	r3, [r7, #32]
 8018144:	7fdb      	ldrb	r3, [r3, #31]
 8018146:	429a      	cmp	r2, r3
 8018148:	d803      	bhi.n	8018152 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801814e:	69fb      	ldr	r3, [r7, #28]
 8018150:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	2b00      	cmp	r3, #0
 8018158:	d001      	beq.n	801815e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018166:	2b00      	cmp	r3, #0
 8018168:	d1cb      	bne.n	8018102 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801816a:	6a3b      	ldr	r3, [r7, #32]
 801816c:	2b00      	cmp	r3, #0
 801816e:	d008      	beq.n	8018182 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018170:	69b9      	ldr	r1, [r7, #24]
 8018172:	6a38      	ldr	r0, [r7, #32]
 8018174:	f7ff ff0e 	bl	8017f94 <ip_reass_free_complete_datagram>
 8018178:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801817a:	697a      	ldr	r2, [r7, #20]
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	4413      	add	r3, r2
 8018180:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018182:	697a      	ldr	r2, [r7, #20]
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	429a      	cmp	r2, r3
 8018188:	da02      	bge.n	8018190 <ip_reass_remove_oldest_datagram+0xb4>
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	2b01      	cmp	r3, #1
 801818e:	dcac      	bgt.n	80180ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018190:	697b      	ldr	r3, [r7, #20]
}
 8018192:	4618      	mov	r0, r3
 8018194:	3728      	adds	r7, #40	; 0x28
 8018196:	46bd      	mov	sp, r7
 8018198:	bd80      	pop	{r7, pc}
 801819a:	bf00      	nop
 801819c:	20004c5c 	.word	0x20004c5c

080181a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b084      	sub	sp, #16
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
 80181a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80181aa:	2004      	movs	r0, #4
 80181ac:	f7f5 fb26 	bl	800d7fc <memp_malloc>
 80181b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d110      	bne.n	80181da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80181b8:	6839      	ldr	r1, [r7, #0]
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7ff ff8e 	bl	80180dc <ip_reass_remove_oldest_datagram>
 80181c0:	4602      	mov	r2, r0
 80181c2:	683b      	ldr	r3, [r7, #0]
 80181c4:	4293      	cmp	r3, r2
 80181c6:	dc03      	bgt.n	80181d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80181c8:	2004      	movs	r0, #4
 80181ca:	f7f5 fb17 	bl	800d7fc <memp_malloc>
 80181ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d101      	bne.n	80181da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80181d6:	2300      	movs	r3, #0
 80181d8:	e016      	b.n	8018208 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80181da:	2220      	movs	r2, #32
 80181dc:	2100      	movs	r1, #0
 80181de:	68f8      	ldr	r0, [r7, #12]
 80181e0:	f000 ffff 	bl	80191e2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	220f      	movs	r2, #15
 80181e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80181ea:	4b09      	ldr	r3, [pc, #36]	; (8018210 <ip_reass_enqueue_new_datagram+0x70>)
 80181ec:	681a      	ldr	r2, [r3, #0]
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80181f2:	4a07      	ldr	r2, [pc, #28]	; (8018210 <ip_reass_enqueue_new_datagram+0x70>)
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	3308      	adds	r3, #8
 80181fc:	2214      	movs	r2, #20
 80181fe:	6879      	ldr	r1, [r7, #4]
 8018200:	4618      	mov	r0, r3
 8018202:	f000 ffe0 	bl	80191c6 <memcpy>
  return ipr;
 8018206:	68fb      	ldr	r3, [r7, #12]
}
 8018208:	4618      	mov	r0, r3
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	20004c5c 	.word	0x20004c5c

08018214 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801821e:	4b10      	ldr	r3, [pc, #64]	; (8018260 <ip_reass_dequeue_datagram+0x4c>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	429a      	cmp	r2, r3
 8018226:	d104      	bne.n	8018232 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	4a0c      	ldr	r2, [pc, #48]	; (8018260 <ip_reass_dequeue_datagram+0x4c>)
 801822e:	6013      	str	r3, [r2, #0]
 8018230:	e00d      	b.n	801824e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d106      	bne.n	8018246 <ip_reass_dequeue_datagram+0x32>
 8018238:	4b0a      	ldr	r3, [pc, #40]	; (8018264 <ip_reass_dequeue_datagram+0x50>)
 801823a:	f240 1245 	movw	r2, #325	; 0x145
 801823e:	490a      	ldr	r1, [pc, #40]	; (8018268 <ip_reass_dequeue_datagram+0x54>)
 8018240:	480a      	ldr	r0, [pc, #40]	; (801826c <ip_reass_dequeue_datagram+0x58>)
 8018242:	f001 f831 	bl	80192a8 <iprintf>
    prev->next = ipr->next;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681a      	ldr	r2, [r3, #0]
 801824a:	683b      	ldr	r3, [r7, #0]
 801824c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801824e:	6879      	ldr	r1, [r7, #4]
 8018250:	2004      	movs	r0, #4
 8018252:	f7f5 fb25 	bl	800d8a0 <memp_free>
}
 8018256:	bf00      	nop
 8018258:	3708      	adds	r7, #8
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	20004c5c 	.word	0x20004c5c
 8018264:	0801d180 	.word	0x0801d180
 8018268:	0801d248 	.word	0x0801d248
 801826c:	0801d1c8 	.word	0x0801d1c8

08018270 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b08c      	sub	sp, #48	; 0x30
 8018274:	af00      	add	r7, sp, #0
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801827c:	2300      	movs	r3, #0
 801827e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018280:	2301      	movs	r3, #1
 8018282:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	685b      	ldr	r3, [r3, #4]
 8018288:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801828a:	69fb      	ldr	r3, [r7, #28]
 801828c:	885b      	ldrh	r3, [r3, #2]
 801828e:	b29b      	uxth	r3, r3
 8018290:	4618      	mov	r0, r3
 8018292:	f7f4 fdfd 	bl	800ce90 <lwip_htons>
 8018296:	4603      	mov	r3, r0
 8018298:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	f003 030f 	and.w	r3, r3, #15
 80182a2:	b2db      	uxtb	r3, r3
 80182a4:	009b      	lsls	r3, r3, #2
 80182a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80182a8:	7e7b      	ldrb	r3, [r7, #25]
 80182aa:	b29b      	uxth	r3, r3
 80182ac:	8b7a      	ldrh	r2, [r7, #26]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d202      	bcs.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80182b2:	f04f 33ff 	mov.w	r3, #4294967295
 80182b6:	e135      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80182b8:	7e7b      	ldrb	r3, [r7, #25]
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	8b7a      	ldrh	r2, [r7, #26]
 80182be:	1ad3      	subs	r3, r2, r3
 80182c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80182c2:	69fb      	ldr	r3, [r7, #28]
 80182c4:	88db      	ldrh	r3, [r3, #6]
 80182c6:	b29b      	uxth	r3, r3
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7f4 fde1 	bl	800ce90 <lwip_htons>
 80182ce:	4603      	mov	r3, r0
 80182d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	00db      	lsls	r3, r3, #3
 80182d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	685b      	ldr	r3, [r3, #4]
 80182de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80182e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182e2:	2200      	movs	r2, #0
 80182e4:	701a      	strb	r2, [r3, #0]
 80182e6:	2200      	movs	r2, #0
 80182e8:	705a      	strb	r2, [r3, #1]
 80182ea:	2200      	movs	r2, #0
 80182ec:	709a      	strb	r2, [r3, #2]
 80182ee:	2200      	movs	r2, #0
 80182f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80182f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f4:	8afa      	ldrh	r2, [r7, #22]
 80182f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80182f8:	8afa      	ldrh	r2, [r7, #22]
 80182fa:	8b7b      	ldrh	r3, [r7, #26]
 80182fc:	4413      	add	r3, r2
 80182fe:	b29a      	uxth	r2, r3
 8018300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018302:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018306:	88db      	ldrh	r3, [r3, #6]
 8018308:	b29b      	uxth	r3, r3
 801830a:	8afa      	ldrh	r2, [r7, #22]
 801830c:	429a      	cmp	r2, r3
 801830e:	d902      	bls.n	8018316 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018310:	f04f 33ff 	mov.w	r3, #4294967295
 8018314:	e106      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	685b      	ldr	r3, [r3, #4]
 801831a:	627b      	str	r3, [r7, #36]	; 0x24
 801831c:	e068      	b.n	80183f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801831e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018320:	685b      	ldr	r3, [r3, #4]
 8018322:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018326:	889b      	ldrh	r3, [r3, #4]
 8018328:	b29a      	uxth	r2, r3
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	889b      	ldrh	r3, [r3, #4]
 801832e:	b29b      	uxth	r3, r3
 8018330:	429a      	cmp	r2, r3
 8018332:	d235      	bcs.n	80183a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018338:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833c:	2b00      	cmp	r3, #0
 801833e:	d020      	beq.n	8018382 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018342:	889b      	ldrh	r3, [r3, #4]
 8018344:	b29a      	uxth	r2, r3
 8018346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018348:	88db      	ldrh	r3, [r3, #6]
 801834a:	b29b      	uxth	r3, r3
 801834c:	429a      	cmp	r2, r3
 801834e:	d307      	bcc.n	8018360 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018352:	88db      	ldrh	r3, [r3, #6]
 8018354:	b29a      	uxth	r2, r3
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	889b      	ldrh	r3, [r3, #4]
 801835a:	b29b      	uxth	r3, r3
 801835c:	429a      	cmp	r2, r3
 801835e:	d902      	bls.n	8018366 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018360:	f04f 33ff 	mov.w	r3, #4294967295
 8018364:	e0de      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018368:	68ba      	ldr	r2, [r7, #8]
 801836a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801836e:	88db      	ldrh	r3, [r3, #6]
 8018370:	b29a      	uxth	r2, r3
 8018372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018374:	889b      	ldrh	r3, [r3, #4]
 8018376:	b29b      	uxth	r3, r3
 8018378:	429a      	cmp	r2, r3
 801837a:	d03d      	beq.n	80183f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801837c:	2300      	movs	r3, #0
 801837e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018380:	e03a      	b.n	80183f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018384:	88db      	ldrh	r3, [r3, #6]
 8018386:	b29a      	uxth	r2, r3
 8018388:	693b      	ldr	r3, [r7, #16]
 801838a:	889b      	ldrh	r3, [r3, #4]
 801838c:	b29b      	uxth	r3, r3
 801838e:	429a      	cmp	r2, r3
 8018390:	d902      	bls.n	8018398 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018392:	f04f 33ff 	mov.w	r3, #4294967295
 8018396:	e0c5      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	68ba      	ldr	r2, [r7, #8]
 801839c:	605a      	str	r2, [r3, #4]
      break;
 801839e:	e02b      	b.n	80183f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80183a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183a2:	889b      	ldrh	r3, [r3, #4]
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	889b      	ldrh	r3, [r3, #4]
 80183aa:	b29b      	uxth	r3, r3
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d102      	bne.n	80183b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183b0:	f04f 33ff 	mov.w	r3, #4294967295
 80183b4:	e0b6      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80183b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183b8:	889b      	ldrh	r3, [r3, #4]
 80183ba:	b29a      	uxth	r2, r3
 80183bc:	693b      	ldr	r3, [r7, #16]
 80183be:	88db      	ldrh	r3, [r3, #6]
 80183c0:	b29b      	uxth	r3, r3
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d202      	bcs.n	80183cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183c6:	f04f 33ff 	mov.w	r3, #4294967295
 80183ca:	e0ab      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80183cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d009      	beq.n	80183e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80183d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d4:	88db      	ldrh	r3, [r3, #6]
 80183d6:	b29a      	uxth	r2, r3
 80183d8:	693b      	ldr	r3, [r7, #16]
 80183da:	889b      	ldrh	r3, [r3, #4]
 80183dc:	b29b      	uxth	r3, r3
 80183de:	429a      	cmp	r2, r3
 80183e0:	d001      	beq.n	80183e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80183e2:	2300      	movs	r3, #0
 80183e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80183e6:	693b      	ldr	r3, [r7, #16]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80183ec:	693b      	ldr	r3, [r7, #16]
 80183ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80183f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d193      	bne.n	801831e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80183f6:	e000      	b.n	80183fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80183f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80183fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d12d      	bne.n	801845c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018402:	2b00      	cmp	r3, #0
 8018404:	d01c      	beq.n	8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018408:	88db      	ldrh	r3, [r3, #6]
 801840a:	b29a      	uxth	r2, r3
 801840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801840e:	889b      	ldrh	r3, [r3, #4]
 8018410:	b29b      	uxth	r3, r3
 8018412:	429a      	cmp	r2, r3
 8018414:	d906      	bls.n	8018424 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018416:	4b45      	ldr	r3, [pc, #276]	; (801852c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018418:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801841c:	4944      	ldr	r1, [pc, #272]	; (8018530 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801841e:	4845      	ldr	r0, [pc, #276]	; (8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018420:	f000 ff42 	bl	80192a8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018426:	68ba      	ldr	r2, [r7, #8]
 8018428:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	b29a      	uxth	r2, r3
 8018430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018432:	889b      	ldrh	r3, [r3, #4]
 8018434:	b29b      	uxth	r3, r3
 8018436:	429a      	cmp	r2, r3
 8018438:	d010      	beq.n	801845c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801843a:	2300      	movs	r3, #0
 801843c:	623b      	str	r3, [r7, #32]
 801843e:	e00d      	b.n	801845c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d006      	beq.n	8018456 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018448:	4b38      	ldr	r3, [pc, #224]	; (801852c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801844a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801844e:	493a      	ldr	r1, [pc, #232]	; (8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018450:	4838      	ldr	r0, [pc, #224]	; (8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018452:	f000 ff29 	bl	80192a8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	68ba      	ldr	r2, [r7, #8]
 801845a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d105      	bne.n	801846e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	7f9b      	ldrb	r3, [r3, #30]
 8018466:	f003 0301 	and.w	r3, r3, #1
 801846a:	2b00      	cmp	r3, #0
 801846c:	d059      	beq.n	8018522 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801846e:	6a3b      	ldr	r3, [r7, #32]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d04f      	beq.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d006      	beq.n	801848a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	685b      	ldr	r3, [r3, #4]
 8018480:	685b      	ldr	r3, [r3, #4]
 8018482:	889b      	ldrh	r3, [r3, #4]
 8018484:	b29b      	uxth	r3, r3
 8018486:	2b00      	cmp	r3, #0
 8018488:	d002      	beq.n	8018490 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801848a:	2300      	movs	r3, #0
 801848c:	623b      	str	r3, [r7, #32]
 801848e:	e041      	b.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018492:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801849a:	e012      	b.n	80184c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80184a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a4:	88db      	ldrh	r3, [r3, #6]
 80184a6:	b29a      	uxth	r2, r3
 80184a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184aa:	889b      	ldrh	r3, [r3, #4]
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d002      	beq.n	80184b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80184b2:	2300      	movs	r3, #0
 80184b4:	623b      	str	r3, [r7, #32]
            break;
 80184b6:	e007      	b.n	80184c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80184b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80184bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80184c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d1e9      	bne.n	801849c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80184c8:	6a3b      	ldr	r3, [r7, #32]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d022      	beq.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d106      	bne.n	80184e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80184d6:	4b15      	ldr	r3, [pc, #84]	; (801852c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184d8:	f240 12df 	movw	r2, #479	; 0x1df
 80184dc:	4917      	ldr	r1, [pc, #92]	; (801853c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80184de:	4815      	ldr	r0, [pc, #84]	; (8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184e0:	f000 fee2 	bl	80192a8 <iprintf>
          LWIP_ASSERT("sanity check",
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	685b      	ldr	r3, [r3, #4]
 80184e8:	685b      	ldr	r3, [r3, #4]
 80184ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d106      	bne.n	80184fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80184f0:	4b0e      	ldr	r3, [pc, #56]	; (801852c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80184f6:	4911      	ldr	r1, [pc, #68]	; (801853c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80184f8:	480e      	ldr	r0, [pc, #56]	; (8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184fa:	f000 fed5 	bl	80192a8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80184fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d006      	beq.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018506:	4b09      	ldr	r3, [pc, #36]	; (801852c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018508:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801850c:	490c      	ldr	r1, [pc, #48]	; (8018540 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801850e:	4809      	ldr	r0, [pc, #36]	; (8018534 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018510:	f000 feca 	bl	80192a8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018514:	6a3b      	ldr	r3, [r7, #32]
 8018516:	2b00      	cmp	r3, #0
 8018518:	bf14      	ite	ne
 801851a:	2301      	movne	r3, #1
 801851c:	2300      	moveq	r3, #0
 801851e:	b2db      	uxtb	r3, r3
 8018520:	e000      	b.n	8018524 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018522:	2300      	movs	r3, #0
}
 8018524:	4618      	mov	r0, r3
 8018526:	3730      	adds	r7, #48	; 0x30
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}
 801852c:	0801d180 	.word	0x0801d180
 8018530:	0801d264 	.word	0x0801d264
 8018534:	0801d1c8 	.word	0x0801d1c8
 8018538:	0801d284 	.word	0x0801d284
 801853c:	0801d2bc 	.word	0x0801d2bc
 8018540:	0801d2cc 	.word	0x0801d2cc

08018544 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b08e      	sub	sp, #56	; 0x38
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	685b      	ldr	r3, [r3, #4]
 8018550:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	f003 030f 	and.w	r3, r3, #15
 801855a:	b2db      	uxtb	r3, r3
 801855c:	009b      	lsls	r3, r3, #2
 801855e:	b2db      	uxtb	r3, r3
 8018560:	2b14      	cmp	r3, #20
 8018562:	f040 8167 	bne.w	8018834 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018568:	88db      	ldrh	r3, [r3, #6]
 801856a:	b29b      	uxth	r3, r3
 801856c:	4618      	mov	r0, r3
 801856e:	f7f4 fc8f 	bl	800ce90 <lwip_htons>
 8018572:	4603      	mov	r3, r0
 8018574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018578:	b29b      	uxth	r3, r3
 801857a:	00db      	lsls	r3, r3, #3
 801857c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018580:	885b      	ldrh	r3, [r3, #2]
 8018582:	b29b      	uxth	r3, r3
 8018584:	4618      	mov	r0, r3
 8018586:	f7f4 fc83 	bl	800ce90 <lwip_htons>
 801858a:	4603      	mov	r3, r0
 801858c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	f003 030f 	and.w	r3, r3, #15
 8018596:	b2db      	uxtb	r3, r3
 8018598:	009b      	lsls	r3, r3, #2
 801859a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801859e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80185a6:	429a      	cmp	r2, r3
 80185a8:	f0c0 8146 	bcc.w	8018838 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80185ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80185b4:	1ad3      	subs	r3, r2, r3
 80185b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f7f6 f8af 	bl	800e71c <pbuf_clen>
 80185be:	4603      	mov	r3, r0
 80185c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80185c2:	4b9f      	ldr	r3, [pc, #636]	; (8018840 <ip4_reass+0x2fc>)
 80185c4:	881b      	ldrh	r3, [r3, #0]
 80185c6:	461a      	mov	r2, r3
 80185c8:	8c3b      	ldrh	r3, [r7, #32]
 80185ca:	4413      	add	r3, r2
 80185cc:	2b0a      	cmp	r3, #10
 80185ce:	dd10      	ble.n	80185f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80185d0:	8c3b      	ldrh	r3, [r7, #32]
 80185d2:	4619      	mov	r1, r3
 80185d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185d6:	f7ff fd81 	bl	80180dc <ip_reass_remove_oldest_datagram>
 80185da:	4603      	mov	r3, r0
 80185dc:	2b00      	cmp	r3, #0
 80185de:	f000 812d 	beq.w	801883c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80185e2:	4b97      	ldr	r3, [pc, #604]	; (8018840 <ip4_reass+0x2fc>)
 80185e4:	881b      	ldrh	r3, [r3, #0]
 80185e6:	461a      	mov	r2, r3
 80185e8:	8c3b      	ldrh	r3, [r7, #32]
 80185ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80185ec:	2b0a      	cmp	r3, #10
 80185ee:	f300 8125 	bgt.w	801883c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80185f2:	4b94      	ldr	r3, [pc, #592]	; (8018844 <ip4_reass+0x300>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	633b      	str	r3, [r7, #48]	; 0x30
 80185f8:	e015      	b.n	8018626 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80185fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185fc:	695a      	ldr	r2, [r3, #20]
 80185fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	429a      	cmp	r2, r3
 8018604:	d10c      	bne.n	8018620 <ip4_reass+0xdc>
 8018606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018608:	699a      	ldr	r2, [r3, #24]
 801860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801860c:	691b      	ldr	r3, [r3, #16]
 801860e:	429a      	cmp	r2, r3
 8018610:	d106      	bne.n	8018620 <ip4_reass+0xdc>
 8018612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018614:	899a      	ldrh	r2, [r3, #12]
 8018616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018618:	889b      	ldrh	r3, [r3, #4]
 801861a:	b29b      	uxth	r3, r3
 801861c:	429a      	cmp	r2, r3
 801861e:	d006      	beq.n	801862e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	633b      	str	r3, [r7, #48]	; 0x30
 8018626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018628:	2b00      	cmp	r3, #0
 801862a:	d1e6      	bne.n	80185fa <ip4_reass+0xb6>
 801862c:	e000      	b.n	8018630 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801862e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018632:	2b00      	cmp	r3, #0
 8018634:	d109      	bne.n	801864a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018636:	8c3b      	ldrh	r3, [r7, #32]
 8018638:	4619      	mov	r1, r3
 801863a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801863c:	f7ff fdb0 	bl	80181a0 <ip_reass_enqueue_new_datagram>
 8018640:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018644:	2b00      	cmp	r3, #0
 8018646:	d11c      	bne.n	8018682 <ip4_reass+0x13e>
      goto nullreturn;
 8018648:	e109      	b.n	801885e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864c:	88db      	ldrh	r3, [r3, #6]
 801864e:	b29b      	uxth	r3, r3
 8018650:	4618      	mov	r0, r3
 8018652:	f7f4 fc1d 	bl	800ce90 <lwip_htons>
 8018656:	4603      	mov	r3, r0
 8018658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801865c:	2b00      	cmp	r3, #0
 801865e:	d110      	bne.n	8018682 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018662:	89db      	ldrh	r3, [r3, #14]
 8018664:	4618      	mov	r0, r3
 8018666:	f7f4 fc13 	bl	800ce90 <lwip_htons>
 801866a:	4603      	mov	r3, r0
 801866c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018670:	2b00      	cmp	r3, #0
 8018672:	d006      	beq.n	8018682 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018676:	3308      	adds	r3, #8
 8018678:	2214      	movs	r2, #20
 801867a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801867c:	4618      	mov	r0, r3
 801867e:	f000 fda2 	bl	80191c6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018684:	88db      	ldrh	r3, [r3, #6]
 8018686:	b29b      	uxth	r3, r3
 8018688:	f003 0320 	and.w	r3, r3, #32
 801868c:	2b00      	cmp	r3, #0
 801868e:	bf0c      	ite	eq
 8018690:	2301      	moveq	r3, #1
 8018692:	2300      	movne	r3, #0
 8018694:	b2db      	uxtb	r3, r3
 8018696:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018698:	69fb      	ldr	r3, [r7, #28]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d00e      	beq.n	80186bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801869e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80186a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186a2:	4413      	add	r3, r2
 80186a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80186a6:	8b7a      	ldrh	r2, [r7, #26]
 80186a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80186aa:	429a      	cmp	r2, r3
 80186ac:	f0c0 80a0 	bcc.w	80187f0 <ip4_reass+0x2ac>
 80186b0:	8b7b      	ldrh	r3, [r7, #26]
 80186b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80186b6:	4293      	cmp	r3, r2
 80186b8:	f200 809a 	bhi.w	80187f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80186bc:	69fa      	ldr	r2, [r7, #28]
 80186be:	6879      	ldr	r1, [r7, #4]
 80186c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80186c2:	f7ff fdd5 	bl	8018270 <ip_reass_chain_frag_into_datagram_and_validate>
 80186c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80186c8:	697b      	ldr	r3, [r7, #20]
 80186ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80186ce:	f000 8091 	beq.w	80187f4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80186d2:	4b5b      	ldr	r3, [pc, #364]	; (8018840 <ip4_reass+0x2fc>)
 80186d4:	881a      	ldrh	r2, [r3, #0]
 80186d6:	8c3b      	ldrh	r3, [r7, #32]
 80186d8:	4413      	add	r3, r2
 80186da:	b29a      	uxth	r2, r3
 80186dc:	4b58      	ldr	r3, [pc, #352]	; (8018840 <ip4_reass+0x2fc>)
 80186de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80186e0:	69fb      	ldr	r3, [r7, #28]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d00d      	beq.n	8018702 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80186e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80186e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80186ea:	4413      	add	r3, r2
 80186ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80186ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f0:	8a7a      	ldrh	r2, [r7, #18]
 80186f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80186f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f6:	7f9b      	ldrb	r3, [r3, #30]
 80186f8:	f043 0301 	orr.w	r3, r3, #1
 80186fc:	b2da      	uxtb	r2, r3
 80186fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018700:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018702:	697b      	ldr	r3, [r7, #20]
 8018704:	2b01      	cmp	r3, #1
 8018706:	d171      	bne.n	80187ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	8b9b      	ldrh	r3, [r3, #28]
 801870c:	3314      	adds	r3, #20
 801870e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018712:	685b      	ldr	r3, [r3, #4]
 8018714:	685b      	ldr	r3, [r3, #4]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871c:	685b      	ldr	r3, [r3, #4]
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018724:	3308      	adds	r3, #8
 8018726:	2214      	movs	r2, #20
 8018728:	4619      	mov	r1, r3
 801872a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801872c:	f000 fd4b 	bl	80191c6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018730:	8a3b      	ldrh	r3, [r7, #16]
 8018732:	4618      	mov	r0, r3
 8018734:	f7f4 fbac 	bl	800ce90 <lwip_htons>
 8018738:	4603      	mov	r3, r0
 801873a:	461a      	mov	r2, r3
 801873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801873e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018742:	2200      	movs	r2, #0
 8018744:	719a      	strb	r2, [r3, #6]
 8018746:	2200      	movs	r2, #0
 8018748:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801874c:	2200      	movs	r2, #0
 801874e:	729a      	strb	r2, [r3, #10]
 8018750:	2200      	movs	r2, #0
 8018752:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801875a:	e00d      	b.n	8018778 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801875c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801875e:	685b      	ldr	r3, [r3, #4]
 8018760:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018762:	2114      	movs	r1, #20
 8018764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018766:	f7f5 fec5 	bl	800e4f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801876a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f7f6 f815 	bl	800e79c <pbuf_cat>
      r = iprh->next_pbuf;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801877a:	2b00      	cmp	r3, #0
 801877c:	d1ee      	bne.n	801875c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801877e:	4b31      	ldr	r3, [pc, #196]	; (8018844 <ip4_reass+0x300>)
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018784:	429a      	cmp	r2, r3
 8018786:	d102      	bne.n	801878e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018788:	2300      	movs	r3, #0
 801878a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801878c:	e010      	b.n	80187b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801878e:	4b2d      	ldr	r3, [pc, #180]	; (8018844 <ip4_reass+0x300>)
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018794:	e007      	b.n	80187a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801879c:	429a      	cmp	r2, r3
 801879e:	d006      	beq.n	80187ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80187a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80187a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d1f4      	bne.n	8018796 <ip4_reass+0x252>
 80187ac:	e000      	b.n	80187b0 <ip4_reass+0x26c>
          break;
 80187ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80187b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80187b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80187b4:	f7ff fd2e 	bl	8018214 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80187b8:	6878      	ldr	r0, [r7, #4]
 80187ba:	f7f5 ffaf 	bl	800e71c <pbuf_clen>
 80187be:	4603      	mov	r3, r0
 80187c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80187c2:	4b1f      	ldr	r3, [pc, #124]	; (8018840 <ip4_reass+0x2fc>)
 80187c4:	881b      	ldrh	r3, [r3, #0]
 80187c6:	8c3a      	ldrh	r2, [r7, #32]
 80187c8:	429a      	cmp	r2, r3
 80187ca:	d906      	bls.n	80187da <ip4_reass+0x296>
 80187cc:	4b1e      	ldr	r3, [pc, #120]	; (8018848 <ip4_reass+0x304>)
 80187ce:	f240 229b 	movw	r2, #667	; 0x29b
 80187d2:	491e      	ldr	r1, [pc, #120]	; (801884c <ip4_reass+0x308>)
 80187d4:	481e      	ldr	r0, [pc, #120]	; (8018850 <ip4_reass+0x30c>)
 80187d6:	f000 fd67 	bl	80192a8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80187da:	4b19      	ldr	r3, [pc, #100]	; (8018840 <ip4_reass+0x2fc>)
 80187dc:	881a      	ldrh	r2, [r3, #0]
 80187de:	8c3b      	ldrh	r3, [r7, #32]
 80187e0:	1ad3      	subs	r3, r2, r3
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	4b16      	ldr	r3, [pc, #88]	; (8018840 <ip4_reass+0x2fc>)
 80187e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	e03c      	b.n	8018866 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80187ec:	2300      	movs	r3, #0
 80187ee:	e03a      	b.n	8018866 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80187f0:	bf00      	nop
 80187f2:	e000      	b.n	80187f6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80187f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80187f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d106      	bne.n	801880a <ip4_reass+0x2c6>
 80187fc:	4b12      	ldr	r3, [pc, #72]	; (8018848 <ip4_reass+0x304>)
 80187fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018802:	4914      	ldr	r1, [pc, #80]	; (8018854 <ip4_reass+0x310>)
 8018804:	4812      	ldr	r0, [pc, #72]	; (8018850 <ip4_reass+0x30c>)
 8018806:	f000 fd4f 	bl	80192a8 <iprintf>
  if (ipr->p == NULL) {
 801880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801880c:	685b      	ldr	r3, [r3, #4]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d124      	bne.n	801885c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018812:	4b0c      	ldr	r3, [pc, #48]	; (8018844 <ip4_reass+0x300>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018818:	429a      	cmp	r2, r3
 801881a:	d006      	beq.n	801882a <ip4_reass+0x2e6>
 801881c:	4b0a      	ldr	r3, [pc, #40]	; (8018848 <ip4_reass+0x304>)
 801881e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018822:	490d      	ldr	r1, [pc, #52]	; (8018858 <ip4_reass+0x314>)
 8018824:	480a      	ldr	r0, [pc, #40]	; (8018850 <ip4_reass+0x30c>)
 8018826:	f000 fd3f 	bl	80192a8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801882a:	2100      	movs	r1, #0
 801882c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801882e:	f7ff fcf1 	bl	8018214 <ip_reass_dequeue_datagram>
 8018832:	e014      	b.n	801885e <ip4_reass+0x31a>
    goto nullreturn;
 8018834:	bf00      	nop
 8018836:	e012      	b.n	801885e <ip4_reass+0x31a>
    goto nullreturn;
 8018838:	bf00      	nop
 801883a:	e010      	b.n	801885e <ip4_reass+0x31a>
      goto nullreturn;
 801883c:	bf00      	nop
 801883e:	e00e      	b.n	801885e <ip4_reass+0x31a>
 8018840:	20004c60 	.word	0x20004c60
 8018844:	20004c5c 	.word	0x20004c5c
 8018848:	0801d180 	.word	0x0801d180
 801884c:	0801d2f0 	.word	0x0801d2f0
 8018850:	0801d1c8 	.word	0x0801d1c8
 8018854:	0801d30c 	.word	0x0801d30c
 8018858:	0801d318 	.word	0x0801d318
  }

nullreturn:
 801885c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	f7f5 fece 	bl	800e600 <pbuf_free>
  return NULL;
 8018864:	2300      	movs	r3, #0
}
 8018866:	4618      	mov	r0, r3
 8018868:	3738      	adds	r7, #56	; 0x38
 801886a:	46bd      	mov	sp, r7
 801886c:	bd80      	pop	{r7, pc}
 801886e:	bf00      	nop

08018870 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018870:	b580      	push	{r7, lr}
 8018872:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018874:	2005      	movs	r0, #5
 8018876:	f7f4 ffc1 	bl	800d7fc <memp_malloc>
 801887a:	4603      	mov	r3, r0
}
 801887c:	4618      	mov	r0, r3
 801887e:	bd80      	pop	{r7, pc}

08018880 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b082      	sub	sp, #8
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d106      	bne.n	801889c <ip_frag_free_pbuf_custom_ref+0x1c>
 801888e:	4b07      	ldr	r3, [pc, #28]	; (80188ac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018890:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018894:	4906      	ldr	r1, [pc, #24]	; (80188b0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018896:	4807      	ldr	r0, [pc, #28]	; (80188b4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018898:	f000 fd06 	bl	80192a8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801889c:	6879      	ldr	r1, [r7, #4]
 801889e:	2005      	movs	r0, #5
 80188a0:	f7f4 fffe 	bl	800d8a0 <memp_free>
}
 80188a4:	bf00      	nop
 80188a6:	3708      	adds	r7, #8
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	0801d180 	.word	0x0801d180
 80188b0:	0801d338 	.word	0x0801d338
 80188b4:	0801d1c8 	.word	0x0801d1c8

080188b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d106      	bne.n	80188d8 <ipfrag_free_pbuf_custom+0x20>
 80188ca:	4b11      	ldr	r3, [pc, #68]	; (8018910 <ipfrag_free_pbuf_custom+0x58>)
 80188cc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80188d0:	4910      	ldr	r1, [pc, #64]	; (8018914 <ipfrag_free_pbuf_custom+0x5c>)
 80188d2:	4811      	ldr	r0, [pc, #68]	; (8018918 <ipfrag_free_pbuf_custom+0x60>)
 80188d4:	f000 fce8 	bl	80192a8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80188d8:	68fa      	ldr	r2, [r7, #12]
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	429a      	cmp	r2, r3
 80188de:	d006      	beq.n	80188ee <ipfrag_free_pbuf_custom+0x36>
 80188e0:	4b0b      	ldr	r3, [pc, #44]	; (8018910 <ipfrag_free_pbuf_custom+0x58>)
 80188e2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80188e6:	490d      	ldr	r1, [pc, #52]	; (801891c <ipfrag_free_pbuf_custom+0x64>)
 80188e8:	480b      	ldr	r0, [pc, #44]	; (8018918 <ipfrag_free_pbuf_custom+0x60>)
 80188ea:	f000 fcdd 	bl	80192a8 <iprintf>
  if (pcr->original != NULL) {
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	695b      	ldr	r3, [r3, #20]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d004      	beq.n	8018900 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	695b      	ldr	r3, [r3, #20]
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7f5 fe80 	bl	800e600 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f7ff ffbd 	bl	8018880 <ip_frag_free_pbuf_custom_ref>
}
 8018906:	bf00      	nop
 8018908:	3710      	adds	r7, #16
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	0801d180 	.word	0x0801d180
 8018914:	0801d344 	.word	0x0801d344
 8018918:	0801d1c8 	.word	0x0801d1c8
 801891c:	0801d350 	.word	0x0801d350

08018920 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b094      	sub	sp, #80	; 0x50
 8018924:	af02      	add	r7, sp, #8
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	60b9      	str	r1, [r7, #8]
 801892a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801892c:	2300      	movs	r3, #0
 801892e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018936:	3b14      	subs	r3, #20
 8018938:	2b00      	cmp	r3, #0
 801893a:	da00      	bge.n	801893e <ip4_frag+0x1e>
 801893c:	3307      	adds	r3, #7
 801893e:	10db      	asrs	r3, r3, #3
 8018940:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018942:	2314      	movs	r3, #20
 8018944:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	685b      	ldr	r3, [r3, #4]
 801894a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801894e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	f003 030f 	and.w	r3, r3, #15
 8018958:	b2db      	uxtb	r3, r3
 801895a:	009b      	lsls	r3, r3, #2
 801895c:	b2db      	uxtb	r3, r3
 801895e:	2b14      	cmp	r3, #20
 8018960:	d002      	beq.n	8018968 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018962:	f06f 0305 	mvn.w	r3, #5
 8018966:	e110      	b.n	8018b8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	895b      	ldrh	r3, [r3, #10]
 801896c:	2b13      	cmp	r3, #19
 801896e:	d809      	bhi.n	8018984 <ip4_frag+0x64>
 8018970:	4b88      	ldr	r3, [pc, #544]	; (8018b94 <ip4_frag+0x274>)
 8018972:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018976:	4988      	ldr	r1, [pc, #544]	; (8018b98 <ip4_frag+0x278>)
 8018978:	4888      	ldr	r0, [pc, #544]	; (8018b9c <ip4_frag+0x27c>)
 801897a:	f000 fc95 	bl	80192a8 <iprintf>
 801897e:	f06f 0305 	mvn.w	r3, #5
 8018982:	e102      	b.n	8018b8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018986:	88db      	ldrh	r3, [r3, #6]
 8018988:	b29b      	uxth	r3, r3
 801898a:	4618      	mov	r0, r3
 801898c:	f7f4 fa80 	bl	800ce90 <lwip_htons>
 8018990:	4603      	mov	r3, r0
 8018992:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018994:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018996:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801899a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801899e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80189a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80189a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	891b      	ldrh	r3, [r3, #8]
 80189aa:	3b14      	subs	r3, #20
 80189ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80189b0:	e0e1      	b.n	8018b76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80189b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80189b4:	00db      	lsls	r3, r3, #3
 80189b6:	b29b      	uxth	r3, r3
 80189b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80189bc:	4293      	cmp	r3, r2
 80189be:	bf28      	it	cs
 80189c0:	4613      	movcs	r3, r2
 80189c2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80189c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80189c8:	2114      	movs	r1, #20
 80189ca:	200e      	movs	r0, #14
 80189cc:	f7f5 fb34 	bl	800e038 <pbuf_alloc>
 80189d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80189d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	f000 80d5 	beq.w	8018b84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80189da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189dc:	895b      	ldrh	r3, [r3, #10]
 80189de:	2b13      	cmp	r3, #19
 80189e0:	d806      	bhi.n	80189f0 <ip4_frag+0xd0>
 80189e2:	4b6c      	ldr	r3, [pc, #432]	; (8018b94 <ip4_frag+0x274>)
 80189e4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80189e8:	496d      	ldr	r1, [pc, #436]	; (8018ba0 <ip4_frag+0x280>)
 80189ea:	486c      	ldr	r0, [pc, #432]	; (8018b9c <ip4_frag+0x27c>)
 80189ec:	f000 fc5c 	bl	80192a8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80189f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f2:	685b      	ldr	r3, [r3, #4]
 80189f4:	2214      	movs	r2, #20
 80189f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80189f8:	4618      	mov	r0, r3
 80189fa:	f000 fbe4 	bl	80191c6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80189fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018a04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018a0a:	e064      	b.n	8018ad6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	895a      	ldrh	r2, [r3, #10]
 8018a10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a12:	1ad3      	subs	r3, r2, r3
 8018a14:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	895b      	ldrh	r3, [r3, #10]
 8018a1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018a1c:	429a      	cmp	r2, r3
 8018a1e:	d906      	bls.n	8018a2e <ip4_frag+0x10e>
 8018a20:	4b5c      	ldr	r3, [pc, #368]	; (8018b94 <ip4_frag+0x274>)
 8018a22:	f240 322d 	movw	r2, #813	; 0x32d
 8018a26:	495f      	ldr	r1, [pc, #380]	; (8018ba4 <ip4_frag+0x284>)
 8018a28:	485c      	ldr	r0, [pc, #368]	; (8018b9c <ip4_frag+0x27c>)
 8018a2a:	f000 fc3d 	bl	80192a8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018a2e:	8bfa      	ldrh	r2, [r7, #30]
 8018a30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018a34:	4293      	cmp	r3, r2
 8018a36:	bf28      	it	cs
 8018a38:	4613      	movcs	r3, r2
 8018a3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018a3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d105      	bne.n	8018a52 <ip4_frag+0x132>
        poff = 0;
 8018a46:	2300      	movs	r3, #0
 8018a48:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018a4a:	68fb      	ldr	r3, [r7, #12]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	60fb      	str	r3, [r7, #12]
        continue;
 8018a50:	e041      	b.n	8018ad6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018a52:	f7ff ff0d 	bl	8018870 <ip_frag_alloc_pbuf_custom_ref>
 8018a56:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018a58:	69bb      	ldr	r3, [r7, #24]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d103      	bne.n	8018a66 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a60:	f7f5 fdce 	bl	800e600 <pbuf_free>
        goto memerr;
 8018a64:	e08f      	b.n	8018b86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018a66:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018a6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a6e:	4413      	add	r3, r2
 8018a70:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018a74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018a78:	9201      	str	r2, [sp, #4]
 8018a7a:	9300      	str	r3, [sp, #0]
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	2241      	movs	r2, #65	; 0x41
 8018a80:	2000      	movs	r0, #0
 8018a82:	f7f5 fc03 	bl	800e28c <pbuf_alloced_custom>
 8018a86:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d106      	bne.n	8018a9c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018a8e:	69b8      	ldr	r0, [r7, #24]
 8018a90:	f7ff fef6 	bl	8018880 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018a96:	f7f5 fdb3 	bl	800e600 <pbuf_free>
        goto memerr;
 8018a9a:	e074      	b.n	8018b86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018a9c:	68f8      	ldr	r0, [r7, #12]
 8018a9e:	f7f5 fe55 	bl	800e74c <pbuf_ref>
      pcr->original = p;
 8018aa2:	69bb      	ldr	r3, [r7, #24]
 8018aa4:	68fa      	ldr	r2, [r7, #12]
 8018aa6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018aa8:	69bb      	ldr	r3, [r7, #24]
 8018aaa:	4a3f      	ldr	r2, [pc, #252]	; (8018ba8 <ip4_frag+0x288>)
 8018aac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018aae:	6979      	ldr	r1, [r7, #20]
 8018ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ab2:	f7f5 fe73 	bl	800e79c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018ab6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018aba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018abe:	1ad3      	subs	r3, r2, r3
 8018ac0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018ac4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d004      	beq.n	8018ad6 <ip4_frag+0x1b6>
        poff = 0;
 8018acc:	2300      	movs	r3, #0
 8018ace:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018ad6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d196      	bne.n	8018a0c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018ade:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ae0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018ae4:	4413      	add	r3, r2
 8018ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018aec:	f1a3 0213 	sub.w	r2, r3, #19
 8018af0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018af4:	429a      	cmp	r2, r3
 8018af6:	bfcc      	ite	gt
 8018af8:	2301      	movgt	r3, #1
 8018afa:	2300      	movle	r3, #0
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018b00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018b0a:	6a3b      	ldr	r3, [r7, #32]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d002      	beq.n	8018b16 <ip4_frag+0x1f6>
 8018b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d003      	beq.n	8018b1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018b1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018b1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7f4 f9b5 	bl	800ce90 <lwip_htons>
 8018b26:	4603      	mov	r3, r0
 8018b28:	461a      	mov	r2, r3
 8018b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018b2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018b30:	3314      	adds	r3, #20
 8018b32:	b29b      	uxth	r3, r3
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7f4 f9ab 	bl	800ce90 <lwip_htons>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	461a      	mov	r2, r3
 8018b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b44:	2200      	movs	r2, #0
 8018b46:	729a      	strb	r2, [r3, #10]
 8018b48:	2200      	movs	r2, #0
 8018b4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018b4c:	68bb      	ldr	r3, [r7, #8]
 8018b4e:	695b      	ldr	r3, [r3, #20]
 8018b50:	687a      	ldr	r2, [r7, #4]
 8018b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018b54:	68b8      	ldr	r0, [r7, #8]
 8018b56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b5a:	f7f5 fd51 	bl	800e600 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018b5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018b62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018b64:	1ad3      	subs	r3, r2, r3
 8018b66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018b6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018b70:	4413      	add	r3, r2
 8018b72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018b76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f47f af19 	bne.w	80189b2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018b80:	2300      	movs	r3, #0
 8018b82:	e002      	b.n	8018b8a <ip4_frag+0x26a>
      goto memerr;
 8018b84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	3748      	adds	r7, #72	; 0x48
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	bd80      	pop	{r7, pc}
 8018b92:	bf00      	nop
 8018b94:	0801d180 	.word	0x0801d180
 8018b98:	0801d35c 	.word	0x0801d35c
 8018b9c:	0801d1c8 	.word	0x0801d1c8
 8018ba0:	0801d378 	.word	0x0801d378
 8018ba4:	0801d398 	.word	0x0801d398
 8018ba8:	080188b9 	.word	0x080188b9

08018bac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b086      	sub	sp, #24
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
 8018bb4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018bb6:	230e      	movs	r3, #14
 8018bb8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	895b      	ldrh	r3, [r3, #10]
 8018bbe:	2b0e      	cmp	r3, #14
 8018bc0:	d96e      	bls.n	8018ca0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	7bdb      	ldrb	r3, [r3, #15]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d106      	bne.n	8018bd8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018bd0:	3301      	adds	r3, #1
 8018bd2:	b2da      	uxtb	r2, r3
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	7b1a      	ldrb	r2, [r3, #12]
 8018be2:	7b5b      	ldrb	r3, [r3, #13]
 8018be4:	021b      	lsls	r3, r3, #8
 8018be6:	4313      	orrs	r3, r2
 8018be8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	781b      	ldrb	r3, [r3, #0]
 8018bee:	f003 0301 	and.w	r3, r3, #1
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d023      	beq.n	8018c3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018bf6:	693b      	ldr	r3, [r7, #16]
 8018bf8:	781b      	ldrb	r3, [r3, #0]
 8018bfa:	2b01      	cmp	r3, #1
 8018bfc:	d10f      	bne.n	8018c1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018bfe:	693b      	ldr	r3, [r7, #16]
 8018c00:	785b      	ldrb	r3, [r3, #1]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d11b      	bne.n	8018c3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018c06:	693b      	ldr	r3, [r7, #16]
 8018c08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c0a:	2b5e      	cmp	r3, #94	; 0x5e
 8018c0c:	d117      	bne.n	8018c3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	7b5b      	ldrb	r3, [r3, #13]
 8018c12:	f043 0310 	orr.w	r3, r3, #16
 8018c16:	b2da      	uxtb	r2, r3
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	735a      	strb	r2, [r3, #13]
 8018c1c:	e00f      	b.n	8018c3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018c1e:	693b      	ldr	r3, [r7, #16]
 8018c20:	2206      	movs	r2, #6
 8018c22:	4928      	ldr	r1, [pc, #160]	; (8018cc4 <ethernet_input+0x118>)
 8018c24:	4618      	mov	r0, r3
 8018c26:	f000 fac0 	bl	80191aa <memcmp>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d106      	bne.n	8018c3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	7b5b      	ldrb	r3, [r3, #13]
 8018c34:	f043 0308 	orr.w	r3, r3, #8
 8018c38:	b2da      	uxtb	r2, r3
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018c3e:	89fb      	ldrh	r3, [r7, #14]
 8018c40:	2b08      	cmp	r3, #8
 8018c42:	d003      	beq.n	8018c4c <ethernet_input+0xa0>
 8018c44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018c48:	d014      	beq.n	8018c74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018c4a:	e032      	b.n	8018cb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018c4c:	683b      	ldr	r3, [r7, #0]
 8018c4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c52:	f003 0308 	and.w	r3, r3, #8
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d024      	beq.n	8018ca4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018c5a:	8afb      	ldrh	r3, [r7, #22]
 8018c5c:	4619      	mov	r1, r3
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f7f5 fc48 	bl	800e4f4 <pbuf_remove_header>
 8018c64:	4603      	mov	r3, r0
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d11e      	bne.n	8018ca8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018c6a:	6839      	ldr	r1, [r7, #0]
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f7fe ff09 	bl	8017a84 <ip4_input>
      break;
 8018c72:	e013      	b.n	8018c9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c7a:	f003 0308 	and.w	r3, r3, #8
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d014      	beq.n	8018cac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018c82:	8afb      	ldrh	r3, [r7, #22]
 8018c84:	4619      	mov	r1, r3
 8018c86:	6878      	ldr	r0, [r7, #4]
 8018c88:	f7f5 fc34 	bl	800e4f4 <pbuf_remove_header>
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d10e      	bne.n	8018cb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018c92:	6839      	ldr	r1, [r7, #0]
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f7fe f8a5 	bl	8016de4 <etharp_input>
      break;
 8018c9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	e00c      	b.n	8018cba <ethernet_input+0x10e>
    goto free_and_return;
 8018ca0:	bf00      	nop
 8018ca2:	e006      	b.n	8018cb2 <ethernet_input+0x106>
        goto free_and_return;
 8018ca4:	bf00      	nop
 8018ca6:	e004      	b.n	8018cb2 <ethernet_input+0x106>
        goto free_and_return;
 8018ca8:	bf00      	nop
 8018caa:	e002      	b.n	8018cb2 <ethernet_input+0x106>
        goto free_and_return;
 8018cac:	bf00      	nop
 8018cae:	e000      	b.n	8018cb2 <ethernet_input+0x106>
        goto free_and_return;
 8018cb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f7f5 fca4 	bl	800e600 <pbuf_free>
  return ERR_OK;
 8018cb8:	2300      	movs	r3, #0
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	3718      	adds	r7, #24
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	0801d6d4 	.word	0x0801d6d4

08018cc8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b086      	sub	sp, #24
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	60f8      	str	r0, [r7, #12]
 8018cd0:	60b9      	str	r1, [r7, #8]
 8018cd2:	607a      	str	r2, [r7, #4]
 8018cd4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018cd6:	8c3b      	ldrh	r3, [r7, #32]
 8018cd8:	4618      	mov	r0, r3
 8018cda:	f7f4 f8d9 	bl	800ce90 <lwip_htons>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018ce2:	210e      	movs	r1, #14
 8018ce4:	68b8      	ldr	r0, [r7, #8]
 8018ce6:	f7f5 fbf5 	bl	800e4d4 <pbuf_add_header>
 8018cea:	4603      	mov	r3, r0
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d125      	bne.n	8018d3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	685b      	ldr	r3, [r3, #4]
 8018cf4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018cf6:	693b      	ldr	r3, [r7, #16]
 8018cf8:	8afa      	ldrh	r2, [r7, #22]
 8018cfa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	2206      	movs	r2, #6
 8018d00:	6839      	ldr	r1, [r7, #0]
 8018d02:	4618      	mov	r0, r3
 8018d04:	f000 fa5f 	bl	80191c6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	3306      	adds	r3, #6
 8018d0c:	2206      	movs	r2, #6
 8018d0e:	6879      	ldr	r1, [r7, #4]
 8018d10:	4618      	mov	r0, r3
 8018d12:	f000 fa58 	bl	80191c6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018d1c:	2b06      	cmp	r3, #6
 8018d1e:	d006      	beq.n	8018d2e <ethernet_output+0x66>
 8018d20:	4b0a      	ldr	r3, [pc, #40]	; (8018d4c <ethernet_output+0x84>)
 8018d22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018d26:	490a      	ldr	r1, [pc, #40]	; (8018d50 <ethernet_output+0x88>)
 8018d28:	480a      	ldr	r0, [pc, #40]	; (8018d54 <ethernet_output+0x8c>)
 8018d2a:	f000 fabd 	bl	80192a8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	699b      	ldr	r3, [r3, #24]
 8018d32:	68b9      	ldr	r1, [r7, #8]
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	4798      	blx	r3
 8018d38:	4603      	mov	r3, r0
 8018d3a:	e002      	b.n	8018d42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018d3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018d3e:	f06f 0301 	mvn.w	r3, #1
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3718      	adds	r7, #24
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	0801d3a8 	.word	0x0801d3a8
 8018d50:	0801d3e0 	.word	0x0801d3e0
 8018d54:	0801d414 	.word	0x0801d414

08018d58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	2200      	movs	r2, #0
 8018d66:	2104      	movs	r1, #4
 8018d68:	4618      	mov	r0, r3
 8018d6a:	f7f0 fc3f 	bl	80095ec <osMessageQueueNew>
 8018d6e:	4602      	mov	r2, r0
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d102      	bne.n	8018d82 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018d80:	e000      	b.n	8018d84 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018d82:	2300      	movs	r3, #0
}
 8018d84:	4618      	mov	r0, r3
 8018d86:	3708      	adds	r7, #8
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	bd80      	pop	{r7, pc}

08018d8c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	b084      	sub	sp, #16
 8018d90:	af00      	add	r7, sp, #0
 8018d92:	6078      	str	r0, [r7, #4]
 8018d94:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	6818      	ldr	r0, [r3, #0]
 8018d9a:	4639      	mov	r1, r7
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	2200      	movs	r2, #0
 8018da0:	f7f0 fc98 	bl	80096d4 <osMessageQueuePut>
 8018da4:	4603      	mov	r3, r0
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d102      	bne.n	8018db0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018daa:	2300      	movs	r3, #0
 8018dac:	73fb      	strb	r3, [r7, #15]
 8018dae:	e001      	b.n	8018db4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018db0:	23ff      	movs	r3, #255	; 0xff
 8018db2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	3710      	adds	r7, #16
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd80      	pop	{r7, pc}

08018dc0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b086      	sub	sp, #24
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	60f8      	str	r0, [r7, #12]
 8018dc8:	60b9      	str	r1, [r7, #8]
 8018dca:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018dcc:	f7f0 f91e 	bl	800900c <osKernelGetTickCount>
 8018dd0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d013      	beq.n	8018e00 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	6818      	ldr	r0, [r3, #0]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2200      	movs	r2, #0
 8018de0:	68b9      	ldr	r1, [r7, #8]
 8018de2:	f7f0 fcd7 	bl	8009794 <osMessageQueueGet>
 8018de6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018de8:	693b      	ldr	r3, [r7, #16]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d105      	bne.n	8018dfa <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018dee:	f7f0 f90d 	bl	800900c <osKernelGetTickCount>
 8018df2:	4602      	mov	r2, r0
 8018df4:	697b      	ldr	r3, [r7, #20]
 8018df6:	1ad3      	subs	r3, r2, r3
 8018df8:	e00f      	b.n	8018e1a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8018dfe:	e00c      	b.n	8018e1a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	6818      	ldr	r0, [r3, #0]
 8018e04:	f04f 33ff 	mov.w	r3, #4294967295
 8018e08:	2200      	movs	r2, #0
 8018e0a:	68b9      	ldr	r1, [r7, #8]
 8018e0c:	f7f0 fcc2 	bl	8009794 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018e10:	f7f0 f8fc 	bl	800900c <osKernelGetTickCount>
 8018e14:	4602      	mov	r2, r0
 8018e16:	697b      	ldr	r3, [r7, #20]
 8018e18:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3718      	adds	r7, #24
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018e22:	b480      	push	{r7}
 8018e24:	b083      	sub	sp, #12
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d101      	bne.n	8018e36 <sys_mbox_valid+0x14>
    return 0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	e000      	b.n	8018e38 <sys_mbox_valid+0x16>
  else
    return 1;
 8018e36:	2301      	movs	r3, #1
}
 8018e38:	4618      	mov	r0, r3
 8018e3a:	370c      	adds	r7, #12
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e42:	4770      	bx	lr

08018e44 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018e48:	2000      	movs	r0, #0
 8018e4a:	f7f0 f9a1 	bl	8009190 <osMutexNew>
 8018e4e:	4603      	mov	r3, r0
 8018e50:	4a01      	ldr	r2, [pc, #4]	; (8018e58 <sys_init+0x14>)
 8018e52:	6013      	str	r3, [r2, #0]
#endif
}
 8018e54:	bf00      	nop
 8018e56:	bd80      	pop	{r7, pc}
 8018e58:	2000d0c4 	.word	0x2000d0c4

08018e5c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018e64:	2000      	movs	r0, #0
 8018e66:	f7f0 f993 	bl	8009190 <osMutexNew>
 8018e6a:	4602      	mov	r2, r0
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d102      	bne.n	8018e7e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018e78:	f04f 33ff 	mov.w	r3, #4294967295
 8018e7c:	e000      	b.n	8018e80 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018e7e:	2300      	movs	r3, #0
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	f04f 31ff 	mov.w	r1, #4294967295
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f7f0 f9ff 	bl	800929c <osMutexAcquire>
#endif
}
 8018e9e:	bf00      	nop
 8018ea0:	3708      	adds	r7, #8
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}

08018ea6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018ea6:	b580      	push	{r7, lr}
 8018ea8:	b082      	sub	sp, #8
 8018eaa:	af00      	add	r7, sp, #0
 8018eac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f7f0 fa3d 	bl	8009332 <osMutexRelease>
}
 8018eb8:	bf00      	nop
 8018eba:	3708      	adds	r7, #8
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd80      	pop	{r7, pc}

08018ec0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018ec0:	b580      	push	{r7, lr}
 8018ec2:	b08e      	sub	sp, #56	; 0x38
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	60f8      	str	r0, [r7, #12]
 8018ec8:	60b9      	str	r1, [r7, #8]
 8018eca:	607a      	str	r2, [r7, #4]
 8018ecc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018ece:	f107 0314 	add.w	r3, r7, #20
 8018ed2:	2224      	movs	r2, #36	; 0x24
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f000 f983 	bl	80191e2 <memset>
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	617b      	str	r3, [r7, #20]
 8018ee0:	683b      	ldr	r3, [r7, #0]
 8018ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018ee8:	f107 0314 	add.w	r3, r7, #20
 8018eec:	461a      	mov	r2, r3
 8018eee:	6879      	ldr	r1, [r7, #4]
 8018ef0:	68b8      	ldr	r0, [r7, #8]
 8018ef2:	f7f0 f8a0 	bl	8009036 <osThreadNew>
 8018ef6:	4603      	mov	r3, r0
#endif
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	3738      	adds	r7, #56	; 0x38
 8018efc:	46bd      	mov	sp, r7
 8018efe:	bd80      	pop	{r7, pc}

08018f00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018f04:	4b04      	ldr	r3, [pc, #16]	; (8018f18 <sys_arch_protect+0x18>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	f04f 31ff 	mov.w	r1, #4294967295
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	f7f0 f9c5 	bl	800929c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018f12:	2301      	movs	r3, #1
}
 8018f14:	4618      	mov	r0, r3
 8018f16:	bd80      	pop	{r7, pc}
 8018f18:	2000d0c4 	.word	0x2000d0c4

08018f1c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b082      	sub	sp, #8
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018f24:	4b04      	ldr	r3, [pc, #16]	; (8018f38 <sys_arch_unprotect+0x1c>)
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f7f0 fa02 	bl	8009332 <osMutexRelease>
}
 8018f2e:	bf00      	nop
 8018f30:	3708      	adds	r7, #8
 8018f32:	46bd      	mov	sp, r7
 8018f34:	bd80      	pop	{r7, pc}
 8018f36:	bf00      	nop
 8018f38:	2000d0c4 	.word	0x2000d0c4

08018f3c <slave_set_tx_rx>:
        osSemaphoreRelease(slave->idle_sem);
    }
}

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b082      	sub	sp, #8
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	460b      	mov	r3, r1
 8018f46:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	6858      	ldr	r0, [r3, #4]
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	8919      	ldrh	r1, [r3, #8]
 8018f54:	78fb      	ldrb	r3, [r7, #3]
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	bf0c      	ite	eq
 8018f5a:	2301      	moveq	r3, #1
 8018f5c:	2300      	movne	r3, #0
 8018f5e:	b2db      	uxtb	r3, r3
 8018f60:	461a      	mov	r2, r3
 8018f62:	f7ec fd5b 	bl	8005a1c <HAL_GPIO_WritePin>
}
 8018f66:	bf00      	nop
 8018f68:	3708      	adds	r7, #8
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}
	...

08018f70 <std>:
 8018f70:	2300      	movs	r3, #0
 8018f72:	b510      	push	{r4, lr}
 8018f74:	4604      	mov	r4, r0
 8018f76:	e9c0 3300 	strd	r3, r3, [r0]
 8018f7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018f7e:	6083      	str	r3, [r0, #8]
 8018f80:	8181      	strh	r1, [r0, #12]
 8018f82:	6643      	str	r3, [r0, #100]	; 0x64
 8018f84:	81c2      	strh	r2, [r0, #14]
 8018f86:	6183      	str	r3, [r0, #24]
 8018f88:	4619      	mov	r1, r3
 8018f8a:	2208      	movs	r2, #8
 8018f8c:	305c      	adds	r0, #92	; 0x5c
 8018f8e:	f000 f928 	bl	80191e2 <memset>
 8018f92:	4b05      	ldr	r3, [pc, #20]	; (8018fa8 <std+0x38>)
 8018f94:	6263      	str	r3, [r4, #36]	; 0x24
 8018f96:	4b05      	ldr	r3, [pc, #20]	; (8018fac <std+0x3c>)
 8018f98:	62a3      	str	r3, [r4, #40]	; 0x28
 8018f9a:	4b05      	ldr	r3, [pc, #20]	; (8018fb0 <std+0x40>)
 8018f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018f9e:	4b05      	ldr	r3, [pc, #20]	; (8018fb4 <std+0x44>)
 8018fa0:	6224      	str	r4, [r4, #32]
 8018fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8018fa4:	bd10      	pop	{r4, pc}
 8018fa6:	bf00      	nop
 8018fa8:	0801944d 	.word	0x0801944d
 8018fac:	0801946f 	.word	0x0801946f
 8018fb0:	080194a7 	.word	0x080194a7
 8018fb4:	080194cb 	.word	0x080194cb

08018fb8 <_cleanup_r>:
 8018fb8:	4901      	ldr	r1, [pc, #4]	; (8018fc0 <_cleanup_r+0x8>)
 8018fba:	f000 b8af 	b.w	801911c <_fwalk_reent>
 8018fbe:	bf00      	nop
 8018fc0:	0801966d 	.word	0x0801966d

08018fc4 <__sfmoreglue>:
 8018fc4:	b570      	push	{r4, r5, r6, lr}
 8018fc6:	1e4a      	subs	r2, r1, #1
 8018fc8:	2568      	movs	r5, #104	; 0x68
 8018fca:	4355      	muls	r5, r2
 8018fcc:	460e      	mov	r6, r1
 8018fce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018fd2:	f000 f90f 	bl	80191f4 <_malloc_r>
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	b140      	cbz	r0, 8018fec <__sfmoreglue+0x28>
 8018fda:	2100      	movs	r1, #0
 8018fdc:	e9c0 1600 	strd	r1, r6, [r0]
 8018fe0:	300c      	adds	r0, #12
 8018fe2:	60a0      	str	r0, [r4, #8]
 8018fe4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018fe8:	f000 f8fb 	bl	80191e2 <memset>
 8018fec:	4620      	mov	r0, r4
 8018fee:	bd70      	pop	{r4, r5, r6, pc}

08018ff0 <__sfp_lock_acquire>:
 8018ff0:	4801      	ldr	r0, [pc, #4]	; (8018ff8 <__sfp_lock_acquire+0x8>)
 8018ff2:	f000 b8d8 	b.w	80191a6 <__retarget_lock_acquire_recursive>
 8018ff6:	bf00      	nop
 8018ff8:	2000d0d0 	.word	0x2000d0d0

08018ffc <__sfp_lock_release>:
 8018ffc:	4801      	ldr	r0, [pc, #4]	; (8019004 <__sfp_lock_release+0x8>)
 8018ffe:	f000 b8d3 	b.w	80191a8 <__retarget_lock_release_recursive>
 8019002:	bf00      	nop
 8019004:	2000d0d0 	.word	0x2000d0d0

08019008 <__sinit_lock_acquire>:
 8019008:	4801      	ldr	r0, [pc, #4]	; (8019010 <__sinit_lock_acquire+0x8>)
 801900a:	f000 b8cc 	b.w	80191a6 <__retarget_lock_acquire_recursive>
 801900e:	bf00      	nop
 8019010:	2000d0cb 	.word	0x2000d0cb

08019014 <__sinit_lock_release>:
 8019014:	4801      	ldr	r0, [pc, #4]	; (801901c <__sinit_lock_release+0x8>)
 8019016:	f000 b8c7 	b.w	80191a8 <__retarget_lock_release_recursive>
 801901a:	bf00      	nop
 801901c:	2000d0cb 	.word	0x2000d0cb

08019020 <__sinit>:
 8019020:	b510      	push	{r4, lr}
 8019022:	4604      	mov	r4, r0
 8019024:	f7ff fff0 	bl	8019008 <__sinit_lock_acquire>
 8019028:	69a3      	ldr	r3, [r4, #24]
 801902a:	b11b      	cbz	r3, 8019034 <__sinit+0x14>
 801902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019030:	f7ff bff0 	b.w	8019014 <__sinit_lock_release>
 8019034:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019038:	6523      	str	r3, [r4, #80]	; 0x50
 801903a:	4b13      	ldr	r3, [pc, #76]	; (8019088 <__sinit+0x68>)
 801903c:	4a13      	ldr	r2, [pc, #76]	; (801908c <__sinit+0x6c>)
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	62a2      	str	r2, [r4, #40]	; 0x28
 8019042:	42a3      	cmp	r3, r4
 8019044:	bf04      	itt	eq
 8019046:	2301      	moveq	r3, #1
 8019048:	61a3      	streq	r3, [r4, #24]
 801904a:	4620      	mov	r0, r4
 801904c:	f000 f820 	bl	8019090 <__sfp>
 8019050:	6060      	str	r0, [r4, #4]
 8019052:	4620      	mov	r0, r4
 8019054:	f000 f81c 	bl	8019090 <__sfp>
 8019058:	60a0      	str	r0, [r4, #8]
 801905a:	4620      	mov	r0, r4
 801905c:	f000 f818 	bl	8019090 <__sfp>
 8019060:	2200      	movs	r2, #0
 8019062:	60e0      	str	r0, [r4, #12]
 8019064:	2104      	movs	r1, #4
 8019066:	6860      	ldr	r0, [r4, #4]
 8019068:	f7ff ff82 	bl	8018f70 <std>
 801906c:	68a0      	ldr	r0, [r4, #8]
 801906e:	2201      	movs	r2, #1
 8019070:	2109      	movs	r1, #9
 8019072:	f7ff ff7d 	bl	8018f70 <std>
 8019076:	68e0      	ldr	r0, [r4, #12]
 8019078:	2202      	movs	r2, #2
 801907a:	2112      	movs	r1, #18
 801907c:	f7ff ff78 	bl	8018f70 <std>
 8019080:	2301      	movs	r3, #1
 8019082:	61a3      	str	r3, [r4, #24]
 8019084:	e7d2      	b.n	801902c <__sinit+0xc>
 8019086:	bf00      	nop
 8019088:	0801d744 	.word	0x0801d744
 801908c:	08018fb9 	.word	0x08018fb9

08019090 <__sfp>:
 8019090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019092:	4607      	mov	r7, r0
 8019094:	f7ff ffac 	bl	8018ff0 <__sfp_lock_acquire>
 8019098:	4b1e      	ldr	r3, [pc, #120]	; (8019114 <__sfp+0x84>)
 801909a:	681e      	ldr	r6, [r3, #0]
 801909c:	69b3      	ldr	r3, [r6, #24]
 801909e:	b913      	cbnz	r3, 80190a6 <__sfp+0x16>
 80190a0:	4630      	mov	r0, r6
 80190a2:	f7ff ffbd 	bl	8019020 <__sinit>
 80190a6:	3648      	adds	r6, #72	; 0x48
 80190a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80190ac:	3b01      	subs	r3, #1
 80190ae:	d503      	bpl.n	80190b8 <__sfp+0x28>
 80190b0:	6833      	ldr	r3, [r6, #0]
 80190b2:	b30b      	cbz	r3, 80190f8 <__sfp+0x68>
 80190b4:	6836      	ldr	r6, [r6, #0]
 80190b6:	e7f7      	b.n	80190a8 <__sfp+0x18>
 80190b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80190bc:	b9d5      	cbnz	r5, 80190f4 <__sfp+0x64>
 80190be:	4b16      	ldr	r3, [pc, #88]	; (8019118 <__sfp+0x88>)
 80190c0:	60e3      	str	r3, [r4, #12]
 80190c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80190c6:	6665      	str	r5, [r4, #100]	; 0x64
 80190c8:	f000 f86c 	bl	80191a4 <__retarget_lock_init_recursive>
 80190cc:	f7ff ff96 	bl	8018ffc <__sfp_lock_release>
 80190d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80190d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80190d8:	6025      	str	r5, [r4, #0]
 80190da:	61a5      	str	r5, [r4, #24]
 80190dc:	2208      	movs	r2, #8
 80190de:	4629      	mov	r1, r5
 80190e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80190e4:	f000 f87d 	bl	80191e2 <memset>
 80190e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80190ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80190f0:	4620      	mov	r0, r4
 80190f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190f4:	3468      	adds	r4, #104	; 0x68
 80190f6:	e7d9      	b.n	80190ac <__sfp+0x1c>
 80190f8:	2104      	movs	r1, #4
 80190fa:	4638      	mov	r0, r7
 80190fc:	f7ff ff62 	bl	8018fc4 <__sfmoreglue>
 8019100:	4604      	mov	r4, r0
 8019102:	6030      	str	r0, [r6, #0]
 8019104:	2800      	cmp	r0, #0
 8019106:	d1d5      	bne.n	80190b4 <__sfp+0x24>
 8019108:	f7ff ff78 	bl	8018ffc <__sfp_lock_release>
 801910c:	230c      	movs	r3, #12
 801910e:	603b      	str	r3, [r7, #0]
 8019110:	e7ee      	b.n	80190f0 <__sfp+0x60>
 8019112:	bf00      	nop
 8019114:	0801d744 	.word	0x0801d744
 8019118:	ffff0001 	.word	0xffff0001

0801911c <_fwalk_reent>:
 801911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019120:	4606      	mov	r6, r0
 8019122:	4688      	mov	r8, r1
 8019124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019128:	2700      	movs	r7, #0
 801912a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801912e:	f1b9 0901 	subs.w	r9, r9, #1
 8019132:	d505      	bpl.n	8019140 <_fwalk_reent+0x24>
 8019134:	6824      	ldr	r4, [r4, #0]
 8019136:	2c00      	cmp	r4, #0
 8019138:	d1f7      	bne.n	801912a <_fwalk_reent+0xe>
 801913a:	4638      	mov	r0, r7
 801913c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019140:	89ab      	ldrh	r3, [r5, #12]
 8019142:	2b01      	cmp	r3, #1
 8019144:	d907      	bls.n	8019156 <_fwalk_reent+0x3a>
 8019146:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801914a:	3301      	adds	r3, #1
 801914c:	d003      	beq.n	8019156 <_fwalk_reent+0x3a>
 801914e:	4629      	mov	r1, r5
 8019150:	4630      	mov	r0, r6
 8019152:	47c0      	blx	r8
 8019154:	4307      	orrs	r7, r0
 8019156:	3568      	adds	r5, #104	; 0x68
 8019158:	e7e9      	b.n	801912e <_fwalk_reent+0x12>
	...

0801915c <__libc_init_array>:
 801915c:	b570      	push	{r4, r5, r6, lr}
 801915e:	4d0d      	ldr	r5, [pc, #52]	; (8019194 <__libc_init_array+0x38>)
 8019160:	4c0d      	ldr	r4, [pc, #52]	; (8019198 <__libc_init_array+0x3c>)
 8019162:	1b64      	subs	r4, r4, r5
 8019164:	10a4      	asrs	r4, r4, #2
 8019166:	2600      	movs	r6, #0
 8019168:	42a6      	cmp	r6, r4
 801916a:	d109      	bne.n	8019180 <__libc_init_array+0x24>
 801916c:	4d0b      	ldr	r5, [pc, #44]	; (801919c <__libc_init_array+0x40>)
 801916e:	4c0c      	ldr	r4, [pc, #48]	; (80191a0 <__libc_init_array+0x44>)
 8019170:	f001 f9de 	bl	801a530 <_init>
 8019174:	1b64      	subs	r4, r4, r5
 8019176:	10a4      	asrs	r4, r4, #2
 8019178:	2600      	movs	r6, #0
 801917a:	42a6      	cmp	r6, r4
 801917c:	d105      	bne.n	801918a <__libc_init_array+0x2e>
 801917e:	bd70      	pop	{r4, r5, r6, pc}
 8019180:	f855 3b04 	ldr.w	r3, [r5], #4
 8019184:	4798      	blx	r3
 8019186:	3601      	adds	r6, #1
 8019188:	e7ee      	b.n	8019168 <__libc_init_array+0xc>
 801918a:	f855 3b04 	ldr.w	r3, [r5], #4
 801918e:	4798      	blx	r3
 8019190:	3601      	adds	r6, #1
 8019192:	e7f2      	b.n	801917a <__libc_init_array+0x1e>
 8019194:	0801d838 	.word	0x0801d838
 8019198:	0801d838 	.word	0x0801d838
 801919c:	0801d838 	.word	0x0801d838
 80191a0:	0801d83c 	.word	0x0801d83c

080191a4 <__retarget_lock_init_recursive>:
 80191a4:	4770      	bx	lr

080191a6 <__retarget_lock_acquire_recursive>:
 80191a6:	4770      	bx	lr

080191a8 <__retarget_lock_release_recursive>:
 80191a8:	4770      	bx	lr

080191aa <memcmp>:
 80191aa:	b530      	push	{r4, r5, lr}
 80191ac:	3901      	subs	r1, #1
 80191ae:	2400      	movs	r4, #0
 80191b0:	42a2      	cmp	r2, r4
 80191b2:	d101      	bne.n	80191b8 <memcmp+0xe>
 80191b4:	2000      	movs	r0, #0
 80191b6:	e005      	b.n	80191c4 <memcmp+0x1a>
 80191b8:	5d03      	ldrb	r3, [r0, r4]
 80191ba:	3401      	adds	r4, #1
 80191bc:	5d0d      	ldrb	r5, [r1, r4]
 80191be:	42ab      	cmp	r3, r5
 80191c0:	d0f6      	beq.n	80191b0 <memcmp+0x6>
 80191c2:	1b58      	subs	r0, r3, r5
 80191c4:	bd30      	pop	{r4, r5, pc}

080191c6 <memcpy>:
 80191c6:	440a      	add	r2, r1
 80191c8:	4291      	cmp	r1, r2
 80191ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80191ce:	d100      	bne.n	80191d2 <memcpy+0xc>
 80191d0:	4770      	bx	lr
 80191d2:	b510      	push	{r4, lr}
 80191d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80191dc:	4291      	cmp	r1, r2
 80191de:	d1f9      	bne.n	80191d4 <memcpy+0xe>
 80191e0:	bd10      	pop	{r4, pc}

080191e2 <memset>:
 80191e2:	4402      	add	r2, r0
 80191e4:	4603      	mov	r3, r0
 80191e6:	4293      	cmp	r3, r2
 80191e8:	d100      	bne.n	80191ec <memset+0xa>
 80191ea:	4770      	bx	lr
 80191ec:	f803 1b01 	strb.w	r1, [r3], #1
 80191f0:	e7f9      	b.n	80191e6 <memset+0x4>
	...

080191f4 <_malloc_r>:
 80191f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191f6:	1ccd      	adds	r5, r1, #3
 80191f8:	f025 0503 	bic.w	r5, r5, #3
 80191fc:	3508      	adds	r5, #8
 80191fe:	2d0c      	cmp	r5, #12
 8019200:	bf38      	it	cc
 8019202:	250c      	movcc	r5, #12
 8019204:	2d00      	cmp	r5, #0
 8019206:	4606      	mov	r6, r0
 8019208:	db01      	blt.n	801920e <_malloc_r+0x1a>
 801920a:	42a9      	cmp	r1, r5
 801920c:	d903      	bls.n	8019216 <_malloc_r+0x22>
 801920e:	230c      	movs	r3, #12
 8019210:	6033      	str	r3, [r6, #0]
 8019212:	2000      	movs	r0, #0
 8019214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019216:	f000 fa91 	bl	801973c <__malloc_lock>
 801921a:	4921      	ldr	r1, [pc, #132]	; (80192a0 <_malloc_r+0xac>)
 801921c:	680a      	ldr	r2, [r1, #0]
 801921e:	4614      	mov	r4, r2
 8019220:	b99c      	cbnz	r4, 801924a <_malloc_r+0x56>
 8019222:	4f20      	ldr	r7, [pc, #128]	; (80192a4 <_malloc_r+0xb0>)
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	b923      	cbnz	r3, 8019232 <_malloc_r+0x3e>
 8019228:	4621      	mov	r1, r4
 801922a:	4630      	mov	r0, r6
 801922c:	f000 f8fe 	bl	801942c <_sbrk_r>
 8019230:	6038      	str	r0, [r7, #0]
 8019232:	4629      	mov	r1, r5
 8019234:	4630      	mov	r0, r6
 8019236:	f000 f8f9 	bl	801942c <_sbrk_r>
 801923a:	1c43      	adds	r3, r0, #1
 801923c:	d123      	bne.n	8019286 <_malloc_r+0x92>
 801923e:	230c      	movs	r3, #12
 8019240:	6033      	str	r3, [r6, #0]
 8019242:	4630      	mov	r0, r6
 8019244:	f000 fa80 	bl	8019748 <__malloc_unlock>
 8019248:	e7e3      	b.n	8019212 <_malloc_r+0x1e>
 801924a:	6823      	ldr	r3, [r4, #0]
 801924c:	1b5b      	subs	r3, r3, r5
 801924e:	d417      	bmi.n	8019280 <_malloc_r+0x8c>
 8019250:	2b0b      	cmp	r3, #11
 8019252:	d903      	bls.n	801925c <_malloc_r+0x68>
 8019254:	6023      	str	r3, [r4, #0]
 8019256:	441c      	add	r4, r3
 8019258:	6025      	str	r5, [r4, #0]
 801925a:	e004      	b.n	8019266 <_malloc_r+0x72>
 801925c:	6863      	ldr	r3, [r4, #4]
 801925e:	42a2      	cmp	r2, r4
 8019260:	bf0c      	ite	eq
 8019262:	600b      	streq	r3, [r1, #0]
 8019264:	6053      	strne	r3, [r2, #4]
 8019266:	4630      	mov	r0, r6
 8019268:	f000 fa6e 	bl	8019748 <__malloc_unlock>
 801926c:	f104 000b 	add.w	r0, r4, #11
 8019270:	1d23      	adds	r3, r4, #4
 8019272:	f020 0007 	bic.w	r0, r0, #7
 8019276:	1ac2      	subs	r2, r0, r3
 8019278:	d0cc      	beq.n	8019214 <_malloc_r+0x20>
 801927a:	1a1b      	subs	r3, r3, r0
 801927c:	50a3      	str	r3, [r4, r2]
 801927e:	e7c9      	b.n	8019214 <_malloc_r+0x20>
 8019280:	4622      	mov	r2, r4
 8019282:	6864      	ldr	r4, [r4, #4]
 8019284:	e7cc      	b.n	8019220 <_malloc_r+0x2c>
 8019286:	1cc4      	adds	r4, r0, #3
 8019288:	f024 0403 	bic.w	r4, r4, #3
 801928c:	42a0      	cmp	r0, r4
 801928e:	d0e3      	beq.n	8019258 <_malloc_r+0x64>
 8019290:	1a21      	subs	r1, r4, r0
 8019292:	4630      	mov	r0, r6
 8019294:	f000 f8ca 	bl	801942c <_sbrk_r>
 8019298:	3001      	adds	r0, #1
 801929a:	d1dd      	bne.n	8019258 <_malloc_r+0x64>
 801929c:	e7cf      	b.n	801923e <_malloc_r+0x4a>
 801929e:	bf00      	nop
 80192a0:	20004c64 	.word	0x20004c64
 80192a4:	20004c68 	.word	0x20004c68

080192a8 <iprintf>:
 80192a8:	b40f      	push	{r0, r1, r2, r3}
 80192aa:	4b0a      	ldr	r3, [pc, #40]	; (80192d4 <iprintf+0x2c>)
 80192ac:	b513      	push	{r0, r1, r4, lr}
 80192ae:	681c      	ldr	r4, [r3, #0]
 80192b0:	b124      	cbz	r4, 80192bc <iprintf+0x14>
 80192b2:	69a3      	ldr	r3, [r4, #24]
 80192b4:	b913      	cbnz	r3, 80192bc <iprintf+0x14>
 80192b6:	4620      	mov	r0, r4
 80192b8:	f7ff feb2 	bl	8019020 <__sinit>
 80192bc:	ab05      	add	r3, sp, #20
 80192be:	9a04      	ldr	r2, [sp, #16]
 80192c0:	68a1      	ldr	r1, [r4, #8]
 80192c2:	9301      	str	r3, [sp, #4]
 80192c4:	4620      	mov	r0, r4
 80192c6:	f000 fabf 	bl	8019848 <_vfiprintf_r>
 80192ca:	b002      	add	sp, #8
 80192cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80192d0:	b004      	add	sp, #16
 80192d2:	4770      	bx	lr
 80192d4:	20000068 	.word	0x20000068

080192d8 <rand>:
 80192d8:	4b17      	ldr	r3, [pc, #92]	; (8019338 <rand+0x60>)
 80192da:	b510      	push	{r4, lr}
 80192dc:	681c      	ldr	r4, [r3, #0]
 80192de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80192e0:	b9b3      	cbnz	r3, 8019310 <rand+0x38>
 80192e2:	2018      	movs	r0, #24
 80192e4:	f000 fa22 	bl	801972c <malloc>
 80192e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80192ea:	b928      	cbnz	r0, 80192f8 <rand+0x20>
 80192ec:	4602      	mov	r2, r0
 80192ee:	4b13      	ldr	r3, [pc, #76]	; (801933c <rand+0x64>)
 80192f0:	4813      	ldr	r0, [pc, #76]	; (8019340 <rand+0x68>)
 80192f2:	214e      	movs	r1, #78	; 0x4e
 80192f4:	f000 f900 	bl	80194f8 <__assert_func>
 80192f8:	4a12      	ldr	r2, [pc, #72]	; (8019344 <rand+0x6c>)
 80192fa:	4b13      	ldr	r3, [pc, #76]	; (8019348 <rand+0x70>)
 80192fc:	e9c0 2300 	strd	r2, r3, [r0]
 8019300:	4b12      	ldr	r3, [pc, #72]	; (801934c <rand+0x74>)
 8019302:	6083      	str	r3, [r0, #8]
 8019304:	230b      	movs	r3, #11
 8019306:	8183      	strh	r3, [r0, #12]
 8019308:	2201      	movs	r2, #1
 801930a:	2300      	movs	r3, #0
 801930c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019310:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019312:	480f      	ldr	r0, [pc, #60]	; (8019350 <rand+0x78>)
 8019314:	690a      	ldr	r2, [r1, #16]
 8019316:	694b      	ldr	r3, [r1, #20]
 8019318:	4c0e      	ldr	r4, [pc, #56]	; (8019354 <rand+0x7c>)
 801931a:	4350      	muls	r0, r2
 801931c:	fb04 0003 	mla	r0, r4, r3, r0
 8019320:	fba2 3404 	umull	r3, r4, r2, r4
 8019324:	1c5a      	adds	r2, r3, #1
 8019326:	4404      	add	r4, r0
 8019328:	f144 0000 	adc.w	r0, r4, #0
 801932c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8019330:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019334:	bd10      	pop	{r4, pc}
 8019336:	bf00      	nop
 8019338:	20000068 	.word	0x20000068
 801933c:	0801d748 	.word	0x0801d748
 8019340:	0801d75f 	.word	0x0801d75f
 8019344:	abcd330e 	.word	0xabcd330e
 8019348:	e66d1234 	.word	0xe66d1234
 801934c:	0005deec 	.word	0x0005deec
 8019350:	5851f42d 	.word	0x5851f42d
 8019354:	4c957f2d 	.word	0x4c957f2d

08019358 <cleanup_glue>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	460c      	mov	r4, r1
 801935c:	6809      	ldr	r1, [r1, #0]
 801935e:	4605      	mov	r5, r0
 8019360:	b109      	cbz	r1, 8019366 <cleanup_glue+0xe>
 8019362:	f7ff fff9 	bl	8019358 <cleanup_glue>
 8019366:	4621      	mov	r1, r4
 8019368:	4628      	mov	r0, r5
 801936a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801936e:	f000 b9f1 	b.w	8019754 <_free_r>
	...

08019374 <_reclaim_reent>:
 8019374:	4b2c      	ldr	r3, [pc, #176]	; (8019428 <_reclaim_reent+0xb4>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	4283      	cmp	r3, r0
 801937a:	b570      	push	{r4, r5, r6, lr}
 801937c:	4604      	mov	r4, r0
 801937e:	d051      	beq.n	8019424 <_reclaim_reent+0xb0>
 8019380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019382:	b143      	cbz	r3, 8019396 <_reclaim_reent+0x22>
 8019384:	68db      	ldr	r3, [r3, #12]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d14a      	bne.n	8019420 <_reclaim_reent+0xac>
 801938a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801938c:	6819      	ldr	r1, [r3, #0]
 801938e:	b111      	cbz	r1, 8019396 <_reclaim_reent+0x22>
 8019390:	4620      	mov	r0, r4
 8019392:	f000 f9df 	bl	8019754 <_free_r>
 8019396:	6961      	ldr	r1, [r4, #20]
 8019398:	b111      	cbz	r1, 80193a0 <_reclaim_reent+0x2c>
 801939a:	4620      	mov	r0, r4
 801939c:	f000 f9da 	bl	8019754 <_free_r>
 80193a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80193a2:	b111      	cbz	r1, 80193aa <_reclaim_reent+0x36>
 80193a4:	4620      	mov	r0, r4
 80193a6:	f000 f9d5 	bl	8019754 <_free_r>
 80193aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80193ac:	b111      	cbz	r1, 80193b4 <_reclaim_reent+0x40>
 80193ae:	4620      	mov	r0, r4
 80193b0:	f000 f9d0 	bl	8019754 <_free_r>
 80193b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80193b6:	b111      	cbz	r1, 80193be <_reclaim_reent+0x4a>
 80193b8:	4620      	mov	r0, r4
 80193ba:	f000 f9cb 	bl	8019754 <_free_r>
 80193be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80193c0:	b111      	cbz	r1, 80193c8 <_reclaim_reent+0x54>
 80193c2:	4620      	mov	r0, r4
 80193c4:	f000 f9c6 	bl	8019754 <_free_r>
 80193c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80193ca:	b111      	cbz	r1, 80193d2 <_reclaim_reent+0x5e>
 80193cc:	4620      	mov	r0, r4
 80193ce:	f000 f9c1 	bl	8019754 <_free_r>
 80193d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80193d4:	b111      	cbz	r1, 80193dc <_reclaim_reent+0x68>
 80193d6:	4620      	mov	r0, r4
 80193d8:	f000 f9bc 	bl	8019754 <_free_r>
 80193dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193de:	b111      	cbz	r1, 80193e6 <_reclaim_reent+0x72>
 80193e0:	4620      	mov	r0, r4
 80193e2:	f000 f9b7 	bl	8019754 <_free_r>
 80193e6:	69a3      	ldr	r3, [r4, #24]
 80193e8:	b1e3      	cbz	r3, 8019424 <_reclaim_reent+0xb0>
 80193ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80193ec:	4620      	mov	r0, r4
 80193ee:	4798      	blx	r3
 80193f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80193f2:	b1b9      	cbz	r1, 8019424 <_reclaim_reent+0xb0>
 80193f4:	4620      	mov	r0, r4
 80193f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193fa:	f7ff bfad 	b.w	8019358 <cleanup_glue>
 80193fe:	5949      	ldr	r1, [r1, r5]
 8019400:	b941      	cbnz	r1, 8019414 <_reclaim_reent+0xa0>
 8019402:	3504      	adds	r5, #4
 8019404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019406:	2d80      	cmp	r5, #128	; 0x80
 8019408:	68d9      	ldr	r1, [r3, #12]
 801940a:	d1f8      	bne.n	80193fe <_reclaim_reent+0x8a>
 801940c:	4620      	mov	r0, r4
 801940e:	f000 f9a1 	bl	8019754 <_free_r>
 8019412:	e7ba      	b.n	801938a <_reclaim_reent+0x16>
 8019414:	680e      	ldr	r6, [r1, #0]
 8019416:	4620      	mov	r0, r4
 8019418:	f000 f99c 	bl	8019754 <_free_r>
 801941c:	4631      	mov	r1, r6
 801941e:	e7ef      	b.n	8019400 <_reclaim_reent+0x8c>
 8019420:	2500      	movs	r5, #0
 8019422:	e7ef      	b.n	8019404 <_reclaim_reent+0x90>
 8019424:	bd70      	pop	{r4, r5, r6, pc}
 8019426:	bf00      	nop
 8019428:	20000068 	.word	0x20000068

0801942c <_sbrk_r>:
 801942c:	b538      	push	{r3, r4, r5, lr}
 801942e:	4d06      	ldr	r5, [pc, #24]	; (8019448 <_sbrk_r+0x1c>)
 8019430:	2300      	movs	r3, #0
 8019432:	4604      	mov	r4, r0
 8019434:	4608      	mov	r0, r1
 8019436:	602b      	str	r3, [r5, #0]
 8019438:	f7e8 fcfc 	bl	8001e34 <_sbrk>
 801943c:	1c43      	adds	r3, r0, #1
 801943e:	d102      	bne.n	8019446 <_sbrk_r+0x1a>
 8019440:	682b      	ldr	r3, [r5, #0]
 8019442:	b103      	cbz	r3, 8019446 <_sbrk_r+0x1a>
 8019444:	6023      	str	r3, [r4, #0]
 8019446:	bd38      	pop	{r3, r4, r5, pc}
 8019448:	2000d0c0 	.word	0x2000d0c0

0801944c <__sread>:
 801944c:	b510      	push	{r4, lr}
 801944e:	460c      	mov	r4, r1
 8019450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019454:	f000 fcbc 	bl	8019dd0 <_read_r>
 8019458:	2800      	cmp	r0, #0
 801945a:	bfab      	itete	ge
 801945c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801945e:	89a3      	ldrhlt	r3, [r4, #12]
 8019460:	181b      	addge	r3, r3, r0
 8019462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019466:	bfac      	ite	ge
 8019468:	6563      	strge	r3, [r4, #84]	; 0x54
 801946a:	81a3      	strhlt	r3, [r4, #12]
 801946c:	bd10      	pop	{r4, pc}

0801946e <__swrite>:
 801946e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019472:	461f      	mov	r7, r3
 8019474:	898b      	ldrh	r3, [r1, #12]
 8019476:	05db      	lsls	r3, r3, #23
 8019478:	4605      	mov	r5, r0
 801947a:	460c      	mov	r4, r1
 801947c:	4616      	mov	r6, r2
 801947e:	d505      	bpl.n	801948c <__swrite+0x1e>
 8019480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019484:	2302      	movs	r3, #2
 8019486:	2200      	movs	r2, #0
 8019488:	f000 f93e 	bl	8019708 <_lseek_r>
 801948c:	89a3      	ldrh	r3, [r4, #12]
 801948e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019496:	81a3      	strh	r3, [r4, #12]
 8019498:	4632      	mov	r2, r6
 801949a:	463b      	mov	r3, r7
 801949c:	4628      	mov	r0, r5
 801949e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194a2:	f000 b817 	b.w	80194d4 <_write_r>

080194a6 <__sseek>:
 80194a6:	b510      	push	{r4, lr}
 80194a8:	460c      	mov	r4, r1
 80194aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194ae:	f000 f92b 	bl	8019708 <_lseek_r>
 80194b2:	1c43      	adds	r3, r0, #1
 80194b4:	89a3      	ldrh	r3, [r4, #12]
 80194b6:	bf15      	itete	ne
 80194b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80194ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80194be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80194c2:	81a3      	strheq	r3, [r4, #12]
 80194c4:	bf18      	it	ne
 80194c6:	81a3      	strhne	r3, [r4, #12]
 80194c8:	bd10      	pop	{r4, pc}

080194ca <__sclose>:
 80194ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194ce:	f000 b831 	b.w	8019534 <_close_r>
	...

080194d4 <_write_r>:
 80194d4:	b538      	push	{r3, r4, r5, lr}
 80194d6:	4d07      	ldr	r5, [pc, #28]	; (80194f4 <_write_r+0x20>)
 80194d8:	4604      	mov	r4, r0
 80194da:	4608      	mov	r0, r1
 80194dc:	4611      	mov	r1, r2
 80194de:	2200      	movs	r2, #0
 80194e0:	602a      	str	r2, [r5, #0]
 80194e2:	461a      	mov	r2, r3
 80194e4:	f7e8 fc55 	bl	8001d92 <_write>
 80194e8:	1c43      	adds	r3, r0, #1
 80194ea:	d102      	bne.n	80194f2 <_write_r+0x1e>
 80194ec:	682b      	ldr	r3, [r5, #0]
 80194ee:	b103      	cbz	r3, 80194f2 <_write_r+0x1e>
 80194f0:	6023      	str	r3, [r4, #0]
 80194f2:	bd38      	pop	{r3, r4, r5, pc}
 80194f4:	2000d0c0 	.word	0x2000d0c0

080194f8 <__assert_func>:
 80194f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194fa:	4614      	mov	r4, r2
 80194fc:	461a      	mov	r2, r3
 80194fe:	4b09      	ldr	r3, [pc, #36]	; (8019524 <__assert_func+0x2c>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4605      	mov	r5, r0
 8019504:	68d8      	ldr	r0, [r3, #12]
 8019506:	b14c      	cbz	r4, 801951c <__assert_func+0x24>
 8019508:	4b07      	ldr	r3, [pc, #28]	; (8019528 <__assert_func+0x30>)
 801950a:	9100      	str	r1, [sp, #0]
 801950c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019510:	4906      	ldr	r1, [pc, #24]	; (801952c <__assert_func+0x34>)
 8019512:	462b      	mov	r3, r5
 8019514:	f000 f8e6 	bl	80196e4 <fiprintf>
 8019518:	f000 fd2c 	bl	8019f74 <abort>
 801951c:	4b04      	ldr	r3, [pc, #16]	; (8019530 <__assert_func+0x38>)
 801951e:	461c      	mov	r4, r3
 8019520:	e7f3      	b.n	801950a <__assert_func+0x12>
 8019522:	bf00      	nop
 8019524:	20000068 	.word	0x20000068
 8019528:	0801d7be 	.word	0x0801d7be
 801952c:	0801d7cb 	.word	0x0801d7cb
 8019530:	0801d7f9 	.word	0x0801d7f9

08019534 <_close_r>:
 8019534:	b538      	push	{r3, r4, r5, lr}
 8019536:	4d06      	ldr	r5, [pc, #24]	; (8019550 <_close_r+0x1c>)
 8019538:	2300      	movs	r3, #0
 801953a:	4604      	mov	r4, r0
 801953c:	4608      	mov	r0, r1
 801953e:	602b      	str	r3, [r5, #0]
 8019540:	f7e8 fc43 	bl	8001dca <_close>
 8019544:	1c43      	adds	r3, r0, #1
 8019546:	d102      	bne.n	801954e <_close_r+0x1a>
 8019548:	682b      	ldr	r3, [r5, #0]
 801954a:	b103      	cbz	r3, 801954e <_close_r+0x1a>
 801954c:	6023      	str	r3, [r4, #0]
 801954e:	bd38      	pop	{r3, r4, r5, pc}
 8019550:	2000d0c0 	.word	0x2000d0c0

08019554 <__errno>:
 8019554:	4b01      	ldr	r3, [pc, #4]	; (801955c <__errno+0x8>)
 8019556:	6818      	ldr	r0, [r3, #0]
 8019558:	4770      	bx	lr
 801955a:	bf00      	nop
 801955c:	20000068 	.word	0x20000068

08019560 <__sflush_r>:
 8019560:	898a      	ldrh	r2, [r1, #12]
 8019562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019566:	4605      	mov	r5, r0
 8019568:	0710      	lsls	r0, r2, #28
 801956a:	460c      	mov	r4, r1
 801956c:	d458      	bmi.n	8019620 <__sflush_r+0xc0>
 801956e:	684b      	ldr	r3, [r1, #4]
 8019570:	2b00      	cmp	r3, #0
 8019572:	dc05      	bgt.n	8019580 <__sflush_r+0x20>
 8019574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019576:	2b00      	cmp	r3, #0
 8019578:	dc02      	bgt.n	8019580 <__sflush_r+0x20>
 801957a:	2000      	movs	r0, #0
 801957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019582:	2e00      	cmp	r6, #0
 8019584:	d0f9      	beq.n	801957a <__sflush_r+0x1a>
 8019586:	2300      	movs	r3, #0
 8019588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801958c:	682f      	ldr	r7, [r5, #0]
 801958e:	602b      	str	r3, [r5, #0]
 8019590:	d032      	beq.n	80195f8 <__sflush_r+0x98>
 8019592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019594:	89a3      	ldrh	r3, [r4, #12]
 8019596:	075a      	lsls	r2, r3, #29
 8019598:	d505      	bpl.n	80195a6 <__sflush_r+0x46>
 801959a:	6863      	ldr	r3, [r4, #4]
 801959c:	1ac0      	subs	r0, r0, r3
 801959e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195a0:	b10b      	cbz	r3, 80195a6 <__sflush_r+0x46>
 80195a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80195a4:	1ac0      	subs	r0, r0, r3
 80195a6:	2300      	movs	r3, #0
 80195a8:	4602      	mov	r2, r0
 80195aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195ac:	6a21      	ldr	r1, [r4, #32]
 80195ae:	4628      	mov	r0, r5
 80195b0:	47b0      	blx	r6
 80195b2:	1c43      	adds	r3, r0, #1
 80195b4:	89a3      	ldrh	r3, [r4, #12]
 80195b6:	d106      	bne.n	80195c6 <__sflush_r+0x66>
 80195b8:	6829      	ldr	r1, [r5, #0]
 80195ba:	291d      	cmp	r1, #29
 80195bc:	d82c      	bhi.n	8019618 <__sflush_r+0xb8>
 80195be:	4a2a      	ldr	r2, [pc, #168]	; (8019668 <__sflush_r+0x108>)
 80195c0:	40ca      	lsrs	r2, r1
 80195c2:	07d6      	lsls	r6, r2, #31
 80195c4:	d528      	bpl.n	8019618 <__sflush_r+0xb8>
 80195c6:	2200      	movs	r2, #0
 80195c8:	6062      	str	r2, [r4, #4]
 80195ca:	04d9      	lsls	r1, r3, #19
 80195cc:	6922      	ldr	r2, [r4, #16]
 80195ce:	6022      	str	r2, [r4, #0]
 80195d0:	d504      	bpl.n	80195dc <__sflush_r+0x7c>
 80195d2:	1c42      	adds	r2, r0, #1
 80195d4:	d101      	bne.n	80195da <__sflush_r+0x7a>
 80195d6:	682b      	ldr	r3, [r5, #0]
 80195d8:	b903      	cbnz	r3, 80195dc <__sflush_r+0x7c>
 80195da:	6560      	str	r0, [r4, #84]	; 0x54
 80195dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80195de:	602f      	str	r7, [r5, #0]
 80195e0:	2900      	cmp	r1, #0
 80195e2:	d0ca      	beq.n	801957a <__sflush_r+0x1a>
 80195e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195e8:	4299      	cmp	r1, r3
 80195ea:	d002      	beq.n	80195f2 <__sflush_r+0x92>
 80195ec:	4628      	mov	r0, r5
 80195ee:	f000 f8b1 	bl	8019754 <_free_r>
 80195f2:	2000      	movs	r0, #0
 80195f4:	6360      	str	r0, [r4, #52]	; 0x34
 80195f6:	e7c1      	b.n	801957c <__sflush_r+0x1c>
 80195f8:	6a21      	ldr	r1, [r4, #32]
 80195fa:	2301      	movs	r3, #1
 80195fc:	4628      	mov	r0, r5
 80195fe:	47b0      	blx	r6
 8019600:	1c41      	adds	r1, r0, #1
 8019602:	d1c7      	bne.n	8019594 <__sflush_r+0x34>
 8019604:	682b      	ldr	r3, [r5, #0]
 8019606:	2b00      	cmp	r3, #0
 8019608:	d0c4      	beq.n	8019594 <__sflush_r+0x34>
 801960a:	2b1d      	cmp	r3, #29
 801960c:	d001      	beq.n	8019612 <__sflush_r+0xb2>
 801960e:	2b16      	cmp	r3, #22
 8019610:	d101      	bne.n	8019616 <__sflush_r+0xb6>
 8019612:	602f      	str	r7, [r5, #0]
 8019614:	e7b1      	b.n	801957a <__sflush_r+0x1a>
 8019616:	89a3      	ldrh	r3, [r4, #12]
 8019618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801961c:	81a3      	strh	r3, [r4, #12]
 801961e:	e7ad      	b.n	801957c <__sflush_r+0x1c>
 8019620:	690f      	ldr	r7, [r1, #16]
 8019622:	2f00      	cmp	r7, #0
 8019624:	d0a9      	beq.n	801957a <__sflush_r+0x1a>
 8019626:	0793      	lsls	r3, r2, #30
 8019628:	680e      	ldr	r6, [r1, #0]
 801962a:	bf08      	it	eq
 801962c:	694b      	ldreq	r3, [r1, #20]
 801962e:	600f      	str	r7, [r1, #0]
 8019630:	bf18      	it	ne
 8019632:	2300      	movne	r3, #0
 8019634:	eba6 0807 	sub.w	r8, r6, r7
 8019638:	608b      	str	r3, [r1, #8]
 801963a:	f1b8 0f00 	cmp.w	r8, #0
 801963e:	dd9c      	ble.n	801957a <__sflush_r+0x1a>
 8019640:	6a21      	ldr	r1, [r4, #32]
 8019642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019644:	4643      	mov	r3, r8
 8019646:	463a      	mov	r2, r7
 8019648:	4628      	mov	r0, r5
 801964a:	47b0      	blx	r6
 801964c:	2800      	cmp	r0, #0
 801964e:	dc06      	bgt.n	801965e <__sflush_r+0xfe>
 8019650:	89a3      	ldrh	r3, [r4, #12]
 8019652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019656:	81a3      	strh	r3, [r4, #12]
 8019658:	f04f 30ff 	mov.w	r0, #4294967295
 801965c:	e78e      	b.n	801957c <__sflush_r+0x1c>
 801965e:	4407      	add	r7, r0
 8019660:	eba8 0800 	sub.w	r8, r8, r0
 8019664:	e7e9      	b.n	801963a <__sflush_r+0xda>
 8019666:	bf00      	nop
 8019668:	20400001 	.word	0x20400001

0801966c <_fflush_r>:
 801966c:	b538      	push	{r3, r4, r5, lr}
 801966e:	690b      	ldr	r3, [r1, #16]
 8019670:	4605      	mov	r5, r0
 8019672:	460c      	mov	r4, r1
 8019674:	b913      	cbnz	r3, 801967c <_fflush_r+0x10>
 8019676:	2500      	movs	r5, #0
 8019678:	4628      	mov	r0, r5
 801967a:	bd38      	pop	{r3, r4, r5, pc}
 801967c:	b118      	cbz	r0, 8019686 <_fflush_r+0x1a>
 801967e:	6983      	ldr	r3, [r0, #24]
 8019680:	b90b      	cbnz	r3, 8019686 <_fflush_r+0x1a>
 8019682:	f7ff fccd 	bl	8019020 <__sinit>
 8019686:	4b14      	ldr	r3, [pc, #80]	; (80196d8 <_fflush_r+0x6c>)
 8019688:	429c      	cmp	r4, r3
 801968a:	d11b      	bne.n	80196c4 <_fflush_r+0x58>
 801968c:	686c      	ldr	r4, [r5, #4]
 801968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d0ef      	beq.n	8019676 <_fflush_r+0xa>
 8019696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019698:	07d0      	lsls	r0, r2, #31
 801969a:	d404      	bmi.n	80196a6 <_fflush_r+0x3a>
 801969c:	0599      	lsls	r1, r3, #22
 801969e:	d402      	bmi.n	80196a6 <_fflush_r+0x3a>
 80196a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196a2:	f7ff fd80 	bl	80191a6 <__retarget_lock_acquire_recursive>
 80196a6:	4628      	mov	r0, r5
 80196a8:	4621      	mov	r1, r4
 80196aa:	f7ff ff59 	bl	8019560 <__sflush_r>
 80196ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196b0:	07da      	lsls	r2, r3, #31
 80196b2:	4605      	mov	r5, r0
 80196b4:	d4e0      	bmi.n	8019678 <_fflush_r+0xc>
 80196b6:	89a3      	ldrh	r3, [r4, #12]
 80196b8:	059b      	lsls	r3, r3, #22
 80196ba:	d4dd      	bmi.n	8019678 <_fflush_r+0xc>
 80196bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196be:	f7ff fd73 	bl	80191a8 <__retarget_lock_release_recursive>
 80196c2:	e7d9      	b.n	8019678 <_fflush_r+0xc>
 80196c4:	4b05      	ldr	r3, [pc, #20]	; (80196dc <_fflush_r+0x70>)
 80196c6:	429c      	cmp	r4, r3
 80196c8:	d101      	bne.n	80196ce <_fflush_r+0x62>
 80196ca:	68ac      	ldr	r4, [r5, #8]
 80196cc:	e7df      	b.n	801968e <_fflush_r+0x22>
 80196ce:	4b04      	ldr	r3, [pc, #16]	; (80196e0 <_fflush_r+0x74>)
 80196d0:	429c      	cmp	r4, r3
 80196d2:	bf08      	it	eq
 80196d4:	68ec      	ldreq	r4, [r5, #12]
 80196d6:	e7da      	b.n	801968e <_fflush_r+0x22>
 80196d8:	0801d704 	.word	0x0801d704
 80196dc:	0801d724 	.word	0x0801d724
 80196e0:	0801d6e4 	.word	0x0801d6e4

080196e4 <fiprintf>:
 80196e4:	b40e      	push	{r1, r2, r3}
 80196e6:	b503      	push	{r0, r1, lr}
 80196e8:	4601      	mov	r1, r0
 80196ea:	ab03      	add	r3, sp, #12
 80196ec:	4805      	ldr	r0, [pc, #20]	; (8019704 <fiprintf+0x20>)
 80196ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80196f2:	6800      	ldr	r0, [r0, #0]
 80196f4:	9301      	str	r3, [sp, #4]
 80196f6:	f000 f8a7 	bl	8019848 <_vfiprintf_r>
 80196fa:	b002      	add	sp, #8
 80196fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019700:	b003      	add	sp, #12
 8019702:	4770      	bx	lr
 8019704:	20000068 	.word	0x20000068

08019708 <_lseek_r>:
 8019708:	b538      	push	{r3, r4, r5, lr}
 801970a:	4d07      	ldr	r5, [pc, #28]	; (8019728 <_lseek_r+0x20>)
 801970c:	4604      	mov	r4, r0
 801970e:	4608      	mov	r0, r1
 8019710:	4611      	mov	r1, r2
 8019712:	2200      	movs	r2, #0
 8019714:	602a      	str	r2, [r5, #0]
 8019716:	461a      	mov	r2, r3
 8019718:	f7e8 fb7e 	bl	8001e18 <_lseek>
 801971c:	1c43      	adds	r3, r0, #1
 801971e:	d102      	bne.n	8019726 <_lseek_r+0x1e>
 8019720:	682b      	ldr	r3, [r5, #0]
 8019722:	b103      	cbz	r3, 8019726 <_lseek_r+0x1e>
 8019724:	6023      	str	r3, [r4, #0]
 8019726:	bd38      	pop	{r3, r4, r5, pc}
 8019728:	2000d0c0 	.word	0x2000d0c0

0801972c <malloc>:
 801972c:	4b02      	ldr	r3, [pc, #8]	; (8019738 <malloc+0xc>)
 801972e:	4601      	mov	r1, r0
 8019730:	6818      	ldr	r0, [r3, #0]
 8019732:	f7ff bd5f 	b.w	80191f4 <_malloc_r>
 8019736:	bf00      	nop
 8019738:	20000068 	.word	0x20000068

0801973c <__malloc_lock>:
 801973c:	4801      	ldr	r0, [pc, #4]	; (8019744 <__malloc_lock+0x8>)
 801973e:	f7ff bd32 	b.w	80191a6 <__retarget_lock_acquire_recursive>
 8019742:	bf00      	nop
 8019744:	2000d0cc 	.word	0x2000d0cc

08019748 <__malloc_unlock>:
 8019748:	4801      	ldr	r0, [pc, #4]	; (8019750 <__malloc_unlock+0x8>)
 801974a:	f7ff bd2d 	b.w	80191a8 <__retarget_lock_release_recursive>
 801974e:	bf00      	nop
 8019750:	2000d0cc 	.word	0x2000d0cc

08019754 <_free_r>:
 8019754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019756:	2900      	cmp	r1, #0
 8019758:	d048      	beq.n	80197ec <_free_r+0x98>
 801975a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801975e:	9001      	str	r0, [sp, #4]
 8019760:	2b00      	cmp	r3, #0
 8019762:	f1a1 0404 	sub.w	r4, r1, #4
 8019766:	bfb8      	it	lt
 8019768:	18e4      	addlt	r4, r4, r3
 801976a:	f7ff ffe7 	bl	801973c <__malloc_lock>
 801976e:	4a20      	ldr	r2, [pc, #128]	; (80197f0 <_free_r+0x9c>)
 8019770:	9801      	ldr	r0, [sp, #4]
 8019772:	6813      	ldr	r3, [r2, #0]
 8019774:	4615      	mov	r5, r2
 8019776:	b933      	cbnz	r3, 8019786 <_free_r+0x32>
 8019778:	6063      	str	r3, [r4, #4]
 801977a:	6014      	str	r4, [r2, #0]
 801977c:	b003      	add	sp, #12
 801977e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019782:	f7ff bfe1 	b.w	8019748 <__malloc_unlock>
 8019786:	42a3      	cmp	r3, r4
 8019788:	d90b      	bls.n	80197a2 <_free_r+0x4e>
 801978a:	6821      	ldr	r1, [r4, #0]
 801978c:	1862      	adds	r2, r4, r1
 801978e:	4293      	cmp	r3, r2
 8019790:	bf04      	itt	eq
 8019792:	681a      	ldreq	r2, [r3, #0]
 8019794:	685b      	ldreq	r3, [r3, #4]
 8019796:	6063      	str	r3, [r4, #4]
 8019798:	bf04      	itt	eq
 801979a:	1852      	addeq	r2, r2, r1
 801979c:	6022      	streq	r2, [r4, #0]
 801979e:	602c      	str	r4, [r5, #0]
 80197a0:	e7ec      	b.n	801977c <_free_r+0x28>
 80197a2:	461a      	mov	r2, r3
 80197a4:	685b      	ldr	r3, [r3, #4]
 80197a6:	b10b      	cbz	r3, 80197ac <_free_r+0x58>
 80197a8:	42a3      	cmp	r3, r4
 80197aa:	d9fa      	bls.n	80197a2 <_free_r+0x4e>
 80197ac:	6811      	ldr	r1, [r2, #0]
 80197ae:	1855      	adds	r5, r2, r1
 80197b0:	42a5      	cmp	r5, r4
 80197b2:	d10b      	bne.n	80197cc <_free_r+0x78>
 80197b4:	6824      	ldr	r4, [r4, #0]
 80197b6:	4421      	add	r1, r4
 80197b8:	1854      	adds	r4, r2, r1
 80197ba:	42a3      	cmp	r3, r4
 80197bc:	6011      	str	r1, [r2, #0]
 80197be:	d1dd      	bne.n	801977c <_free_r+0x28>
 80197c0:	681c      	ldr	r4, [r3, #0]
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	6053      	str	r3, [r2, #4]
 80197c6:	4421      	add	r1, r4
 80197c8:	6011      	str	r1, [r2, #0]
 80197ca:	e7d7      	b.n	801977c <_free_r+0x28>
 80197cc:	d902      	bls.n	80197d4 <_free_r+0x80>
 80197ce:	230c      	movs	r3, #12
 80197d0:	6003      	str	r3, [r0, #0]
 80197d2:	e7d3      	b.n	801977c <_free_r+0x28>
 80197d4:	6825      	ldr	r5, [r4, #0]
 80197d6:	1961      	adds	r1, r4, r5
 80197d8:	428b      	cmp	r3, r1
 80197da:	bf04      	itt	eq
 80197dc:	6819      	ldreq	r1, [r3, #0]
 80197de:	685b      	ldreq	r3, [r3, #4]
 80197e0:	6063      	str	r3, [r4, #4]
 80197e2:	bf04      	itt	eq
 80197e4:	1949      	addeq	r1, r1, r5
 80197e6:	6021      	streq	r1, [r4, #0]
 80197e8:	6054      	str	r4, [r2, #4]
 80197ea:	e7c7      	b.n	801977c <_free_r+0x28>
 80197ec:	b003      	add	sp, #12
 80197ee:	bd30      	pop	{r4, r5, pc}
 80197f0:	20004c64 	.word	0x20004c64

080197f4 <__sfputc_r>:
 80197f4:	6893      	ldr	r3, [r2, #8]
 80197f6:	3b01      	subs	r3, #1
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	b410      	push	{r4}
 80197fc:	6093      	str	r3, [r2, #8]
 80197fe:	da08      	bge.n	8019812 <__sfputc_r+0x1e>
 8019800:	6994      	ldr	r4, [r2, #24]
 8019802:	42a3      	cmp	r3, r4
 8019804:	db01      	blt.n	801980a <__sfputc_r+0x16>
 8019806:	290a      	cmp	r1, #10
 8019808:	d103      	bne.n	8019812 <__sfputc_r+0x1e>
 801980a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801980e:	f000 baf1 	b.w	8019df4 <__swbuf_r>
 8019812:	6813      	ldr	r3, [r2, #0]
 8019814:	1c58      	adds	r0, r3, #1
 8019816:	6010      	str	r0, [r2, #0]
 8019818:	7019      	strb	r1, [r3, #0]
 801981a:	4608      	mov	r0, r1
 801981c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019820:	4770      	bx	lr

08019822 <__sfputs_r>:
 8019822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019824:	4606      	mov	r6, r0
 8019826:	460f      	mov	r7, r1
 8019828:	4614      	mov	r4, r2
 801982a:	18d5      	adds	r5, r2, r3
 801982c:	42ac      	cmp	r4, r5
 801982e:	d101      	bne.n	8019834 <__sfputs_r+0x12>
 8019830:	2000      	movs	r0, #0
 8019832:	e007      	b.n	8019844 <__sfputs_r+0x22>
 8019834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019838:	463a      	mov	r2, r7
 801983a:	4630      	mov	r0, r6
 801983c:	f7ff ffda 	bl	80197f4 <__sfputc_r>
 8019840:	1c43      	adds	r3, r0, #1
 8019842:	d1f3      	bne.n	801982c <__sfputs_r+0xa>
 8019844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019848 <_vfiprintf_r>:
 8019848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	460d      	mov	r5, r1
 801984e:	b09d      	sub	sp, #116	; 0x74
 8019850:	4614      	mov	r4, r2
 8019852:	4698      	mov	r8, r3
 8019854:	4606      	mov	r6, r0
 8019856:	b118      	cbz	r0, 8019860 <_vfiprintf_r+0x18>
 8019858:	6983      	ldr	r3, [r0, #24]
 801985a:	b90b      	cbnz	r3, 8019860 <_vfiprintf_r+0x18>
 801985c:	f7ff fbe0 	bl	8019020 <__sinit>
 8019860:	4b89      	ldr	r3, [pc, #548]	; (8019a88 <_vfiprintf_r+0x240>)
 8019862:	429d      	cmp	r5, r3
 8019864:	d11b      	bne.n	801989e <_vfiprintf_r+0x56>
 8019866:	6875      	ldr	r5, [r6, #4]
 8019868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801986a:	07d9      	lsls	r1, r3, #31
 801986c:	d405      	bmi.n	801987a <_vfiprintf_r+0x32>
 801986e:	89ab      	ldrh	r3, [r5, #12]
 8019870:	059a      	lsls	r2, r3, #22
 8019872:	d402      	bmi.n	801987a <_vfiprintf_r+0x32>
 8019874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019876:	f7ff fc96 	bl	80191a6 <__retarget_lock_acquire_recursive>
 801987a:	89ab      	ldrh	r3, [r5, #12]
 801987c:	071b      	lsls	r3, r3, #28
 801987e:	d501      	bpl.n	8019884 <_vfiprintf_r+0x3c>
 8019880:	692b      	ldr	r3, [r5, #16]
 8019882:	b9eb      	cbnz	r3, 80198c0 <_vfiprintf_r+0x78>
 8019884:	4629      	mov	r1, r5
 8019886:	4630      	mov	r0, r6
 8019888:	f000 fb06 	bl	8019e98 <__swsetup_r>
 801988c:	b1c0      	cbz	r0, 80198c0 <_vfiprintf_r+0x78>
 801988e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019890:	07dc      	lsls	r4, r3, #31
 8019892:	d50e      	bpl.n	80198b2 <_vfiprintf_r+0x6a>
 8019894:	f04f 30ff 	mov.w	r0, #4294967295
 8019898:	b01d      	add	sp, #116	; 0x74
 801989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801989e:	4b7b      	ldr	r3, [pc, #492]	; (8019a8c <_vfiprintf_r+0x244>)
 80198a0:	429d      	cmp	r5, r3
 80198a2:	d101      	bne.n	80198a8 <_vfiprintf_r+0x60>
 80198a4:	68b5      	ldr	r5, [r6, #8]
 80198a6:	e7df      	b.n	8019868 <_vfiprintf_r+0x20>
 80198a8:	4b79      	ldr	r3, [pc, #484]	; (8019a90 <_vfiprintf_r+0x248>)
 80198aa:	429d      	cmp	r5, r3
 80198ac:	bf08      	it	eq
 80198ae:	68f5      	ldreq	r5, [r6, #12]
 80198b0:	e7da      	b.n	8019868 <_vfiprintf_r+0x20>
 80198b2:	89ab      	ldrh	r3, [r5, #12]
 80198b4:	0598      	lsls	r0, r3, #22
 80198b6:	d4ed      	bmi.n	8019894 <_vfiprintf_r+0x4c>
 80198b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80198ba:	f7ff fc75 	bl	80191a8 <__retarget_lock_release_recursive>
 80198be:	e7e9      	b.n	8019894 <_vfiprintf_r+0x4c>
 80198c0:	2300      	movs	r3, #0
 80198c2:	9309      	str	r3, [sp, #36]	; 0x24
 80198c4:	2320      	movs	r3, #32
 80198c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80198ce:	2330      	movs	r3, #48	; 0x30
 80198d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019a94 <_vfiprintf_r+0x24c>
 80198d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198d8:	f04f 0901 	mov.w	r9, #1
 80198dc:	4623      	mov	r3, r4
 80198de:	469a      	mov	sl, r3
 80198e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198e4:	b10a      	cbz	r2, 80198ea <_vfiprintf_r+0xa2>
 80198e6:	2a25      	cmp	r2, #37	; 0x25
 80198e8:	d1f9      	bne.n	80198de <_vfiprintf_r+0x96>
 80198ea:	ebba 0b04 	subs.w	fp, sl, r4
 80198ee:	d00b      	beq.n	8019908 <_vfiprintf_r+0xc0>
 80198f0:	465b      	mov	r3, fp
 80198f2:	4622      	mov	r2, r4
 80198f4:	4629      	mov	r1, r5
 80198f6:	4630      	mov	r0, r6
 80198f8:	f7ff ff93 	bl	8019822 <__sfputs_r>
 80198fc:	3001      	adds	r0, #1
 80198fe:	f000 80aa 	beq.w	8019a56 <_vfiprintf_r+0x20e>
 8019902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019904:	445a      	add	r2, fp
 8019906:	9209      	str	r2, [sp, #36]	; 0x24
 8019908:	f89a 3000 	ldrb.w	r3, [sl]
 801990c:	2b00      	cmp	r3, #0
 801990e:	f000 80a2 	beq.w	8019a56 <_vfiprintf_r+0x20e>
 8019912:	2300      	movs	r3, #0
 8019914:	f04f 32ff 	mov.w	r2, #4294967295
 8019918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801991c:	f10a 0a01 	add.w	sl, sl, #1
 8019920:	9304      	str	r3, [sp, #16]
 8019922:	9307      	str	r3, [sp, #28]
 8019924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019928:	931a      	str	r3, [sp, #104]	; 0x68
 801992a:	4654      	mov	r4, sl
 801992c:	2205      	movs	r2, #5
 801992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019932:	4858      	ldr	r0, [pc, #352]	; (8019a94 <_vfiprintf_r+0x24c>)
 8019934:	f7e6 fc4c 	bl	80001d0 <memchr>
 8019938:	9a04      	ldr	r2, [sp, #16]
 801993a:	b9d8      	cbnz	r0, 8019974 <_vfiprintf_r+0x12c>
 801993c:	06d1      	lsls	r1, r2, #27
 801993e:	bf44      	itt	mi
 8019940:	2320      	movmi	r3, #32
 8019942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019946:	0713      	lsls	r3, r2, #28
 8019948:	bf44      	itt	mi
 801994a:	232b      	movmi	r3, #43	; 0x2b
 801994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019950:	f89a 3000 	ldrb.w	r3, [sl]
 8019954:	2b2a      	cmp	r3, #42	; 0x2a
 8019956:	d015      	beq.n	8019984 <_vfiprintf_r+0x13c>
 8019958:	9a07      	ldr	r2, [sp, #28]
 801995a:	4654      	mov	r4, sl
 801995c:	2000      	movs	r0, #0
 801995e:	f04f 0c0a 	mov.w	ip, #10
 8019962:	4621      	mov	r1, r4
 8019964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019968:	3b30      	subs	r3, #48	; 0x30
 801996a:	2b09      	cmp	r3, #9
 801996c:	d94e      	bls.n	8019a0c <_vfiprintf_r+0x1c4>
 801996e:	b1b0      	cbz	r0, 801999e <_vfiprintf_r+0x156>
 8019970:	9207      	str	r2, [sp, #28]
 8019972:	e014      	b.n	801999e <_vfiprintf_r+0x156>
 8019974:	eba0 0308 	sub.w	r3, r0, r8
 8019978:	fa09 f303 	lsl.w	r3, r9, r3
 801997c:	4313      	orrs	r3, r2
 801997e:	9304      	str	r3, [sp, #16]
 8019980:	46a2      	mov	sl, r4
 8019982:	e7d2      	b.n	801992a <_vfiprintf_r+0xe2>
 8019984:	9b03      	ldr	r3, [sp, #12]
 8019986:	1d19      	adds	r1, r3, #4
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	9103      	str	r1, [sp, #12]
 801998c:	2b00      	cmp	r3, #0
 801998e:	bfbb      	ittet	lt
 8019990:	425b      	neglt	r3, r3
 8019992:	f042 0202 	orrlt.w	r2, r2, #2
 8019996:	9307      	strge	r3, [sp, #28]
 8019998:	9307      	strlt	r3, [sp, #28]
 801999a:	bfb8      	it	lt
 801999c:	9204      	strlt	r2, [sp, #16]
 801999e:	7823      	ldrb	r3, [r4, #0]
 80199a0:	2b2e      	cmp	r3, #46	; 0x2e
 80199a2:	d10c      	bne.n	80199be <_vfiprintf_r+0x176>
 80199a4:	7863      	ldrb	r3, [r4, #1]
 80199a6:	2b2a      	cmp	r3, #42	; 0x2a
 80199a8:	d135      	bne.n	8019a16 <_vfiprintf_r+0x1ce>
 80199aa:	9b03      	ldr	r3, [sp, #12]
 80199ac:	1d1a      	adds	r2, r3, #4
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	9203      	str	r2, [sp, #12]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	bfb8      	it	lt
 80199b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80199ba:	3402      	adds	r4, #2
 80199bc:	9305      	str	r3, [sp, #20]
 80199be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019aa4 <_vfiprintf_r+0x25c>
 80199c2:	7821      	ldrb	r1, [r4, #0]
 80199c4:	2203      	movs	r2, #3
 80199c6:	4650      	mov	r0, sl
 80199c8:	f7e6 fc02 	bl	80001d0 <memchr>
 80199cc:	b140      	cbz	r0, 80199e0 <_vfiprintf_r+0x198>
 80199ce:	2340      	movs	r3, #64	; 0x40
 80199d0:	eba0 000a 	sub.w	r0, r0, sl
 80199d4:	fa03 f000 	lsl.w	r0, r3, r0
 80199d8:	9b04      	ldr	r3, [sp, #16]
 80199da:	4303      	orrs	r3, r0
 80199dc:	3401      	adds	r4, #1
 80199de:	9304      	str	r3, [sp, #16]
 80199e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199e4:	482c      	ldr	r0, [pc, #176]	; (8019a98 <_vfiprintf_r+0x250>)
 80199e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199ea:	2206      	movs	r2, #6
 80199ec:	f7e6 fbf0 	bl	80001d0 <memchr>
 80199f0:	2800      	cmp	r0, #0
 80199f2:	d03f      	beq.n	8019a74 <_vfiprintf_r+0x22c>
 80199f4:	4b29      	ldr	r3, [pc, #164]	; (8019a9c <_vfiprintf_r+0x254>)
 80199f6:	bb1b      	cbnz	r3, 8019a40 <_vfiprintf_r+0x1f8>
 80199f8:	9b03      	ldr	r3, [sp, #12]
 80199fa:	3307      	adds	r3, #7
 80199fc:	f023 0307 	bic.w	r3, r3, #7
 8019a00:	3308      	adds	r3, #8
 8019a02:	9303      	str	r3, [sp, #12]
 8019a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a06:	443b      	add	r3, r7
 8019a08:	9309      	str	r3, [sp, #36]	; 0x24
 8019a0a:	e767      	b.n	80198dc <_vfiprintf_r+0x94>
 8019a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a10:	460c      	mov	r4, r1
 8019a12:	2001      	movs	r0, #1
 8019a14:	e7a5      	b.n	8019962 <_vfiprintf_r+0x11a>
 8019a16:	2300      	movs	r3, #0
 8019a18:	3401      	adds	r4, #1
 8019a1a:	9305      	str	r3, [sp, #20]
 8019a1c:	4619      	mov	r1, r3
 8019a1e:	f04f 0c0a 	mov.w	ip, #10
 8019a22:	4620      	mov	r0, r4
 8019a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a28:	3a30      	subs	r2, #48	; 0x30
 8019a2a:	2a09      	cmp	r2, #9
 8019a2c:	d903      	bls.n	8019a36 <_vfiprintf_r+0x1ee>
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d0c5      	beq.n	80199be <_vfiprintf_r+0x176>
 8019a32:	9105      	str	r1, [sp, #20]
 8019a34:	e7c3      	b.n	80199be <_vfiprintf_r+0x176>
 8019a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	2301      	movs	r3, #1
 8019a3e:	e7f0      	b.n	8019a22 <_vfiprintf_r+0x1da>
 8019a40:	ab03      	add	r3, sp, #12
 8019a42:	9300      	str	r3, [sp, #0]
 8019a44:	462a      	mov	r2, r5
 8019a46:	4b16      	ldr	r3, [pc, #88]	; (8019aa0 <_vfiprintf_r+0x258>)
 8019a48:	a904      	add	r1, sp, #16
 8019a4a:	4630      	mov	r0, r6
 8019a4c:	f3af 8000 	nop.w
 8019a50:	4607      	mov	r7, r0
 8019a52:	1c78      	adds	r0, r7, #1
 8019a54:	d1d6      	bne.n	8019a04 <_vfiprintf_r+0x1bc>
 8019a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a58:	07d9      	lsls	r1, r3, #31
 8019a5a:	d405      	bmi.n	8019a68 <_vfiprintf_r+0x220>
 8019a5c:	89ab      	ldrh	r3, [r5, #12]
 8019a5e:	059a      	lsls	r2, r3, #22
 8019a60:	d402      	bmi.n	8019a68 <_vfiprintf_r+0x220>
 8019a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a64:	f7ff fba0 	bl	80191a8 <__retarget_lock_release_recursive>
 8019a68:	89ab      	ldrh	r3, [r5, #12]
 8019a6a:	065b      	lsls	r3, r3, #25
 8019a6c:	f53f af12 	bmi.w	8019894 <_vfiprintf_r+0x4c>
 8019a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a72:	e711      	b.n	8019898 <_vfiprintf_r+0x50>
 8019a74:	ab03      	add	r3, sp, #12
 8019a76:	9300      	str	r3, [sp, #0]
 8019a78:	462a      	mov	r2, r5
 8019a7a:	4b09      	ldr	r3, [pc, #36]	; (8019aa0 <_vfiprintf_r+0x258>)
 8019a7c:	a904      	add	r1, sp, #16
 8019a7e:	4630      	mov	r0, r6
 8019a80:	f000 f880 	bl	8019b84 <_printf_i>
 8019a84:	e7e4      	b.n	8019a50 <_vfiprintf_r+0x208>
 8019a86:	bf00      	nop
 8019a88:	0801d704 	.word	0x0801d704
 8019a8c:	0801d724 	.word	0x0801d724
 8019a90:	0801d6e4 	.word	0x0801d6e4
 8019a94:	0801d7fa 	.word	0x0801d7fa
 8019a98:	0801d804 	.word	0x0801d804
 8019a9c:	00000000 	.word	0x00000000
 8019aa0:	08019823 	.word	0x08019823
 8019aa4:	0801d800 	.word	0x0801d800

08019aa8 <_printf_common>:
 8019aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019aac:	4616      	mov	r6, r2
 8019aae:	4699      	mov	r9, r3
 8019ab0:	688a      	ldr	r2, [r1, #8]
 8019ab2:	690b      	ldr	r3, [r1, #16]
 8019ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ab8:	4293      	cmp	r3, r2
 8019aba:	bfb8      	it	lt
 8019abc:	4613      	movlt	r3, r2
 8019abe:	6033      	str	r3, [r6, #0]
 8019ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ac4:	4607      	mov	r7, r0
 8019ac6:	460c      	mov	r4, r1
 8019ac8:	b10a      	cbz	r2, 8019ace <_printf_common+0x26>
 8019aca:	3301      	adds	r3, #1
 8019acc:	6033      	str	r3, [r6, #0]
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	0699      	lsls	r1, r3, #26
 8019ad2:	bf42      	ittt	mi
 8019ad4:	6833      	ldrmi	r3, [r6, #0]
 8019ad6:	3302      	addmi	r3, #2
 8019ad8:	6033      	strmi	r3, [r6, #0]
 8019ada:	6825      	ldr	r5, [r4, #0]
 8019adc:	f015 0506 	ands.w	r5, r5, #6
 8019ae0:	d106      	bne.n	8019af0 <_printf_common+0x48>
 8019ae2:	f104 0a19 	add.w	sl, r4, #25
 8019ae6:	68e3      	ldr	r3, [r4, #12]
 8019ae8:	6832      	ldr	r2, [r6, #0]
 8019aea:	1a9b      	subs	r3, r3, r2
 8019aec:	42ab      	cmp	r3, r5
 8019aee:	dc26      	bgt.n	8019b3e <_printf_common+0x96>
 8019af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019af4:	1e13      	subs	r3, r2, #0
 8019af6:	6822      	ldr	r2, [r4, #0]
 8019af8:	bf18      	it	ne
 8019afa:	2301      	movne	r3, #1
 8019afc:	0692      	lsls	r2, r2, #26
 8019afe:	d42b      	bmi.n	8019b58 <_printf_common+0xb0>
 8019b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b04:	4649      	mov	r1, r9
 8019b06:	4638      	mov	r0, r7
 8019b08:	47c0      	blx	r8
 8019b0a:	3001      	adds	r0, #1
 8019b0c:	d01e      	beq.n	8019b4c <_printf_common+0xa4>
 8019b0e:	6823      	ldr	r3, [r4, #0]
 8019b10:	68e5      	ldr	r5, [r4, #12]
 8019b12:	6832      	ldr	r2, [r6, #0]
 8019b14:	f003 0306 	and.w	r3, r3, #6
 8019b18:	2b04      	cmp	r3, #4
 8019b1a:	bf08      	it	eq
 8019b1c:	1aad      	subeq	r5, r5, r2
 8019b1e:	68a3      	ldr	r3, [r4, #8]
 8019b20:	6922      	ldr	r2, [r4, #16]
 8019b22:	bf0c      	ite	eq
 8019b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019b28:	2500      	movne	r5, #0
 8019b2a:	4293      	cmp	r3, r2
 8019b2c:	bfc4      	itt	gt
 8019b2e:	1a9b      	subgt	r3, r3, r2
 8019b30:	18ed      	addgt	r5, r5, r3
 8019b32:	2600      	movs	r6, #0
 8019b34:	341a      	adds	r4, #26
 8019b36:	42b5      	cmp	r5, r6
 8019b38:	d11a      	bne.n	8019b70 <_printf_common+0xc8>
 8019b3a:	2000      	movs	r0, #0
 8019b3c:	e008      	b.n	8019b50 <_printf_common+0xa8>
 8019b3e:	2301      	movs	r3, #1
 8019b40:	4652      	mov	r2, sl
 8019b42:	4649      	mov	r1, r9
 8019b44:	4638      	mov	r0, r7
 8019b46:	47c0      	blx	r8
 8019b48:	3001      	adds	r0, #1
 8019b4a:	d103      	bne.n	8019b54 <_printf_common+0xac>
 8019b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b54:	3501      	adds	r5, #1
 8019b56:	e7c6      	b.n	8019ae6 <_printf_common+0x3e>
 8019b58:	18e1      	adds	r1, r4, r3
 8019b5a:	1c5a      	adds	r2, r3, #1
 8019b5c:	2030      	movs	r0, #48	; 0x30
 8019b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019b62:	4422      	add	r2, r4
 8019b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b6c:	3302      	adds	r3, #2
 8019b6e:	e7c7      	b.n	8019b00 <_printf_common+0x58>
 8019b70:	2301      	movs	r3, #1
 8019b72:	4622      	mov	r2, r4
 8019b74:	4649      	mov	r1, r9
 8019b76:	4638      	mov	r0, r7
 8019b78:	47c0      	blx	r8
 8019b7a:	3001      	adds	r0, #1
 8019b7c:	d0e6      	beq.n	8019b4c <_printf_common+0xa4>
 8019b7e:	3601      	adds	r6, #1
 8019b80:	e7d9      	b.n	8019b36 <_printf_common+0x8e>
	...

08019b84 <_printf_i>:
 8019b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b88:	460c      	mov	r4, r1
 8019b8a:	4691      	mov	r9, r2
 8019b8c:	7e27      	ldrb	r7, [r4, #24]
 8019b8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b90:	2f78      	cmp	r7, #120	; 0x78
 8019b92:	4680      	mov	r8, r0
 8019b94:	469a      	mov	sl, r3
 8019b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b9a:	d807      	bhi.n	8019bac <_printf_i+0x28>
 8019b9c:	2f62      	cmp	r7, #98	; 0x62
 8019b9e:	d80a      	bhi.n	8019bb6 <_printf_i+0x32>
 8019ba0:	2f00      	cmp	r7, #0
 8019ba2:	f000 80d8 	beq.w	8019d56 <_printf_i+0x1d2>
 8019ba6:	2f58      	cmp	r7, #88	; 0x58
 8019ba8:	f000 80a3 	beq.w	8019cf2 <_printf_i+0x16e>
 8019bac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019bb4:	e03a      	b.n	8019c2c <_printf_i+0xa8>
 8019bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019bba:	2b15      	cmp	r3, #21
 8019bbc:	d8f6      	bhi.n	8019bac <_printf_i+0x28>
 8019bbe:	a001      	add	r0, pc, #4	; (adr r0, 8019bc4 <_printf_i+0x40>)
 8019bc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019bc4:	08019c1d 	.word	0x08019c1d
 8019bc8:	08019c31 	.word	0x08019c31
 8019bcc:	08019bad 	.word	0x08019bad
 8019bd0:	08019bad 	.word	0x08019bad
 8019bd4:	08019bad 	.word	0x08019bad
 8019bd8:	08019bad 	.word	0x08019bad
 8019bdc:	08019c31 	.word	0x08019c31
 8019be0:	08019bad 	.word	0x08019bad
 8019be4:	08019bad 	.word	0x08019bad
 8019be8:	08019bad 	.word	0x08019bad
 8019bec:	08019bad 	.word	0x08019bad
 8019bf0:	08019d3d 	.word	0x08019d3d
 8019bf4:	08019c61 	.word	0x08019c61
 8019bf8:	08019d1f 	.word	0x08019d1f
 8019bfc:	08019bad 	.word	0x08019bad
 8019c00:	08019bad 	.word	0x08019bad
 8019c04:	08019d5f 	.word	0x08019d5f
 8019c08:	08019bad 	.word	0x08019bad
 8019c0c:	08019c61 	.word	0x08019c61
 8019c10:	08019bad 	.word	0x08019bad
 8019c14:	08019bad 	.word	0x08019bad
 8019c18:	08019d27 	.word	0x08019d27
 8019c1c:	680b      	ldr	r3, [r1, #0]
 8019c1e:	1d1a      	adds	r2, r3, #4
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	600a      	str	r2, [r1, #0]
 8019c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	e0a3      	b.n	8019d78 <_printf_i+0x1f4>
 8019c30:	6825      	ldr	r5, [r4, #0]
 8019c32:	6808      	ldr	r0, [r1, #0]
 8019c34:	062e      	lsls	r6, r5, #24
 8019c36:	f100 0304 	add.w	r3, r0, #4
 8019c3a:	d50a      	bpl.n	8019c52 <_printf_i+0xce>
 8019c3c:	6805      	ldr	r5, [r0, #0]
 8019c3e:	600b      	str	r3, [r1, #0]
 8019c40:	2d00      	cmp	r5, #0
 8019c42:	da03      	bge.n	8019c4c <_printf_i+0xc8>
 8019c44:	232d      	movs	r3, #45	; 0x2d
 8019c46:	426d      	negs	r5, r5
 8019c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c4c:	485e      	ldr	r0, [pc, #376]	; (8019dc8 <_printf_i+0x244>)
 8019c4e:	230a      	movs	r3, #10
 8019c50:	e019      	b.n	8019c86 <_printf_i+0x102>
 8019c52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019c56:	6805      	ldr	r5, [r0, #0]
 8019c58:	600b      	str	r3, [r1, #0]
 8019c5a:	bf18      	it	ne
 8019c5c:	b22d      	sxthne	r5, r5
 8019c5e:	e7ef      	b.n	8019c40 <_printf_i+0xbc>
 8019c60:	680b      	ldr	r3, [r1, #0]
 8019c62:	6825      	ldr	r5, [r4, #0]
 8019c64:	1d18      	adds	r0, r3, #4
 8019c66:	6008      	str	r0, [r1, #0]
 8019c68:	0628      	lsls	r0, r5, #24
 8019c6a:	d501      	bpl.n	8019c70 <_printf_i+0xec>
 8019c6c:	681d      	ldr	r5, [r3, #0]
 8019c6e:	e002      	b.n	8019c76 <_printf_i+0xf2>
 8019c70:	0669      	lsls	r1, r5, #25
 8019c72:	d5fb      	bpl.n	8019c6c <_printf_i+0xe8>
 8019c74:	881d      	ldrh	r5, [r3, #0]
 8019c76:	4854      	ldr	r0, [pc, #336]	; (8019dc8 <_printf_i+0x244>)
 8019c78:	2f6f      	cmp	r7, #111	; 0x6f
 8019c7a:	bf0c      	ite	eq
 8019c7c:	2308      	moveq	r3, #8
 8019c7e:	230a      	movne	r3, #10
 8019c80:	2100      	movs	r1, #0
 8019c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c86:	6866      	ldr	r6, [r4, #4]
 8019c88:	60a6      	str	r6, [r4, #8]
 8019c8a:	2e00      	cmp	r6, #0
 8019c8c:	bfa2      	ittt	ge
 8019c8e:	6821      	ldrge	r1, [r4, #0]
 8019c90:	f021 0104 	bicge.w	r1, r1, #4
 8019c94:	6021      	strge	r1, [r4, #0]
 8019c96:	b90d      	cbnz	r5, 8019c9c <_printf_i+0x118>
 8019c98:	2e00      	cmp	r6, #0
 8019c9a:	d04d      	beq.n	8019d38 <_printf_i+0x1b4>
 8019c9c:	4616      	mov	r6, r2
 8019c9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ca2:	fb03 5711 	mls	r7, r3, r1, r5
 8019ca6:	5dc7      	ldrb	r7, [r0, r7]
 8019ca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019cac:	462f      	mov	r7, r5
 8019cae:	42bb      	cmp	r3, r7
 8019cb0:	460d      	mov	r5, r1
 8019cb2:	d9f4      	bls.n	8019c9e <_printf_i+0x11a>
 8019cb4:	2b08      	cmp	r3, #8
 8019cb6:	d10b      	bne.n	8019cd0 <_printf_i+0x14c>
 8019cb8:	6823      	ldr	r3, [r4, #0]
 8019cba:	07df      	lsls	r7, r3, #31
 8019cbc:	d508      	bpl.n	8019cd0 <_printf_i+0x14c>
 8019cbe:	6923      	ldr	r3, [r4, #16]
 8019cc0:	6861      	ldr	r1, [r4, #4]
 8019cc2:	4299      	cmp	r1, r3
 8019cc4:	bfde      	ittt	le
 8019cc6:	2330      	movle	r3, #48	; 0x30
 8019cc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019ccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019cd0:	1b92      	subs	r2, r2, r6
 8019cd2:	6122      	str	r2, [r4, #16]
 8019cd4:	f8cd a000 	str.w	sl, [sp]
 8019cd8:	464b      	mov	r3, r9
 8019cda:	aa03      	add	r2, sp, #12
 8019cdc:	4621      	mov	r1, r4
 8019cde:	4640      	mov	r0, r8
 8019ce0:	f7ff fee2 	bl	8019aa8 <_printf_common>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d14c      	bne.n	8019d82 <_printf_i+0x1fe>
 8019ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8019cec:	b004      	add	sp, #16
 8019cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cf2:	4835      	ldr	r0, [pc, #212]	; (8019dc8 <_printf_i+0x244>)
 8019cf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019cf8:	6823      	ldr	r3, [r4, #0]
 8019cfa:	680e      	ldr	r6, [r1, #0]
 8019cfc:	061f      	lsls	r7, r3, #24
 8019cfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8019d02:	600e      	str	r6, [r1, #0]
 8019d04:	d514      	bpl.n	8019d30 <_printf_i+0x1ac>
 8019d06:	07d9      	lsls	r1, r3, #31
 8019d08:	bf44      	itt	mi
 8019d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8019d0e:	6023      	strmi	r3, [r4, #0]
 8019d10:	b91d      	cbnz	r5, 8019d1a <_printf_i+0x196>
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	f023 0320 	bic.w	r3, r3, #32
 8019d18:	6023      	str	r3, [r4, #0]
 8019d1a:	2310      	movs	r3, #16
 8019d1c:	e7b0      	b.n	8019c80 <_printf_i+0xfc>
 8019d1e:	6823      	ldr	r3, [r4, #0]
 8019d20:	f043 0320 	orr.w	r3, r3, #32
 8019d24:	6023      	str	r3, [r4, #0]
 8019d26:	2378      	movs	r3, #120	; 0x78
 8019d28:	4828      	ldr	r0, [pc, #160]	; (8019dcc <_printf_i+0x248>)
 8019d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019d2e:	e7e3      	b.n	8019cf8 <_printf_i+0x174>
 8019d30:	065e      	lsls	r6, r3, #25
 8019d32:	bf48      	it	mi
 8019d34:	b2ad      	uxthmi	r5, r5
 8019d36:	e7e6      	b.n	8019d06 <_printf_i+0x182>
 8019d38:	4616      	mov	r6, r2
 8019d3a:	e7bb      	b.n	8019cb4 <_printf_i+0x130>
 8019d3c:	680b      	ldr	r3, [r1, #0]
 8019d3e:	6826      	ldr	r6, [r4, #0]
 8019d40:	6960      	ldr	r0, [r4, #20]
 8019d42:	1d1d      	adds	r5, r3, #4
 8019d44:	600d      	str	r5, [r1, #0]
 8019d46:	0635      	lsls	r5, r6, #24
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	d501      	bpl.n	8019d50 <_printf_i+0x1cc>
 8019d4c:	6018      	str	r0, [r3, #0]
 8019d4e:	e002      	b.n	8019d56 <_printf_i+0x1d2>
 8019d50:	0671      	lsls	r1, r6, #25
 8019d52:	d5fb      	bpl.n	8019d4c <_printf_i+0x1c8>
 8019d54:	8018      	strh	r0, [r3, #0]
 8019d56:	2300      	movs	r3, #0
 8019d58:	6123      	str	r3, [r4, #16]
 8019d5a:	4616      	mov	r6, r2
 8019d5c:	e7ba      	b.n	8019cd4 <_printf_i+0x150>
 8019d5e:	680b      	ldr	r3, [r1, #0]
 8019d60:	1d1a      	adds	r2, r3, #4
 8019d62:	600a      	str	r2, [r1, #0]
 8019d64:	681e      	ldr	r6, [r3, #0]
 8019d66:	6862      	ldr	r2, [r4, #4]
 8019d68:	2100      	movs	r1, #0
 8019d6a:	4630      	mov	r0, r6
 8019d6c:	f7e6 fa30 	bl	80001d0 <memchr>
 8019d70:	b108      	cbz	r0, 8019d76 <_printf_i+0x1f2>
 8019d72:	1b80      	subs	r0, r0, r6
 8019d74:	6060      	str	r0, [r4, #4]
 8019d76:	6863      	ldr	r3, [r4, #4]
 8019d78:	6123      	str	r3, [r4, #16]
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d80:	e7a8      	b.n	8019cd4 <_printf_i+0x150>
 8019d82:	6923      	ldr	r3, [r4, #16]
 8019d84:	4632      	mov	r2, r6
 8019d86:	4649      	mov	r1, r9
 8019d88:	4640      	mov	r0, r8
 8019d8a:	47d0      	blx	sl
 8019d8c:	3001      	adds	r0, #1
 8019d8e:	d0ab      	beq.n	8019ce8 <_printf_i+0x164>
 8019d90:	6823      	ldr	r3, [r4, #0]
 8019d92:	079b      	lsls	r3, r3, #30
 8019d94:	d413      	bmi.n	8019dbe <_printf_i+0x23a>
 8019d96:	68e0      	ldr	r0, [r4, #12]
 8019d98:	9b03      	ldr	r3, [sp, #12]
 8019d9a:	4298      	cmp	r0, r3
 8019d9c:	bfb8      	it	lt
 8019d9e:	4618      	movlt	r0, r3
 8019da0:	e7a4      	b.n	8019cec <_printf_i+0x168>
 8019da2:	2301      	movs	r3, #1
 8019da4:	4632      	mov	r2, r6
 8019da6:	4649      	mov	r1, r9
 8019da8:	4640      	mov	r0, r8
 8019daa:	47d0      	blx	sl
 8019dac:	3001      	adds	r0, #1
 8019dae:	d09b      	beq.n	8019ce8 <_printf_i+0x164>
 8019db0:	3501      	adds	r5, #1
 8019db2:	68e3      	ldr	r3, [r4, #12]
 8019db4:	9903      	ldr	r1, [sp, #12]
 8019db6:	1a5b      	subs	r3, r3, r1
 8019db8:	42ab      	cmp	r3, r5
 8019dba:	dcf2      	bgt.n	8019da2 <_printf_i+0x21e>
 8019dbc:	e7eb      	b.n	8019d96 <_printf_i+0x212>
 8019dbe:	2500      	movs	r5, #0
 8019dc0:	f104 0619 	add.w	r6, r4, #25
 8019dc4:	e7f5      	b.n	8019db2 <_printf_i+0x22e>
 8019dc6:	bf00      	nop
 8019dc8:	0801d80b 	.word	0x0801d80b
 8019dcc:	0801d81c 	.word	0x0801d81c

08019dd0 <_read_r>:
 8019dd0:	b538      	push	{r3, r4, r5, lr}
 8019dd2:	4d07      	ldr	r5, [pc, #28]	; (8019df0 <_read_r+0x20>)
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	4608      	mov	r0, r1
 8019dd8:	4611      	mov	r1, r2
 8019dda:	2200      	movs	r2, #0
 8019ddc:	602a      	str	r2, [r5, #0]
 8019dde:	461a      	mov	r2, r3
 8019de0:	f7e7 ffba 	bl	8001d58 <_read>
 8019de4:	1c43      	adds	r3, r0, #1
 8019de6:	d102      	bne.n	8019dee <_read_r+0x1e>
 8019de8:	682b      	ldr	r3, [r5, #0]
 8019dea:	b103      	cbz	r3, 8019dee <_read_r+0x1e>
 8019dec:	6023      	str	r3, [r4, #0]
 8019dee:	bd38      	pop	{r3, r4, r5, pc}
 8019df0:	2000d0c0 	.word	0x2000d0c0

08019df4 <__swbuf_r>:
 8019df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019df6:	460e      	mov	r6, r1
 8019df8:	4614      	mov	r4, r2
 8019dfa:	4605      	mov	r5, r0
 8019dfc:	b118      	cbz	r0, 8019e06 <__swbuf_r+0x12>
 8019dfe:	6983      	ldr	r3, [r0, #24]
 8019e00:	b90b      	cbnz	r3, 8019e06 <__swbuf_r+0x12>
 8019e02:	f7ff f90d 	bl	8019020 <__sinit>
 8019e06:	4b21      	ldr	r3, [pc, #132]	; (8019e8c <__swbuf_r+0x98>)
 8019e08:	429c      	cmp	r4, r3
 8019e0a:	d12b      	bne.n	8019e64 <__swbuf_r+0x70>
 8019e0c:	686c      	ldr	r4, [r5, #4]
 8019e0e:	69a3      	ldr	r3, [r4, #24]
 8019e10:	60a3      	str	r3, [r4, #8]
 8019e12:	89a3      	ldrh	r3, [r4, #12]
 8019e14:	071a      	lsls	r2, r3, #28
 8019e16:	d52f      	bpl.n	8019e78 <__swbuf_r+0x84>
 8019e18:	6923      	ldr	r3, [r4, #16]
 8019e1a:	b36b      	cbz	r3, 8019e78 <__swbuf_r+0x84>
 8019e1c:	6923      	ldr	r3, [r4, #16]
 8019e1e:	6820      	ldr	r0, [r4, #0]
 8019e20:	1ac0      	subs	r0, r0, r3
 8019e22:	6963      	ldr	r3, [r4, #20]
 8019e24:	b2f6      	uxtb	r6, r6
 8019e26:	4283      	cmp	r3, r0
 8019e28:	4637      	mov	r7, r6
 8019e2a:	dc04      	bgt.n	8019e36 <__swbuf_r+0x42>
 8019e2c:	4621      	mov	r1, r4
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f7ff fc1c 	bl	801966c <_fflush_r>
 8019e34:	bb30      	cbnz	r0, 8019e84 <__swbuf_r+0x90>
 8019e36:	68a3      	ldr	r3, [r4, #8]
 8019e38:	3b01      	subs	r3, #1
 8019e3a:	60a3      	str	r3, [r4, #8]
 8019e3c:	6823      	ldr	r3, [r4, #0]
 8019e3e:	1c5a      	adds	r2, r3, #1
 8019e40:	6022      	str	r2, [r4, #0]
 8019e42:	701e      	strb	r6, [r3, #0]
 8019e44:	6963      	ldr	r3, [r4, #20]
 8019e46:	3001      	adds	r0, #1
 8019e48:	4283      	cmp	r3, r0
 8019e4a:	d004      	beq.n	8019e56 <__swbuf_r+0x62>
 8019e4c:	89a3      	ldrh	r3, [r4, #12]
 8019e4e:	07db      	lsls	r3, r3, #31
 8019e50:	d506      	bpl.n	8019e60 <__swbuf_r+0x6c>
 8019e52:	2e0a      	cmp	r6, #10
 8019e54:	d104      	bne.n	8019e60 <__swbuf_r+0x6c>
 8019e56:	4621      	mov	r1, r4
 8019e58:	4628      	mov	r0, r5
 8019e5a:	f7ff fc07 	bl	801966c <_fflush_r>
 8019e5e:	b988      	cbnz	r0, 8019e84 <__swbuf_r+0x90>
 8019e60:	4638      	mov	r0, r7
 8019e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e64:	4b0a      	ldr	r3, [pc, #40]	; (8019e90 <__swbuf_r+0x9c>)
 8019e66:	429c      	cmp	r4, r3
 8019e68:	d101      	bne.n	8019e6e <__swbuf_r+0x7a>
 8019e6a:	68ac      	ldr	r4, [r5, #8]
 8019e6c:	e7cf      	b.n	8019e0e <__swbuf_r+0x1a>
 8019e6e:	4b09      	ldr	r3, [pc, #36]	; (8019e94 <__swbuf_r+0xa0>)
 8019e70:	429c      	cmp	r4, r3
 8019e72:	bf08      	it	eq
 8019e74:	68ec      	ldreq	r4, [r5, #12]
 8019e76:	e7ca      	b.n	8019e0e <__swbuf_r+0x1a>
 8019e78:	4621      	mov	r1, r4
 8019e7a:	4628      	mov	r0, r5
 8019e7c:	f000 f80c 	bl	8019e98 <__swsetup_r>
 8019e80:	2800      	cmp	r0, #0
 8019e82:	d0cb      	beq.n	8019e1c <__swbuf_r+0x28>
 8019e84:	f04f 37ff 	mov.w	r7, #4294967295
 8019e88:	e7ea      	b.n	8019e60 <__swbuf_r+0x6c>
 8019e8a:	bf00      	nop
 8019e8c:	0801d704 	.word	0x0801d704
 8019e90:	0801d724 	.word	0x0801d724
 8019e94:	0801d6e4 	.word	0x0801d6e4

08019e98 <__swsetup_r>:
 8019e98:	4b32      	ldr	r3, [pc, #200]	; (8019f64 <__swsetup_r+0xcc>)
 8019e9a:	b570      	push	{r4, r5, r6, lr}
 8019e9c:	681d      	ldr	r5, [r3, #0]
 8019e9e:	4606      	mov	r6, r0
 8019ea0:	460c      	mov	r4, r1
 8019ea2:	b125      	cbz	r5, 8019eae <__swsetup_r+0x16>
 8019ea4:	69ab      	ldr	r3, [r5, #24]
 8019ea6:	b913      	cbnz	r3, 8019eae <__swsetup_r+0x16>
 8019ea8:	4628      	mov	r0, r5
 8019eaa:	f7ff f8b9 	bl	8019020 <__sinit>
 8019eae:	4b2e      	ldr	r3, [pc, #184]	; (8019f68 <__swsetup_r+0xd0>)
 8019eb0:	429c      	cmp	r4, r3
 8019eb2:	d10f      	bne.n	8019ed4 <__swsetup_r+0x3c>
 8019eb4:	686c      	ldr	r4, [r5, #4]
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019ebc:	0719      	lsls	r1, r3, #28
 8019ebe:	d42c      	bmi.n	8019f1a <__swsetup_r+0x82>
 8019ec0:	06dd      	lsls	r5, r3, #27
 8019ec2:	d411      	bmi.n	8019ee8 <__swsetup_r+0x50>
 8019ec4:	2309      	movs	r3, #9
 8019ec6:	6033      	str	r3, [r6, #0]
 8019ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ecc:	81a3      	strh	r3, [r4, #12]
 8019ece:	f04f 30ff 	mov.w	r0, #4294967295
 8019ed2:	e03e      	b.n	8019f52 <__swsetup_r+0xba>
 8019ed4:	4b25      	ldr	r3, [pc, #148]	; (8019f6c <__swsetup_r+0xd4>)
 8019ed6:	429c      	cmp	r4, r3
 8019ed8:	d101      	bne.n	8019ede <__swsetup_r+0x46>
 8019eda:	68ac      	ldr	r4, [r5, #8]
 8019edc:	e7eb      	b.n	8019eb6 <__swsetup_r+0x1e>
 8019ede:	4b24      	ldr	r3, [pc, #144]	; (8019f70 <__swsetup_r+0xd8>)
 8019ee0:	429c      	cmp	r4, r3
 8019ee2:	bf08      	it	eq
 8019ee4:	68ec      	ldreq	r4, [r5, #12]
 8019ee6:	e7e6      	b.n	8019eb6 <__swsetup_r+0x1e>
 8019ee8:	0758      	lsls	r0, r3, #29
 8019eea:	d512      	bpl.n	8019f12 <__swsetup_r+0x7a>
 8019eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019eee:	b141      	cbz	r1, 8019f02 <__swsetup_r+0x6a>
 8019ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ef4:	4299      	cmp	r1, r3
 8019ef6:	d002      	beq.n	8019efe <__swsetup_r+0x66>
 8019ef8:	4630      	mov	r0, r6
 8019efa:	f7ff fc2b 	bl	8019754 <_free_r>
 8019efe:	2300      	movs	r3, #0
 8019f00:	6363      	str	r3, [r4, #52]	; 0x34
 8019f02:	89a3      	ldrh	r3, [r4, #12]
 8019f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019f08:	81a3      	strh	r3, [r4, #12]
 8019f0a:	2300      	movs	r3, #0
 8019f0c:	6063      	str	r3, [r4, #4]
 8019f0e:	6923      	ldr	r3, [r4, #16]
 8019f10:	6023      	str	r3, [r4, #0]
 8019f12:	89a3      	ldrh	r3, [r4, #12]
 8019f14:	f043 0308 	orr.w	r3, r3, #8
 8019f18:	81a3      	strh	r3, [r4, #12]
 8019f1a:	6923      	ldr	r3, [r4, #16]
 8019f1c:	b94b      	cbnz	r3, 8019f32 <__swsetup_r+0x9a>
 8019f1e:	89a3      	ldrh	r3, [r4, #12]
 8019f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019f28:	d003      	beq.n	8019f32 <__swsetup_r+0x9a>
 8019f2a:	4621      	mov	r1, r4
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	f000 f84d 	bl	8019fcc <__smakebuf_r>
 8019f32:	89a0      	ldrh	r0, [r4, #12]
 8019f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f38:	f010 0301 	ands.w	r3, r0, #1
 8019f3c:	d00a      	beq.n	8019f54 <__swsetup_r+0xbc>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	60a3      	str	r3, [r4, #8]
 8019f42:	6963      	ldr	r3, [r4, #20]
 8019f44:	425b      	negs	r3, r3
 8019f46:	61a3      	str	r3, [r4, #24]
 8019f48:	6923      	ldr	r3, [r4, #16]
 8019f4a:	b943      	cbnz	r3, 8019f5e <__swsetup_r+0xc6>
 8019f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f50:	d1ba      	bne.n	8019ec8 <__swsetup_r+0x30>
 8019f52:	bd70      	pop	{r4, r5, r6, pc}
 8019f54:	0781      	lsls	r1, r0, #30
 8019f56:	bf58      	it	pl
 8019f58:	6963      	ldrpl	r3, [r4, #20]
 8019f5a:	60a3      	str	r3, [r4, #8]
 8019f5c:	e7f4      	b.n	8019f48 <__swsetup_r+0xb0>
 8019f5e:	2000      	movs	r0, #0
 8019f60:	e7f7      	b.n	8019f52 <__swsetup_r+0xba>
 8019f62:	bf00      	nop
 8019f64:	20000068 	.word	0x20000068
 8019f68:	0801d704 	.word	0x0801d704
 8019f6c:	0801d724 	.word	0x0801d724
 8019f70:	0801d6e4 	.word	0x0801d6e4

08019f74 <abort>:
 8019f74:	b508      	push	{r3, lr}
 8019f76:	2006      	movs	r0, #6
 8019f78:	f000 f890 	bl	801a09c <raise>
 8019f7c:	2001      	movs	r0, #1
 8019f7e:	f7e7 fee1 	bl	8001d44 <_exit>

08019f82 <__swhatbuf_r>:
 8019f82:	b570      	push	{r4, r5, r6, lr}
 8019f84:	460e      	mov	r6, r1
 8019f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f8a:	2900      	cmp	r1, #0
 8019f8c:	b096      	sub	sp, #88	; 0x58
 8019f8e:	4614      	mov	r4, r2
 8019f90:	461d      	mov	r5, r3
 8019f92:	da07      	bge.n	8019fa4 <__swhatbuf_r+0x22>
 8019f94:	2300      	movs	r3, #0
 8019f96:	602b      	str	r3, [r5, #0]
 8019f98:	89b3      	ldrh	r3, [r6, #12]
 8019f9a:	061a      	lsls	r2, r3, #24
 8019f9c:	d410      	bmi.n	8019fc0 <__swhatbuf_r+0x3e>
 8019f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fa2:	e00e      	b.n	8019fc2 <__swhatbuf_r+0x40>
 8019fa4:	466a      	mov	r2, sp
 8019fa6:	f000 f895 	bl	801a0d4 <_fstat_r>
 8019faa:	2800      	cmp	r0, #0
 8019fac:	dbf2      	blt.n	8019f94 <__swhatbuf_r+0x12>
 8019fae:	9a01      	ldr	r2, [sp, #4]
 8019fb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019fb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019fb8:	425a      	negs	r2, r3
 8019fba:	415a      	adcs	r2, r3
 8019fbc:	602a      	str	r2, [r5, #0]
 8019fbe:	e7ee      	b.n	8019f9e <__swhatbuf_r+0x1c>
 8019fc0:	2340      	movs	r3, #64	; 0x40
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	6023      	str	r3, [r4, #0]
 8019fc6:	b016      	add	sp, #88	; 0x58
 8019fc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08019fcc <__smakebuf_r>:
 8019fcc:	898b      	ldrh	r3, [r1, #12]
 8019fce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019fd0:	079d      	lsls	r5, r3, #30
 8019fd2:	4606      	mov	r6, r0
 8019fd4:	460c      	mov	r4, r1
 8019fd6:	d507      	bpl.n	8019fe8 <__smakebuf_r+0x1c>
 8019fd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019fdc:	6023      	str	r3, [r4, #0]
 8019fde:	6123      	str	r3, [r4, #16]
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	6163      	str	r3, [r4, #20]
 8019fe4:	b002      	add	sp, #8
 8019fe6:	bd70      	pop	{r4, r5, r6, pc}
 8019fe8:	ab01      	add	r3, sp, #4
 8019fea:	466a      	mov	r2, sp
 8019fec:	f7ff ffc9 	bl	8019f82 <__swhatbuf_r>
 8019ff0:	9900      	ldr	r1, [sp, #0]
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	4630      	mov	r0, r6
 8019ff6:	f7ff f8fd 	bl	80191f4 <_malloc_r>
 8019ffa:	b948      	cbnz	r0, 801a010 <__smakebuf_r+0x44>
 8019ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a000:	059a      	lsls	r2, r3, #22
 801a002:	d4ef      	bmi.n	8019fe4 <__smakebuf_r+0x18>
 801a004:	f023 0303 	bic.w	r3, r3, #3
 801a008:	f043 0302 	orr.w	r3, r3, #2
 801a00c:	81a3      	strh	r3, [r4, #12]
 801a00e:	e7e3      	b.n	8019fd8 <__smakebuf_r+0xc>
 801a010:	4b0d      	ldr	r3, [pc, #52]	; (801a048 <__smakebuf_r+0x7c>)
 801a012:	62b3      	str	r3, [r6, #40]	; 0x28
 801a014:	89a3      	ldrh	r3, [r4, #12]
 801a016:	6020      	str	r0, [r4, #0]
 801a018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a01c:	81a3      	strh	r3, [r4, #12]
 801a01e:	9b00      	ldr	r3, [sp, #0]
 801a020:	6163      	str	r3, [r4, #20]
 801a022:	9b01      	ldr	r3, [sp, #4]
 801a024:	6120      	str	r0, [r4, #16]
 801a026:	b15b      	cbz	r3, 801a040 <__smakebuf_r+0x74>
 801a028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a02c:	4630      	mov	r0, r6
 801a02e:	f000 f863 	bl	801a0f8 <_isatty_r>
 801a032:	b128      	cbz	r0, 801a040 <__smakebuf_r+0x74>
 801a034:	89a3      	ldrh	r3, [r4, #12]
 801a036:	f023 0303 	bic.w	r3, r3, #3
 801a03a:	f043 0301 	orr.w	r3, r3, #1
 801a03e:	81a3      	strh	r3, [r4, #12]
 801a040:	89a0      	ldrh	r0, [r4, #12]
 801a042:	4305      	orrs	r5, r0
 801a044:	81a5      	strh	r5, [r4, #12]
 801a046:	e7cd      	b.n	8019fe4 <__smakebuf_r+0x18>
 801a048:	08018fb9 	.word	0x08018fb9

0801a04c <_raise_r>:
 801a04c:	291f      	cmp	r1, #31
 801a04e:	b538      	push	{r3, r4, r5, lr}
 801a050:	4604      	mov	r4, r0
 801a052:	460d      	mov	r5, r1
 801a054:	d904      	bls.n	801a060 <_raise_r+0x14>
 801a056:	2316      	movs	r3, #22
 801a058:	6003      	str	r3, [r0, #0]
 801a05a:	f04f 30ff 	mov.w	r0, #4294967295
 801a05e:	bd38      	pop	{r3, r4, r5, pc}
 801a060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a062:	b112      	cbz	r2, 801a06a <_raise_r+0x1e>
 801a064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a068:	b94b      	cbnz	r3, 801a07e <_raise_r+0x32>
 801a06a:	4620      	mov	r0, r4
 801a06c:	f000 f830 	bl	801a0d0 <_getpid_r>
 801a070:	462a      	mov	r2, r5
 801a072:	4601      	mov	r1, r0
 801a074:	4620      	mov	r0, r4
 801a076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a07a:	f000 b817 	b.w	801a0ac <_kill_r>
 801a07e:	2b01      	cmp	r3, #1
 801a080:	d00a      	beq.n	801a098 <_raise_r+0x4c>
 801a082:	1c59      	adds	r1, r3, #1
 801a084:	d103      	bne.n	801a08e <_raise_r+0x42>
 801a086:	2316      	movs	r3, #22
 801a088:	6003      	str	r3, [r0, #0]
 801a08a:	2001      	movs	r0, #1
 801a08c:	e7e7      	b.n	801a05e <_raise_r+0x12>
 801a08e:	2400      	movs	r4, #0
 801a090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a094:	4628      	mov	r0, r5
 801a096:	4798      	blx	r3
 801a098:	2000      	movs	r0, #0
 801a09a:	e7e0      	b.n	801a05e <_raise_r+0x12>

0801a09c <raise>:
 801a09c:	4b02      	ldr	r3, [pc, #8]	; (801a0a8 <raise+0xc>)
 801a09e:	4601      	mov	r1, r0
 801a0a0:	6818      	ldr	r0, [r3, #0]
 801a0a2:	f7ff bfd3 	b.w	801a04c <_raise_r>
 801a0a6:	bf00      	nop
 801a0a8:	20000068 	.word	0x20000068

0801a0ac <_kill_r>:
 801a0ac:	b538      	push	{r3, r4, r5, lr}
 801a0ae:	4d07      	ldr	r5, [pc, #28]	; (801a0cc <_kill_r+0x20>)
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	4604      	mov	r4, r0
 801a0b4:	4608      	mov	r0, r1
 801a0b6:	4611      	mov	r1, r2
 801a0b8:	602b      	str	r3, [r5, #0]
 801a0ba:	f7e7 fe31 	bl	8001d20 <_kill>
 801a0be:	1c43      	adds	r3, r0, #1
 801a0c0:	d102      	bne.n	801a0c8 <_kill_r+0x1c>
 801a0c2:	682b      	ldr	r3, [r5, #0]
 801a0c4:	b103      	cbz	r3, 801a0c8 <_kill_r+0x1c>
 801a0c6:	6023      	str	r3, [r4, #0]
 801a0c8:	bd38      	pop	{r3, r4, r5, pc}
 801a0ca:	bf00      	nop
 801a0cc:	2000d0c0 	.word	0x2000d0c0

0801a0d0 <_getpid_r>:
 801a0d0:	f7e7 be1e 	b.w	8001d10 <_getpid>

0801a0d4 <_fstat_r>:
 801a0d4:	b538      	push	{r3, r4, r5, lr}
 801a0d6:	4d07      	ldr	r5, [pc, #28]	; (801a0f4 <_fstat_r+0x20>)
 801a0d8:	2300      	movs	r3, #0
 801a0da:	4604      	mov	r4, r0
 801a0dc:	4608      	mov	r0, r1
 801a0de:	4611      	mov	r1, r2
 801a0e0:	602b      	str	r3, [r5, #0]
 801a0e2:	f7e7 fe7e 	bl	8001de2 <_fstat>
 801a0e6:	1c43      	adds	r3, r0, #1
 801a0e8:	d102      	bne.n	801a0f0 <_fstat_r+0x1c>
 801a0ea:	682b      	ldr	r3, [r5, #0]
 801a0ec:	b103      	cbz	r3, 801a0f0 <_fstat_r+0x1c>
 801a0ee:	6023      	str	r3, [r4, #0]
 801a0f0:	bd38      	pop	{r3, r4, r5, pc}
 801a0f2:	bf00      	nop
 801a0f4:	2000d0c0 	.word	0x2000d0c0

0801a0f8 <_isatty_r>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4d06      	ldr	r5, [pc, #24]	; (801a114 <_isatty_r+0x1c>)
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	4604      	mov	r4, r0
 801a100:	4608      	mov	r0, r1
 801a102:	602b      	str	r3, [r5, #0]
 801a104:	f7e7 fe7d 	bl	8001e02 <_isatty>
 801a108:	1c43      	adds	r3, r0, #1
 801a10a:	d102      	bne.n	801a112 <_isatty_r+0x1a>
 801a10c:	682b      	ldr	r3, [r5, #0]
 801a10e:	b103      	cbz	r3, 801a112 <_isatty_r+0x1a>
 801a110:	6023      	str	r3, [r4, #0]
 801a112:	bd38      	pop	{r3, r4, r5, pc}
 801a114:	2000d0c0 	.word	0x2000d0c0

0801a118 <log>:
 801a118:	b538      	push	{r3, r4, r5, lr}
 801a11a:	ed2d 8b02 	vpush	{d8}
 801a11e:	ec55 4b10 	vmov	r4, r5, d0
 801a122:	f000 f841 	bl	801a1a8 <__ieee754_log>
 801a126:	4b1e      	ldr	r3, [pc, #120]	; (801a1a0 <log+0x88>)
 801a128:	eeb0 8a40 	vmov.f32	s16, s0
 801a12c:	eef0 8a60 	vmov.f32	s17, s1
 801a130:	f993 3000 	ldrsb.w	r3, [r3]
 801a134:	3301      	adds	r3, #1
 801a136:	d01a      	beq.n	801a16e <log+0x56>
 801a138:	4622      	mov	r2, r4
 801a13a:	462b      	mov	r3, r5
 801a13c:	4620      	mov	r0, r4
 801a13e:	4629      	mov	r1, r5
 801a140:	f7e6 fcec 	bl	8000b1c <__aeabi_dcmpun>
 801a144:	b998      	cbnz	r0, 801a16e <log+0x56>
 801a146:	2200      	movs	r2, #0
 801a148:	2300      	movs	r3, #0
 801a14a:	4620      	mov	r0, r4
 801a14c:	4629      	mov	r1, r5
 801a14e:	f7e6 fcdb 	bl	8000b08 <__aeabi_dcmpgt>
 801a152:	b960      	cbnz	r0, 801a16e <log+0x56>
 801a154:	2200      	movs	r2, #0
 801a156:	2300      	movs	r3, #0
 801a158:	4620      	mov	r0, r4
 801a15a:	4629      	mov	r1, r5
 801a15c:	f7e6 fcac 	bl	8000ab8 <__aeabi_dcmpeq>
 801a160:	b160      	cbz	r0, 801a17c <log+0x64>
 801a162:	f7ff f9f7 	bl	8019554 <__errno>
 801a166:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 801a198 <log+0x80>
 801a16a:	2322      	movs	r3, #34	; 0x22
 801a16c:	6003      	str	r3, [r0, #0]
 801a16e:	eeb0 0a48 	vmov.f32	s0, s16
 801a172:	eef0 0a68 	vmov.f32	s1, s17
 801a176:	ecbd 8b02 	vpop	{d8}
 801a17a:	bd38      	pop	{r3, r4, r5, pc}
 801a17c:	f7ff f9ea 	bl	8019554 <__errno>
 801a180:	ecbd 8b02 	vpop	{d8}
 801a184:	2321      	movs	r3, #33	; 0x21
 801a186:	6003      	str	r3, [r0, #0]
 801a188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a18c:	4805      	ldr	r0, [pc, #20]	; (801a1a4 <log+0x8c>)
 801a18e:	f000 b9c7 	b.w	801a520 <nan>
 801a192:	bf00      	nop
 801a194:	f3af 8000 	nop.w
 801a198:	00000000 	.word	0x00000000
 801a19c:	fff00000 	.word	0xfff00000
 801a1a0:	200000cc 	.word	0x200000cc
 801a1a4:	0801d7f9 	.word	0x0801d7f9

0801a1a8 <__ieee754_log>:
 801a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1ac:	ec51 0b10 	vmov	r0, r1, d0
 801a1b0:	ed2d 8b04 	vpush	{d8-d9}
 801a1b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a1b8:	b083      	sub	sp, #12
 801a1ba:	460d      	mov	r5, r1
 801a1bc:	da29      	bge.n	801a212 <__ieee754_log+0x6a>
 801a1be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a1c2:	4303      	orrs	r3, r0
 801a1c4:	ee10 2a10 	vmov	r2, s0
 801a1c8:	d10c      	bne.n	801a1e4 <__ieee754_log+0x3c>
 801a1ca:	49cf      	ldr	r1, [pc, #828]	; (801a508 <__ieee754_log+0x360>)
 801a1cc:	2200      	movs	r2, #0
 801a1ce:	2300      	movs	r3, #0
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	f7e6 fb33 	bl	800083c <__aeabi_ddiv>
 801a1d6:	ec41 0b10 	vmov	d0, r0, r1
 801a1da:	b003      	add	sp, #12
 801a1dc:	ecbd 8b04 	vpop	{d8-d9}
 801a1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1e4:	2900      	cmp	r1, #0
 801a1e6:	da05      	bge.n	801a1f4 <__ieee754_log+0x4c>
 801a1e8:	460b      	mov	r3, r1
 801a1ea:	f7e6 f845 	bl	8000278 <__aeabi_dsub>
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	e7ee      	b.n	801a1d2 <__ieee754_log+0x2a>
 801a1f4:	4bc5      	ldr	r3, [pc, #788]	; (801a50c <__ieee754_log+0x364>)
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	f7e6 f9f6 	bl	80005e8 <__aeabi_dmul>
 801a1fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a200:	460d      	mov	r5, r1
 801a202:	4ac3      	ldr	r2, [pc, #780]	; (801a510 <__ieee754_log+0x368>)
 801a204:	4295      	cmp	r5, r2
 801a206:	dd06      	ble.n	801a216 <__ieee754_log+0x6e>
 801a208:	4602      	mov	r2, r0
 801a20a:	460b      	mov	r3, r1
 801a20c:	f7e6 f836 	bl	800027c <__adddf3>
 801a210:	e7e1      	b.n	801a1d6 <__ieee754_log+0x2e>
 801a212:	2300      	movs	r3, #0
 801a214:	e7f5      	b.n	801a202 <__ieee754_log+0x5a>
 801a216:	152c      	asrs	r4, r5, #20
 801a218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a21c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a220:	441c      	add	r4, r3
 801a222:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a226:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a22a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a22e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a232:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a236:	ea42 0105 	orr.w	r1, r2, r5
 801a23a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a23e:	2200      	movs	r2, #0
 801a240:	4bb4      	ldr	r3, [pc, #720]	; (801a514 <__ieee754_log+0x36c>)
 801a242:	f7e6 f819 	bl	8000278 <__aeabi_dsub>
 801a246:	1cab      	adds	r3, r5, #2
 801a248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a24c:	2b02      	cmp	r3, #2
 801a24e:	4682      	mov	sl, r0
 801a250:	468b      	mov	fp, r1
 801a252:	f04f 0200 	mov.w	r2, #0
 801a256:	dc53      	bgt.n	801a300 <__ieee754_log+0x158>
 801a258:	2300      	movs	r3, #0
 801a25a:	f7e6 fc2d 	bl	8000ab8 <__aeabi_dcmpeq>
 801a25e:	b1d0      	cbz	r0, 801a296 <__ieee754_log+0xee>
 801a260:	2c00      	cmp	r4, #0
 801a262:	f000 8122 	beq.w	801a4aa <__ieee754_log+0x302>
 801a266:	4620      	mov	r0, r4
 801a268:	f7e6 f954 	bl	8000514 <__aeabi_i2d>
 801a26c:	a390      	add	r3, pc, #576	; (adr r3, 801a4b0 <__ieee754_log+0x308>)
 801a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a272:	4606      	mov	r6, r0
 801a274:	460f      	mov	r7, r1
 801a276:	f7e6 f9b7 	bl	80005e8 <__aeabi_dmul>
 801a27a:	a38f      	add	r3, pc, #572	; (adr r3, 801a4b8 <__ieee754_log+0x310>)
 801a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a280:	4604      	mov	r4, r0
 801a282:	460d      	mov	r5, r1
 801a284:	4630      	mov	r0, r6
 801a286:	4639      	mov	r1, r7
 801a288:	f7e6 f9ae 	bl	80005e8 <__aeabi_dmul>
 801a28c:	4602      	mov	r2, r0
 801a28e:	460b      	mov	r3, r1
 801a290:	4620      	mov	r0, r4
 801a292:	4629      	mov	r1, r5
 801a294:	e7ba      	b.n	801a20c <__ieee754_log+0x64>
 801a296:	a38a      	add	r3, pc, #552	; (adr r3, 801a4c0 <__ieee754_log+0x318>)
 801a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a29c:	4650      	mov	r0, sl
 801a29e:	4659      	mov	r1, fp
 801a2a0:	f7e6 f9a2 	bl	80005e8 <__aeabi_dmul>
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	460b      	mov	r3, r1
 801a2a8:	2000      	movs	r0, #0
 801a2aa:	499b      	ldr	r1, [pc, #620]	; (801a518 <__ieee754_log+0x370>)
 801a2ac:	f7e5 ffe4 	bl	8000278 <__aeabi_dsub>
 801a2b0:	4652      	mov	r2, sl
 801a2b2:	4606      	mov	r6, r0
 801a2b4:	460f      	mov	r7, r1
 801a2b6:	465b      	mov	r3, fp
 801a2b8:	4650      	mov	r0, sl
 801a2ba:	4659      	mov	r1, fp
 801a2bc:	f7e6 f994 	bl	80005e8 <__aeabi_dmul>
 801a2c0:	4602      	mov	r2, r0
 801a2c2:	460b      	mov	r3, r1
 801a2c4:	4630      	mov	r0, r6
 801a2c6:	4639      	mov	r1, r7
 801a2c8:	f7e6 f98e 	bl	80005e8 <__aeabi_dmul>
 801a2cc:	4606      	mov	r6, r0
 801a2ce:	460f      	mov	r7, r1
 801a2d0:	b914      	cbnz	r4, 801a2d8 <__ieee754_log+0x130>
 801a2d2:	4632      	mov	r2, r6
 801a2d4:	463b      	mov	r3, r7
 801a2d6:	e0a2      	b.n	801a41e <__ieee754_log+0x276>
 801a2d8:	4620      	mov	r0, r4
 801a2da:	f7e6 f91b 	bl	8000514 <__aeabi_i2d>
 801a2de:	a374      	add	r3, pc, #464	; (adr r3, 801a4b0 <__ieee754_log+0x308>)
 801a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2e4:	4680      	mov	r8, r0
 801a2e6:	4689      	mov	r9, r1
 801a2e8:	f7e6 f97e 	bl	80005e8 <__aeabi_dmul>
 801a2ec:	a372      	add	r3, pc, #456	; (adr r3, 801a4b8 <__ieee754_log+0x310>)
 801a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2f2:	4604      	mov	r4, r0
 801a2f4:	460d      	mov	r5, r1
 801a2f6:	4640      	mov	r0, r8
 801a2f8:	4649      	mov	r1, r9
 801a2fa:	f7e6 f975 	bl	80005e8 <__aeabi_dmul>
 801a2fe:	e0a7      	b.n	801a450 <__ieee754_log+0x2a8>
 801a300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a304:	f7e5 ffba 	bl	800027c <__adddf3>
 801a308:	4602      	mov	r2, r0
 801a30a:	460b      	mov	r3, r1
 801a30c:	4650      	mov	r0, sl
 801a30e:	4659      	mov	r1, fp
 801a310:	f7e6 fa94 	bl	800083c <__aeabi_ddiv>
 801a314:	ec41 0b18 	vmov	d8, r0, r1
 801a318:	4620      	mov	r0, r4
 801a31a:	f7e6 f8fb 	bl	8000514 <__aeabi_i2d>
 801a31e:	ec53 2b18 	vmov	r2, r3, d8
 801a322:	ec41 0b19 	vmov	d9, r0, r1
 801a326:	ec51 0b18 	vmov	r0, r1, d8
 801a32a:	f7e6 f95d 	bl	80005e8 <__aeabi_dmul>
 801a32e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a332:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a336:	9301      	str	r3, [sp, #4]
 801a338:	4602      	mov	r2, r0
 801a33a:	460b      	mov	r3, r1
 801a33c:	4680      	mov	r8, r0
 801a33e:	4689      	mov	r9, r1
 801a340:	f7e6 f952 	bl	80005e8 <__aeabi_dmul>
 801a344:	a360      	add	r3, pc, #384	; (adr r3, 801a4c8 <__ieee754_log+0x320>)
 801a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a34a:	4606      	mov	r6, r0
 801a34c:	460f      	mov	r7, r1
 801a34e:	f7e6 f94b 	bl	80005e8 <__aeabi_dmul>
 801a352:	a35f      	add	r3, pc, #380	; (adr r3, 801a4d0 <__ieee754_log+0x328>)
 801a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a358:	f7e5 ff90 	bl	800027c <__adddf3>
 801a35c:	4632      	mov	r2, r6
 801a35e:	463b      	mov	r3, r7
 801a360:	f7e6 f942 	bl	80005e8 <__aeabi_dmul>
 801a364:	a35c      	add	r3, pc, #368	; (adr r3, 801a4d8 <__ieee754_log+0x330>)
 801a366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a36a:	f7e5 ff87 	bl	800027c <__adddf3>
 801a36e:	4632      	mov	r2, r6
 801a370:	463b      	mov	r3, r7
 801a372:	f7e6 f939 	bl	80005e8 <__aeabi_dmul>
 801a376:	a35a      	add	r3, pc, #360	; (adr r3, 801a4e0 <__ieee754_log+0x338>)
 801a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a37c:	f7e5 ff7e 	bl	800027c <__adddf3>
 801a380:	4642      	mov	r2, r8
 801a382:	464b      	mov	r3, r9
 801a384:	f7e6 f930 	bl	80005e8 <__aeabi_dmul>
 801a388:	a357      	add	r3, pc, #348	; (adr r3, 801a4e8 <__ieee754_log+0x340>)
 801a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a38e:	4680      	mov	r8, r0
 801a390:	4689      	mov	r9, r1
 801a392:	4630      	mov	r0, r6
 801a394:	4639      	mov	r1, r7
 801a396:	f7e6 f927 	bl	80005e8 <__aeabi_dmul>
 801a39a:	a355      	add	r3, pc, #340	; (adr r3, 801a4f0 <__ieee754_log+0x348>)
 801a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3a0:	f7e5 ff6c 	bl	800027c <__adddf3>
 801a3a4:	4632      	mov	r2, r6
 801a3a6:	463b      	mov	r3, r7
 801a3a8:	f7e6 f91e 	bl	80005e8 <__aeabi_dmul>
 801a3ac:	a352      	add	r3, pc, #328	; (adr r3, 801a4f8 <__ieee754_log+0x350>)
 801a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a3b2:	f7e5 ff63 	bl	800027c <__adddf3>
 801a3b6:	4632      	mov	r2, r6
 801a3b8:	463b      	mov	r3, r7
 801a3ba:	f7e6 f915 	bl	80005e8 <__aeabi_dmul>
 801a3be:	460b      	mov	r3, r1
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	4649      	mov	r1, r9
 801a3c4:	4640      	mov	r0, r8
 801a3c6:	f7e5 ff59 	bl	800027c <__adddf3>
 801a3ca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a3ce:	9b01      	ldr	r3, [sp, #4]
 801a3d0:	3551      	adds	r5, #81	; 0x51
 801a3d2:	431d      	orrs	r5, r3
 801a3d4:	2d00      	cmp	r5, #0
 801a3d6:	4680      	mov	r8, r0
 801a3d8:	4689      	mov	r9, r1
 801a3da:	dd48      	ble.n	801a46e <__ieee754_log+0x2c6>
 801a3dc:	4b4e      	ldr	r3, [pc, #312]	; (801a518 <__ieee754_log+0x370>)
 801a3de:	2200      	movs	r2, #0
 801a3e0:	4650      	mov	r0, sl
 801a3e2:	4659      	mov	r1, fp
 801a3e4:	f7e6 f900 	bl	80005e8 <__aeabi_dmul>
 801a3e8:	4652      	mov	r2, sl
 801a3ea:	465b      	mov	r3, fp
 801a3ec:	f7e6 f8fc 	bl	80005e8 <__aeabi_dmul>
 801a3f0:	4602      	mov	r2, r0
 801a3f2:	460b      	mov	r3, r1
 801a3f4:	4606      	mov	r6, r0
 801a3f6:	460f      	mov	r7, r1
 801a3f8:	4640      	mov	r0, r8
 801a3fa:	4649      	mov	r1, r9
 801a3fc:	f7e5 ff3e 	bl	800027c <__adddf3>
 801a400:	ec53 2b18 	vmov	r2, r3, d8
 801a404:	f7e6 f8f0 	bl	80005e8 <__aeabi_dmul>
 801a408:	4680      	mov	r8, r0
 801a40a:	4689      	mov	r9, r1
 801a40c:	b964      	cbnz	r4, 801a428 <__ieee754_log+0x280>
 801a40e:	4602      	mov	r2, r0
 801a410:	460b      	mov	r3, r1
 801a412:	4630      	mov	r0, r6
 801a414:	4639      	mov	r1, r7
 801a416:	f7e5 ff2f 	bl	8000278 <__aeabi_dsub>
 801a41a:	4602      	mov	r2, r0
 801a41c:	460b      	mov	r3, r1
 801a41e:	4650      	mov	r0, sl
 801a420:	4659      	mov	r1, fp
 801a422:	f7e5 ff29 	bl	8000278 <__aeabi_dsub>
 801a426:	e6d6      	b.n	801a1d6 <__ieee754_log+0x2e>
 801a428:	a321      	add	r3, pc, #132	; (adr r3, 801a4b0 <__ieee754_log+0x308>)
 801a42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a42e:	ec51 0b19 	vmov	r0, r1, d9
 801a432:	f7e6 f8d9 	bl	80005e8 <__aeabi_dmul>
 801a436:	a320      	add	r3, pc, #128	; (adr r3, 801a4b8 <__ieee754_log+0x310>)
 801a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a43c:	4604      	mov	r4, r0
 801a43e:	460d      	mov	r5, r1
 801a440:	ec51 0b19 	vmov	r0, r1, d9
 801a444:	f7e6 f8d0 	bl	80005e8 <__aeabi_dmul>
 801a448:	4642      	mov	r2, r8
 801a44a:	464b      	mov	r3, r9
 801a44c:	f7e5 ff16 	bl	800027c <__adddf3>
 801a450:	4602      	mov	r2, r0
 801a452:	460b      	mov	r3, r1
 801a454:	4630      	mov	r0, r6
 801a456:	4639      	mov	r1, r7
 801a458:	f7e5 ff0e 	bl	8000278 <__aeabi_dsub>
 801a45c:	4652      	mov	r2, sl
 801a45e:	465b      	mov	r3, fp
 801a460:	f7e5 ff0a 	bl	8000278 <__aeabi_dsub>
 801a464:	4602      	mov	r2, r0
 801a466:	460b      	mov	r3, r1
 801a468:	4620      	mov	r0, r4
 801a46a:	4629      	mov	r1, r5
 801a46c:	e7d9      	b.n	801a422 <__ieee754_log+0x27a>
 801a46e:	4602      	mov	r2, r0
 801a470:	460b      	mov	r3, r1
 801a472:	4650      	mov	r0, sl
 801a474:	4659      	mov	r1, fp
 801a476:	f7e5 feff 	bl	8000278 <__aeabi_dsub>
 801a47a:	ec53 2b18 	vmov	r2, r3, d8
 801a47e:	f7e6 f8b3 	bl	80005e8 <__aeabi_dmul>
 801a482:	4606      	mov	r6, r0
 801a484:	460f      	mov	r7, r1
 801a486:	2c00      	cmp	r4, #0
 801a488:	f43f af23 	beq.w	801a2d2 <__ieee754_log+0x12a>
 801a48c:	a308      	add	r3, pc, #32	; (adr r3, 801a4b0 <__ieee754_log+0x308>)
 801a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a492:	ec51 0b19 	vmov	r0, r1, d9
 801a496:	f7e6 f8a7 	bl	80005e8 <__aeabi_dmul>
 801a49a:	a307      	add	r3, pc, #28	; (adr r3, 801a4b8 <__ieee754_log+0x310>)
 801a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	460d      	mov	r5, r1
 801a4a4:	ec51 0b19 	vmov	r0, r1, d9
 801a4a8:	e727      	b.n	801a2fa <__ieee754_log+0x152>
 801a4aa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a500 <__ieee754_log+0x358>
 801a4ae:	e694      	b.n	801a1da <__ieee754_log+0x32>
 801a4b0:	fee00000 	.word	0xfee00000
 801a4b4:	3fe62e42 	.word	0x3fe62e42
 801a4b8:	35793c76 	.word	0x35793c76
 801a4bc:	3dea39ef 	.word	0x3dea39ef
 801a4c0:	55555555 	.word	0x55555555
 801a4c4:	3fd55555 	.word	0x3fd55555
 801a4c8:	df3e5244 	.word	0xdf3e5244
 801a4cc:	3fc2f112 	.word	0x3fc2f112
 801a4d0:	96cb03de 	.word	0x96cb03de
 801a4d4:	3fc74664 	.word	0x3fc74664
 801a4d8:	94229359 	.word	0x94229359
 801a4dc:	3fd24924 	.word	0x3fd24924
 801a4e0:	55555593 	.word	0x55555593
 801a4e4:	3fe55555 	.word	0x3fe55555
 801a4e8:	d078c69f 	.word	0xd078c69f
 801a4ec:	3fc39a09 	.word	0x3fc39a09
 801a4f0:	1d8e78af 	.word	0x1d8e78af
 801a4f4:	3fcc71c5 	.word	0x3fcc71c5
 801a4f8:	9997fa04 	.word	0x9997fa04
 801a4fc:	3fd99999 	.word	0x3fd99999
	...
 801a508:	c3500000 	.word	0xc3500000
 801a50c:	43500000 	.word	0x43500000
 801a510:	7fefffff 	.word	0x7fefffff
 801a514:	3ff00000 	.word	0x3ff00000
 801a518:	3fe00000 	.word	0x3fe00000
 801a51c:	00000000 	.word	0x00000000

0801a520 <nan>:
 801a520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a528 <nan+0x8>
 801a524:	4770      	bx	lr
 801a526:	bf00      	nop
 801a528:	00000000 	.word	0x00000000
 801a52c:	7ff80000 	.word	0x7ff80000

0801a530 <_init>:
 801a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a532:	bf00      	nop
 801a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a536:	bc08      	pop	{r3}
 801a538:	469e      	mov	lr, r3
 801a53a:	4770      	bx	lr

0801a53c <_fini>:
 801a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a53e:	bf00      	nop
 801a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a542:	bc08      	pop	{r3}
 801a544:	469e      	mov	lr, r3
 801a546:	4770      	bx	lr
