
csro_general_ctrl_2021_09_09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800efb0  0800efb0  0001efb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5ec  0800f5ec  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5ec  0800f5ec  0001f5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5f4  0800f5f4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5f4  0800f5f4  0001f5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5f8  0800f5f8  0001f5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800f5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          00006a14  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00001000  20006b90  20006b90  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031fd8  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061b9  00000000  00000000  00052184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d48  00000000  00000000  00058340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af8  00000000  00000000  0005a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b66  00000000  00000000  0005bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029729  00000000  00000000  000846e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5fd1  00000000  00000000  000ade0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00193de0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cec  00000000  00000000  00193e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef98 	.word	0x0800ef98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800ef98 	.word	0x0800ef98

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e92:	4b75      	ldr	r3, [pc, #468]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000e94:	4a75      	ldr	r2, [pc, #468]	; (800106c <MX_ADC1_Init+0x1ec>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e98:	4b73      	ldr	r3, [pc, #460]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea0:	4b71      	ldr	r3, [pc, #452]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ea6:	4b70      	ldr	r3, [pc, #448]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eac:	4b6e      	ldr	r3, [pc, #440]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb2:	4b6d      	ldr	r3, [pc, #436]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eba:	4b6b      	ldr	r3, [pc, #428]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b69      	ldr	r3, [pc, #420]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ec2:	4a6b      	ldr	r2, [pc, #428]	; (8001070 <MX_ADC1_Init+0x1f0>)
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	4b68      	ldr	r3, [pc, #416]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8000ecc:	4b66      	ldr	r3, [pc, #408]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ece:	220d      	movs	r2, #13
 8000ed0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ed2:	4b65      	ldr	r3, [pc, #404]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eda:	4b63      	ldr	r3, [pc, #396]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee0:	4861      	ldr	r0, [pc, #388]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ee2:	f002 fec3 	bl	8003c6c <HAL_ADC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000eec:	f000 fdbe 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000ef0:	230d      	movs	r3, #13
 8000ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000ef8:	2306      	movs	r3, #6
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4859      	ldr	r0, [pc, #356]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f02:	f003 f96f 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f0c:	f000 fdae 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f10:	230c      	movs	r3, #12
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4852      	ldr	r0, [pc, #328]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f1e:	f003 f961 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f28:	f000 fda0 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f30:	2303      	movs	r3, #3
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	484b      	ldr	r0, [pc, #300]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f3a:	f003 f953 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f44:	f000 fd92 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f48:	2309      	movs	r3, #9
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4844      	ldr	r0, [pc, #272]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f56:	f003 f945 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f60:	f000 fd84 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	483d      	ldr	r0, [pc, #244]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f72:	f003 f937 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f7c:	f000 fd76 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f80:	2303      	movs	r3, #3
 8000f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f84:	2306      	movs	r3, #6
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4836      	ldr	r0, [pc, #216]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000f8e:	f003 f929 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000f98:	f000 fd68 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482f      	ldr	r0, [pc, #188]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000faa:	f003 f91b 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000fb4:	f000 fd5a 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4828      	ldr	r0, [pc, #160]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000fc6:	f003 f90d 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000fd0:	f000 fd4c 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4821      	ldr	r0, [pc, #132]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000fe2:	f003 f8ff 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000fec:	f000 fd3e 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8000ffe:	f003 f8f1 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001008:	f000 fd30 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800100c:	2310      	movs	r3, #16
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001010:	230b      	movs	r3, #11
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4813      	ldr	r0, [pc, #76]	; (8001068 <MX_ADC1_Init+0x1e8>)
 800101a:	f003 f8e3 	bl	80041e4 <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8001024:	f000 fd22 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001028:	2311      	movs	r3, #17
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800102c:	230c      	movs	r3, #12
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8001036:	f003 f8d5 	bl	80041e4 <HAL_ADC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8001040:	f000 fd14 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001044:	2312      	movs	r3, #18
 8001046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001048:	230d      	movs	r3, #13
 800104a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_ADC1_Init+0x1e8>)
 8001052:	f003 f8c7 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800105c:	f000 fd06 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20004b70 	.word	0x20004b70
 800106c:	40012000 	.word	0x40012000
 8001070:	0f000001 	.word	0x0f000001

08001074 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	; 0x30
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <HAL_ADC_MspInit+0x154>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f040 8094 	bne.w	80011c0 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	4b4b      	ldr	r3, [pc, #300]	; (80011cc <HAL_ADC_MspInit+0x158>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	4a4a      	ldr	r2, [pc, #296]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a6:	6453      	str	r3, [r2, #68]	; 0x44
 80010a8:	4b48      	ldr	r3, [pc, #288]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	61bb      	str	r3, [r7, #24]
 80010b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	4b44      	ldr	r3, [pc, #272]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a43      	ldr	r2, [pc, #268]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b41      	ldr	r3, [pc, #260]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a3c      	ldr	r2, [pc, #240]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a35      	ldr	r2, [pc, #212]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_ADC_MspInit+0x158>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = DP_VF3_Pin|DP_VF2_Pin|DP_VF1_Pin;
 8001108:	230d      	movs	r3, #13
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	482d      	ldr	r0, [pc, #180]	; (80011d0 <HAL_ADC_MspInit+0x15c>)
 800111c:	f003 fff0 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF1_Pin|NTC_VF2_Pin|NTC_VF3_Pin|NTC_VF4_Pin
 8001120:	2379      	movs	r3, #121	; 0x79
 8001122:	61fb      	str	r3, [r7, #28]
                          |NTC_VF5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001124:	2303      	movs	r3, #3
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4828      	ldr	r0, [pc, #160]	; (80011d4 <HAL_ADC_MspInit+0x160>)
 8001134:	f003 ffe4 	bl	8005100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NTC_VF6_Pin|VALVE_FEEDBACK_Pin;
 8001138:	2303      	movs	r3, #3
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	4823      	ldr	r0, [pc, #140]	; (80011d8 <HAL_ADC_MspInit+0x164>)
 800114c:	f003 ffd8 	bl	8005100 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001150:	4b22      	ldr	r3, [pc, #136]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001152:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_ADC_MspInit+0x16c>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_ADC_MspInit+0x168>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <HAL_ADC_MspInit+0x168>)
 800116a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001176:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_ADC_MspInit+0x168>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_ADC_MspInit+0x168>)
 800118a:	2200      	movs	r2, #0
 800118c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <HAL_ADC_MspInit+0x168>)
 8001196:	f003 fbb1 	bl	80048fc <HAL_DMA_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80011a0:	f000 fc64 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <HAL_ADC_MspInit+0x168>)
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
 80011aa:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <HAL_ADC_MspInit+0x168>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2105      	movs	r1, #5
 80011b4:	2012      	movs	r0, #18
 80011b6:	f003 fb77 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011ba:	2012      	movs	r0, #18
 80011bc:	f003 fb90 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20004bb8 	.word	0x20004bb8
 80011e0:	40026410 	.word	0x40026410

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b33      	ldr	r3, [pc, #204]	; (80012bc <MX_DMA_Init+0xd8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a32      	ldr	r2, [pc, #200]	; (80012bc <MX_DMA_Init+0xd8>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b30      	ldr	r3, [pc, #192]	; (80012bc <MX_DMA_Init+0xd8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_DMA_Init+0xd8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a2b      	ldr	r2, [pc, #172]	; (80012bc <MX_DMA_Init+0xd8>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <MX_DMA_Init+0xd8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	200c      	movs	r0, #12
 8001228:	f003 fb3e 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800122c:	200c      	movs	r0, #12
 800122e:	f003 fb57 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	200e      	movs	r0, #14
 8001238:	f003 fb36 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800123c:	200e      	movs	r0, #14
 800123e:	f003 fb4f 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2010      	movs	r0, #16
 8001248:	f003 fb2e 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800124c:	2010      	movs	r0, #16
 800124e:	f003 fb47 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	2011      	movs	r0, #17
 8001258:	f003 fb26 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800125c:	2011      	movs	r0, #17
 800125e:	f003 fb3f 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	2038      	movs	r0, #56	; 0x38
 8001268:	f003 fb1e 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800126c:	2038      	movs	r0, #56	; 0x38
 800126e:	f003 fb37 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2039      	movs	r0, #57	; 0x39
 8001278:	f003 fb16 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800127c:	2039      	movs	r0, #57	; 0x39
 800127e:	f003 fb2f 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	203a      	movs	r0, #58	; 0x3a
 8001288:	f003 fb0e 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800128c:	203a      	movs	r0, #58	; 0x3a
 800128e:	f003 fb27 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2045      	movs	r0, #69	; 0x45
 8001298:	f003 fb06 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800129c:	2045      	movs	r0, #69	; 0x45
 800129e:	f003 fb1f 	bl	80048e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2046      	movs	r0, #70	; 0x46
 80012a8:	f003 fafe 	bl	80048a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80012ac:	2046      	movs	r0, #70	; 0x46
 80012ae:	f003 fb17 	bl	80048e0 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80012c4:	f001 fb22 	bl	800290c <fnd_com_modbus_rtu_init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue01 */
  Queue01Handle = osMessageQueueNew(16, sizeof(uint16_t), &Queue01_attributes);
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <MX_FREERTOS_Init+0xac>)
 80012ca:	2102      	movs	r1, #2
 80012cc:	2010      	movs	r0, #16
 80012ce:	f008 febf 	bl	800a050 <osMessageQueueNew>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a26      	ldr	r2, [pc, #152]	; (8001370 <MX_FREERTOS_Init+0xb0>)
 80012d6:	6013      	str	r3, [r2, #0]

  /* creation of Queue02 */
  Queue02Handle = osMessageQueueNew(16, sizeof(uint16_t), &Queue02_attributes);
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <MX_FREERTOS_Init+0xb4>)
 80012da:	2102      	movs	r1, #2
 80012dc:	2010      	movs	r0, #16
 80012de:	f008 feb7 	bl	800a050 <osMessageQueueNew>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a24      	ldr	r2, [pc, #144]	; (8001378 <MX_FREERTOS_Init+0xb8>)
 80012e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80012e8:	4a24      	ldr	r2, [pc, #144]	; (800137c <MX_FREERTOS_Init+0xbc>)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4824      	ldr	r0, [pc, #144]	; (8001380 <MX_FREERTOS_Init+0xc0>)
 80012ee:	f008 fc23 	bl	8009b38 <osThreadNew>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a23      	ldr	r2, [pc, #140]	; (8001384 <MX_FREERTOS_Init+0xc4>)
 80012f6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80012f8:	4a23      	ldr	r2, [pc, #140]	; (8001388 <MX_FREERTOS_Init+0xc8>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4823      	ldr	r0, [pc, #140]	; (800138c <MX_FREERTOS_Init+0xcc>)
 80012fe:	f008 fc1b 	bl	8009b38 <osThreadNew>
 8001302:	4603      	mov	r3, r0
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <MX_FREERTOS_Init+0xd0>)
 8001306:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <MX_FREERTOS_Init+0xd4>)
 800130a:	2100      	movs	r1, #0
 800130c:	4822      	ldr	r0, [pc, #136]	; (8001398 <MX_FREERTOS_Init+0xd8>)
 800130e:	f008 fc13 	bl	8009b38 <osThreadNew>
 8001312:	4603      	mov	r3, r0
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <MX_FREERTOS_Init+0xdc>)
 8001316:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_FREERTOS_Init+0xe0>)
 800131a:	2100      	movs	r1, #0
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <MX_FREERTOS_Init+0xe4>)
 800131e:	f008 fc0b 	bl	8009b38 <osThreadNew>
 8001322:	4603      	mov	r3, r0
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <MX_FREERTOS_Init+0xe8>)
 8001326:	6013      	str	r3, [r2, #0]

  /* creation of Task05 */
  Task05Handle = osThreadNew(StartTask05, NULL, &Task05_attributes);
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <MX_FREERTOS_Init+0xec>)
 800132a:	2100      	movs	r1, #0
 800132c:	4820      	ldr	r0, [pc, #128]	; (80013b0 <MX_FREERTOS_Init+0xf0>)
 800132e:	f008 fc03 	bl	8009b38 <osThreadNew>
 8001332:	4603      	mov	r3, r0
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <MX_FREERTOS_Init+0xf4>)
 8001336:	6013      	str	r3, [r2, #0]

  /* creation of Task06 */
  Task06Handle = osThreadNew(StartTask06, NULL, &Task06_attributes);
 8001338:	4a1f      	ldr	r2, [pc, #124]	; (80013b8 <MX_FREERTOS_Init+0xf8>)
 800133a:	2100      	movs	r1, #0
 800133c:	481f      	ldr	r0, [pc, #124]	; (80013bc <MX_FREERTOS_Init+0xfc>)
 800133e:	f008 fbfb 	bl	8009b38 <osThreadNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <MX_FREERTOS_Init+0x100>)
 8001346:	6013      	str	r3, [r2, #0]

  /* creation of Task07 */
  Task07Handle = osThreadNew(StartTask07, NULL, &Task07_attributes);
 8001348:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <MX_FREERTOS_Init+0x104>)
 800134a:	2100      	movs	r1, #0
 800134c:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_FREERTOS_Init+0x108>)
 800134e:	f008 fbf3 	bl	8009b38 <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <MX_FREERTOS_Init+0x10c>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of Task08 */
  Task08Handle = osThreadNew(StartTask08, NULL, &Task08_attributes);
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <MX_FREERTOS_Init+0x110>)
 800135a:	2100      	movs	r1, #0
 800135c:	481d      	ldr	r0, [pc, #116]	; (80013d4 <MX_FREERTOS_Init+0x114>)
 800135e:	f008 fbeb 	bl	8009b38 <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <MX_FREERTOS_Init+0x118>)
 8001366:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800f138 	.word	0x0800f138
 8001370:	20004c1c 	.word	0x20004c1c
 8001374:	0800f150 	.word	0x0800f150
 8001378:	20004c3c 	.word	0x20004c3c
 800137c:	0800f018 	.word	0x0800f018
 8001380:	080013dd 	.word	0x080013dd
 8001384:	20004c2c 	.word	0x20004c2c
 8001388:	0800f03c 	.word	0x0800f03c
 800138c:	080013eb 	.word	0x080013eb
 8001390:	20004c18 	.word	0x20004c18
 8001394:	0800f060 	.word	0x0800f060
 8001398:	080013f9 	.word	0x080013f9
 800139c:	20004c34 	.word	0x20004c34
 80013a0:	0800f084 	.word	0x0800f084
 80013a4:	0800140f 	.word	0x0800140f
 80013a8:	20004c20 	.word	0x20004c20
 80013ac:	0800f0a8 	.word	0x0800f0a8
 80013b0:	0800141d 	.word	0x0800141d
 80013b4:	20004c38 	.word	0x20004c38
 80013b8:	0800f0cc 	.word	0x0800f0cc
 80013bc:	08001435 	.word	0x08001435
 80013c0:	20004c30 	.word	0x20004c30
 80013c4:	0800f0f0 	.word	0x0800f0f0
 80013c8:	08001489 	.word	0x08001489
 80013cc:	20004c24 	.word	0x20004c24
 80013d0:	0800f114 	.word	0x0800f114
 80013d4:	0800149f 	.word	0x0800149f
 80013d8:	20004c28 	.word	0x20004c28

080013dc <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 80013e4:	f001 fbc4 	bl	8002b70 <fnd_com_modbus_rtu_slave1_wait>
 80013e8:	e7fc      	b.n	80013e4 <StartTask01+0x8>

080013ea <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 80013f2:	f001 fbc7 	bl	8002b84 <fnd_com_modbus_rtu_slave2_wait>
 80013f6:	e7fc      	b.n	80013f2 <StartTask02+0x8>

080013f8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_master1_read_write();
 8001400:	f001 fb2e 	bl	8002a60 <fnd_com_modbus_rtu_master1_read_write>
    osDelay(1000);
 8001404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001408:	f008 fc28 	bl	8009c5c <osDelay>
    fnd_com_modbus_rtu_master1_read_write();
 800140c:	e7f8      	b.n	8001400 <StartTask03+0x8>

0800140e <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_master2_read_write();
 8001416:	f001 fb31 	bl	8002a7c <fnd_com_modbus_rtu_master2_read_write>
 800141a:	e7fc      	b.n	8001416 <StartTask04+0x8>

0800141c <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  fnd_output_stepper_init();
 8001424:	f002 fb26 	bl	8003a74 <fnd_output_stepper_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f008 fc17 	bl	8009c5c <osDelay>
    fnd_output_stepper_10ms_tick();
 800142e:	f002 fbc3 	bl	8003bb8 <fnd_output_stepper_10ms_tick>
    osDelay(10);
 8001432:	e7f9      	b.n	8001428 <StartTask05+0xc>

08001434 <StartTask06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask06 */
  fnd_input_peripheral_init();
 800143c:	f001 fbac 	bl	8002b98 <fnd_input_peripheral_init>
  fnd_output_peripheral_init();
 8001440:	f002 f830 	bl	80034a4 <fnd_output_peripheral_init>
  /* Infinite loop */
  for (;;)
  {
    osDelay(100);
 8001444:	2064      	movs	r0, #100	; 0x64
 8001446:	f008 fc09 	bl	8009c5c <osDelay>
    fnd_input_update_value();
 800144a:	f001 fbad 	bl	8002ba8 <fnd_input_update_value>

    for (uint8_t i = 0; i < 13; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e011      	b.n	8001478 <StartTask06+0x44>
    {
      sys_regs.inputs[200 + i] = sys_regs.holdings[200 + i];
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	33c8      	adds	r3, #200	; 0xc8
 800145e:	4909      	ldr	r1, [pc, #36]	; (8001484 <StartTask06+0x50>)
 8001460:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001464:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001468:	4a06      	ldr	r2, [pc, #24]	; (8001484 <StartTask06+0x50>)
 800146a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800146e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 13; i++)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	3301      	adds	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d9ea      	bls.n	8001454 <StartTask06+0x20>
    }
    fnd_output_update_value();
 800147e:	f002 f823 	bl	80034c8 <fnd_output_update_value>
    osDelay(100);
 8001482:	e7df      	b.n	8001444 <StartTask06+0x10>
 8001484:	20005a58 	.word	0x20005a58

08001488 <StartTask07>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask07 */
void StartTask07(void *argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask07 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 8001490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001494:	f008 fbe2 	bl	8009c5c <osDelay>
    fnd_input_update_sht_value();
 8001498:	f001 fc7c 	bl	8002d94 <fnd_input_update_sht_value>
    osDelay(1000);
 800149c:	e7f8      	b.n	8001490 <StartTask07+0x8>

0800149e <StartTask08>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask08 */
void StartTask08(void *argument)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask08 */

  /* Infinite loop */
  for (;;)
  {
    osDelay(1000);
 80014a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014aa:	f008 fbd7 	bl	8009c5c <osDelay>
 80014ae:	e7fa      	b.n	80014a6 <StartTask08+0x8>

080014b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	4b92      	ldr	r3, [pc, #584]	; (8001714 <MX_GPIO_Init+0x264>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a91      	ldr	r2, [pc, #580]	; (8001714 <MX_GPIO_Init+0x264>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <MX_GPIO_Init+0x264>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	61bb      	str	r3, [r7, #24]
 80014e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <MX_GPIO_Init+0x264>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a8a      	ldr	r2, [pc, #552]	; (8001714 <MX_GPIO_Init+0x264>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <MX_GPIO_Init+0x264>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	4b84      	ldr	r3, [pc, #528]	; (8001714 <MX_GPIO_Init+0x264>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a83      	ldr	r2, [pc, #524]	; (8001714 <MX_GPIO_Init+0x264>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b81      	ldr	r3, [pc, #516]	; (8001714 <MX_GPIO_Init+0x264>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <MX_GPIO_Init+0x264>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a7c      	ldr	r2, [pc, #496]	; (8001714 <MX_GPIO_Init+0x264>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <MX_GPIO_Init+0x264>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	4b76      	ldr	r3, [pc, #472]	; (8001714 <MX_GPIO_Init+0x264>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a75      	ldr	r2, [pc, #468]	; (8001714 <MX_GPIO_Init+0x264>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b73      	ldr	r3, [pc, #460]	; (8001714 <MX_GPIO_Init+0x264>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b6f      	ldr	r3, [pc, #444]	; (8001714 <MX_GPIO_Init+0x264>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a6e      	ldr	r2, [pc, #440]	; (8001714 <MX_GPIO_Init+0x264>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b6c      	ldr	r3, [pc, #432]	; (8001714 <MX_GPIO_Init+0x264>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0308 	and.w	r3, r3, #8
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 800156e:	2200      	movs	r2, #0
 8001570:	f24f 51ff 	movw	r1, #62975	; 0xf5ff
 8001574:	4868      	ldr	r0, [pc, #416]	; (8001718 <MX_GPIO_Init+0x268>)
 8001576:	f003 ff77 	bl	8005468 <HAL_GPIO_WritePin>
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001580:	4866      	ldr	r0, [pc, #408]	; (800171c <MX_GPIO_Init+0x26c>)
 8001582:	f003 ff71 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8001586:	2200      	movs	r2, #0
 8001588:	f24c 7104 	movw	r1, #50948	; 0xc704
 800158c:	4864      	ldr	r0, [pc, #400]	; (8001720 <MX_GPIO_Init+0x270>)
 800158e:	f003 ff6b 	bl	8005468 <HAL_GPIO_WritePin>
                          |RLY6_Pin|RLY5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, STEP_B1_Pin|EN4_Pin|EN2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f248 4110 	movw	r1, #33808	; 0x8410
 8001598:	4862      	ldr	r0, [pc, #392]	; (8001724 <MX_GPIO_Init+0x274>)
 800159a:	f003 ff65 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a4:	4860      	ldr	r0, [pc, #384]	; (8001728 <MX_GPIO_Init+0x278>)
 80015a6:	f003 ff5f 	bl	8005468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = RLY2_Pin|RLY1_Pin|STEP_A8_Pin|STEP_A7_Pin
 80015aa:	f24f 53ff 	movw	r3, #62975	; 0xf5ff
 80015ae:	61fb      	str	r3, [r7, #28]
                          |STEP_A6_Pin|STEP_A1_Pin|STEP_B8_Pin|STEP_B7_Pin
                          |STEP_B6_Pin|STEP_B5_Pin|STEP_B4_Pin|STEP_B3_Pin
                          |RLY4_Pin|RLY3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4855      	ldr	r0, [pc, #340]	; (8001718 <MX_GPIO_Init+0x268>)
 80015c4:	f003 fd9c 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = STEP_A5_Pin|STEP_A4_Pin|STEP_A3_Pin;
 80015c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	484e      	ldr	r0, [pc, #312]	; (800171c <MX_GPIO_Init+0x26c>)
 80015e2:	f003 fd8d 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	484c      	ldr	r0, [pc, #304]	; (800172c <MX_GPIO_Init+0x27c>)
 80015fa:	f003 fd81 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 80015fe:	f44f 7399 	mov.w	r3, #306	; 0x132
 8001602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	4842      	ldr	r0, [pc, #264]	; (800171c <MX_GPIO_Init+0x26c>)
 8001614:	f003 fd74 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_12;
 8001618:	f241 0386 	movw	r3, #4230	; 0x1086
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	483e      	ldr	r0, [pc, #248]	; (8001728 <MX_GPIO_Init+0x278>)
 800162e:	f003 fd67 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = STEP_A2_Pin|STEP_B2_Pin|RSTN_Pin|EN3_Pin
 8001632:	f24c 7304 	movw	r3, #50948	; 0xc704
 8001636:	61fb      	str	r3, [r7, #28]
                          |RLY6_Pin|RLY5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4835      	ldr	r0, [pc, #212]	; (8001720 <MX_GPIO_Init+0x270>)
 800164c:	f003 fd58 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001650:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	482e      	ldr	r0, [pc, #184]	; (8001720 <MX_GPIO_Init+0x270>)
 8001666:	f003 fd4b 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = STEP_B1_Pin|EN4_Pin|EN2_Pin;
 800166a:	f248 4310 	movw	r3, #33808	; 0x8410
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4828      	ldr	r0, [pc, #160]	; (8001724 <MX_GPIO_Init+0x274>)
 8001684:	f003 fd3c 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001688:	f647 030f 	movw	r3, #30735	; 0x780f
 800168c:	61fb      	str	r3, [r7, #28]
                          |IDB4_Pin|IDB3_Pin|IDB2_Pin|IDB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4821      	ldr	r0, [pc, #132]	; (8001724 <MX_GPIO_Init+0x274>)
 800169e:	f003 fd2f 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN1_Pin;
 80016a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481b      	ldr	r0, [pc, #108]	; (8001728 <MX_GPIO_Init+0x278>)
 80016bc:	f003 fd20 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IDA4_Pin;
 80016c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IDA4_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_GPIO_Init+0x278>)
 80016d6:	f003 fd13 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = IDA3_Pin|IDA2_Pin|IDA1_Pin;
 80016da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	4619      	mov	r1, r3
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <MX_GPIO_Init+0x26c>)
 80016f0:	f003 fd06 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f8:	2303      	movs	r3, #3
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_GPIO_Init+0x274>)
 8001708:	f003 fcfa 	bl	8005100 <HAL_GPIO_Init>

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40021000 	.word	0x40021000
 800171c:	40020800 	.word	0x40020800
 8001720:	40020400 	.word	0x40020400
 8001724:	40020c00 	.word	0x40020c00
 8001728:	40020000 	.word	0x40020000
 800172c:	40021c00 	.word	0x40021c00

08001730 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_I2C1_Init+0x54>)
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <MX_I2C1_Init+0x58>)
 8001738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 5000;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C1_Init+0x54>)
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_I2C1_Init+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001748:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C1_Init+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_I2C1_Init+0x54>)
 8001750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_I2C1_Init+0x54>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C1_Init+0x54>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_I2C1_Init+0x54>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C1_Init+0x54>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_I2C1_Init+0x54>)
 8001770:	f003 fe94 	bl	800549c <HAL_I2C_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800177a:	f000 f977 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20004c94 	.word	0x20004c94
 8001788:	40005400 	.word	0x40005400

0800178c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_I2C3_Init+0x54>)
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <MX_I2C3_Init+0x58>)
 8001794:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 5000;
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C3_Init+0x54>)
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017a4:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_I2C3_Init+0x54>)
 80017cc:	f003 fe66 	bl	800549c <HAL_I2C_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80017d6:	f000 f949 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20004c40 	.word	0x20004c40
 80017e4:	40005c00 	.word	0x40005c00

080017e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a42      	ldr	r2, [pc, #264]	; (8001910 <HAL_I2C_MspInit+0x128>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12c      	bne.n	8001864 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001826:	23c0      	movs	r3, #192	; 0xc0
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182a:	2312      	movs	r3, #18
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001836:	2304      	movs	r3, #4
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4835      	ldr	r0, [pc, #212]	; (8001918 <HAL_I2C_MspInit+0x130>)
 8001842:	f003 fc5d 	bl	8005100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001850:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001862:	e050      	b.n	8001906 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a2c      	ldr	r2, [pc, #176]	; (800191c <HAL_I2C_MspInit+0x134>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d14b      	bne.n	8001906 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b28      	ldr	r3, [pc, #160]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a27      	ldr	r2, [pc, #156]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	4a20      	ldr	r2, [pc, #128]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	; 0x30
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ac:	2312      	movs	r3, #18
 80018ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018b8:	2304      	movs	r3, #4
 80018ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	4817      	ldr	r0, [pc, #92]	; (8001920 <HAL_I2C_MspInit+0x138>)
 80018c4:	f003 fc1c 	bl	8005100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ce:	2312      	movs	r3, #18
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80018da:	2304      	movs	r3, #4
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <HAL_I2C_MspInit+0x13c>)
 80018e6:	f003 fc0b 	bl	8005100 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a08      	ldr	r2, [pc, #32]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 80018f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_I2C_MspInit+0x12c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40005400 	.word	0x40005400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020400 	.word	0x40020400
 800191c:	40005c00 	.word	0x40005c00
 8001920:	40020800 	.word	0x40020800
 8001924:	40020000 	.word	0x40020000

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f002 f95c 	bl	8003be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f820 	bl	8001974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001934:	f7ff fdbc 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001938:	f7ff fc54 	bl	80011e4 <MX_DMA_Init>
  MX_ADC1_Init();
 800193c:	f7ff faa0 	bl	8000e80 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001940:	f7ff fef6 	bl	8001730 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001944:	f7ff ff22 	bl	800178c <MX_I2C3_Init>
  MX_TIM1_Init();
 8001948:	f000 f9ec 	bl	8001d24 <MX_TIM1_Init>
  MX_TIM2_Init();
 800194c:	f000 fa9a 	bl	8001e84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001950:	f000 fb0e 	bl	8001f70 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001954:	f000 fc62 	bl	800221c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001958:	f000 fc8a 	bl	8002270 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800195c:	f000 fcb2 	bl	80022c4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001960:	f000 fcda 	bl	8002318 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001964:	f008 f89e 	bl	8009aa4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001968:	f7ff fcaa 	bl	80012c0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800196c:	f008 f8be 	bl	8009aec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001970:	e7fe      	b.n	8001970 <main+0x48>
	...

08001974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b094      	sub	sp, #80	; 0x50
 8001978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	2230      	movs	r2, #48	; 0x30
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f00d f82e 	bl	800e9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <SystemClock_Config+0xcc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <SystemClock_Config+0xcc>)
 80019a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <SystemClock_Config+0xcc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <SystemClock_Config+0xd0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <SystemClock_Config+0xd0>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <SystemClock_Config+0xd0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d8:	2310      	movs	r3, #16
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019e4:	2308      	movs	r3, #8
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019e8:	23a8      	movs	r3, #168	; 0xa8
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f004 fe13 	bl	8006624 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a04:	f000 f832 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2105      	movs	r1, #5
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 f874 	bl	8006b14 <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a32:	f000 f81b 	bl	8001a6c <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3750      	adds	r7, #80	; 0x50
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a5a:	f002 f8e7 	bl	8003c2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40002000 	.word	0x40002000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_MspInit+0x54>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_MspInit+0x54>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x54>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_MspInit+0x54>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <HAL_MspInit+0x54>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <HAL_MspInit+0x54>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	210f      	movs	r1, #15
 8001aba:	f06f 0001 	mvn.w	r0, #1
 8001abe:	f002 fef3 	bl	80048a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08c      	sub	sp, #48	; 0x30
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	202d      	movs	r0, #45	; 0x2d
 8001ae6:	f002 fedf 	bl	80048a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001aea:	202d      	movs	r0, #45	; 0x2d
 8001aec:	f002 fef8 	bl	80048e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_InitTick+0xa4>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_InitTick+0xa4>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_InitTick+0xa4>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b0c:	f107 0210 	add.w	r2, r7, #16
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f005 f9cc 	bl	8006eb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b1c:	f005 f9a2 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8001b20:	4603      	mov	r3, r0
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <HAL_InitTick+0xa8>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9b      	lsrs	r3, r3, #18
 8001b30:	3b01      	subs	r3, #1
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_InitTick+0xac>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <HAL_InitTick+0xb0>)
 8001b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_InitTick+0xac>)
 8001b3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b40:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_InitTick+0xac>)
 8001b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b46:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_InitTick+0xac>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_InitTick+0xac>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_InitTick+0xac>)
 8001b56:	f005 f9df 	bl	8006f18 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b60:	4806      	ldr	r0, [pc, #24]	; (8001b7c <HAL_InitTick+0xac>)
 8001b62:	f005 fa29 	bl	8006fb8 <HAL_TIM_Base_Start_IT>
 8001b66:	4603      	mov	r3, r0
 8001b68:	e000      	b.n	8001b6c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3730      	adds	r7, #48	; 0x30
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	431bde83 	.word	0x431bde83
 8001b7c:	20004ce8 	.word	0x20004ce8
 8001b80:	40002000 	.word	0x40002000

08001b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <NMI_Handler+0x4>

08001b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler+0x4>

08001b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <MemManage_Handler+0x4>

08001b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler+0x4>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <UsageFault_Handler+0x4>

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <DMA1_Stream1_IRQHandler+0x10>)
 8001bb6:	f003 f839 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20004ec8 	.word	0x20004ec8

08001bc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <DMA1_Stream3_IRQHandler+0x10>)
 8001bca:	f003 f82f 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20004f6c 	.word	0x20004f6c

08001bd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <DMA1_Stream5_IRQHandler+0x10>)
 8001bde:	f003 f825 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20004e08 	.word	0x20004e08

08001bec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <DMA1_Stream6_IRQHandler+0x10>)
 8001bf2:	f003 f81b 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200050ec 	.word	0x200050ec

08001c00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <ADC_IRQHandler+0x10>)
 8001c06:	f002 f874 	bl	8003cf2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20004b70 	.word	0x20004b70

08001c14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM3_IRQHandler+0x10>)
 8001c1a:	f005 fce1 	bl	80075e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20004d30 	.word	0x20004d30

08001c28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <USART1_IRQHandler+0x14>)
 8001c2e:	f000 fea1 	bl	8002974 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART1_IRQHandler+0x14>)
 8001c34:	f006 feb8 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2000514c 	.word	0x2000514c

08001c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <USART2_IRQHandler+0x14>)
 8001c46:	f000 fe95 	bl	8002974 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c4a:	4802      	ldr	r0, [pc, #8]	; (8001c54 <USART2_IRQHandler+0x14>)
 8001c4c:	f006 feac 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200051d4 	.word	0x200051d4

08001c58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart3);
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <USART3_IRQHandler+0x14>)
 8001c5e:	f000 fe89 	bl	8002974 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c62:	4802      	ldr	r0, [pc, #8]	; (8001c6c <USART3_IRQHandler+0x14>)
 8001c64:	f006 fea0 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20004f28 	.word	0x20004f28

08001c70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c76:	f005 fcb3 	bl	80075e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20004ce8 	.word	0x20004ce8

08001c84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8a:	f002 ffcf 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20004bb8 	.word	0x20004bb8

08001c98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <DMA2_Stream1_IRQHandler+0x10>)
 8001c9e:	f002 ffc5 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20004e68 	.word	0x20004e68

08001cac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA2_Stream2_IRQHandler+0x10>)
 8001cb2:	f002 ffbb 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000508c 	.word	0x2000508c

08001cc0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA2_Stream6_IRQHandler+0x10>)
 8001cc6:	f002 ffb1 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000502c 	.word	0x2000502c

08001cd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <DMA2_Stream7_IRQHandler+0x10>)
 8001cda:	f002 ffa7 	bl	8004c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20004fcc 	.word	0x20004fcc

08001ce8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart6);
 8001cec:	4803      	ldr	r0, [pc, #12]	; (8001cfc <USART6_IRQHandler+0x14>)
 8001cee:	f000 fe41 	bl	8002974 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cf2:	4802      	ldr	r0, [pc, #8]	; (8001cfc <USART6_IRQHandler+0x14>)
 8001cf4:	f006 fe58 	bl	80089a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20005190 	.word	0x20005190

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b096      	sub	sp, #88	; 0x58
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	615a      	str	r2, [r3, #20]
 8001d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2220      	movs	r2, #32
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f00c fe41 	bl	800e9e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <MX_TIM1_Init+0x15c>)
 8001d66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d6a:	22a7      	movs	r2, #167	; 0xa7
 8001d6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001d74:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d8e:	483b      	ldr	r0, [pc, #236]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001d90:	f005 f8c2 	bl	8006f18 <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d9a:	f7ff fe67 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001da8:	4619      	mov	r1, r3
 8001daa:	4834      	ldr	r0, [pc, #208]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001dac:	f005 fe7e 	bl	8007aac <HAL_TIM_ConfigClockSource>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001db6:	f7ff fe59 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dba:	4830      	ldr	r0, [pc, #192]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001dbc:	f005 f96c 	bl	8007098 <HAL_TIM_PWM_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dc6:	f7ff fe51 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4828      	ldr	r0, [pc, #160]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001dda:	f006 fb87 	bl	80084ec <HAL_TIMEx_MasterConfigSynchronization>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001de4:	f7ff fe42 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de8:	2360      	movs	r3, #96	; 0x60
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 8001dec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001df6:	2300      	movs	r3, #0
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481b      	ldr	r0, [pc, #108]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001e10:	f005 fd8a 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001e1a:	f7ff fe27 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8001e1e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4813      	ldr	r0, [pc, #76]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001e2e:	f005 fd7b 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e38:	f7ff fe18 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001e60:	f006 fbc0 	bl	80085e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001e6a:	f7ff fdff 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e6e:	4803      	ldr	r0, [pc, #12]	; (8001e7c <MX_TIM1_Init+0x158>)
 8001e70:	f000 f974 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001e74:	bf00      	nop
 8001e76:	3758      	adds	r7, #88	; 0x58
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20004d78 	.word	0x20004d78
 8001e80:	40010000 	.word	0x40010000

08001e84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001ebe:	22a7      	movs	r2, #167	; 0xa7
 8001ec0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ece:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001edc:	4823      	ldr	r0, [pc, #140]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001ede:	f005 f81b 	bl	8006f18 <HAL_TIM_Base_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ee8:	f7ff fdc0 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	481c      	ldr	r0, [pc, #112]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001efa:	f005 fdd7 	bl	8007aac <HAL_TIM_ConfigClockSource>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f04:	f7ff fdb2 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f08:	4818      	ldr	r0, [pc, #96]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001f0a:	f005 f8c5 	bl	8007098 <HAL_TIM_PWM_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f14:	f7ff fdaa 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f20:	f107 0320 	add.w	r3, r7, #32
 8001f24:	4619      	mov	r1, r3
 8001f26:	4811      	ldr	r0, [pc, #68]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001f28:	f006 fae0 	bl	80084ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f32:	f7ff fd9b 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f36:	2360      	movs	r3, #96	; 0x60
 8001f38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001f3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4807      	ldr	r0, [pc, #28]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001f50:	f005 fcea 	bl	8007928 <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f5a:	f7ff fd87 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <MX_TIM2_Init+0xe8>)
 8001f60:	f000 f8fc 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001f64:	bf00      	nop
 8001f66:	3738      	adds	r7, #56	; 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20004dc0 	.word	0x20004dc0

08001f70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f84:	f107 0310 	add.w	r3, r7, #16
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001f9c:	4a31      	ldr	r2, [pc, #196]	; (8002064 <MX_TIM3_Init+0xf4>)
 8001f9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fc2:	f004 ffa9 	bl	8006f18 <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001fcc:	f7ff fd4e 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4820      	ldr	r0, [pc, #128]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fde:	f005 fd65 	bl	8007aac <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fe8:	f7ff fd40 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <MX_TIM3_Init+0xf0>)
 8001fee:	f005 f975 	bl	80072dc <HAL_TIM_IC_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ff8:	f7ff fd38 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4619      	mov	r1, r3
 800200a:	4815      	ldr	r0, [pc, #84]	; (8002060 <MX_TIM3_Init+0xf0>)
 800200c:	f006 fa6e 	bl	80084ec <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8002016:	f7ff fd29 	bl	8001a6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <MX_TIM3_Init+0xf0>)
 8002032:	f005 fbdd 	bl	80077f0 <HAL_TIM_IC_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 800203c:	f7ff fd16 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002040:	463b      	mov	r3, r7
 8002042:	2204      	movs	r2, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_TIM3_Init+0xf0>)
 8002048:	f005 fbd2 	bl	80077f0 <HAL_TIM_IC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002052:	f7ff fd0b 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20004d30 	.word	0x20004d30
 8002064:	40000400 	.word	0x40000400

08002068 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a31      	ldr	r2, [pc, #196]	; (800214c <HAL_TIM_Base_MspInit+0xe4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80020a6:	e04c      	b.n	8002142 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
}
 80020ce:	e038      	b.n	8002142 <HAL_TIM_Base_MspInit+0xda>
  else if(tim_baseHandle->Instance==TIM3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_TIM_Base_MspInit+0xec>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d133      	bne.n	8002142 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_TIM_Base_MspInit+0xe8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN1_SPD_Pin|FAN2_SPD_Pin;
 8002112:	2330      	movs	r3, #48	; 0x30
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002122:	2302      	movs	r3, #2
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	4619      	mov	r1, r3
 800212c:	480a      	ldr	r0, [pc, #40]	; (8002158 <HAL_TIM_Base_MspInit+0xf0>)
 800212e:	f002 ffe7 	bl	8005100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2105      	movs	r1, #5
 8002136:	201d      	movs	r0, #29
 8002138:	f002 fbb6 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800213c:	201d      	movs	r0, #29
 800213e:	f002 fbcf 	bl	80048e0 <HAL_NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	; 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40010000 	.word	0x40010000
 8002150:	40023800 	.word	0x40023800
 8002154:	40000400 	.word	0x40000400
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <HAL_TIM_MspPostInit+0xb0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11f      	bne.n	80021be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a22      	ldr	r2, [pc, #136]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_PWM_Pin|FAN2_PWM_Pin;
 800219a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4817      	ldr	r0, [pc, #92]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 80021b8:	f002 ffa2 	bl	8005100 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021bc:	e022      	b.n	8002204 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c6:	d11d      	bne.n	8002204 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VALVE_PWM_Pin;
 80021e4:	2308      	movs	r3, #8
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f4:	2301      	movs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VALVE_PWM_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_TIM_MspPostInit+0xbc>)
 8002200:	f002 ff7e 	bl	8005100 <HAL_GPIO_Init>
}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010000 	.word	0x40010000
 8002210:	40023800 	.word	0x40023800
 8002214:	40021000 	.word	0x40021000
 8002218:	40020400 	.word	0x40020400

0800221c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <MX_USART1_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART1_UART_Init+0x4c>)
 8002254:	f006 fa2c 	bl	80086b0 <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f7ff fc05 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000514c 	.word	0x2000514c
 800226c:	40011000 	.word	0x40011000

08002270 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 8002276:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <MX_USART2_UART_Init+0x50>)
 8002278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 800227c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 8002296:	220c      	movs	r2, #12
 8002298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART2_UART_Init+0x4c>)
 80022a8:	f006 fa02 	bl	80086b0 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022b2:	f7ff fbdb 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200051d4 	.word	0x200051d4
 80022c0:	40004400 	.word	0x40004400

080022c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <MX_USART3_UART_Init+0x50>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART3_UART_Init+0x4c>)
 80022fc:	f006 f9d8 	bl	80086b0 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002306:	f7ff fbb1 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20004f28 	.word	0x20004f28
 8002314:	40004800 	.word	0x40004800

08002318 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <MX_USART6_UART_Init+0x50>)
 8002320:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 8002324:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002328:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 800233e:	220c      	movs	r2, #12
 8002340:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 800234a:	2200      	movs	r2, #0
 800234c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_USART6_UART_Init+0x4c>)
 8002350:	f006 f9ae 	bl	80086b0 <HAL_UART_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800235a:	f7ff fb87 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20005190 	.word	0x20005190
 8002368:	40011400 	.word	0x40011400

0800236c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b090      	sub	sp, #64	; 0x40
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a97      	ldr	r2, [pc, #604]	; (80025e8 <HAL_UART_MspInit+0x27c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	f040 8093 	bne.w	80024b6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
 8002394:	4b95      	ldr	r3, [pc, #596]	; (80025ec <HAL_UART_MspInit+0x280>)
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	4a94      	ldr	r2, [pc, #592]	; (80025ec <HAL_UART_MspInit+0x280>)
 800239a:	f043 0310 	orr.w	r3, r3, #16
 800239e:	6453      	str	r3, [r2, #68]	; 0x44
 80023a0:	4b92      	ldr	r3, [pc, #584]	; (80025ec <HAL_UART_MspInit+0x280>)
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_UART_MspInit+0x280>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4a8d      	ldr	r2, [pc, #564]	; (80025ec <HAL_UART_MspInit+0x280>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6313      	str	r3, [r2, #48]	; 0x30
 80023bc:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <HAL_UART_MspInit+0x280>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d6:	2303      	movs	r3, #3
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023da:	2307      	movs	r3, #7
 80023dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4882      	ldr	r0, [pc, #520]	; (80025f0 <HAL_UART_MspInit+0x284>)
 80023e6:	f002 fe8b 	bl	8005100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023ea:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_UART_MspInit+0x288>)
 80023ec:	4a82      	ldr	r2, [pc, #520]	; (80025f8 <HAL_UART_MspInit+0x28c>)
 80023ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023f0:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <HAL_UART_MspInit+0x288>)
 80023f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f8:	4b7e      	ldr	r3, [pc, #504]	; (80025f4 <HAL_UART_MspInit+0x288>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002406:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800240c:	4b79      	ldr	r3, [pc, #484]	; (80025f4 <HAL_UART_MspInit+0x288>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002412:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002418:	4b76      	ldr	r3, [pc, #472]	; (80025f4 <HAL_UART_MspInit+0x288>)
 800241a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002420:	4b74      	ldr	r3, [pc, #464]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002426:	4b73      	ldr	r3, [pc, #460]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800242c:	4871      	ldr	r0, [pc, #452]	; (80025f4 <HAL_UART_MspInit+0x288>)
 800242e:	f002 fa65 	bl	80048fc <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002438:	f7ff fb18 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a6d      	ldr	r2, [pc, #436]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
 8002442:	4a6c      	ldr	r2, [pc, #432]	; (80025f4 <HAL_UART_MspInit+0x288>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_UART_MspInit+0x290>)
 800244a:	4a6d      	ldr	r2, [pc, #436]	; (8002600 <HAL_UART_MspInit+0x294>)
 800244c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800244e:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002450:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002454:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002456:	4b69      	ldr	r3, [pc, #420]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800245c:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_UART_MspInit+0x290>)
 800245e:	2200      	movs	r2, #0
 8002460:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002462:	4b66      	ldr	r3, [pc, #408]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002468:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <HAL_UART_MspInit+0x290>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002470:	4b62      	ldr	r3, [pc, #392]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002472:	2200      	movs	r2, #0
 8002474:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002476:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800247c:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_UART_MspInit+0x290>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_UART_MspInit+0x290>)
 8002484:	2200      	movs	r2, #0
 8002486:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002488:	485c      	ldr	r0, [pc, #368]	; (80025fc <HAL_UART_MspInit+0x290>)
 800248a:	f002 fa37 	bl	80048fc <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002494:	f7ff faea 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a58      	ldr	r2, [pc, #352]	; (80025fc <HAL_UART_MspInit+0x290>)
 800249c:	635a      	str	r2, [r3, #52]	; 0x34
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_UART_MspInit+0x290>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024a4:	2200      	movs	r2, #0
 80024a6:	2105      	movs	r1, #5
 80024a8:	2025      	movs	r0, #37	; 0x25
 80024aa:	f002 f9fd 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ae:	2025      	movs	r0, #37	; 0x25
 80024b0:	f002 fa16 	bl	80048e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024b4:	e1e2      	b.n	800287c <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_UART_MspInit+0x298>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 80ad 	bne.w	800261c <HAL_UART_MspInit+0x2b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a48      	ldr	r2, [pc, #288]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	4b42      	ldr	r3, [pc, #264]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a41      	ldr	r2, [pc, #260]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_UART_MspInit+0x280>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024fa:	2360      	movs	r3, #96	; 0x60
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	2302      	movs	r3, #2
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250a:	2307      	movs	r3, #7
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002512:	4619      	mov	r1, r3
 8002514:	483c      	ldr	r0, [pc, #240]	; (8002608 <HAL_UART_MspInit+0x29c>)
 8002516:	f002 fdf3 	bl	8005100 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_UART_MspInit+0x2a0>)
 800251c:	4a3c      	ldr	r2, [pc, #240]	; (8002610 <HAL_UART_MspInit+0x2a4>)
 800251e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002520:	4b3a      	ldr	r3, [pc, #232]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002526:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <HAL_UART_MspInit+0x2a0>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002534:	4b35      	ldr	r3, [pc, #212]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800253c:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_UART_MspInit+0x2a0>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002542:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002548:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_UART_MspInit+0x2a0>)
 800254a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002550:	4b2e      	ldr	r3, [pc, #184]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002556:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002558:	2200      	movs	r2, #0
 800255a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800255c:	482b      	ldr	r0, [pc, #172]	; (800260c <HAL_UART_MspInit+0x2a0>)
 800255e:	f002 f9cd 	bl	80048fc <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002568:	f7ff fa80 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a27      	ldr	r2, [pc, #156]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
 8002572:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_UART_MspInit+0x2a0>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_UART_MspInit+0x2ac>)
 800257c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 8002580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002584:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002586:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025b8:	4816      	ldr	r0, [pc, #88]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025ba:	f002 f99f 	bl	80048fc <HAL_DMA_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 80025c4:	f7ff fa52 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_UART_MspInit+0x2a8>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2105      	movs	r1, #5
 80025d8:	2026      	movs	r0, #38	; 0x26
 80025da:	f002 f965 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025de:	2026      	movs	r0, #38	; 0x26
 80025e0:	f002 f97e 	bl	80048e0 <HAL_NVIC_EnableIRQ>
}
 80025e4:	e14a      	b.n	800287c <HAL_UART_MspInit+0x510>
 80025e6:	bf00      	nop
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	2000508c 	.word	0x2000508c
 80025f8:	40026440 	.word	0x40026440
 80025fc:	20004fcc 	.word	0x20004fcc
 8002600:	400264b8 	.word	0x400264b8
 8002604:	40004400 	.word	0x40004400
 8002608:	40020c00 	.word	0x40020c00
 800260c:	20004e08 	.word	0x20004e08
 8002610:	40026088 	.word	0x40026088
 8002614:	200050ec 	.word	0x200050ec
 8002618:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a98      	ldr	r2, [pc, #608]	; (8002884 <HAL_UART_MspInit+0x518>)
 8002622:	4293      	cmp	r3, r2
 8002624:	f040 8093 	bne.w	800274e <HAL_UART_MspInit+0x3e2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	4b96      	ldr	r3, [pc, #600]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a95      	ldr	r2, [pc, #596]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b93      	ldr	r3, [pc, #588]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	4b8f      	ldr	r3, [pc, #572]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a8e      	ldr	r2, [pc, #568]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002660:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002672:	2307      	movs	r3, #7
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	4883      	ldr	r0, [pc, #524]	; (800288c <HAL_UART_MspInit+0x520>)
 800267e:	f002 fd3f 	bl	8005100 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002682:	4b83      	ldr	r3, [pc, #524]	; (8002890 <HAL_UART_MspInit+0x524>)
 8002684:	4a83      	ldr	r2, [pc, #524]	; (8002894 <HAL_UART_MspInit+0x528>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002688:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_UART_MspInit+0x524>)
 800268a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800268e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002690:	4b7f      	ldr	r3, [pc, #508]	; (8002890 <HAL_UART_MspInit+0x524>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002696:	4b7e      	ldr	r3, [pc, #504]	; (8002890 <HAL_UART_MspInit+0x524>)
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269c:	4b7c      	ldr	r3, [pc, #496]	; (8002890 <HAL_UART_MspInit+0x524>)
 800269e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a4:	4b7a      	ldr	r3, [pc, #488]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026aa:	4b79      	ldr	r3, [pc, #484]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80026b0:	4b77      	ldr	r3, [pc, #476]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b8:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026be:	4b74      	ldr	r3, [pc, #464]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026c4:	4872      	ldr	r0, [pc, #456]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026c6:	f002 f919 	bl	80048fc <HAL_DMA_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_UART_MspInit+0x368>
      Error_Handler();
 80026d0:	f7ff f9cc 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_UART_MspInit+0x524>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80026e0:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_UART_MspInit+0x52c>)
 80026e2:	4a6e      	ldr	r2, [pc, #440]	; (800289c <HAL_UART_MspInit+0x530>)
 80026e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <HAL_UART_MspInit+0x52c>)
 80026e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ee:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_UART_MspInit+0x52c>)
 80026f0:	2240      	movs	r2, #64	; 0x40
 80026f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_UART_MspInit+0x52c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_UART_MspInit+0x52c>)
 80026fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002700:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002704:	2200      	movs	r2, #0
 8002706:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_UART_MspInit+0x52c>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800270e:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002716:	2200      	movs	r2, #0
 8002718:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_UART_MspInit+0x52c>)
 800271c:	2200      	movs	r2, #0
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002720:	485d      	ldr	r0, [pc, #372]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002722:	f002 f8eb 	bl	80048fc <HAL_DMA_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 800272c:	f7ff f99e 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a59      	ldr	r2, [pc, #356]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
 8002736:	4a58      	ldr	r2, [pc, #352]	; (8002898 <HAL_UART_MspInit+0x52c>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2105      	movs	r1, #5
 8002740:	2027      	movs	r0, #39	; 0x27
 8002742:	f002 f8b1 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002746:	2027      	movs	r0, #39	; 0x27
 8002748:	f002 f8ca 	bl	80048e0 <HAL_NVIC_EnableIRQ>
}
 800274c:	e096      	b.n	800287c <HAL_UART_MspInit+0x510>
  else if(uartHandle->Instance==USART6)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a53      	ldr	r2, [pc, #332]	; (80028a0 <HAL_UART_MspInit+0x534>)
 8002754:	4293      	cmp	r3, r2
 8002756:	f040 8091 	bne.w	800287c <HAL_UART_MspInit+0x510>
    __HAL_RCC_USART6_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a49      	ldr	r2, [pc, #292]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_UART_MspInit+0x51c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a42      	ldr	r2, [pc, #264]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_UART_MspInit+0x51c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002792:	23c0      	movs	r3, #192	; 0xc0
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027a2:	2308      	movs	r3, #8
 80027a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	4619      	mov	r1, r3
 80027ac:	483d      	ldr	r0, [pc, #244]	; (80028a4 <HAL_UART_MspInit+0x538>)
 80027ae:	f002 fca7 	bl	8005100 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027b4:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_UART_MspInit+0x540>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80027b8:	4b3b      	ldr	r3, [pc, #236]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027ba:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80027be:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027d4:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027da:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80027f4:	482c      	ldr	r0, [pc, #176]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 80027f6:	f002 f881 	bl	80048fc <HAL_DMA_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_UART_MspInit+0x498>
      Error_Handler();
 8002800:	f7ff f934 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a28      	ldr	r2, [pc, #160]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
 800280a:	4a27      	ldr	r2, [pc, #156]	; (80028a8 <HAL_UART_MspInit+0x53c>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002812:	4a28      	ldr	r2, [pc, #160]	; (80028b4 <HAL_UART_MspInit+0x548>)
 8002814:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002818:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800281c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_UART_MspInit+0x544>)
 800282c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002830:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_UART_MspInit+0x544>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002840:	2200      	movs	r2, #0
 8002842:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002846:	2200      	movs	r2, #0
 8002848:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_UART_MspInit+0x544>)
 800284c:	2200      	movs	r2, #0
 800284e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002850:	4817      	ldr	r0, [pc, #92]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002852:	f002 f853 	bl	80048fc <HAL_DMA_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_MspInit+0x4f4>
      Error_Handler();
 800285c:	f7ff f906 	bl	8001a6c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002864:	635a      	str	r2, [r3, #52]	; 0x34
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_UART_MspInit+0x544>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800286c:	2200      	movs	r2, #0
 800286e:	2105      	movs	r1, #5
 8002870:	2047      	movs	r0, #71	; 0x47
 8002872:	f002 f819 	bl	80048a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002876:	2047      	movs	r0, #71	; 0x47
 8002878:	f002 f832 	bl	80048e0 <HAL_NVIC_EnableIRQ>
}
 800287c:	bf00      	nop
 800287e:	3740      	adds	r7, #64	; 0x40
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40004800 	.word	0x40004800
 8002888:	40023800 	.word	0x40023800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	20004ec8 	.word	0x20004ec8
 8002894:	40026028 	.word	0x40026028
 8002898:	20004f6c 	.word	0x20004f6c
 800289c:	40026058 	.word	0x40026058
 80028a0:	40011400 	.word	0x40011400
 80028a4:	40020800 	.word	0x40020800
 80028a8:	20004e68 	.word	0x20004e68
 80028ac:	40026428 	.word	0x40026428
 80028b0:	2000502c 	.word	0x2000502c
 80028b4:	400264a0 	.word	0x400264a0

080028b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028bc:	480d      	ldr	r0, [pc, #52]	; (80028f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028be:	490e      	ldr	r1, [pc, #56]	; (80028f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c4:	e002      	b.n	80028cc <LoopCopyDataInit>

080028c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ca:	3304      	adds	r3, #4

080028cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d0:	d3f9      	bcc.n	80028c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028d4:	4c0b      	ldr	r4, [pc, #44]	; (8002904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d8:	e001      	b.n	80028de <LoopFillZerobss>

080028da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028dc:	3204      	adds	r2, #4

080028de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e0:	d3fb      	bcc.n	80028da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028e2:	f7ff fa0d 	bl	8001d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028e6:	f00c f849 	bl	800e97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ea:	f7ff f81d 	bl	8001928 <main>
  bx  lr    
 80028ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80028fc:	0800f5fc 	.word	0x0800f5fc
  ldr r2, =_sbss
 8002900:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002904:	20006b90 	.word	0x20006b90

08002908 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <CAN1_RX0_IRQHandler>
	...

0800290c <fnd_com_modbus_rtu_init>:
modbus_regs sys_regs;
modbus_master master[2];
modbus_slave slaves[2];

void fnd_com_modbus_rtu_init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
    master_init(&master[0], &port[0], 21);
 8002910:	2215      	movs	r2, #21
 8002912:	490f      	ldr	r1, [pc, #60]	; (8002950 <fnd_com_modbus_rtu_init+0x44>)
 8002914:	480f      	ldr	r0, [pc, #60]	; (8002954 <fnd_com_modbus_rtu_init+0x48>)
 8002916:	f00a feb5 	bl	800d684 <master_init>
    master_init(&master[1], &port[1], 1);
 800291a:	2201      	movs	r2, #1
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <fnd_com_modbus_rtu_init+0x4c>)
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <fnd_com_modbus_rtu_init+0x50>)
 8002920:	f00a feb0 	bl	800d684 <master_init>
    slave_init(&slaves[0], &port[2], 1, &sys_regs);
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <fnd_com_modbus_rtu_init+0x54>)
 8002926:	2201      	movs	r2, #1
 8002928:	490e      	ldr	r1, [pc, #56]	; (8002964 <fnd_com_modbus_rtu_init+0x58>)
 800292a:	480f      	ldr	r0, [pc, #60]	; (8002968 <fnd_com_modbus_rtu_init+0x5c>)
 800292c:	f00b ff54 	bl	800e7d8 <slave_init>
    slave_init(&slaves[1], &port[3], 2, &sys_regs);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <fnd_com_modbus_rtu_init+0x54>)
 8002932:	2202      	movs	r2, #2
 8002934:	490d      	ldr	r1, [pc, #52]	; (800296c <fnd_com_modbus_rtu_init+0x60>)
 8002936:	480e      	ldr	r0, [pc, #56]	; (8002970 <fnd_com_modbus_rtu_init+0x64>)
 8002938:	f00b ff4e 	bl	800e7d8 <slave_init>

    sys_regs.holdings[223] = 220;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <fnd_com_modbus_rtu_init+0x54>)
 800293e:	22dc      	movs	r2, #220	; 0xdc
 8002940:	f8a3 25be 	strh.w	r2, [r3, #1470]	; 0x5be
    sys_regs.holdings[224] = 60;
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <fnd_com_modbus_rtu_init+0x54>)
 8002946:	223c      	movs	r2, #60	; 0x3c
 8002948:	f8a3 25c0 	strh.w	r2, [r3, #1472]	; 0x5c0
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20000004 	.word	0x20000004
 8002954:	20006058 	.word	0x20006058
 8002958:	20000010 	.word	0x20000010
 800295c:	2000647c 	.word	0x2000647c
 8002960:	20005a58 	.word	0x20005a58
 8002964:	2000001c 	.word	0x2000001c
 8002968:	20005218 	.word	0x20005218
 800296c:	20000028 	.word	0x20000028
 8002970:	20005638 	.word	0x20005638

08002974 <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	d103      	bne.n	8002990 <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        master_uart_idle(&master[0]);
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 800298a:	f00a fec8 	bl	800d71e <master_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 800298e:	e01e      	b.n	80029ce <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == master[1].uart_port->uart)
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <fnd_com_modbus_rtu_uart_idle_irq+0x64>)
 8002992:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d103      	bne.n	80029a6 <fnd_com_modbus_rtu_uart_idle_irq+0x32>
        master_uart_idle(&master[1]);
 800299e:	480f      	ldr	r0, [pc, #60]	; (80029dc <fnd_com_modbus_rtu_uart_idle_irq+0x68>)
 80029a0:	f00a febd 	bl	800d71e <master_uart_idle>
}
 80029a4:	e013      	b.n	80029ce <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[0].uart_port->uart)
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d103      	bne.n	80029ba <fnd_com_modbus_rtu_uart_idle_irq+0x46>
        slave_uart_idle(&slaves[0]);
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80029b4:	f00b ff48 	bl	800e848 <slave_uart_idle>
}
 80029b8:	e009      	b.n	80029ce <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
    else if (huart == slaves[1].uart_port->uart)
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <fnd_com_modbus_rtu_uart_idle_irq+0x6c>)
 80029bc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d102      	bne.n	80029ce <fnd_com_modbus_rtu_uart_idle_irq+0x5a>
        slave_uart_idle(&slaves[1]);
 80029c8:	4806      	ldr	r0, [pc, #24]	; (80029e4 <fnd_com_modbus_rtu_uart_idle_irq+0x70>)
 80029ca:	f00b ff3d 	bl	800e848 <slave_uart_idle>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20006058 	.word	0x20006058
 80029dc:	2000647c 	.word	0x2000647c
 80029e0:	20005218 	.word	0x20005218
 80029e4:	20005638 	.word	0x20005638

080029e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
    if (huart == master[0].uart_port->uart)
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <HAL_UART_TxCpltCallback+0x68>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d104      	bne.n	8002a06 <HAL_UART_TxCpltCallback+0x1e>
    {
        master_set_tx_rx(&master[0], rx);
 80029fc:	2100      	movs	r1, #0
 80029fe:	4814      	ldr	r0, [pc, #80]	; (8002a50 <HAL_UART_TxCpltCallback+0x68>)
 8002a00:	f00a fe74 	bl	800d6ec <master_set_tx_rx>
 8002a04:	e00a      	b.n	8002a1c <HAL_UART_TxCpltCallback+0x34>
    }
    else if (huart == master[1].uart_port->uart)
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_UART_TxCpltCallback+0x68>)
 8002a08:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d103      	bne.n	8002a1c <HAL_UART_TxCpltCallback+0x34>
    {
        master_set_tx_rx(&master[1], rx);
 8002a14:	2100      	movs	r1, #0
 8002a16:	480f      	ldr	r0, [pc, #60]	; (8002a54 <HAL_UART_TxCpltCallback+0x6c>)
 8002a18:	f00a fe68 	bl	800d6ec <master_set_tx_rx>
    }
    if (huart == slaves[0].uart_port->uart)
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_UART_TxCpltCallback+0x70>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d104      	bne.n	8002a32 <HAL_UART_TxCpltCallback+0x4a>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <HAL_UART_TxCpltCallback+0x70>)
 8002a2c:	f00b ff4c 	bl	800e8c8 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8002a30:	e00a      	b.n	8002a48 <HAL_UART_TxCpltCallback+0x60>
    else if (huart == slaves[1].uart_port->uart)
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_UART_TxCpltCallback+0x70>)
 8002a34:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d103      	bne.n	8002a48 <HAL_UART_TxCpltCallback+0x60>
        slave_set_tx_rx(&slaves[1], rx);
 8002a40:	2100      	movs	r1, #0
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <HAL_UART_TxCpltCallback+0x74>)
 8002a44:	f00b ff40 	bl	800e8c8 <slave_set_tx_rx>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20006058 	.word	0x20006058
 8002a54:	2000647c 	.word	0x2000647c
 8002a58:	20005218 	.word	0x20005218
 8002a5c:	20005638 	.word	0x20005638

08002a60 <fnd_com_modbus_rtu_master1_read_write>:

void fnd_com_modbus_rtu_master1_read_write(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
    master_read_holding_regs(&master[0], 100, 8, &sys_regs.inputs[INPUT_AQI_START]);
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <fnd_com_modbus_rtu_master1_read_write+0x14>)
 8002a66:	2208      	movs	r2, #8
 8002a68:	2164      	movs	r1, #100	; 0x64
 8002a6a:	4803      	ldr	r0, [pc, #12]	; (8002a78 <fnd_com_modbus_rtu_master1_read_write+0x18>)
 8002a6c:	f00a feea 	bl	800d844 <master_read_holding_regs>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20005c94 	.word	0x20005c94
 8002a78:	20006058 	.word	0x20006058

08002a7c <fnd_com_modbus_rtu_master2_read_write>:

void fnd_com_modbus_rtu_master2_read_write(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
    // read external holding regs copy to internal holding regs
    osDelay(50);
 8002a80:	2032      	movs	r0, #50	; 0x32
 8002a82:	f007 f8eb 	bl	8009c5c <osDelay>
    master_read_holding_regs(&master[1], 80, 4, &sys_regs.inputs[90]);
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <fnd_com_modbus_rtu_master2_read_write+0xd0>)
 8002a88:	2204      	movs	r2, #4
 8002a8a:	2150      	movs	r1, #80	; 0x50
 8002a8c:	4830      	ldr	r0, [pc, #192]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002a8e:	f00a fed9 	bl	800d844 <master_read_holding_regs>

    osDelay(50);
 8002a92:	2032      	movs	r0, #50	; 0x32
 8002a94:	f007 f8e2 	bl	8009c5c <osDelay>
    master_read_holding_regs(&master[1], 100, 47, &sys_regs.inputs[100]);
 8002a98:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <fnd_com_modbus_rtu_master2_read_write+0xd8>)
 8002a9a:	222f      	movs	r2, #47	; 0x2f
 8002a9c:	2164      	movs	r1, #100	; 0x64
 8002a9e:	482c      	ldr	r0, [pc, #176]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002aa0:	f00a fed0 	bl	800d844 <master_read_holding_regs>

    osDelay(50);
 8002aa4:	2032      	movs	r0, #50	; 0x32
 8002aa6:	f007 f8d9 	bl	8009c5c <osDelay>
    master_read_holding_regs(&master[1], 200, 8, &sys_regs.inputs[150]);
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <fnd_com_modbus_rtu_master2_read_write+0xdc>)
 8002aac:	2208      	movs	r2, #8
 8002aae:	21c8      	movs	r1, #200	; 0xc8
 8002ab0:	4827      	ldr	r0, [pc, #156]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002ab2:	f00a fec7 	bl	800d844 <master_read_holding_regs>

    // write external holding regs
    osDelay(50);
 8002ab6:	2032      	movs	r0, #50	; 0x32
 8002ab8:	f007 f8d0 	bl	8009c5c <osDelay>
    master_write_single_coil(&master[1], 640, (sys_regs.holdings[220] == 1) ? 1 : 0);
 8002abc:	4b27      	ldr	r3, [pc, #156]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002abe:	f9b3 35b8 	ldrsh.w	r3, [r3, #1464]	; 0x5b8
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	f44f 7120 	mov.w	r1, #640	; 0x280
 8002ad2:	481f      	ldr	r0, [pc, #124]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002ad4:	f00a ff21 	bl	800d91a <master_write_single_coil>

    osDelay(50);
 8002ad8:	2032      	movs	r0, #50	; 0x32
 8002ada:	f007 f8bf 	bl	8009c5c <osDelay>
    sys_regs.holdings[222] = sys_regs.inputs[201] / 200;
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002ae0:	f9b3 3392 	ldrsh.w	r3, [r3, #914]	; 0x392
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	; (8002b60 <fnd_com_modbus_rtu_master2_read_write+0xe4>)
 8002ae6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aea:	1192      	asrs	r2, r2, #6
 8002aec:	17db      	asrs	r3, r3, #31
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002af4:	f8a3 25bc 	strh.w	r2, [r3, #1468]	; 0x5bc
    master_write_multi_holding_regs(&master[1], 0, 2, &sys_regs.holdings[221]);
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <fnd_com_modbus_rtu_master2_read_write+0xe8>)
 8002afa:	2202      	movs	r2, #2
 8002afc:	2100      	movs	r1, #0
 8002afe:	4814      	ldr	r0, [pc, #80]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002b00:	f00a ff66 	bl	800d9d0 <master_write_multi_holding_regs>

    osDelay(50);
 8002b04:	2032      	movs	r0, #50	; 0x32
 8002b06:	f007 f8a9 	bl	8009c5c <osDelay>
    sys_regs.holdings[225] = sys_regs.inputs[INPUT_SHT_START + 1] / 10;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b0c:	f9b3 3216 	ldrsh.w	r3, [r3, #534]	; 0x216
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <fnd_com_modbus_rtu_master2_read_write+0xec>)
 8002b12:	fb82 1203 	smull	r1, r2, r2, r3
 8002b16:	1092      	asrs	r2, r2, #2
 8002b18:	17db      	asrs	r3, r3, #31
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b20:	f8a3 25c2 	strh.w	r2, [r3, #1474]	; 0x5c2
    sys_regs.holdings[226] = sys_regs.inputs[INPUT_NTC_START];
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b26:	f9b3 2208 	ldrsh.w	r2, [r3, #520]	; 0x208
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b2c:	f8a3 25c4 	strh.w	r2, [r3, #1476]	; 0x5c4
    sys_regs.holdings[227] = sys_regs.inputs[INPUT_NTC_START + 1];
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b32:	f9b3 220a 	ldrsh.w	r2, [r3, #522]	; 0x20a
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <fnd_com_modbus_rtu_master2_read_write+0xe0>)
 8002b38:	f8a3 25c6 	strh.w	r2, [r3, #1478]	; 0x5c6
    master_write_multi_holding_regs(&master[1], 6, 5, &sys_regs.holdings[223]);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <fnd_com_modbus_rtu_master2_read_write+0xf0>)
 8002b3e:	2205      	movs	r2, #5
 8002b40:	2106      	movs	r1, #6
 8002b42:	4803      	ldr	r0, [pc, #12]	; (8002b50 <fnd_com_modbus_rtu_master2_read_write+0xd4>)
 8002b44:	f00a ff44 	bl	800d9d0 <master_write_multi_holding_regs>
}
 8002b48:	bf00      	nop
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20005d0c 	.word	0x20005d0c
 8002b50:	2000647c 	.word	0x2000647c
 8002b54:	20005d20 	.word	0x20005d20
 8002b58:	20005d84 	.word	0x20005d84
 8002b5c:	20005a58 	.word	0x20005a58
 8002b60:	51eb851f 	.word	0x51eb851f
 8002b64:	20006012 	.word	0x20006012
 8002b68:	66666667 	.word	0x66666667
 8002b6c:	20006016 	.word	0x20006016

08002b70 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8002b74:	4802      	ldr	r0, [pc, #8]	; (8002b80 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8002b76:	f00b fec0 	bl	800e8fa <slave_wait_request>
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20005218 	.word	0x20005218

08002b84 <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8002b8a:	f00b feb6 	bl	800e8fa <slave_wait_request>
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20005638 	.word	0x20005638

08002b98 <fnd_input_peripheral_init>:
#include "fnd_input.h"
#include "fnd_com.h"

void fnd_input_peripheral_init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
    fnd_input_adc_init();
 8002b9c:	f000 f9f6 	bl	8002f8c <fnd_input_adc_init>
    fnd_input_tim_input_capture_init();
 8002ba0:	f000 fc24 	bl	80033ec <fnd_input_tim_input_capture_init>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <fnd_input_update_value>:

void fnd_input_update_value(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	; 0x30
 8002bac:	af00      	add	r7, sp, #0
    float adc_values[6];
    uint8_t gpio_values[8];
    uint16_t speed_values[2];

    fnd_input_adc_read_pressure_difference(adc_values);
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f9f8 	bl	8002fa8 <fnd_input_adc_read_pressure_difference>
    for (uint8_t i = 0; i < 3; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002bbe:	e019      	b.n	8002bf4 <fnd_input_update_value+0x4c>
    {
        sys_regs.inputs[INPUT_PRE_START + i] = (int16_t)(adc_values[i]);
 8002bc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b20      	subs	r3, #32
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bda:	ee17 2a90 	vmov	r2, s15
 8002bde:	b211      	sxth	r1, r2
 8002be0:	4a69      	ldr	r2, [pc, #420]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002be2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002be6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 3; i++)
 8002bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bee:	3301      	adds	r3, #1
 8002bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d9e1      	bls.n	8002bc0 <fnd_input_update_value+0x18>
    }

    fnd_input_adc_read_valve_feedback(adc_values);
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa1b 	bl	800303c <fnd_input_adc_read_valve_feedback>
    sys_regs.inputs[INPUT_VAL_START] = (int16_t)(adc_values[0]);
 8002c06:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0e:	ee17 3a90 	vmov	r3, s15
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	4b5c      	ldr	r3, [pc, #368]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002c16:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

    fnd_input_adc_read_ntc_temp(adc_values);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa3e 	bl	80030a0 <fnd_input_adc_read_ntc_temp>
    for (uint8_t i = 0; i < 6; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c2a:	e01e      	b.n	8002c6a <fnd_input_update_value+0xc2>
    {
        sys_regs.inputs[INPUT_NTC_START + i] = (int16_t)(adc_values[i] * 10);
 8002c2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c36:	4413      	add	r3, r2
 8002c38:	3b20      	subs	r3, #32
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c50:	ee17 2a90 	vmov	r2, s15
 8002c54:	b211      	sxth	r1, r2
 8002c56:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002c58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 6; i++)
 8002c60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c64:	3301      	adds	r3, #1
 8002c66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002c6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d9dc      	bls.n	8002c2c <fnd_input_update_value+0x84>
    }

    fnd_input_gpio_read_di(gpio_values);
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa68 	bl	800314c <fnd_input_gpio_read_di>
    for (uint8_t i = 0; i < 4; i++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002c82:	e014      	b.n	8002cae <fnd_input_update_value+0x106>
    {
        sys_regs.inputs[INPUT_DIN_START + i] = gpio_values[i];
 8002c84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f813 2c28 	ldrb.w	r2, [r3, #-40]
 8002c92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c96:	330e      	adds	r3, #14
 8002c98:	b211      	sxth	r1, r2
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002c9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ca0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 8002ca4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002cae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d9e6      	bls.n	8002c84 <fnd_input_update_value+0xdc>
    }

    fnd_input_gpio_read_id(gpio_values);
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fa74 	bl	80031a8 <fnd_input_gpio_read_id>
    for (uint8_t i = 0; i < 8; i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002cc6:	e01f      	b.n	8002d08 <fnd_input_update_value+0x160>
    {
        uint8_t bit_value = (gpio_values[i] == 1) ? 0x01 : 0x00;
 8002cc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ccc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        sys_regs.inputs[INPUT_ID_START] = (sys_regs.inputs[INPUT_ID_START] << 1) | bit_value;
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002ce6:	f9b3 3228 	ldrsh.w	r3, [r3, #552]	; 0x228
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b21a      	sxth	r2, r3
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002cfa:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
    for (uint8_t i = 0; i < 8; i++)
 8002cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d02:	3301      	adds	r3, #1
 8002d04:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002d08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002d0c:	2b07      	cmp	r3, #7
 8002d0e:	d9db      	bls.n	8002cc8 <fnd_input_update_value+0x120>
    }

    static uint8_t count = 0;
    count = (count + 1) % 20;
 8002d10:	4b1e      	ldr	r3, [pc, #120]	; (8002d8c <fnd_input_update_value+0x1e4>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <fnd_input_update_value+0x1e8>)
 8002d18:	fb83 1302 	smull	r1, r3, r3, r2
 8002d1c:	10d9      	asrs	r1, r3, #3
 8002d1e:	17d3      	asrs	r3, r2, #31
 8002d20:	1ac9      	subs	r1, r1, r3
 8002d22:	460b      	mov	r3, r1
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	1ad1      	subs	r1, r2, r3
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <fnd_input_update_value+0x1e4>)
 8002d30:	701a      	strb	r2, [r3, #0]
    if (count == 0)
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <fnd_input_update_value+0x1e4>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d121      	bne.n	8002d7e <fnd_input_update_value+0x1d6>
    {
        fnd_input_tim_input_read_speed(speed_values);
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fb83 	bl	8003448 <fnd_input_tim_input_read_speed>
        for (uint8_t i = 0; i < 2; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d48:	e015      	b.n	8002d76 <fnd_input_update_value+0x1ce>
        {
            sys_regs.inputs[INPUT_FANSPD_START + i] = (int16_t)speed_values[i];
 8002d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d54:	4413      	add	r3, r2
 8002d56:	f833 2c2c 	ldrh.w	r2, [r3, #-44]
 8002d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d5e:	3312      	adds	r3, #18
 8002d60:	b211      	sxth	r1, r2
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <fnd_input_update_value+0x1e0>)
 8002d64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t i = 0; i < 2; i++)
 8002d6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d70:	3301      	adds	r3, #1
 8002d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d9e5      	bls.n	8002d4a <fnd_input_update_value+0x1a2>
        }
    }
}
 8002d7e:	bf00      	nop
 8002d80:	3730      	adds	r7, #48	; 0x30
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20005a58 	.word	0x20005a58
 8002d8c:	20000198 	.word	0x20000198
 8002d90:	66666667 	.word	0x66666667

08002d94 <fnd_input_update_sht_value>:

void fnd_input_update_sht_value(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
    float sht1_values[2] = {0};
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
    float sht2_values[2] = {0};
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
    HAL_StatusTypeDef status = fnd_input_i2c_read_sht_temp_humi(0, sht1_values);
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	4619      	mov	r1, r3
 8002db2:	2000      	movs	r0, #0
 8002db4:	f000 fa78 	bl	80032a8 <fnd_input_i2c_read_sht_temp_humi>
 8002db8:	4603      	mov	r3, r0
 8002dba:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	75fb      	strb	r3, [r7, #23]
 8002dc0:	e020      	b.n	8002e04 <fnd_input_update_sht_value+0x70>
    {
        sys_regs.inputs[INPUT_SHT_START + i] = (status == HAL_OK) ? (int16_t)(sht1_values[i] * 10) : (-1);
 8002dc2:	7d7b      	ldrb	r3, [r7, #21]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <fnd_input_update_sht_value+0x58>
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	f107 0218 	add.w	r2, r7, #24
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b0c      	subs	r3, #12
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002de4:	ee17 3a90 	vmov	r3, s15
 8002de8:	b21a      	sxth	r2, r3
 8002dea:	e001      	b.n	8002df0 <fnd_input_update_sht_value+0x5c>
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	330a      	adds	r3, #10
 8002df4:	491e      	ldr	r1, [pc, #120]	; (8002e70 <fnd_input_update_sht_value+0xdc>)
 8002df6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002dfa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	3301      	adds	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d9db      	bls.n	8002dc2 <fnd_input_update_sht_value+0x2e>
    }

    status = fnd_input_i2c_read_sht_temp_humi(1, sht2_values);
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f000 fa4a 	bl	80032a8 <fnd_input_i2c_read_sht_temp_humi>
 8002e14:	4603      	mov	r3, r0
 8002e16:	757b      	strb	r3, [r7, #21]
    for (uint8_t i = 0; i < 2; i++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	75bb      	strb	r3, [r7, #22]
 8002e1c:	e020      	b.n	8002e60 <fnd_input_update_sht_value+0xcc>
    {
        sys_regs.inputs[INPUT_SHT_START + 2 + i] = (status == HAL_OK) ? (int16_t)(sht2_values[i] * 10) : (-1);
 8002e1e:	7d7b      	ldrb	r3, [r7, #21]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <fnd_input_update_sht_value+0xb4>
 8002e24:	7dbb      	ldrb	r3, [r7, #22]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	f107 0218 	add.w	r2, r7, #24
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b14      	subs	r3, #20
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e40:	ee17 3a90 	vmov	r3, s15
 8002e44:	b21a      	sxth	r2, r3
 8002e46:	e001      	b.n	8002e4c <fnd_input_update_sht_value+0xb8>
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	7dbb      	ldrb	r3, [r7, #22]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <fnd_input_update_sht_value+0xdc>)
 8002e52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint8_t i = 0; i < 2; i++)
 8002e5a:	7dbb      	ldrb	r3, [r7, #22]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	75bb      	strb	r3, [r7, #22]
 8002e60:	7dbb      	ldrb	r3, [r7, #22]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d9db      	bls.n	8002e1e <fnd_input_update_sht_value+0x8a>
    }
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20005a58 	.word	0x20005a58

08002e74 <get_channel_average>:
#define NTC_TOTAL_CH 6

uint32_t fnd_adc_data[ADC_TOTAL_CH * DATA_PER_CH];

static float get_channel_average(uint8_t ch_idx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
    float sum = 0;
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	72fb      	strb	r3, [r7, #11]
 8002e88:	e017      	b.n	8002eba <get_channel_average+0x46>
    {
        sum = sum + fnd_adc_data[ch_idx + i * ADC_TOTAL_CH];
 8002e8a:	79f9      	ldrb	r1, [r7, #7]
 8002e8c:	7afa      	ldrb	r2, [r7, #11]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <get_channel_average+0x6c>)
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb0:	edc7 7a03 	vstr	s15, [r7, #12]
    for (uint8_t i = 0; i < DATA_PER_CH; i++)
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	72fb      	strb	r3, [r7, #11]
 8002eba:	7afb      	ldrb	r3, [r7, #11]
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d9e4      	bls.n	8002e8a <get_channel_average+0x16>
    }
    return sum / DATA_PER_CH;
 8002ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ec8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ecc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	200068a0 	.word	0x200068a0
 8002ee4:	00000000 	.word	0x00000000

08002ee8 <calculate_ntc_temperature>:

static float calculate_ntc_temperature(double res_value, double res_ref, double b_value)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ef2:	ed87 1b02 	vstr	d1, [r7, #8]
 8002ef6:	ed87 2b00 	vstr	d2, [r7]
    return (float)(1 / (((log(res_value / res_ref)) / b_value) + (1 / (273.15 + 25))) - 273.15);
 8002efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002efe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f02:	f7fd fc4b 	bl	800079c <__aeabi_ddiv>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00b fe33 	bl	800eb80 <log>
 8002f1a:	ec51 0b10 	vmov	r0, r1, d0
 8002f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f22:	f7fd fc3b 	bl	800079c <__aeabi_ddiv>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	a315      	add	r3, pc, #84	; (adr r3, 8002f84 <calculate_ntc_temperature+0x9c>)
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f7fd f952 	bl	80001dc <__adddf3>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	490f      	ldr	r1, [pc, #60]	; (8002f80 <calculate_ntc_temperature+0x98>)
 8002f42:	f7fd fc2b 	bl	800079c <__aeabi_ddiv>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	a30a      	add	r3, pc, #40	; (adr r3, 8002f78 <calculate_ntc_temperature+0x90>)
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f7fd f940 	bl	80001d8 <__aeabi_dsub>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fdc2 	bl	8000ae8 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	ee07 3a90 	vmov	s15, r3
}
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	f3af 8000 	nop.w
 8002f78:	66666666 	.word	0x66666666
 8002f7c:	40711266 	.word	0x40711266
 8002f80:	3ff00000 	.word	0x3ff00000
 8002f84:	dcb5db83 	.word	0xdcb5db83
 8002f88:	3f6b79e1 	.word	0x3f6b79e1

08002f8c <fnd_input_adc_init>:

void fnd_input_adc_init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, fnd_adc_data, ADC_TOTAL_CH * DATA_PER_CH);
 8002f90:	2282      	movs	r2, #130	; 0x82
 8002f92:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <fnd_input_adc_init+0x14>)
 8002f94:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <fnd_input_adc_init+0x18>)
 8002f96:	f000 ffed 	bl	8003f74 <HAL_ADC_Start_DMA>
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200068a0 	.word	0x200068a0
 8002fa4:	20004b70 	.word	0x20004b70

08002fa8 <fnd_input_adc_read_pressure_difference>:

void fnd_input_adc_read_pressure_difference(float *values)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < DELTA_P_TOTAL_CH; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e02e      	b.n	8003014 <fnd_input_adc_read_pressure_difference+0x6c>
    {
        float delta_p_adc_value = get_channel_average(i + DELTA_P_START_CH);
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff5b 	bl	8002e74 <get_channel_average>
 8002fbe:	ed87 0a02 	vstr	s0, [r7, #8]
        //values[i] = (ratio - 0.5) * (ratio / 0.4 - 1.25) * (ratio / 0.4 - 1.25) * 133.0 * 100;
        values[i] = (delta_p_adc_value / 4095.0) * 190.0 - 38;
 8002fc2:	68b8      	ldr	r0, [r7, #8]
 8002fc4:	f7fd fa68 	bl	8000498 <__aeabi_f2d>
 8002fc8:	a318      	add	r3, pc, #96	; (adr r3, 800302c <fnd_input_adc_read_pressure_difference+0x84>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd fbe5 	bl	800079c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	a316      	add	r3, pc, #88	; (adr r3, 8003034 <fnd_input_adc_read_pressure_difference+0x8c>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd fab2 	bl	8000548 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <fnd_input_adc_read_pressure_difference+0x80>)
 8002ff2:	f7fd f8f1 	bl	80001d8 <__aeabi_dsub>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	18d4      	adds	r4, r2, r3
 8003006:	f7fd fd6f 	bl	8000ae8 <__aeabi_d2f>
 800300a:	4603      	mov	r3, r0
 800300c:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < DELTA_P_TOTAL_CH; i++)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3301      	adds	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d9cd      	bls.n	8002fb6 <fnd_input_adc_read_pressure_difference+0xe>
    }
}
 800301a:	bf00      	nop
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	f3af 8000 	nop.w
 8003028:	40430000 	.word	0x40430000
 800302c:	00000000 	.word	0x00000000
 8003030:	40affe00 	.word	0x40affe00
 8003034:	00000000 	.word	0x00000000
 8003038:	4067c000 	.word	0x4067c000

0800303c <fnd_input_adc_read_valve_feedback>:

void fnd_input_adc_read_valve_feedback(float *values)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < VALVE_FB_TOTAL_CH; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
 8003048:	e020      	b.n	800308c <fnd_input_adc_read_valve_feedback+0x50>
    {
        double valve_pos_adc_value = get_channel_average(i + VALVE_FB_START_CH) / 100.0;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
 800304c:	3303      	adds	r3, #3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff0f 	bl	8002e74 <get_channel_average>
 8003056:	ee10 3a10 	vmov	r3, s0
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa1c 	bl	8000498 <__aeabi_f2d>
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <fnd_input_adc_read_valve_feedback+0x60>)
 8003066:	f7fd fb99 	bl	800079c <__aeabi_ddiv>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	e9c7 2302 	strd	r2, r3, [r7, #8]
        values[i] = (float)valve_pos_adc_value;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	18d4      	adds	r4, r2, r3
 800307a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800307e:	f7fd fd33 	bl	8000ae8 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	6023      	str	r3, [r4, #0]
    for (uint8_t i = 0; i < VALVE_FB_TOTAL_CH; i++)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	3301      	adds	r3, #1
 800308a:	75fb      	strb	r3, [r7, #23]
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0db      	beq.n	800304a <fnd_input_adc_read_valve_feedback+0xe>
    }
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	40590000 	.word	0x40590000

080030a0 <fnd_input_adc_read_ntc_temp>:

void fnd_input_adc_read_ntc_temp(float *values)
{
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < NTC_TOTAL_CH; i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
 80030ac:	e03a      	b.n	8003124 <fnd_input_adc_read_ntc_temp+0x84>
    {
        float ntc_adc_value = get_channel_average(i + NTC_START_CH);
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	3304      	adds	r3, #4
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fedd 	bl	8002e74 <get_channel_average>
 80030ba:	ed87 0a04 	vstr	s0, [r7, #16]
        float ntc_resister_value = (float)1.0 * ntc_adc_value / (4096.0 - ntc_adc_value);
 80030be:	6938      	ldr	r0, [r7, #16]
 80030c0:	f7fd f9ea 	bl	8000498 <__aeabi_f2d>
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
 80030c8:	6938      	ldr	r0, [r7, #16]
 80030ca:	f7fd f9e5 	bl	8000498 <__aeabi_f2d>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	491c      	ldr	r1, [pc, #112]	; (8003148 <fnd_input_adc_read_ntc_temp+0xa8>)
 80030d8:	f7fd f87e 	bl	80001d8 <__aeabi_dsub>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd fb5a 	bl	800079c <__aeabi_ddiv>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	f7fd fcfa 	bl	8000ae8 <__aeabi_d2f>
 80030f4:	4603      	mov	r3, r0
 80030f6:	60fb      	str	r3, [r7, #12]
        values[i] = calculate_ntc_temperature(ntc_resister_value, 5.0, 3470);
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7fd f9cd 	bl	8000498 <__aeabi_f2d>
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	18d4      	adds	r4, r2, r3
 8003106:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8003138 <fnd_input_adc_read_ntc_temp+0x98>
 800310a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8003140 <fnd_input_adc_read_ntc_temp+0xa0>
 800310e:	ec41 0b10 	vmov	d0, r0, r1
 8003112:	f7ff fee9 	bl	8002ee8 <calculate_ntc_temperature>
 8003116:	eef0 7a40 	vmov.f32	s15, s0
 800311a:	edc4 7a00 	vstr	s15, [r4]
    for (uint8_t i = 0; i < NTC_TOTAL_CH; i++)
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	3301      	adds	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d9c1      	bls.n	80030ae <fnd_input_adc_read_ntc_temp+0xe>
    }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bdb0      	pop	{r4, r5, r7, pc}
 8003134:	f3af 8000 	nop.w
 8003138:	00000000 	.word	0x00000000
 800313c:	40ab1c00 	.word	0x40ab1c00
 8003140:	00000000 	.word	0x00000000
 8003144:	40140000 	.word	0x40140000
 8003148:	40b00000 	.word	0x40b00000

0800314c <fnd_input_gpio_read_di>:
GPIO_TypeDef *gpio_id_port[8] = {IDA1_GPIO_Port, IDA2_GPIO_Port, IDA3_GPIO_Port, IDA4_GPIO_Port, IDB1_GPIO_Port, IDB2_GPIO_Port, IDB3_GPIO_Port, IDB4_GPIO_Port};

uint16_t gpio_id_pin[8] = {IDA1_Pin, IDA2_Pin, IDA3_Pin, IDA4_Pin, IDB1_Pin, IDB2_Pin, IDB3_Pin, IDB4_Pin};

void fnd_input_gpio_read_di(uint8_t *values)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 4; i++)
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e019      	b.n	800318e <fnd_input_gpio_read_di+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_input_port[i], gpio_input_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	4a10      	ldr	r2, [pc, #64]	; (80031a0 <fnd_input_gpio_read_di+0x54>)
 800315e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	490f      	ldr	r1, [pc, #60]	; (80031a4 <fnd_input_gpio_read_di+0x58>)
 8003166:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f002 f963 	bl	8005438 <HAL_GPIO_ReadPin>
 8003172:	4603      	mov	r3, r0
 8003174:	2b01      	cmp	r3, #1
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2d9      	uxtb	r1, r3
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	460a      	mov	r2, r1
 8003186:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	3301      	adds	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d9e2      	bls.n	800315a <fnd_input_gpio_read_di+0xe>
    }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000034 	.word	0x20000034
 80031a4:	20000044 	.word	0x20000044

080031a8 <fnd_input_gpio_read_id>:

void fnd_input_gpio_read_id(uint8_t *values)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e019      	b.n	80031ea <fnd_input_gpio_read_id+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(gpio_id_port[i], gpio_id_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	4a10      	ldr	r2, [pc, #64]	; (80031fc <fnd_input_gpio_read_id+0x54>)
 80031ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	490f      	ldr	r1, [pc, #60]	; (8003200 <fnd_input_gpio_read_id+0x58>)
 80031c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f002 f935 	bl	8005438 <HAL_GPIO_ReadPin>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2d9      	uxtb	r1, r3
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	460a      	mov	r2, r1
 80031e2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	3301      	adds	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b07      	cmp	r3, #7
 80031ee:	d9e2      	bls.n	80031b6 <fnd_input_gpio_read_id+0xe>
    }
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2000004c 	.word	0x2000004c
 8003200:	2000006c 	.word	0x2000006c

08003204 <sht_write_cmd>:
#define I2C_TIMEOUT 100

I2C_HandleTypeDef *sht_i2c[2] = {&hi2c1, &hi2c3};

static HAL_StatusTypeDef sht_write_cmd(I2C_HandleTypeDef *hi2c, uint16_t cmd)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af02      	add	r7, sp, #8
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
    uint8_t buff[2] = {cmd >> 8, cmd};
 8003210:	887b      	ldrh	r3, [r7, #2]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	b29b      	uxth	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	733b      	strb	r3, [r7, #12]
 800321a:	887b      	ldrh	r3, [r7, #2]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(hi2c, SHT_ADDR, buff, 2, I2C_TIMEOUT);
 8003220:	f107 020c 	add.w	r2, r7, #12
 8003224:	2364      	movs	r3, #100	; 0x64
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2302      	movs	r3, #2
 800322a:	2188      	movs	r1, #136	; 0x88
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f002 fa79 	bl	8005724 <HAL_I2C_Master_Transmit>
 8003232:	4603      	mov	r3, r0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <calculate_crc>:

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xff;
 8003246:	23ff      	movs	r3, #255	; 0xff
 8003248:	75fb      	strb	r3, [r7, #23]
    for (size_t i = 0; i < length; i++)
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e020      	b.n	8003292 <calculate_crc+0x56>
    {
        crc ^= data[i];
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4413      	add	r3, r2
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	4053      	eors	r3, r2
 800325c:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e010      	b.n	8003286 <calculate_crc+0x4a>
        {
            if ((crc & 0x80u) != 0)
 8003264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003268:	2b00      	cmp	r3, #0
 800326a:	da06      	bge.n	800327a <calculate_crc+0x3e>
            {
                crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8003276:	75fb      	strb	r3, [r7, #23]
 8003278:	e002      	b.n	8003280 <calculate_crc+0x44>
            }
            else
            {
                crc <<= 1u;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
        for (size_t j = 0; j < 8; j++)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b07      	cmp	r3, #7
 800328a:	d9eb      	bls.n	8003264 <calculate_crc+0x28>
    for (size_t i = 0; i < length; i++)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3301      	adds	r3, #1
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d3da      	bcc.n	8003250 <calculate_crc+0x14>
            }
        }
    }
    return crc;
 800329a:	7dfb      	ldrb	r3, [r7, #23]
}
 800329c:	4618      	mov	r0, r3
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <fnd_input_i2c_read_sht_temp_humi>:

HAL_StatusTypeDef fnd_input_i2c_read_sht_temp_humi(uint8_t idx, float *values)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
    uint8_t buff[6] = {0};
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	2300      	movs	r3, #0
 80032ba:	823b      	strh	r3, [r7, #16]

    if (HAL_I2C_IsDeviceReady(sht_i2c[idx], SHT_ADDR, 10, I2C_TIMEOUT) != HAL_OK)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	4a46      	ldr	r2, [pc, #280]	; (80033d8 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 80032c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80032c4:	2364      	movs	r3, #100	; 0x64
 80032c6:	220a      	movs	r2, #10
 80032c8:	2188      	movs	r1, #136	; 0x88
 80032ca:	f002 fd4f 	bl	8005d6c <HAL_I2C_IsDeviceReady>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00c      	beq.n	80032ee <fnd_input_i2c_read_sht_temp_humi+0x46>
    {
        if (idx == 0)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <fnd_input_i2c_read_sht_temp_humi+0x38>
        {
            MX_I2C1_Init();
 80032da:	f7fe fa29 	bl	8001730 <MX_I2C1_Init>
 80032de:	e004      	b.n	80032ea <fnd_input_i2c_read_sht_temp_humi+0x42>
        }
        else if (idx == 1)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <fnd_input_i2c_read_sht_temp_humi+0x42>
        {
            MX_I2C3_Init();
 80032e6:	f7fe fa51 	bl	800178c <MX_I2C3_Init>
        }
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e070      	b.n	80033d0 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (sht_write_cmd(sht_i2c[idx], 0x240B) != HAL_OK)
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	4a39      	ldr	r2, [pc, #228]	; (80033d8 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 80032f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f6:	f242 410b 	movw	r1, #9227	; 0x240b
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ff82 	bl	8003204 <sht_write_cmd>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <fnd_input_i2c_read_sht_temp_humi+0x62>
    {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e062      	b.n	80033d0 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    osDelay(50);
 800330a:	2032      	movs	r0, #50	; 0x32
 800330c:	f006 fca6 	bl	8009c5c <osDelay>

    if (HAL_I2C_Master_Receive(sht_i2c[idx], SHT_ADDR | 0x01, buff, 6, I2C_TIMEOUT) != HAL_OK)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <fnd_input_i2c_read_sht_temp_humi+0x130>)
 8003314:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003318:	f107 020c 	add.w	r2, r7, #12
 800331c:	2364      	movs	r3, #100	; 0x64
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2306      	movs	r3, #6
 8003322:	2189      	movs	r1, #137	; 0x89
 8003324:	f002 fafc 	bl	8005920 <HAL_I2C_Master_Receive>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <fnd_input_i2c_read_sht_temp_humi+0x8a>
    {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e04e      	b.n	80033d0 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }

    if (calculate_crc(buff, 2) == buff[2] && calculate_crc(&buff[3], 2) == buff[5])
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff7f 	bl	800323c <calculate_crc>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	429a      	cmp	r2, r3
 8003346:	d142      	bne.n	80033ce <fnd_input_i2c_read_sht_temp_humi+0x126>
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	3303      	adds	r3, #3
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff73 	bl	800323c <calculate_crc>
 8003356:	4603      	mov	r3, r0
 8003358:	461a      	mov	r2, r3
 800335a:	7c7b      	ldrb	r3, [r7, #17]
 800335c:	429a      	cmp	r2, r3
 800335e:	d136      	bne.n	80033ce <fnd_input_i2c_read_sht_temp_humi+0x126>
    {
        uint16_t temp_value = ((uint16_t)buff[0] << 8) | buff[1];
 8003360:	7b3b      	ldrb	r3, [r7, #12]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	b21a      	sxth	r2, r3
 8003366:	7b7b      	ldrb	r3, [r7, #13]
 8003368:	b21b      	sxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	b21b      	sxth	r3, r3
 800336e:	82fb      	strh	r3, [r7, #22]
        values[0] = -45 + 175 * ((float)temp_value / 65535);
 8003370:	8afb      	ldrh	r3, [r7, #22]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800337a:	eddf 6a18 	vldr	s13, [pc, #96]	; 80033dc <fnd_input_i2c_read_sht_temp_humi+0x134>
 800337e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003382:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80033e0 <fnd_input_i2c_read_sht_temp_humi+0x138>
 8003386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800338a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80033e4 <fnd_input_i2c_read_sht_temp_humi+0x13c>
 800338e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	edc3 7a00 	vstr	s15, [r3]

        uint16_t humi_value = ((uint16_t)buff[3] << 8) | buff[4];
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b21a      	sxth	r2, r3
 800339e:	7c3b      	ldrb	r3, [r7, #16]
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	4313      	orrs	r3, r2
 80033a4:	b21b      	sxth	r3, r3
 80033a6:	82bb      	strh	r3, [r7, #20]
        values[1] = 100 * ((float)humi_value / 65535);
 80033a8:	8abb      	ldrh	r3, [r7, #20]
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80033dc <fnd_input_i2c_read_sht_temp_humi+0x134>
 80033b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	3304      	adds	r3, #4
 80033be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80033e8 <fnd_input_i2c_read_sht_temp_humi+0x140>
 80033c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c6:	edc3 7a00 	vstr	s15, [r3]
        return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <fnd_input_i2c_read_sht_temp_humi+0x128>
    }
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	2000007c 	.word	0x2000007c
 80033dc:	477fff00 	.word	0x477fff00
 80033e0:	432f0000 	.word	0x432f0000
 80033e4:	42340000 	.word	0x42340000
 80033e8:	42c80000 	.word	0x42c80000

080033ec <fnd_input_tim_input_capture_init>:
#include "tim.h"

uint32_t spd_pulse[2];

void fnd_input_tim_input_capture_init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80033f0:	2100      	movs	r1, #0
 80033f2:	4804      	ldr	r0, [pc, #16]	; (8003404 <fnd_input_tim_input_capture_init+0x18>)
 80033f4:	f003 ffcc 	bl	8007390 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80033f8:	2104      	movs	r1, #4
 80033fa:	4802      	ldr	r0, [pc, #8]	; (8003404 <fnd_input_tim_input_capture_init+0x18>)
 80033fc:	f003 ffc8 	bl	8007390 <HAL_TIM_IC_Start_IT>
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20004d30 	.word	0x20004d30

08003408 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7f1b      	ldrb	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_TIM_IC_CaptureCallback+0x1c>
    {
        spd_pulse[0]++;
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3301      	adds	r3, #1
 800341e:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8003420:	6013      	str	r3, [r2, #0]
    }
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
    {
        spd_pulse[1]++;
    }
}
 8003422:	e008      	b.n	8003436 <HAL_TIM_IC_CaptureCallback+0x2e>
    else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7f1b      	ldrb	r3, [r3, #28]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d104      	bne.n	8003436 <HAL_TIM_IC_CaptureCallback+0x2e>
        spd_pulse[1]++;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	3301      	adds	r3, #1
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8003434:	6053      	str	r3, [r2, #4]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	20006aa8 	.word	0x20006aa8

08003448 <fnd_input_tim_input_read_speed>:

void fnd_input_tim_input_read_speed(uint16_t *values)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 2; i++)
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	e01a      	b.n	800348c <fnd_input_tim_input_read_speed+0x44>
    {
        values[i] = (int16_t)(spd_pulse[i] * 600);
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	4a11      	ldr	r2, [pc, #68]	; (80034a0 <fnd_input_tim_input_read_speed+0x58>)
 800345a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345e:	b299      	uxth	r1, r3
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	460a      	mov	r2, r1
 800346a:	4611      	mov	r1, r2
 800346c:	0089      	lsls	r1, r1, #2
 800346e:	440a      	add	r2, r1
 8003470:	4611      	mov	r1, r2
 8003472:	0109      	lsls	r1, r1, #4
 8003474:	1a8a      	subs	r2, r1, r2
 8003476:	00d2      	lsls	r2, r2, #3
 8003478:	b292      	uxth	r2, r2
 800347a:	801a      	strh	r2, [r3, #0]
        spd_pulse[i] = 0;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <fnd_input_tim_input_read_speed+0x58>)
 8003480:	2100      	movs	r1, #0
 8003482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 2; i++)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3301      	adds	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d9e1      	bls.n	8003456 <fnd_input_tim_input_read_speed+0xe>
    }
}
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	20006aa8 	.word	0x20006aa8

080034a4 <fnd_output_peripheral_init>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_peripheral_init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
    fnd_output_pwm_init();
 80034a8:	f000 f88e 	bl	80035c8 <fnd_output_pwm_init>
    sys_regs.holdings[200] = 500;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <fnd_output_peripheral_init+0x20>)
 80034ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034b2:	f8a3 2590 	strh.w	r2, [r3, #1424]	; 0x590
    sys_regs.holdings[200 + 1] = 500;
 80034b6:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <fnd_output_peripheral_init+0x20>)
 80034b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034bc:	f8a3 2592 	strh.w	r2, [r3, #1426]	; 0x592
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20005a58 	.word	0x20005a58

080034c8 <fnd_output_update_value>:

void fnd_output_update_value(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
    uint16_t pwm_out_value[3];
    uint8_t relay_out_value[6];
    uint16_t stepper_pos_value[4];

    pwm_out_value[0] = (uint16_t)sys_regs.inputs[INPUT_FAN_PWM_CTRL_START + 0];
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <fnd_output_update_value+0xa8>)
 80034d0:	f9b3 3390 	ldrsh.w	r3, [r3, #912]	; 0x390
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	823b      	strh	r3, [r7, #16]
    pwm_out_value[1] = (uint16_t)sys_regs.inputs[INPUT_FAN_PWM_CTRL_START + 1];
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <fnd_output_update_value+0xa8>)
 80034da:	f9b3 3392 	ldrsh.w	r3, [r3, #914]	; 0x392
 80034de:	b29b      	uxth	r3, r3
 80034e0:	827b      	strh	r3, [r7, #18]
    pwm_out_value[2] = (uint16_t)sys_regs.inputs[INPUT_VAL_PWM_CTRL_START + 0];
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <fnd_output_update_value+0xa8>)
 80034e4:	f9b3 3394 	ldrsh.w	r3, [r3, #916]	; 0x394
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	82bb      	strh	r3, [r7, #20]
    fnd_output_pwm_write_value(pwm_out_value);
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 f87d 	bl	80035f0 <fnd_output_pwm_write_value>

    for (uint8_t i = 0; i < 6; i++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
 80034fa:	e010      	b.n	800351e <fnd_output_update_value+0x56>
    {
        relay_out_value[i] = (uint8_t)sys_regs.inputs[INPUT_RLY_DO_CTRL_START + i];
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	33cb      	adds	r3, #203	; 0xcb
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <fnd_output_update_value+0xa8>)
 8003502:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003506:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f107 0118 	add.w	r1, r7, #24
 8003512:	440b      	add	r3, r1
 8003514:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (uint8_t i = 0; i < 6; i++)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	3301      	adds	r3, #1
 800351c:	75fb      	strb	r3, [r7, #23]
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b05      	cmp	r3, #5
 8003522:	d9eb      	bls.n	80034fc <fnd_output_update_value+0x34>
    }
    fnd_output_gpio_write_dout(relay_out_value);
 8003524:	f107 0308 	add.w	r3, r7, #8
 8003528:	4618      	mov	r0, r3
 800352a:	f000 f823 	bl	8003574 <fnd_output_gpio_write_dout>

    for (uint8_t i = 0; i < 4; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	75bb      	strb	r3, [r7, #22]
 8003532:	e011      	b.n	8003558 <fnd_output_update_value+0x90>
    {
        stepper_pos_value[i] = (uint16_t)sys_regs.inputs[INPUT_STEPPER_CTRL_START + i];
 8003534:	7dbb      	ldrb	r3, [r7, #22]
 8003536:	33d1      	adds	r3, #209	; 0xd1
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <fnd_output_update_value+0xa8>)
 800353a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800353e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8003542:	7dbb      	ldrb	r3, [r7, #22]
 8003544:	b292      	uxth	r2, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	f107 0118 	add.w	r1, r7, #24
 800354c:	440b      	add	r3, r1
 800354e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (uint8_t i = 0; i < 4; i++)
 8003552:	7dbb      	ldrb	r3, [r7, #22]
 8003554:	3301      	adds	r3, #1
 8003556:	75bb      	strb	r3, [r7, #22]
 8003558:	7dbb      	ldrb	r3, [r7, #22]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d9ea      	bls.n	8003534 <fnd_output_update_value+0x6c>
    }
    fnd_output_stepper_set_position(stepper_pos_value);
 800355e:	463b      	mov	r3, r7
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fb09 	bl	8003b78 <fnd_output_stepper_set_position>
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20005a58 	.word	0x20005a58

08003574 <fnd_output_gpio_write_dout>:

GPIO_TypeDef *relay_port[6] = {RLY1_GPIO_Port, RLY2_GPIO_Port, RLY3_GPIO_Port, RLY4_GPIO_Port, RLY5_GPIO_Port, RLY6_GPIO_Port};
uint16_t relay_pin[6] = {RLY1_Pin, RLY2_Pin, RLY3_Pin, RLY4_Pin, RLY5_Pin, RLY6_Pin};

void fnd_output_gpio_write_dout(uint8_t *values)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 6; i++)
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e016      	b.n	80035b0 <fnd_output_gpio_write_dout+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	4a0e      	ldr	r2, [pc, #56]	; (80035c0 <fnd_output_gpio_write_dout+0x4c>)
 8003586:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800358a:	7bfb      	ldrb	r3, [r7, #15]
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <fnd_output_gpio_write_dout+0x50>)
 800358e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	f001 ff5f 	bl	8005468 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++)
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	3301      	adds	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b05      	cmp	r3, #5
 80035b4:	d9e5      	bls.n	8003582 <fnd_output_gpio_write_dout+0xe>
    }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000084 	.word	0x20000084
 80035c4:	2000009c 	.word	0x2000009c

080035c8 <fnd_output_pwm_init>:
#include "fnd_output.h"
#include "tim.h"

void fnd_output_pwm_init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80035cc:	2100      	movs	r1, #0
 80035ce:	4806      	ldr	r0, [pc, #24]	; (80035e8 <fnd_output_pwm_init+0x20>)
 80035d0:	f003 fdbc 	bl	800714c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80035d4:	2104      	movs	r1, #4
 80035d6:	4804      	ldr	r0, [pc, #16]	; (80035e8 <fnd_output_pwm_init+0x20>)
 80035d8:	f003 fdb8 	bl	800714c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80035dc:	2104      	movs	r1, #4
 80035de:	4803      	ldr	r0, [pc, #12]	; (80035ec <fnd_output_pwm_init+0x24>)
 80035e0:	f003 fdb4 	bl	800714c <HAL_TIM_PWM_Start>
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20004d78 	.word	0x20004d78
 80035ec:	20004dc0 	.word	0x20004dc0

080035f0 <fnd_output_pwm_write_value>:

void fnd_output_pwm_write_value(uint16_t *values)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
    if (values[0] < 1000)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003600:	d214      	bcs.n	800362c <fnd_output_pwm_write_value+0x3c>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(values[0] / 1.2));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ff34 	bl	8000474 <__aeabi_i2d>
 800360c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003610:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <fnd_output_pwm_write_value+0xb4>)
 8003612:	f7fd f8c3 	bl	800079c <__aeabi_ddiv>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f7fd fa43 	bl	8000aa8 <__aeabi_d2uiz>
 8003622:	4603      	mov	r3, r0
 8003624:	b29a      	uxth	r2, r3
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <fnd_output_pwm_write_value+0xb8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (values[1] < 1000)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3302      	adds	r3, #2
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003636:	d215      	bcs.n	8003664 <fnd_output_pwm_write_value+0x74>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint16_t)(values[1] / 1.2));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3302      	adds	r3, #2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff18 	bl	8000474 <__aeabi_i2d>
 8003644:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <fnd_output_pwm_write_value+0xb4>)
 800364a:	f7fd f8a7 	bl	800079c <__aeabi_ddiv>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	f7fd fa27 	bl	8000aa8 <__aeabi_d2uiz>
 800365a:	4603      	mov	r3, r0
 800365c:	b29a      	uxth	r2, r3
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <fnd_output_pwm_write_value+0xb8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
    }

    if (values[2] < 1000)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800366e:	d215      	bcs.n	800369c <fnd_output_pwm_write_value+0xac>
    {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (uint16_t)(values[2] / 1.2));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fefc 	bl	8000474 <__aeabi_i2d>
 800367c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <fnd_output_pwm_write_value+0xb4>)
 8003682:	f7fd f88b 	bl	800079c <__aeabi_ddiv>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd fa0b 	bl	8000aa8 <__aeabi_d2uiz>
 8003692:	4603      	mov	r3, r0
 8003694:	b29a      	uxth	r2, r3
 8003696:	4b05      	ldr	r3, [pc, #20]	; (80036ac <fnd_output_pwm_write_value+0xbc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	3ff33333 	.word	0x3ff33333
 80036a8:	20004d78 	.word	0x20004d78
 80036ac:	20004dc0 	.word	0x20004dc0

080036b0 <fnd_output_stepper_tick>:
                            STEP_A5_Pin, STEP_A6_Pin, STEP_A7_Pin, STEP_A8_Pin,
                            STEP_B1_Pin, STEP_B2_Pin, STEP_B3_Pin, STEP_B4_Pin,
                            STEP_B5_Pin, STEP_B6_Pin, STEP_B7_Pin, STEP_B8_Pin};

static void fnd_output_stepper_tick(stepper_motor *motor)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
    if (motor->current_pos == motor->target_pos)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8c1a      	ldrh	r2, [r3, #32]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8bdb      	ldrh	r3, [r3, #30]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d109      	bne.n	80036d8 <fnd_output_stepper_tick+0x28>
    {
        motor->mode = STOP;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	761a      	strb	r2, [r3, #24]
        motor->up_excite_cnt = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	835a      	strh	r2, [r3, #26]
        motor->down_excite_cnt = 0;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	839a      	strh	r2, [r3, #28]
 80036d6:	e034      	b.n	8003742 <fnd_output_stepper_tick+0x92>
    }
    else if (motor->current_pos < motor->target_pos)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8c1a      	ldrh	r2, [r3, #32]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	8bdb      	ldrh	r3, [r3, #30]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d214      	bcs.n	800370e <fnd_output_stepper_tick+0x5e>
    {
        motor->down_excite_cnt = 0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	839a      	strh	r2, [r3, #28]
        if (motor->up_excite_cnt < EXCITE_TICKS)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8b5b      	ldrh	r3, [r3, #26]
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d809      	bhi.n	8003706 <fnd_output_stepper_tick+0x56>
        {
            motor->mode = UP_EXCITE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	761a      	strb	r2, [r3, #24]
            motor->up_excite_cnt = motor->up_excite_cnt + 1;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8b5b      	ldrh	r3, [r3, #26]
 80036fc:	3301      	adds	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	835a      	strh	r2, [r3, #26]
 8003704:	e01d      	b.n	8003742 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = UP;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	761a      	strb	r2, [r3, #24]
 800370c:	e019      	b.n	8003742 <fnd_output_stepper_tick+0x92>
        }
    }
    else if (motor->current_pos > motor->target_pos)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8c1a      	ldrh	r2, [r3, #32]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8bdb      	ldrh	r3, [r3, #30]
 8003716:	429a      	cmp	r2, r3
 8003718:	d913      	bls.n	8003742 <fnd_output_stepper_tick+0x92>
    {
        motor->up_excite_cnt = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	835a      	strh	r2, [r3, #26]
        if (motor->down_excite_cnt < EXCITE_TICKS)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8b9b      	ldrh	r3, [r3, #28]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d809      	bhi.n	800373c <fnd_output_stepper_tick+0x8c>
        {
            motor->mode = DOWN_EXCITE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	761a      	strb	r2, [r3, #24]
            motor->down_excite_cnt = motor->down_excite_cnt + 1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8b9b      	ldrh	r3, [r3, #28]
 8003732:	3301      	adds	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	839a      	strh	r2, [r3, #28]
 800373a:	e002      	b.n	8003742 <fnd_output_stepper_tick+0x92>
        }
        else
        {
            motor->mode = DOWN;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	761a      	strb	r2, [r3, #24]
        }
    }

    if (motor->mode == STOP)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	7e1b      	ldrb	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <fnd_output_stepper_tick+0xc8>
    {
        for (uint8_t i = 0; i < 4; i++)
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e00f      	b.n	8003770 <fnd_output_stepper_tick+0xc0>
        {
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003750:	7bfa      	ldrb	r2, [r7, #15]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3208      	adds	r2, #8
 800375e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003762:	2200      	movs	r2, #0
 8003764:	4619      	mov	r1, r3
 8003766:	f001 fe7f 	bl	8005468 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 800376a:	7bfb      	ldrb	r3, [r7, #15]
 800376c:	3301      	adds	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d9ec      	bls.n	8003750 <fnd_output_stepper_tick+0xa0>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
    }
}
 8003776:	e179      	b.n	8003a6c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP_EXCITE || motor->mode == DOWN_EXCITE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7e1b      	ldrb	r3, [r3, #24]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d003      	beq.n	8003788 <fnd_output_stepper_tick+0xd8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7e1b      	ldrb	r3, [r3, #24]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d15c      	bne.n	8003842 <fnd_output_stepper_tick+0x192>
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6818      	ldr	r0, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8a19      	ldrh	r1, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <fnd_output_stepper_tick+0xf8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800379c:	2b01      	cmp	r3, #1
 800379e:	d003      	beq.n	80037a8 <fnd_output_stepper_tick+0xf8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	d101      	bne.n	80037ac <fnd_output_stepper_tick+0xfc>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <fnd_output_stepper_tick+0xfe>
 80037ac:	2300      	movs	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	f001 fe59 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6858      	ldr	r0, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8a59      	ldrh	r1, [r3, #18]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d007      	beq.n	80037d6 <fnd_output_stepper_tick+0x126>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d003      	beq.n	80037d6 <fnd_output_stepper_tick+0x126>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d101      	bne.n	80037da <fnd_output_stepper_tick+0x12a>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <fnd_output_stepper_tick+0x12c>
 80037da:	2300      	movs	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	f001 fe42 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6898      	ldr	r0, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8a99      	ldrh	r1, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d007      	beq.n	8003804 <fnd_output_stepper_tick+0x154>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d003      	beq.n	8003804 <fnd_output_stepper_tick+0x154>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003800:	2b05      	cmp	r3, #5
 8003802:	d101      	bne.n	8003808 <fnd_output_stepper_tick+0x158>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <fnd_output_stepper_tick+0x15a>
 8003808:	2300      	movs	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	f001 fe2b 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68d8      	ldr	r0, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8ad9      	ldrh	r1, [r3, #22]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800381e:	2b05      	cmp	r3, #5
 8003820:	d007      	beq.n	8003832 <fnd_output_stepper_tick+0x182>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003826:	2b06      	cmp	r3, #6
 8003828:	d003      	beq.n	8003832 <fnd_output_stepper_tick+0x182>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800382e:	2b07      	cmp	r3, #7
 8003830:	d101      	bne.n	8003836 <fnd_output_stepper_tick+0x186>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <fnd_output_stepper_tick+0x188>
 8003836:	2300      	movs	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	f001 fe14 	bl	8005468 <HAL_GPIO_WritePin>
}
 8003840:	e114      	b.n	8003a6c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == UP)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7e1b      	ldrb	r3, [r3, #24]
 8003846:	2b02      	cmp	r3, #2
 8003848:	f040 8086 	bne.w	8003958 <fnd_output_stepper_tick+0x2a8>
        for (uint8_t i = 0; i < 4; i++)
 800384c:	2300      	movs	r3, #0
 800384e:	73bb      	strb	r3, [r7, #14]
 8003850:	e00f      	b.n	8003872 <fnd_output_stepper_tick+0x1c2>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003852:	7bba      	ldrb	r2, [r7, #14]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800385a:	7bba      	ldrb	r2, [r7, #14]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003864:	2200      	movs	r2, #0
 8003866:	4619      	mov	r1, r3
 8003868:	f001 fdfe 	bl	8005468 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	3301      	adds	r3, #1
 8003870:	73bb      	strb	r3, [r7, #14]
 8003872:	7bbb      	ldrb	r3, [r7, #14]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d9ec      	bls.n	8003852 <fnd_output_stepper_tick+0x1a2>
        motor->current_pos = motor->current_pos + 1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8c1b      	ldrh	r3, [r3, #32]
 800387c:	3301      	adds	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 1) % 8;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003888:	3301      	adds	r3, #1
 800388a:	425a      	negs	r2, r3
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	f002 0207 	and.w	r2, r2, #7
 8003894:	bf58      	it	pl
 8003896:	4253      	negpl	r3, r2
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8a19      	ldrh	r1, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <fnd_output_stepper_tick+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d003      	beq.n	80038be <fnd_output_stepper_tick+0x20e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038ba:	2b07      	cmp	r3, #7
 80038bc:	d101      	bne.n	80038c2 <fnd_output_stepper_tick+0x212>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <fnd_output_stepper_tick+0x214>
 80038c2:	2300      	movs	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	f001 fdce 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6858      	ldr	r0, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8a59      	ldrh	r1, [r3, #18]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d007      	beq.n	80038ec <fnd_output_stepper_tick+0x23c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d003      	beq.n	80038ec <fnd_output_stepper_tick+0x23c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d101      	bne.n	80038f0 <fnd_output_stepper_tick+0x240>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <fnd_output_stepper_tick+0x242>
 80038f0:	2300      	movs	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	f001 fdb7 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6898      	ldr	r0, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8a99      	ldrh	r1, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003906:	2b03      	cmp	r3, #3
 8003908:	d007      	beq.n	800391a <fnd_output_stepper_tick+0x26a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800390e:	2b04      	cmp	r3, #4
 8003910:	d003      	beq.n	800391a <fnd_output_stepper_tick+0x26a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003916:	2b05      	cmp	r3, #5
 8003918:	d101      	bne.n	800391e <fnd_output_stepper_tick+0x26e>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <fnd_output_stepper_tick+0x270>
 800391e:	2300      	movs	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	f001 fda0 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68d8      	ldr	r0, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8ad9      	ldrh	r1, [r3, #22]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003934:	2b05      	cmp	r3, #5
 8003936:	d007      	beq.n	8003948 <fnd_output_stepper_tick+0x298>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800393c:	2b06      	cmp	r3, #6
 800393e:	d003      	beq.n	8003948 <fnd_output_stepper_tick+0x298>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003944:	2b07      	cmp	r3, #7
 8003946:	d101      	bne.n	800394c <fnd_output_stepper_tick+0x29c>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <fnd_output_stepper_tick+0x29e>
 800394c:	2300      	movs	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	f001 fd89 	bl	8005468 <HAL_GPIO_WritePin>
}
 8003956:	e089      	b.n	8003a6c <fnd_output_stepper_tick+0x3bc>
    else if (motor->mode == DOWN)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7e1b      	ldrb	r3, [r3, #24]
 800395c:	2b04      	cmp	r3, #4
 800395e:	f040 8085 	bne.w	8003a6c <fnd_output_stepper_tick+0x3bc>
        for (uint8_t i = 0; i < 4; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	737b      	strb	r3, [r7, #13]
 8003966:	e00f      	b.n	8003988 <fnd_output_stepper_tick+0x2d8>
            HAL_GPIO_WritePin(motor->gpio_port[i], motor->gpio_pin[i], GPIO_PIN_RESET);
 8003968:	7b7a      	ldrb	r2, [r7, #13]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003970:	7b7a      	ldrb	r2, [r7, #13]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800397a:	2200      	movs	r2, #0
 800397c:	4619      	mov	r1, r3
 800397e:	f001 fd73 	bl	8005468 <HAL_GPIO_WritePin>
        for (uint8_t i = 0; i < 4; i++)
 8003982:	7b7b      	ldrb	r3, [r7, #13]
 8003984:	3301      	adds	r3, #1
 8003986:	737b      	strb	r3, [r7, #13]
 8003988:	7b7b      	ldrb	r3, [r7, #13]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d9ec      	bls.n	8003968 <fnd_output_stepper_tick+0x2b8>
        motor->current_pos = motor->current_pos - 1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8c1b      	ldrh	r3, [r3, #32]
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	841a      	strh	r2, [r3, #32]
        motor->phase = (motor->phase + 7) % 8;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800399e:	3307      	adds	r3, #7
 80039a0:	425a      	negs	r2, r3
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	f002 0207 	and.w	r2, r2, #7
 80039aa:	bf58      	it	pl
 80039ac:	4253      	negpl	r3, r2
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	845a      	strh	r2, [r3, #34]	; 0x22
        HAL_GPIO_WritePin(motor->gpio_port[0], motor->gpio_pin[0], (motor->phase == 0 || motor->phase == 1 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8a19      	ldrh	r1, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <fnd_output_stepper_tick+0x324>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d003      	beq.n	80039d4 <fnd_output_stepper_tick+0x324>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039d0:	2b07      	cmp	r3, #7
 80039d2:	d101      	bne.n	80039d8 <fnd_output_stepper_tick+0x328>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <fnd_output_stepper_tick+0x32a>
 80039d8:	2300      	movs	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	f001 fd43 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[1], motor->gpio_pin[1], (motor->phase == 1 || motor->phase == 2 || motor->phase == 3) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6858      	ldr	r0, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8a59      	ldrh	r1, [r3, #18]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d007      	beq.n	8003a02 <fnd_output_stepper_tick+0x352>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d003      	beq.n	8003a02 <fnd_output_stepper_tick+0x352>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d101      	bne.n	8003a06 <fnd_output_stepper_tick+0x356>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <fnd_output_stepper_tick+0x358>
 8003a06:	2300      	movs	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f001 fd2c 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[2], motor->gpio_pin[2], (motor->phase == 3 || motor->phase == 4 || motor->phase == 5) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6898      	ldr	r0, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8a99      	ldrh	r1, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d007      	beq.n	8003a30 <fnd_output_stepper_tick+0x380>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d003      	beq.n	8003a30 <fnd_output_stepper_tick+0x380>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d101      	bne.n	8003a34 <fnd_output_stepper_tick+0x384>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <fnd_output_stepper_tick+0x386>
 8003a34:	2300      	movs	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f001 fd15 	bl	8005468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(motor->gpio_port[3], motor->gpio_pin[3], (motor->phase == 5 || motor->phase == 6 || motor->phase == 7) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68d8      	ldr	r0, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8ad9      	ldrh	r1, [r3, #22]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d007      	beq.n	8003a5e <fnd_output_stepper_tick+0x3ae>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d003      	beq.n	8003a5e <fnd_output_stepper_tick+0x3ae>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a5a:	2b07      	cmp	r3, #7
 8003a5c:	d101      	bne.n	8003a62 <fnd_output_stepper_tick+0x3b2>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <fnd_output_stepper_tick+0x3b4>
 8003a62:	2300      	movs	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	f001 fcfe 	bl	8005468 <HAL_GPIO_WritePin>
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <fnd_output_stepper_init>:

void fnd_output_stepper_init(void)
{
 8003a74:	b490      	push	{r4, r7}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]
 8003a7e:	e06b      	b.n	8003b58 <fnd_output_stepper_init+0xe4>
    {
        for (uint8_t j = 0; j < 4; j++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	71bb      	strb	r3, [r7, #6]
 8003a84:	e025      	b.n	8003ad2 <fnd_output_stepper_init+0x5e>
        {
            motor[i].gpio_port[j] = stepper_port[i * 4 + j];
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	009a      	lsls	r2, r3, #2
 8003a8a:	79bb      	ldrb	r3, [r7, #6]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	79fa      	ldrb	r2, [r7, #7]
 8003a90:	79b8      	ldrb	r0, [r7, #6]
 8003a92:	4936      	ldr	r1, [pc, #216]	; (8003b6c <fnd_output_stepper_init+0xf8>)
 8003a94:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003a98:	4c35      	ldr	r4, [pc, #212]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	4403      	add	r3, r0
 8003aa2:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
            motor[i].gpio_pin[j] = stepper_pin[i * 4 + j];
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	009a      	lsls	r2, r3, #2
 8003aaa:	79bb      	ldrb	r3, [r7, #6]
 8003aac:	4413      	add	r3, r2
 8003aae:	79fa      	ldrb	r2, [r7, #7]
 8003ab0:	79b9      	ldrb	r1, [r7, #6]
 8003ab2:	4830      	ldr	r0, [pc, #192]	; (8003b74 <fnd_output_stepper_init+0x100>)
 8003ab4:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
 8003ab8:	482d      	ldr	r0, [pc, #180]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for (uint8_t j = 0; j < 4; j++)
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	71bb      	strb	r3, [r7, #6]
 8003ad2:	79bb      	ldrb	r3, [r7, #6]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d9d6      	bls.n	8003a86 <fnd_output_stepper_init+0x12>
        }
        motor[i].current_pos = 1200;
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	4925      	ldr	r1, [pc, #148]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	3320      	adds	r3, #32
 8003ae8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8003aec:	801a      	strh	r2, [r3, #0]
        motor[i].down_excite_cnt = 0;
 8003aee:	79fa      	ldrb	r2, [r7, #7]
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	331c      	adds	r3, #28
 8003afe:	2200      	movs	r2, #0
 8003b00:	801a      	strh	r2, [r3, #0]
        motor[i].mode = STOP;
 8003b02:	79fa      	ldrb	r2, [r7, #7]
 8003b04:	491a      	ldr	r1, [pc, #104]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3318      	adds	r3, #24
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
        motor[i].phase = 0;
 8003b16:	79fa      	ldrb	r2, [r7, #7]
 8003b18:	4915      	ldr	r1, [pc, #84]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	3322      	adds	r3, #34	; 0x22
 8003b26:	2200      	movs	r2, #0
 8003b28:	801a      	strh	r2, [r3, #0]
        motor[i].target_pos = 0;
 8003b2a:	79fa      	ldrb	r2, [r7, #7]
 8003b2c:	4910      	ldr	r1, [pc, #64]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	331e      	adds	r3, #30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	801a      	strh	r2, [r3, #0]
        motor[i].up_excite_cnt = 0;
 8003b3e:	79fa      	ldrb	r2, [r7, #7]
 8003b40:	490b      	ldr	r1, [pc, #44]	; (8003b70 <fnd_output_stepper_init+0xfc>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	331a      	adds	r3, #26
 8003b4e:	2200      	movs	r2, #0
 8003b50:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	3301      	adds	r3, #1
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d990      	bls.n	8003a80 <fnd_output_stepper_init+0xc>
    }
}
 8003b5e:	bf00      	nop
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc90      	pop	{r4, r7}
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200000a8 	.word	0x200000a8
 8003b70:	20006ab0 	.word	0x20006ab0
 8003b74:	200000e8 	.word	0x200000e8

08003b78 <fnd_output_stepper_set_position>:

void fnd_output_stepper_set_position(uint16_t *values)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
    motor[0].target_pos = values[0];
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	881a      	ldrh	r2, [r3, #0]
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <fnd_output_stepper_set_position+0x3c>)
 8003b86:	83da      	strh	r2, [r3, #30]
    motor[1].target_pos = values[1];
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	885a      	ldrh	r2, [r3, #2]
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <fnd_output_stepper_set_position+0x3c>)
 8003b8e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    motor[2].target_pos = values[2];
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	889a      	ldrh	r2, [r3, #4]
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <fnd_output_stepper_set_position+0x3c>)
 8003b98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    motor[3].target_pos = values[3];
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	88da      	ldrh	r2, [r3, #6]
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <fnd_output_stepper_set_position+0x3c>)
 8003ba2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20006ab0 	.word	0x20006ab0

08003bb8 <fnd_output_stepper_10ms_tick>:

void fnd_output_stepper_10ms_tick(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
    fnd_output_stepper_tick(&motor[0]);
 8003bbc:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <fnd_output_stepper_10ms_tick+0x20>)
 8003bbe:	f7ff fd77 	bl	80036b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[1]);
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <fnd_output_stepper_10ms_tick+0x24>)
 8003bc4:	f7ff fd74 	bl	80036b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[2]);
 8003bc8:	4805      	ldr	r0, [pc, #20]	; (8003be0 <fnd_output_stepper_10ms_tick+0x28>)
 8003bca:	f7ff fd71 	bl	80036b0 <fnd_output_stepper_tick>
    fnd_output_stepper_tick(&motor[3]);
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <fnd_output_stepper_10ms_tick+0x2c>)
 8003bd0:	f7ff fd6e 	bl	80036b0 <fnd_output_stepper_tick>
}
 8003bd4:	bf00      	nop
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20006ab0 	.word	0x20006ab0
 8003bdc:	20006ad4 	.word	0x20006ad4
 8003be0:	20006af8 	.word	0x20006af8
 8003be4:	20006b1c 	.word	0x20006b1c

08003be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bec:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <HAL_Init+0x40>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <HAL_Init+0x40>)
 8003bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <HAL_Init+0x40>)
 8003bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_Init+0x40>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a07      	ldr	r2, [pc, #28]	; (8003c28 <HAL_Init+0x40>)
 8003c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c10:	2003      	movs	r0, #3
 8003c12:	f000 fe3e 	bl	8004892 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c16:	200f      	movs	r0, #15
 8003c18:	f7fd ff5a 	bl	8001ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c1c:	f7fd ff2c 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023c00 	.word	0x40023c00

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	2000010c 	.word	0x2000010c
 8003c50:	20006b40 	.word	0x20006b40

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20006b40 	.word	0x20006b40

08003c6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e033      	b.n	8003cea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fd f9f2 	bl	8001074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d118      	bne.n	8003cdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003cb2:	f023 0302 	bic.w	r3, r3, #2
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbb2 	bl	8004428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0201 	orr.w	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003cda:	e001      	b.n	8003ce0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d049      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0xd6>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d046      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d105      	bne.n	8003d52 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d12b      	bne.n	8003db8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d127      	bne.n	8003db8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d119      	bne.n	8003db8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0220 	bic.w	r2, r2, #32
 8003d92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f9eb 	bl	8004194 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0212 	mvn.w	r2, #18
 8003dc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d057      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x1b8>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d054      	beq.n	8003eaa <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d139      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d12b      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d124      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d119      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e74:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	f043 0201 	orr.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fc42 	bl	8004724 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 020c 	mvn.w	r2, #12
 8003ea8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x21a>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d014      	beq.n	8003f0c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10d      	bne.n	8003f0c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f95d 	bl	80041bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0201 	mvn.w	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	bf0c      	ite	eq
 8003f1a:	2301      	moveq	r3, #1
 8003f1c:	2300      	movne	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f30:	bf0c      	ite	eq
 8003f32:	2301      	moveq	r3, #1
 8003f34:	2300      	movne	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d015      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x27a>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f043 0202 	orr.w	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0220 	mvn.w	r2, #32
 8003f5a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f937 	bl	80041d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0220 	mvn.w	r2, #32
 8003f6a:	601a      	str	r2, [r3, #0]
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADC_Start_DMA+0x1e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0e9      	b.n	8004166 <HAL_ADC_Start_DMA+0x1f2>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d018      	beq.n	8003fda <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fb8:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_ADC_Start_DMA+0x1fc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6d      	ldr	r2, [pc, #436]	; (8004174 <HAL_ADC_Start_DMA+0x200>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0c9a      	lsrs	r2, r3, #18
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4413      	add	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003fcc:	e002      	b.n	8003fd4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f9      	bne.n	8003fce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe8:	d107      	bne.n	8003ffa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ff8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 80a1 	bne.w	800414c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d007      	beq.n	800403c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004034:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004048:	d106      	bne.n	8004058 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f023 0206 	bic.w	r2, r3, #6
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
 8004056:	e002      	b.n	800405e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004066:	4b44      	ldr	r3, [pc, #272]	; (8004178 <HAL_ADC_Start_DMA+0x204>)
 8004068:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4a43      	ldr	r2, [pc, #268]	; (800417c <HAL_ADC_Start_DMA+0x208>)
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	4a42      	ldr	r2, [pc, #264]	; (8004180 <HAL_ADC_Start_DMA+0x20c>)
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <HAL_ADC_Start_DMA+0x210>)
 8004080:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800408a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800409a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	334c      	adds	r3, #76	; 0x4c
 80040b6:	4619      	mov	r1, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f000 fccc 	bl	8004a58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d12a      	bne.n	8004122 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_ADC_Start_DMA+0x214>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d015      	beq.n	8004102 <HAL_ADC_Start_DMA+0x18e>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2c      	ldr	r2, [pc, #176]	; (800418c <HAL_ADC_Start_DMA+0x218>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d105      	bne.n	80040ec <HAL_ADC_Start_DMA+0x178>
 80040e0:	4b25      	ldr	r3, [pc, #148]	; (8004178 <HAL_ADC_Start_DMA+0x204>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <HAL_ADC_Start_DMA+0x21c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d136      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <HAL_ADC_Start_DMA+0x204>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d130      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d129      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	e020      	b.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_ADC_Start_DMA+0x214>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d11b      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d114      	bne.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	e00b      	b.n	8004164 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f043 0210 	orr.w	r2, r3, #16
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f043 0201 	orr.w	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000
 8004174:	431bde83 	.word	0x431bde83
 8004178:	40012300 	.word	0x40012300
 800417c:	08004621 	.word	0x08004621
 8004180:	080046db 	.word	0x080046db
 8004184:	080046f7 	.word	0x080046f7
 8004188:	40012000 	.word	0x40012000
 800418c:	40012100 	.word	0x40012100
 8004190:	40012200 	.word	0x40012200

08004194 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1c>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e105      	b.n	800440c <HAL_ADC_ConfigChannel+0x228>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b09      	cmp	r3, #9
 800420e:	d925      	bls.n	800425c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68d9      	ldr	r1, [r3, #12]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	4613      	mov	r3, r2
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	4413      	add	r3, r2
 8004224:	3b1e      	subs	r3, #30
 8004226:	2207      	movs	r2, #7
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43da      	mvns	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	400a      	ands	r2, r1
 8004234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	4618      	mov	r0, r3
 8004248:	4603      	mov	r3, r0
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4403      	add	r3, r0
 800424e:	3b1e      	subs	r3, #30
 8004250:	409a      	lsls	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	60da      	str	r2, [r3, #12]
 800425a:	e022      	b.n	80042a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6919      	ldr	r1, [r3, #16]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	2207      	movs	r2, #7
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43da      	mvns	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	400a      	ands	r2, r1
 800427e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6919      	ldr	r1, [r3, #16]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	4603      	mov	r3, r0
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4403      	add	r3, r0
 8004298:	409a      	lsls	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b06      	cmp	r3, #6
 80042a8:	d824      	bhi.n	80042f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3b05      	subs	r3, #5
 80042bc:	221f      	movs	r2, #31
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	400a      	ands	r2, r1
 80042ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b05      	subs	r3, #5
 80042e6:	fa00 f203 	lsl.w	r2, r0, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
 80042f2:	e04c      	b.n	800438e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b0c      	cmp	r3, #12
 80042fa:	d824      	bhi.n	8004346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	3b23      	subs	r3, #35	; 0x23
 800430e:	221f      	movs	r2, #31
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	43da      	mvns	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	400a      	ands	r2, r1
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	4618      	mov	r0, r3
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	3b23      	subs	r3, #35	; 0x23
 8004338:	fa00 f203 	lsl.w	r2, r0, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
 8004344:	e023      	b.n	800438e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	3b41      	subs	r3, #65	; 0x41
 8004358:	221f      	movs	r2, #31
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	400a      	ands	r2, r1
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	3b41      	subs	r3, #65	; 0x41
 8004382:	fa00 f203 	lsl.w	r2, r0, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <HAL_ADC_ConfigChannel+0x234>)
 8004390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_ADC_ConfigChannel+0x238>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1cc>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b12      	cmp	r3, #18
 80043a2:	d105      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <HAL_ADC_ConfigChannel+0x238>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d123      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d003      	beq.n	80043ca <HAL_ADC_ConfigChannel+0x1e6>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b11      	cmp	r3, #17
 80043c8:	d11b      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d111      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_ADC_ConfigChannel+0x23c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_ADC_ConfigChannel+0x240>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	0c9a      	lsrs	r2, r3, #18
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043f4:	e002      	b.n	80043fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f9      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40012300 	.word	0x40012300
 800441c:	40012000 	.word	0x40012000
 8004420:	20000000 	.word	0x20000000
 8004424:	431bde83 	.word	0x431bde83

08004428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004430:	4b79      	ldr	r3, [pc, #484]	; (8004618 <ADC_Init+0x1f0>)
 8004432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	021a      	lsls	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	4a58      	ldr	r2, [pc, #352]	; (800461c <ADC_Init+0x1f4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e00f      	b.n	8004526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0202 	bic.w	r2, r2, #2
 8004534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e1b      	ldrb	r3, [r3, #24]
 8004540:	005a      	lsls	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01b      	beq.n	800458c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	3b01      	subs	r3, #1
 8004580:	035a      	lsls	r2, r3, #13
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	e007      	b.n	800459c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	051a      	lsls	r2, r3, #20
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6899      	ldr	r1, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045de:	025a      	lsls	r2, r3, #9
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	029a      	lsls	r2, r3, #10
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40012300 	.word	0x40012300
 800461c:	0f000001 	.word	0x0f000001

08004620 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004636:	2b00      	cmp	r3, #0
 8004638:	d13c      	bne.n	80046b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d12b      	bne.n	80046ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d127      	bne.n	80046ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0220 	bic.w	r2, r2, #32
 8004686:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d105      	bne.n	80046ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff fd71 	bl	8004194 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046b2:	e00e      	b.n	80046d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fd85 	bl	80041d0 <HAL_ADC_ErrorCallback>
}
 80046c6:	e004      	b.n	80046d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7ff fd5d 	bl	80041a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff fd5a 	bl	80041d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <__NVIC_SetPriorityGrouping+0x44>)
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004754:	4013      	ands	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476a:	4a04      	ldr	r2, [pc, #16]	; (800477c <__NVIC_SetPriorityGrouping+0x44>)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	60d3      	str	r3, [r2, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <__NVIC_GetPriorityGrouping+0x18>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 0307 	and.w	r3, r3, #7
}
 800478e:	4618      	mov	r0, r3
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00

0800479c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	db0b      	blt.n	80047c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ae:	79fb      	ldrb	r3, [r7, #7]
 80047b0:	f003 021f 	and.w	r2, r3, #31
 80047b4:	4907      	ldr	r1, [pc, #28]	; (80047d4 <__NVIC_EnableIRQ+0x38>)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	2001      	movs	r0, #1
 80047be:	fa00 f202 	lsl.w	r2, r0, r2
 80047c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	e000e100 	.word	0xe000e100

080047d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	6039      	str	r1, [r7, #0]
 80047e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	db0a      	blt.n	8004802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	490c      	ldr	r1, [pc, #48]	; (8004824 <__NVIC_SetPriority+0x4c>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	0112      	lsls	r2, r2, #4
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	440b      	add	r3, r1
 80047fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004800:	e00a      	b.n	8004818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4908      	ldr	r1, [pc, #32]	; (8004828 <__NVIC_SetPriority+0x50>)
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3b04      	subs	r3, #4
 8004810:	0112      	lsls	r2, r2, #4
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	440b      	add	r3, r1
 8004816:	761a      	strb	r2, [r3, #24]
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000e100 	.word	0xe000e100
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f1c3 0307 	rsb	r3, r3, #7
 8004846:	2b04      	cmp	r3, #4
 8004848:	bf28      	it	cs
 800484a:	2304      	movcs	r3, #4
 800484c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3304      	adds	r3, #4
 8004852:	2b06      	cmp	r3, #6
 8004854:	d902      	bls.n	800485c <NVIC_EncodePriority+0x30>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3b03      	subs	r3, #3
 800485a:	e000      	b.n	800485e <NVIC_EncodePriority+0x32>
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43da      	mvns	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	401a      	ands	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004874:	f04f 31ff 	mov.w	r1, #4294967295
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	43d9      	mvns	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004884:	4313      	orrs	r3, r2
         );
}
 8004886:	4618      	mov	r0, r3
 8004888:	3724      	adds	r7, #36	; 0x24
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ff4c 	bl	8004738 <__NVIC_SetPriorityGrouping>
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ba:	f7ff ff61 	bl	8004780 <__NVIC_GetPriorityGrouping>
 80048be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	6978      	ldr	r0, [r7, #20]
 80048c6:	f7ff ffb1 	bl	800482c <NVIC_EncodePriority>
 80048ca:	4602      	mov	r2, r0
 80048cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048d0:	4611      	mov	r1, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff80 	bl	80047d8 <__NVIC_SetPriority>
}
 80048d8:	bf00      	nop
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ff54 	bl	800479c <__NVIC_EnableIRQ>
}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004908:	f7ff f9a4 	bl	8003c54 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e099      	b.n	8004a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004938:	e00f      	b.n	800495a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800493a:	f7ff f98b 	bl	8003c54 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b05      	cmp	r3, #5
 8004946:	d908      	bls.n	800495a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2203      	movs	r2, #3
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e078      	b.n	8004a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e8      	bne.n	800493a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <HAL_DMA_Init+0x158>)
 8004974:	4013      	ands	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d107      	bne.n	80049c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	4313      	orrs	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d117      	bne.n	8004a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fb01 	bl	8005008 <DMA_CheckFifoParam>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2240      	movs	r2, #64	; 0x40
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e016      	b.n	8004a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fab8 	bl	8004f9c <DMA_CalcBaseAndBitshift>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	409a      	lsls	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	f010803f 	.word	0xf010803f

08004a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_DMA_Start_IT+0x26>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e040      	b.n	8004b00 <HAL_DMA_Start_IT+0xa8>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d12f      	bne.n	8004af2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa4a 	bl	8004f40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	223f      	movs	r2, #63	; 0x3f
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0216 	orr.w	r2, r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0208 	orr.w	r2, r2, #8
 8004ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	e005      	b.n	8004afe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
 8004afc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b16:	f7ff f89d 	bl	8003c54 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d008      	beq.n	8004b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e052      	b.n	8004be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0216 	bic.w	r2, r2, #22
 8004b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_DMA_Abort+0x62>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0208 	bic.w	r2, r2, #8
 8004b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b8a:	e013      	b.n	8004bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b8c:	f7ff f862 	bl	8003c54 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d90c      	bls.n	8004bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e015      	b.n	8004be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e4      	bne.n	8004b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	223f      	movs	r2, #63	; 0x3f
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d004      	beq.n	8004c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e00c      	b.n	8004c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2205      	movs	r2, #5
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c38:	4b92      	ldr	r3, [pc, #584]	; (8004e84 <HAL_DMA_IRQHandler+0x258>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a92      	ldr	r2, [pc, #584]	; (8004e88 <HAL_DMA_IRQHandler+0x25c>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c56:	2208      	movs	r2, #8
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d01a      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d013      	beq.n	8004c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c84:	2208      	movs	r2, #8
 8004c86:	409a      	lsls	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	f043 0201 	orr.w	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d012      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc6:	f043 0202 	orr.w	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf0:	2204      	movs	r2, #4
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f043 0204 	orr.w	r2, r3, #4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d08:	2210      	movs	r2, #16
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d043      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03c      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d26:	2210      	movs	r2, #16
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d024      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
 8004d5a:	e01f      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	4798      	blx	r3
 8004d6c:	e016      	b.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0208 	bic.w	r2, r2, #8
 8004d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2220      	movs	r2, #32
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 808e 	beq.w	8004eca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8086 	beq.w	8004eca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d136      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0216 	bic.w	r2, r2, #22
 8004de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695a      	ldr	r2, [r3, #20]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d103      	bne.n	8004e06 <HAL_DMA_IRQHandler+0x1da>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0208 	bic.w	r2, r2, #8
 8004e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e1a:	223f      	movs	r2, #63	; 0x3f
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07d      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
        }
        return;
 8004e42:	e078      	b.n	8004f36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d108      	bne.n	8004e72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d030      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	e02b      	b.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
 8004e82:	e022      	b.n	8004eca <HAL_DMA_IRQHandler+0x29e>
 8004e84:	20000000 	.word	0x20000000
 8004e88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10f      	bne.n	8004eba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0210 	bic.w	r2, r2, #16
 8004ea8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d032      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d022      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2205      	movs	r2, #5
 8004ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d307      	bcc.n	8004f12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f2      	bne.n	8004ef6 <HAL_DMA_IRQHandler+0x2ca>
 8004f10:	e000      	b.n	8004f14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f12:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	4798      	blx	r3
 8004f34:	e000      	b.n	8004f38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f36:	bf00      	nop
    }
  }
}
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop

08004f40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d108      	bne.n	8004f80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f7e:	e007      	b.n	8004f90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	3b10      	subs	r3, #16
 8004fac:	4a14      	ldr	r2, [pc, #80]	; (8005000 <DMA_CalcBaseAndBitshift+0x64>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fb6:	4a13      	ldr	r2, [pc, #76]	; (8005004 <DMA_CalcBaseAndBitshift+0x68>)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d909      	bls.n	8004fde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	659a      	str	r2, [r3, #88]	; 0x58
 8004fdc:	e007      	b.n	8004fee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fe6:	f023 0303 	bic.w	r3, r3, #3
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	aaaaaaab 	.word	0xaaaaaaab
 8005004:	0800f180 	.word	0x0800f180

08005008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11f      	bne.n	8005062 <DMA_CheckFifoParam+0x5a>
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b03      	cmp	r3, #3
 8005026:	d856      	bhi.n	80050d6 <DMA_CheckFifoParam+0xce>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <DMA_CheckFifoParam+0x28>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005041 	.word	0x08005041
 8005034:	08005053 	.word	0x08005053
 8005038:	08005041 	.word	0x08005041
 800503c:	080050d7 	.word	0x080050d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d046      	beq.n	80050da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005050:	e043      	b.n	80050da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800505a:	d140      	bne.n	80050de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005060:	e03d      	b.n	80050de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d121      	bne.n	80050b0 <DMA_CheckFifoParam+0xa8>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d837      	bhi.n	80050e2 <DMA_CheckFifoParam+0xda>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <DMA_CheckFifoParam+0x70>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005089 	.word	0x08005089
 800507c:	0800508f 	.word	0x0800508f
 8005080:	08005089 	.word	0x08005089
 8005084:	080050a1 	.word	0x080050a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e030      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d025      	beq.n	80050e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509e:	e022      	b.n	80050e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050a8:	d11f      	bne.n	80050ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ae:	e01c      	b.n	80050ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d903      	bls.n	80050be <DMA_CheckFifoParam+0xb6>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d003      	beq.n	80050c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050bc:	e018      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      break;
 80050c2:	e015      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e00b      	b.n	80050ee <DMA_CheckFifoParam+0xe6>
      break;
 80050d6:	bf00      	nop
 80050d8:	e00a      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050da:	bf00      	nop
 80050dc:	e008      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050de:	bf00      	nop
 80050e0:	e006      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050e2:	bf00      	nop
 80050e4:	e004      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
    }
  } 
  
  return status; 
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e16b      	b.n	80053f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 815a 	bne.w	80053ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d005      	beq.n	8005152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514e:	2b02      	cmp	r3, #2
 8005150:	d130      	bne.n	80051b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005188:	2201      	movs	r2, #1
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 0201 	and.w	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d017      	beq.n	80051f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d123      	bne.n	8005244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	08da      	lsrs	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3208      	adds	r2, #8
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	220f      	movs	r2, #15
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	08da      	lsrs	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0203 	and.w	r2, r3, #3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80b4 	beq.w	80053ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b60      	ldr	r3, [pc, #384]	; (800540c <HAL_GPIO_Init+0x30c>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a5f      	ldr	r2, [pc, #380]	; (800540c <HAL_GPIO_Init+0x30c>)
 8005290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b5d      	ldr	r3, [pc, #372]	; (800540c <HAL_GPIO_Init+0x30c>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052a2:	4a5b      	ldr	r2, [pc, #364]	; (8005410 <HAL_GPIO_Init+0x310>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a52      	ldr	r2, [pc, #328]	; (8005414 <HAL_GPIO_Init+0x314>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02b      	beq.n	8005326 <HAL_GPIO_Init+0x226>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a51      	ldr	r2, [pc, #324]	; (8005418 <HAL_GPIO_Init+0x318>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d025      	beq.n	8005322 <HAL_GPIO_Init+0x222>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_GPIO_Init+0x31c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01f      	beq.n	800531e <HAL_GPIO_Init+0x21e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4f      	ldr	r2, [pc, #316]	; (8005420 <HAL_GPIO_Init+0x320>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d019      	beq.n	800531a <HAL_GPIO_Init+0x21a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a4e      	ldr	r2, [pc, #312]	; (8005424 <HAL_GPIO_Init+0x324>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_GPIO_Init+0x216>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4d      	ldr	r2, [pc, #308]	; (8005428 <HAL_GPIO_Init+0x328>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00d      	beq.n	8005312 <HAL_GPIO_Init+0x212>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4c      	ldr	r2, [pc, #304]	; (800542c <HAL_GPIO_Init+0x32c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <HAL_GPIO_Init+0x20e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a4b      	ldr	r2, [pc, #300]	; (8005430 <HAL_GPIO_Init+0x330>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d101      	bne.n	800530a <HAL_GPIO_Init+0x20a>
 8005306:	2307      	movs	r3, #7
 8005308:	e00e      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800530a:	2308      	movs	r3, #8
 800530c:	e00c      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800530e:	2306      	movs	r3, #6
 8005310:	e00a      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005312:	2305      	movs	r3, #5
 8005314:	e008      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005316:	2304      	movs	r3, #4
 8005318:	e006      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800531a:	2303      	movs	r3, #3
 800531c:	e004      	b.n	8005328 <HAL_GPIO_Init+0x228>
 800531e:	2302      	movs	r3, #2
 8005320:	e002      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_GPIO_Init+0x228>
 8005326:	2300      	movs	r3, #0
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	f002 0203 	and.w	r2, r2, #3
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	4093      	lsls	r3, r2
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005338:	4935      	ldr	r1, [pc, #212]	; (8005410 <HAL_GPIO_Init+0x310>)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	3302      	adds	r3, #2
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005346:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_GPIO_Init+0x334>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800536a:	4a32      	ldr	r2, [pc, #200]	; (8005434 <HAL_GPIO_Init+0x334>)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_GPIO_Init+0x334>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005394:	4a27      	ldr	r2, [pc, #156]	; (8005434 <HAL_GPIO_Init+0x334>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800539a:	4b26      	ldr	r3, [pc, #152]	; (8005434 <HAL_GPIO_Init+0x334>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053be:	4a1d      	ldr	r2, [pc, #116]	; (8005434 <HAL_GPIO_Init+0x334>)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_GPIO_Init+0x334>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053e8:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_GPIO_Init+0x334>)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3301      	adds	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	f67f ae90 	bls.w	800511c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40013800 	.word	0x40013800
 8005414:	40020000 	.word	0x40020000
 8005418:	40020400 	.word	0x40020400
 800541c:	40020800 	.word	0x40020800
 8005420:	40020c00 	.word	0x40020c00
 8005424:	40021000 	.word	0x40021000
 8005428:	40021400 	.word	0x40021400
 800542c:	40021800 	.word	0x40021800
 8005430:	40021c00 	.word	0x40021c00
 8005434:	40013c00 	.word	0x40013c00

08005438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	887b      	ldrh	r3, [r7, #2]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
 8005454:	e001      	b.n	800545a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	460b      	mov	r3, r1
 8005472:	807b      	strh	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005478:	787b      	ldrb	r3, [r7, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800547e:	887a      	ldrh	r2, [r7, #2]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005484:	e003      	b.n	800548e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005486:	887b      	ldrh	r3, [r7, #2]
 8005488:	041a      	lsls	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	619a      	str	r2, [r3, #24]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e12b      	b.n	8005706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc f990 	bl	80017e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2224      	movs	r2, #36	; 0x24
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0201 	bic.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005500:	f001 fcb0 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8005504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4a81      	ldr	r2, [pc, #516]	; (8005710 <HAL_I2C_Init+0x274>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d807      	bhi.n	8005520 <HAL_I2C_Init+0x84>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a80      	ldr	r2, [pc, #512]	; (8005714 <HAL_I2C_Init+0x278>)
 8005514:	4293      	cmp	r3, r2
 8005516:	bf94      	ite	ls
 8005518:	2301      	movls	r3, #1
 800551a:	2300      	movhi	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e006      	b.n	800552e <HAL_I2C_Init+0x92>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a7d      	ldr	r2, [pc, #500]	; (8005718 <HAL_I2C_Init+0x27c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	bf94      	ite	ls
 8005528:	2301      	movls	r3, #1
 800552a:	2300      	movhi	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0e7      	b.n	8005706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a78      	ldr	r2, [pc, #480]	; (800571c <HAL_I2C_Init+0x280>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	0c9b      	lsrs	r3, r3, #18
 8005540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a6a      	ldr	r2, [pc, #424]	; (8005710 <HAL_I2C_Init+0x274>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d802      	bhi.n	8005570 <HAL_I2C_Init+0xd4>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	3301      	adds	r3, #1
 800556e:	e009      	b.n	8005584 <HAL_I2C_Init+0xe8>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	4a69      	ldr	r2, [pc, #420]	; (8005720 <HAL_I2C_Init+0x284>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	3301      	adds	r3, #1
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	430b      	orrs	r3, r1
 800558a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	495c      	ldr	r1, [pc, #368]	; (8005710 <HAL_I2C_Init+0x274>)
 80055a0:	428b      	cmp	r3, r1
 80055a2:	d819      	bhi.n	80055d8 <HAL_I2C_Init+0x13c>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	1e59      	subs	r1, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055b8:	400b      	ands	r3, r1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_I2C_Init+0x138>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1e59      	subs	r1, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055cc:	3301      	adds	r3, #1
 80055ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d2:	e051      	b.n	8005678 <HAL_I2C_Init+0x1dc>
 80055d4:	2304      	movs	r3, #4
 80055d6:	e04f      	b.n	8005678 <HAL_I2C_Init+0x1dc>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d111      	bne.n	8005604 <HAL_I2C_Init+0x168>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1e58      	subs	r0, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	440b      	add	r3, r1
 80055ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f2:	3301      	adds	r3, #1
 80055f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e012      	b.n	800562a <HAL_I2C_Init+0x18e>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1e58      	subs	r0, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	0099      	lsls	r1, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	fbb0 f3f3 	udiv	r3, r0, r3
 800561a:	3301      	adds	r3, #1
 800561c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_I2C_Init+0x196>
 800562e:	2301      	movs	r3, #1
 8005630:	e022      	b.n	8005678 <HAL_I2C_Init+0x1dc>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10e      	bne.n	8005658 <HAL_I2C_Init+0x1bc>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1e58      	subs	r0, r3, #1
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	440b      	add	r3, r1
 8005648:	fbb0 f3f3 	udiv	r3, r0, r3
 800564c:	3301      	adds	r3, #1
 800564e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005656:	e00f      	b.n	8005678 <HAL_I2C_Init+0x1dc>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1e58      	subs	r0, r3, #1
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6859      	ldr	r1, [r3, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	0099      	lsls	r1, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	fbb0 f3f3 	udiv	r3, r0, r3
 800566e:	3301      	adds	r3, #1
 8005670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	6809      	ldr	r1, [r1, #0]
 800567c:	4313      	orrs	r3, r2
 800567e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6911      	ldr	r1, [r2, #16]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68d2      	ldr	r2, [r2, #12]
 80056b2:	4311      	orrs	r1, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695a      	ldr	r2, [r3, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	000186a0 	.word	0x000186a0
 8005714:	001e847f 	.word	0x001e847f
 8005718:	003d08ff 	.word	0x003d08ff
 800571c:	431bde83 	.word	0x431bde83
 8005720:	10624dd3 	.word	0x10624dd3

08005724 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607a      	str	r2, [r7, #4]
 800572e:	461a      	mov	r2, r3
 8005730:	460b      	mov	r3, r1
 8005732:	817b      	strh	r3, [r7, #10]
 8005734:	4613      	mov	r3, r2
 8005736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005738:	f7fe fa8c 	bl	8003c54 <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b20      	cmp	r3, #32
 8005748:	f040 80e0 	bne.w	800590c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	2319      	movs	r3, #25
 8005752:	2201      	movs	r2, #1
 8005754:	4970      	ldr	r1, [pc, #448]	; (8005918 <HAL_I2C_Master_Transmit+0x1f4>)
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fd86 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	e0d3      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_I2C_Master_Transmit+0x50>
 8005770:	2302      	movs	r3, #2
 8005772:	e0cc      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d007      	beq.n	800579a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2210      	movs	r2, #16
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	893a      	ldrh	r2, [r7, #8]
 80057ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a50      	ldr	r2, [pc, #320]	; (800591c <HAL_I2C_Master_Transmit+0x1f8>)
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057dc:	8979      	ldrh	r1, [r7, #10]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fbf0 	bl	8005fc8 <I2C_MasterRequestWrite>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e08d      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005808:	e066      	b.n	80058d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fe00 	bl	8006414 <I2C_WaitOnTXEFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b04      	cmp	r3, #4
 8005820:	d107      	bne.n	8005832 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e06b      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d11b      	bne.n	80058ac <HAL_I2C_Master_Transmit+0x188>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d017      	beq.n	80058ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	6a39      	ldr	r1, [r7, #32]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fdf0 	bl	8006496 <I2C_WaitOnBTFFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d107      	bne.n	80058d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e01a      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d194      	bne.n	800580a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	00100002 	.word	0x00100002
 800591c:	ffff0000 	.word	0xffff0000

08005920 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08c      	sub	sp, #48	; 0x30
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	461a      	mov	r2, r3
 800592c:	460b      	mov	r3, r1
 800592e:	817b      	strh	r3, [r7, #10]
 8005930:	4613      	mov	r3, r2
 8005932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005934:	f7fe f98e 	bl	8003c54 <HAL_GetTick>
 8005938:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b20      	cmp	r3, #32
 8005944:	f040 820b 	bne.w	8005d5e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2319      	movs	r3, #25
 800594e:	2201      	movs	r2, #1
 8005950:	497c      	ldr	r1, [pc, #496]	; (8005b44 <HAL_I2C_Master_Receive+0x224>)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 fc88 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800595e:	2302      	movs	r3, #2
 8005960:	e1fe      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_I2C_Master_Receive+0x50>
 800596c:	2302      	movs	r3, #2
 800596e:	e1f7      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d007      	beq.n	8005996 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0201 	orr.w	r2, r2, #1
 8005994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2222      	movs	r2, #34	; 0x22
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2210      	movs	r2, #16
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	893a      	ldrh	r2, [r7, #8]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a5c      	ldr	r2, [pc, #368]	; (8005b48 <HAL_I2C_Master_Receive+0x228>)
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059d8:	8979      	ldrh	r1, [r7, #10]
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fb74 	bl	80060cc <I2C_MasterRequestRead>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e1b8      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d113      	bne.n	8005a1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	623b      	str	r3, [r7, #32]
 8005a0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e18c      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d11b      	bne.n	8005a5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a36:	2300      	movs	r3, #0
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	e16c      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d11b      	bne.n	8005a9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	e14c      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ac4:	e138      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	f200 80f1 	bhi.w	8005cb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d123      	bne.n	8005b20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 fd1b 	bl	8006518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e139      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b1e:	e10b      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d14e      	bne.n	8005bc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4906      	ldr	r1, [pc, #24]	; (8005b4c <HAL_I2C_Master_Receive+0x22c>)
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fb98 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e10e      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
 8005b42:	bf00      	nop
 8005b44:	00100002 	.word	0x00100002
 8005b48:	ffff0000 	.word	0xffff0000
 8005b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bc4:	e0b8      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4966      	ldr	r1, [pc, #408]	; (8005d68 <HAL_I2C_Master_Receive+0x448>)
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fb49 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0bf      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	494f      	ldr	r1, [pc, #316]	; (8005d68 <HAL_I2C_Master_Receive+0x448>)
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fb1b 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e091      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cb0:	e042      	b.n	8005d38 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fc2e 	bl	8006518 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e04c      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d118      	bne.n	8005d38 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f aec2 	bne.w	8005ac6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
  }
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3728      	adds	r7, #40	; 0x28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	00010004 	.word	0x00010004

08005d6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d7c:	f7fd ff6a 	bl	8003c54 <HAL_GetTick>
 8005d80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005d82:	2301      	movs	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	f040 8111 	bne.w	8005fb6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	2319      	movs	r3, #25
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4988      	ldr	r1, [pc, #544]	; (8005fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fa62 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
 8005dac:	e104      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d101      	bne.n	8005dbc <HAL_I2C_IsDeviceReady+0x50>
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0fd      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d007      	beq.n	8005de2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2224      	movs	r2, #36	; 0x24
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4a70      	ldr	r2, [pc, #448]	; (8005fc4 <HAL_I2C_IsDeviceReady+0x258>)
 8005e04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fa20 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3c:	d103      	bne.n	8005e46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0b6      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e4a:	897b      	ldrh	r3, [r7, #10]
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e5a:	f7fd fefb 	bl	8003c54 <HAL_GetTick>
 8005e5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	bf0c      	ite	eq
 8005e6e:	2301      	moveq	r3, #1
 8005e70:	2300      	movne	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	bf0c      	ite	eq
 8005e86:	2301      	moveq	r3, #1
 8005e88:	2300      	movne	r3, #0
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e8e:	e025      	b.n	8005edc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e90:	f7fd fee0 	bl	8003c54 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22a0      	movs	r2, #160	; 0xa0
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	bf0c      	ite	eq
 8005ebc:	2301      	moveq	r3, #1
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2301      	moveq	r3, #1
 8005ed6:	2300      	movne	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2ba0      	cmp	r3, #160	; 0xa0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_I2C_IsDeviceReady+0x188>
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <HAL_I2C_IsDeviceReady+0x188>
 8005eee:	7dbb      	ldrb	r3, [r7, #22]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0cd      	beq.n	8005e90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d129      	bne.n	8005f5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f18:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	2319      	movs	r3, #25
 8005f36:	2201      	movs	r2, #1
 8005f38:	4921      	ldr	r1, [pc, #132]	; (8005fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f994 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e036      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e02c      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f76:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	2319      	movs	r3, #25
 8005f7e:	2201      	movs	r2, #1
 8005f80:	490f      	ldr	r1, [pc, #60]	; (8005fc0 <HAL_I2C_IsDeviceReady+0x254>)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f970 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e012      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	3301      	adds	r3, #1
 8005f96:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	f4ff af32 	bcc.w	8005e06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	00100002 	.word	0x00100002
 8005fc4:	ffff0000 	.word	0xffff0000

08005fc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d006      	beq.n	8005ff2 <I2C_MasterRequestWrite+0x2a>
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d003      	beq.n	8005ff2 <I2C_MasterRequestWrite+0x2a>
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ff0:	d108      	bne.n	8006004 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e00b      	b.n	800601c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b12      	cmp	r3, #18
 800600a:	d107      	bne.n	800601c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800601a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 f91d 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006042:	d103      	bne.n	800604c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e035      	b.n	80060bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006058:	d108      	bne.n	800606c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800605a:	897b      	ldrh	r3, [r7, #10]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006068:	611a      	str	r2, [r3, #16]
 800606a:	e01b      	b.n	80060a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800606c:	897b      	ldrh	r3, [r7, #10]
 800606e:	11db      	asrs	r3, r3, #7
 8006070:	b2db      	uxtb	r3, r3
 8006072:	f003 0306 	and.w	r3, r3, #6
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f063 030f 	orn	r3, r3, #15
 800607c:	b2da      	uxtb	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	490e      	ldr	r1, [pc, #56]	; (80060c4 <I2C_MasterRequestWrite+0xfc>)
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 f943 	bl	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e010      	b.n	80060bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800609a:	897b      	ldrh	r3, [r7, #10]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4907      	ldr	r1, [pc, #28]	; (80060c8 <I2C_MasterRequestWrite+0x100>)
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 f933 	bl	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	00010008 	.word	0x00010008
 80060c8:	00010002 	.word	0x00010002

080060cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	460b      	mov	r3, r1
 80060da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d006      	beq.n	8006106 <I2C_MasterRequestRead+0x3a>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d003      	beq.n	8006106 <I2C_MasterRequestRead+0x3a>
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006104:	d108      	bne.n	8006118 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	e00b      	b.n	8006130 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b11      	cmp	r3, #17
 800611e:	d107      	bne.n	8006130 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f893 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d103      	bne.n	8006160 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e079      	b.n	8006258 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616c:	d108      	bne.n	8006180 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800616e:	897b      	ldrh	r3, [r7, #10]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f043 0301 	orr.w	r3, r3, #1
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	611a      	str	r2, [r3, #16]
 800617e:	e05f      	b.n	8006240 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006180:	897b      	ldrh	r3, [r7, #10]
 8006182:	11db      	asrs	r3, r3, #7
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0306 	and.w	r3, r3, #6
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f063 030f 	orn	r3, r3, #15
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	4930      	ldr	r1, [pc, #192]	; (8006260 <I2C_MasterRequestRead+0x194>)
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f8b9 	bl	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e054      	b.n	8006258 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061ae:	897b      	ldrh	r3, [r7, #10]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4929      	ldr	r1, [pc, #164]	; (8006264 <I2C_MasterRequestRead+0x198>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f8a9 	bl	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e044      	b.n	8006258 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f831 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	d103      	bne.n	8006224 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e017      	b.n	8006258 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006228:	897b      	ldrh	r3, [r7, #10]
 800622a:	11db      	asrs	r3, r3, #7
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0306 	and.w	r3, r3, #6
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f063 030e 	orn	r3, r3, #14
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4907      	ldr	r1, [pc, #28]	; (8006264 <I2C_MasterRequestRead+0x198>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f865 	bl	8006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00010008 	.word	0x00010008
 8006264:	00010002 	.word	0x00010002

08006268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006278:	e025      	b.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d021      	beq.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006282:	f7fd fce7 	bl	8003c54 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d302      	bcc.n	8006298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d116      	bne.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e023      	b.n	800630e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d10d      	bne.n	80062ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	43da      	mvns	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4013      	ands	r3, r2
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf0c      	ite	eq
 80062e2:	2301      	moveq	r3, #1
 80062e4:	2300      	movne	r3, #0
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	e00c      	b.n	8006306 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	43da      	mvns	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4013      	ands	r3, r2
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	bf0c      	ite	eq
 80062fe:	2301      	moveq	r3, #1
 8006300:	2300      	movne	r3, #0
 8006302:	b2db      	uxtb	r3, r3
 8006304:	461a      	mov	r2, r3
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	429a      	cmp	r2, r3
 800630a:	d0b6      	beq.n	800627a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006324:	e051      	b.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006334:	d123      	bne.n	800637e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006344:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800634e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f043 0204 	orr.w	r2, r3, #4
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e046      	b.n	800640c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d021      	beq.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006386:	f7fd fc65 	bl	8003c54 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d116      	bne.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e020      	b.n	800640c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10c      	bne.n	80063ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	43da      	mvns	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bf14      	ite	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	2300      	moveq	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	e00b      	b.n	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	43da      	mvns	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4013      	ands	r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d18d      	bne.n	8006326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006420:	e02d      	b.n	800647e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f8ce 	bl	80065c4 <I2C_IsAcknowledgeFailed>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e02d      	b.n	800648e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d021      	beq.n	800647e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fd fc0b 	bl	8003c54 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d116      	bne.n	800647e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e007      	b.n	800648e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d1ca      	bne.n	8006422 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b084      	sub	sp, #16
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064a2:	e02d      	b.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f88d 	bl	80065c4 <I2C_IsAcknowledgeFailed>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e02d      	b.n	8006510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d021      	beq.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064bc:	f7fd fbca 	bl	8003c54 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d302      	bcc.n	80064d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d116      	bne.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e007      	b.n	8006510 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b04      	cmp	r3, #4
 800650c:	d1ca      	bne.n	80064a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006524:	e042      	b.n	80065ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	f003 0310 	and.w	r3, r3, #16
 8006530:	2b10      	cmp	r3, #16
 8006532:	d119      	bne.n	8006568 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0210 	mvn.w	r2, #16
 800653c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e029      	b.n	80065bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006568:	f7fd fb74 	bl	8003c54 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	d302      	bcc.n	800657e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	f043 0220 	orr.w	r2, r3, #32
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e007      	b.n	80065bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b40      	cmp	r3, #64	; 0x40
 80065b8:	d1b5      	bne.n	8006526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065da:	d11b      	bne.n	8006614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	f043 0204 	orr.w	r2, r3, #4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e264      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d075      	beq.n	800672e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006642:	4ba3      	ldr	r3, [pc, #652]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
 800664a:	2b04      	cmp	r3, #4
 800664c:	d00c      	beq.n	8006668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800664e:	4ba0      	ldr	r3, [pc, #640]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006656:	2b08      	cmp	r3, #8
 8006658:	d112      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800665a:	4b9d      	ldr	r3, [pc, #628]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006666:	d10b      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006668:	4b99      	ldr	r3, [pc, #612]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05b      	beq.n	800672c <HAL_RCC_OscConfig+0x108>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d157      	bne.n	800672c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e23f      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d106      	bne.n	8006698 <HAL_RCC_OscConfig+0x74>
 800668a:	4b91      	ldr	r3, [pc, #580]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a90      	ldr	r2, [pc, #576]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e01d      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a0:	d10c      	bne.n	80066bc <HAL_RCC_OscConfig+0x98>
 80066a2:	4b8b      	ldr	r3, [pc, #556]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a8a      	ldr	r2, [pc, #552]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	4b88      	ldr	r3, [pc, #544]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a87      	ldr	r2, [pc, #540]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e00b      	b.n	80066d4 <HAL_RCC_OscConfig+0xb0>
 80066bc:	4b84      	ldr	r3, [pc, #528]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a83      	ldr	r2, [pc, #524]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	4b81      	ldr	r3, [pc, #516]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a80      	ldr	r2, [pc, #512]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d013      	beq.n	8006704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066dc:	f7fd faba 	bl	8003c54 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066e4:	f7fd fab6 	bl	8003c54 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	; 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e204      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCC_OscConfig+0xc0>
 8006702:	e014      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006704:	f7fd faa6 	bl	8003c54 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800670c:	f7fd faa2 	bl	8003c54 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	; 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e1f0      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800671e:	4b6c      	ldr	r3, [pc, #432]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0xe8>
 800672a:	e000      	b.n	800672e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800672c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d063      	beq.n	8006802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800673a:	4b65      	ldr	r3, [pc, #404]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006746:	4b62      	ldr	r3, [pc, #392]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800674e:	2b08      	cmp	r3, #8
 8006750:	d11c      	bne.n	800678c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006752:	4b5f      	ldr	r3, [pc, #380]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800675e:	4b5c      	ldr	r3, [pc, #368]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_RCC_OscConfig+0x152>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d001      	beq.n	8006776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e1c4      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006776:	4b56      	ldr	r3, [pc, #344]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	4952      	ldr	r1, [pc, #328]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006786:	4313      	orrs	r3, r2
 8006788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678a:	e03a      	b.n	8006802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d020      	beq.n	80067d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006794:	4b4f      	ldr	r3, [pc, #316]	; (80068d4 <HAL_RCC_OscConfig+0x2b0>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679a:	f7fd fa5b 	bl	8003c54 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067a2:	f7fd fa57 	bl	8003c54 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e1a5      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b4:	4b46      	ldr	r3, [pc, #280]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c0:	4b43      	ldr	r3, [pc, #268]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	00db      	lsls	r3, r3, #3
 80067ce:	4940      	ldr	r1, [pc, #256]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	600b      	str	r3, [r1, #0]
 80067d4:	e015      	b.n	8006802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067d6:	4b3f      	ldr	r3, [pc, #252]	; (80068d4 <HAL_RCC_OscConfig+0x2b0>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fd fa3a 	bl	8003c54 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067e4:	f7fd fa36 	bl	8003c54 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e184      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067f6:	4b36      	ldr	r3, [pc, #216]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d030      	beq.n	8006870 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006816:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_RCC_OscConfig+0x2b4>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fd fa1a 	bl	8003c54 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006824:	f7fd fa16 	bl	8003c54 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e164      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006836:	4b26      	ldr	r3, [pc, #152]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0f0      	beq.n	8006824 <HAL_RCC_OscConfig+0x200>
 8006842:	e015      	b.n	8006870 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006844:	4b24      	ldr	r3, [pc, #144]	; (80068d8 <HAL_RCC_OscConfig+0x2b4>)
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684a:	f7fd fa03 	bl	8003c54 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006852:	f7fd f9ff 	bl	8003c54 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e14d      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006864:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f0      	bne.n	8006852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80a0 	beq.w	80069be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006882:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10f      	bne.n	80068ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	4a0e      	ldr	r2, [pc, #56]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	; 0x40
 800689e:	4b0c      	ldr	r3, [pc, #48]	; (80068d0 <HAL_RCC_OscConfig+0x2ac>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_RCC_OscConfig+0x2b8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d121      	bne.n	80068fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ba:	4b08      	ldr	r3, [pc, #32]	; (80068dc <HAL_RCC_OscConfig+0x2b8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a07      	ldr	r2, [pc, #28]	; (80068dc <HAL_RCC_OscConfig+0x2b8>)
 80068c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c6:	f7fd f9c5 	bl	8003c54 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	e011      	b.n	80068f2 <HAL_RCC_OscConfig+0x2ce>
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800
 80068d4:	42470000 	.word	0x42470000
 80068d8:	42470e80 	.word	0x42470e80
 80068dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e0:	f7fd f9b8 	bl	8003c54 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e106      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f2:	4b85      	ldr	r3, [pc, #532]	; (8006b08 <HAL_RCC_OscConfig+0x4e4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d106      	bne.n	8006914 <HAL_RCC_OscConfig+0x2f0>
 8006906:	4b81      	ldr	r3, [pc, #516]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	4a80      	ldr	r2, [pc, #512]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 800690c:	f043 0301 	orr.w	r3, r3, #1
 8006910:	6713      	str	r3, [r2, #112]	; 0x70
 8006912:	e01c      	b.n	800694e <HAL_RCC_OscConfig+0x32a>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	2b05      	cmp	r3, #5
 800691a:	d10c      	bne.n	8006936 <HAL_RCC_OscConfig+0x312>
 800691c:	4b7b      	ldr	r3, [pc, #492]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a7a      	ldr	r2, [pc, #488]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006922:	f043 0304 	orr.w	r3, r3, #4
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	4b78      	ldr	r3, [pc, #480]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	4a77      	ldr	r2, [pc, #476]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 800692e:	f043 0301 	orr.w	r3, r3, #1
 8006932:	6713      	str	r3, [r2, #112]	; 0x70
 8006934:	e00b      	b.n	800694e <HAL_RCC_OscConfig+0x32a>
 8006936:	4b75      	ldr	r3, [pc, #468]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a74      	ldr	r2, [pc, #464]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	6713      	str	r3, [r2, #112]	; 0x70
 8006942:	4b72      	ldr	r3, [pc, #456]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a71      	ldr	r2, [pc, #452]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006948:	f023 0304 	bic.w	r3, r3, #4
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d015      	beq.n	8006982 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006956:	f7fd f97d 	bl	8003c54 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800695c:	e00a      	b.n	8006974 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695e:	f7fd f979 	bl	8003c54 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	f241 3288 	movw	r2, #5000	; 0x1388
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e0c5      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006974:	4b65      	ldr	r3, [pc, #404]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0ee      	beq.n	800695e <HAL_RCC_OscConfig+0x33a>
 8006980:	e014      	b.n	80069ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006982:	f7fd f967 	bl	8003c54 <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006988:	e00a      	b.n	80069a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800698a:	f7fd f963 	bl	8003c54 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	f241 3288 	movw	r2, #5000	; 0x1388
 8006998:	4293      	cmp	r3, r2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e0af      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a0:	4b5a      	ldr	r3, [pc, #360]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1ee      	bne.n	800698a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d105      	bne.n	80069be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b2:	4b56      	ldr	r3, [pc, #344]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	4a55      	ldr	r2, [pc, #340]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 80069b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 809b 	beq.w	8006afe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069c8:	4b50      	ldr	r3, [pc, #320]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d05c      	beq.n	8006a8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d141      	bne.n	8006a60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069dc:	4b4c      	ldr	r3, [pc, #304]	; (8006b10 <HAL_RCC_OscConfig+0x4ec>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e2:	f7fd f937 	bl	8003c54 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ea:	f7fd f933 	bl	8003c54 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e081      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069fc:	4b43      	ldr	r3, [pc, #268]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	431a      	orrs	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	019b      	lsls	r3, r3, #6
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	3b01      	subs	r3, #1
 8006a22:	041b      	lsls	r3, r3, #16
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	061b      	lsls	r3, r3, #24
 8006a2c:	4937      	ldr	r1, [pc, #220]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a32:	4b37      	ldr	r3, [pc, #220]	; (8006b10 <HAL_RCC_OscConfig+0x4ec>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7fd f90c 	bl	8003c54 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a40:	f7fd f908 	bl	8003c54 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e056      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x41c>
 8006a5e:	e04e      	b.n	8006afe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a60:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <HAL_RCC_OscConfig+0x4ec>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a66:	f7fd f8f5 	bl	8003c54 <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a6e:	f7fd f8f1 	bl	8003c54 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e03f      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a80:	4b22      	ldr	r3, [pc, #136]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCC_OscConfig+0x44a>
 8006a8c:	e037      	b.n	8006afe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e032      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a9a:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <HAL_RCC_OscConfig+0x4e8>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d028      	beq.n	8006afa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d121      	bne.n	8006afa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d11a      	bne.n	8006afa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006aca:	4013      	ands	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ad0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d111      	bne.n	8006afa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	085b      	lsrs	r3, r3, #1
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d107      	bne.n	8006afa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d001      	beq.n	8006afe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40007000 	.word	0x40007000
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	42470060 	.word	0x42470060

08006b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0cc      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b28:	4b68      	ldr	r3, [pc, #416]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d90c      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b36:	4b65      	ldr	r3, [pc, #404]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b63      	ldr	r3, [pc, #396]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0b8      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b68:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4a58      	ldr	r2, [pc, #352]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b80:	4b53      	ldr	r3, [pc, #332]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	4a52      	ldr	r2, [pc, #328]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8c:	4b50      	ldr	r3, [pc, #320]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	494d      	ldr	r1, [pc, #308]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d044      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d119      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e07f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d003      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d107      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd2:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e06f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be2:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e067      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bf2:	4b37      	ldr	r3, [pc, #220]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	4934      	ldr	r1, [pc, #208]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c04:	f7fd f826 	bl	8003c54 <HAL_GetTick>
 8006c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c0c:	f7fd f822 	bl	8003c54 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e04f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c22:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 020c 	and.w	r2, r3, #12
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d1eb      	bne.n	8006c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c34:	4b25      	ldr	r3, [pc, #148]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d20c      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c42:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <HAL_RCC_ClockConfig+0x1b8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e032      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c68:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4916      	ldr	r1, [pc, #88]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c9a:	f000 f821 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	490a      	ldr	r1, [pc, #40]	; (8006cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	5ccb      	ldrb	r3, [r1, r3]
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <HAL_RCC_ClockConfig+0x1c8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fa ff08 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40023c00 	.word	0x40023c00
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	0800f168 	.word	0x0800f168
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	20000108 	.word	0x20000108

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	b5b0      	push	{r4, r5, r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6079      	str	r1, [r7, #4]
 8006cea:	2100      	movs	r1, #0
 8006cec:	60f9      	str	r1, [r7, #12]
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf6:	4952      	ldr	r1, [pc, #328]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006cf8:	6889      	ldr	r1, [r1, #8]
 8006cfa:	f001 010c 	and.w	r1, r1, #12
 8006cfe:	2908      	cmp	r1, #8
 8006d00:	d00d      	beq.n	8006d1e <HAL_RCC_GetSysClockFreq+0x3e>
 8006d02:	2908      	cmp	r1, #8
 8006d04:	f200 8094 	bhi.w	8006e30 <HAL_RCC_GetSysClockFreq+0x150>
 8006d08:	2900      	cmp	r1, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_RCC_GetSysClockFreq+0x32>
 8006d0c:	2904      	cmp	r1, #4
 8006d0e:	d003      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0x38>
 8006d10:	e08e      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d12:	4b4c      	ldr	r3, [pc, #304]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x164>)
 8006d14:	60bb      	str	r3, [r7, #8]
       break;
 8006d16:	e08e      	b.n	8006e36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d18:	4b4b      	ldr	r3, [pc, #300]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d1a:	60bb      	str	r3, [r7, #8]
      break;
 8006d1c:	e08b      	b.n	8006e36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d1e:	4948      	ldr	r1, [pc, #288]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d20:	6849      	ldr	r1, [r1, #4]
 8006d22:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006d26:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d28:	4945      	ldr	r1, [pc, #276]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d2a:	6849      	ldr	r1, [r1, #4]
 8006d2c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006d30:	2900      	cmp	r1, #0
 8006d32:	d024      	beq.n	8006d7e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d34:	4942      	ldr	r1, [pc, #264]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d36:	6849      	ldr	r1, [r1, #4]
 8006d38:	0989      	lsrs	r1, r1, #6
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	f04f 0100 	mov.w	r1, #0
 8006d40:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006d44:	f04f 0500 	mov.w	r5, #0
 8006d48:	ea00 0204 	and.w	r2, r0, r4
 8006d4c:	ea01 0305 	and.w	r3, r1, r5
 8006d50:	493d      	ldr	r1, [pc, #244]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d52:	fb01 f003 	mul.w	r0, r1, r3
 8006d56:	2100      	movs	r1, #0
 8006d58:	fb01 f102 	mul.w	r1, r1, r2
 8006d5c:	1844      	adds	r4, r0, r1
 8006d5e:	493a      	ldr	r1, [pc, #232]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x168>)
 8006d60:	fba2 0101 	umull	r0, r1, r2, r1
 8006d64:	1863      	adds	r3, r4, r1
 8006d66:	4619      	mov	r1, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	f7f9 ff0a 	bl	8000b88 <__aeabi_uldivmod>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4613      	mov	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e04a      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b30      	ldr	r3, [pc, #192]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	461a      	mov	r2, r3
 8006d86:	f04f 0300 	mov.w	r3, #0
 8006d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006d8e:	f04f 0100 	mov.w	r1, #0
 8006d92:	ea02 0400 	and.w	r4, r2, r0
 8006d96:	ea03 0501 	and.w	r5, r3, r1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	014b      	lsls	r3, r1, #5
 8006da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006dac:	0142      	lsls	r2, r0, #5
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	1b00      	subs	r0, r0, r4
 8006db4:	eb61 0105 	sbc.w	r1, r1, r5
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	018b      	lsls	r3, r1, #6
 8006dc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006dc6:	0182      	lsls	r2, r0, #6
 8006dc8:	1a12      	subs	r2, r2, r0
 8006dca:	eb63 0301 	sbc.w	r3, r3, r1
 8006dce:	f04f 0000 	mov.w	r0, #0
 8006dd2:	f04f 0100 	mov.w	r1, #0
 8006dd6:	00d9      	lsls	r1, r3, #3
 8006dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ddc:	00d0      	lsls	r0, r2, #3
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	1912      	adds	r2, r2, r4
 8006de4:	eb45 0303 	adc.w	r3, r5, r3
 8006de8:	f04f 0000 	mov.w	r0, #0
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	0299      	lsls	r1, r3, #10
 8006df2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006df6:	0290      	lsls	r0, r2, #10
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4619      	mov	r1, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	461a      	mov	r2, r3
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	f7f9 febe 	bl	8000b88 <__aeabi_uldivmod>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4613      	mov	r3, r2
 8006e12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	0c1b      	lsrs	r3, r3, #16
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	3301      	adds	r3, #1
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2c:	60bb      	str	r3, [r7, #8]
      break;
 8006e2e:	e002      	b.n	8006e36 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e32:	60bb      	str	r3, [r7, #8]
      break;
 8006e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e36:	68bb      	ldr	r3, [r7, #8]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8006e40:	40023800 	.word	0x40023800
 8006e44:	00f42400 	.word	0x00f42400
 8006e48:	017d7840 	.word	0x017d7840

08006e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000000 	.word	0x20000000

08006e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e68:	f7ff fff0 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0a9b      	lsrs	r3, r3, #10
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4903      	ldr	r1, [pc, #12]	; (8006e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40023800 	.word	0x40023800
 8006e88:	0800f178 	.word	0x0800f178

08006e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e90:	f7ff ffdc 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0b5b      	lsrs	r3, r3, #13
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	4903      	ldr	r1, [pc, #12]	; (8006eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	0800f178 	.word	0x0800f178

08006eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	220f      	movs	r2, #15
 8006ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ec4:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <HAL_RCC_GetClockConfig+0x5c>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 0203 	and.w	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ed0:	4b0f      	ldr	r3, [pc, #60]	; (8006f10 <HAL_RCC_GetClockConfig+0x5c>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCC_GetClockConfig+0x5c>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ee8:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <HAL_RCC_GetClockConfig+0x5c>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	08db      	lsrs	r3, r3, #3
 8006eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <HAL_RCC_GetClockConfig+0x60>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0207 	and.w	r2, r3, #7
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	601a      	str	r2, [r3, #0]
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40023c00 	.word	0x40023c00

08006f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e041      	b.n	8006fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fb f892 	bl	8002068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f000 fe8e 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d001      	beq.n	8006fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e04e      	b.n	800706e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a23      	ldr	r2, [pc, #140]	; (800707c <HAL_TIM_Base_Start_IT+0xc4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d022      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffa:	d01d      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1f      	ldr	r2, [pc, #124]	; (8007080 <HAL_TIM_Base_Start_IT+0xc8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d018      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1e      	ldr	r2, [pc, #120]	; (8007084 <HAL_TIM_Base_Start_IT+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d013      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1c      	ldr	r2, [pc, #112]	; (8007088 <HAL_TIM_Base_Start_IT+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00e      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1b      	ldr	r2, [pc, #108]	; (800708c <HAL_TIM_Base_Start_IT+0xd4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d009      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <HAL_TIM_Base_Start_IT+0xd8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0x80>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <HAL_TIM_Base_Start_IT+0xdc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d111      	bne.n	800705c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b06      	cmp	r3, #6
 8007048:	d010      	beq.n	800706c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0201 	orr.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705a:	e007      	b.n	800706c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0201 	orr.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40010400 	.word	0x40010400
 8007090:	40014000 	.word	0x40014000
 8007094:	40001800 	.word	0x40001800

08007098 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e041      	b.n	800712e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f839 	bl	8007136 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 fdce 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_TIM_PWM_Start+0x24>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	e022      	b.n	80071b6 <HAL_TIM_PWM_Start+0x6a>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b04      	cmp	r3, #4
 8007174:	d109      	bne.n	800718a <HAL_TIM_PWM_Start+0x3e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b01      	cmp	r3, #1
 8007180:	bf14      	ite	ne
 8007182:	2301      	movne	r3, #1
 8007184:	2300      	moveq	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	e015      	b.n	80071b6 <HAL_TIM_PWM_Start+0x6a>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d109      	bne.n	80071a4 <HAL_TIM_PWM_Start+0x58>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	e008      	b.n	80071b6 <HAL_TIM_PWM_Start+0x6a>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e07c      	b.n	80072b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d104      	bne.n	80071ce <HAL_TIM_PWM_Start+0x82>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071cc:	e013      	b.n	80071f6 <HAL_TIM_PWM_Start+0xaa>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d104      	bne.n	80071de <HAL_TIM_PWM_Start+0x92>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071dc:	e00b      	b.n	80071f6 <HAL_TIM_PWM_Start+0xaa>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d104      	bne.n	80071ee <HAL_TIM_PWM_Start+0xa2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071ec:	e003      	b.n	80071f6 <HAL_TIM_PWM_Start+0xaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2201      	movs	r2, #1
 80071fc:	6839      	ldr	r1, [r7, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f94e 	bl	80084a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <HAL_TIM_PWM_Start+0x174>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_PWM_Start+0xcc>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <HAL_TIM_PWM_Start+0x178>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d101      	bne.n	800721c <HAL_TIM_PWM_Start+0xd0>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <HAL_TIM_PWM_Start+0xd2>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_TIM_PWM_Start+0x174>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007244:	d01d      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_TIM_PWM_Start+0x17c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d018      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_TIM_PWM_Start+0x180>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_TIM_PWM_Start+0x184>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <HAL_TIM_PWM_Start+0x178>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <HAL_TIM_PWM_Start+0x188>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_TIM_PWM_Start+0x136>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <HAL_TIM_PWM_Start+0x18c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0307 	and.w	r3, r3, #7
 800728c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b06      	cmp	r3, #6
 8007292:	d010      	beq.n	80072b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a4:	e007      	b.n	80072b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0201 	orr.w	r2, r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40010400 	.word	0x40010400
 80072c8:	40000400 	.word	0x40000400
 80072cc:	40000800 	.word	0x40000800
 80072d0:	40000c00 	.word	0x40000c00
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40001800 	.word	0x40001800

080072dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e041      	b.n	8007372 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f839 	bl	800737a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	3304      	adds	r3, #4
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f000 fcac 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007382:	bf00      	nop
 8007384:	370c      	adds	r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <HAL_TIM_IC_Start_IT+0x1e>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	e013      	b.n	80073d6 <HAL_TIM_IC_Start_IT+0x46>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d104      	bne.n	80073be <HAL_TIM_IC_Start_IT+0x2e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	e00b      	b.n	80073d6 <HAL_TIM_IC_Start_IT+0x46>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d104      	bne.n	80073ce <HAL_TIM_IC_Start_IT+0x3e>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	e003      	b.n	80073d6 <HAL_TIM_IC_Start_IT+0x46>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <HAL_TIM_IC_Start_IT+0x58>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	e013      	b.n	8007410 <HAL_TIM_IC_Start_IT+0x80>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d104      	bne.n	80073f8 <HAL_TIM_IC_Start_IT+0x68>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e00b      	b.n	8007410 <HAL_TIM_IC_Start_IT+0x80>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d104      	bne.n	8007408 <HAL_TIM_IC_Start_IT+0x78>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007404:	b2db      	uxtb	r3, r3
 8007406:	e003      	b.n	8007410 <HAL_TIM_IC_Start_IT+0x80>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740e:	b2db      	uxtb	r3, r3
 8007410:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d102      	bne.n	800741e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007418:	7b7b      	ldrb	r3, [r7, #13]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d001      	beq.n	8007422 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e0cc      	b.n	80075bc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <HAL_TIM_IC_Start_IT+0xa2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007430:	e013      	b.n	800745a <HAL_TIM_IC_Start_IT+0xca>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b04      	cmp	r3, #4
 8007436:	d104      	bne.n	8007442 <HAL_TIM_IC_Start_IT+0xb2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007440:	e00b      	b.n	800745a <HAL_TIM_IC_Start_IT+0xca>
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d104      	bne.n	8007452 <HAL_TIM_IC_Start_IT+0xc2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007450:	e003      	b.n	800745a <HAL_TIM_IC_Start_IT+0xca>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2202      	movs	r2, #2
 8007456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <HAL_TIM_IC_Start_IT+0xda>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007468:	e013      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x102>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b04      	cmp	r3, #4
 800746e:	d104      	bne.n	800747a <HAL_TIM_IC_Start_IT+0xea>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007478:	e00b      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x102>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d104      	bne.n	800748a <HAL_TIM_IC_Start_IT+0xfa>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007488:	e003      	b.n	8007492 <HAL_TIM_IC_Start_IT+0x102>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b0c      	cmp	r3, #12
 8007496:	d841      	bhi.n	800751c <HAL_TIM_IC_Start_IT+0x18c>
 8007498:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <HAL_TIM_IC_Start_IT+0x110>)
 800749a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749e:	bf00      	nop
 80074a0:	080074d5 	.word	0x080074d5
 80074a4:	0800751d 	.word	0x0800751d
 80074a8:	0800751d 	.word	0x0800751d
 80074ac:	0800751d 	.word	0x0800751d
 80074b0:	080074e7 	.word	0x080074e7
 80074b4:	0800751d 	.word	0x0800751d
 80074b8:	0800751d 	.word	0x0800751d
 80074bc:	0800751d 	.word	0x0800751d
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	0800751d 	.word	0x0800751d
 80074c8:	0800751d 	.word	0x0800751d
 80074cc:	0800751d 	.word	0x0800751d
 80074d0:	0800750b 	.word	0x0800750b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0202 	orr.w	r2, r2, #2
 80074e2:	60da      	str	r2, [r3, #12]
      break;
 80074e4:	e01d      	b.n	8007522 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0204 	orr.w	r2, r2, #4
 80074f4:	60da      	str	r2, [r3, #12]
      break;
 80074f6:	e014      	b.n	8007522 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0208 	orr.w	r2, r2, #8
 8007506:	60da      	str	r2, [r3, #12]
      break;
 8007508:	e00b      	b.n	8007522 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0210 	orr.w	r2, r2, #16
 8007518:	60da      	str	r2, [r3, #12]
      break;
 800751a:	e002      	b.n	8007522 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	73fb      	strb	r3, [r7, #15]
      break;
 8007520:	bf00      	nop
  }

  if (status == HAL_OK)
 8007522:	7bfb      	ldrb	r3, [r7, #15]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d148      	bne.n	80075ba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 ffb5 	bl	80084a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a22      	ldr	r2, [pc, #136]	; (80075c4 <HAL_TIM_IC_Start_IT+0x234>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d01d      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <HAL_TIM_IC_Start_IT+0x238>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <HAL_TIM_IC_Start_IT+0x23c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <HAL_TIM_IC_Start_IT+0x240>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <HAL_TIM_IC_Start_IT+0x244>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a18      	ldr	r2, [pc, #96]	; (80075d8 <HAL_TIM_IC_Start_IT+0x248>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIM_IC_Start_IT+0x1f6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a16      	ldr	r2, [pc, #88]	; (80075dc <HAL_TIM_IC_Start_IT+0x24c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d111      	bne.n	80075aa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b06      	cmp	r3, #6
 8007596:	d010      	beq.n	80075ba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a8:	e007      	b.n	80075ba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40001800 	.word	0x40001800

080075e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b02      	cmp	r3, #2
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0202 	mvn.w	r2, #2
 800760c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fb fef0 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fb05 	bl	8007c3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb0c 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b04      	cmp	r3, #4
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0204 	mvn.w	r2, #4
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2202      	movs	r2, #2
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fb fec6 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fadb 	bl	8007c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fae2 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b08      	cmp	r3, #8
 800769c:	d122      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d11b      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0208 	mvn.w	r2, #8
 80076b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fb fe9c 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fab1 	bl	8007c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fab8 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0210 	mvn.w	r2, #16
 8007708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2208      	movs	r2, #8
 800770e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb fe72 	bl	8003408 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa87 	bl	8007c3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fa8e 	bl	8007c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0201 	mvn.w	r2, #1
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fa f972 	bl	8001a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 ff86 	bl	800869c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa53 	bl	8007c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d10e      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d107      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 ff50 	bl	8008688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077fc:	2300      	movs	r3, #0
 80077fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_TIM_IC_ConfigChannel+0x1e>
 800780a:	2302      	movs	r3, #2
 800780c:	e088      	b.n	8007920 <HAL_TIM_IC_ConfigChannel+0x130>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11b      	bne.n	8007854 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f000 fc74 	bl	8008118 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 020c 	bic.w	r2, r2, #12
 800783e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6999      	ldr	r1, [r3, #24]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	619a      	str	r2, [r3, #24]
 8007852:	e060      	b.n	8007916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b04      	cmp	r3, #4
 8007858:	d11c      	bne.n	8007894 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f000 fcf8 	bl	800825e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	699a      	ldr	r2, [r3, #24]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800787c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6999      	ldr	r1, [r3, #24]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	021a      	lsls	r2, r3, #8
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	619a      	str	r2, [r3, #24]
 8007892:	e040      	b.n	8007916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b08      	cmp	r3, #8
 8007898:	d11b      	bne.n	80078d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f000 fd45 	bl	8008338 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 020c 	bic.w	r2, r2, #12
 80078bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69d9      	ldr	r1, [r3, #28]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	61da      	str	r2, [r3, #28]
 80078d0:	e021      	b.n	8007916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	d11c      	bne.n	8007912 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6818      	ldr	r0, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6819      	ldr	r1, [r3, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f000 fd62 	bl	80083b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80078fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69d9      	ldr	r1, [r3, #28]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	021a      	lsls	r2, r3, #8
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	61da      	str	r2, [r3, #28]
 8007910:	e001      	b.n	8007916 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007942:	2302      	movs	r3, #2
 8007944:	e0ae      	b.n	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b0c      	cmp	r3, #12
 8007952:	f200 809f 	bhi.w	8007a94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007991 	.word	0x08007991
 8007960:	08007a95 	.word	0x08007a95
 8007964:	08007a95 	.word	0x08007a95
 8007968:	08007a95 	.word	0x08007a95
 800796c:	080079d1 	.word	0x080079d1
 8007970:	08007a95 	.word	0x08007a95
 8007974:	08007a95 	.word	0x08007a95
 8007978:	08007a95 	.word	0x08007a95
 800797c:	08007a13 	.word	0x08007a13
 8007980:	08007a95 	.word	0x08007a95
 8007984:	08007a95 	.word	0x08007a95
 8007988:	08007a95 	.word	0x08007a95
 800798c:	08007a53 	.word	0x08007a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fa0e 	bl	8007db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0208 	orr.w	r2, r2, #8
 80079aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0204 	bic.w	r2, r2, #4
 80079ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6999      	ldr	r1, [r3, #24]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	691a      	ldr	r2, [r3, #16]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
      break;
 80079ce:	e064      	b.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fa5e 	bl	8007e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6999      	ldr	r1, [r3, #24]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	021a      	lsls	r2, r3, #8
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	619a      	str	r2, [r3, #24]
      break;
 8007a10:	e043      	b.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fab3 	bl	8007f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f042 0208 	orr.w	r2, r2, #8
 8007a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0204 	bic.w	r2, r2, #4
 8007a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69d9      	ldr	r1, [r3, #28]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	691a      	ldr	r2, [r3, #16]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	61da      	str	r2, [r3, #28]
      break;
 8007a50:	e023      	b.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fb07 	bl	800806c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69d9      	ldr	r1, [r3, #28]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	021a      	lsls	r2, r3, #8
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	61da      	str	r2, [r3, #28]
      break;
 8007a92:	e002      	b.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
      break;
 8007a98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e0b4      	b.n	8007c32 <HAL_TIM_ConfigClockSource+0x186>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b00:	d03e      	beq.n	8007b80 <HAL_TIM_ConfigClockSource+0xd4>
 8007b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b06:	f200 8087 	bhi.w	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	f000 8086 	beq.w	8007c1e <HAL_TIM_ConfigClockSource+0x172>
 8007b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b16:	d87f      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b18:	2b70      	cmp	r3, #112	; 0x70
 8007b1a:	d01a      	beq.n	8007b52 <HAL_TIM_ConfigClockSource+0xa6>
 8007b1c:	2b70      	cmp	r3, #112	; 0x70
 8007b1e:	d87b      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b20:	2b60      	cmp	r3, #96	; 0x60
 8007b22:	d050      	beq.n	8007bc6 <HAL_TIM_ConfigClockSource+0x11a>
 8007b24:	2b60      	cmp	r3, #96	; 0x60
 8007b26:	d877      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b28:	2b50      	cmp	r3, #80	; 0x50
 8007b2a:	d03c      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0xfa>
 8007b2c:	2b50      	cmp	r3, #80	; 0x50
 8007b2e:	d873      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b30:	2b40      	cmp	r3, #64	; 0x40
 8007b32:	d058      	beq.n	8007be6 <HAL_TIM_ConfigClockSource+0x13a>
 8007b34:	2b40      	cmp	r3, #64	; 0x40
 8007b36:	d86f      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b38:	2b30      	cmp	r3, #48	; 0x30
 8007b3a:	d064      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x15a>
 8007b3c:	2b30      	cmp	r3, #48	; 0x30
 8007b3e:	d86b      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d060      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x15a>
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d867      	bhi.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d05c      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x15a>
 8007b4c:	2b10      	cmp	r3, #16
 8007b4e:	d05a      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0x15a>
 8007b50:	e062      	b.n	8007c18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	6899      	ldr	r1, [r3, #8]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f000 fc7d 	bl	8008460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	609a      	str	r2, [r3, #8]
      break;
 8007b7e:	e04f      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6818      	ldr	r0, [r3, #0]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	6899      	ldr	r1, [r3, #8]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f000 fc66 	bl	8008460 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ba2:	609a      	str	r2, [r3, #8]
      break;
 8007ba4:	e03c      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	6859      	ldr	r1, [r3, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f000 fb24 	bl	8008200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2150      	movs	r1, #80	; 0x50
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fc33 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007bc4:	e02c      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6818      	ldr	r0, [r3, #0]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	6859      	ldr	r1, [r3, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	f000 fb80 	bl	80082d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2160      	movs	r1, #96	; 0x60
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fc23 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007be4:	e01c      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	6859      	ldr	r1, [r3, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f000 fb04 	bl	8008200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2140      	movs	r1, #64	; 0x40
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fc13 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007c04:	e00c      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4610      	mov	r0, r2
 8007c12:	f000 fc0a 	bl	800842a <TIM_ITRx_SetConfig>
      break;
 8007c16:	e003      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1c:	e000      	b.n	8007c20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c42:	bf00      	nop
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a40      	ldr	r2, [pc, #256]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d00f      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a3d      	ldr	r2, [pc, #244]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a3c      	ldr	r2, [pc, #240]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a3b      	ldr	r2, [pc, #236]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a3a      	ldr	r2, [pc, #232]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d108      	bne.n	8007cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd8:	d027      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <TIM_Base_SetConfig+0x118>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d023      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2b      	ldr	r2, [pc, #172]	; (8007d94 <TIM_Base_SetConfig+0x11c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2a      	ldr	r2, [pc, #168]	; (8007d98 <TIM_Base_SetConfig+0x120>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d017      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <TIM_Base_SetConfig+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <TIM_Base_SetConfig+0x130>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a25      	ldr	r2, [pc, #148]	; (8007dac <TIM_Base_SetConfig+0x134>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d007      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a24      	ldr	r2, [pc, #144]	; (8007db0 <TIM_Base_SetConfig+0x138>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a23      	ldr	r2, [pc, #140]	; (8007db4 <TIM_Base_SetConfig+0x13c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d108      	bne.n	8007d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a0a      	ldr	r2, [pc, #40]	; (8007d8c <TIM_Base_SetConfig+0x114>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a0c      	ldr	r2, [pc, #48]	; (8007d9c <TIM_Base_SetConfig+0x124>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d103      	bne.n	8007d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	615a      	str	r2, [r3, #20]
}
 8007d7e:	bf00      	nop
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40000400 	.word	0x40000400
 8007d94:	40000800 	.word	0x40000800
 8007d98:	40000c00 	.word	0x40000c00
 8007d9c:	40010400 	.word	0x40010400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800
 8007dac:	40001800 	.word	0x40001800
 8007db0:	40001c00 	.word	0x40001c00
 8007db4:	40002000 	.word	0x40002000

08007db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f023 0201 	bic.w	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f023 0302 	bic.w	r3, r3, #2
 8007e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <TIM_OC1_SetConfig+0xd8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_OC1_SetConfig+0x64>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <TIM_OC1_SetConfig+0xdc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d10c      	bne.n	8007e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f023 0308 	bic.w	r3, r3, #8
 8007e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f023 0304 	bic.w	r3, r3, #4
 8007e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a15      	ldr	r2, [pc, #84]	; (8007e90 <TIM_OC1_SetConfig+0xd8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d003      	beq.n	8007e46 <TIM_OC1_SetConfig+0x8e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a14      	ldr	r2, [pc, #80]	; (8007e94 <TIM_OC1_SetConfig+0xdc>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d111      	bne.n	8007e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	621a      	str	r2, [r3, #32]
}
 8007e84:	bf00      	nop
 8007e86:	371c      	adds	r7, #28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40010400 	.word	0x40010400

08007e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0210 	bic.w	r2, r3, #16
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f023 0320 	bic.w	r3, r3, #32
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a22      	ldr	r2, [pc, #136]	; (8007f7c <TIM_OC2_SetConfig+0xe4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <TIM_OC2_SetConfig+0x68>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <TIM_OC2_SetConfig+0xe8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d10d      	bne.n	8007f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <TIM_OC2_SetConfig+0xe4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC2_SetConfig+0x94>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <TIM_OC2_SetConfig+0xe8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d113      	bne.n	8007f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	621a      	str	r2, [r3, #32]
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40010400 	.word	0x40010400

08007f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a21      	ldr	r2, [pc, #132]	; (8008064 <TIM_OC3_SetConfig+0xe0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d003      	beq.n	8007fea <TIM_OC3_SetConfig+0x66>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a20      	ldr	r2, [pc, #128]	; (8008068 <TIM_OC3_SetConfig+0xe4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d10d      	bne.n	8008006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a16      	ldr	r2, [pc, #88]	; (8008064 <TIM_OC3_SetConfig+0xe0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d003      	beq.n	8008016 <TIM_OC3_SetConfig+0x92>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a15      	ldr	r2, [pc, #84]	; (8008068 <TIM_OC3_SetConfig+0xe4>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d113      	bne.n	800803e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	621a      	str	r2, [r3, #32]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40010000 	.word	0x40010000
 8008068:	40010400 	.word	0x40010400

0800806c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800809a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	021b      	lsls	r3, r3, #8
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	031b      	lsls	r3, r3, #12
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a12      	ldr	r2, [pc, #72]	; (8008110 <TIM_OC4_SetConfig+0xa4>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d003      	beq.n	80080d4 <TIM_OC4_SetConfig+0x68>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a11      	ldr	r2, [pc, #68]	; (8008114 <TIM_OC4_SetConfig+0xa8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d109      	bne.n	80080e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	019b      	lsls	r3, r3, #6
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40010000 	.word	0x40010000
 8008114:	40010400 	.word	0x40010400

08008118 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0201 	bic.w	r2, r3, #1
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a28      	ldr	r2, [pc, #160]	; (80081e4 <TIM_TI1_SetConfig+0xcc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d01b      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814c:	d017      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4a25      	ldr	r2, [pc, #148]	; (80081e8 <TIM_TI1_SetConfig+0xd0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d013      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a24      	ldr	r2, [pc, #144]	; (80081ec <TIM_TI1_SetConfig+0xd4>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00f      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a23      	ldr	r2, [pc, #140]	; (80081f0 <TIM_TI1_SetConfig+0xd8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00b      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a22      	ldr	r2, [pc, #136]	; (80081f4 <TIM_TI1_SetConfig+0xdc>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4a21      	ldr	r2, [pc, #132]	; (80081f8 <TIM_TI1_SetConfig+0xe0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d003      	beq.n	800817e <TIM_TI1_SetConfig+0x66>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a20      	ldr	r2, [pc, #128]	; (80081fc <TIM_TI1_SetConfig+0xe4>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d101      	bne.n	8008182 <TIM_TI1_SetConfig+0x6a>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <TIM_TI1_SetConfig+0x6c>
 8008182:	2300      	movs	r3, #0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d008      	beq.n	800819a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e003      	b.n	80081a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f023 030a 	bic.w	r3, r3, #10
 80081bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f003 030a 	and.w	r3, r3, #10
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	697a      	ldr	r2, [r7, #20]
 80081ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40001800 	.word	0x40001800

08008200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f023 0201 	bic.w	r2, r3, #1
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800822a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 030a 	bic.w	r3, r3, #10
 800823c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	621a      	str	r2, [r3, #32]
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800825e:	b480      	push	{r7}
 8008260:	b087      	sub	sp, #28
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
 800826a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f023 0210 	bic.w	r2, r3, #16
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800828a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800829c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	031b      	lsls	r3, r3, #12
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80082b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	4313      	orrs	r3, r2
 80082be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	621a      	str	r2, [r3, #32]
}
 80082cc:	bf00      	nop
 80082ce:	371c      	adds	r7, #28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f023 0210 	bic.w	r2, r3, #16
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	031b      	lsls	r3, r3, #12
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008314:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	621a      	str	r2, [r3, #32]
}
 800832c:	bf00      	nop
 800832e:	371c      	adds	r7, #28
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f023 0303 	bic.w	r3, r3, #3
 8008364:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4313      	orrs	r3, r2
 800836c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008374:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	011b      	lsls	r3, r3, #4
 800837a:	b2db      	uxtb	r3, r3
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	4313      	orrs	r3, r2
 8008380:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008388:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	031b      	lsls	r3, r3, #12
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008402:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	031b      	lsls	r3, r3, #12
 8008408:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800840c:	693a      	ldr	r2, [r7, #16]
 800840e:	4313      	orrs	r3, r2
 8008410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	621a      	str	r2, [r3, #32]
}
 800841e:	bf00      	nop
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800842a:	b480      	push	{r7}
 800842c:	b085      	sub	sp, #20
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	f043 0307 	orr.w	r3, r3, #7
 800844c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	609a      	str	r2, [r3, #8]
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800847a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	021a      	lsls	r2, r3, #8
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	431a      	orrs	r2, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4313      	orrs	r3, r2
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	609a      	str	r2, [r3, #8]
}
 8008494:	bf00      	nop
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2201      	movs	r2, #1
 80084b4:	fa02 f303 	lsl.w	r3, r2, r3
 80084b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1a      	ldr	r2, [r3, #32]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6a1a      	ldr	r2, [r3, #32]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f003 031f 	and.w	r3, r3, #31
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	fa01 f303 	lsl.w	r3, r1, r3
 80084d8:	431a      	orrs	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
}
 80084de:	bf00      	nop
 80084e0:	371c      	adds	r7, #28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
	...

080084ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008500:	2302      	movs	r3, #2
 8008502:	e05a      	b.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2202      	movs	r2, #2
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a21      	ldr	r2, [pc, #132]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d022      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008550:	d01d      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d018      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d013      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1a      	ldr	r2, [pc, #104]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d00e      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a17      	ldr	r2, [pc, #92]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d004      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d10c      	bne.n	80085a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4313      	orrs	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40000400 	.word	0x40000400
 80085d0:	40000800 	.word	0x40000800
 80085d4:	40000c00 	.word	0x40000c00
 80085d8:	40010400 	.word	0x40010400
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40001800 	.word	0x40001800

080085e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e03d      	b.n	800867c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e03f      	b.n	8008742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d106      	bne.n	80086dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7f9 fe48 	bl	800236c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2224      	movs	r2, #36	; 0x24
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 ffc9 	bl	800968c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	691a      	ldr	r2, [r3, #16]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	695a      	ldr	r2, [r3, #20]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08c      	sub	sp, #48	; 0x30
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b20      	cmp	r3, #32
 8008764:	d165      	bne.n	8008832 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <HAL_UART_Transmit_DMA+0x26>
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e05e      	b.n	8008834 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_UART_Transmit_DMA+0x38>
 8008780:	2302      	movs	r3, #2
 8008782:	e057      	b.n	8008834 <HAL_UART_Transmit_DMA+0xe8>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2221      	movs	r2, #33	; 0x21
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b0:	4a22      	ldr	r2, [pc, #136]	; (800883c <HAL_UART_Transmit_DMA+0xf0>)
 80087b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	4a21      	ldr	r2, [pc, #132]	; (8008840 <HAL_UART_Transmit_DMA+0xf4>)
 80087ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c0:	4a20      	ldr	r2, [pc, #128]	; (8008844 <HAL_UART_Transmit_DMA+0xf8>)
 80087c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c8:	2200      	movs	r2, #0
 80087ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80087cc:	f107 0308 	add.w	r3, r7, #8
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	6819      	ldr	r1, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3304      	adds	r3, #4
 80087e0:	461a      	mov	r2, r3
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f7fc f938 	bl	8004a58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3314      	adds	r3, #20
 8008800:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	617b      	str	r3, [r7, #20]
   return(result);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3314      	adds	r3, #20
 8008818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881a:	627a      	str	r2, [r7, #36]	; 0x24
 800881c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6a39      	ldr	r1, [r7, #32]
 8008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	61fb      	str	r3, [r7, #28]
   return(result);
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e5      	bne.n	80087fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	e000      	b.n	8008834 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008832:	2302      	movs	r3, #2
  }
}
 8008834:	4618      	mov	r0, r3
 8008836:	3730      	adds	r7, #48	; 0x30
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	08008f2d 	.word	0x08008f2d
 8008840:	08008fc7 	.word	0x08008fc7
 8008844:	0800913f 	.word	0x0800913f

08008848 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	4613      	mov	r3, r2
 8008854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b20      	cmp	r3, #32
 8008860:	d11d      	bne.n	800889e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_UART_Receive_DMA+0x26>
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e016      	b.n	80088a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_UART_Receive_DMA+0x38>
 800887c:	2302      	movs	r3, #2
 800887e:	e00f      	b.n	80088a0 <HAL_UART_Receive_DMA+0x58>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800888e:	88fb      	ldrh	r3, [r7, #6]
 8008890:	461a      	mov	r2, r3
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fc9d 	bl	80091d4 <UART_Start_Receive_DMA>
 800889a:	4603      	mov	r3, r0
 800889c:	e000      	b.n	80088a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800889e:	2302      	movs	r3, #2
  }
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b090      	sub	sp, #64	; 0x40
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088be:	2b80      	cmp	r3, #128	; 0x80
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b21      	cmp	r3, #33	; 0x21
 80088d4:	d128      	bne.n	8008928 <HAL_UART_DMAStop+0x80>
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d025      	beq.n	8008928 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3314      	adds	r3, #20
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	623b      	str	r3, [r7, #32]
   return(result);
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3314      	adds	r3, #20
 80088fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088fc:	633a      	str	r2, [r7, #48]	; 0x30
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e5      	bne.n	80088dc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008914:	2b00      	cmp	r3, #0
 8008916:	d004      	beq.n	8008922 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891c:	4618      	mov	r0, r3
 800891e:	f7fc f8f3 	bl	8004b08 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fcf0 	bl	8009308 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	2b40      	cmp	r3, #64	; 0x40
 8008934:	bf0c      	ite	eq
 8008936:	2301      	moveq	r3, #1
 8008938:	2300      	movne	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b22      	cmp	r3, #34	; 0x22
 8008948:	d128      	bne.n	800899c <HAL_UART_DMAStop+0xf4>
 800894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d025      	beq.n	800899c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3314      	adds	r3, #20
 8008956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008970:	61fa      	str	r2, [r7, #28]
 8008972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	69b9      	ldr	r1, [r7, #24]
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	617b      	str	r3, [r7, #20]
   return(result);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e5      	bne.n	8008950 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d004      	beq.n	8008996 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008990:	4618      	mov	r0, r3
 8008992:	f7fc f8b9 	bl	8004b08 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fcde 	bl	8009358 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3740      	adds	r7, #64	; 0x40
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0ba      	sub	sp, #232	; 0xe8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80089e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10f      	bne.n	8008a0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <HAL_UART_IRQHandler+0x66>
 80089fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fe:	f003 0320 	and.w	r3, r3, #32
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fd85 	bl	8009516 <UART_Receive_IT>
      return;
 8008a0c:	e256      	b.n	8008ebc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80de 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x22c>
 8008a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d106      	bne.n	8008a32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80d1 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <HAL_UART_IRQHandler+0xae>
 8008a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4e:	f043 0201 	orr.w	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5a:	f003 0304 	and.w	r3, r3, #4
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00b      	beq.n	8008a7a <HAL_UART_IRQHandler+0xd2>
 8008a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	f043 0202 	orr.w	r2, r3, #2
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00b      	beq.n	8008a9e <HAL_UART_IRQHandler+0xf6>
 8008a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	f043 0204 	orr.w	r2, r3, #4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d011      	beq.n	8008ace <HAL_UART_IRQHandler+0x126>
 8008aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d105      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f043 0208 	orr.w	r2, r3, #8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 81ed 	beq.w	8008eb2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d008      	beq.n	8008af6 <HAL_UART_IRQHandler+0x14e>
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ae8:	f003 0320 	and.w	r3, r3, #32
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fd10 	bl	8009516 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b00:	2b40      	cmp	r3, #64	; 0x40
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f003 0308 	and.w	r3, r3, #8
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d103      	bne.n	8008b22 <HAL_UART_IRQHandler+0x17a>
 8008b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d04f      	beq.n	8008bc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fc18 	bl	8009358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d141      	bne.n	8008bba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3314      	adds	r3, #20
 8008b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	3314      	adds	r3, #20
 8008b5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1d9      	bne.n	8008b36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d013      	beq.n	8008bb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	4a7d      	ldr	r2, [pc, #500]	; (8008d84 <HAL_UART_IRQHandler+0x3dc>)
 8008b90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fc f826 	bl	8004be8 <HAL_DMA_Abort_IT>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d016      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bac:	4610      	mov	r0, r2
 8008bae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb0:	e00e      	b.n	8008bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9a4 	bl	8008f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb8:	e00a      	b.n	8008bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f9a0 	bl	8008f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc0:	e006      	b.n	8008bd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f99c 	bl	8008f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bce:	e170      	b.n	8008eb2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd0:	bf00      	nop
    return;
 8008bd2:	e16e      	b.n	8008eb2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	f040 814a 	bne.w	8008e72 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be2:	f003 0310 	and.w	r3, r3, #16
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8143 	beq.w	8008e72 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 813c 	beq.w	8008e72 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	60bb      	str	r3, [r7, #8]
 8008c0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b40      	cmp	r3, #64	; 0x40
 8008c1c:	f040 80b4 	bne.w	8008d88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 8140 	beq.w	8008eb6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	f080 8139 	bcs.w	8008eb6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	f000 8088 	beq.w	8008d6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	330c      	adds	r3, #12
 8008c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1d9      	bne.n	8008c5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e1      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3314      	adds	r3, #20
 8008d02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e3      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d3a:	f023 0310 	bic.w	r3, r3, #16
 8008d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	330c      	adds	r3, #12
 8008d48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e3      	bne.n	8008d28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fb fecf 	bl	8004b08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f8ca 	bl	8008f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d80:	e099      	b.n	8008eb6 <HAL_UART_IRQHandler+0x50e>
 8008d82:	bf00      	nop
 8008d84:	0800941f 	.word	0x0800941f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 808b 	beq.w	8008eba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 8086 	beq.w	8008eba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	e853 3f00 	ldrex	r3, [r3]
 8008dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008dd2:	647a      	str	r2, [r7, #68]	; 0x44
 8008dd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e3      	bne.n	8008dae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3314      	adds	r3, #20
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	623b      	str	r3, [r7, #32]
   return(result);
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	f023 0301 	bic.w	r3, r3, #1
 8008dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3314      	adds	r3, #20
 8008e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e0a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e3      	bne.n	8008de6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	330c      	adds	r3, #12
 8008e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0310 	bic.w	r3, r3, #16
 8008e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	330c      	adds	r3, #12
 8008e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e50:	61fa      	str	r2, [r7, #28]
 8008e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	69b9      	ldr	r1, [r7, #24]
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e3      	bne.n	8008e2c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f852 	bl	8008f14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e70:	e023      	b.n	8008eba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d009      	beq.n	8008e92 <HAL_UART_IRQHandler+0x4ea>
 8008e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fadb 	bl	8009446 <UART_Transmit_IT>
    return;
 8008e90:	e014      	b.n	8008ebc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00e      	beq.n	8008ebc <HAL_UART_IRQHandler+0x514>
 8008e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d008      	beq.n	8008ebc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fb1b 	bl	80094e6 <UART_EndTransmit_IT>
    return;
 8008eb0:	e004      	b.n	8008ebc <HAL_UART_IRQHandler+0x514>
    return;
 8008eb2:	bf00      	nop
 8008eb4:	e002      	b.n	8008ebc <HAL_UART_IRQHandler+0x514>
      return;
 8008eb6:	bf00      	nop
 8008eb8:	e000      	b.n	8008ebc <HAL_UART_IRQHandler+0x514>
      return;
 8008eba:	bf00      	nop
  }
}
 8008ebc:	37e8      	adds	r7, #232	; 0xe8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop

08008ec4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b090      	sub	sp, #64	; 0x40
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d137      	bne.n	8008fb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3314      	adds	r3, #20
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3314      	adds	r3, #20
 8008f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8008f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e5      	bne.n	8008f4e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f98:	637b      	str	r3, [r7, #52]	; 0x34
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	330c      	adds	r3, #12
 8008fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fa2:	61fa      	str	r2, [r7, #28]
 8008fa4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	69b9      	ldr	r1, [r7, #24]
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e5      	bne.n	8008f82 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fb6:	e002      	b.n	8008fbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008fb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008fba:	f7f9 fd15 	bl	80029e8 <HAL_UART_TxCpltCallback>
}
 8008fbe:	bf00      	nop
 8008fc0:	3740      	adds	r7, #64	; 0x40
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f7ff ff75 	bl	8008ec4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b09c      	sub	sp, #112	; 0x70
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fee:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d172      	bne.n	80090e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009000:	2200      	movs	r2, #0
 8009002:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800901a:	66bb      	str	r3, [r7, #104]	; 0x68
 800901c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009024:	65ba      	str	r2, [r7, #88]	; 0x58
 8009026:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800902a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e5      	bne.n	8009004 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3314      	adds	r3, #20
 800903e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	667b      	str	r3, [r7, #100]	; 0x64
 8009050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	3314      	adds	r3, #20
 8009056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009058:	647a      	str	r2, [r7, #68]	; 0x44
 800905a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800905e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e5      	bne.n	8009038 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800906c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3314      	adds	r3, #20
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	e853 3f00 	ldrex	r3, [r3]
 800907a:	623b      	str	r3, [r7, #32]
   return(result);
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009082:	663b      	str	r3, [r7, #96]	; 0x60
 8009084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3314      	adds	r3, #20
 800908a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800908c:	633a      	str	r2, [r7, #48]	; 0x30
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009094:	e841 2300 	strex	r3, r2, [r1]
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1e5      	bne.n	800906c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a2:	2220      	movs	r2, #32
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d119      	bne.n	80090e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	330c      	adds	r3, #12
 80090b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	60fb      	str	r3, [r7, #12]
   return(result);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0310 	bic.w	r3, r3, #16
 80090c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	330c      	adds	r3, #12
 80090ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d0:	61fa      	str	r2, [r7, #28]
 80090d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	e841 2300 	strex	r3, r2, [r1]
 80090dc:	617b      	str	r3, [r7, #20]
   return(result);
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1e5      	bne.n	80090b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d106      	bne.n	80090fa <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090f0:	4619      	mov	r1, r3
 80090f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090f4:	f7ff ff0e 	bl	8008f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090f8:	e002      	b.n	8009100 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80090fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80090fc:	f7ff feec 	bl	8008ed8 <HAL_UART_RxCpltCallback>
}
 8009100:	bf00      	nop
 8009102:	3770      	adds	r7, #112	; 0x70
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b084      	sub	sp, #16
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800911a:	2b01      	cmp	r3, #1
 800911c:	d108      	bne.n	8009130 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009122:	085b      	lsrs	r3, r3, #1
 8009124:	b29b      	uxth	r3, r3
 8009126:	4619      	mov	r1, r3
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fef3 	bl	8008f14 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800912e:	e002      	b.n	8009136 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7ff fedb 	bl	8008eec <HAL_UART_RxHalfCpltCallback>
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800915a:	2b80      	cmp	r3, #128	; 0x80
 800915c:	bf0c      	ite	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	2300      	movne	r3, #0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b21      	cmp	r3, #33	; 0x21
 8009170:	d108      	bne.n	8009184 <UART_DMAError+0x46>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2200      	movs	r2, #0
 800917c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800917e:	68b8      	ldr	r0, [r7, #8]
 8009180:	f000 f8c2 	bl	8009308 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	bf0c      	ite	eq
 8009192:	2301      	moveq	r3, #1
 8009194:	2300      	movne	r3, #0
 8009196:	b2db      	uxtb	r3, r3
 8009198:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b22      	cmp	r3, #34	; 0x22
 80091a4:	d108      	bne.n	80091b8 <UART_DMAError+0x7a>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80091b2:	68b8      	ldr	r0, [r7, #8]
 80091b4:	f000 f8d0 	bl	8009358 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	f043 0210 	orr.w	r2, r3, #16
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091c4:	68b8      	ldr	r0, [r7, #8]
 80091c6:	f7ff fe9b 	bl	8008f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091ca:	bf00      	nop
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b098      	sub	sp, #96	; 0x60
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2222      	movs	r2, #34	; 0x22
 80091f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	4a3e      	ldr	r2, [pc, #248]	; (80092fc <UART_Start_Receive_DMA+0x128>)
 8009202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	4a3d      	ldr	r2, [pc, #244]	; (8009300 <UART_Start_Receive_DMA+0x12c>)
 800920a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	4a3c      	ldr	r2, [pc, #240]	; (8009304 <UART_Start_Receive_DMA+0x130>)
 8009212:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	2200      	movs	r2, #0
 800921a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800921c:	f107 0308 	add.w	r3, r7, #8
 8009220:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3304      	adds	r3, #4
 800922c:	4619      	mov	r1, r3
 800922e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	f7fb fc10 	bl	8004a58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	613b      	str	r3, [r7, #16]
 800924c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	330c      	adds	r3, #12
 800925c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800926c:	65bb      	str	r3, [r7, #88]	; 0x58
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330c      	adds	r3, #12
 8009274:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009276:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800927c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e5      	bne.n	8009256 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3314      	adds	r3, #20
 8009290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800929a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	657b      	str	r3, [r7, #84]	; 0x54
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3314      	adds	r3, #20
 80092a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80092ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e5      	bne.n	800928a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3314      	adds	r3, #20
 80092c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	e853 3f00 	ldrex	r3, [r3]
 80092cc:	617b      	str	r3, [r7, #20]
   return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3314      	adds	r3, #20
 80092dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092de:	627a      	str	r2, [r7, #36]	; 0x24
 80092e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6a39      	ldr	r1, [r7, #32]
 80092e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e5      	bne.n	80092be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3760      	adds	r7, #96	; 0x60
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	08008fe3 	.word	0x08008fe3
 8009300:	08009109 	.word	0x08009109
 8009304:	0800913f 	.word	0x0800913f

08009308 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b089      	sub	sp, #36	; 0x24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	330c      	adds	r3, #12
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	61ba      	str	r2, [r7, #24]
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	6979      	ldr	r1, [r7, #20]
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	613b      	str	r3, [r7, #16]
   return(result);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e5      	bne.n	8009310 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800934c:	bf00      	nop
 800934e:	3724      	adds	r7, #36	; 0x24
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b095      	sub	sp, #84	; 0x54
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009380:	643a      	str	r2, [r7, #64]	; 0x40
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800938e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e5      	bne.n	8009360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3314      	adds	r3, #20
 800939a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	e853 3f00 	ldrex	r3, [r3]
 80093a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093a4:	69fb      	ldr	r3, [r7, #28]
 80093a6:	f023 0301 	bic.w	r3, r3, #1
 80093aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3314      	adds	r3, #20
 80093b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e5      	bne.n	8009394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d119      	bne.n	8009404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	330c      	adds	r3, #12
 80093d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f023 0310 	bic.w	r3, r3, #16
 80093e6:	647b      	str	r3, [r7, #68]	; 0x44
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	330c      	adds	r3, #12
 80093ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093f0:	61ba      	str	r2, [r7, #24]
 80093f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	613b      	str	r3, [r7, #16]
   return(result);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e5      	bne.n	80093d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2220      	movs	r2, #32
 8009408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009412:	bf00      	nop
 8009414:	3754      	adds	r7, #84	; 0x54
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7ff fd61 	bl	8008f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800943e:	bf00      	nop
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b21      	cmp	r3, #33	; 0x21
 8009458:	d13e      	bne.n	80094d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009462:	d114      	bne.n	800948e <UART_Transmit_IT+0x48>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d110      	bne.n	800948e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009480:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	1c9a      	adds	r2, r3, #2
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	621a      	str	r2, [r3, #32]
 800948c:	e008      	b.n	80094a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6211      	str	r1, [r2, #32]
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4619      	mov	r1, r3
 80094ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10f      	bne.n	80094d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68da      	ldr	r2, [r3, #12]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	e000      	b.n	80094da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094d8:	2302      	movs	r3, #2
  }
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3714      	adds	r7, #20
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7f9 fa6e 	bl	80029e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b08c      	sub	sp, #48	; 0x30
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b22      	cmp	r3, #34	; 0x22
 8009528:	f040 80ab 	bne.w	8009682 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009534:	d117      	bne.n	8009566 <UART_Receive_IT+0x50>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d113      	bne.n	8009566 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800953e:	2300      	movs	r3, #0
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b29b      	uxth	r3, r3
 8009550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009554:	b29a      	uxth	r2, r3
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955e:	1c9a      	adds	r2, r3, #2
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	629a      	str	r2, [r3, #40]	; 0x28
 8009564:	e026      	b.n	80095b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800956c:	2300      	movs	r3, #0
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009578:	d007      	beq.n	800958a <UART_Receive_IT+0x74>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <UART_Receive_IT+0x82>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	b2da      	uxtb	r2, r3
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e008      	b.n	80095aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29b      	uxth	r3, r3
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4619      	mov	r1, r3
 80095c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d15a      	bne.n	800967e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0220 	bic.w	r2, r2, #32
 80095d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0201 	bic.w	r2, r2, #1
 80095f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	2b01      	cmp	r3, #1
 8009606:	d135      	bne.n	8009674 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	330c      	adds	r3, #12
 8009614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	613b      	str	r3, [r7, #16]
   return(result);
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f023 0310 	bic.w	r3, r3, #16
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	330c      	adds	r3, #12
 800962c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962e:	623a      	str	r2, [r7, #32]
 8009630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009632:	69f9      	ldr	r1, [r7, #28]
 8009634:	6a3a      	ldr	r2, [r7, #32]
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	61bb      	str	r3, [r7, #24]
   return(result);
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e5      	bne.n	800960e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b10      	cmp	r3, #16
 800964e:	d10a      	bne.n	8009666 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fc51 	bl	8008f14 <HAL_UARTEx_RxEventCallback>
 8009672:	e002      	b.n	800967a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff fc2f 	bl	8008ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	e002      	b.n	8009684 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e000      	b.n	8009684 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009682:	2302      	movs	r3, #2
  }
}
 8009684:	4618      	mov	r0, r3
 8009686:	3730      	adds	r7, #48	; 0x30
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b09f      	sub	sp, #124	; 0x7c
 8009692:	af00      	add	r7, sp, #0
 8009694:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80096a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a2:	68d9      	ldr	r1, [r3, #12]
 80096a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	ea40 0301 	orr.w	r3, r0, r1
 80096ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	431a      	orrs	r2, r3
 80096b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	431a      	orrs	r2, r3
 80096be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80096c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096d0:	f021 010c 	bic.w	r1, r1, #12
 80096d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096da:	430b      	orrs	r3, r1
 80096dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ea:	6999      	ldr	r1, [r3, #24]
 80096ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	ea40 0301 	orr.w	r3, r0, r1
 80096f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4bc5      	ldr	r3, [pc, #788]	; (8009a10 <UART_SetConfig+0x384>)
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d004      	beq.n	800970a <UART_SetConfig+0x7e>
 8009700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	4bc3      	ldr	r3, [pc, #780]	; (8009a14 <UART_SetConfig+0x388>)
 8009706:	429a      	cmp	r2, r3
 8009708:	d103      	bne.n	8009712 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800970a:	f7fd fbbf 	bl	8006e8c <HAL_RCC_GetPCLK2Freq>
 800970e:	6778      	str	r0, [r7, #116]	; 0x74
 8009710:	e002      	b.n	8009718 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009712:	f7fd fba7 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8009716:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009720:	f040 80b6 	bne.w	8009890 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009726:	461c      	mov	r4, r3
 8009728:	f04f 0500 	mov.w	r5, #0
 800972c:	4622      	mov	r2, r4
 800972e:	462b      	mov	r3, r5
 8009730:	1891      	adds	r1, r2, r2
 8009732:	6439      	str	r1, [r7, #64]	; 0x40
 8009734:	415b      	adcs	r3, r3
 8009736:	647b      	str	r3, [r7, #68]	; 0x44
 8009738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800973c:	1912      	adds	r2, r2, r4
 800973e:	eb45 0303 	adc.w	r3, r5, r3
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f04f 0100 	mov.w	r1, #0
 800974a:	00d9      	lsls	r1, r3, #3
 800974c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009750:	00d0      	lsls	r0, r2, #3
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	1911      	adds	r1, r2, r4
 8009758:	6639      	str	r1, [r7, #96]	; 0x60
 800975a:	416b      	adcs	r3, r5
 800975c:	667b      	str	r3, [r7, #100]	; 0x64
 800975e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	461a      	mov	r2, r3
 8009764:	f04f 0300 	mov.w	r3, #0
 8009768:	1891      	adds	r1, r2, r2
 800976a:	63b9      	str	r1, [r7, #56]	; 0x38
 800976c:	415b      	adcs	r3, r3
 800976e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009774:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009778:	f7f7 fa06 	bl	8000b88 <__aeabi_uldivmod>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4ba5      	ldr	r3, [pc, #660]	; (8009a18 <UART_SetConfig+0x38c>)
 8009782:	fba3 2302 	umull	r2, r3, r3, r2
 8009786:	095b      	lsrs	r3, r3, #5
 8009788:	011e      	lsls	r6, r3, #4
 800978a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800978c:	461c      	mov	r4, r3
 800978e:	f04f 0500 	mov.w	r5, #0
 8009792:	4622      	mov	r2, r4
 8009794:	462b      	mov	r3, r5
 8009796:	1891      	adds	r1, r2, r2
 8009798:	6339      	str	r1, [r7, #48]	; 0x30
 800979a:	415b      	adcs	r3, r3
 800979c:	637b      	str	r3, [r7, #52]	; 0x34
 800979e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80097a2:	1912      	adds	r2, r2, r4
 80097a4:	eb45 0303 	adc.w	r3, r5, r3
 80097a8:	f04f 0000 	mov.w	r0, #0
 80097ac:	f04f 0100 	mov.w	r1, #0
 80097b0:	00d9      	lsls	r1, r3, #3
 80097b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097b6:	00d0      	lsls	r0, r2, #3
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	1911      	adds	r1, r2, r4
 80097be:	65b9      	str	r1, [r7, #88]	; 0x58
 80097c0:	416b      	adcs	r3, r5
 80097c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	461a      	mov	r2, r3
 80097ca:	f04f 0300 	mov.w	r3, #0
 80097ce:	1891      	adds	r1, r2, r2
 80097d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80097d2:	415b      	adcs	r3, r3
 80097d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097de:	f7f7 f9d3 	bl	8000b88 <__aeabi_uldivmod>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4b8c      	ldr	r3, [pc, #560]	; (8009a18 <UART_SetConfig+0x38c>)
 80097e8:	fba3 1302 	umull	r1, r3, r3, r2
 80097ec:	095b      	lsrs	r3, r3, #5
 80097ee:	2164      	movs	r1, #100	; 0x64
 80097f0:	fb01 f303 	mul.w	r3, r1, r3
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	3332      	adds	r3, #50	; 0x32
 80097fa:	4a87      	ldr	r2, [pc, #540]	; (8009a18 <UART_SetConfig+0x38c>)
 80097fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009808:	441e      	add	r6, r3
 800980a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800980c:	4618      	mov	r0, r3
 800980e:	f04f 0100 	mov.w	r1, #0
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	1894      	adds	r4, r2, r2
 8009818:	623c      	str	r4, [r7, #32]
 800981a:	415b      	adcs	r3, r3
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
 800981e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009822:	1812      	adds	r2, r2, r0
 8009824:	eb41 0303 	adc.w	r3, r1, r3
 8009828:	f04f 0400 	mov.w	r4, #0
 800982c:	f04f 0500 	mov.w	r5, #0
 8009830:	00dd      	lsls	r5, r3, #3
 8009832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009836:	00d4      	lsls	r4, r2, #3
 8009838:	4622      	mov	r2, r4
 800983a:	462b      	mov	r3, r5
 800983c:	1814      	adds	r4, r2, r0
 800983e:	653c      	str	r4, [r7, #80]	; 0x50
 8009840:	414b      	adcs	r3, r1
 8009842:	657b      	str	r3, [r7, #84]	; 0x54
 8009844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	461a      	mov	r2, r3
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	1891      	adds	r1, r2, r2
 8009850:	61b9      	str	r1, [r7, #24]
 8009852:	415b      	adcs	r3, r3
 8009854:	61fb      	str	r3, [r7, #28]
 8009856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800985a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800985e:	f7f7 f993 	bl	8000b88 <__aeabi_uldivmod>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4b6c      	ldr	r3, [pc, #432]	; (8009a18 <UART_SetConfig+0x38c>)
 8009868:	fba3 1302 	umull	r1, r3, r3, r2
 800986c:	095b      	lsrs	r3, r3, #5
 800986e:	2164      	movs	r1, #100	; 0x64
 8009870:	fb01 f303 	mul.w	r3, r1, r3
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	00db      	lsls	r3, r3, #3
 8009878:	3332      	adds	r3, #50	; 0x32
 800987a:	4a67      	ldr	r2, [pc, #412]	; (8009a18 <UART_SetConfig+0x38c>)
 800987c:	fba2 2303 	umull	r2, r3, r2, r3
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	f003 0207 	and.w	r2, r3, #7
 8009886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4432      	add	r2, r6
 800988c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800988e:	e0b9      	b.n	8009a04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009892:	461c      	mov	r4, r3
 8009894:	f04f 0500 	mov.w	r5, #0
 8009898:	4622      	mov	r2, r4
 800989a:	462b      	mov	r3, r5
 800989c:	1891      	adds	r1, r2, r2
 800989e:	6139      	str	r1, [r7, #16]
 80098a0:	415b      	adcs	r3, r3
 80098a2:	617b      	str	r3, [r7, #20]
 80098a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098a8:	1912      	adds	r2, r2, r4
 80098aa:	eb45 0303 	adc.w	r3, r5, r3
 80098ae:	f04f 0000 	mov.w	r0, #0
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	00d9      	lsls	r1, r3, #3
 80098b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098bc:	00d0      	lsls	r0, r2, #3
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	eb12 0804 	adds.w	r8, r2, r4
 80098c6:	eb43 0905 	adc.w	r9, r3, r5
 80098ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	008b      	lsls	r3, r1, #2
 80098de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098e2:	0082      	lsls	r2, r0, #2
 80098e4:	4640      	mov	r0, r8
 80098e6:	4649      	mov	r1, r9
 80098e8:	f7f7 f94e 	bl	8000b88 <__aeabi_uldivmod>
 80098ec:	4602      	mov	r2, r0
 80098ee:	460b      	mov	r3, r1
 80098f0:	4b49      	ldr	r3, [pc, #292]	; (8009a18 <UART_SetConfig+0x38c>)
 80098f2:	fba3 2302 	umull	r2, r3, r3, r2
 80098f6:	095b      	lsrs	r3, r3, #5
 80098f8:	011e      	lsls	r6, r3, #4
 80098fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098fc:	4618      	mov	r0, r3
 80098fe:	f04f 0100 	mov.w	r1, #0
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	1894      	adds	r4, r2, r2
 8009908:	60bc      	str	r4, [r7, #8]
 800990a:	415b      	adcs	r3, r3
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009912:	1812      	adds	r2, r2, r0
 8009914:	eb41 0303 	adc.w	r3, r1, r3
 8009918:	f04f 0400 	mov.w	r4, #0
 800991c:	f04f 0500 	mov.w	r5, #0
 8009920:	00dd      	lsls	r5, r3, #3
 8009922:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009926:	00d4      	lsls	r4, r2, #3
 8009928:	4622      	mov	r2, r4
 800992a:	462b      	mov	r3, r5
 800992c:	1814      	adds	r4, r2, r0
 800992e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009930:	414b      	adcs	r3, r1
 8009932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f04f 0100 	mov.w	r1, #0
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	f04f 0300 	mov.w	r3, #0
 8009946:	008b      	lsls	r3, r1, #2
 8009948:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800994c:	0082      	lsls	r2, r0, #2
 800994e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009952:	f7f7 f919 	bl	8000b88 <__aeabi_uldivmod>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4b2f      	ldr	r3, [pc, #188]	; (8009a18 <UART_SetConfig+0x38c>)
 800995c:	fba3 1302 	umull	r1, r3, r3, r2
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	2164      	movs	r1, #100	; 0x64
 8009964:	fb01 f303 	mul.w	r3, r1, r3
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	3332      	adds	r3, #50	; 0x32
 800996e:	4a2a      	ldr	r2, [pc, #168]	; (8009a18 <UART_SetConfig+0x38c>)
 8009970:	fba2 2303 	umull	r2, r3, r2, r3
 8009974:	095b      	lsrs	r3, r3, #5
 8009976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800997a:	441e      	add	r6, r3
 800997c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800997e:	4618      	mov	r0, r3
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	1894      	adds	r4, r2, r2
 800998a:	603c      	str	r4, [r7, #0]
 800998c:	415b      	adcs	r3, r3
 800998e:	607b      	str	r3, [r7, #4]
 8009990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009994:	1812      	adds	r2, r2, r0
 8009996:	eb41 0303 	adc.w	r3, r1, r3
 800999a:	f04f 0400 	mov.w	r4, #0
 800999e:	f04f 0500 	mov.w	r5, #0
 80099a2:	00dd      	lsls	r5, r3, #3
 80099a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099a8:	00d4      	lsls	r4, r2, #3
 80099aa:	4622      	mov	r2, r4
 80099ac:	462b      	mov	r3, r5
 80099ae:	eb12 0a00 	adds.w	sl, r2, r0
 80099b2:	eb43 0b01 	adc.w	fp, r3, r1
 80099b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f04f 0100 	mov.w	r1, #0
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	f04f 0300 	mov.w	r3, #0
 80099c8:	008b      	lsls	r3, r1, #2
 80099ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099ce:	0082      	lsls	r2, r0, #2
 80099d0:	4650      	mov	r0, sl
 80099d2:	4659      	mov	r1, fp
 80099d4:	f7f7 f8d8 	bl	8000b88 <__aeabi_uldivmod>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4b0e      	ldr	r3, [pc, #56]	; (8009a18 <UART_SetConfig+0x38c>)
 80099de:	fba3 1302 	umull	r1, r3, r3, r2
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	2164      	movs	r1, #100	; 0x64
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	1ad3      	subs	r3, r2, r3
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	3332      	adds	r3, #50	; 0x32
 80099f0:	4a09      	ldr	r2, [pc, #36]	; (8009a18 <UART_SetConfig+0x38c>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	095b      	lsrs	r3, r3, #5
 80099f8:	f003 020f 	and.w	r2, r3, #15
 80099fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4432      	add	r2, r6
 8009a02:	609a      	str	r2, [r3, #8]
}
 8009a04:	bf00      	nop
 8009a06:	377c      	adds	r7, #124	; 0x7c
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	bf00      	nop
 8009a10:	40011000 	.word	0x40011000
 8009a14:	40011400 	.word	0x40011400
 8009a18:	51eb851f 	.word	0x51eb851f

08009a1c <__NVIC_SetPriority>:
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	db0a      	blt.n	8009a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	490c      	ldr	r1, [pc, #48]	; (8009a68 <__NVIC_SetPriority+0x4c>)
 8009a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3a:	0112      	lsls	r2, r2, #4
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	440b      	add	r3, r1
 8009a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a44:	e00a      	b.n	8009a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	4908      	ldr	r1, [pc, #32]	; (8009a6c <__NVIC_SetPriority+0x50>)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	3b04      	subs	r3, #4
 8009a54:	0112      	lsls	r2, r2, #4
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	440b      	add	r3, r1
 8009a5a:	761a      	strb	r2, [r3, #24]
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	e000e100 	.word	0xe000e100
 8009a6c:	e000ed00 	.word	0xe000ed00

08009a70 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a74:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <SysTick_Handler+0x1c>)
 8009a76:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a78:	f002 fa9c 	bl	800bfb4 <xTaskGetSchedulerState>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d001      	beq.n	8009a86 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a82:	f003 fa39 	bl	800cef8 <xPortSysTickHandler>
  }
}
 8009a86:	bf00      	nop
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	e000e010 	.word	0xe000e010

08009a90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a94:	2100      	movs	r1, #0
 8009a96:	f06f 0004 	mvn.w	r0, #4
 8009a9a:	f7ff ffbf 	bl	8009a1c <__NVIC_SetPriority>
#endif
}
 8009a9e:	bf00      	nop
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aaa:	f3ef 8305 	mrs	r3, IPSR
 8009aae:	603b      	str	r3, [r7, #0]
  return(result);
 8009ab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ab6:	f06f 0305 	mvn.w	r3, #5
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	e00c      	b.n	8009ad8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009abe:	4b0a      	ldr	r3, [pc, #40]	; (8009ae8 <osKernelInitialize+0x44>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d105      	bne.n	8009ad2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009ac6:	4b08      	ldr	r3, [pc, #32]	; (8009ae8 <osKernelInitialize+0x44>)
 8009ac8:	2201      	movs	r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	e002      	b.n	8009ad8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ad8:	687b      	ldr	r3, [r7, #4]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	2000019c 	.word	0x2000019c

08009aec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af2:	f3ef 8305 	mrs	r3, IPSR
 8009af6:	603b      	str	r3, [r7, #0]
  return(result);
 8009af8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009afe:	f06f 0305 	mvn.w	r3, #5
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	e010      	b.n	8009b28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <osKernelStart+0x48>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d109      	bne.n	8009b22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b0e:	f7ff ffbf 	bl	8009a90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <osKernelStart+0x48>)
 8009b14:	2202      	movs	r2, #2
 8009b16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b18:	f001 fdf0 	bl	800b6fc <vTaskStartScheduler>
      stat = osOK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	e002      	b.n	8009b28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b22:	f04f 33ff 	mov.w	r3, #4294967295
 8009b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	2000019c 	.word	0x2000019c

08009b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08e      	sub	sp, #56	; 0x38
 8009b3c:	af04      	add	r7, sp, #16
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b48:	f3ef 8305 	mrs	r3, IPSR
 8009b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d17e      	bne.n	8009c52 <osThreadNew+0x11a>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d07b      	beq.n	8009c52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b5a:	2380      	movs	r3, #128	; 0x80
 8009b5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b5e:	2318      	movs	r3, #24
 8009b60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b62:	2300      	movs	r3, #0
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d045      	beq.n	8009bfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d002      	beq.n	8009b80 <osThreadNew+0x48>
        name = attr->name;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d008      	beq.n	8009ba6 <osThreadNew+0x6e>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b38      	cmp	r3, #56	; 0x38
 8009b98:	d805      	bhi.n	8009ba6 <osThreadNew+0x6e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <osThreadNew+0x72>
        return (NULL);
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	e054      	b.n	8009c54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	089b      	lsrs	r3, r3, #2
 8009bb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <osThreadNew+0xa8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	2bbb      	cmp	r3, #187	; 0xbb
 8009bc8:	d90a      	bls.n	8009be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d006      	beq.n	8009be0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <osThreadNew+0xa8>
        mem = 1;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	61bb      	str	r3, [r7, #24]
 8009bde:	e010      	b.n	8009c02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10c      	bne.n	8009c02 <osThreadNew+0xca>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d108      	bne.n	8009c02 <osThreadNew+0xca>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d104      	bne.n	8009c02 <osThreadNew+0xca>
          mem = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	61bb      	str	r3, [r7, #24]
 8009bfc:	e001      	b.n	8009c02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d110      	bne.n	8009c2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c10:	9202      	str	r2, [sp, #8]
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	6a3a      	ldr	r2, [r7, #32]
 8009c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f001 fb80 	bl	800b324 <xTaskCreateStatic>
 8009c24:	4603      	mov	r3, r0
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e013      	b.n	8009c52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d110      	bne.n	8009c52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	b29a      	uxth	r2, r3
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f001 fbcb 	bl	800b3de <xTaskCreate>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d001      	beq.n	8009c52 <osThreadNew+0x11a>
            hTask = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c52:	693b      	ldr	r3, [r7, #16]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3728      	adds	r7, #40	; 0x28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c64:	f3ef 8305 	mrs	r3, IPSR
 8009c68:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <osDelay+0x1c>
    stat = osErrorISR;
 8009c70:	f06f 0305 	mvn.w	r3, #5
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e007      	b.n	8009c88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 fd06 	bl	800b694 <vTaskDelay>
    }
  }

  return (stat);
 8009c88:	68fb      	ldr	r3, [r7, #12]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f002 ff50 	bl	800cb40 <pvTimerGetTimerID>
 8009ca0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	6852      	ldr	r2, [r2, #4]
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	4798      	blx	r3
  }
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08c      	sub	sp, #48	; 0x30
 8009cc0:	af02      	add	r7, sp, #8
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	607a      	str	r2, [r7, #4]
 8009cc6:	603b      	str	r3, [r7, #0]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd0:	f3ef 8305 	mrs	r3, IPSR
 8009cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8009cd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d163      	bne.n	8009da4 <osTimerNew+0xe8>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d060      	beq.n	8009da4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8009ce2:	2008      	movs	r0, #8
 8009ce4:	f003 f998 	bl	800d018 <pvPortMalloc>
 8009ce8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d059      	beq.n	8009da4 <osTimerNew+0xe8>
      callb->func = func;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	e001      	b.n	8009d0c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009d12:	2300      	movs	r3, #0
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01c      	beq.n	8009d56 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <osTimerNew+0x6e>
          name = attr->name;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d006      	beq.n	8009d40 <osTimerNew+0x84>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	2b2b      	cmp	r3, #43	; 0x2b
 8009d38:	d902      	bls.n	8009d40 <osTimerNew+0x84>
          mem = 1;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e00c      	b.n	8009d5a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d108      	bne.n	8009d5a <osTimerNew+0x9e>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d104      	bne.n	8009d5a <osTimerNew+0x9e>
            mem = 0;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	e001      	b.n	8009d5a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009d56:	2300      	movs	r3, #0
 8009d58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d10c      	bne.n	8009d7a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	4b12      	ldr	r3, [pc, #72]	; (8009db0 <osTimerNew+0xf4>)
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	2101      	movs	r1, #1
 8009d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d72:	f002 fb66 	bl	800c442 <xTimerCreateStatic>
 8009d76:	6238      	str	r0, [r7, #32]
 8009d78:	e00b      	b.n	8009d92 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d108      	bne.n	8009d92 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009d80:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <osTimerNew+0xf4>)
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d8c:	f002 fb38 	bl	800c400 <xTimerCreate>
 8009d90:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d105      	bne.n	8009da4 <osTimerNew+0xe8>
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <osTimerNew+0xe8>
        vPortFree (callb);
 8009d9e:	6978      	ldr	r0, [r7, #20]
 8009da0:	f003 fa06 	bl	800d1b0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009da4:	6a3b      	ldr	r3, [r7, #32]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3728      	adds	r7, #40	; 0x28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	08009c93 	.word	0x08009c93

08009db4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dc2:	f3ef 8305 	mrs	r3, IPSR
 8009dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <osTimerStart+0x22>
    stat = osErrorISR;
 8009dce:	f06f 0305 	mvn.w	r3, #5
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	e017      	b.n	8009e06 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d103      	bne.n	8009de4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009ddc:	f06f 0303 	mvn.w	r3, #3
 8009de0:	617b      	str	r3, [r7, #20]
 8009de2:	e010      	b.n	8009e06 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009de4:	2300      	movs	r3, #0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	2104      	movs	r1, #4
 8009dee:	6938      	ldr	r0, [r7, #16]
 8009df0:	f002 fba0 	bl	800c534 <xTimerGenericCommand>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d102      	bne.n	8009e00 <osTimerStart+0x4c>
      stat = osOK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	e002      	b.n	8009e06 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009e00:	f06f 0302 	mvn.w	r3, #2
 8009e04:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009e06:	697b      	ldr	r3, [r7, #20]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08a      	sub	sp, #40	; 0x28
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e20:	f3ef 8305 	mrs	r3, IPSR
 8009e24:	613b      	str	r3, [r7, #16]
  return(result);
 8009e26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d175      	bne.n	8009f18 <osSemaphoreNew+0x108>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d072      	beq.n	8009f18 <osSemaphoreNew+0x108>
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d86e      	bhi.n	8009f18 <osSemaphoreNew+0x108>
    mem = -1;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d015      	beq.n	8009e72 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d006      	beq.n	8009e5c <osSemaphoreNew+0x4c>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2b4f      	cmp	r3, #79	; 0x4f
 8009e54:	d902      	bls.n	8009e5c <osSemaphoreNew+0x4c>
        mem = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	61bb      	str	r3, [r7, #24]
 8009e5a:	e00c      	b.n	8009e76 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d108      	bne.n	8009e76 <osSemaphoreNew+0x66>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d104      	bne.n	8009e76 <osSemaphoreNew+0x66>
          mem = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]
 8009e70:	e001      	b.n	8009e76 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7c:	d04c      	beq.n	8009f18 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d128      	bne.n	8009ed6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d10a      	bne.n	8009ea0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	2203      	movs	r2, #3
 8009e90:	9200      	str	r2, [sp, #0]
 8009e92:	2200      	movs	r2, #0
 8009e94:	2100      	movs	r1, #0
 8009e96:	2001      	movs	r0, #1
 8009e98:	f000 fa9e 	bl	800a3d8 <xQueueGenericCreateStatic>
 8009e9c:	61f8      	str	r0, [r7, #28]
 8009e9e:	e005      	b.n	8009eac <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	f000 fb0f 	bl	800a4c8 <xQueueGenericCreate>
 8009eaa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d022      	beq.n	8009ef8 <osSemaphoreNew+0xe8>
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01f      	beq.n	8009ef8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009eb8:	2300      	movs	r3, #0
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	69f8      	ldr	r0, [r7, #28]
 8009ec0:	f000 fbca 	bl	800a658 <xQueueGenericSend>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d016      	beq.n	8009ef8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009eca:	69f8      	ldr	r0, [r7, #28]
 8009ecc:	f001 f856 	bl	800af7c <vQueueDelete>
            hSemaphore = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	e010      	b.n	8009ef8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d108      	bne.n	8009eee <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	68b9      	ldr	r1, [r7, #8]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	f000 fb4c 	bl	800a582 <xQueueCreateCountingSemaphoreStatic>
 8009eea:	61f8      	str	r0, [r7, #28]
 8009eec:	e004      	b.n	8009ef8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 fb7d 	bl	800a5f0 <xQueueCreateCountingSemaphore>
 8009ef6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00c      	beq.n	8009f18 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <osSemaphoreNew+0xfc>
          name = attr->name;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e001      	b.n	8009f10 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009f10:	6979      	ldr	r1, [r7, #20]
 8009f12:	69f8      	ldr	r0, [r7, #28]
 8009f14:	f001 f97e 	bl	800b214 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009f18:	69fb      	ldr	r3, [r7, #28]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d103      	bne.n	8009f44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009f3c:	f06f 0303 	mvn.w	r3, #3
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e039      	b.n	8009fb8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f44:	f3ef 8305 	mrs	r3, IPSR
 8009f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d022      	beq.n	8009f96 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009f56:	f06f 0303 	mvn.w	r3, #3
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e02c      	b.n	8009fb8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	461a      	mov	r2, r3
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 ff86 	bl	800ae7c <xQueueReceiveFromISR>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d003      	beq.n	8009f7e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009f76:	f06f 0302 	mvn.w	r3, #2
 8009f7a:	617b      	str	r3, [r7, #20]
 8009f7c:	e01c      	b.n	8009fb8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d019      	beq.n	8009fb8 <osSemaphoreAcquire+0x94>
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <osSemaphoreAcquire+0xa0>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	e010      	b.n	8009fb8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6938      	ldr	r0, [r7, #16]
 8009f9a:	f000 fe63 	bl	800ac64 <xQueueSemaphoreTake>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d009      	beq.n	8009fb8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009faa:	f06f 0301 	mvn.w	r3, #1
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	e002      	b.n	8009fb8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009fb2:	f06f 0302 	mvn.w	r3, #2
 8009fb6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009fb8:	697b      	ldr	r3, [r7, #20]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	e000ed04 	.word	0xe000ed04

08009fc8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d103      	bne.n	8009fe6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009fde:	f06f 0303 	mvn.w	r3, #3
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	e02c      	b.n	800a040 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fe6:	f3ef 8305 	mrs	r3, IPSR
 8009fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01a      	beq.n	800a028 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ff6:	f107 0308 	add.w	r3, r7, #8
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6938      	ldr	r0, [r7, #16]
 8009ffe:	f000 fcc4 	bl	800a98a <xQueueGiveFromISR>
 800a002:	4603      	mov	r3, r0
 800a004:	2b01      	cmp	r3, #1
 800a006:	d003      	beq.n	800a010 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a008:	f06f 0302 	mvn.w	r3, #2
 800a00c:	617b      	str	r3, [r7, #20]
 800a00e:	e017      	b.n	800a040 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d014      	beq.n	800a040 <osSemaphoreRelease+0x78>
 800a016:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <osSemaphoreRelease+0x84>)
 800a018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	e00b      	b.n	800a040 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a028:	2300      	movs	r3, #0
 800a02a:	2200      	movs	r2, #0
 800a02c:	2100      	movs	r1, #0
 800a02e:	6938      	ldr	r0, [r7, #16]
 800a030:	f000 fb12 	bl	800a658 <xQueueGenericSend>
 800a034:	4603      	mov	r3, r0
 800a036:	2b01      	cmp	r3, #1
 800a038:	d002      	beq.n	800a040 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a03a:	f06f 0302 	mvn.w	r3, #2
 800a03e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a040:	697b      	ldr	r3, [r7, #20]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af02      	add	r7, sp, #8
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a060:	f3ef 8305 	mrs	r3, IPSR
 800a064:	613b      	str	r3, [r7, #16]
  return(result);
 800a066:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d15f      	bne.n	800a12c <osMessageQueueNew+0xdc>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d05c      	beq.n	800a12c <osMessageQueueNew+0xdc>
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d059      	beq.n	800a12c <osMessageQueueNew+0xdc>
    mem = -1;
 800a078:	f04f 33ff 	mov.w	r3, #4294967295
 800a07c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d029      	beq.n	800a0d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d012      	beq.n	800a0b2 <osMessageQueueNew+0x62>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b4f      	cmp	r3, #79	; 0x4f
 800a092:	d90e      	bls.n	800a0b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00a      	beq.n	800a0b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695a      	ldr	r2, [r3, #20]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	fb01 f303 	mul.w	r3, r1, r3
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d302      	bcc.n	800a0b2 <osMessageQueueNew+0x62>
        mem = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	61bb      	str	r3, [r7, #24]
 800a0b0:	e014      	b.n	800a0dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d110      	bne.n	800a0dc <osMessageQueueNew+0x8c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10c      	bne.n	800a0dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d108      	bne.n	800a0dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <osMessageQueueNew+0x8c>
          mem = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	e001      	b.n	800a0dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d10b      	bne.n	800a0fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	9100      	str	r1, [sp, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 f971 	bl	800a3d8 <xQueueGenericCreateStatic>
 800a0f6:	61f8      	str	r0, [r7, #28]
 800a0f8:	e008      	b.n	800a10c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d105      	bne.n	800a10c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a100:	2200      	movs	r2, #0
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f9df 	bl	800a4c8 <xQueueGenericCreate>
 800a10a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00c      	beq.n	800a12c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e001      	b.n	800a124 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a124:	6979      	ldr	r1, [r7, #20]
 800a126:	69f8      	ldr	r0, [r7, #28]
 800a128:	f001 f874 	bl	800b214 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a12c:	69fb      	ldr	r3, [r7, #28]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3720      	adds	r7, #32
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <vApplicationGetIdleTaskMemory+0x2c>)
 800a148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a06      	ldr	r2, [pc, #24]	; (800a168 <vApplicationGetIdleTaskMemory+0x30>)
 800a14e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	200001a0 	.word	0x200001a0
 800a168:	2000025c 	.word	0x2000025c

0800a16c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4a07      	ldr	r2, [pc, #28]	; (800a198 <vApplicationGetTimerTaskMemory+0x2c>)
 800a17c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a06      	ldr	r2, [pc, #24]	; (800a19c <vApplicationGetTimerTaskMemory+0x30>)
 800a182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a18a:	601a      	str	r2, [r3, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	2000045c 	.word	0x2000045c
 800a19c:	20000518 	.word	0x20000518

0800a1a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f103 0208 	add.w	r2, r3, #8
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f103 0208 	add.w	r2, r3, #8
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f103 0208 	add.w	r2, r3, #8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	689a      	ldr	r2, [r3, #8]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
}
 800a236:	bf00      	nop
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a242:	b480      	push	{r7}
 800a244:	b085      	sub	sp, #20
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a258:	d103      	bne.n	800a262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e00c      	b.n	800a27c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3308      	adds	r3, #8
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e002      	b.n	800a270 <vListInsert+0x2e>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d2f6      	bcs.n	800a26a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	683a      	ldr	r2, [r7, #0]
 800a28a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	6892      	ldr	r2, [r2, #8]
 800a2ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	6852      	ldr	r2, [r2, #4]
 800a2d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d103      	bne.n	800a2e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	1e5a      	subs	r2, r3, #1
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a332:	f002 fd4f 	bl	800cdd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	441a      	add	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	3b01      	subs	r3, #1
 800a364:	68f9      	ldr	r1, [r7, #12]
 800a366:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a368:	fb01 f303 	mul.w	r3, r1, r3
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	22ff      	movs	r2, #255	; 0xff
 800a376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	22ff      	movs	r2, #255	; 0xff
 800a37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d114      	bne.n	800a3b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01a      	beq.n	800a3c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3310      	adds	r3, #16
 800a394:	4618      	mov	r0, r3
 800a396:	f001 fc4b 	bl	800bc30 <xTaskRemoveFromEventList>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d012      	beq.n	800a3c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	; (800a3d4 <xQueueGenericReset+0xcc>)
 800a3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	e009      	b.n	800a3c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3310      	adds	r3, #16
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fef2 	bl	800a1a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3324      	adds	r3, #36	; 0x24
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff feed 	bl	800a1a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3c6:	f002 fd35 	bl	800ce34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3ca:	2301      	movs	r3, #1
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	e000ed04 	.word	0xe000ed04

0800a3d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08e      	sub	sp, #56	; 0x38
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10a      	bne.n	800a402 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <xQueueGenericCreateStatic+0x52>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <xQueueGenericCreateStatic+0x56>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e000      	b.n	800a430 <xQueueGenericCreateStatic+0x58>
 800a42e:	2300      	movs	r3, #0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10a      	bne.n	800a44a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	623b      	str	r3, [r7, #32]
}
 800a446:	bf00      	nop
 800a448:	e7fe      	b.n	800a448 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <xQueueGenericCreateStatic+0x7e>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <xQueueGenericCreateStatic+0x82>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericCreateStatic+0x84>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	61fb      	str	r3, [r7, #28]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a476:	2350      	movs	r3, #80	; 0x50
 800a478:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b50      	cmp	r3, #80	; 0x50
 800a47e:	d00a      	beq.n	800a496 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	61bb      	str	r3, [r7, #24]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00d      	beq.n	800a4be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 f83f 	bl	800a53c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3730      	adds	r7, #48	; 0x30
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d10a      	bne.n	800a4f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	613b      	str	r3, [r7, #16]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	3350      	adds	r3, #80	; 0x50
 800a500:	4618      	mov	r0, r3
 800a502:	f002 fd89 	bl	800d018 <pvPortMalloc>
 800a506:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d011      	beq.n	800a532 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	3350      	adds	r3, #80	; 0x50
 800a516:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a520:	79fa      	ldrb	r2, [r7, #7]
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	9300      	str	r3, [sp, #0]
 800a526:	4613      	mov	r3, r2
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	68b9      	ldr	r1, [r7, #8]
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 f805 	bl	800a53c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a532:	69bb      	ldr	r3, [r7, #24]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	3720      	adds	r7, #32
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	601a      	str	r2, [r3, #0]
 800a556:	e002      	b.n	800a55e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a56a:	2101      	movs	r1, #1
 800a56c:	69b8      	ldr	r0, [r7, #24]
 800a56e:	f7ff fecb 	bl	800a308 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	78fa      	ldrb	r2, [r7, #3]
 800a576:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a582:	b580      	push	{r7, lr}
 800a584:	b08a      	sub	sp, #40	; 0x28
 800a586:	af02      	add	r7, sp, #8
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d10a      	bne.n	800a5aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	61bb      	str	r3, [r7, #24]
}
 800a5a6:	bf00      	nop
 800a5a8:	e7fe      	b.n	800a5a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d90a      	bls.n	800a5c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	617b      	str	r3, [r7, #20]
}
 800a5c4:	bf00      	nop
 800a5c6:	e7fe      	b.n	800a5c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff ff00 	bl	800a3d8 <xQueueGenericCreateStatic>
 800a5d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
	}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3720      	adds	r7, #32
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10a      	bne.n	800a616 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d90a      	bls.n	800a634 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60fb      	str	r3, [r7, #12]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a634:	2202      	movs	r2, #2
 800a636:	2100      	movs	r1, #0
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f7ff ff45 	bl	800a4c8 <xQueueGenericCreate>
 800a63e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a64c:	697b      	ldr	r3, [r7, #20]
	}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
	...

0800a658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08e      	sub	sp, #56	; 0x38
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a666:	2300      	movs	r3, #0
 800a668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <xQueueGenericSend+0x32>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d103      	bne.n	800a698 <xQueueGenericSend+0x40>
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d101      	bne.n	800a69c <xQueueGenericSend+0x44>
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <xQueueGenericSend+0x46>
 800a69c:	2300      	movs	r3, #0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <xQueueGenericSend+0x60>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d103      	bne.n	800a6c6 <xQueueGenericSend+0x6e>
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d101      	bne.n	800a6ca <xQueueGenericSend+0x72>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e000      	b.n	800a6cc <xQueueGenericSend+0x74>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	623b      	str	r3, [r7, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6e6:	f001 fc65 	bl	800bfb4 <xTaskGetSchedulerState>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d102      	bne.n	800a6f6 <xQueueGenericSend+0x9e>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <xQueueGenericSend+0xa2>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e000      	b.n	800a6fc <xQueueGenericSend+0xa4>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <xQueueGenericSend+0xbe>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	61fb      	str	r3, [r7, #28]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a716:	f002 fb5d 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a722:	429a      	cmp	r2, r3
 800a724:	d302      	bcc.n	800a72c <xQueueGenericSend+0xd4>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d129      	bne.n	800a780 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a732:	f000 fc5e 	bl	800aff2 <prvCopyDataToQueue>
 800a736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d010      	beq.n	800a762 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a742:	3324      	adds	r3, #36	; 0x24
 800a744:	4618      	mov	r0, r3
 800a746:	f001 fa73 	bl	800bc30 <xTaskRemoveFromEventList>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d013      	beq.n	800a778 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a750:	4b3f      	ldr	r3, [pc, #252]	; (800a850 <xQueueGenericSend+0x1f8>)
 800a752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	e00a      	b.n	800a778 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a764:	2b00      	cmp	r3, #0
 800a766:	d007      	beq.n	800a778 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a768:	4b39      	ldr	r3, [pc, #228]	; (800a850 <xQueueGenericSend+0x1f8>)
 800a76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a778:	f002 fb5c 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e063      	b.n	800a848 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a786:	f002 fb55 	bl	800ce34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e05c      	b.n	800a848 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a790:	2b00      	cmp	r3, #0
 800a792:	d106      	bne.n	800a7a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a794:	f107 0314 	add.w	r3, r7, #20
 800a798:	4618      	mov	r0, r3
 800a79a:	f001 faad 	bl	800bcf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7a2:	f002 fb47 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a6:	f001 f819 	bl	800b7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7aa:	f002 fb13 	bl	800cdd4 <vPortEnterCritical>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7b4:	b25b      	sxtb	r3, r3
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d103      	bne.n	800a7c4 <xQueueGenericSend+0x16c>
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7ca:	b25b      	sxtb	r3, r3
 800a7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7d0:	d103      	bne.n	800a7da <xQueueGenericSend+0x182>
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7da:	f002 fb2b 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7de:	1d3a      	adds	r2, r7, #4
 800a7e0:	f107 0314 	add.w	r3, r7, #20
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 fa9c 	bl	800bd24 <xTaskCheckForTimeOut>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d124      	bne.n	800a83c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7f4:	f000 fcf5 	bl	800b1e2 <prvIsQueueFull>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d018      	beq.n	800a830 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	3310      	adds	r3, #16
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f001 f9c2 	bl	800bb90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f000 fc80 	bl	800b112 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a812:	f000 fff1 	bl	800b7f8 <xTaskResumeAll>
 800a816:	4603      	mov	r3, r0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f47f af7c 	bne.w	800a716 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <xQueueGenericSend+0x1f8>)
 800a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	e772      	b.n	800a716 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a832:	f000 fc6e 	bl	800b112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a836:	f000 ffdf 	bl	800b7f8 <xTaskResumeAll>
 800a83a:	e76c      	b.n	800a716 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a83e:	f000 fc68 	bl	800b112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a842:	f000 ffd9 	bl	800b7f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3738      	adds	r7, #56	; 0x38
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	e000ed04 	.word	0xe000ed04

0800a854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b090      	sub	sp, #64	; 0x40
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10a      	bne.n	800a882 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a87e:	bf00      	nop
 800a880:	e7fe      	b.n	800a880 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <xQueueGenericSendFromISR+0x3c>
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <xQueueGenericSendFromISR+0x40>
 800a890:	2301      	movs	r3, #1
 800a892:	e000      	b.n	800a896 <xQueueGenericSendFromISR+0x42>
 800a894:	2300      	movs	r3, #0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ac:	bf00      	nop
 800a8ae:	e7fe      	b.n	800a8ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d103      	bne.n	800a8be <xQueueGenericSendFromISR+0x6a>
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <xQueueGenericSendFromISR+0x6e>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <xQueueGenericSendFromISR+0x70>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10a      	bne.n	800a8de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	623b      	str	r3, [r7, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	e7fe      	b.n	800a8dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8de:	f002 fb5b 	bl	800cf98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8e2:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	61fa      	str	r2, [r7, #28]
 800a8f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	429a      	cmp	r2, r3
 800a908:	d302      	bcc.n	800a910 <xQueueGenericSendFromISR+0xbc>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d12f      	bne.n	800a970 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a926:	f000 fb64 	bl	800aff2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a92a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a932:	d112      	bne.n	800a95a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d016      	beq.n	800a96a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	4618      	mov	r0, r3
 800a942:	f001 f975 	bl	800bc30 <xTaskRemoveFromEventList>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00e      	beq.n	800a96a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00b      	beq.n	800a96a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e007      	b.n	800a96a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a95a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a95e:	3301      	adds	r3, #1
 800a960:	b2db      	uxtb	r3, r3
 800a962:	b25a      	sxtb	r2, r3
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a96a:	2301      	movs	r3, #1
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a96e:	e001      	b.n	800a974 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a970:	2300      	movs	r3, #0
 800a972:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a976:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a97e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a982:	4618      	mov	r0, r3
 800a984:	3740      	adds	r7, #64	; 0x40
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b08e      	sub	sp, #56	; 0x38
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	623b      	str	r3, [r7, #32]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00a      	beq.n	800a9d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <xQueueGiveFromISR+0x58>
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <xQueueGiveFromISR+0x5c>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e000      	b.n	800a9e8 <xQueueGiveFromISR+0x5e>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	61bb      	str	r3, [r7, #24]
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa02:	f002 fac9 	bl	800cf98 <vPortValidateInterruptPriority>
	__asm volatile
 800aa06:	f3ef 8211 	mrs	r2, BASEPRI
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	617a      	str	r2, [r7, #20]
 800aa1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aa1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aa28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d22b      	bcs.n	800aa8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d112      	bne.n	800aa74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d016      	beq.n	800aa84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	3324      	adds	r3, #36	; 0x24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 f8e8 	bl	800bc30 <xTaskRemoveFromEventList>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00e      	beq.n	800aa84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	e007      	b.n	800aa84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa78:	3301      	adds	r3, #1
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	b25a      	sxtb	r2, r3
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa84:	2301      	movs	r3, #1
 800aa86:	637b      	str	r3, [r7, #52]	; 0x34
 800aa88:	e001      	b.n	800aa8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f383 8811 	msr	BASEPRI, r3
}
 800aa98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3738      	adds	r7, #56	; 0x38
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08c      	sub	sp, #48	; 0x30
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10a      	bne.n	800aad4 <xQueueReceive+0x30>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	623b      	str	r3, [r7, #32]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d103      	bne.n	800aae2 <xQueueReceive+0x3e>
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <xQueueReceive+0x42>
 800aae2:	2301      	movs	r3, #1
 800aae4:	e000      	b.n	800aae8 <xQueueReceive+0x44>
 800aae6:	2300      	movs	r3, #0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueReceive+0x5e>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	61fb      	str	r3, [r7, #28]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab02:	f001 fa57 	bl	800bfb4 <xTaskGetSchedulerState>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <xQueueReceive+0x6e>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <xQueueReceive+0x72>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <xQueueReceive+0x74>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xQueueReceive+0x8e>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	61bb      	str	r3, [r7, #24]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab32:	f002 f94f 	bl	800cdd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01f      	beq.n	800ab82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab46:	f000 fabe 	bl	800b0c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00f      	beq.n	800ab7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	3310      	adds	r3, #16
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f001 f866 	bl	800bc30 <xTaskRemoveFromEventList>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab6a:	4b3d      	ldr	r3, [pc, #244]	; (800ac60 <xQueueReceive+0x1bc>)
 800ab6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	f3bf 8f4f 	dsb	sy
 800ab76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab7a:	f002 f95b 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e069      	b.n	800ac56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d103      	bne.n	800ab90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab88:	f002 f954 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e062      	b.n	800ac56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d106      	bne.n	800aba4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab96:	f107 0310 	add.w	r3, r7, #16
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f001 f8ac 	bl	800bcf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aba0:	2301      	movs	r3, #1
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aba4:	f002 f946 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aba8:	f000 fe18 	bl	800b7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abac:	f002 f912 	bl	800cdd4 <vPortEnterCritical>
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb6:	b25b      	sxtb	r3, r3
 800abb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abbc:	d103      	bne.n	800abc6 <xQueueReceive+0x122>
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abcc:	b25b      	sxtb	r3, r3
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d103      	bne.n	800abdc <xQueueReceive+0x138>
 800abd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abdc:	f002 f92a 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abe0:	1d3a      	adds	r2, r7, #4
 800abe2:	f107 0310 	add.w	r3, r7, #16
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 f89b 	bl	800bd24 <xTaskCheckForTimeOut>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d123      	bne.n	800ac3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abf6:	f000 fade 	bl	800b1b6 <prvIsQueueEmpty>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d017      	beq.n	800ac30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	3324      	adds	r3, #36	; 0x24
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	4611      	mov	r1, r2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 ffc1 	bl	800bb90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac10:	f000 fa7f 	bl	800b112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac14:	f000 fdf0 	bl	800b7f8 <xTaskResumeAll>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d189      	bne.n	800ab32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ac1e:	4b10      	ldr	r3, [pc, #64]	; (800ac60 <xQueueReceive+0x1bc>)
 800ac20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	e780      	b.n	800ab32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ac30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac32:	f000 fa6e 	bl	800b112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac36:	f000 fddf 	bl	800b7f8 <xTaskResumeAll>
 800ac3a:	e77a      	b.n	800ab32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ac3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac3e:	f000 fa68 	bl	800b112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac42:	f000 fdd9 	bl	800b7f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac48:	f000 fab5 	bl	800b1b6 <prvIsQueueEmpty>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f43f af6f 	beq.w	800ab32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3730      	adds	r7, #48	; 0x30
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	e000ed04 	.word	0xe000ed04

0800ac64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08e      	sub	sp, #56	; 0x38
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10a      	bne.n	800ac96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ac80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac84:	f383 8811 	msr	BASEPRI, r3
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	623b      	str	r3, [r7, #32]
}
 800ac92:	bf00      	nop
 800ac94:	e7fe      	b.n	800ac94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	61fb      	str	r3, [r7, #28]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acb4:	f001 f97e 	bl	800bfb4 <xTaskGetSchedulerState>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <xQueueSemaphoreTake+0x60>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <xQueueSemaphoreTake+0x64>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e000      	b.n	800acca <xQueueSemaphoreTake+0x66>
 800acc8:	2300      	movs	r3, #0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d10a      	bne.n	800ace4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	61bb      	str	r3, [r7, #24]
}
 800ace0:	bf00      	nop
 800ace2:	e7fe      	b.n	800ace2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ace4:	f002 f876 	bl	800cdd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d024      	beq.n	800ad3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	1e5a      	subs	r2, r3, #1
 800acf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d104      	bne.n	800ad0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad04:	f001 facc 	bl	800c2a0 <pvTaskIncrementMutexHeldCount>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00f      	beq.n	800ad36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	3310      	adds	r3, #16
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 ff88 	bl	800bc30 <xTaskRemoveFromEventList>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d007      	beq.n	800ad36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad26:	4b54      	ldr	r3, [pc, #336]	; (800ae78 <xQueueSemaphoreTake+0x214>)
 800ad28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2c:	601a      	str	r2, [r3, #0]
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad36:	f002 f87d 	bl	800ce34 <vPortExitCritical>
				return pdPASS;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e097      	b.n	800ae6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d111      	bne.n	800ad68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	617b      	str	r3, [r7, #20]
}
 800ad5c:	bf00      	nop
 800ad5e:	e7fe      	b.n	800ad5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ad60:	f002 f868 	bl	800ce34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad64:	2300      	movs	r3, #0
 800ad66:	e082      	b.n	800ae6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 ffc0 	bl	800bcf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad7c:	f002 f85a 	bl	800ce34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad80:	f000 fd2c 	bl	800b7dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad84:	f002 f826 	bl	800cdd4 <vPortEnterCritical>
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d103      	bne.n	800ad9e <xQueueSemaphoreTake+0x13a>
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ada4:	b25b      	sxtb	r3, r3
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d103      	bne.n	800adb4 <xQueueSemaphoreTake+0x150>
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800adb4:	f002 f83e 	bl	800ce34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adb8:	463a      	mov	r2, r7
 800adba:	f107 030c 	add.w	r3, r7, #12
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f000 ffaf 	bl	800bd24 <xTaskCheckForTimeOut>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d132      	bne.n	800ae32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adce:	f000 f9f2 	bl	800b1b6 <prvIsQueueEmpty>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d026      	beq.n	800ae26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d109      	bne.n	800adf4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ade0:	f001 fff8 	bl	800cdd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	689b      	ldr	r3, [r3, #8]
 800ade8:	4618      	mov	r0, r3
 800adea:	f001 f901 	bl	800bff0 <xTaskPriorityInherit>
 800adee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800adf0:	f002 f820 	bl	800ce34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	3324      	adds	r3, #36	; 0x24
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 fec7 	bl	800bb90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae04:	f000 f985 	bl	800b112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae08:	f000 fcf6 	bl	800b7f8 <xTaskResumeAll>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f47f af68 	bne.w	800ace4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ae14:	4b18      	ldr	r3, [pc, #96]	; (800ae78 <xQueueSemaphoreTake+0x214>)
 800ae16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	e75e      	b.n	800ace4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae28:	f000 f973 	bl	800b112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae2c:	f000 fce4 	bl	800b7f8 <xTaskResumeAll>
 800ae30:	e758      	b.n	800ace4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae34:	f000 f96d 	bl	800b112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae38:	f000 fcde 	bl	800b7f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3e:	f000 f9ba 	bl	800b1b6 <prvIsQueueEmpty>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f43f af4d 	beq.w	800ace4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00d      	beq.n	800ae6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ae50:	f001 ffc0 	bl	800cdd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ae54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae56:	f000 f8b4 	bl	800afc2 <prvGetDisinheritPriorityAfterTimeout>
 800ae5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae62:	4618      	mov	r0, r3
 800ae64:	f001 f99a 	bl	800c19c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ae68:	f001 ffe4 	bl	800ce34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3738      	adds	r7, #56	; 0x38
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	e000ed04 	.word	0xe000ed04

0800ae7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	; 0x38
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	623b      	str	r3, [r7, #32]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <xQueueReceiveFromISR+0x3a>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <xQueueReceiveFromISR+0x3e>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <xQueueReceiveFromISR+0x40>
 800aeba:	2300      	movs	r3, #0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	61fb      	str	r3, [r7, #28]
}
 800aed2:	bf00      	nop
 800aed4:	e7fe      	b.n	800aed4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aed6:	f002 f85f 	bl	800cf98 <vPortValidateInterruptPriority>
	__asm volatile
 800aeda:	f3ef 8211 	mrs	r2, BASEPRI
 800aede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	61ba      	str	r2, [r7, #24]
 800aef0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aef2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d02f      	beq.n	800af62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af10:	f000 f8d9 	bl	800b0c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af16:	1e5a      	subs	r2, r3, #1
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d112      	bne.n	800af4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d016      	beq.n	800af5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	3310      	adds	r3, #16
 800af32:	4618      	mov	r0, r3
 800af34:	f000 fe7c 	bl	800bc30 <xTaskRemoveFromEventList>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00e      	beq.n	800af5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	e007      	b.n	800af5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af50:	3301      	adds	r3, #1
 800af52:	b2db      	uxtb	r3, r3
 800af54:	b25a      	sxtb	r2, r3
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800af5c:	2301      	movs	r3, #1
 800af5e:	637b      	str	r3, [r7, #52]	; 0x34
 800af60:	e001      	b.n	800af66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800af62:	2300      	movs	r3, #0
 800af64:	637b      	str	r3, [r7, #52]	; 0x34
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f383 8811 	msr	BASEPRI, r3
}
 800af70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af74:	4618      	mov	r0, r3
 800af76:	3738      	adds	r7, #56	; 0x38
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <vQueueDelete+0x28>
	__asm volatile
 800af8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af92:	f383 8811 	msr	BASEPRI, r3
 800af96:	f3bf 8f6f 	isb	sy
 800af9a:	f3bf 8f4f 	dsb	sy
 800af9e:	60bb      	str	r3, [r7, #8]
}
 800afa0:	bf00      	nop
 800afa2:	e7fe      	b.n	800afa2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f95f 	bl	800b268 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d102      	bne.n	800afba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f002 f8fb 	bl	800d1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800afc2:	b480      	push	{r7}
 800afc4:	b085      	sub	sp, #20
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e001      	b.n	800afe4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800afe4:	68fb      	ldr	r3, [r7, #12]
	}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3714      	adds	r7, #20
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b086      	sub	sp, #24
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800affe:	2300      	movs	r3, #0
 800b000:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b006:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10d      	bne.n	800b02c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d14d      	bne.n	800b0b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f001 f84f 	bl	800c0c0 <xTaskPriorityDisinherit>
 800b022:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	609a      	str	r2, [r3, #8]
 800b02a:	e043      	b.n	800b0b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d119      	bne.n	800b066 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6858      	ldr	r0, [r3, #4]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03a:	461a      	mov	r2, r3
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	f003 fcc3 	bl	800e9c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	685a      	ldr	r2, [r3, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b04a:	441a      	add	r2, r3
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d32b      	bcc.n	800b0b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	605a      	str	r2, [r3, #4]
 800b064:	e026      	b.n	800b0b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	68d8      	ldr	r0, [r3, #12]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	461a      	mov	r2, r3
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	f003 fca9 	bl	800e9c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68da      	ldr	r2, [r3, #12]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	425b      	negs	r3, r3
 800b080:	441a      	add	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d207      	bcs.n	800b0a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	689a      	ldr	r2, [r3, #8]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	425b      	negs	r3, r3
 800b09c:	441a      	add	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d105      	bne.n	800b0b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b0bc:	697b      	ldr	r3, [r7, #20]
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d018      	beq.n	800b10a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e0:	441a      	add	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	68da      	ldr	r2, [r3, #12]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d303      	bcc.n	800b0fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68d9      	ldr	r1, [r3, #12]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	461a      	mov	r2, r3
 800b104:	6838      	ldr	r0, [r7, #0]
 800b106:	f003 fc5f 	bl	800e9c8 <memcpy>
	}
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b11a:	f001 fe5b 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b124:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b126:	e011      	b.n	800b14c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d012      	beq.n	800b156 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	3324      	adds	r3, #36	; 0x24
 800b134:	4618      	mov	r0, r3
 800b136:	f000 fd7b 	bl	800bc30 <xTaskRemoveFromEventList>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b140:	f000 fe52 	bl	800bde8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	3b01      	subs	r3, #1
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dce9      	bgt.n	800b128 <prvUnlockQueue+0x16>
 800b154:	e000      	b.n	800b158 <prvUnlockQueue+0x46>
					break;
 800b156:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	22ff      	movs	r2, #255	; 0xff
 800b15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b160:	f001 fe68 	bl	800ce34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b164:	f001 fe36 	bl	800cdd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b16e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b170:	e011      	b.n	800b196 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d012      	beq.n	800b1a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3310      	adds	r3, #16
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fd56 	bl	800bc30 <xTaskRemoveFromEventList>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d001      	beq.n	800b18e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b18a:	f000 fe2d 	bl	800bde8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b18e:	7bbb      	ldrb	r3, [r7, #14]
 800b190:	3b01      	subs	r3, #1
 800b192:	b2db      	uxtb	r3, r3
 800b194:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dce9      	bgt.n	800b172 <prvUnlockQueue+0x60>
 800b19e:	e000      	b.n	800b1a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b1a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	22ff      	movs	r2, #255	; 0xff
 800b1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b1aa:	f001 fe43 	bl	800ce34 <vPortExitCritical>
}
 800b1ae:	bf00      	nop
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1be:	f001 fe09 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d102      	bne.n	800b1d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e001      	b.n	800b1d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1d4:	f001 fe2e 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b1ea:	f001 fdf3 	bl	800cdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d102      	bne.n	800b200 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	e001      	b.n	800b204 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b204:	f001 fe16 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800b208:	68fb      	ldr	r3, [r7, #12]
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b21e:	2300      	movs	r3, #0
 800b220:	60fb      	str	r3, [r7, #12]
 800b222:	e014      	b.n	800b24e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b224:	4a0f      	ldr	r2, [pc, #60]	; (800b264 <vQueueAddToRegistry+0x50>)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10b      	bne.n	800b248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b230:	490c      	ldr	r1, [pc, #48]	; (800b264 <vQueueAddToRegistry+0x50>)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b23a:	4a0a      	ldr	r2, [pc, #40]	; (800b264 <vQueueAddToRegistry+0x50>)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	00db      	lsls	r3, r3, #3
 800b240:	4413      	add	r3, r2
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b246:	e006      	b.n	800b256 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	3301      	adds	r3, #1
 800b24c:	60fb      	str	r3, [r7, #12]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2b07      	cmp	r3, #7
 800b252:	d9e7      	bls.n	800b224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	20006b44 	.word	0x20006b44

0800b268 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b270:	2300      	movs	r3, #0
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	e016      	b.n	800b2a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b276:	4a10      	ldr	r2, [pc, #64]	; (800b2b8 <vQueueUnregisterQueue+0x50>)
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	00db      	lsls	r3, r3, #3
 800b27c:	4413      	add	r3, r2
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	429a      	cmp	r2, r3
 800b284:	d10b      	bne.n	800b29e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b286:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <vQueueUnregisterQueue+0x50>)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2100      	movs	r1, #0
 800b28c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b290:	4a09      	ldr	r2, [pc, #36]	; (800b2b8 <vQueueUnregisterQueue+0x50>)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	00db      	lsls	r3, r3, #3
 800b296:	4413      	add	r3, r2
 800b298:	2200      	movs	r2, #0
 800b29a:	605a      	str	r2, [r3, #4]
				break;
 800b29c:	e006      	b.n	800b2ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b07      	cmp	r3, #7
 800b2a8:	d9e5      	bls.n	800b276 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b2aa:	bf00      	nop
 800b2ac:	bf00      	nop
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	20006b44 	.word	0x20006b44

0800b2bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b2cc:	f001 fd82 	bl	800cdd4 <vPortEnterCritical>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d6:	b25b      	sxtb	r3, r3
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d103      	bne.n	800b2e6 <vQueueWaitForMessageRestricted+0x2a>
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2ec:	b25b      	sxtb	r3, r3
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f2:	d103      	bne.n	800b2fc <vQueueWaitForMessageRestricted+0x40>
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2fc:	f001 fd9a 	bl	800ce34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	3324      	adds	r3, #36	; 0x24
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fc61 	bl	800bbd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b316:	6978      	ldr	r0, [r7, #20]
 800b318:	f7ff fefb 	bl	800b112 <prvUnlockQueue>
	}
 800b31c:	bf00      	nop
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af04      	add	r7, sp, #16
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b334:	2b00      	cmp	r3, #0
 800b336:	d10a      	bne.n	800b34e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	623b      	str	r3, [r7, #32]
}
 800b34a:	bf00      	nop
 800b34c:	e7fe      	b.n	800b34c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10a      	bne.n	800b36a <xTaskCreateStatic+0x46>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	61fb      	str	r3, [r7, #28]
}
 800b366:	bf00      	nop
 800b368:	e7fe      	b.n	800b368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b36a:	23bc      	movs	r3, #188	; 0xbc
 800b36c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2bbc      	cmp	r3, #188	; 0xbc
 800b372:	d00a      	beq.n	800b38a <xTaskCreateStatic+0x66>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	61bb      	str	r3, [r7, #24]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b38a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d01e      	beq.n	800b3d0 <xTaskCreateStatic+0xac>
 800b392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b394:	2b00      	cmp	r3, #0
 800b396:	d01b      	beq.n	800b3d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9303      	str	r3, [sp, #12]
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	9302      	str	r3, [sp, #8]
 800b3b2:	f107 0314 	add.w	r3, r7, #20
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f000 f850 	bl	800b468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3ca:	f000 f8f3 	bl	800b5b4 <prvAddNewTaskToReadyList>
 800b3ce:	e001      	b.n	800b3d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b3d4:	697b      	ldr	r3, [r7, #20]
	}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3728      	adds	r7, #40	; 0x28
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b08c      	sub	sp, #48	; 0x30
 800b3e2:	af04      	add	r7, sp, #16
 800b3e4:	60f8      	str	r0, [r7, #12]
 800b3e6:	60b9      	str	r1, [r7, #8]
 800b3e8:	603b      	str	r3, [r7, #0]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b3ee:	88fb      	ldrh	r3, [r7, #6]
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 fe10 	bl	800d018 <pvPortMalloc>
 800b3f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00e      	beq.n	800b41e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b400:	20bc      	movs	r0, #188	; 0xbc
 800b402:	f001 fe09 	bl	800d018 <pvPortMalloc>
 800b406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	697a      	ldr	r2, [r7, #20]
 800b412:	631a      	str	r2, [r3, #48]	; 0x30
 800b414:	e005      	b.n	800b422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b416:	6978      	ldr	r0, [r7, #20]
 800b418:	f001 feca 	bl	800d1b0 <vPortFree>
 800b41c:	e001      	b.n	800b422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b41e:	2300      	movs	r3, #0
 800b420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d017      	beq.n	800b458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b430:	88fa      	ldrh	r2, [r7, #6]
 800b432:	2300      	movs	r3, #0
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	68b9      	ldr	r1, [r7, #8]
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f000 f80e 	bl	800b468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b44c:	69f8      	ldr	r0, [r7, #28]
 800b44e:	f000 f8b1 	bl	800b5b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b452:	2301      	movs	r3, #1
 800b454:	61bb      	str	r3, [r7, #24]
 800b456:	e002      	b.n	800b45e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b45e:	69bb      	ldr	r3, [r7, #24]
	}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	461a      	mov	r2, r3
 800b480:	21a5      	movs	r1, #165	; 0xa5
 800b482:	f003 faaf 	bl	800e9e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b490:	3b01      	subs	r3, #1
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f003 0307 	and.w	r3, r3, #7
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ae:	f383 8811 	msr	BASEPRI, r3
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	f3bf 8f4f 	dsb	sy
 800b4ba:	617b      	str	r3, [r7, #20]
}
 800b4bc:	bf00      	nop
 800b4be:	e7fe      	b.n	800b4be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d01f      	beq.n	800b506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e012      	b.n	800b4f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	7819      	ldrb	r1, [r3, #0]
 800b4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	3334      	adds	r3, #52	; 0x34
 800b4dc:	460a      	mov	r2, r1
 800b4de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d006      	beq.n	800b4fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	61fb      	str	r3, [r7, #28]
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	2b0f      	cmp	r3, #15
 800b4f6:	d9e9      	bls.n	800b4cc <prvInitialiseNewTask+0x64>
 800b4f8:	e000      	b.n	800b4fc <prvInitialiseNewTask+0x94>
			{
				break;
 800b4fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b504:	e003      	b.n	800b50e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	2b37      	cmp	r3, #55	; 0x37
 800b512:	d901      	bls.n	800b518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b514:	2337      	movs	r3, #55	; 0x37
 800b516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b51c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	2200      	movs	r2, #0
 800b528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b52c:	3304      	adds	r3, #4
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fe fe56 	bl	800a1e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b536:	3318      	adds	r3, #24
 800b538:	4618      	mov	r0, r3
 800b53a:	f7fe fe51 	bl	800a1e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b54c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	3354      	adds	r3, #84	; 0x54
 800b568:	2260      	movs	r2, #96	; 0x60
 800b56a:	2100      	movs	r1, #0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f003 fa39 	bl	800e9e4 <memset>
 800b572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b574:	4a0c      	ldr	r2, [pc, #48]	; (800b5a8 <prvInitialiseNewTask+0x140>)
 800b576:	659a      	str	r2, [r3, #88]	; 0x58
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	4a0c      	ldr	r2, [pc, #48]	; (800b5ac <prvInitialiseNewTask+0x144>)
 800b57c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b580:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <prvInitialiseNewTask+0x148>)
 800b582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	69b8      	ldr	r0, [r7, #24]
 800b58a:	f001 faf9 	bl	800cb80 <pxPortInitialiseStack>
 800b58e:	4602      	mov	r2, r0
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b59e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5a0:	bf00      	nop
 800b5a2:	3720      	adds	r7, #32
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	0800f5a8 	.word	0x0800f5a8
 800b5ac:	0800f5c8 	.word	0x0800f5c8
 800b5b0:	0800f588 	.word	0x0800f588

0800b5b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5bc:	f001 fc0a 	bl	800cdd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5c0:	4b2d      	ldr	r3, [pc, #180]	; (800b678 <prvAddNewTaskToReadyList+0xc4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	4a2c      	ldr	r2, [pc, #176]	; (800b678 <prvAddNewTaskToReadyList+0xc4>)
 800b5c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5ca:	4b2c      	ldr	r3, [pc, #176]	; (800b67c <prvAddNewTaskToReadyList+0xc8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5d2:	4a2a      	ldr	r2, [pc, #168]	; (800b67c <prvAddNewTaskToReadyList+0xc8>)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5d8:	4b27      	ldr	r3, [pc, #156]	; (800b678 <prvAddNewTaskToReadyList+0xc4>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d110      	bne.n	800b602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5e0:	f000 fc26 	bl	800be30 <prvInitialiseTaskLists>
 800b5e4:	e00d      	b.n	800b602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5e6:	4b26      	ldr	r3, [pc, #152]	; (800b680 <prvAddNewTaskToReadyList+0xcc>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d109      	bne.n	800b602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5ee:	4b23      	ldr	r3, [pc, #140]	; (800b67c <prvAddNewTaskToReadyList+0xc8>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d802      	bhi.n	800b602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5fc:	4a1f      	ldr	r2, [pc, #124]	; (800b67c <prvAddNewTaskToReadyList+0xc8>)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b602:	4b20      	ldr	r3, [pc, #128]	; (800b684 <prvAddNewTaskToReadyList+0xd0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3301      	adds	r3, #1
 800b608:	4a1e      	ldr	r2, [pc, #120]	; (800b684 <prvAddNewTaskToReadyList+0xd0>)
 800b60a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b60c:	4b1d      	ldr	r3, [pc, #116]	; (800b684 <prvAddNewTaskToReadyList+0xd0>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4b1b      	ldr	r3, [pc, #108]	; (800b688 <prvAddNewTaskToReadyList+0xd4>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d903      	bls.n	800b628 <prvAddNewTaskToReadyList+0x74>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	4a18      	ldr	r2, [pc, #96]	; (800b688 <prvAddNewTaskToReadyList+0xd4>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4a15      	ldr	r2, [pc, #84]	; (800b68c <prvAddNewTaskToReadyList+0xd8>)
 800b636:	441a      	add	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4619      	mov	r1, r3
 800b63e:	4610      	mov	r0, r2
 800b640:	f7fe fddb 	bl	800a1fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b644:	f001 fbf6 	bl	800ce34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b648:	4b0d      	ldr	r3, [pc, #52]	; (800b680 <prvAddNewTaskToReadyList+0xcc>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b650:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <prvAddNewTaskToReadyList+0xc8>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d207      	bcs.n	800b66e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b65e:	4b0c      	ldr	r3, [pc, #48]	; (800b690 <prvAddNewTaskToReadyList+0xdc>)
 800b660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b664:	601a      	str	r2, [r3, #0]
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20000dec 	.word	0x20000dec
 800b67c:	20000918 	.word	0x20000918
 800b680:	20000df8 	.word	0x20000df8
 800b684:	20000e08 	.word	0x20000e08
 800b688:	20000df4 	.word	0x20000df4
 800b68c:	2000091c 	.word	0x2000091c
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d017      	beq.n	800b6d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6a6:	4b13      	ldr	r3, [pc, #76]	; (800b6f4 <vTaskDelay+0x60>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <vTaskDelay+0x30>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	60bb      	str	r3, [r7, #8]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6c4:	f000 f88a 	bl	800b7dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6c8:	2100      	movs	r1, #0
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fdfc 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6d0:	f000 f892 	bl	800b7f8 <xTaskResumeAll>
 800b6d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d107      	bne.n	800b6ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <vTaskDelay+0x64>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6ec:	bf00      	nop
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20000e14 	.word	0x20000e14
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08a      	sub	sp, #40	; 0x28
 800b700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b702:	2300      	movs	r3, #0
 800b704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b70a:	463a      	mov	r2, r7
 800b70c:	1d39      	adds	r1, r7, #4
 800b70e:	f107 0308 	add.w	r3, r7, #8
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fd10 	bl	800a138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	9202      	str	r2, [sp, #8]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	2300      	movs	r3, #0
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	2300      	movs	r3, #0
 800b728:	460a      	mov	r2, r1
 800b72a:	4924      	ldr	r1, [pc, #144]	; (800b7bc <vTaskStartScheduler+0xc0>)
 800b72c:	4824      	ldr	r0, [pc, #144]	; (800b7c0 <vTaskStartScheduler+0xc4>)
 800b72e:	f7ff fdf9 	bl	800b324 <xTaskCreateStatic>
 800b732:	4603      	mov	r3, r0
 800b734:	4a23      	ldr	r2, [pc, #140]	; (800b7c4 <vTaskStartScheduler+0xc8>)
 800b736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b738:	4b22      	ldr	r3, [pc, #136]	; (800b7c4 <vTaskStartScheduler+0xc8>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b740:	2301      	movs	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	e001      	b.n	800b74a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	d102      	bne.n	800b756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b750:	f000 fe0e 	bl	800c370 <xTimerCreateTimerTask>
 800b754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d11b      	bne.n	800b794 <vTaskStartScheduler+0x98>
	__asm volatile
 800b75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	613b      	str	r3, [r7, #16]
}
 800b76e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b770:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <vTaskStartScheduler+0xcc>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3354      	adds	r3, #84	; 0x54
 800b776:	4a15      	ldr	r2, [pc, #84]	; (800b7cc <vTaskStartScheduler+0xd0>)
 800b778:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b77a:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <vTaskStartScheduler+0xd4>)
 800b77c:	f04f 32ff 	mov.w	r2, #4294967295
 800b780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b782:	4b14      	ldr	r3, [pc, #80]	; (800b7d4 <vTaskStartScheduler+0xd8>)
 800b784:	2201      	movs	r2, #1
 800b786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b788:	4b13      	ldr	r3, [pc, #76]	; (800b7d8 <vTaskStartScheduler+0xdc>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b78e:	f001 fa7f 	bl	800cc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b792:	e00e      	b.n	800b7b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79a:	d10a      	bne.n	800b7b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	60fb      	str	r3, [r7, #12]
}
 800b7ae:	bf00      	nop
 800b7b0:	e7fe      	b.n	800b7b0 <vTaskStartScheduler+0xb4>
}
 800b7b2:	bf00      	nop
 800b7b4:	3718      	adds	r7, #24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	0800f000 	.word	0x0800f000
 800b7c0:	0800be01 	.word	0x0800be01
 800b7c4:	20000e10 	.word	0x20000e10
 800b7c8:	20000918 	.word	0x20000918
 800b7cc:	20000114 	.word	0x20000114
 800b7d0:	20000e0c 	.word	0x20000e0c
 800b7d4:	20000df8 	.word	0x20000df8
 800b7d8:	20000df0 	.word	0x20000df0

0800b7dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <vTaskSuspendAll+0x18>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a03      	ldr	r2, [pc, #12]	; (800b7f4 <vTaskSuspendAll+0x18>)
 800b7e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7ea:	bf00      	nop
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	20000e14 	.word	0x20000e14

0800b7f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b802:	2300      	movs	r3, #0
 800b804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b806:	4b42      	ldr	r3, [pc, #264]	; (800b910 <xTaskResumeAll+0x118>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <xTaskResumeAll+0x2c>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	603b      	str	r3, [r7, #0]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b824:	f001 fad6 	bl	800cdd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b828:	4b39      	ldr	r3, [pc, #228]	; (800b910 <xTaskResumeAll+0x118>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	4a38      	ldr	r2, [pc, #224]	; (800b910 <xTaskResumeAll+0x118>)
 800b830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b832:	4b37      	ldr	r3, [pc, #220]	; (800b910 <xTaskResumeAll+0x118>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d162      	bne.n	800b900 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b83a:	4b36      	ldr	r3, [pc, #216]	; (800b914 <xTaskResumeAll+0x11c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d05e      	beq.n	800b900 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b842:	e02f      	b.n	800b8a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b844:	4b34      	ldr	r3, [pc, #208]	; (800b918 <xTaskResumeAll+0x120>)
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3318      	adds	r3, #24
 800b850:	4618      	mov	r0, r3
 800b852:	f7fe fd2f 	bl	800a2b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fd2a 	bl	800a2b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	4b2d      	ldr	r3, [pc, #180]	; (800b91c <xTaskResumeAll+0x124>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d903      	bls.n	800b874 <xTaskResumeAll+0x7c>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b870:	4a2a      	ldr	r2, [pc, #168]	; (800b91c <xTaskResumeAll+0x124>)
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b878:	4613      	mov	r3, r2
 800b87a:	009b      	lsls	r3, r3, #2
 800b87c:	4413      	add	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4a27      	ldr	r2, [pc, #156]	; (800b920 <xTaskResumeAll+0x128>)
 800b882:	441a      	add	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3304      	adds	r3, #4
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f7fe fcb5 	bl	800a1fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4b23      	ldr	r3, [pc, #140]	; (800b924 <xTaskResumeAll+0x12c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d302      	bcc.n	800b8a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b89e:	4b22      	ldr	r3, [pc, #136]	; (800b928 <xTaskResumeAll+0x130>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8a4:	4b1c      	ldr	r3, [pc, #112]	; (800b918 <xTaskResumeAll+0x120>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d1cb      	bne.n	800b844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8b2:	f000 fb5f 	bl	800bf74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <xTaskResumeAll+0x134>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d010      	beq.n	800b8e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8c2:	f000 f847 	bl	800b954 <xTaskIncrementTick>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	; (800b928 <xTaskResumeAll+0x130>)
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f1      	bne.n	800b8c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <xTaskResumeAll+0x134>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8e4:	4b10      	ldr	r3, [pc, #64]	; (800b928 <xTaskResumeAll+0x130>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d009      	beq.n	800b900 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8f0:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <xTaskResumeAll+0x138>)
 800b8f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b900:	f001 fa98 	bl	800ce34 <vPortExitCritical>

	return xAlreadyYielded;
 800b904:	68bb      	ldr	r3, [r7, #8]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3710      	adds	r7, #16
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20000e14 	.word	0x20000e14
 800b914:	20000dec 	.word	0x20000dec
 800b918:	20000dac 	.word	0x20000dac
 800b91c:	20000df4 	.word	0x20000df4
 800b920:	2000091c 	.word	0x2000091c
 800b924:	20000918 	.word	0x20000918
 800b928:	20000e00 	.word	0x20000e00
 800b92c:	20000dfc 	.word	0x20000dfc
 800b930:	e000ed04 	.word	0xe000ed04

0800b934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <xTaskGetTickCount+0x1c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b940:	687b      	ldr	r3, [r7, #4]
}
 800b942:	4618      	mov	r0, r3
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	20000df0 	.word	0x20000df0

0800b954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b95e:	4b4f      	ldr	r3, [pc, #316]	; (800ba9c <xTaskIncrementTick+0x148>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f040 808f 	bne.w	800ba86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b968:	4b4d      	ldr	r3, [pc, #308]	; (800baa0 <xTaskIncrementTick+0x14c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3301      	adds	r3, #1
 800b96e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b970:	4a4b      	ldr	r2, [pc, #300]	; (800baa0 <xTaskIncrementTick+0x14c>)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d120      	bne.n	800b9be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b97c:	4b49      	ldr	r3, [pc, #292]	; (800baa4 <xTaskIncrementTick+0x150>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00a      	beq.n	800b99c <xTaskIncrementTick+0x48>
	__asm volatile
 800b986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	603b      	str	r3, [r7, #0]
}
 800b998:	bf00      	nop
 800b99a:	e7fe      	b.n	800b99a <xTaskIncrementTick+0x46>
 800b99c:	4b41      	ldr	r3, [pc, #260]	; (800baa4 <xTaskIncrementTick+0x150>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	60fb      	str	r3, [r7, #12]
 800b9a2:	4b41      	ldr	r3, [pc, #260]	; (800baa8 <xTaskIncrementTick+0x154>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a3f      	ldr	r2, [pc, #252]	; (800baa4 <xTaskIncrementTick+0x150>)
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	4a3f      	ldr	r2, [pc, #252]	; (800baa8 <xTaskIncrementTick+0x154>)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	4b3e      	ldr	r3, [pc, #248]	; (800baac <xTaskIncrementTick+0x158>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	4a3d      	ldr	r2, [pc, #244]	; (800baac <xTaskIncrementTick+0x158>)
 800b9b8:	6013      	str	r3, [r2, #0]
 800b9ba:	f000 fadb 	bl	800bf74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9be:	4b3c      	ldr	r3, [pc, #240]	; (800bab0 <xTaskIncrementTick+0x15c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d349      	bcc.n	800ba5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9c8:	4b36      	ldr	r3, [pc, #216]	; (800baa4 <xTaskIncrementTick+0x150>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d104      	bne.n	800b9dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9d2:	4b37      	ldr	r3, [pc, #220]	; (800bab0 <xTaskIncrementTick+0x15c>)
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	601a      	str	r2, [r3, #0]
					break;
 800b9da:	e03f      	b.n	800ba5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9dc:	4b31      	ldr	r3, [pc, #196]	; (800baa4 <xTaskIncrementTick+0x150>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d203      	bcs.n	800b9fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9f4:	4a2e      	ldr	r2, [pc, #184]	; (800bab0 <xTaskIncrementTick+0x15c>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9fa:	e02f      	b.n	800ba5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3304      	adds	r3, #4
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7fe fc57 	bl	800a2b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	3318      	adds	r3, #24
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe fc4e 	bl	800a2b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <xTaskIncrementTick+0x160>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d903      	bls.n	800ba2c <xTaskIncrementTick+0xd8>
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	4a22      	ldr	r2, [pc, #136]	; (800bab4 <xTaskIncrementTick+0x160>)
 800ba2a:	6013      	str	r3, [r2, #0]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a1f      	ldr	r2, [pc, #124]	; (800bab8 <xTaskIncrementTick+0x164>)
 800ba3a:	441a      	add	r2, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	3304      	adds	r3, #4
 800ba40:	4619      	mov	r1, r3
 800ba42:	4610      	mov	r0, r2
 800ba44:	f7fe fbd9 	bl	800a1fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	4b1b      	ldr	r3, [pc, #108]	; (800babc <xTaskIncrementTick+0x168>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d3b8      	bcc.n	800b9c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba56:	2301      	movs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba5a:	e7b5      	b.n	800b9c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba5c:	4b17      	ldr	r3, [pc, #92]	; (800babc <xTaskIncrementTick+0x168>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba62:	4915      	ldr	r1, [pc, #84]	; (800bab8 <xTaskIncrementTick+0x164>)
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	440b      	add	r3, r1
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d901      	bls.n	800ba78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba78:	4b11      	ldr	r3, [pc, #68]	; (800bac0 <xTaskIncrementTick+0x16c>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d007      	beq.n	800ba90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e004      	b.n	800ba90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba86:	4b0f      	ldr	r3, [pc, #60]	; (800bac4 <xTaskIncrementTick+0x170>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	4a0d      	ldr	r2, [pc, #52]	; (800bac4 <xTaskIncrementTick+0x170>)
 800ba8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba90:	697b      	ldr	r3, [r7, #20]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000e14 	.word	0x20000e14
 800baa0:	20000df0 	.word	0x20000df0
 800baa4:	20000da4 	.word	0x20000da4
 800baa8:	20000da8 	.word	0x20000da8
 800baac:	20000e04 	.word	0x20000e04
 800bab0:	20000e0c 	.word	0x20000e0c
 800bab4:	20000df4 	.word	0x20000df4
 800bab8:	2000091c 	.word	0x2000091c
 800babc:	20000918 	.word	0x20000918
 800bac0:	20000e00 	.word	0x20000e00
 800bac4:	20000dfc 	.word	0x20000dfc

0800bac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bace:	4b2a      	ldr	r3, [pc, #168]	; (800bb78 <vTaskSwitchContext+0xb0>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bad6:	4b29      	ldr	r3, [pc, #164]	; (800bb7c <vTaskSwitchContext+0xb4>)
 800bad8:	2201      	movs	r2, #1
 800bada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800badc:	e046      	b.n	800bb6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bade:	4b27      	ldr	r3, [pc, #156]	; (800bb7c <vTaskSwitchContext+0xb4>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bae4:	4b26      	ldr	r3, [pc, #152]	; (800bb80 <vTaskSwitchContext+0xb8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	e010      	b.n	800bb0e <vTaskSwitchContext+0x46>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <vTaskSwitchContext+0x40>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	607b      	str	r3, [r7, #4]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <vTaskSwitchContext+0x3e>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	491d      	ldr	r1, [pc, #116]	; (800bb84 <vTaskSwitchContext+0xbc>)
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	4613      	mov	r3, r2
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0e4      	beq.n	800baec <vTaskSwitchContext+0x24>
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4613      	mov	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4a15      	ldr	r2, [pc, #84]	; (800bb84 <vTaskSwitchContext+0xbc>)
 800bb2e:	4413      	add	r3, r2
 800bb30:	60bb      	str	r3, [r7, #8]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	605a      	str	r2, [r3, #4]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	685a      	ldr	r2, [r3, #4]
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	3308      	adds	r3, #8
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d104      	bne.n	800bb52 <vTaskSwitchContext+0x8a>
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	605a      	str	r2, [r3, #4]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	4a0b      	ldr	r2, [pc, #44]	; (800bb88 <vTaskSwitchContext+0xc0>)
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	4a08      	ldr	r2, [pc, #32]	; (800bb80 <vTaskSwitchContext+0xb8>)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb62:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <vTaskSwitchContext+0xc0>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3354      	adds	r3, #84	; 0x54
 800bb68:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <vTaskSwitchContext+0xc4>)
 800bb6a:	6013      	str	r3, [r2, #0]
}
 800bb6c:	bf00      	nop
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	20000e14 	.word	0x20000e14
 800bb7c:	20000e00 	.word	0x20000e00
 800bb80:	20000df4 	.word	0x20000df4
 800bb84:	2000091c 	.word	0x2000091c
 800bb88:	20000918 	.word	0x20000918
 800bb8c:	20000114 	.word	0x20000114

0800bb90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10a      	bne.n	800bbb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	60fb      	str	r3, [r7, #12]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbb6:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <vTaskPlaceOnEventList+0x44>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3318      	adds	r3, #24
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f7fe fb3f 	bl	800a242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	6838      	ldr	r0, [r7, #0]
 800bbc8:	f000 fb7e 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	20000918 	.word	0x20000918

0800bbd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d10a      	bne.n	800bc00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	617b      	str	r3, [r7, #20]
}
 800bbfc:	bf00      	nop
 800bbfe:	e7fe      	b.n	800bbfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <vTaskPlaceOnEventListRestricted+0x54>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	3318      	adds	r3, #24
 800bc06:	4619      	mov	r1, r3
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7fe faf6 	bl	800a1fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc14:	f04f 33ff 	mov.w	r3, #4294967295
 800bc18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f000 fb53 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
	}
 800bc22:	bf00      	nop
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20000918 	.word	0x20000918

0800bc30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10a      	bne.n	800bc5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60fb      	str	r3, [r7, #12]
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	3318      	adds	r3, #24
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fb27 	bl	800a2b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc66:	4b1e      	ldr	r3, [pc, #120]	; (800bce0 <xTaskRemoveFromEventList+0xb0>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d11d      	bne.n	800bcaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	3304      	adds	r3, #4
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fb1e 	bl	800a2b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc7c:	4b19      	ldr	r3, [pc, #100]	; (800bce4 <xTaskRemoveFromEventList+0xb4>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d903      	bls.n	800bc8c <xTaskRemoveFromEventList+0x5c>
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc88:	4a16      	ldr	r2, [pc, #88]	; (800bce4 <xTaskRemoveFromEventList+0xb4>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a13      	ldr	r2, [pc, #76]	; (800bce8 <xTaskRemoveFromEventList+0xb8>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe faa9 	bl	800a1fa <vListInsertEnd>
 800bca8:	e005      	b.n	800bcb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	3318      	adds	r3, #24
 800bcae:	4619      	mov	r1, r3
 800bcb0:	480e      	ldr	r0, [pc, #56]	; (800bcec <xTaskRemoveFromEventList+0xbc>)
 800bcb2:	f7fe faa2 	bl	800a1fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcba:	4b0d      	ldr	r3, [pc, #52]	; (800bcf0 <xTaskRemoveFromEventList+0xc0>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d905      	bls.n	800bcd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <xTaskRemoveFromEventList+0xc4>)
 800bcca:	2201      	movs	r2, #1
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e001      	b.n	800bcd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcd4:	697b      	ldr	r3, [r7, #20]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3718      	adds	r7, #24
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20000e14 	.word	0x20000e14
 800bce4:	20000df4 	.word	0x20000df4
 800bce8:	2000091c 	.word	0x2000091c
 800bcec:	20000dac 	.word	0x20000dac
 800bcf0:	20000918 	.word	0x20000918
 800bcf4:	20000e00 	.word	0x20000e00

0800bcf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd00:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <vTaskInternalSetTimeOutState+0x24>)
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd08:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <vTaskInternalSetTimeOutState+0x28>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	605a      	str	r2, [r3, #4]
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr
 800bd1c:	20000e04 	.word	0x20000e04
 800bd20:	20000df0 	.word	0x20000df0

0800bd24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10a      	bne.n	800bd4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	613b      	str	r3, [r7, #16]
}
 800bd46:	bf00      	nop
 800bd48:	e7fe      	b.n	800bd48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10a      	bne.n	800bd66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	60fb      	str	r3, [r7, #12]
}
 800bd62:	bf00      	nop
 800bd64:	e7fe      	b.n	800bd64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bd66:	f001 f835 	bl	800cdd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd6a:	4b1d      	ldr	r3, [pc, #116]	; (800bde0 <xTaskCheckForTimeOut+0xbc>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd82:	d102      	bne.n	800bd8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	61fb      	str	r3, [r7, #28]
 800bd88:	e023      	b.n	800bdd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <xTaskCheckForTimeOut+0xc0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d007      	beq.n	800bda6 <xTaskCheckForTimeOut+0x82>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d302      	bcc.n	800bda6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	61fb      	str	r3, [r7, #28]
 800bda4:	e015      	b.n	800bdd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	697a      	ldr	r2, [r7, #20]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d20b      	bcs.n	800bdc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	1ad2      	subs	r2, r2, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7ff ff9b 	bl	800bcf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
 800bdc6:	e004      	b.n	800bdd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdd2:	f001 f82f 	bl	800ce34 <vPortExitCritical>

	return xReturn;
 800bdd6:	69fb      	ldr	r3, [r7, #28]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3720      	adds	r7, #32
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20000df0 	.word	0x20000df0
 800bde4:	20000e04 	.word	0x20000e04

0800bde8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bde8:	b480      	push	{r7}
 800bdea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bdec:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <vTaskMissedYield+0x14>)
 800bdee:	2201      	movs	r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]
}
 800bdf2:	bf00      	nop
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000e00 	.word	0x20000e00

0800be00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be08:	f000 f852 	bl	800beb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be0c:	4b06      	ldr	r3, [pc, #24]	; (800be28 <prvIdleTask+0x28>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b01      	cmp	r3, #1
 800be12:	d9f9      	bls.n	800be08 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be14:	4b05      	ldr	r3, [pc, #20]	; (800be2c <prvIdleTask+0x2c>)
 800be16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be24:	e7f0      	b.n	800be08 <prvIdleTask+0x8>
 800be26:	bf00      	nop
 800be28:	2000091c 	.word	0x2000091c
 800be2c:	e000ed04 	.word	0xe000ed04

0800be30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be36:	2300      	movs	r3, #0
 800be38:	607b      	str	r3, [r7, #4]
 800be3a:	e00c      	b.n	800be56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4a12      	ldr	r2, [pc, #72]	; (800be90 <prvInitialiseTaskLists+0x60>)
 800be48:	4413      	add	r3, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fe f9a8 	bl	800a1a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3301      	adds	r3, #1
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b37      	cmp	r3, #55	; 0x37
 800be5a:	d9ef      	bls.n	800be3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be5c:	480d      	ldr	r0, [pc, #52]	; (800be94 <prvInitialiseTaskLists+0x64>)
 800be5e:	f7fe f99f 	bl	800a1a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be62:	480d      	ldr	r0, [pc, #52]	; (800be98 <prvInitialiseTaskLists+0x68>)
 800be64:	f7fe f99c 	bl	800a1a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be68:	480c      	ldr	r0, [pc, #48]	; (800be9c <prvInitialiseTaskLists+0x6c>)
 800be6a:	f7fe f999 	bl	800a1a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be6e:	480c      	ldr	r0, [pc, #48]	; (800bea0 <prvInitialiseTaskLists+0x70>)
 800be70:	f7fe f996 	bl	800a1a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be74:	480b      	ldr	r0, [pc, #44]	; (800bea4 <prvInitialiseTaskLists+0x74>)
 800be76:	f7fe f993 	bl	800a1a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be7a:	4b0b      	ldr	r3, [pc, #44]	; (800bea8 <prvInitialiseTaskLists+0x78>)
 800be7c:	4a05      	ldr	r2, [pc, #20]	; (800be94 <prvInitialiseTaskLists+0x64>)
 800be7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be80:	4b0a      	ldr	r3, [pc, #40]	; (800beac <prvInitialiseTaskLists+0x7c>)
 800be82:	4a05      	ldr	r2, [pc, #20]	; (800be98 <prvInitialiseTaskLists+0x68>)
 800be84:	601a      	str	r2, [r3, #0]
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	2000091c 	.word	0x2000091c
 800be94:	20000d7c 	.word	0x20000d7c
 800be98:	20000d90 	.word	0x20000d90
 800be9c:	20000dac 	.word	0x20000dac
 800bea0:	20000dc0 	.word	0x20000dc0
 800bea4:	20000dd8 	.word	0x20000dd8
 800bea8:	20000da4 	.word	0x20000da4
 800beac:	20000da8 	.word	0x20000da8

0800beb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beb6:	e019      	b.n	800beec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800beb8:	f000 ff8c 	bl	800cdd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bebc:	4b10      	ldr	r3, [pc, #64]	; (800bf00 <prvCheckTasksWaitingTermination+0x50>)
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4618      	mov	r0, r3
 800beca:	f7fe f9f3 	bl	800a2b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bece:	4b0d      	ldr	r3, [pc, #52]	; (800bf04 <prvCheckTasksWaitingTermination+0x54>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	4a0b      	ldr	r2, [pc, #44]	; (800bf04 <prvCheckTasksWaitingTermination+0x54>)
 800bed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bed8:	4b0b      	ldr	r3, [pc, #44]	; (800bf08 <prvCheckTasksWaitingTermination+0x58>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3b01      	subs	r3, #1
 800bede:	4a0a      	ldr	r2, [pc, #40]	; (800bf08 <prvCheckTasksWaitingTermination+0x58>)
 800bee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bee2:	f000 ffa7 	bl	800ce34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f810 	bl	800bf0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <prvCheckTasksWaitingTermination+0x58>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e1      	bne.n	800beb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20000dc0 	.word	0x20000dc0
 800bf04:	20000dec 	.word	0x20000dec
 800bf08:	20000dd4 	.word	0x20000dd4

0800bf0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3354      	adds	r3, #84	; 0x54
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f002 fd79 	bl	800ea10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d108      	bne.n	800bf3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 f93f 	bl	800d1b0 <vPortFree>
				vPortFree( pxTCB );
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f001 f93c 	bl	800d1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf38:	e018      	b.n	800bf6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d103      	bne.n	800bf4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f001 f933 	bl	800d1b0 <vPortFree>
	}
 800bf4a:	e00f      	b.n	800bf6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d00a      	beq.n	800bf6c <prvDeleteTCB+0x60>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	60fb      	str	r3, [r7, #12]
}
 800bf68:	bf00      	nop
 800bf6a:	e7fe      	b.n	800bf6a <prvDeleteTCB+0x5e>
	}
 800bf6c:	bf00      	nop
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b083      	sub	sp, #12
 800bf78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf7a:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <prvResetNextTaskUnblockTime+0x38>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d104      	bne.n	800bf8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf84:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800bf86:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf8c:	e008      	b.n	800bfa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf8e:	4b07      	ldr	r3, [pc, #28]	; (800bfac <prvResetNextTaskUnblockTime+0x38>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	4a04      	ldr	r2, [pc, #16]	; (800bfb0 <prvResetNextTaskUnblockTime+0x3c>)
 800bf9e:	6013      	str	r3, [r2, #0]
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	20000da4 	.word	0x20000da4
 800bfb0:	20000e0c 	.word	0x20000e0c

0800bfb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfba:	4b0b      	ldr	r3, [pc, #44]	; (800bfe8 <xTaskGetSchedulerState+0x34>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	607b      	str	r3, [r7, #4]
 800bfc6:	e008      	b.n	800bfda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfc8:	4b08      	ldr	r3, [pc, #32]	; (800bfec <xTaskGetSchedulerState+0x38>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	607b      	str	r3, [r7, #4]
 800bfd4:	e001      	b.n	800bfda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bfda:	687b      	ldr	r3, [r7, #4]
	}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	20000df8 	.word	0x20000df8
 800bfec:	20000e14 	.word	0x20000e14

0800bff0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bffc:	2300      	movs	r3, #0
 800bffe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d051      	beq.n	800c0aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00a:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <xTaskPriorityInherit+0xc4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	429a      	cmp	r2, r3
 800c012:	d241      	bcs.n	800c098 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	db06      	blt.n	800c02a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c01c:	4b25      	ldr	r3, [pc, #148]	; (800c0b4 <xTaskPriorityInherit+0xc4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	6959      	ldr	r1, [r3, #20]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c032:	4613      	mov	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4a1f      	ldr	r2, [pc, #124]	; (800c0b8 <xTaskPriorityInherit+0xc8>)
 800c03c:	4413      	add	r3, r2
 800c03e:	4299      	cmp	r1, r3
 800c040:	d122      	bne.n	800c088 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	3304      	adds	r3, #4
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe f934 	bl	800a2b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c04c:	4b19      	ldr	r3, [pc, #100]	; (800c0b4 <xTaskPriorityInherit+0xc4>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05a:	4b18      	ldr	r3, [pc, #96]	; (800c0bc <xTaskPriorityInherit+0xcc>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d903      	bls.n	800c06a <xTaskPriorityInherit+0x7a>
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <xTaskPriorityInherit+0xcc>)
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4a10      	ldr	r2, [pc, #64]	; (800c0b8 <xTaskPriorityInherit+0xc8>)
 800c078:	441a      	add	r2, r3
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7fe f8ba 	bl	800a1fa <vListInsertEnd>
 800c086:	e004      	b.n	800c092 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <xTaskPriorityInherit+0xc4>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c092:	2301      	movs	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	e008      	b.n	800c0aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c09c:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <xTaskPriorityInherit+0xc4>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d201      	bcs.n	800c0aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
	}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20000918 	.word	0x20000918
 800c0b8:	2000091c 	.word	0x2000091c
 800c0bc:	20000df4 	.word	0x20000df4

0800c0c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d056      	beq.n	800c184 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0d6:	4b2e      	ldr	r3, [pc, #184]	; (800c190 <xTaskPriorityDisinherit+0xd0>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d00a      	beq.n	800c0f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	60bb      	str	r3, [r7, #8]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c118:	1e5a      	subs	r2, r3, #1
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c126:	429a      	cmp	r2, r3
 800c128:	d02c      	beq.n	800c184 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d128      	bne.n	800c184 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	3304      	adds	r3, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe f8bc 	bl	800a2b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c154:	4b0f      	ldr	r3, [pc, #60]	; (800c194 <xTaskPriorityDisinherit+0xd4>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d903      	bls.n	800c164 <xTaskPriorityDisinherit+0xa4>
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	4a0c      	ldr	r2, [pc, #48]	; (800c194 <xTaskPriorityDisinherit+0xd4>)
 800c162:	6013      	str	r3, [r2, #0]
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c168:	4613      	mov	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4a09      	ldr	r2, [pc, #36]	; (800c198 <xTaskPriorityDisinherit+0xd8>)
 800c172:	441a      	add	r2, r3
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	3304      	adds	r3, #4
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fe f83d 	bl	800a1fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c180:	2301      	movs	r3, #1
 800c182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c184:	697b      	ldr	r3, [r7, #20]
	}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20000918 	.word	0x20000918
 800c194:	20000df4 	.word	0x20000df4
 800c198:	2000091c 	.word	0x2000091c

0800c19c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d06a      	beq.n	800c28a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60fb      	str	r3, [r7, #12]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d902      	bls.n	800c1e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	61fb      	str	r3, [r7, #28]
 800c1e0:	e002      	b.n	800c1e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d04b      	beq.n	800c28a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d146      	bne.n	800c28a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c1fc:	4b25      	ldr	r3, [pc, #148]	; (800c294 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	69ba      	ldr	r2, [r7, #24]
 800c202:	429a      	cmp	r2, r3
 800c204:	d10a      	bne.n	800c21c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	60bb      	str	r3, [r7, #8]
}
 800c218:	bf00      	nop
 800c21a:	e7fe      	b.n	800c21a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	69fa      	ldr	r2, [r7, #28]
 800c226:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	db04      	blt.n	800c23a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	6959      	ldr	r1, [r3, #20]
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4a13      	ldr	r2, [pc, #76]	; (800c298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c24a:	4413      	add	r3, r2
 800c24c:	4299      	cmp	r1, r3
 800c24e:	d11c      	bne.n	800c28a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	3304      	adds	r3, #4
 800c254:	4618      	mov	r0, r3
 800c256:	f7fe f82d 	bl	800a2b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25e:	4b0f      	ldr	r3, [pc, #60]	; (800c29c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d903      	bls.n	800c26e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	4a0c      	ldr	r2, [pc, #48]	; (800c29c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c272:	4613      	mov	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	4413      	add	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4a07      	ldr	r2, [pc, #28]	; (800c298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c27c:	441a      	add	r2, r3
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	3304      	adds	r3, #4
 800c282:	4619      	mov	r1, r3
 800c284:	4610      	mov	r0, r2
 800c286:	f7fd ffb8 	bl	800a1fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c28a:	bf00      	nop
 800c28c:	3720      	adds	r7, #32
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000918 	.word	0x20000918
 800c298:	2000091c 	.word	0x2000091c
 800c29c:	20000df4 	.word	0x20000df4

0800c2a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d004      	beq.n	800c2b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2b2:	3201      	adds	r2, #1
 800c2b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c2b6:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
	}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20000918 	.word	0x20000918

0800c2c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2d2:	4b21      	ldr	r3, [pc, #132]	; (800c358 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2d8:	4b20      	ldr	r3, [pc, #128]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fd ffe8 	bl	800a2b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d10a      	bne.n	800c302 <prvAddCurrentTaskToDelayedList+0x3a>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d007      	beq.n	800c302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f2:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4819      	ldr	r0, [pc, #100]	; (800c360 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2fc:	f7fd ff7d 	bl	800a1fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c300:	e026      	b.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4413      	add	r3, r2
 800c308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c30a:	4b14      	ldr	r3, [pc, #80]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d209      	bcs.n	800c32e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c31a:	4b12      	ldr	r3, [pc, #72]	; (800c364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3304      	adds	r3, #4
 800c324:	4619      	mov	r1, r3
 800c326:	4610      	mov	r0, r2
 800c328:	f7fd ff8b 	bl	800a242 <vListInsert>
}
 800c32c:	e010      	b.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c32e:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	4610      	mov	r0, r2
 800c33c:	f7fd ff81 	bl	800a242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	429a      	cmp	r2, r3
 800c348:	d202      	bcs.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c34a:	4a08      	ldr	r2, [pc, #32]	; (800c36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6013      	str	r3, [r2, #0]
}
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	20000df0 	.word	0x20000df0
 800c35c:	20000918 	.word	0x20000918
 800c360:	20000dd8 	.word	0x20000dd8
 800c364:	20000da8 	.word	0x20000da8
 800c368:	20000da4 	.word	0x20000da4
 800c36c:	20000e0c 	.word	0x20000e0c

0800c370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08a      	sub	sp, #40	; 0x28
 800c374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c37a:	f000 fba1 	bl	800cac0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c37e:	4b1c      	ldr	r3, [pc, #112]	; (800c3f0 <xTimerCreateTimerTask+0x80>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d021      	beq.n	800c3ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c38e:	1d3a      	adds	r2, r7, #4
 800c390:	f107 0108 	add.w	r1, r7, #8
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fd fee7 	bl	800a16c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	460a      	mov	r2, r1
 800c3b0:	4910      	ldr	r1, [pc, #64]	; (800c3f4 <xTimerCreateTimerTask+0x84>)
 800c3b2:	4811      	ldr	r0, [pc, #68]	; (800c3f8 <xTimerCreateTimerTask+0x88>)
 800c3b4:	f7fe ffb6 	bl	800b324 <xTaskCreateStatic>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <xTimerCreateTimerTask+0x8c>)
 800c3bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <xTimerCreateTimerTask+0x8c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	613b      	str	r3, [r7, #16]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20000e48 	.word	0x20000e48
 800c3f4:	0800f008 	.word	0x0800f008
 800c3f8:	0800c669 	.word	0x0800c669
 800c3fc:	20000e4c 	.word	0x20000e4c

0800c400 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af02      	add	r7, sp, #8
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c40e:	202c      	movs	r0, #44	; 0x2c
 800c410:	f000 fe02 	bl	800d018 <pvPortMalloc>
 800c414:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00d      	beq.n	800c438 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	9301      	str	r3, [sp, #4]
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	68b9      	ldr	r1, [r7, #8]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f000 f843 	bl	800c4be <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c438:	697b      	ldr	r3, [r7, #20]
	}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3718      	adds	r7, #24
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08a      	sub	sp, #40	; 0x28
 800c446:	af02      	add	r7, sp, #8
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c450:	232c      	movs	r3, #44	; 0x2c
 800c452:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	2b2c      	cmp	r3, #44	; 0x2c
 800c458:	d00a      	beq.n	800c470 <xTimerCreateStatic+0x2e>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	61bb      	str	r3, [r7, #24]
}
 800c46c:	bf00      	nop
 800c46e:	e7fe      	b.n	800c46e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c470:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <xTimerCreateStatic+0x4c>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	617b      	str	r3, [r7, #20]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00d      	beq.n	800c4b4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	2202      	movs	r2, #2
 800c49c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	9301      	str	r3, [sp, #4]
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	68b9      	ldr	r1, [r7, #8]
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 f805 	bl	800c4be <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c4b4:	69fb      	ldr	r3, [r7, #28]
	}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3720      	adds	r7, #32
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b086      	sub	sp, #24
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	60b9      	str	r1, [r7, #8]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10a      	bne.n	800c4e8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	617b      	str	r3, [r7, #20]
}
 800c4e4:	bf00      	nop
 800c4e6:	e7fe      	b.n	800c4e6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d01e      	beq.n	800c52c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c4ee:	f000 fae7 	bl	800cac0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	6a3a      	ldr	r2, [r7, #32]
 800c508:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	3304      	adds	r3, #4
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fd fe66 	bl	800a1e0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d008      	beq.n	800c52c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c520:	f043 0304 	orr.w	r3, r3, #4
 800c524:	b2da      	uxtb	r2, r3
 800c526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c528:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c52c:	bf00      	nop
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b08a      	sub	sp, #40	; 0x28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c542:	2300      	movs	r3, #0
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10a      	bne.n	800c562 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	623b      	str	r3, [r7, #32]
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c562:	4b1a      	ldr	r3, [pc, #104]	; (800c5cc <xTimerGenericCommand+0x98>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d02a      	beq.n	800c5c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b05      	cmp	r3, #5
 800c57a:	dc18      	bgt.n	800c5ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c57c:	f7ff fd1a 	bl	800bfb4 <xTaskGetSchedulerState>
 800c580:	4603      	mov	r3, r0
 800c582:	2b02      	cmp	r3, #2
 800c584:	d109      	bne.n	800c59a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c586:	4b11      	ldr	r3, [pc, #68]	; (800c5cc <xTimerGenericCommand+0x98>)
 800c588:	6818      	ldr	r0, [r3, #0]
 800c58a:	f107 0110 	add.w	r1, r7, #16
 800c58e:	2300      	movs	r3, #0
 800c590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c592:	f7fe f861 	bl	800a658 <xQueueGenericSend>
 800c596:	6278      	str	r0, [r7, #36]	; 0x24
 800c598:	e012      	b.n	800c5c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c59a:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <xTimerGenericCommand+0x98>)
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	f107 0110 	add.w	r1, r7, #16
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	f7fe f857 	bl	800a658 <xQueueGenericSend>
 800c5aa:	6278      	str	r0, [r7, #36]	; 0x24
 800c5ac:	e008      	b.n	800c5c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5ae:	4b07      	ldr	r3, [pc, #28]	; (800c5cc <xTimerGenericCommand+0x98>)
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f107 0110 	add.w	r1, r7, #16
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	f7fe f94b 	bl	800a854 <xQueueGenericSendFromISR>
 800c5be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3728      	adds	r7, #40	; 0x28
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20000e48 	.word	0x20000e48

0800c5d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af02      	add	r7, sp, #8
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5da:	4b22      	ldr	r3, [pc, #136]	; (800c664 <prvProcessExpiredTimer+0x94>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7fd fe63 	bl	800a2b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5f4:	f003 0304 	and.w	r3, r3, #4
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d022      	beq.n	800c642 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	699a      	ldr	r2, [r3, #24]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	18d1      	adds	r1, r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6978      	ldr	r0, [r7, #20]
 800c60a:	f000 f8d1 	bl	800c7b0 <prvInsertTimerInActiveList>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01f      	beq.n	800c654 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c614:	2300      	movs	r3, #0
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	2300      	movs	r3, #0
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	2100      	movs	r1, #0
 800c61e:	6978      	ldr	r0, [r7, #20]
 800c620:	f7ff ff88 	bl	800c534 <xTimerGenericCommand>
 800c624:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d113      	bne.n	800c654 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60fb      	str	r3, [r7, #12]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c648:	f023 0301 	bic.w	r3, r3, #1
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	6978      	ldr	r0, [r7, #20]
 800c65a:	4798      	blx	r3
}
 800c65c:	bf00      	nop
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20000e40 	.word	0x20000e40

0800c668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c670:	f107 0308 	add.w	r3, r7, #8
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f857 	bl	800c728 <prvGetNextExpireTime>
 800c67a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	4619      	mov	r1, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 f803 	bl	800c68c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c686:	f000 f8d5 	bl	800c834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c68a:	e7f1      	b.n	800c670 <prvTimerTask+0x8>

0800c68c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c696:	f7ff f8a1 	bl	800b7dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c69a:	f107 0308 	add.w	r3, r7, #8
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f866 	bl	800c770 <prvSampleTimeNow>
 800c6a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d130      	bne.n	800c70e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <prvProcessTimerOrBlockTask+0x3c>
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d806      	bhi.n	800c6c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c6ba:	f7ff f89d 	bl	800b7f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c6be:	68f9      	ldr	r1, [r7, #12]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff ff85 	bl	800c5d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c6c6:	e024      	b.n	800c712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d008      	beq.n	800c6e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c6ce:	4b13      	ldr	r3, [pc, #76]	; (800c71c <prvProcessTimerOrBlockTask+0x90>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d101      	bne.n	800c6dc <prvProcessTimerOrBlockTask+0x50>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e000      	b.n	800c6de <prvProcessTimerOrBlockTask+0x52>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6e0:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <prvProcessTimerOrBlockTask+0x94>)
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	f7fe fde5 	bl	800b2bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6f2:	f7ff f881 	bl	800b7f8 <xTaskResumeAll>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10a      	bne.n	800c712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6fc:	4b09      	ldr	r3, [pc, #36]	; (800c724 <prvProcessTimerOrBlockTask+0x98>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	f3bf 8f6f 	isb	sy
}
 800c70c:	e001      	b.n	800c712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c70e:	f7ff f873 	bl	800b7f8 <xTaskResumeAll>
}
 800c712:	bf00      	nop
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000e44 	.word	0x20000e44
 800c720:	20000e48 	.word	0x20000e48
 800c724:	e000ed04 	.word	0xe000ed04

0800c728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c730:	4b0e      	ldr	r3, [pc, #56]	; (800c76c <prvGetNextExpireTime+0x44>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <prvGetNextExpireTime+0x16>
 800c73a:	2201      	movs	r2, #1
 800c73c:	e000      	b.n	800c740 <prvGetNextExpireTime+0x18>
 800c73e:	2200      	movs	r2, #0
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d105      	bne.n	800c758 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c74c:	4b07      	ldr	r3, [pc, #28]	; (800c76c <prvGetNextExpireTime+0x44>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	e001      	b.n	800c75c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c75c:	68fb      	ldr	r3, [r7, #12]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3714      	adds	r7, #20
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	20000e40 	.word	0x20000e40

0800c770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c778:	f7ff f8dc 	bl	800b934 <xTaskGetTickCount>
 800c77c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c77e:	4b0b      	ldr	r3, [pc, #44]	; (800c7ac <prvSampleTimeNow+0x3c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	429a      	cmp	r2, r3
 800c786:	d205      	bcs.n	800c794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c788:	f000 f936 	bl	800c9f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e002      	b.n	800c79a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c79a:	4a04      	ldr	r2, [pc, #16]	; (800c7ac <prvSampleTimeNow+0x3c>)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000e50 	.word	0x20000e50

0800c7b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d812      	bhi.n	800c7fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	1ad2      	subs	r2, r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d302      	bcc.n	800c7ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	e01b      	b.n	800c822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7ea:	4b10      	ldr	r3, [pc, #64]	; (800c82c <prvInsertTimerInActiveList+0x7c>)
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	f7fd fd24 	bl	800a242 <vListInsert>
 800c7fa:	e012      	b.n	800c822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	429a      	cmp	r2, r3
 800c802:	d206      	bcs.n	800c812 <prvInsertTimerInActiveList+0x62>
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d302      	bcc.n	800c812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c80c:	2301      	movs	r3, #1
 800c80e:	617b      	str	r3, [r7, #20]
 800c810:	e007      	b.n	800c822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c812:	4b07      	ldr	r3, [pc, #28]	; (800c830 <prvInsertTimerInActiveList+0x80>)
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	3304      	adds	r3, #4
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7fd fd10 	bl	800a242 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c822:	697b      	ldr	r3, [r7, #20]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20000e44 	.word	0x20000e44
 800c830:	20000e40 	.word	0x20000e40

0800c834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b08e      	sub	sp, #56	; 0x38
 800c838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c83a:	e0ca      	b.n	800c9d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	da18      	bge.n	800c874 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c842:	1d3b      	adds	r3, r7, #4
 800c844:	3304      	adds	r3, #4
 800c846:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	61fb      	str	r3, [r7, #28]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86a:	6850      	ldr	r0, [r2, #4]
 800c86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c86e:	6892      	ldr	r2, [r2, #8]
 800c870:	4611      	mov	r1, r2
 800c872:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f2c0 80aa 	blt.w	800c9d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	695b      	ldr	r3, [r3, #20]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	3304      	adds	r3, #4
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fd fd11 	bl	800a2b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c892:	463b      	mov	r3, r7
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff ff6b 	bl	800c770 <prvSampleTimeNow>
 800c89a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b09      	cmp	r3, #9
 800c8a0:	f200 8097 	bhi.w	800c9d2 <prvProcessReceivedCommands+0x19e>
 800c8a4:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <prvProcessReceivedCommands+0x78>)
 800c8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8aa:	bf00      	nop
 800c8ac:	0800c8d5 	.word	0x0800c8d5
 800c8b0:	0800c8d5 	.word	0x0800c8d5
 800c8b4:	0800c8d5 	.word	0x0800c8d5
 800c8b8:	0800c949 	.word	0x0800c949
 800c8bc:	0800c95d 	.word	0x0800c95d
 800c8c0:	0800c9a7 	.word	0x0800c9a7
 800c8c4:	0800c8d5 	.word	0x0800c8d5
 800c8c8:	0800c8d5 	.word	0x0800c8d5
 800c8cc:	0800c949 	.word	0x0800c949
 800c8d0:	0800c95d 	.word	0x0800c95d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8da:	f043 0301 	orr.w	r3, r3, #1
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	18d1      	adds	r1, r2, r3
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f4:	f7ff ff5c 	bl	800c7b0 <prvInsertTimerInActiveList>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d069      	beq.n	800c9d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c904:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90c:	f003 0304 	and.w	r3, r3, #4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d05e      	beq.n	800c9d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	441a      	add	r2, r3
 800c91c:	2300      	movs	r3, #0
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	2300      	movs	r3, #0
 800c922:	2100      	movs	r1, #0
 800c924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c926:	f7ff fe05 	bl	800c534 <xTimerGenericCommand>
 800c92a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d14f      	bne.n	800c9d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	61bb      	str	r3, [r7, #24]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c94e:	f023 0301 	bic.w	r3, r3, #1
 800c952:	b2da      	uxtb	r2, r3
 800c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c95a:	e03a      	b.n	800c9d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c962:	f043 0301 	orr.w	r3, r3, #1
 800c966:	b2da      	uxtb	r2, r3
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c972:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c976:	699b      	ldr	r3, [r3, #24]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	617b      	str	r3, [r7, #20]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	18d1      	adds	r1, r2, r3
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c99e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9a0:	f7ff ff06 	bl	800c7b0 <prvInsertTimerInActiveList>
					break;
 800c9a4:	e015      	b.n	800c9d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ac:	f003 0302 	and.w	r3, r3, #2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d103      	bne.n	800c9bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9b6:	f000 fbfb 	bl	800d1b0 <vPortFree>
 800c9ba:	e00a      	b.n	800c9d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c9ce:	e000      	b.n	800c9d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c9d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9d2:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <prvProcessReceivedCommands+0x1c0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	1d39      	adds	r1, r7, #4
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe f862 	bl	800aaa4 <xQueueReceive>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f47f af2a 	bne.w	800c83c <prvProcessReceivedCommands+0x8>
	}
}
 800c9e8:	bf00      	nop
 800c9ea:	bf00      	nop
 800c9ec:	3730      	adds	r7, #48	; 0x30
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20000e48 	.word	0x20000e48

0800c9f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9fe:	e048      	b.n	800ca92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca00:	4b2d      	ldr	r3, [pc, #180]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca0a:	4b2b      	ldr	r3, [pc, #172]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	3304      	adds	r3, #4
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fd fc4b 	bl	800a2b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca2c:	f003 0304 	and.w	r3, r3, #4
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d02e      	beq.n	800ca92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d90e      	bls.n	800ca64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca52:	4b19      	ldr	r3, [pc, #100]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7fd fbf0 	bl	800a242 <vListInsert>
 800ca62:	e016      	b.n	800ca92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca64:	2300      	movs	r3, #0
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fd60 	bl	800c534 <xTimerGenericCommand>
 800ca74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	603b      	str	r3, [r7, #0]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca92:	4b09      	ldr	r3, [pc, #36]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1b1      	bne.n	800ca00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800caa2:	4b06      	ldr	r3, [pc, #24]	; (800cabc <prvSwitchTimerLists+0xc4>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a04      	ldr	r2, [pc, #16]	; (800cab8 <prvSwitchTimerLists+0xc0>)
 800caa8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800caaa:	4a04      	ldr	r2, [pc, #16]	; (800cabc <prvSwitchTimerLists+0xc4>)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	6013      	str	r3, [r2, #0]
}
 800cab0:	bf00      	nop
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	20000e40 	.word	0x20000e40
 800cabc:	20000e44 	.word	0x20000e44

0800cac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cac6:	f000 f985 	bl	800cdd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800caca:	4b15      	ldr	r3, [pc, #84]	; (800cb20 <prvCheckForValidListAndQueue+0x60>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d120      	bne.n	800cb14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cad2:	4814      	ldr	r0, [pc, #80]	; (800cb24 <prvCheckForValidListAndQueue+0x64>)
 800cad4:	f7fd fb64 	bl	800a1a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cad8:	4813      	ldr	r0, [pc, #76]	; (800cb28 <prvCheckForValidListAndQueue+0x68>)
 800cada:	f7fd fb61 	bl	800a1a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cade:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <prvCheckForValidListAndQueue+0x6c>)
 800cae0:	4a10      	ldr	r2, [pc, #64]	; (800cb24 <prvCheckForValidListAndQueue+0x64>)
 800cae2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cae4:	4b12      	ldr	r3, [pc, #72]	; (800cb30 <prvCheckForValidListAndQueue+0x70>)
 800cae6:	4a10      	ldr	r2, [pc, #64]	; (800cb28 <prvCheckForValidListAndQueue+0x68>)
 800cae8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800caea:	2300      	movs	r3, #0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4b11      	ldr	r3, [pc, #68]	; (800cb34 <prvCheckForValidListAndQueue+0x74>)
 800caf0:	4a11      	ldr	r2, [pc, #68]	; (800cb38 <prvCheckForValidListAndQueue+0x78>)
 800caf2:	2110      	movs	r1, #16
 800caf4:	200a      	movs	r0, #10
 800caf6:	f7fd fc6f 	bl	800a3d8 <xQueueGenericCreateStatic>
 800cafa:	4603      	mov	r3, r0
 800cafc:	4a08      	ldr	r2, [pc, #32]	; (800cb20 <prvCheckForValidListAndQueue+0x60>)
 800cafe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb00:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <prvCheckForValidListAndQueue+0x60>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d005      	beq.n	800cb14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb08:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <prvCheckForValidListAndQueue+0x60>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	490b      	ldr	r1, [pc, #44]	; (800cb3c <prvCheckForValidListAndQueue+0x7c>)
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe fb80 	bl	800b214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb14:	f000 f98e 	bl	800ce34 <vPortExitCritical>
}
 800cb18:	bf00      	nop
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	20000e48 	.word	0x20000e48
 800cb24:	20000e18 	.word	0x20000e18
 800cb28:	20000e2c 	.word	0x20000e2c
 800cb2c:	20000e40 	.word	0x20000e40
 800cb30:	20000e44 	.word	0x20000e44
 800cb34:	20000ef4 	.word	0x20000ef4
 800cb38:	20000e54 	.word	0x20000e54
 800cb3c:	0800f010 	.word	0x0800f010

0800cb40 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d10a      	bne.n	800cb68 <pvTimerGetTimerID+0x28>
	__asm volatile
 800cb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb56:	f383 8811 	msr	BASEPRI, r3
 800cb5a:	f3bf 8f6f 	isb	sy
 800cb5e:	f3bf 8f4f 	dsb	sy
 800cb62:	60fb      	str	r3, [r7, #12]
}
 800cb64:	bf00      	nop
 800cb66:	e7fe      	b.n	800cb66 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800cb68:	f000 f934 	bl	800cdd4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cb72:	f000 f95f 	bl	800ce34 <vPortExitCritical>

	return pvReturn;
 800cb76:	693b      	ldr	r3, [r7, #16]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb80:	b480      	push	{r7}
 800cb82:	b085      	sub	sp, #20
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3b04      	subs	r3, #4
 800cb90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3b04      	subs	r3, #4
 800cb9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	f023 0201 	bic.w	r2, r3, #1
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3b04      	subs	r3, #4
 800cbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbb0:	4a0c      	ldr	r2, [pc, #48]	; (800cbe4 <pxPortInitialiseStack+0x64>)
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3b14      	subs	r3, #20
 800cbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3b04      	subs	r3, #4
 800cbc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f06f 0202 	mvn.w	r2, #2
 800cbce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3b20      	subs	r3, #32
 800cbd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	0800cbe9 	.word	0x0800cbe9

0800cbe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cbf2:	4b12      	ldr	r3, [pc, #72]	; (800cc3c <prvTaskExitError+0x54>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbfa:	d00a      	beq.n	800cc12 <prvTaskExitError+0x2a>
	__asm volatile
 800cbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc00:	f383 8811 	msr	BASEPRI, r3
 800cc04:	f3bf 8f6f 	isb	sy
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	60fb      	str	r3, [r7, #12]
}
 800cc0e:	bf00      	nop
 800cc10:	e7fe      	b.n	800cc10 <prvTaskExitError+0x28>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	60bb      	str	r3, [r7, #8]
}
 800cc24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc26:	bf00      	nop
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0fc      	beq.n	800cc28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc2e:	bf00      	nop
 800cc30:	bf00      	nop
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	20000110 	.word	0x20000110

0800cc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <pxCurrentTCBConst2>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	6808      	ldr	r0, [r1, #0]
 800cc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc4a:	f380 8809 	msr	PSP, r0
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	4770      	bx	lr
 800cc5c:	f3af 8000 	nop.w

0800cc60 <pxCurrentTCBConst2>:
 800cc60:	20000918 	.word	0x20000918
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc64:	bf00      	nop
 800cc66:	bf00      	nop

0800cc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc68:	4808      	ldr	r0, [pc, #32]	; (800cc8c <prvPortStartFirstTask+0x24>)
 800cc6a:	6800      	ldr	r0, [r0, #0]
 800cc6c:	6800      	ldr	r0, [r0, #0]
 800cc6e:	f380 8808 	msr	MSP, r0
 800cc72:	f04f 0000 	mov.w	r0, #0
 800cc76:	f380 8814 	msr	CONTROL, r0
 800cc7a:	b662      	cpsie	i
 800cc7c:	b661      	cpsie	f
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	df00      	svc	0
 800cc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc8a:	bf00      	nop
 800cc8c:	e000ed08 	.word	0xe000ed08

0800cc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc96:	4b46      	ldr	r3, [pc, #280]	; (800cdb0 <xPortStartScheduler+0x120>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a46      	ldr	r2, [pc, #280]	; (800cdb4 <xPortStartScheduler+0x124>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d10a      	bne.n	800ccb6 <xPortStartScheduler+0x26>
	__asm volatile
 800cca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca4:	f383 8811 	msr	BASEPRI, r3
 800cca8:	f3bf 8f6f 	isb	sy
 800ccac:	f3bf 8f4f 	dsb	sy
 800ccb0:	613b      	str	r3, [r7, #16]
}
 800ccb2:	bf00      	nop
 800ccb4:	e7fe      	b.n	800ccb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ccb6:	4b3e      	ldr	r3, [pc, #248]	; (800cdb0 <xPortStartScheduler+0x120>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a3f      	ldr	r2, [pc, #252]	; (800cdb8 <xPortStartScheduler+0x128>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d10a      	bne.n	800ccd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	60fb      	str	r3, [r7, #12]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ccd6:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <xPortStartScheduler+0x12c>)
 800ccd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	22ff      	movs	r2, #255	; 0xff
 800cce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ccf0:	78fb      	ldrb	r3, [r7, #3]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b31      	ldr	r3, [pc, #196]	; (800cdc0 <xPortStartScheduler+0x130>)
 800ccfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ccfe:	4b31      	ldr	r3, [pc, #196]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd04:	e009      	b.n	800cd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd06:	4b2f      	ldr	r3, [pc, #188]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	4a2d      	ldr	r2, [pc, #180]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	005b      	lsls	r3, r3, #1
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd1a:	78fb      	ldrb	r3, [r7, #3]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd22:	2b80      	cmp	r3, #128	; 0x80
 800cd24:	d0ef      	beq.n	800cd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd26:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f1c3 0307 	rsb	r3, r3, #7
 800cd2e:	2b04      	cmp	r3, #4
 800cd30:	d00a      	beq.n	800cd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60bb      	str	r3, [r7, #8]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd48:	4b1e      	ldr	r3, [pc, #120]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	021b      	lsls	r3, r3, #8
 800cd4e:	4a1d      	ldr	r2, [pc, #116]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd52:	4b1c      	ldr	r3, [pc, #112]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd5a:	4a1a      	ldr	r2, [pc, #104]	; (800cdc4 <xPortStartScheduler+0x134>)
 800cd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd66:	4b18      	ldr	r3, [pc, #96]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a17      	ldr	r2, [pc, #92]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd72:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a14      	ldr	r2, [pc, #80]	; (800cdc8 <xPortStartScheduler+0x138>)
 800cd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd7e:	f000 f8dd 	bl	800cf3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <xPortStartScheduler+0x13c>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd88:	f000 f8fc 	bl	800cf84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd8c:	4b10      	ldr	r3, [pc, #64]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a0f      	ldr	r2, [pc, #60]	; (800cdd0 <xPortStartScheduler+0x140>)
 800cd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd98:	f7ff ff66 	bl	800cc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd9c:	f7fe fe94 	bl	800bac8 <vTaskSwitchContext>
	prvTaskExitError();
 800cda0:	f7ff ff22 	bl	800cbe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	e000ed00 	.word	0xe000ed00
 800cdb4:	410fc271 	.word	0x410fc271
 800cdb8:	410fc270 	.word	0x410fc270
 800cdbc:	e000e400 	.word	0xe000e400
 800cdc0:	20000f44 	.word	0x20000f44
 800cdc4:	20000f48 	.word	0x20000f48
 800cdc8:	e000ed20 	.word	0xe000ed20
 800cdcc:	20000110 	.word	0x20000110
 800cdd0:	e000ef34 	.word	0xe000ef34

0800cdd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
	__asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	607b      	str	r3, [r7, #4]
}
 800cdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cdee:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4a0d      	ldr	r2, [pc, #52]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cdf8:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <vPortEnterCritical+0x58>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d10f      	bne.n	800ce20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce00:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <vPortEnterCritical+0x5c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00a      	beq.n	800ce20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	603b      	str	r3, [r7, #0]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <vPortEnterCritical+0x4a>
	}
}
 800ce20:	bf00      	nop
 800ce22:	370c      	adds	r7, #12
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20000110 	.word	0x20000110
 800ce30:	e000ed04 	.word	0xe000ed04

0800ce34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce3a:	4b12      	ldr	r3, [pc, #72]	; (800ce84 <vPortExitCritical+0x50>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <vPortExitCritical+0x24>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	607b      	str	r3, [r7, #4]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce58:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <vPortExitCritical+0x50>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	4a09      	ldr	r2, [pc, #36]	; (800ce84 <vPortExitCritical+0x50>)
 800ce60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce62:	4b08      	ldr	r3, [pc, #32]	; (800ce84 <vPortExitCritical+0x50>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <vPortExitCritical+0x42>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	f383 8811 	msr	BASEPRI, r3
}
 800ce74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce76:	bf00      	nop
 800ce78:	370c      	adds	r7, #12
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	20000110 	.word	0x20000110
	...

0800ce90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce90:	f3ef 8009 	mrs	r0, PSP
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	4b15      	ldr	r3, [pc, #84]	; (800cef0 <pxCurrentTCBConst>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	f01e 0f10 	tst.w	lr, #16
 800cea0:	bf08      	it	eq
 800cea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceaa:	6010      	str	r0, [r2, #0]
 800ceac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ceb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ceb4:	f380 8811 	msr	BASEPRI, r0
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	f3bf 8f6f 	isb	sy
 800cec0:	f7fe fe02 	bl	800bac8 <vTaskSwitchContext>
 800cec4:	f04f 0000 	mov.w	r0, #0
 800cec8:	f380 8811 	msr	BASEPRI, r0
 800cecc:	bc09      	pop	{r0, r3}
 800cece:	6819      	ldr	r1, [r3, #0]
 800ced0:	6808      	ldr	r0, [r1, #0]
 800ced2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced6:	f01e 0f10 	tst.w	lr, #16
 800ceda:	bf08      	it	eq
 800cedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cee0:	f380 8809 	msr	PSP, r0
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	f3af 8000 	nop.w

0800cef0 <pxCurrentTCBConst>:
 800cef0:	20000918 	.word	0x20000918
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cef4:	bf00      	nop
 800cef6:	bf00      	nop

0800cef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	607b      	str	r3, [r7, #4]
}
 800cf10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf12:	f7fe fd1f 	bl	800b954 <xTaskIncrementTick>
 800cf16:	4603      	mov	r3, r0
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf1c:	4b06      	ldr	r3, [pc, #24]	; (800cf38 <xPortSysTickHandler+0x40>)
 800cf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	2300      	movs	r3, #0
 800cf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f383 8811 	msr	BASEPRI, r3
}
 800cf2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf30:	bf00      	nop
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	e000ed04 	.word	0xe000ed04

0800cf3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf40:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <vPortSetupTimerInterrupt+0x38>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <vPortSetupTimerInterrupt+0x3c>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	4a0a      	ldr	r2, [pc, #40]	; (800cf7c <vPortSetupTimerInterrupt+0x40>)
 800cf52:	fba2 2303 	umull	r2, r3, r2, r3
 800cf56:	099b      	lsrs	r3, r3, #6
 800cf58:	4a09      	ldr	r2, [pc, #36]	; (800cf80 <vPortSetupTimerInterrupt+0x44>)
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <vPortSetupTimerInterrupt+0x34>)
 800cf60:	2207      	movs	r2, #7
 800cf62:	601a      	str	r2, [r3, #0]
}
 800cf64:	bf00      	nop
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	e000e010 	.word	0xe000e010
 800cf74:	e000e018 	.word	0xe000e018
 800cf78:	20000000 	.word	0x20000000
 800cf7c:	10624dd3 	.word	0x10624dd3
 800cf80:	e000e014 	.word	0xe000e014

0800cf84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf94 <vPortEnableVFP+0x10>
 800cf88:	6801      	ldr	r1, [r0, #0]
 800cf8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf8e:	6001      	str	r1, [r0, #0]
 800cf90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf92:	bf00      	nop
 800cf94:	e000ed88 	.word	0xe000ed88

0800cf98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf9e:	f3ef 8305 	mrs	r3, IPSR
 800cfa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2b0f      	cmp	r3, #15
 800cfa8:	d914      	bls.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfaa:	4a17      	ldr	r2, [pc, #92]	; (800d008 <vPortValidateInterruptPriority+0x70>)
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfb4:	4b15      	ldr	r3, [pc, #84]	; (800d00c <vPortValidateInterruptPriority+0x74>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	7afa      	ldrb	r2, [r7, #11]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d20a      	bcs.n	800cfd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	607b      	str	r3, [r7, #4]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <vPortValidateInterruptPriority+0x78>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <vPortValidateInterruptPriority+0x7c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d90a      	bls.n	800cffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	f383 8811 	msr	BASEPRI, r3
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f3bf 8f4f 	dsb	sy
 800cff4:	603b      	str	r3, [r7, #0]
}
 800cff6:	bf00      	nop
 800cff8:	e7fe      	b.n	800cff8 <vPortValidateInterruptPriority+0x60>
	}
 800cffa:	bf00      	nop
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	e000e3f0 	.word	0xe000e3f0
 800d00c:	20000f44 	.word	0x20000f44
 800d010:	e000ed0c 	.word	0xe000ed0c
 800d014:	20000f48 	.word	0x20000f48

0800d018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d020:	2300      	movs	r3, #0
 800d022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d024:	f7fe fbda 	bl	800b7dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d028:	4b5b      	ldr	r3, [pc, #364]	; (800d198 <pvPortMalloc+0x180>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d030:	f000 f920 	bl	800d274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d034:	4b59      	ldr	r3, [pc, #356]	; (800d19c <pvPortMalloc+0x184>)
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4013      	ands	r3, r2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 8093 	bne.w	800d168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01d      	beq.n	800d084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d048:	2208      	movs	r2, #8
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4413      	add	r3, r2
 800d04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f003 0307 	and.w	r3, r3, #7
 800d056:	2b00      	cmp	r3, #0
 800d058:	d014      	beq.n	800d084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f023 0307 	bic.w	r3, r3, #7
 800d060:	3308      	adds	r3, #8
 800d062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <pvPortMalloc+0x6c>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	617b      	str	r3, [r7, #20]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d06e      	beq.n	800d168 <pvPortMalloc+0x150>
 800d08a:	4b45      	ldr	r3, [pc, #276]	; (800d1a0 <pvPortMalloc+0x188>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	429a      	cmp	r2, r3
 800d092:	d869      	bhi.n	800d168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d094:	4b43      	ldr	r3, [pc, #268]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d098:	4b42      	ldr	r3, [pc, #264]	; (800d1a4 <pvPortMalloc+0x18c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d09e:	e004      	b.n	800d0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d903      	bls.n	800d0bc <pvPortMalloc+0xa4>
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f1      	bne.n	800d0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0bc:	4b36      	ldr	r3, [pc, #216]	; (800d198 <pvPortMalloc+0x180>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d050      	beq.n	800d168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2208      	movs	r2, #8
 800d0cc:	4413      	add	r3, r2
 800d0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	6a3b      	ldr	r3, [r7, #32]
 800d0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	2308      	movs	r3, #8
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d91f      	bls.n	800d128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <pvPortMalloc+0xf8>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	613b      	str	r3, [r7, #16]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	1ad2      	subs	r2, r2, r3
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d122:	69b8      	ldr	r0, [r7, #24]
 800d124:	f000 f908 	bl	800d338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d128:	4b1d      	ldr	r3, [pc, #116]	; (800d1a0 <pvPortMalloc+0x188>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	4a1b      	ldr	r2, [pc, #108]	; (800d1a0 <pvPortMalloc+0x188>)
 800d134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d136:	4b1a      	ldr	r3, [pc, #104]	; (800d1a0 <pvPortMalloc+0x188>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b1b      	ldr	r3, [pc, #108]	; (800d1a8 <pvPortMalloc+0x190>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d203      	bcs.n	800d14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d142:	4b17      	ldr	r3, [pc, #92]	; (800d1a0 <pvPortMalloc+0x188>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a18      	ldr	r2, [pc, #96]	; (800d1a8 <pvPortMalloc+0x190>)
 800d148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	4b13      	ldr	r3, [pc, #76]	; (800d19c <pvPortMalloc+0x184>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	431a      	orrs	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	2200      	movs	r2, #0
 800d15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d15e:	4b13      	ldr	r3, [pc, #76]	; (800d1ac <pvPortMalloc+0x194>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	4a11      	ldr	r2, [pc, #68]	; (800d1ac <pvPortMalloc+0x194>)
 800d166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d168:	f7fe fb46 	bl	800b7f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00a      	beq.n	800d18c <pvPortMalloc+0x174>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60fb      	str	r3, [r7, #12]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <pvPortMalloc+0x172>
	return pvReturn;
 800d18c:	69fb      	ldr	r3, [r7, #28]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3728      	adds	r7, #40	; 0x28
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	20004b54 	.word	0x20004b54
 800d19c:	20004b68 	.word	0x20004b68
 800d1a0:	20004b58 	.word	0x20004b58
 800d1a4:	20004b4c 	.word	0x20004b4c
 800d1a8:	20004b5c 	.word	0x20004b5c
 800d1ac:	20004b60 	.word	0x20004b60

0800d1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d04d      	beq.n	800d25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1c2:	2308      	movs	r3, #8
 800d1c4:	425b      	negs	r3, r3
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4413      	add	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	4b24      	ldr	r3, [pc, #144]	; (800d268 <vPortFree+0xb8>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4013      	ands	r3, r2
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <vPortFree+0x44>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	60fb      	str	r3, [r7, #12]
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00a      	beq.n	800d212 <vPortFree+0x62>
	__asm volatile
 800d1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	60bb      	str	r3, [r7, #8]
}
 800d20e:	bf00      	nop
 800d210:	e7fe      	b.n	800d210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4b14      	ldr	r3, [pc, #80]	; (800d268 <vPortFree+0xb8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4013      	ands	r3, r2
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d01e      	beq.n	800d25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11a      	bne.n	800d25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4b0e      	ldr	r3, [pc, #56]	; (800d268 <vPortFree+0xb8>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	43db      	mvns	r3, r3
 800d232:	401a      	ands	r2, r3
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d238:	f7fe fad0 	bl	800b7dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	4b0a      	ldr	r3, [pc, #40]	; (800d26c <vPortFree+0xbc>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4413      	add	r3, r2
 800d246:	4a09      	ldr	r2, [pc, #36]	; (800d26c <vPortFree+0xbc>)
 800d248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f000 f874 	bl	800d338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d250:	4b07      	ldr	r3, [pc, #28]	; (800d270 <vPortFree+0xc0>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	4a06      	ldr	r2, [pc, #24]	; (800d270 <vPortFree+0xc0>)
 800d258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d25a:	f7fe facd 	bl	800b7f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d25e:	bf00      	nop
 800d260:	3718      	adds	r7, #24
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	20004b68 	.word	0x20004b68
 800d26c:	20004b58 	.word	0x20004b58
 800d270:	20004b64 	.word	0x20004b64

0800d274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d280:	4b27      	ldr	r3, [pc, #156]	; (800d320 <prvHeapInit+0xac>)
 800d282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00c      	beq.n	800d2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3307      	adds	r3, #7
 800d292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0307 	bic.w	r3, r3, #7
 800d29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	1ad3      	subs	r3, r2, r3
 800d2a2:	4a1f      	ldr	r2, [pc, #124]	; (800d320 <prvHeapInit+0xac>)
 800d2a4:	4413      	add	r3, r2
 800d2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2ac:	4a1d      	ldr	r2, [pc, #116]	; (800d324 <prvHeapInit+0xb0>)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <prvHeapInit+0xb0>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	4413      	add	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2c0:	2208      	movs	r2, #8
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f023 0307 	bic.w	r3, r3, #7
 800d2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4a15      	ldr	r2, [pc, #84]	; (800d328 <prvHeapInit+0xb4>)
 800d2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d2d6:	4b14      	ldr	r3, [pc, #80]	; (800d328 <prvHeapInit+0xb4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <prvHeapInit+0xb4>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	; (800d328 <prvHeapInit+0xb4>)
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	4a0a      	ldr	r2, [pc, #40]	; (800d32c <prvHeapInit+0xb8>)
 800d302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	4a09      	ldr	r2, [pc, #36]	; (800d330 <prvHeapInit+0xbc>)
 800d30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d30c:	4b09      	ldr	r3, [pc, #36]	; (800d334 <prvHeapInit+0xc0>)
 800d30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d312:	601a      	str	r2, [r3, #0]
}
 800d314:	bf00      	nop
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20000f4c 	.word	0x20000f4c
 800d324:	20004b4c 	.word	0x20004b4c
 800d328:	20004b54 	.word	0x20004b54
 800d32c:	20004b5c 	.word	0x20004b5c
 800d330:	20004b58 	.word	0x20004b58
 800d334:	20004b68 	.word	0x20004b68

0800d338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d338:	b480      	push	{r7}
 800d33a:	b085      	sub	sp, #20
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d340:	4b28      	ldr	r3, [pc, #160]	; (800d3e4 <prvInsertBlockIntoFreeList+0xac>)
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	e002      	b.n	800d34c <prvInsertBlockIntoFreeList+0x14>
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d8f7      	bhi.n	800d346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	68ba      	ldr	r2, [r7, #8]
 800d360:	4413      	add	r3, r2
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d108      	bne.n	800d37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	685a      	ldr	r2, [r3, #4]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	441a      	add	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	441a      	add	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d118      	bne.n	800d3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	4b15      	ldr	r3, [pc, #84]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	429a      	cmp	r2, r3
 800d398:	d00d      	beq.n	800d3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	685a      	ldr	r2, [r3, #4]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	441a      	add	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	601a      	str	r2, [r3, #0]
 800d3b4:	e008      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3b6:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	601a      	str	r2, [r3, #0]
 800d3be:	e003      	b.n	800d3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3c8:	68fa      	ldr	r2, [r7, #12]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d002      	beq.n	800d3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3d6:	bf00      	nop
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	20004b4c 	.word	0x20004b4c
 800d3e8:	20004b54 	.word	0x20004b54

0800d3ec <master_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void master_crc16(modbus_master *master, uint8_t *buffer)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
    master->crc_hi = 0xFF;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	22ff      	movs	r2, #255	; 0xff
 800d3fa:	719a      	strb	r2, [r3, #6]
    master->crc_lo = 0xFF;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 800d402:	e01c      	b.n	800d43e <master_crc16+0x52>
    {
        master->buff_index = master->crc_hi ^ *buffer++;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	799a      	ldrb	r2, [r3, #6]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	1c59      	adds	r1, r3, #1
 800d40c:	6039      	str	r1, [r7, #0]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	4053      	eors	r3, r2
 800d412:	b2db      	uxtb	r3, r3
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	815a      	strh	r2, [r3, #10]
        master->crc_hi = master->crc_lo ^ crc_hi[master->buff_index];
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	79da      	ldrb	r2, [r3, #7]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	895b      	ldrh	r3, [r3, #10]
 800d422:	4619      	mov	r1, r3
 800d424:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <master_crc16+0x70>)
 800d426:	5c5b      	ldrb	r3, [r3, r1]
 800d428:	4053      	eors	r3, r2
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	719a      	strb	r2, [r3, #6]
        master->crc_lo = crc_lo[master->buff_index];
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	895b      	ldrh	r3, [r3, #10]
 800d434:	461a      	mov	r2, r3
 800d436:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <master_crc16+0x74>)
 800d438:	5c9a      	ldrb	r2, [r3, r2]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	71da      	strb	r2, [r3, #7]
    while (master->buff_len--)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	891b      	ldrh	r3, [r3, #8]
 800d442:	1e5a      	subs	r2, r3, #1
 800d444:	b291      	uxth	r1, r2
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	8111      	strh	r1, [r2, #8]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1da      	bne.n	800d404 <master_crc16+0x18>
    }
}
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	0800f188 	.word	0x0800f188
 800d460:	0800f288 	.word	0x0800f288

0800d464 <master_validate_reply>:

static osStatus_t master_validate_reply(modbus_master *master)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
    if (master->rx_len < 5)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d472:	2b04      	cmp	r3, #4
 800d474:	d802      	bhi.n	800d47c <master_validate_reply+0x18>
    {
        return osError;
 800d476:	f04f 33ff 	mov.w	r3, #4294967295
 800d47a:	e035      	b.n	800d4e8 <master_validate_reply+0x84>
    }
    master->buff_len = master->rx_len - 2;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d482:	3b02      	subs	r3, #2
 800d484:	b29a      	uxth	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->rx_buf);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	330c      	adds	r3, #12
 800d48e:	4619      	mov	r1, r3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff ffab 	bl	800d3ec <master_crc16>
    if ((master->crc_hi != master->rx_buf[master->rx_len - 2]) || (master->crc_lo != master->rx_buf[master->rx_len - 1]))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	799a      	ldrb	r2, [r3, #6]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d4a0:	3b02      	subs	r3, #2
 800d4a2:	6879      	ldr	r1, [r7, #4]
 800d4a4:	440b      	add	r3, r1
 800d4a6:	7b1b      	ldrb	r3, [r3, #12]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d10a      	bne.n	800d4c2 <master_validate_reply+0x5e>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	79da      	ldrb	r2, [r3, #7]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	6879      	ldr	r1, [r7, #4]
 800d4ba:	440b      	add	r3, r1
 800d4bc:	7b1b      	ldrb	r3, [r3, #12]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d002      	beq.n	800d4c8 <master_validate_reply+0x64>
    {
        return osError;
 800d4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c6:	e00f      	b.n	800d4e8 <master_validate_reply+0x84>
    }
    if ((master->rx_buf[0] != master->slave_id) || (master->rx_buf[1] != master->func_code))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	7b1a      	ldrb	r2, [r3, #12]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	791b      	ldrb	r3, [r3, #4]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d105      	bne.n	800d4e0 <master_validate_reply+0x7c>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	7b5a      	ldrb	r2, [r3, #13]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	795b      	ldrb	r3, [r3, #5]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d002      	beq.n	800d4e6 <master_validate_reply+0x82>
    {
        return osError;
 800d4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e4:	e000      	b.n	800d4e8 <master_validate_reply+0x84>
    }
    return osOK;
 800d4e6:	2300      	movs	r3, #0
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <master_request>:

static osStatus_t master_request(modbus_master *master, uint16_t timeout)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	807b      	strh	r3, [r7, #2]
    master->buff_len = master->tx_len;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	811a      	strh	r2, [r3, #8]
    master_crc16(master, master->tx_buf);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800d50c:	4619      	mov	r1, r3
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff ff6c 	bl	800d3ec <master_crc16>
    master->tx_buf[master->tx_len++] = master->crc_hi;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d51a:	1c5a      	adds	r2, r3, #1
 800d51c:	b291      	uxth	r1, r2
 800d51e:	687a      	ldr	r2, [r7, #4]
 800d520:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d524:	4619      	mov	r1, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	799a      	ldrb	r2, [r3, #6]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	440b      	add	r3, r1
 800d52e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->crc_lo;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	b291      	uxth	r1, r2
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d542:	4619      	mov	r1, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	79da      	ldrb	r2, [r3, #7]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	440b      	add	r3, r1
 800d54c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e

    osSemaphoreAcquire(master->idle_sem, 0);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d556:	2100      	movs	r1, #0
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fc fce3 	bl	8009f24 <osSemaphoreAcquire>
    HAL_UART_Receive_DMA(master->uart_port->uart, master->rx_buf, MB_MASTER_BUFFER_LENGTH);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6818      	ldr	r0, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	330c      	adds	r3, #12
 800d568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d56c:	4619      	mov	r1, r3
 800d56e:	f7fb f96b 	bl	8008848 <HAL_UART_Receive_DMA>

    master_set_tx_rx(master, tx);
 800d572:	2101      	movs	r1, #1
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f8b9 	bl	800d6ec <master_set_tx_rx>
    HAL_UART_Transmit_DMA(master->uart_port->uart, master->tx_buf, master->tx_len);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6818      	ldr	r0, [r3, #0]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f203 210e 	addw	r1, r3, #526	; 0x20e
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d58c:	461a      	mov	r2, r3
 800d58e:	f7fb f8dd 	bl	800874c <HAL_UART_Transmit_DMA>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 800d592:	e032      	b.n	800d5fa <master_request+0x10a>
    {
        if (master->idle_timer_flag == 0)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d107      	bne.n	800d5ae <master_request+0xbe>
        {
            osTimerStart(master->idle_timer, 2);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800d5a4:	2102      	movs	r1, #2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fc fc04 	bl	8009db4 <osTimerStart>
 800d5ac:	e025      	b.n	800d5fa <master_request+0x10a>
        }
        else if (master->idle_timer_flag == 1)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d120      	bne.n	800d5fa <master_request+0x10a>
        {
            HAL_UART_DMAStop(master->uart_port->uart);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fb f972 	bl	80088a8 <HAL_UART_DMAStop>
            if (master_validate_reply(master) == osOK)
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f7ff ff4d 	bl	800d464 <master_validate_reply>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d105      	bne.n	800d5dc <master_request+0xec>
            {
                master->com_status = osOK;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
                return osOK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	e02d      	b.n	800d638 <master_request+0x148>
            }
            master->com_status = osErrorParameter;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f06f 0203 	mvn.w	r2, #3
 800d5e2:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
            master->com_err_cnt++;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            return osError;
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f8:	e01e      	b.n	800d638 <master_request+0x148>
    while (osSemaphoreAcquire(master->idle_sem, timeout) == osOK)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d600:	887a      	ldrh	r2, [r7, #2]
 800d602:	4611      	mov	r1, r2
 800d604:	4618      	mov	r0, r3
 800d606:	f7fc fc8d 	bl	8009f24 <osSemaphoreAcquire>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d0c1      	beq.n	800d594 <master_request+0xa4>
        }
    }
    HAL_UART_DMAStop(master->uart_port->uart);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7fb f946 	bl	80088a8 <HAL_UART_DMAStop>
    master->com_err_cnt++;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    master->com_status = osErrorTimeout;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f06f 0201 	mvn.w	r2, #1
 800d630:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    return osError;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
    modbus_master *master = args;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	60fb      	str	r3, [r7, #12]
    if (master->rx_len == (MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800d652:	461a      	mov	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d664:	429a      	cmp	r2, r3
 800d666:	d109      	bne.n	800d67c <ostimer_callback+0x3c>
    {
        master->idle_timer_flag = 1;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d676:	4618      	mov	r0, r3
 800d678:	f7fc fca6 	bl	8009fc8 <osSemaphoreRelease>
    }
}
 800d67c:	bf00      	nop
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <master_init>:

void master_init(modbus_master *master, modbus_port *port, uint16_t slave_id)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	4613      	mov	r3, r2
 800d690:	80fb      	strh	r3, [r7, #6]
    master->idle_sem = osSemaphoreNew(1, 0, NULL);
 800d692:	2200      	movs	r2, #0
 800d694:	2100      	movs	r1, #0
 800d696:	2001      	movs	r0, #1
 800d698:	f7fc fbba 	bl	8009e10 <osSemaphoreNew>
 800d69c:	4602      	mov	r2, r0
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    master->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)master, NULL);
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	480f      	ldr	r0, [pc, #60]	; (800d6e8 <master_init+0x64>)
 800d6ac:	f7fc fb06 	bl	8009cbc <osTimerNew>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    master->uart_port = port;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	68ba      	ldr	r2, [r7, #8]
 800d6bc:	601a      	str	r2, [r3, #0]
    master->slave_id = slave_id;
 800d6be:	88fb      	ldrh	r3, [r7, #6]
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	711a      	strb	r2, [r3, #4]
    __HAL_UART_ENABLE_IT(master->uart_port->uart, UART_IT_IDLE);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68da      	ldr	r2, [r3, #12]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f042 0210 	orr.w	r2, r2, #16
 800d6dc:	60da      	str	r2, [r3, #12]
}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	0800d641 	.word	0x0800d641

0800d6ec <master_set_tx_rx>:

void master_set_tx_rx(modbus_master *master, uart_tx_rx_enum dir)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(master->uart_port->gpio_port, master->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6858      	ldr	r0, [r3, #4]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	8919      	ldrh	r1, [r3, #8]
 800d704:	78fb      	ldrb	r3, [r7, #3]
 800d706:	2b01      	cmp	r3, #1
 800d708:	bf0c      	ite	eq
 800d70a:	2301      	moveq	r3, #1
 800d70c:	2300      	movne	r3, #0
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	461a      	mov	r2, r3
 800d712:	f7f7 fea9 	bl	8005468 <HAL_GPIO_WritePin>
}
 800d716:	bf00      	nop
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <master_uart_idle>:

void master_uart_idle(modbus_master *master)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
    if (((READ_REG(master->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(master->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0310 	and.w	r3, r3, #16
 800d734:	2b00      	cmp	r3, #0
 800d736:	d02e      	beq.n	800d796 <master_uart_idle+0x78>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f003 0310 	and.w	r3, r3, #16
 800d746:	2b00      	cmp	r3, #0
 800d748:	d025      	beq.n	800d796 <master_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(master->uart_port->uart);
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	60fb      	str	r3, [r7, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	60fb      	str	r3, [r7, #12]
 800d766:	68fb      	ldr	r3, [r7, #12]
        master->rx_len = MB_MASTER_BUFFER_LENGTH - master->uart_port->uart->hdmarx->Instance->NDTR;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	b29b      	uxth	r3, r3
 800d776:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        master->idle_timer_flag = 0;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(master->idle_sem);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800d790:	4618      	mov	r0, r3
 800d792:	f7fc fc19 	bl	8009fc8 <osSemaphoreRelease>
    }
}
 800d796:	bf00      	nop
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <master_compose_tx_buffer>:

static void master_compose_tx_buffer(modbus_master *master, uint16_t addr, uint8_t fc)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b083      	sub	sp, #12
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	807b      	strh	r3, [r7, #2]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	707b      	strb	r3, [r7, #1]
    master->tx_len = 0;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    master->func_code = fc;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	787a      	ldrb	r2, [r7, #1]
 800d7ba:	715a      	strb	r2, [r3, #5]
    master->tx_buf[master->tx_len++] = master->slave_id;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	b291      	uxth	r1, r2
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	791a      	ldrb	r2, [r3, #4]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	440b      	add	r3, r1
 800d7d6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = master->func_code;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	b291      	uxth	r1, r2
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	795a      	ldrb	r2, [r3, #5]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	440b      	add	r3, r1
 800d7f4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr >> 8;
 800d7f8:	887b      	ldrh	r3, [r7, #2]
 800d7fa:	0a1b      	lsrs	r3, r3, #8
 800d7fc:	b298      	uxth	r0, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d804:	1c5a      	adds	r2, r3, #1
 800d806:	b291      	uxth	r1, r2
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d80e:	4619      	mov	r1, r3
 800d810:	b2c2      	uxtb	r2, r0
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	440b      	add	r3, r1
 800d816:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = addr & 0xFF;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	b291      	uxth	r1, r2
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d82a:	4619      	mov	r1, r3
 800d82c:	887b      	ldrh	r3, [r7, #2]
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	440b      	add	r3, r1
 800d834:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <master_read_holding_regs>:
    }
    return osError;
}

osStatus_t master_read_holding_regs(modbus_master *master, uint16_t addr, uint16_t qty, int16_t *result)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	817b      	strh	r3, [r7, #10]
 800d852:	4613      	mov	r3, r2
 800d854:	813b      	strh	r3, [r7, #8]
    master_compose_tx_buffer(master, addr, MODBUS_FC_READ_HOLDING_REGISTERS);
 800d856:	897b      	ldrh	r3, [r7, #10]
 800d858:	2203      	movs	r2, #3
 800d85a:	4619      	mov	r1, r3
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7ff ff9e 	bl	800d79e <master_compose_tx_buffer>
    master->tx_buf[master->tx_len++] = qty >> 8;
 800d862:	893b      	ldrh	r3, [r7, #8]
 800d864:	0a1b      	lsrs	r3, r3, #8
 800d866:	b298      	uxth	r0, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d86e:	1c5a      	adds	r2, r3, #1
 800d870:	b291      	uxth	r1, r2
 800d872:	68fa      	ldr	r2, [r7, #12]
 800d874:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d878:	4619      	mov	r1, r3
 800d87a:	b2c2      	uxtb	r2, r0
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	440b      	add	r3, r1
 800d880:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = qty & 0xFF;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	b291      	uxth	r1, r2
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d894:	4619      	mov	r1, r3
 800d896:	893b      	ldrh	r3, [r7, #8]
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	440b      	add	r3, r1
 800d89e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (master_request(master, MB_MASTER_REQUEST_TIMEOUT) == osOK)
 800d8a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f7ff fe22 	bl	800d4f0 <master_request>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d12d      	bne.n	800d90e <master_read_holding_regs+0xca>
    {
        if (master->rx_buf[2] != qty * 2)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	7b9b      	ldrb	r3, [r3, #14]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	893b      	ldrh	r3, [r7, #8]
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d002      	beq.n	800d8c6 <master_read_holding_regs+0x82>
        {
            return osError;
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c4:	e025      	b.n	800d912 <master_read_holding_regs+0xce>
        }
        for (uint16_t i = 0; i < qty; i++)
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	82fb      	strh	r3, [r7, #22]
 800d8ca:	e01a      	b.n	800d902 <master_read_holding_regs+0xbe>
        {
            result[i] = master->rx_buf[3 + i * 2] * 256 + master->rx_buf[4 + i * 2];
 800d8cc:	8afb      	ldrh	r3, [r7, #22]
 800d8ce:	005b      	lsls	r3, r3, #1
 800d8d0:	3303      	adds	r3, #3
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	7b1b      	ldrb	r3, [r3, #12]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	021b      	lsls	r3, r3, #8
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	8afb      	ldrh	r3, [r7, #22]
 800d8e0:	3302      	adds	r3, #2
 800d8e2:	005b      	lsls	r3, r3, #1
 800d8e4:	68f9      	ldr	r1, [r7, #12]
 800d8e6:	440b      	add	r3, r1
 800d8e8:	7b1b      	ldrb	r3, [r3, #12]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	b299      	uxth	r1, r3
 800d8f0:	8afb      	ldrh	r3, [r7, #22]
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b20a      	sxth	r2, r1
 800d8fa:	801a      	strh	r2, [r3, #0]
        for (uint16_t i = 0; i < qty; i++)
 800d8fc:	8afb      	ldrh	r3, [r7, #22]
 800d8fe:	3301      	adds	r3, #1
 800d900:	82fb      	strh	r3, [r7, #22]
 800d902:	8afa      	ldrh	r2, [r7, #22]
 800d904:	893b      	ldrh	r3, [r7, #8]
 800d906:	429a      	cmp	r2, r3
 800d908:	d3e0      	bcc.n	800d8cc <master_read_holding_regs+0x88>
        }
        return osOK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	e001      	b.n	800d912 <master_read_holding_regs+0xce>
    }
    return osError;
 800d90e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <master_write_single_coil>:

osStatus_t master_write_single_coil(modbus_master *master, uint16_t addr, uint8_t value)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	460b      	mov	r3, r1
 800d924:	807b      	strh	r3, [r7, #2]
 800d926:	4613      	mov	r3, r2
 800d928:	707b      	strb	r3, [r7, #1]
    master_compose_tx_buffer(master, addr, MODBUS_FC_WRITE_SINGLE_COIL);
 800d92a:	887b      	ldrh	r3, [r7, #2]
 800d92c:	2205      	movs	r2, #5
 800d92e:	4619      	mov	r1, r3
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7ff ff34 	bl	800d79e <master_compose_tx_buffer>
    master->tx_buf[master->tx_len++] = value ? 0xFF : 0x00;
 800d936:	787b      	ldrb	r3, [r7, #1]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d001      	beq.n	800d940 <master_write_single_coil+0x26>
 800d93c:	21ff      	movs	r1, #255	; 0xff
 800d93e:	e000      	b.n	800d942 <master_write_single_coil+0x28>
 800d940:	2100      	movs	r1, #0
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d948:	1c5a      	adds	r2, r3, #1
 800d94a:	b290      	uxth	r0, r2
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	f8a2 040e 	strh.w	r0, [r2, #1038]	; 0x40e
 800d952:	461a      	mov	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4413      	add	r3, r2
 800d958:	460a      	mov	r2, r1
 800d95a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = 0x00;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	b291      	uxth	r1, r2
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800d96e:	461a      	mov	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	2200      	movs	r2, #0
 800d976:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (master_request(master, MB_MASTER_REQUEST_TIMEOUT) == osOK)
 800d97a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff fdb6 	bl	800d4f0 <master_request>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d11c      	bne.n	800d9c4 <master_write_single_coil+0xaa>
    {
        if ((master->rx_buf[2] * 256 + master->rx_buf[3] != addr) || (master->rx_buf[4] * 256 + master->rx_buf[5] != (value ? 0xFF00 : 0x0000)))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7b9b      	ldrb	r3, [r3, #14]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	7bd2      	ldrb	r2, [r2, #15]
 800d994:	441a      	add	r2, r3
 800d996:	887b      	ldrh	r3, [r7, #2]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d10e      	bne.n	800d9ba <master_write_single_coil+0xa0>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7c1b      	ldrb	r3, [r3, #16]
 800d9a0:	021b      	lsls	r3, r3, #8
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	7c52      	ldrb	r2, [r2, #17]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	787a      	ldrb	r2, [r7, #1]
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	d002      	beq.n	800d9b4 <master_write_single_coil+0x9a>
 800d9ae:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800d9b2:	e000      	b.n	800d9b6 <master_write_single_coil+0x9c>
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d002      	beq.n	800d9c0 <master_write_single_coil+0xa6>
        {
            return osError;
 800d9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d9be:	e003      	b.n	800d9c8 <master_write_single_coil+0xae>
        }
        return osOK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	e001      	b.n	800d9c8 <master_write_single_coil+0xae>
    }
    return osError;
 800d9c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <master_write_multi_holding_regs>:
    }
    return osError;
}

osStatus_t master_write_multi_holding_regs(modbus_master *master, uint16_t addr, uint16_t qty, int16_t *value)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	607b      	str	r3, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	817b      	strh	r3, [r7, #10]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	813b      	strh	r3, [r7, #8]
    master_compose_tx_buffer(master, addr, MODBUS_FC_WRITE_MULTIPLE_REGISTERS);
 800d9e2:	897b      	ldrh	r3, [r7, #10]
 800d9e4:	2210      	movs	r2, #16
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff fed8 	bl	800d79e <master_compose_tx_buffer>
    master->tx_buf[master->tx_len++] = qty >> 8;
 800d9ee:	893b      	ldrh	r3, [r7, #8]
 800d9f0:	0a1b      	lsrs	r3, r3, #8
 800d9f2:	b298      	uxth	r0, r3
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800d9fa:	1c5a      	adds	r2, r3, #1
 800d9fc:	b291      	uxth	r1, r2
 800d9fe:	68fa      	ldr	r2, [r7, #12]
 800da00:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da04:	4619      	mov	r1, r3
 800da06:	b2c2      	uxtb	r2, r0
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	440b      	add	r3, r1
 800da0c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = qty & 0xFF;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	b291      	uxth	r1, r2
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da20:	4619      	mov	r1, r3
 800da22:	893b      	ldrh	r3, [r7, #8]
 800da24:	b2da      	uxtb	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	440b      	add	r3, r1
 800da2a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    master->tx_buf[master->tx_len++] = qty * 2;
 800da2e:	893b      	ldrh	r3, [r7, #8]
 800da30:	b2da      	uxtb	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da38:	1c59      	adds	r1, r3, #1
 800da3a:	b288      	uxth	r0, r1
 800da3c:	68f9      	ldr	r1, [r7, #12]
 800da3e:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800da42:	4619      	mov	r1, r3
 800da44:	0053      	lsls	r3, r2, #1
 800da46:	b2da      	uxtb	r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	440b      	add	r3, r1
 800da4c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    for (uint16_t i = 0; i < qty; i++)
 800da50:	2300      	movs	r3, #0
 800da52:	82fb      	strh	r3, [r7, #22]
 800da54:	e02c      	b.n	800dab0 <master_write_multi_holding_regs+0xe0>
    {
        master->tx_buf[master->tx_len++] = value[i] >> 8;
 800da56:	8afb      	ldrh	r3, [r7, #22]
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	4413      	add	r3, r2
 800da5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da62:	121b      	asrs	r3, r3, #8
 800da64:	b218      	sxth	r0, r3
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da6c:	1c5a      	adds	r2, r3, #1
 800da6e:	b291      	uxth	r1, r2
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da76:	4619      	mov	r1, r3
 800da78:	b2c2      	uxtb	r2, r0
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	440b      	add	r3, r1
 800da7e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        master->tx_buf[master->tx_len++] = value[i] & 0xFF;
 800da82:	8afb      	ldrh	r3, [r7, #22]
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	4413      	add	r3, r2
 800da8a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800da94:	1c5a      	adds	r2, r3, #1
 800da96:	b291      	uxth	r1, r2
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800da9e:	4619      	mov	r1, r3
 800daa0:	b2c2      	uxtb	r2, r0
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	440b      	add	r3, r1
 800daa6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    for (uint16_t i = 0; i < qty; i++)
 800daaa:	8afb      	ldrh	r3, [r7, #22]
 800daac:	3301      	adds	r3, #1
 800daae:	82fb      	strh	r3, [r7, #22]
 800dab0:	8afa      	ldrh	r2, [r7, #22]
 800dab2:	893b      	ldrh	r3, [r7, #8]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d3ce      	bcc.n	800da56 <master_write_multi_holding_regs+0x86>
    }
    if (master_request(master, MB_MASTER_REQUEST_TIMEOUT) == osOK)
 800dab8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fd17 	bl	800d4f0 <master_request>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d116      	bne.n	800daf6 <master_write_multi_holding_regs+0x126>
    {
        if ((master->rx_buf[2] * 256 + master->rx_buf[3] != addr) || (master->rx_buf[4] * 256 + master->rx_buf[5] != qty))
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	7b9b      	ldrb	r3, [r3, #14]
 800dacc:	021b      	lsls	r3, r3, #8
 800dace:	68fa      	ldr	r2, [r7, #12]
 800dad0:	7bd2      	ldrb	r2, [r2, #15]
 800dad2:	441a      	add	r2, r3
 800dad4:	897b      	ldrh	r3, [r7, #10]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d108      	bne.n	800daec <master_write_multi_holding_regs+0x11c>
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	7c1b      	ldrb	r3, [r3, #16]
 800dade:	021b      	lsls	r3, r3, #8
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	7c52      	ldrb	r2, [r2, #17]
 800dae4:	441a      	add	r2, r3
 800dae6:	893b      	ldrh	r3, [r7, #8]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d002      	beq.n	800daf2 <master_write_multi_holding_regs+0x122>
        {
            return osError;
 800daec:	f04f 33ff 	mov.w	r3, #4294967295
 800daf0:	e003      	b.n	800dafa <master_write_multi_holding_regs+0x12a>
        }
        return osOK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	e001      	b.n	800dafa <master_write_multi_holding_regs+0x12a>
    }
    return osError;
 800daf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	22ff      	movs	r2, #255	; 0xff
 800db12:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	22ff      	movs	r2, #255	; 0xff
 800db18:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800db1a:	e01c      	b.n	800db56 <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	799a      	ldrb	r2, [r3, #6]
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	1c59      	adds	r1, r3, #1
 800db24:	6039      	str	r1, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	4053      	eors	r3, r2
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	79da      	ldrb	r2, [r3, #7]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	895b      	ldrh	r3, [r3, #10]
 800db3a:	4619      	mov	r1, r3
 800db3c:	4b0d      	ldr	r3, [pc, #52]	; (800db74 <slave_crc16+0x70>)
 800db3e:	5c5b      	ldrb	r3, [r3, r1]
 800db40:	4053      	eors	r3, r2
 800db42:	b2da      	uxtb	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	895b      	ldrh	r3, [r3, #10]
 800db4c:	461a      	mov	r2, r3
 800db4e:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <slave_crc16+0x74>)
 800db50:	5c9a      	ldrb	r2, [r3, r2]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	891b      	ldrh	r3, [r3, #8]
 800db5a:	1e5a      	subs	r2, r3, #1
 800db5c:	b291      	uxth	r1, r2
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	8111      	strh	r1, [r2, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1da      	bne.n	800db1c <slave_crc16+0x18>
    }
}
 800db66:	bf00      	nop
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	0800f388 	.word	0x0800f388
 800db78:	0800f488 	.word	0x0800f488

0800db7c <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800db8a:	2b07      	cmp	r3, #7
 800db8c:	d905      	bls.n	800db9a <slave_validate_cmd+0x1e>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	7b1a      	ldrb	r2, [r3, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	791b      	ldrb	r3, [r3, #4]
 800db96:	429a      	cmp	r2, r3
 800db98:	d002      	beq.n	800dba0 <slave_validate_cmd+0x24>
    {
        return osError;
 800db9a:	f04f 33ff 	mov.w	r3, #4294967295
 800db9e:	e026      	b.n	800dbee <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800dba6:	3b02      	subs	r3, #2
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	330c      	adds	r3, #12
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff ffa5 	bl	800db04 <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	799a      	ldrb	r2, [r3, #6]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800dbc4:	3b02      	subs	r3, #2
 800dbc6:	6879      	ldr	r1, [r7, #4]
 800dbc8:	440b      	add	r3, r1
 800dbca:	7b1b      	ldrb	r3, [r3, #12]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d10a      	bne.n	800dbe6 <slave_validate_cmd+0x6a>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	79da      	ldrb	r2, [r3, #7]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	440b      	add	r3, r1
 800dbe0:	7b1b      	ldrb	r3, [r3, #12]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d002      	beq.n	800dbec <slave_validate_cmd+0x70>
    {
        return osError;
 800dbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbea:	e000      	b.n	800dbee <slave_validate_cmd+0x72>
    }
    return osOK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b087      	sub	sp, #28
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7b9b      	ldrb	r3, [r3, #14]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	021b      	lsls	r3, r3, #8
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	7bdb      	ldrb	r3, [r3, #15]
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7c1b      	ldrb	r3, [r3, #16]
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	021b      	lsls	r3, r3, #8
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7c5b      	ldrb	r3, [r3, #17]
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	4413      	add	r3, r2
 800dc24:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dc34:	1c5a      	adds	r2, r3, #1
 800dc36:	b291      	uxth	r1, r2
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dc3e:	4619      	mov	r1, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	791a      	ldrb	r2, [r3, #4]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	440b      	add	r3, r1
 800dc48:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800dc4c:	8a7a      	ldrh	r2, [r7, #18]
 800dc4e:	8a3b      	ldrh	r3, [r7, #16]
 800dc50:	4413      	add	r3, r2
 800dc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc56:	dd20      	ble.n	800dc9a <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	7b5a      	ldrb	r2, [r3, #13]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dc62:	1c59      	adds	r1, r3, #1
 800dc64:	b288      	uxth	r0, r1
 800dc66:	6879      	ldr	r1, [r7, #4]
 800dc68:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	440b      	add	r3, r1
 800dc78:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dc82:	1c5a      	adds	r2, r3, #1
 800dc84:	b291      	uxth	r1, r2
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4413      	add	r3, r2
 800dc92:	2202      	movs	r2, #2
 800dc94:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 800dc98:	e072      	b.n	800dd80 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 800dc9a:	8a3b      	ldrh	r3, [r7, #16]
 800dc9c:	f003 0307 	and.w	r3, r3, #7
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d103      	bne.n	800dcae <slave_handle_read_discs+0xb8>
 800dca6:	8a3b      	ldrh	r3, [r7, #16]
 800dca8:	08db      	lsrs	r3, r3, #3
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	e004      	b.n	800dcb8 <slave_handle_read_discs+0xc2>
 800dcae:	8a3b      	ldrh	r3, [r7, #16]
 800dcb0:	08db      	lsrs	r3, r3, #3
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dcc4:	1c5a      	adds	r2, r3, #1
 800dcc6:	b291      	uxth	r1, r2
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dcce:	4619      	mov	r1, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	7b5a      	ldrb	r2, [r3, #13]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	440b      	add	r3, r1
 800dcd8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	b291      	uxth	r1, r2
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dcec:	4619      	mov	r1, r3
 800dcee:	89fb      	ldrh	r3, [r7, #14]
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	440b      	add	r3, r1
 800dcf6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	82bb      	strh	r3, [r7, #20]
 800dcfe:	e03a      	b.n	800dd76 <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 800dd00:	8abb      	ldrh	r3, [r7, #20]
 800dd02:	f003 0307 	and.w	r3, r3, #7
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 800dd10:	8aba      	ldrh	r2, [r7, #20]
 800dd12:	8a3b      	ldrh	r3, [r7, #16]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d214      	bcs.n	800dd42 <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800dd1e:	8a79      	ldrh	r1, [r7, #18]
 800dd20:	8abb      	ldrh	r3, [r7, #20]
 800dd22:	440b      	add	r3, r1
 800dd24:	5cd3      	ldrb	r3, [r2, r3]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d106      	bne.n	800dd38 <slave_handle_read_discs+0x142>
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	085b      	lsrs	r3, r3, #1
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	e002      	b.n	800dd3e <slave_handle_read_discs+0x148>
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
 800dd3a:	085b      	lsrs	r3, r3, #1
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	75fb      	strb	r3, [r7, #23]
 800dd40:	e002      	b.n	800dd48 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 800dd42:	7dfb      	ldrb	r3, [r7, #23]
 800dd44:	085b      	lsrs	r3, r3, #1
 800dd46:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 800dd48:	8abb      	ldrh	r3, [r7, #20]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	f003 0307 	and.w	r3, r3, #7
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dd5a:	1c5a      	adds	r2, r3, #1
 800dd5c:	b291      	uxth	r1, r2
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dd64:	461a      	mov	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4413      	add	r3, r2
 800dd6a:	7dfa      	ldrb	r2, [r7, #23]
 800dd6c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800dd70:	8abb      	ldrh	r3, [r7, #20]
 800dd72:	3301      	adds	r3, #1
 800dd74:	82bb      	strh	r3, [r7, #20]
 800dd76:	8aba      	ldrh	r2, [r7, #20]
 800dd78:	89fb      	ldrh	r3, [r7, #14]
 800dd7a:	00db      	lsls	r3, r3, #3
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	dbbf      	blt.n	800dd00 <slave_handle_read_discs+0x10a>
}
 800dd80:	bf00      	nop
 800dd82:	371c      	adds	r7, #28
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b087      	sub	sp, #28
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7b9b      	ldrb	r3, [r3, #14]
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	021b      	lsls	r3, r3, #8
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	7bdb      	ldrb	r3, [r3, #15]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4413      	add	r3, r2
 800dda6:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	7c1b      	ldrb	r3, [r3, #16]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	7c5b      	ldrb	r3, [r3, #17]
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	4413      	add	r3, r2
 800ddba:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	b291      	uxth	r1, r2
 800ddce:	687a      	ldr	r2, [r7, #4]
 800ddd0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	791a      	ldrb	r2, [r3, #4]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	440b      	add	r3, r1
 800ddde:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800dde2:	8a7a      	ldrh	r2, [r7, #18]
 800dde4:	8a3b      	ldrh	r3, [r7, #16]
 800dde6:	4413      	add	r3, r2
 800dde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddec:	dd20      	ble.n	800de30 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7b5a      	ldrb	r2, [r3, #13]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800ddf8:	1c59      	adds	r1, r3, #1
 800ddfa:	b288      	uxth	r0, r1
 800ddfc:	6879      	ldr	r1, [r7, #4]
 800ddfe:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800de02:	4619      	mov	r1, r3
 800de04:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	440b      	add	r3, r1
 800de0e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	b291      	uxth	r1, r2
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800de22:	461a      	mov	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4413      	add	r3, r2
 800de28:	2202      	movs	r2, #2
 800de2a:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 800de2e:	e074      	b.n	800df1a <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 800de30:	8a3b      	ldrh	r3, [r7, #16]
 800de32:	f003 0307 	and.w	r3, r3, #7
 800de36:	b29b      	uxth	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d103      	bne.n	800de44 <slave_handle_read_coils+0xb8>
 800de3c:	8a3b      	ldrh	r3, [r7, #16]
 800de3e:	08db      	lsrs	r3, r3, #3
 800de40:	b29b      	uxth	r3, r3
 800de42:	e004      	b.n	800de4e <slave_handle_read_coils+0xc2>
 800de44:	8a3b      	ldrh	r3, [r7, #16]
 800de46:	08db      	lsrs	r3, r3, #3
 800de48:	b29b      	uxth	r3, r3
 800de4a:	3301      	adds	r3, #1
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de5a:	1c5a      	adds	r2, r3, #1
 800de5c:	b291      	uxth	r1, r2
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800de64:	4619      	mov	r1, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	7b5a      	ldrb	r2, [r3, #13]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	440b      	add	r3, r1
 800de6e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = byte_count;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	b291      	uxth	r1, r2
 800de7c:	687a      	ldr	r2, [r7, #4]
 800de7e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800de82:	4619      	mov	r1, r3
 800de84:	89fb      	ldrh	r3, [r7, #14]
 800de86:	b2da      	uxtb	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	440b      	add	r3, r1
 800de8c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800de90:	2300      	movs	r3, #0
 800de92:	82bb      	strh	r3, [r7, #20]
 800de94:	e03c      	b.n	800df10 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 800de96:	8abb      	ldrh	r3, [r7, #20]
 800de98:	f003 0307 	and.w	r3, r3, #7
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 800dea2:	2300      	movs	r3, #0
 800dea4:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 800dea6:	8aba      	ldrh	r2, [r7, #20]
 800dea8:	8a3b      	ldrh	r3, [r7, #16]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d216      	bcs.n	800dedc <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800deb4:	8a79      	ldrh	r1, [r7, #18]
 800deb6:	8abb      	ldrh	r3, [r7, #20]
 800deb8:	440b      	add	r3, r1
 800deba:	4413      	add	r3, r2
 800debc:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d106      	bne.n	800ded2 <slave_handle_read_coils+0x146>
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
 800dec6:	085b      	lsrs	r3, r3, #1
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	e002      	b.n	800ded8 <slave_handle_read_coils+0x14c>
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	085b      	lsrs	r3, r3, #1
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	75fb      	strb	r3, [r7, #23]
 800deda:	e002      	b.n	800dee2 <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 800dedc:	7dfb      	ldrb	r3, [r7, #23]
 800dede:	085b      	lsrs	r3, r3, #1
 800dee0:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 800dee2:	8abb      	ldrh	r3, [r7, #20]
 800dee4:	3301      	adds	r3, #1
 800dee6:	f003 0307 	and.w	r3, r3, #7
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10d      	bne.n	800df0a <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	b291      	uxth	r1, r2
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800defe:	461a      	mov	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4413      	add	r3, r2
 800df04:	7dfa      	ldrb	r2, [r7, #23]
 800df06:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 800df0a:	8abb      	ldrh	r3, [r7, #20]
 800df0c:	3301      	adds	r3, #1
 800df0e:	82bb      	strh	r3, [r7, #20]
 800df10:	8aba      	ldrh	r2, [r7, #20]
 800df12:	89fb      	ldrh	r3, [r7, #14]
 800df14:	00db      	lsls	r3, r3, #3
 800df16:	429a      	cmp	r2, r3
 800df18:	dbbd      	blt.n	800de96 <slave_handle_read_coils+0x10a>
}
 800df1a:	bf00      	nop
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 800df26:	b480      	push	{r7}
 800df28:	b085      	sub	sp, #20
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	7b9b      	ldrb	r3, [r3, #14]
 800df32:	b29b      	uxth	r3, r3
 800df34:	021b      	lsls	r3, r3, #8
 800df36:	b29a      	uxth	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	7bdb      	ldrb	r3, [r3, #15]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	4413      	add	r3, r2
 800df40:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7c1b      	ldrb	r3, [r3, #16]
 800df46:	b29b      	uxth	r3, r3
 800df48:	021b      	lsls	r3, r3, #8
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7c5b      	ldrb	r3, [r3, #17]
 800df50:	b29b      	uxth	r3, r3
 800df52:	4413      	add	r3, r2
 800df54:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	b291      	uxth	r1, r2
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800df6e:	4619      	mov	r1, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	791a      	ldrb	r2, [r3, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	440b      	add	r3, r1
 800df78:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800df7c:	89ba      	ldrh	r2, [r7, #12]
 800df7e:	897b      	ldrh	r3, [r7, #10]
 800df80:	4413      	add	r3, r2
 800df82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df86:	dd20      	ble.n	800dfca <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	7b5a      	ldrb	r2, [r3, #13]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800df92:	1c59      	adds	r1, r3, #1
 800df94:	b288      	uxth	r0, r1
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800df9c:	4619      	mov	r1, r3
 800df9e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800dfa2:	b2da      	uxtb	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	440b      	add	r3, r1
 800dfa8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	b291      	uxth	r1, r2
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 800dfc8:	e05b      	b.n	800e082 <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dfd0:	1c5a      	adds	r2, r3, #1
 800dfd2:	b291      	uxth	r1, r2
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800dfda:	4619      	mov	r1, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	7b5a      	ldrb	r2, [r3, #13]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	440b      	add	r3, r1
 800dfe4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 800dfe8:	897b      	ldrh	r3, [r7, #10]
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800dff2:	1c59      	adds	r1, r3, #1
 800dff4:	b288      	uxth	r0, r1
 800dff6:	6879      	ldr	r1, [r7, #4]
 800dff8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800dffc:	4619      	mov	r1, r3
 800dffe:	0053      	lsls	r3, r2, #1
 800e000:	b2da      	uxtb	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	440b      	add	r3, r1
 800e006:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800e00a:	2300      	movs	r3, #0
 800e00c:	81fb      	strh	r3, [r7, #14]
 800e00e:	e034      	b.n	800e07a <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e016:	89f9      	ldrh	r1, [r7, #14]
 800e018:	89ba      	ldrh	r2, [r7, #12]
 800e01a:	440a      	add	r2, r1
 800e01c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800e020:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800e024:	121b      	asrs	r3, r3, #8
 800e026:	b218      	sxth	r0, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	b291      	uxth	r1, r2
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e038:	4619      	mov	r1, r3
 800e03a:	b2c2      	uxtb	r2, r0
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	440b      	add	r3, r1
 800e040:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e04a:	89f9      	ldrh	r1, [r7, #14]
 800e04c:	89ba      	ldrh	r2, [r7, #12]
 800e04e:	440a      	add	r2, r1
 800e050:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800e054:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	b291      	uxth	r1, r2
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e068:	4619      	mov	r1, r3
 800e06a:	b2c2      	uxtb	r2, r0
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	440b      	add	r3, r1
 800e070:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800e074:	89fb      	ldrh	r3, [r7, #14]
 800e076:	3301      	adds	r3, #1
 800e078:	81fb      	strh	r3, [r7, #14]
 800e07a:	89fa      	ldrh	r2, [r7, #14]
 800e07c:	897b      	ldrh	r3, [r7, #10]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d3c6      	bcc.n	800e010 <slave_handle_read_input_regs+0xea>
}
 800e082:	bf00      	nop
 800e084:	3714      	adds	r7, #20
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 800e08e:	b480      	push	{r7}
 800e090:	b085      	sub	sp, #20
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	7b9b      	ldrb	r3, [r3, #14]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	7bdb      	ldrb	r3, [r3, #15]
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	4413      	add	r3, r2
 800e0a8:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	7c1b      	ldrb	r3, [r3, #16]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	021b      	lsls	r3, r3, #8
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	7c5b      	ldrb	r3, [r3, #17]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	4413      	add	r3, r2
 800e0bc:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	b291      	uxth	r1, r2
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	791a      	ldrb	r2, [r3, #4]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	440b      	add	r3, r1
 800e0e0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800e0e4:	89ba      	ldrh	r2, [r7, #12]
 800e0e6:	897b      	ldrh	r3, [r7, #10]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0ee:	dd20      	ble.n	800e132 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7b5a      	ldrb	r2, [r3, #13]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e0fa:	1c59      	adds	r1, r3, #1
 800e0fc:	b288      	uxth	r0, r1
 800e0fe:	6879      	ldr	r1, [r7, #4]
 800e100:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e104:	4619      	mov	r1, r3
 800e106:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e10a:	b2da      	uxtb	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	440b      	add	r3, r1
 800e110:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	b291      	uxth	r1, r2
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e124:	461a      	mov	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4413      	add	r3, r2
 800e12a:	2202      	movs	r2, #2
 800e12c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 800e130:	e05b      	b.n	800e1ea <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	b291      	uxth	r1, r2
 800e13c:	687a      	ldr	r2, [r7, #4]
 800e13e:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e142:	4619      	mov	r1, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7b5a      	ldrb	r2, [r3, #13]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	440b      	add	r3, r1
 800e14c:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 800e150:	897b      	ldrh	r3, [r7, #10]
 800e152:	b2da      	uxtb	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e15a:	1c59      	adds	r1, r3, #1
 800e15c:	b288      	uxth	r0, r1
 800e15e:	6879      	ldr	r1, [r7, #4]
 800e160:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e164:	4619      	mov	r1, r3
 800e166:	0053      	lsls	r3, r2, #1
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	440b      	add	r3, r1
 800e16e:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800e172:	2300      	movs	r3, #0
 800e174:	81fb      	strh	r3, [r7, #14]
 800e176:	e034      	b.n	800e1e2 <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e17e:	89f9      	ldrh	r1, [r7, #14]
 800e180:	89ba      	ldrh	r2, [r7, #12]
 800e182:	440a      	add	r2, r1
 800e184:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800e188:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800e18c:	121b      	asrs	r3, r3, #8
 800e18e:	b218      	sxth	r0, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	b291      	uxth	r1, r2
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	b2c2      	uxtb	r2, r0
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	440b      	add	r3, r1
 800e1a8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e1b2:	89f9      	ldrh	r1, [r7, #14]
 800e1b4:	89ba      	ldrh	r2, [r7, #12]
 800e1b6:	440a      	add	r2, r1
 800e1b8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800e1bc:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e1c6:	1c5a      	adds	r2, r3, #1
 800e1c8:	b291      	uxth	r1, r2
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	b2c2      	uxtb	r2, r0
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	440b      	add	r3, r1
 800e1d8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
 800e1dc:	89fb      	ldrh	r3, [r7, #14]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	81fb      	strh	r3, [r7, #14]
 800e1e2:	89fa      	ldrh	r2, [r7, #14]
 800e1e4:	897b      	ldrh	r3, [r7, #10]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d3c6      	bcc.n	800e178 <slave_handle_read_holding_regs+0xea>
}
 800e1ea:	bf00      	nop
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	b291      	uxth	r1, r2
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e20e:	4619      	mov	r1, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	7b5a      	ldrb	r2, [r3, #13]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	440b      	add	r3, r1
 800e218:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e222:	1c5a      	adds	r2, r3, #1
 800e224:	b291      	uxth	r1, r2
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e22c:	4619      	mov	r1, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7b9a      	ldrb	r2, [r3, #14]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	440b      	add	r3, r1
 800e236:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e240:	1c5a      	adds	r2, r3, #1
 800e242:	b291      	uxth	r1, r2
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e24a:	4619      	mov	r1, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7bda      	ldrb	r2, [r3, #15]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	440b      	add	r3, r1
 800e254:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e25e:	1c5a      	adds	r2, r3, #1
 800e260:	b291      	uxth	r1, r2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e268:	4619      	mov	r1, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	7c1a      	ldrb	r2, [r3, #16]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	440b      	add	r3, r1
 800e272:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e27c:	1c5a      	adds	r2, r3, #1
 800e27e:	b291      	uxth	r1, r2
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e286:	4619      	mov	r1, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7c5a      	ldrb	r2, [r3, #17]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	440b      	add	r3, r1
 800e290:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
}
 800e294:	bf00      	nop
 800e296:	370c      	adds	r7, #12
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	7b9b      	ldrb	r3, [r3, #14]
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	021b      	lsls	r3, r3, #8
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7bdb      	ldrb	r3, [r3, #15]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	4413      	add	r3, r2
 800e2ba:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	b291      	uxth	r1, r2
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	791a      	ldrb	r2, [r3, #4]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	440b      	add	r3, r1
 800e2de:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 800e2e2:	89fb      	ldrh	r3, [r7, #14]
 800e2e4:	2bff      	cmp	r3, #255	; 0xff
 800e2e6:	d920      	bls.n	800e32a <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	7b5a      	ldrb	r2, [r3, #13]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e2f2:	1c59      	adds	r1, r3, #1
 800e2f4:	b288      	uxth	r0, r1
 800e2f6:	6879      	ldr	r1, [r7, #4]
 800e2f8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e302:	b2da      	uxtb	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	440b      	add	r3, r1
 800e308:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	b291      	uxth	r1, r2
 800e316:	687a      	ldr	r2, [r7, #4]
 800e318:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e31c:	461a      	mov	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4413      	add	r3, r2
 800e322:	2202      	movs	r2, #2
 800e324:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 800e328:	e011      	b.n	800e34e <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7ff ff63 	bl	800e1f6 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7c1b      	ldrb	r3, [r3, #16]
 800e334:	2bff      	cmp	r3, #255	; 0xff
 800e336:	bf0c      	ite	eq
 800e338:	2301      	moveq	r3, #1
 800e33a:	2300      	movne	r3, #0
 800e33c:	b2d9      	uxtb	r1, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800e344:	89fb      	ldrh	r3, [r7, #14]
 800e346:	4413      	add	r3, r2
 800e348:	460a      	mov	r2, r1
 800e34a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 800e34e:	bf00      	nop
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}

0800e356 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 800e356:	b580      	push	{r7, lr}
 800e358:	b084      	sub	sp, #16
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7b9b      	ldrb	r3, [r3, #14]
 800e362:	b29b      	uxth	r3, r3
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	b29a      	uxth	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	7bdb      	ldrb	r3, [r3, #15]
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	4413      	add	r3, r2
 800e370:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	7c1b      	ldrb	r3, [r3, #16]
 800e376:	b29b      	uxth	r3, r3
 800e378:	021b      	lsls	r3, r3, #8
 800e37a:	b29a      	uxth	r2, r3
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	7c5b      	ldrb	r3, [r3, #17]
 800e380:	b29b      	uxth	r3, r3
 800e382:	4413      	add	r3, r2
 800e384:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	b291      	uxth	r1, r2
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e39e:	4619      	mov	r1, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	791a      	ldrb	r2, [r3, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	440b      	add	r3, r1
 800e3a8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800e3ac:	89ba      	ldrh	r2, [r7, #12]
 800e3ae:	897b      	ldrh	r3, [r7, #10]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3b6:	dd20      	ble.n	800e3fa <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7b5a      	ldrb	r2, [r3, #13]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e3c2:	1c59      	adds	r1, r3, #1
 800e3c4:	b288      	uxth	r0, r1
 800e3c6:	6879      	ldr	r1, [r7, #4]
 800e3c8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e3d2:	b2da      	uxtb	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	440b      	add	r3, r1
 800e3d8:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	b291      	uxth	r1, r2
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 800e3f8:	e027      	b.n	800e44a <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff fefb 	bl	800e1f6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 800e400:	2300      	movs	r3, #0
 800e402:	81fb      	strh	r3, [r7, #14]
 800e404:	e01d      	b.n	800e442 <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 800e406:	89fb      	ldrh	r3, [r7, #14]
 800e408:	08db      	lsrs	r3, r3, #3
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	3307      	adds	r3, #7
 800e40e:	687a      	ldr	r2, [r7, #4]
 800e410:	4413      	add	r3, r2
 800e412:	7b1b      	ldrb	r3, [r3, #12]
 800e414:	461a      	mov	r2, r3
 800e416:	89fb      	ldrh	r3, [r7, #14]
 800e418:	f003 0307 	and.w	r3, r3, #7
 800e41c:	fa42 f303 	asr.w	r3, r2, r3
 800e420:	b2d9      	uxtb	r1, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800e428:	89b8      	ldrh	r0, [r7, #12]
 800e42a:	89fb      	ldrh	r3, [r7, #14]
 800e42c:	4403      	add	r3, r0
 800e42e:	f001 0101 	and.w	r1, r1, #1
 800e432:	b2c9      	uxtb	r1, r1
 800e434:	4413      	add	r3, r2
 800e436:	460a      	mov	r2, r1
 800e438:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 800e43c:	89fb      	ldrh	r3, [r7, #14]
 800e43e:	3301      	adds	r3, #1
 800e440:	81fb      	strh	r3, [r7, #14]
 800e442:	89fa      	ldrh	r2, [r7, #14]
 800e444:	897b      	ldrh	r3, [r7, #10]
 800e446:	429a      	cmp	r2, r3
 800e448:	d3dd      	bcc.n	800e406 <slave_handle_write_multi_coils+0xb0>
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7b9b      	ldrb	r3, [r3, #14]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	021b      	lsls	r3, r3, #8
 800e462:	b29a      	uxth	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7bdb      	ldrb	r3, [r3, #15]
 800e468:	b29b      	uxth	r3, r3
 800e46a:	4413      	add	r3, r2
 800e46c:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	b291      	uxth	r1, r2
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e486:	4619      	mov	r1, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	791a      	ldrb	r2, [r3, #4]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	440b      	add	r3, r1
 800e490:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + 1 > MODBUS_REG_LENGTH)
 800e494:	89fb      	ldrh	r3, [r7, #14]
 800e496:	2bff      	cmp	r3, #255	; 0xff
 800e498:	d920      	bls.n	800e4dc <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	7b5a      	ldrb	r2, [r3, #13]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e4a4:	1c59      	adds	r1, r3, #1
 800e4a6:	b288      	uxth	r0, r1
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e4b4:	b2da      	uxtb	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	440b      	add	r3, r1
 800e4ba:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	b291      	uxth	r1, r2
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4413      	add	r3, r2
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 800e4da:	e015      	b.n	800e508 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f7ff fe8a 	bl	800e1f6 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7c1b      	ldrb	r3, [r3, #16]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	021b      	lsls	r3, r3, #8
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7c5b      	ldrb	r3, [r3, #17]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4413      	add	r3, r2
 800e4f4:	b299      	uxth	r1, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e4fc:	89fa      	ldrh	r2, [r7, #14]
 800e4fe:	b209      	sxth	r1, r1
 800e500:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800e504:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 800e508:	bf00      	nop
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	7b9b      	ldrb	r3, [r3, #14]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	021b      	lsls	r3, r3, #8
 800e520:	b29a      	uxth	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	7bdb      	ldrb	r3, [r3, #15]
 800e526:	b29b      	uxth	r3, r3
 800e528:	4413      	add	r3, r2
 800e52a:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	7c1b      	ldrb	r3, [r3, #16]
 800e530:	b29b      	uxth	r3, r3
 800e532:	021b      	lsls	r3, r3, #8
 800e534:	b29a      	uxth	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	7c5b      	ldrb	r3, [r3, #17]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	4413      	add	r3, r2
 800e53e:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2200      	movs	r2, #0
 800e544:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e54e:	1c5a      	adds	r2, r3, #1
 800e550:	b291      	uxth	r1, r2
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e558:	4619      	mov	r1, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	791a      	ldrb	r2, [r3, #4]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	440b      	add	r3, r1
 800e562:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    if (addr + qty > MODBUS_REG_LENGTH)
 800e566:	89ba      	ldrh	r2, [r7, #12]
 800e568:	897b      	ldrh	r3, [r7, #10]
 800e56a:	4413      	add	r3, r2
 800e56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e570:	dd20      	ble.n	800e5b4 <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7b5a      	ldrb	r2, [r3, #13]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e57c:	1c59      	adds	r1, r3, #1
 800e57e:	b288      	uxth	r0, r1
 800e580:	6879      	ldr	r1, [r7, #4]
 800e582:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e586:	4619      	mov	r1, r3
 800e588:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	440b      	add	r3, r1
 800e592:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	b291      	uxth	r1, r2
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 800e5b2:	e029      	b.n	800e608 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff fe1e 	bl	800e1f6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	81fb      	strh	r3, [r7, #14]
 800e5be:	e01f      	b.n	800e600 <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	005b      	lsls	r3, r3, #1
 800e5c4:	3307      	adds	r3, #7
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	7b1b      	ldrb	r3, [r3, #12]
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	021b      	lsls	r3, r3, #8
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	89fb      	ldrh	r3, [r7, #14]
 800e5d4:	3304      	adds	r3, #4
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	6879      	ldr	r1, [r7, #4]
 800e5da:	440b      	add	r3, r1
 800e5dc:	7b1b      	ldrb	r3, [r3, #12]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	4413      	add	r3, r2
 800e5e2:	b298      	uxth	r0, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800e5ea:	89b9      	ldrh	r1, [r7, #12]
 800e5ec:	89fa      	ldrh	r2, [r7, #14]
 800e5ee:	440a      	add	r2, r1
 800e5f0:	b201      	sxth	r1, r0
 800e5f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800e5f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 800e5fa:	89fb      	ldrh	r3, [r7, #14]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	81fb      	strh	r3, [r7, #14]
 800e600:	89fa      	ldrh	r2, [r7, #14]
 800e602:	897b      	ldrh	r3, [r7, #10]
 800e604:	429a      	cmp	r2, r3
 800e606:	d3db      	bcc.n	800e5c0 <slave_handle_write_multi_holding_regs+0xb0>
}
 800e608:	bf00      	nop
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <slave_response>:

static void slave_response(modbus_slave *slave)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff faaf 	bl	800db7c <slave_validate_cmd>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	f040 80b2 	bne.w	800e78a <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	7b5a      	ldrb	r2, [r3, #13]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	795b      	ldrb	r3, [r3, #5]
 800e632:	2b02      	cmp	r3, #2
 800e634:	d103      	bne.n	800e63e <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f7ff fadd 	bl	800dbf6 <slave_handle_read_discs>
 800e63c:	e06a      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	795b      	ldrb	r3, [r3, #5]
 800e642:	2b01      	cmp	r3, #1
 800e644:	d103      	bne.n	800e64e <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fba0 	bl	800dd8c <slave_handle_read_coils>
 800e64c:	e062      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	795b      	ldrb	r3, [r3, #5]
 800e652:	2b04      	cmp	r3, #4
 800e654:	d103      	bne.n	800e65e <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f7ff fc65 	bl	800df26 <slave_handle_read_input_regs>
 800e65c:	e05a      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	795b      	ldrb	r3, [r3, #5]
 800e662:	2b03      	cmp	r3, #3
 800e664:	d103      	bne.n	800e66e <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7ff fd11 	bl	800e08e <slave_handle_read_holding_regs>
 800e66c:	e052      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	795b      	ldrb	r3, [r3, #5]
 800e672:	2b05      	cmp	r3, #5
 800e674:	d103      	bne.n	800e67e <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f7ff fe12 	bl	800e2a0 <slave_handle_write_single_coil>
 800e67c:	e04a      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	795b      	ldrb	r3, [r3, #5]
 800e682:	2b0f      	cmp	r3, #15
 800e684:	d103      	bne.n	800e68e <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff fe65 	bl	800e356 <slave_handle_write_multi_coils>
 800e68c:	e042      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	795b      	ldrb	r3, [r3, #5]
 800e692:	2b06      	cmp	r3, #6
 800e694:	d103      	bne.n	800e69e <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff fedb 	bl	800e452 <slave_handle_write_single_holding_reg>
 800e69c:	e03a      	b.n	800e714 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	795b      	ldrb	r3, [r3, #5]
 800e6a2:	2b10      	cmp	r3, #16
 800e6a4:	d103      	bne.n	800e6ae <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f7ff ff32 	bl	800e510 <slave_handle_write_multi_holding_regs>
 800e6ac:	e032      	b.n	800e714 <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e6bc:	1c5a      	adds	r2, r3, #1
 800e6be:	b291      	uxth	r1, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	791a      	ldrb	r2, [r3, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	440b      	add	r3, r1
 800e6d0:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7b5a      	ldrb	r2, [r3, #13]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e6de:	1c59      	adds	r1, r3, #1
 800e6e0:	b288      	uxth	r0, r1
 800e6e2:	6879      	ldr	r1, [r7, #4]
 800e6e4:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800e6ee:	b2da      	uxtb	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	440b      	add	r3, r1
 800e6f4:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = 0x01;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	b291      	uxth	r1, r2
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e708:	461a      	mov	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	4413      	add	r3, r2
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    }
    slave->buff_len = slave->tx_len;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f203 230e 	addw	r3, r3, #526	; 0x20e
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff f9ec 	bl	800db04 <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	b291      	uxth	r1, r2
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e73c:	4619      	mov	r1, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	799a      	ldrb	r2, [r3, #6]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	440b      	add	r3, r1
 800e746:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	b291      	uxth	r1, r2
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	f8a2 140e 	strh.w	r1, [r2, #1038]	; 0x40e
 800e75a:	4619      	mov	r1, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	79da      	ldrb	r2, [r3, #7]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	440b      	add	r3, r1
 800e764:	f883 220e 	strb.w	r2, [r3, #526]	; 0x20e
    slave_set_tx_rx(slave, tx);
 800e768:	2101      	movs	r1, #1
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f8ac 	bl	800e8c8 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f203 210e 	addw	r1, r3, #526	; 0x20e
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 800e782:	461a      	mov	r2, r3
 800e784:	f7f9 ffe2 	bl	800874c <HAL_UART_Transmit_DMA>
 800e788:	e000      	b.n	800e78c <slave_response+0x17c>
        return;
 800e78a:	bf00      	nop
}
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR))
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d109      	bne.n	800e7ce <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fb fbfd 	bl	8009fc8 <osSemaphoreRelease>
    }
}
 800e7ce:	bf00      	nop
 800e7d0:	3710      	adds	r7, #16
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
	...

0800e7d8 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	603b      	str	r3, [r7, #0]
 800e7e4:	4613      	mov	r3, r2
 800e7e6:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	2001      	movs	r0, #1
 800e7ee:	f7fb fb0f 	bl	8009e10 <osSemaphoreNew>
 800e7f2:	4602      	mov	r2, r0
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	2100      	movs	r1, #0
 800e800:	4810      	ldr	r0, [pc, #64]	; (800e844 <slave_init+0x6c>)
 800e802:	f7fb fa5b 	bl	8009cbc <osTimerNew>
 800e806:	4602      	mov	r2, r0
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    slave->uart_port = port;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 800e814:	88fb      	ldrh	r3, [r7, #6]
 800e816:	b2da      	uxtb	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	683a      	ldr	r2, [r7, #0]
 800e820:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68da      	ldr	r2, [r3, #12]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f042 0210 	orr.w	r2, r2, #16
 800e83a:	60da      	str	r2, [r3, #12]
}
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	0800e793 	.word	0x0800e793

0800e848 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 0310 	and.w	r3, r3, #16
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d02e      	beq.n	800e8c0 <slave_uart_idle+0x78>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	f003 0310 	and.w	r3, r3, #16
 800e870:	2b00      	cmp	r3, #0
 800e872:	d025      	beq.n	800e8c0 <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	60fb      	str	r3, [r7, #12]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	60fb      	str	r3, [r7, #12]
 800e890:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->NDTR;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
        slave->idle_timer_flag = 0;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        osSemaphoreRelease(slave->idle_sem);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fb fb84 	bl	8009fc8 <osSemaphoreRelease>
    }
}
 800e8c0:	bf00      	nop
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	6858      	ldr	r0, [r3, #4]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	8919      	ldrh	r1, [r3, #8]
 800e8e0:	78fb      	ldrb	r3, [r7, #3]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	bf0c      	ite	eq
 800e8e6:	2301      	moveq	r3, #1
 800e8e8:	2300      	movne	r3, #0
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	f7f6 fdbb 	bl	8005468 <HAL_GPIO_WritePin>
}
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}

0800e8fa <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 800e8fa:	b580      	push	{r7, lr}
 800e8fc:	b082      	sub	sp, #8
 800e8fe:	af00      	add	r7, sp, #0
 800e900:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 800e902:	e024      	b.n	800e94e <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d107      	bne.n	800e91e <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800e914:	2102      	movs	r1, #2
 800e916:	4618      	mov	r0, r3
 800e918:	f7fb fa4c 	bl	8009db4 <osTimerStart>
 800e91c:	e017      	b.n	800e94e <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800e924:	2b01      	cmp	r3, #1
 800e926:	d112      	bne.n	800e94e <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f9 ffba 	bl	80088a8 <HAL_UART_DMAStop>
            slave_response(slave);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff fe6b 	bl	800e610 <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	6818      	ldr	r0, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	330c      	adds	r3, #12
 800e944:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e948:	4619      	mov	r1, r3
 800e94a:	f7f9 ff7d 	bl	8008848 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800e954:	f04f 31ff 	mov.w	r1, #4294967295
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fb fae3 	bl	8009f24 <osSemaphoreAcquire>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0cf      	beq.n	800e904 <slave_wait_request+0xa>
        }
    }
}
 800e964:	bf00      	nop
 800e966:	bf00      	nop
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <__errno>:
 800e970:	4b01      	ldr	r3, [pc, #4]	; (800e978 <__errno+0x8>)
 800e972:	6818      	ldr	r0, [r3, #0]
 800e974:	4770      	bx	lr
 800e976:	bf00      	nop
 800e978:	20000114 	.word	0x20000114

0800e97c <__libc_init_array>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	4d0d      	ldr	r5, [pc, #52]	; (800e9b4 <__libc_init_array+0x38>)
 800e980:	4c0d      	ldr	r4, [pc, #52]	; (800e9b8 <__libc_init_array+0x3c>)
 800e982:	1b64      	subs	r4, r4, r5
 800e984:	10a4      	asrs	r4, r4, #2
 800e986:	2600      	movs	r6, #0
 800e988:	42a6      	cmp	r6, r4
 800e98a:	d109      	bne.n	800e9a0 <__libc_init_array+0x24>
 800e98c:	4d0b      	ldr	r5, [pc, #44]	; (800e9bc <__libc_init_array+0x40>)
 800e98e:	4c0c      	ldr	r4, [pc, #48]	; (800e9c0 <__libc_init_array+0x44>)
 800e990:	f000 fb02 	bl	800ef98 <_init>
 800e994:	1b64      	subs	r4, r4, r5
 800e996:	10a4      	asrs	r4, r4, #2
 800e998:	2600      	movs	r6, #0
 800e99a:	42a6      	cmp	r6, r4
 800e99c:	d105      	bne.n	800e9aa <__libc_init_array+0x2e>
 800e99e:	bd70      	pop	{r4, r5, r6, pc}
 800e9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a4:	4798      	blx	r3
 800e9a6:	3601      	adds	r6, #1
 800e9a8:	e7ee      	b.n	800e988 <__libc_init_array+0xc>
 800e9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ae:	4798      	blx	r3
 800e9b0:	3601      	adds	r6, #1
 800e9b2:	e7f2      	b.n	800e99a <__libc_init_array+0x1e>
 800e9b4:	0800f5f4 	.word	0x0800f5f4
 800e9b8:	0800f5f4 	.word	0x0800f5f4
 800e9bc:	0800f5f4 	.word	0x0800f5f4
 800e9c0:	0800f5f8 	.word	0x0800f5f8

0800e9c4 <__retarget_lock_acquire_recursive>:
 800e9c4:	4770      	bx	lr

0800e9c6 <__retarget_lock_release_recursive>:
 800e9c6:	4770      	bx	lr

0800e9c8 <memcpy>:
 800e9c8:	440a      	add	r2, r1
 800e9ca:	4291      	cmp	r1, r2
 800e9cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9d0:	d100      	bne.n	800e9d4 <memcpy+0xc>
 800e9d2:	4770      	bx	lr
 800e9d4:	b510      	push	{r4, lr}
 800e9d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9de:	4291      	cmp	r1, r2
 800e9e0:	d1f9      	bne.n	800e9d6 <memcpy+0xe>
 800e9e2:	bd10      	pop	{r4, pc}

0800e9e4 <memset>:
 800e9e4:	4402      	add	r2, r0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d100      	bne.n	800e9ee <memset+0xa>
 800e9ec:	4770      	bx	lr
 800e9ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e9f2:	e7f9      	b.n	800e9e8 <memset+0x4>

0800e9f4 <cleanup_glue>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	460c      	mov	r4, r1
 800e9f8:	6809      	ldr	r1, [r1, #0]
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	b109      	cbz	r1, 800ea02 <cleanup_glue+0xe>
 800e9fe:	f7ff fff9 	bl	800e9f4 <cleanup_glue>
 800ea02:	4621      	mov	r1, r4
 800ea04:	4628      	mov	r0, r5
 800ea06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea0a:	f000 b869 	b.w	800eae0 <_free_r>
	...

0800ea10 <_reclaim_reent>:
 800ea10:	4b2c      	ldr	r3, [pc, #176]	; (800eac4 <_reclaim_reent+0xb4>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4283      	cmp	r3, r0
 800ea16:	b570      	push	{r4, r5, r6, lr}
 800ea18:	4604      	mov	r4, r0
 800ea1a:	d051      	beq.n	800eac0 <_reclaim_reent+0xb0>
 800ea1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ea1e:	b143      	cbz	r3, 800ea32 <_reclaim_reent+0x22>
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d14a      	bne.n	800eabc <_reclaim_reent+0xac>
 800ea26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea28:	6819      	ldr	r1, [r3, #0]
 800ea2a:	b111      	cbz	r1, 800ea32 <_reclaim_reent+0x22>
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f000 f857 	bl	800eae0 <_free_r>
 800ea32:	6961      	ldr	r1, [r4, #20]
 800ea34:	b111      	cbz	r1, 800ea3c <_reclaim_reent+0x2c>
 800ea36:	4620      	mov	r0, r4
 800ea38:	f000 f852 	bl	800eae0 <_free_r>
 800ea3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea3e:	b111      	cbz	r1, 800ea46 <_reclaim_reent+0x36>
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 f84d 	bl	800eae0 <_free_r>
 800ea46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea48:	b111      	cbz	r1, 800ea50 <_reclaim_reent+0x40>
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	f000 f848 	bl	800eae0 <_free_r>
 800ea50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea52:	b111      	cbz	r1, 800ea5a <_reclaim_reent+0x4a>
 800ea54:	4620      	mov	r0, r4
 800ea56:	f000 f843 	bl	800eae0 <_free_r>
 800ea5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea5c:	b111      	cbz	r1, 800ea64 <_reclaim_reent+0x54>
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f000 f83e 	bl	800eae0 <_free_r>
 800ea64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea66:	b111      	cbz	r1, 800ea6e <_reclaim_reent+0x5e>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f000 f839 	bl	800eae0 <_free_r>
 800ea6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea70:	b111      	cbz	r1, 800ea78 <_reclaim_reent+0x68>
 800ea72:	4620      	mov	r0, r4
 800ea74:	f000 f834 	bl	800eae0 <_free_r>
 800ea78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea7a:	b111      	cbz	r1, 800ea82 <_reclaim_reent+0x72>
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f000 f82f 	bl	800eae0 <_free_r>
 800ea82:	69a3      	ldr	r3, [r4, #24]
 800ea84:	b1e3      	cbz	r3, 800eac0 <_reclaim_reent+0xb0>
 800ea86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea88:	4620      	mov	r0, r4
 800ea8a:	4798      	blx	r3
 800ea8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea8e:	b1b9      	cbz	r1, 800eac0 <_reclaim_reent+0xb0>
 800ea90:	4620      	mov	r0, r4
 800ea92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea96:	f7ff bfad 	b.w	800e9f4 <cleanup_glue>
 800ea9a:	5949      	ldr	r1, [r1, r5]
 800ea9c:	b941      	cbnz	r1, 800eab0 <_reclaim_reent+0xa0>
 800ea9e:	3504      	adds	r5, #4
 800eaa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaa2:	2d80      	cmp	r5, #128	; 0x80
 800eaa4:	68d9      	ldr	r1, [r3, #12]
 800eaa6:	d1f8      	bne.n	800ea9a <_reclaim_reent+0x8a>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 f819 	bl	800eae0 <_free_r>
 800eaae:	e7ba      	b.n	800ea26 <_reclaim_reent+0x16>
 800eab0:	680e      	ldr	r6, [r1, #0]
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 f814 	bl	800eae0 <_free_r>
 800eab8:	4631      	mov	r1, r6
 800eaba:	e7ef      	b.n	800ea9c <_reclaim_reent+0x8c>
 800eabc:	2500      	movs	r5, #0
 800eabe:	e7ef      	b.n	800eaa0 <_reclaim_reent+0x90>
 800eac0:	bd70      	pop	{r4, r5, r6, pc}
 800eac2:	bf00      	nop
 800eac4:	20000114 	.word	0x20000114

0800eac8 <__malloc_lock>:
 800eac8:	4801      	ldr	r0, [pc, #4]	; (800ead0 <__malloc_lock+0x8>)
 800eaca:	f7ff bf7b 	b.w	800e9c4 <__retarget_lock_acquire_recursive>
 800eace:	bf00      	nop
 800ead0:	20006b88 	.word	0x20006b88

0800ead4 <__malloc_unlock>:
 800ead4:	4801      	ldr	r0, [pc, #4]	; (800eadc <__malloc_unlock+0x8>)
 800ead6:	f7ff bf76 	b.w	800e9c6 <__retarget_lock_release_recursive>
 800eada:	bf00      	nop
 800eadc:	20006b88 	.word	0x20006b88

0800eae0 <_free_r>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	2900      	cmp	r1, #0
 800eae4:	d048      	beq.n	800eb78 <_free_r+0x98>
 800eae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaea:	9001      	str	r0, [sp, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f1a1 0404 	sub.w	r4, r1, #4
 800eaf2:	bfb8      	it	lt
 800eaf4:	18e4      	addlt	r4, r4, r3
 800eaf6:	f7ff ffe7 	bl	800eac8 <__malloc_lock>
 800eafa:	4a20      	ldr	r2, [pc, #128]	; (800eb7c <_free_r+0x9c>)
 800eafc:	9801      	ldr	r0, [sp, #4]
 800eafe:	6813      	ldr	r3, [r2, #0]
 800eb00:	4615      	mov	r5, r2
 800eb02:	b933      	cbnz	r3, 800eb12 <_free_r+0x32>
 800eb04:	6063      	str	r3, [r4, #4]
 800eb06:	6014      	str	r4, [r2, #0]
 800eb08:	b003      	add	sp, #12
 800eb0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb0e:	f7ff bfe1 	b.w	800ead4 <__malloc_unlock>
 800eb12:	42a3      	cmp	r3, r4
 800eb14:	d90b      	bls.n	800eb2e <_free_r+0x4e>
 800eb16:	6821      	ldr	r1, [r4, #0]
 800eb18:	1862      	adds	r2, r4, r1
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	bf04      	itt	eq
 800eb1e:	681a      	ldreq	r2, [r3, #0]
 800eb20:	685b      	ldreq	r3, [r3, #4]
 800eb22:	6063      	str	r3, [r4, #4]
 800eb24:	bf04      	itt	eq
 800eb26:	1852      	addeq	r2, r2, r1
 800eb28:	6022      	streq	r2, [r4, #0]
 800eb2a:	602c      	str	r4, [r5, #0]
 800eb2c:	e7ec      	b.n	800eb08 <_free_r+0x28>
 800eb2e:	461a      	mov	r2, r3
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	b10b      	cbz	r3, 800eb38 <_free_r+0x58>
 800eb34:	42a3      	cmp	r3, r4
 800eb36:	d9fa      	bls.n	800eb2e <_free_r+0x4e>
 800eb38:	6811      	ldr	r1, [r2, #0]
 800eb3a:	1855      	adds	r5, r2, r1
 800eb3c:	42a5      	cmp	r5, r4
 800eb3e:	d10b      	bne.n	800eb58 <_free_r+0x78>
 800eb40:	6824      	ldr	r4, [r4, #0]
 800eb42:	4421      	add	r1, r4
 800eb44:	1854      	adds	r4, r2, r1
 800eb46:	42a3      	cmp	r3, r4
 800eb48:	6011      	str	r1, [r2, #0]
 800eb4a:	d1dd      	bne.n	800eb08 <_free_r+0x28>
 800eb4c:	681c      	ldr	r4, [r3, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	6053      	str	r3, [r2, #4]
 800eb52:	4421      	add	r1, r4
 800eb54:	6011      	str	r1, [r2, #0]
 800eb56:	e7d7      	b.n	800eb08 <_free_r+0x28>
 800eb58:	d902      	bls.n	800eb60 <_free_r+0x80>
 800eb5a:	230c      	movs	r3, #12
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	e7d3      	b.n	800eb08 <_free_r+0x28>
 800eb60:	6825      	ldr	r5, [r4, #0]
 800eb62:	1961      	adds	r1, r4, r5
 800eb64:	428b      	cmp	r3, r1
 800eb66:	bf04      	itt	eq
 800eb68:	6819      	ldreq	r1, [r3, #0]
 800eb6a:	685b      	ldreq	r3, [r3, #4]
 800eb6c:	6063      	str	r3, [r4, #4]
 800eb6e:	bf04      	itt	eq
 800eb70:	1949      	addeq	r1, r1, r5
 800eb72:	6021      	streq	r1, [r4, #0]
 800eb74:	6054      	str	r4, [r2, #4]
 800eb76:	e7c7      	b.n	800eb08 <_free_r+0x28>
 800eb78:	b003      	add	sp, #12
 800eb7a:	bd30      	pop	{r4, r5, pc}
 800eb7c:	20004b6c 	.word	0x20004b6c

0800eb80 <log>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	ed2d 8b02 	vpush	{d8}
 800eb86:	ec55 4b10 	vmov	r4, r5, d0
 800eb8a:	f000 f841 	bl	800ec10 <__ieee754_log>
 800eb8e:	4b1e      	ldr	r3, [pc, #120]	; (800ec08 <log+0x88>)
 800eb90:	eeb0 8a40 	vmov.f32	s16, s0
 800eb94:	eef0 8a60 	vmov.f32	s17, s1
 800eb98:	f993 3000 	ldrsb.w	r3, [r3]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	d01a      	beq.n	800ebd6 <log+0x56>
 800eba0:	4622      	mov	r2, r4
 800eba2:	462b      	mov	r3, r5
 800eba4:	4620      	mov	r0, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f1 ff68 	bl	8000a7c <__aeabi_dcmpun>
 800ebac:	b998      	cbnz	r0, 800ebd6 <log+0x56>
 800ebae:	2200      	movs	r2, #0
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	f7f1 ff57 	bl	8000a68 <__aeabi_dcmpgt>
 800ebba:	b960      	cbnz	r0, 800ebd6 <log+0x56>
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	f7f1 ff28 	bl	8000a18 <__aeabi_dcmpeq>
 800ebc8:	b160      	cbz	r0, 800ebe4 <log+0x64>
 800ebca:	f7ff fed1 	bl	800e970 <__errno>
 800ebce:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800ec00 <log+0x80>
 800ebd2:	2322      	movs	r3, #34	; 0x22
 800ebd4:	6003      	str	r3, [r0, #0]
 800ebd6:	eeb0 0a48 	vmov.f32	s0, s16
 800ebda:	eef0 0a68 	vmov.f32	s1, s17
 800ebde:	ecbd 8b02 	vpop	{d8}
 800ebe2:	bd38      	pop	{r3, r4, r5, pc}
 800ebe4:	f7ff fec4 	bl	800e970 <__errno>
 800ebe8:	ecbd 8b02 	vpop	{d8}
 800ebec:	2321      	movs	r3, #33	; 0x21
 800ebee:	6003      	str	r3, [r0, #0]
 800ebf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebf4:	4805      	ldr	r0, [pc, #20]	; (800ec0c <log+0x8c>)
 800ebf6:	f000 b9c7 	b.w	800ef88 <nan>
 800ebfa:	bf00      	nop
 800ebfc:	f3af 8000 	nop.w
 800ec00:	00000000 	.word	0x00000000
 800ec04:	fff00000 	.word	0xfff00000
 800ec08:	20000178 	.word	0x20000178
 800ec0c:	0800f5e8 	.word	0x0800f5e8

0800ec10 <__ieee754_log>:
 800ec10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec14:	ec51 0b10 	vmov	r0, r1, d0
 800ec18:	ed2d 8b04 	vpush	{d8-d9}
 800ec1c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ec20:	b083      	sub	sp, #12
 800ec22:	460d      	mov	r5, r1
 800ec24:	da29      	bge.n	800ec7a <__ieee754_log+0x6a>
 800ec26:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec2a:	4303      	orrs	r3, r0
 800ec2c:	ee10 2a10 	vmov	r2, s0
 800ec30:	d10c      	bne.n	800ec4c <__ieee754_log+0x3c>
 800ec32:	49cf      	ldr	r1, [pc, #828]	; (800ef70 <__ieee754_log+0x360>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	2300      	movs	r3, #0
 800ec38:	2000      	movs	r0, #0
 800ec3a:	f7f1 fdaf 	bl	800079c <__aeabi_ddiv>
 800ec3e:	ec41 0b10 	vmov	d0, r0, r1
 800ec42:	b003      	add	sp, #12
 800ec44:	ecbd 8b04 	vpop	{d8-d9}
 800ec48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4c:	2900      	cmp	r1, #0
 800ec4e:	da05      	bge.n	800ec5c <__ieee754_log+0x4c>
 800ec50:	460b      	mov	r3, r1
 800ec52:	f7f1 fac1 	bl	80001d8 <__aeabi_dsub>
 800ec56:	2200      	movs	r2, #0
 800ec58:	2300      	movs	r3, #0
 800ec5a:	e7ee      	b.n	800ec3a <__ieee754_log+0x2a>
 800ec5c:	4bc5      	ldr	r3, [pc, #788]	; (800ef74 <__ieee754_log+0x364>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f7f1 fc72 	bl	8000548 <__aeabi_dmul>
 800ec64:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ec68:	460d      	mov	r5, r1
 800ec6a:	4ac3      	ldr	r2, [pc, #780]	; (800ef78 <__ieee754_log+0x368>)
 800ec6c:	4295      	cmp	r5, r2
 800ec6e:	dd06      	ble.n	800ec7e <__ieee754_log+0x6e>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	f7f1 fab2 	bl	80001dc <__adddf3>
 800ec78:	e7e1      	b.n	800ec3e <__ieee754_log+0x2e>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e7f5      	b.n	800ec6a <__ieee754_log+0x5a>
 800ec7e:	152c      	asrs	r4, r5, #20
 800ec80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ec84:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ec88:	441c      	add	r4, r3
 800ec8a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ec8e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ec92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec96:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ec9a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ec9e:	ea42 0105 	orr.w	r1, r2, r5
 800eca2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800eca6:	2200      	movs	r2, #0
 800eca8:	4bb4      	ldr	r3, [pc, #720]	; (800ef7c <__ieee754_log+0x36c>)
 800ecaa:	f7f1 fa95 	bl	80001d8 <__aeabi_dsub>
 800ecae:	1cab      	adds	r3, r5, #2
 800ecb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	4682      	mov	sl, r0
 800ecb8:	468b      	mov	fp, r1
 800ecba:	f04f 0200 	mov.w	r2, #0
 800ecbe:	dc53      	bgt.n	800ed68 <__ieee754_log+0x158>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f7f1 fea9 	bl	8000a18 <__aeabi_dcmpeq>
 800ecc6:	b1d0      	cbz	r0, 800ecfe <__ieee754_log+0xee>
 800ecc8:	2c00      	cmp	r4, #0
 800ecca:	f000 8122 	beq.w	800ef12 <__ieee754_log+0x302>
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f7f1 fbd0 	bl	8000474 <__aeabi_i2d>
 800ecd4:	a390      	add	r3, pc, #576	; (adr r3, 800ef18 <__ieee754_log+0x308>)
 800ecd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecda:	4606      	mov	r6, r0
 800ecdc:	460f      	mov	r7, r1
 800ecde:	f7f1 fc33 	bl	8000548 <__aeabi_dmul>
 800ece2:	a38f      	add	r3, pc, #572	; (adr r3, 800ef20 <__ieee754_log+0x310>)
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	4604      	mov	r4, r0
 800ecea:	460d      	mov	r5, r1
 800ecec:	4630      	mov	r0, r6
 800ecee:	4639      	mov	r1, r7
 800ecf0:	f7f1 fc2a 	bl	8000548 <__aeabi_dmul>
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	e7ba      	b.n	800ec74 <__ieee754_log+0x64>
 800ecfe:	a38a      	add	r3, pc, #552	; (adr r3, 800ef28 <__ieee754_log+0x318>)
 800ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed04:	4650      	mov	r0, sl
 800ed06:	4659      	mov	r1, fp
 800ed08:	f7f1 fc1e 	bl	8000548 <__aeabi_dmul>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	2000      	movs	r0, #0
 800ed12:	499b      	ldr	r1, [pc, #620]	; (800ef80 <__ieee754_log+0x370>)
 800ed14:	f7f1 fa60 	bl	80001d8 <__aeabi_dsub>
 800ed18:	4652      	mov	r2, sl
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	460f      	mov	r7, r1
 800ed1e:	465b      	mov	r3, fp
 800ed20:	4650      	mov	r0, sl
 800ed22:	4659      	mov	r1, fp
 800ed24:	f7f1 fc10 	bl	8000548 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	4639      	mov	r1, r7
 800ed30:	f7f1 fc0a 	bl	8000548 <__aeabi_dmul>
 800ed34:	4606      	mov	r6, r0
 800ed36:	460f      	mov	r7, r1
 800ed38:	b914      	cbnz	r4, 800ed40 <__ieee754_log+0x130>
 800ed3a:	4632      	mov	r2, r6
 800ed3c:	463b      	mov	r3, r7
 800ed3e:	e0a2      	b.n	800ee86 <__ieee754_log+0x276>
 800ed40:	4620      	mov	r0, r4
 800ed42:	f7f1 fb97 	bl	8000474 <__aeabi_i2d>
 800ed46:	a374      	add	r3, pc, #464	; (adr r3, 800ef18 <__ieee754_log+0x308>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	4680      	mov	r8, r0
 800ed4e:	4689      	mov	r9, r1
 800ed50:	f7f1 fbfa 	bl	8000548 <__aeabi_dmul>
 800ed54:	a372      	add	r3, pc, #456	; (adr r3, 800ef20 <__ieee754_log+0x310>)
 800ed56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	460d      	mov	r5, r1
 800ed5e:	4640      	mov	r0, r8
 800ed60:	4649      	mov	r1, r9
 800ed62:	f7f1 fbf1 	bl	8000548 <__aeabi_dmul>
 800ed66:	e0a7      	b.n	800eeb8 <__ieee754_log+0x2a8>
 800ed68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed6c:	f7f1 fa36 	bl	80001dc <__adddf3>
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	4650      	mov	r0, sl
 800ed76:	4659      	mov	r1, fp
 800ed78:	f7f1 fd10 	bl	800079c <__aeabi_ddiv>
 800ed7c:	ec41 0b18 	vmov	d8, r0, r1
 800ed80:	4620      	mov	r0, r4
 800ed82:	f7f1 fb77 	bl	8000474 <__aeabi_i2d>
 800ed86:	ec53 2b18 	vmov	r2, r3, d8
 800ed8a:	ec41 0b19 	vmov	d9, r0, r1
 800ed8e:	ec51 0b18 	vmov	r0, r1, d8
 800ed92:	f7f1 fbd9 	bl	8000548 <__aeabi_dmul>
 800ed96:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ed9a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ed9e:	9301      	str	r3, [sp, #4]
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4680      	mov	r8, r0
 800eda6:	4689      	mov	r9, r1
 800eda8:	f7f1 fbce 	bl	8000548 <__aeabi_dmul>
 800edac:	a360      	add	r3, pc, #384	; (adr r3, 800ef30 <__ieee754_log+0x320>)
 800edae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb2:	4606      	mov	r6, r0
 800edb4:	460f      	mov	r7, r1
 800edb6:	f7f1 fbc7 	bl	8000548 <__aeabi_dmul>
 800edba:	a35f      	add	r3, pc, #380	; (adr r3, 800ef38 <__ieee754_log+0x328>)
 800edbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edc0:	f7f1 fa0c 	bl	80001dc <__adddf3>
 800edc4:	4632      	mov	r2, r6
 800edc6:	463b      	mov	r3, r7
 800edc8:	f7f1 fbbe 	bl	8000548 <__aeabi_dmul>
 800edcc:	a35c      	add	r3, pc, #368	; (adr r3, 800ef40 <__ieee754_log+0x330>)
 800edce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd2:	f7f1 fa03 	bl	80001dc <__adddf3>
 800edd6:	4632      	mov	r2, r6
 800edd8:	463b      	mov	r3, r7
 800edda:	f7f1 fbb5 	bl	8000548 <__aeabi_dmul>
 800edde:	a35a      	add	r3, pc, #360	; (adr r3, 800ef48 <__ieee754_log+0x338>)
 800ede0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede4:	f7f1 f9fa 	bl	80001dc <__adddf3>
 800ede8:	4642      	mov	r2, r8
 800edea:	464b      	mov	r3, r9
 800edec:	f7f1 fbac 	bl	8000548 <__aeabi_dmul>
 800edf0:	a357      	add	r3, pc, #348	; (adr r3, 800ef50 <__ieee754_log+0x340>)
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	4680      	mov	r8, r0
 800edf8:	4689      	mov	r9, r1
 800edfa:	4630      	mov	r0, r6
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fba3 	bl	8000548 <__aeabi_dmul>
 800ee02:	a355      	add	r3, pc, #340	; (adr r3, 800ef58 <__ieee754_log+0x348>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 f9e8 	bl	80001dc <__adddf3>
 800ee0c:	4632      	mov	r2, r6
 800ee0e:	463b      	mov	r3, r7
 800ee10:	f7f1 fb9a 	bl	8000548 <__aeabi_dmul>
 800ee14:	a352      	add	r3, pc, #328	; (adr r3, 800ef60 <__ieee754_log+0x350>)
 800ee16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1a:	f7f1 f9df 	bl	80001dc <__adddf3>
 800ee1e:	4632      	mov	r2, r6
 800ee20:	463b      	mov	r3, r7
 800ee22:	f7f1 fb91 	bl	8000548 <__aeabi_dmul>
 800ee26:	460b      	mov	r3, r1
 800ee28:	4602      	mov	r2, r0
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	4640      	mov	r0, r8
 800ee2e:	f7f1 f9d5 	bl	80001dc <__adddf3>
 800ee32:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ee36:	9b01      	ldr	r3, [sp, #4]
 800ee38:	3551      	adds	r5, #81	; 0x51
 800ee3a:	431d      	orrs	r5, r3
 800ee3c:	2d00      	cmp	r5, #0
 800ee3e:	4680      	mov	r8, r0
 800ee40:	4689      	mov	r9, r1
 800ee42:	dd48      	ble.n	800eed6 <__ieee754_log+0x2c6>
 800ee44:	4b4e      	ldr	r3, [pc, #312]	; (800ef80 <__ieee754_log+0x370>)
 800ee46:	2200      	movs	r2, #0
 800ee48:	4650      	mov	r0, sl
 800ee4a:	4659      	mov	r1, fp
 800ee4c:	f7f1 fb7c 	bl	8000548 <__aeabi_dmul>
 800ee50:	4652      	mov	r2, sl
 800ee52:	465b      	mov	r3, fp
 800ee54:	f7f1 fb78 	bl	8000548 <__aeabi_dmul>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	4606      	mov	r6, r0
 800ee5e:	460f      	mov	r7, r1
 800ee60:	4640      	mov	r0, r8
 800ee62:	4649      	mov	r1, r9
 800ee64:	f7f1 f9ba 	bl	80001dc <__adddf3>
 800ee68:	ec53 2b18 	vmov	r2, r3, d8
 800ee6c:	f7f1 fb6c 	bl	8000548 <__aeabi_dmul>
 800ee70:	4680      	mov	r8, r0
 800ee72:	4689      	mov	r9, r1
 800ee74:	b964      	cbnz	r4, 800ee90 <__ieee754_log+0x280>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	f7f1 f9ab 	bl	80001d8 <__aeabi_dsub>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4650      	mov	r0, sl
 800ee88:	4659      	mov	r1, fp
 800ee8a:	f7f1 f9a5 	bl	80001d8 <__aeabi_dsub>
 800ee8e:	e6d6      	b.n	800ec3e <__ieee754_log+0x2e>
 800ee90:	a321      	add	r3, pc, #132	; (adr r3, 800ef18 <__ieee754_log+0x308>)
 800ee92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee96:	ec51 0b19 	vmov	r0, r1, d9
 800ee9a:	f7f1 fb55 	bl	8000548 <__aeabi_dmul>
 800ee9e:	a320      	add	r3, pc, #128	; (adr r3, 800ef20 <__ieee754_log+0x310>)
 800eea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea4:	4604      	mov	r4, r0
 800eea6:	460d      	mov	r5, r1
 800eea8:	ec51 0b19 	vmov	r0, r1, d9
 800eeac:	f7f1 fb4c 	bl	8000548 <__aeabi_dmul>
 800eeb0:	4642      	mov	r2, r8
 800eeb2:	464b      	mov	r3, r9
 800eeb4:	f7f1 f992 	bl	80001dc <__adddf3>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	460b      	mov	r3, r1
 800eebc:	4630      	mov	r0, r6
 800eebe:	4639      	mov	r1, r7
 800eec0:	f7f1 f98a 	bl	80001d8 <__aeabi_dsub>
 800eec4:	4652      	mov	r2, sl
 800eec6:	465b      	mov	r3, fp
 800eec8:	f7f1 f986 	bl	80001d8 <__aeabi_dsub>
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	4620      	mov	r0, r4
 800eed2:	4629      	mov	r1, r5
 800eed4:	e7d9      	b.n	800ee8a <__ieee754_log+0x27a>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4650      	mov	r0, sl
 800eedc:	4659      	mov	r1, fp
 800eede:	f7f1 f97b 	bl	80001d8 <__aeabi_dsub>
 800eee2:	ec53 2b18 	vmov	r2, r3, d8
 800eee6:	f7f1 fb2f 	bl	8000548 <__aeabi_dmul>
 800eeea:	4606      	mov	r6, r0
 800eeec:	460f      	mov	r7, r1
 800eeee:	2c00      	cmp	r4, #0
 800eef0:	f43f af23 	beq.w	800ed3a <__ieee754_log+0x12a>
 800eef4:	a308      	add	r3, pc, #32	; (adr r3, 800ef18 <__ieee754_log+0x308>)
 800eef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefa:	ec51 0b19 	vmov	r0, r1, d9
 800eefe:	f7f1 fb23 	bl	8000548 <__aeabi_dmul>
 800ef02:	a307      	add	r3, pc, #28	; (adr r3, 800ef20 <__ieee754_log+0x310>)
 800ef04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef08:	4604      	mov	r4, r0
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	ec51 0b19 	vmov	r0, r1, d9
 800ef10:	e727      	b.n	800ed62 <__ieee754_log+0x152>
 800ef12:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800ef68 <__ieee754_log+0x358>
 800ef16:	e694      	b.n	800ec42 <__ieee754_log+0x32>
 800ef18:	fee00000 	.word	0xfee00000
 800ef1c:	3fe62e42 	.word	0x3fe62e42
 800ef20:	35793c76 	.word	0x35793c76
 800ef24:	3dea39ef 	.word	0x3dea39ef
 800ef28:	55555555 	.word	0x55555555
 800ef2c:	3fd55555 	.word	0x3fd55555
 800ef30:	df3e5244 	.word	0xdf3e5244
 800ef34:	3fc2f112 	.word	0x3fc2f112
 800ef38:	96cb03de 	.word	0x96cb03de
 800ef3c:	3fc74664 	.word	0x3fc74664
 800ef40:	94229359 	.word	0x94229359
 800ef44:	3fd24924 	.word	0x3fd24924
 800ef48:	55555593 	.word	0x55555593
 800ef4c:	3fe55555 	.word	0x3fe55555
 800ef50:	d078c69f 	.word	0xd078c69f
 800ef54:	3fc39a09 	.word	0x3fc39a09
 800ef58:	1d8e78af 	.word	0x1d8e78af
 800ef5c:	3fcc71c5 	.word	0x3fcc71c5
 800ef60:	9997fa04 	.word	0x9997fa04
 800ef64:	3fd99999 	.word	0x3fd99999
	...
 800ef70:	c3500000 	.word	0xc3500000
 800ef74:	43500000 	.word	0x43500000
 800ef78:	7fefffff 	.word	0x7fefffff
 800ef7c:	3ff00000 	.word	0x3ff00000
 800ef80:	3fe00000 	.word	0x3fe00000
 800ef84:	00000000 	.word	0x00000000

0800ef88 <nan>:
 800ef88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef90 <nan+0x8>
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	00000000 	.word	0x00000000
 800ef94:	7ff80000 	.word	0x7ff80000

0800ef98 <_init>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	bf00      	nop
 800ef9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9e:	bc08      	pop	{r3}
 800efa0:	469e      	mov	lr, r3
 800efa2:	4770      	bx	lr

0800efa4 <_fini>:
 800efa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efa6:	bf00      	nop
 800efa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efaa:	bc08      	pop	{r3}
 800efac:	469e      	mov	lr, r3
 800efae:	4770      	bx	lr
